protected int runAndRenderReport() { try { org.eclipse.birt.report.engine.api.IReportRunnable runnable = engine.openReportDesign(source); java.util.HashMap inputValues = evaluateParameterValues(runnable); org.eclipse.birt.report.engine.api.IRunAndRenderTask task = engine.createRunAndRenderTask(runnable); task.setParameterValues(inputValues); org.eclipse.birt.report.engine.api.IRenderOption options; if (format.equalsIgnoreCase("html")) { options = new org.eclipse.birt.report.engine.api.HTMLRenderOption(); if ("ReportletNoCSS".equals(htmlType)) ((org.eclipse.birt.report.engine.api.HTMLRenderOption) (options)).setEmbeddable(true); ((org.eclipse.birt.report.engine.api.HTMLRenderOption) (options)).setHtmlPagination(true); } else { options = new org.eclipse.birt.report.engine.api.RenderOptionBase(); } options.setOutputFormat(format); options.setOutputFileName(targetFile); options.getOutputSetting().put(HTMLRenderOption.URL_ENCODING, encoding); task.setRenderOption(options); if (format.equalsIgnoreCase("html")) { org.eclipse.birt.report.engine.api.HTMLRenderContext renderContext = new org.eclipse.birt.report.engine.api.HTMLRenderContext(); renderContext.setImageDirectory("image"); java.util.HashMap appContext = new java.util.HashMap(); appContext.put(EngineConstants.APPCONTEXT_HTML_RENDER_CONTEXT, renderContext); task.setAppContext(appContext); } task.setLocale(getLocale(locale)); task.run(); return 0; } catch (org.eclipse.birt.report.engine.api.EngineException e) { org.eclipse.birt.report.engine.api.ReportRunner.logger.log(java.util.logging.Level.SEVERE, e.getMessage(), e); return -1; } }
public void modify(java.lang.Object element, java.lang.String property, java.lang.Object value) { if (element instanceof org.eclipse.swt.widgets.Item) { element = ((org.eclipse.swt.widgets.Item) (element)).getData(); } org.eclipse.birt.report.model.api.elements.structures.SelectionChoice choice = ((org.eclipse.birt.report.model.api.elements.structures.SelectionChoice) (element)); { java.lang.String newValue = org.eclipse.birt.report.designer.internal.ui.util.UIUtil.convertToModelString(((java.lang.String) (value)), false); if (org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.COLUMN_VALUE.equals(property)) { java.lang.String errorMessage = isValidValue(newValue); if (errorMessage != null) { org.eclipse.birt.report.designer.internal.ui.util.ExceptionHandler.openMessageBox(org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.ERROR_TITLE_INVALID_INPUT, errorMessage, SWT.ICON_INFORMATION); return; } if (((choice.getLabel()) == null) && (containValue(choice, newValue, org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.COLUMN_DISPLAY_TEXT))) { org.eclipse.birt.report.designer.internal.ui.util.ExceptionHandler.openMessageBox(org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.ERROR_TITLE_INVALID_INPUT, org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.ERROR_MSG_DUPLICATED_LABEL, SWT.ICON_INFORMATION); return; } } newValue = convertToStandardFormat(newValue); if (containValue(choice, newValue, property)) { if (org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.COLUMN_DISPLAY_TEXT.equals(property)) { org.eclipse.birt.report.designer.internal.ui.util.ExceptionHandler.openMessageBox(org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.ERROR_TITLE_INVALID_INPUT, org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.ERROR_MSG_DUPLICATED_LABEL, SWT.ICON_INFORMATION); } else { org.eclipse.birt.report.designer.internal.ui.util.ExceptionHandler.openMessageBox(org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.ERROR_TITLE_INVALID_INPUT, org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.ERROR_MSG_DUPLICATED_VALUE, SWT.ICON_INFORMATION); } return; } if (choice == (org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.dummyChoice)) { choice = org.eclipse.birt.report.model.api.StructureFactory.createSelectionChoice(); choiceList.add(choice); } if (org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.COLUMN_VALUE.equals(property)) { if ((isDefaultChoice(choice)) && (!(org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.PARAM_CONTROL_LIST.equals(getSelectedControlType())))) { defaultValue = newValue; } choice.setValue(newValue); } else if (org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.COLUMN_DISPLAY_TEXT.equals(property)) { choice.setLabel(newValue); } } refreshValueTable(); }
public void initialize(org.mozilla.javascript.Context cx, org.mozilla.javascript.Scriptable scope) { try { org.mozilla.javascript.ScriptableObject.defineClass(scope, org.eclipse.birt.core.script.NativeFinance.class); org.mozilla.javascript.ScriptableObject.defineClass(scope, org.eclipse.birt.core.script.NativeDateTimeSpan.class); org.mozilla.javascript.ScriptableObject birtMath = new org.eclipse.birt.core.script.bre.BirtMath(); org.mozilla.javascript.ScriptableObject birtComp = new org.eclipse.birt.core.script.bre.BirtComp(); org.mozilla.javascript.ScriptableObject birtDateTime = new org.eclipse.birt.core.script.bre.BirtDateTime(); org.mozilla.javascript.ScriptableObject birtStr = new org.eclipse.birt.core.script.bre.BirtStr(); org.mozilla.javascript.ScriptableObject.putProperty(scope, birtMath.getClassName(), birtMath); org.mozilla.javascript.ScriptableObject.putProperty(scope, birtComp.getClassName(), birtComp); org.mozilla.javascript.ScriptableObject.putProperty(scope, birtDateTime.getClassName(), birtDateTime); org.mozilla.javascript.ScriptableObject.putProperty(scope, birtStr.getClassName(), new org.eclipse.birt.core.script.bre.BirtStr()); } catch (java.lang.Exception ex) { assert false; } }
protected void setupRenderOption() throws org.eclipse.birt.report.engine.api.EngineException { org.eclipse.birt.report.engine.extension.internal.ExtensionManager extManager = org.eclipse.birt.report.engine.extension.internal.ExtensionManager.getInstance(); if ((renderOptions) != null) { format = renderOptions.getOutputFormat(); emitterID = renderOptions.getEmitterID(); if ((emitterID) != null) { boolean validEmitterID = extManager.isValidEmitterID(emitterID); if (!validEmitterID) { log.log(java.util.logging.Level.SEVERE, MessageConstants.INVALID_EMITTER_ID, emitterID); throw new org.eclipse.birt.report.engine.api.EngineException(org.eclipse.birt.report.engine.i18n.MessageConstants.INVALID_EMITTER_ID, emitterID); } if (null == (format)) { renderOptions.setOutputFormat(extManager.getFormat(emitterID)); } } else { if ((format) == null) { format = org.eclipse.birt.report.engine.api.RenderOption.OUTPUT_FORMAT_HTML; renderOptions.setOutputFormat(format); emitterID = org.eclipse.birt.report.engine.api.RenderOption.OUTPUT_EMITTERID_HTML; } else { boolean supportedFormat = extManager.isSupportedFormat(format); if (!supportedFormat) { log.log(java.util.logging.Level.SEVERE, MessageConstants.FORMAT_NOT_SUPPORTED_EXCEPTION, format); throw new org.eclipse.birt.report.engine.api.UnsupportedFormatException(org.eclipse.birt.report.engine.i18n.MessageConstants.FORMAT_NOT_SUPPORTED_EXCEPTION, format); } else { emitterID = extManager.getEmitterID(format); } } } } java.util.Map appContext = executionContext.getAppContext(); if (IRenderOption.OUTPUT_EMITTERID_PDF.equals(emitterID)) { java.lang.Object renderContext = appContext.get(EngineConstants.APPCONTEXT_PDF_RENDER_CONTEXT); if (renderContext instanceof org.eclipse.birt.report.engine.api.PDFRenderContext) { org.eclipse.birt.report.engine.api.PDFRenderContext pdfContext = ((org.eclipse.birt.report.engine.api.PDFRenderContext) (renderContext)); mergeOption(renderOptions, PDFRenderOption.BASE_URL, pdfContext.getBaseURL()); mergeOption(renderOptions, PDFRenderOption.FONT_DIRECTORY, pdfContext.getFontDirectory()); mergeOption(renderOptions, PDFRenderOption.SUPPORTED_IMAGE_FORMATS, pdfContext.getSupportedImageFormats()); mergeOption(renderOptions, PDFRenderOption.IS_EMBEDDED_FONT, new java.lang.Boolean(pdfContext.isEmbededFont())); } } else { java.lang.Object renderContext = appContext.get(EngineConstants.APPCONTEXT_HTML_RENDER_CONTEXT); if (renderContext instanceof org.eclipse.birt.report.engine.api.HTMLRenderContext) { org.eclipse.birt.report.engine.api.HTMLRenderContext htmlContext = ((org.eclipse.birt.report.engine.api.HTMLRenderContext) (renderContext)); mergeOption(renderOptions, HTMLRenderOption.BASE_IMAGE_URL, htmlContext.getBaseImageURL()); mergeOption(renderOptions, HTMLRenderOption.BASE_URL, htmlContext.getBaseURL()); mergeOption(renderOptions, HTMLRenderOption.IMAGE_DIRECTROY, htmlContext.getImageDirectory()); mergeOption(renderOptions, HTMLRenderOption.SUPPORTED_IMAGE_FORMATS, htmlContext.getSupportedImageFormats()); } } java.util.HashMap options = new java.util.HashMap(); java.util.HashMap configs = engine.getConfig().getEmitterConfigs(); org.eclipse.birt.report.engine.api.IRenderOption defaultOptions = ((org.eclipse.birt.report.engine.api.IRenderOption) (configs.get(IEngineConfig.DEFAULT_RENDER_OPTION))); if (defaultOptions == null) { defaultOptions = ((org.eclipse.birt.report.engine.api.IRenderOption) (configs.get(IRenderOption.OUTPUT_FORMAT_HTML))); } if (defaultOptions != null) { options.putAll(defaultOptions.getOptions()); } org.eclipse.birt.report.engine.api.IRenderOption formatOptions = ((org.eclipse.birt.report.engine.api.IRenderOption) (configs.get(emitterID))); if (formatOptions != null) { options.putAll(formatOptions.getOptions()); } if ((emitterID) != null) { org.eclipse.birt.report.engine.api.IRenderOption emitterOptions = ((org.eclipse.birt.report.engine.api.IRenderOption) (configs.get(emitterID))); if (emitterOptions != null) { options.putAll(emitterOptions.getOptions()); } } if ((renderOptions) != null) { options.putAll(renderOptions.getOptions()); } org.eclipse.birt.report.engine.api.IRenderOption allOptions = new org.eclipse.birt.report.engine.api.RenderOption(options); executionContext.setRenderOption(allOptions); if (IRenderOption.OUTPUT_EMITTERID_PDF.equals(emitterID)) { java.lang.Object renderContext = appContext.get(EngineConstants.APPCONTEXT_PDF_RENDER_CONTEXT); if (renderContext == null) { org.eclipse.birt.report.engine.api.PDFRenderOption pdfOptions = new org.eclipse.birt.report.engine.api.PDFRenderOption(allOptions); org.eclipse.birt.report.engine.api.PDFRenderContext pdfContext = new org.eclipse.birt.report.engine.api.PDFRenderContext(); pdfContext.setBaseURL(pdfOptions.getBaseURL()); pdfContext.setEmbededFont(pdfOptions.isEmbededFont()); pdfContext.setFontDirectory(pdfOptions.getFontDirectory()); pdfContext.setSupportedImageFormats(pdfOptions.getSupportedImageFormats()); appContext.put(EngineConstants.APPCONTEXT_PDF_RENDER_CONTEXT, pdfContext); } } else { java.lang.Object renderContext = appContext.get(EngineConstants.APPCONTEXT_HTML_RENDER_CONTEXT); if (renderContext == null) { org.eclipse.birt.report.engine.api.HTMLRenderContext htmlContext = new org.eclipse.birt.report.engine.api.HTMLRenderContext(); org.eclipse.birt.report.engine.api.HTMLRenderOption htmlOptions = new org.eclipse.birt.report.engine.api.HTMLRenderOption(allOptions); htmlContext.setBaseImageURL(htmlOptions.getBaseImageURL()); htmlContext.setBaseURL(htmlOptions.getBaseURL()); htmlContext.setImageDirectory(htmlOptions.getImageDirectory()); htmlContext.setSupportedImageFormats(htmlOptions.getSupportedImageFormats()); htmlContext.SetRenderOption(allOptions); appContext.put(EngineConstants.APPCONTEXT_HTML_RENDER_CONTEXT, htmlContext); } } }
protected void initialize() { createRoot(); maxAvaWidth = parent.getCurrentMaxContentWidth(); maxAvaHeight = parent.getCurrentMaxContentHeight(); root.setWidth(parent.getCurrentMaxContentWidth()); setCurrentBP(0); setCurrentIP(0); setupMinHeight(); }
private void addSelection() { java.lang.String key = keyText.getText(); java.lang.String val = valueText.getText(); if ((key != null) && ((key.trim().length()) > 0)) { content.put(key, val); viewer.setInput(content); updateSelection(); } else { org.eclipse.jface.dialogs.MessageDialog.openWarning(getShell(), org.eclipse.birt.report.designer.nls.Messages.getString("ResourceEditDialog.text.AddWarningTitle"), org.eclipse.birt.report.designer.nls.Messages.getString("ResourceEditDialog.text.AddWarningMsg")); } }
private void bindSeriesQuery(java.lang.String expr, org.eclipse.birt.data.engine.olap.api.query.ICubeQueryDefinition cubeQuery, org.eclipse.birt.report.model.api.olap.CubeHandle cube) throws org.eclipse.birt.core.exception.BirtException { if ((expr != null) && ((expr.length()) > 0)) { java.lang.String bindingName = org.eclipse.birt.chart.reportitem.ChartXTabUtil.getBindingName(expr, true); org.eclipse.birt.data.engine.api.querydefn.Binding colBinding = null; if (bindingName != null) { java.util.List<java.lang.String> nameList = org.eclipse.birt.chart.reportitem.ChartXTabUtil.getBindingNameList(expr); if ((nameList.size()) > 1) { for (java.lang.String bn : nameList) { bindSeriesQuery(org.eclipse.birt.core.data.ExpressionUtil.createJSDataExpression(bn), cubeQuery, cube); } return; } colBinding = registeredBindings.get(bindingName); } if ((colBinding != null) || (bindingName != null)) { if (colBinding == null) { bindingName = org.eclipse.birt.report.model.api.StructureFactory.newComputedColumn(handle, expr.replaceAll("\"", "")).getName(); colBinding = new org.eclipse.birt.data.engine.api.querydefn.Binding(bindingName); colBinding.setDataType(org.eclipse.birt.core.data.DataType.ANY_TYPE); colBinding.setExpression(new org.eclipse.birt.data.engine.api.querydefn.ScriptExpression(expr)); registeredBindings.put(bindingName, colBinding); registeredQueries.put(bindingName, expr); registeredBindings.put(expr, colBinding); } else { bindingName = colBinding.getBindingName(); expr = registeredQueries.get(bindingName); } if (!(cubeQuery.getBindings().contains(colBinding))) { cubeQuery.addBinding(colBinding); } if (org.eclipse.birt.chart.reportitem.ChartXTabUtil.isBinding(expr, true)) { bindSeriesQuery(expr, cubeQuery, cube); return; } java.lang.String measure = org.eclipse.birt.chart.reportitem.ChartXTabUtil.getMeasureName(expr); if (measure != null) { if (registeredMeasures.containsKey(bindingName)) { return; } org.eclipse.birt.data.engine.olap.api.query.IMeasureDefinition mDef = cubeQuery.createMeasure(measure); java.lang.String aggFun = org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.adaptModelAggregationType(cube.getMeasure(measure).getFunction()); mDef.setAggrFunction(aggFun); registeredMeasures.put(bindingName, mDef); } else if (org.eclipse.birt.chart.reportitem.ChartXTabUtil.isDimensionExpresion(expr)) { if (registeredLevels.containsKey(bindingName)) { return; } java.lang.String[] levels = org.eclipse.birt.chart.reportitem.ChartXTabUtil.getLevelNameFromDimensionExpression(expr); java.lang.String dimensionName = levels[0]; final int edgeType = getEdgeType(dimensionName); org.eclipse.birt.data.engine.olap.api.query.IEdgeDefinition edge = cubeQuery.getEdge(edgeType); org.eclipse.birt.data.engine.olap.api.query.IHierarchyDefinition hieDef = null; if (edge == null) { edge = cubeQuery.createEdge(edgeType); org.eclipse.birt.data.engine.olap.api.query.IDimensionDefinition dimDef = edge.createDimension(dimensionName); hieDef = dimDef.createHierarchy(cube.getDimension(dimDef.getName()).getDefaultHierarchy().getName()); } else { hieDef = ((org.eclipse.birt.data.engine.olap.api.query.IHierarchyDefinition) (((org.eclipse.birt.data.engine.olap.api.query.IDimensionDefinition) (edge.getDimensions().get(0))).getHierarchy().get(0))); } boolean bMultipleLevels = !(hieDef.getLevels().isEmpty()); org.eclipse.birt.data.engine.olap.api.query.ILevelDefinition levelDef = hieDef.createLevel(levels[1]); registeredLevels.put(bindingName, levelDef); org.eclipse.birt.report.model.api.olap.LevelHandle levelHandle = handle.getModuleHandle().findLevel((((levelDef.getHierarchy().getDimension().getName()) + "/") + (levelDef.getName()))); registeredLevelHandles.put(levelHandle, levelDef); if (bMultipleLevels) { java.util.Iterator levelsInOrder = getAllLevelsInHierarchyOrder(cube, cubeQuery).iterator(); hieDef.getLevels().clear(); while (levelsInOrder.hasNext()) { org.eclipse.birt.data.engine.olap.api.query.ILevelDefinition level = ((org.eclipse.birt.data.engine.olap.api.query.ILevelDefinition) (levelsInOrder.next())); hieDef.createLevel(level.getName()); } } } } } }
protected final void renderPlane(org.eclipse.birt.chart.device.IPrimitiveRenderer ipr, java.lang.Object oSource, org.eclipse.birt.chart.model.attribute.Location[] loaFront, org.eclipse.birt.chart.model.attribute.Fill f, org.eclipse.birt.chart.model.attribute.LineAttributes lia, org.eclipse.birt.chart.model.attribute.ChartDimension cd, double dSeriesThickness, boolean bDeferred) throws org.eclipse.birt.chart.exception.ChartException { org.eclipse.birt.chart.event.PolygonRenderEvent pre; if ((cd.getValue()) == (org.eclipse.birt.chart.model.attribute.ChartDimension.TWO_DIMENSIONAL)) { pre = ((org.eclipse.birt.chart.event.PolygonRenderEvent) (((org.eclipse.birt.chart.event.EventObjectCache) (ipr)).getEventObject(oSource, org.eclipse.birt.chart.event.PolygonRenderEvent.class))); pre.setPoints(loaFront); pre.setBackground(f); pre.setOutline(lia); if (bDeferred) { dc.addPlane(pre, ((org.eclipse.birt.chart.event.PrimitiveRenderEvent.FILL) | (org.eclipse.birt.chart.event.PrimitiveRenderEvent.DRAW))); } else { ipr.fillPolygon(pre); ipr.drawPolygon(pre); } return; } final boolean bSolidColor = f instanceof org.eclipse.birt.chart.model.attribute.ColorDefinition; org.eclipse.birt.chart.model.attribute.Fill fDarker = null; org.eclipse.birt.chart.model.attribute.Fill fBrighter = null; if (((cd.getValue()) == (org.eclipse.birt.chart.model.attribute.ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH)) || ((cd.getValue()) == (org.eclipse.birt.chart.model.attribute.ChartDimension.THREE_DIMENSIONAL))) { fDarker = f; if (fDarker instanceof org.eclipse.birt.chart.model.attribute.ColorDefinition) { fDarker = ((org.eclipse.birt.chart.model.attribute.ColorDefinition) (fDarker)).darker(); } fBrighter = f; if (fBrighter instanceof org.eclipse.birt.chart.model.attribute.ColorDefinition) { fBrighter = ((org.eclipse.birt.chart.model.attribute.ColorDefinition) (fBrighter)).brighter(); } } final int nSides = loaFront.length; final org.eclipse.birt.chart.model.attribute.Location[][] loaa = new org.eclipse.birt.chart.model.attribute.Location[nSides + 1][]; org.eclipse.birt.chart.model.attribute.Location[] loa; double dY; double dSmallestY = 0; for (int j, i = 0; i < nSides; i++) { j = i + 1; if (j >= (loaFront.length)) j = 0; loa = new org.eclipse.birt.chart.model.attribute.Location[4]; loa[0] = org.eclipse.birt.chart.model.attribute.impl.LocationImpl.create(loaFront[i].getX(), loaFront[i].getY()); loa[1] = org.eclipse.birt.chart.model.attribute.impl.LocationImpl.create(loaFront[j].getX(), loaFront[j].getY()); loa[2] = org.eclipse.birt.chart.model.attribute.impl.LocationImpl.create(((loaFront[j].getX()) + dSeriesThickness), ((loaFront[j].getY()) - dSeriesThickness)); loa[3] = org.eclipse.birt.chart.model.attribute.impl.LocationImpl.create(((loaFront[i].getX()) + dSeriesThickness), ((loaFront[i].getY()) - dSeriesThickness)); loaa[i] = loa; } loaa[nSides] = loaFront; double dI; double dJ; org.eclipse.birt.chart.model.attribute.Location[] loaI; org.eclipse.birt.chart.model.attribute.Location[] loaJ; for (int i = 0; i < (nSides - 1); i++) { loaI = loaa[i]; for (int j = i + 1; j < nSides; j++) { loaJ = loaa[j]; dI = org.eclipse.birt.chart.render.BaseRenderer.getY(loaI, IConstants.AVERAGE); dJ = org.eclipse.birt.chart.render.BaseRenderer.getY(loaJ, IConstants.AVERAGE); if (org.eclipse.birt.chart.util.ChartUtil.mathGT(dJ, dI)) { loaa[i] = loaJ; loaa[j] = loaI; loaI = loaJ; } else if (org.eclipse.birt.chart.util.ChartUtil.mathEqual(dJ, dI)) { dI = org.eclipse.birt.chart.render.BaseRenderer.getX(loaI, IConstants.AVERAGE); dJ = org.eclipse.birt.chart.render.BaseRenderer.getX(loaJ, IConstants.AVERAGE); if (org.eclipse.birt.chart.util.ChartUtil.mathGT(dI, dJ)) { loaa[i] = loaJ; loaa[j] = loaI; loaI = loaJ; } } } } int iSmallestYIndex = 0; for (int i = 0; i < nSides; i++) { dY = org.eclipse.birt.chart.render.BaseRenderer.getY(loaa[i], IConstants.AVERAGE); if (i == 0) { dSmallestY = dY; } else if (org.eclipse.birt.chart.util.ChartUtil.mathGT(dSmallestY, dY)) { dSmallestY = dY; iSmallestYIndex = i; } } java.util.ArrayList alModel = new java.util.ArrayList((nSides + 1)); org.eclipse.birt.chart.model.attribute.Fill fP; for (int i = 0; i <= nSides; i++) { pre = ((org.eclipse.birt.chart.event.PolygonRenderEvent) (((org.eclipse.birt.chart.event.EventObjectCache) (ipr)).getEventObject(oSource, org.eclipse.birt.chart.event.PolygonRenderEvent.class))); pre.setOutline(lia); pre.setPoints(loaa[i]); if (i < nSides) { pre.setDepth((-dSeriesThickness)); } else { pre.setDepth(0); } if (i == nSides) { fP = f; } else if (i == iSmallestYIndex) { fP = fBrighter; } else { fP = fDarker; } pre.setBackground(fP); if (bDeferred) { alModel.add(pre.copy()); } else { ipr.fillPolygon(pre); } if (i == nSides) { } else if (i == iSmallestYIndex) { if (!bSolidColor) { pre.setBackground(org.eclipse.birt.chart.render.BaseRenderer.LIGHT_GLASS); } if (bDeferred) { alModel.add(pre.copy()); } else { ipr.fillPolygon(pre); } } else { if (!bSolidColor) { pre.setBackground(org.eclipse.birt.chart.render.BaseRenderer.DARK_GLASS); } if (bDeferred) { alModel.add(pre.copy()); } else { ipr.fillPolygon(pre); } } if (!bDeferred) { ipr.drawPolygon(pre); } } if (!(alModel.isEmpty())) { dc.addModel(new org.eclipse.birt.chart.event.WrappedInstruction(getDeferredCache(), alModel, org.eclipse.birt.chart.event.PrimitiveRenderEvent.FILL)); } }
protected void handleOpenMasterPage(final org.eclipse.birt.report.designer.core.util.mediator.request.ReportRequest request) { if (this.getContainer().isVisible()) { setActivePage(org.eclipse.birt.report.designer.ui.editors.MultiPageReportEditor.LayoutMasterPage_ID); org.eclipse.swt.widgets.Display.getCurrent().asyncExec(new java.lang.Runnable() { public void run() { org.eclipse.birt.report.designer.core.util.mediator.request.ReportRequest r = new org.eclipse.birt.report.designer.core.util.mediator.request.ReportRequest(); r.setType(ReportRequest.LOAD_MASTERPAGE); r.setSelectionObject(request.getSelectionModelList()); org.eclipse.birt.report.designer.core.model.SessionHandleAdapter.getInstance().getMediator().notifyRequest(r); } }); } }
public java.lang.Object getValue(org.eclipse.birt.data.engine.api.IBaseExpression dataExpr) throws org.eclipse.birt.core.exception.BirtException { org.eclipse.birt.data.engine.impl.ResultIterator.logger.logp(java.util.logging.Level.FINE, org.eclipse.birt.data.engine.impl.ResultIterator.class.getName(), "getValue", ("get of value IBaseExpression: " + (org.eclipse.birt.data.engine.impl.LogUtil.toString(dataExpr)))); checkStarted(); java.lang.Object exprValue = null; java.lang.Object handle = dataExpr.getHandle(); if (handle instanceof org.eclipse.birt.data.engine.impl.CompiledExpression) { org.eclipse.birt.data.engine.impl.CompiledExpression expr = ((org.eclipse.birt.data.engine.impl.CompiledExpression) (handle)); java.lang.Object value = org.eclipse.birt.data.engine.impl.ResultIterator.evaluateCompiledExpression(expr, odiResult, scope); try { exprValue = org.eclipse.birt.core.data.DataTypeUtil.convert(value, dataExpr.getDataType()); } catch (org.eclipse.birt.core.exception.BirtException e) { throw new org.eclipse.birt.data.engine.core.DataException(org.eclipse.birt.data.engine.i18n.ResourceConstants.INCONVERTIBLE_DATATYPE, new java.lang.Object[]{ value, value.getClass(), org.eclipse.birt.core.data.DataType.getClass(dataExpr.getDataType()) }); } } else if (handle instanceof org.eclipse.birt.data.engine.api.querydefn.ConditionalExpression) { org.eclipse.birt.data.engine.api.querydefn.ConditionalExpression ce = ((org.eclipse.birt.data.engine.api.querydefn.ConditionalExpression) (handle)); java.lang.Object resultExpr = getValue(ce.getExpression()); java.lang.Object resultOp1 = ((ce.getOperand1()) != null) ? getValue(ce.getOperand1()) : null; java.lang.Object resultOp2 = ((ce.getOperand2()) != null) ? getValue(ce.getOperand2()) : null; java.lang.String op1Text = ((ce.getOperand1()) != null) ? ce.getOperand1().getText() : null; java.lang.String op2Text = ((ce.getOperand2()) != null) ? ce.getOperand2().getText() : null; exprValue = org.eclipse.birt.data.engine.script.ScriptEvalUtil.evalConditionalExpr(resultExpr, ce.getOperator(), org.eclipse.birt.data.engine.script.ScriptEvalUtil.newExprInfo(op1Text, resultOp1), org.eclipse.birt.data.engine.script.ScriptEvalUtil.newExprInfo(op2Text, resultOp2)); } else { org.eclipse.birt.data.engine.core.DataException e = new org.eclipse.birt.data.engine.core.DataException(org.eclipse.birt.data.engine.i18n.ResourceConstants.INVALID_EXPR_HANDLE); org.eclipse.birt.data.engine.impl.ResultIterator.logger.logp(java.util.logging.Level.FINE, org.eclipse.birt.data.engine.impl.ResultIterator.class.getName(), "getValue", "Invalid expression handle.", e); throw e; } if (exprValue instanceof org.eclipse.birt.data.engine.script.DataExceptionMocker) { throw ((org.eclipse.birt.data.engine.script.DataExceptionMocker) (exprValue)).getCause(); } this.getRdSaveUtil().doSaveExpr(dataExpr, exprValue); return exprValue; }
public static org.eclipse.birt.report.model.api.simpleapi.IDesignElement getElement(org.eclipse.birt.report.model.api.DesignElementHandle element) { if (element == null) return null; if (element instanceof org.eclipse.birt.report.model.api.ReportDesignHandle) return new org.eclipse.birt.report.model.simpleapi.ReportDesign(((org.eclipse.birt.report.model.api.ReportDesignHandle) (element))); if (!(element instanceof org.eclipse.birt.report.model.api.ReportElementHandle)) return null; if (element instanceof org.eclipse.birt.report.model.api.DataItemHandle) return new org.eclipse.birt.report.model.simpleapi.DataItem(((org.eclipse.birt.report.model.api.DataItemHandle) (element))); if (element instanceof org.eclipse.birt.report.model.api.GridHandle) return new org.eclipse.birt.report.model.simpleapi.Grid(((org.eclipse.birt.report.model.api.GridHandle) (element))); if (element instanceof org.eclipse.birt.report.model.api.ImageHandle) return new org.eclipse.birt.report.model.simpleapi.Image(((org.eclipse.birt.report.model.api.ImageHandle) (element))); if (element instanceof org.eclipse.birt.report.model.api.LabelHandle) return new org.eclipse.birt.report.model.simpleapi.Label(((org.eclipse.birt.report.model.api.LabelHandle) (element))); if (element instanceof org.eclipse.birt.report.model.api.ListHandle) return new org.eclipse.birt.report.model.simpleapi.List(((org.eclipse.birt.report.model.api.ListHandle) (element))); if (element instanceof org.eclipse.birt.report.model.api.ListGroupHandle) return new org.eclipse.birt.report.model.simpleapi.ListGroup(((org.eclipse.birt.report.model.api.ListGroupHandle) (element))); if (element instanceof org.eclipse.birt.report.model.api.TableHandle) return new org.eclipse.birt.report.model.simpleapi.Table(((org.eclipse.birt.report.model.api.TableHandle) (element))); if (element instanceof org.eclipse.birt.report.model.api.TableGroupHandle) return new org.eclipse.birt.report.model.simpleapi.TableGroup(((org.eclipse.birt.report.model.api.TableGroupHandle) (element))); if (element instanceof org.eclipse.birt.report.model.api.TextDataHandle) return new org.eclipse.birt.report.model.simpleapi.DynamicText(((org.eclipse.birt.report.model.api.TextDataHandle) (element))); if (element instanceof org.eclipse.birt.report.model.api.TextItemHandle) return new org.eclipse.birt.report.model.simpleapi.TextItem(((org.eclipse.birt.report.model.api.TextItemHandle) (element))); if (element instanceof org.eclipse.birt.report.model.api.CellHandle) return new org.eclipse.birt.report.model.simpleapi.Cell(((org.eclipse.birt.report.model.api.CellHandle) (element))); if (element instanceof org.eclipse.birt.report.model.api.RowHandle) return new org.eclipse.birt.report.model.simpleapi.Row(((org.eclipse.birt.report.model.api.RowHandle) (element))); if (element instanceof org.eclipse.birt.report.model.api.ColumnHandle) return new org.eclipse.birt.report.model.simpleapi.Column(((org.eclipse.birt.report.model.api.ColumnHandle) (element))); if (element instanceof org.eclipse.birt.report.model.api.MasterPageHandle) { return new org.eclipse.birt.report.model.simpleapi.MasterPage(((org.eclipse.birt.report.model.api.MasterPageHandle) (element))); } if (element instanceof org.eclipse.birt.report.model.api.FilterConditionElementHandle) { return new org.eclipse.birt.report.model.simpleapi.FilterConditionElement(((org.eclipse.birt.report.model.api.FilterConditionElementHandle) (element))); } if (element instanceof org.eclipse.birt.report.model.api.ExtendedItemHandle) { org.eclipse.birt.report.model.api.simpleapi.IReportItem item = null; try { org.eclipse.birt.report.model.api.extension.IReportItem extensionItem = ((org.eclipse.birt.report.model.api.ExtendedItemHandle) (element)).getReportItem(); if (extensionItem != null) item = extensionItem.getSimpleElement(); } catch (org.eclipse.birt.report.model.api.extension.ExtendedElementException e) { } if (item == null) item = new org.eclipse.birt.report.model.simpleapi.ExtendedItem(((org.eclipse.birt.report.model.api.ExtendedItemHandle) (element))); return item; } return new org.eclipse.birt.report.model.simpleapi.ReportElement(((org.eclipse.birt.report.model.api.ReportElementHandle) (element))); }
public static java.util.List getSelectValueList(java.lang.String expression, org.eclipse.birt.report.model.api.DataSetHandle dataSetHandle, boolean inclFilter) throws org.eclipse.birt.core.exception.BirtException { if ((!(org.eclipse.birt.report.designer.data.ui.util.ExpressionUtility.isColumnExpression(expression, true))) && (!(org.eclipse.birt.report.designer.data.ui.util.ExpressionUtility.isColumnExpression(expression, false)))) { throw new org.eclipse.birt.data.engine.core.DataException(org.eclipse.birt.report.designer.nls.Messages.getString("SelectValueDialog.messages.info.invalidSelectVauleExpression")); } java.util.List selectValueList = new java.util.ArrayList(); if ((expression != null) && ((expression.trim().length()) > 0)) { org.eclipse.birt.data.engine.api.querydefn.QueryDefinition query = new org.eclipse.birt.data.engine.api.querydefn.QueryDefinition(); query.setDataSetName(dataSetHandle.getQualifiedName()); query.setAutoBinding(true); org.eclipse.birt.report.model.api.PropertyHandle handle = dataSetHandle.getPropertyHandle(DataSetHandle.PARAMETERS_PROP); if (handle != null) { java.util.Iterator paramIter = handle.iterator(); while (paramIter.hasNext()) { org.eclipse.birt.report.model.api.DataSetParameterHandle paramDefn = ((org.eclipse.birt.report.model.api.DataSetParameterHandle) (paramIter.next())); if (paramDefn.isInput()) { java.lang.String defaultValue = null; if ((paramDefn instanceof org.eclipse.birt.report.model.api.OdaDataSetParameterHandle) && ((((org.eclipse.birt.report.model.api.OdaDataSetParameterHandle) (paramDefn)).getParamName()) != null)) { defaultValue = org.eclipse.birt.report.designer.data.ui.util.DataUtil.getParamValue(dataSetHandle, ((org.eclipse.birt.report.model.api.OdaDataSetParameterHandle) (paramDefn))); } if (defaultValue != null) { org.eclipse.birt.data.engine.api.querydefn.InputParameterBinding binding = new org.eclipse.birt.data.engine.api.querydefn.InputParameterBinding(paramDefn.getName(), new org.eclipse.birt.data.engine.api.querydefn.ScriptExpression(defaultValue)); query.addInputParamBinding(binding); } } } } org.eclipse.birt.data.engine.api.IBaseExpression bindingExprGroup = new org.eclipse.birt.data.engine.api.querydefn.ScriptExpression(org.eclipse.birt.report.designer.data.ui.util.ExpressionUtility.getReplacedColRefExpr(expression)); org.eclipse.birt.data.engine.api.querydefn.GroupDefinition groupDefn = new org.eclipse.birt.data.engine.api.querydefn.GroupDefinition(org.eclipse.birt.report.designer.data.ui.util.SelectValueFetcher.BINDING_GROUP_NAME); groupDefn.setKeyExpression(org.eclipse.birt.report.designer.data.ui.util.SelectValueFetcher.BINDING_GROUP_EXPRESSION); query.addBinding(new org.eclipse.birt.data.engine.api.querydefn.Binding(org.eclipse.birt.report.designer.data.ui.util.SelectValueFetcher.BINDING_ROW_NAME, bindingExprGroup)); query.addGroup(groupDefn); query.setUsesDetails(false); org.eclipse.birt.report.data.adapter.api.DataRequestSession session = org.eclipse.birt.report.data.adapter.api.DataRequestSession.newSession(new org.eclipse.birt.report.data.adapter.api.DataSessionContext(org.eclipse.birt.report.data.adapter.api.DataSessionContext.MODE_DIRECT_PRESENTATION, (dataSetHandle == null ? null : dataSetHandle.getModuleHandle()))); if (dataSetHandle != null) { org.eclipse.birt.report.designer.data.ui.util.SelectValueFetcher.defineSourceAndDataSets(session, dataSetHandle, session.getModelAdaptor().adaptDataSet(dataSetHandle), inclFilter); } org.eclipse.birt.data.engine.api.IPreparedQuery preparedQuery = session.prepare(query); org.eclipse.birt.data.engine.api.IQueryResults results = preparedQuery.execute(null); if (results != null) { org.eclipse.birt.data.engine.api.IResultIterator iter = null; iter = results.getResultIterator(); if (iter != null) { while (iter.next()) { java.lang.Object candiateValue = iter.getValue(org.eclipse.birt.report.designer.data.ui.util.SelectValueFetcher.BINDING_ROW_NAME); if (candiateValue != null) { selectValueList.add(candiateValue); } iter.skipToEnd(1); } } results.close(); } session.shutdown(); } return selectValueList; }
public java.lang.Object onRowSets(org.eclipse.birt.report.engine.extension.IBaseResultSet[] baseResultSet) throws org.eclipse.birt.core.exception.BirtException { org.eclipse.birt.report.engine.extension.IBaseResultSet resultSet = getDataToRender(baseResultSet); boolean bAutoHide = ((cm) != null) && (!(cm.getEmptyMessage().isVisible())); if (resultSet == null) { return new java.lang.Object[]{ new byte[]{ 0 } }; } else if (org.eclipse.birt.chart.reportitem.ChartReportItemUtil.isEmpty(resultSet)) { if (bAutoHide) { return null; } } org.eclipse.birt.chart.model.attribute.Bounds bo = cm.getBlock().getBounds(); if (((bo.getWidth()) == 0) && ((bo.getHeight()) == 0)) { return null; } try { if (((rtc.getSharedScale()) == null) && (org.eclipse.birt.chart.reportitem.ChartReportItemUtil.canScaleShared(handle, cm))) { rtc.setSharedScale(createSharedScale(resultSet)); } boolean isSharingQuery = false; if (((handle.getDataBindingReference()) != null) || ((handle.getContainer()) instanceof org.eclipse.birt.report.model.api.MultiViewsHandle)) { isSharingQuery = true; } rtc.setSharingQuery(isSharingQuery); org.eclipse.birt.chart.reportitem.BIRTExternalContext externalContext = new org.eclipse.birt.chart.reportitem.BIRTExternalContext(context); if (((rtc.getScriptContext()) != null) && ((rtc.getScriptContext()) instanceof org.eclipse.birt.chart.script.ChartScriptContext)) { ((org.eclipse.birt.chart.script.ChartScriptContext) (rtc.getScriptContext())).setExternalContext(externalContext); } initializeScriptHandler(externalContext); org.eclipse.birt.chart.factory.IDataRowExpressionEvaluator rowAdapter = createEvaluator(resultSet); org.eclipse.birt.chart.factory.IActionEvaluator evaluator = new org.eclipse.birt.chart.reportitem.BIRTActionEvaluator(); if ((!(bindData(rowAdapter, evaluator))) && bAutoHide) { return null; } prepareDeviceRenderer(); org.eclipse.birt.chart.factory.GeneratedChartState gcs = buildChart(rowAdapter, externalContext); renderToImageFile(gcs); rowAdapter.close(); if (((rtc.getSharedScale()) != null) && (!(rtc.getSharedScale().isShared()))) { rtc.getSharedScale().setShared(true); ((org.eclipse.birt.chart.reportitem.ChartReportItemImpl) (getReportItem(handle))).setSharedScale(rtc.getSharedScale()); } return getImageToDisplay(); } catch (java.lang.RuntimeException ex) { org.eclipse.birt.chart.reportitem.ChartReportItemPresentationBase.logger.log(ILogger.ERROR, org.eclipse.birt.chart.reportitem.i18n.Messages.getString("ChartReportItemPresentationImpl.log.onRowSetsFailed")); org.eclipse.birt.chart.reportitem.ChartReportItemPresentationBase.logger.log(ex); throw new org.eclipse.birt.chart.exception.ChartException(org.eclipse.birt.chart.reportitem.plugin.ChartReportItemPlugin.ID, org.eclipse.birt.chart.exception.ChartException.GENERATION, ex); } }
public void setFontSize(float fontSize) { this.fontSize = fontSize; this.fontPadding = (this.fontSize) / 5.0F; this.lineWidth = (this.fontSize) / 20.0F; }
public void link() { report.setReportDesign(handle); org.eclipse.birt.report.engine.ir.PageSetupDesign pageSetup = report.getPageSetup(); int masterPageCount = pageSetup.getMasterPageCount(); for (int i = 0; i < masterPageCount; i++) { org.eclipse.birt.report.engine.ir.SimpleMasterPageDesign masterPage = ((org.eclipse.birt.report.engine.ir.SimpleMasterPageDesign) (pageSetup.getMasterPage(i))); linkReportElement(masterPage); int count = masterPage.getHeaderCount(); for (int j = 0; j < count; j++) { org.eclipse.birt.report.engine.ir.ReportItemDesign item = masterPage.getHeader(i); item.accept(this, null); } count = masterPage.getFooterCount(); for (int j = 0; j < count; j++) { org.eclipse.birt.report.engine.ir.ReportItemDesign item = masterPage.getFooter(i); item.accept(this, null); } } int count = report.getContentCount(); for (int i = 0; i < count; i++) { org.eclipse.birt.report.engine.ir.ReportItemDesign item = report.getContent(i); item.accept(this, null); } }
public ColumnWidthResolver(org.eclipse.birt.report.engine.content.ITableContent table) { this.table = table; org.eclipse.birt.report.engine.presentation.TableColumnHint hint = null; org.eclipse.birt.report.engine.api.InstanceID id = table.getInstanceID(); if (id != null) { java.lang.String tableId = id.toUniqueString(); hint = this.context.getTableColumnHint(tableId); } if (hint != null) { start = hint.getStart(); end = (hint.getColumnCount()) + (start); } else { start = 0; end = table.getColumnCount(); } }
private static java.util.List getExprTextList(org.eclipse.birt.data.engine.api.IBaseExpression expression) { java.util.List textList = new java.util.ArrayList(); if (expression instanceof org.eclipse.birt.data.engine.api.IScriptExpression) { textList.add(((org.eclipse.birt.data.engine.api.IScriptExpression) (expression)).getText()); } else if (expression instanceof org.eclipse.birt.data.engine.api.IExpressionCollection) { java.util.List exprList = ((java.util.List) (((org.eclipse.birt.data.engine.api.IExpressionCollection) (expression)).getExpressions())); for (int i = 0; i < (exprList.size()); i++) { org.eclipse.birt.data.engine.api.IBaseExpression baseExpr = ((org.eclipse.birt.data.engine.api.IBaseExpression) (exprList.get(i))); textList.addAll(org.eclipse.birt.data.engine.olap.query.view.CubeQueryDefinitionUtil.getExprTextList(expression)); } } else if (expression instanceof org.eclipse.birt.data.engine.api.IConditionalExpression) { textList.add(((org.eclipse.birt.data.engine.api.IScriptExpression) (((org.eclipse.birt.data.engine.api.IConditionalExpression) (expression)).getExpression())).getText()); textList.addAll(org.eclipse.birt.data.engine.olap.query.view.CubeQueryDefinitionUtil.getExprTextList(((org.eclipse.birt.data.engine.api.IConditionalExpression) (expression)).getOperand1())); textList.addAll(org.eclipse.birt.data.engine.olap.query.view.CubeQueryDefinitionUtil.getExprTextList(((org.eclipse.birt.data.engine.api.IConditionalExpression) (expression)).getOperand2())); } return textList; }
private static java.lang.String cleanDate(java.lang.String s) { s = s.trim(); if ((s.indexOf('T')) < 12) { s = s.replaceFirst("T", " "); } int zoneIndex = s.indexOf("GMT"); if (zoneIndex > 0) { return s.substring(0, zoneIndex).trim(); } zoneIndex = s.indexOf('Z'); if (zoneIndex == ((s.length()) - 1)) { return s.substring(0, zoneIndex).trim(); } zoneIndex = org.eclipse.birt.core.data.DateFormatISO8601.getZoneIndex(s); if (zoneIndex > 0) { return s.substring(0, zoneIndex).trim(); } return s; }
private boolean isModelInModuleHandle() { java.util.List list = getModelChildren(); int size = list.size(); for (int i = 0; i < size; i++) { java.lang.Object obj = list.get(i); if (obj instanceof org.eclipse.birt.report.model.api.DesignElementHandle) { org.eclipse.birt.report.model.api.DesignElementHandle handle = ((org.eclipse.birt.report.model.api.DesignElementHandle) (obj)); if (((handle.getRoot()) == null) && ((!(getChildren().isEmpty())) && (((org.eclipse.gef.EditPart) (getChildren().get(0))).getModel().equals(handle)))) { return false; } } } return true; }
public void doSave(org.eclipse.birt.data.engine.impl.document.StreamWrapper streamsWrapper, boolean isSubQuery) throws org.eclipse.birt.data.engine.core.DataException { if ((streamsWrapper.getStreamForGroupInfo()) != null) { this.resultSetPopulator.getGroupProcessorManager().getGroupCalculationUtil().doSave(streamsWrapper.getStreamForGroupInfo()); } if (((isSubQuery == false) && (!(org.eclipse.birt.data.engine.executor.transform.CachedResultSet.isSummaryQuery(this.resultSetPopulator.getQuery())))) && ((streamsWrapper.getStreamForResultClass()) != null)) { ((org.eclipse.birt.data.engine.executor.ResultClass) (this.resultSetPopulator.getResultSetMetadata())).doSave(streamsWrapper.getStreamForResultClass(), resultSetPopulator.getEventHandler().getAllColumnBindings()); try { streamsWrapper.getStreamForResultClass().close(); if ((streamsWrapper.getStreamForDataSet()) != null) { this.resultSetPopulator.getCache().doSave(streamsWrapper.getStreamForDataSet(), streamsWrapper.getStreamForDataSetRowLens(), resultSetPopulator.getEventHandler().getAllColumnBindings()); } streamsWrapper.getStreamForDataSet().close(); streamsWrapper.getStreamForDataSetRowLens().close(); } catch (java.io.IOException e) { org.eclipse.birt.data.engine.executor.transform.CachedResultSet.logger.log(java.util.logging.Level.FINE, e.getMessage(), e); } } if ((streamsWrapper.getStreamManager().getVersion()) >= (org.eclipse.birt.data.engine.impl.document.stream.VersionManager.VERSION_2_5_1_0)) { if (!(aggrHolderManager.isEmpty())) { aggrHolderManager.doSave(streamsWrapper.getStreamManager().getOutStream(DataEngineContext.AGGR_INDEX_STREAM, StreamManager.ROOT_STREAM, StreamManager.BASE_SCOPE), streamsWrapper.getStreamManager().getOutStream(DataEngineContext.AGGR_VALUE_STREAM, StreamManager.ROOT_STREAM, StreamManager.BASE_SCOPE)); } } }
public java.lang.String getLabel() { if (((itemName) != null) && ((org.eclipse.birt.report.designer.util.DEUtil.getMetaDataDictionary().getExtension(itemName)) != null)) return org.eclipse.birt.report.designer.util.DEUtil.getMetaDataDictionary().getExtension(itemName).getDisplayName(); return label; }
private org.eclipse.birt.chart.model.ChartWithAxes createDefaultChart(org.eclipse.birt.report.item.crosstab.core.de.AggregationCellHandle cell) { org.eclipse.birt.chart.model.ChartWithAxes cm = org.eclipse.birt.chart.model.impl.ChartWithAxesImpl.create(); cm.setType("Bar Chart"); cm.setSubType("Side-by-side"); cm.setUnits("Points"); cm.setUnitSpacing(50); cm.getLegend().setVisible(false); cm.getTitle().setVisible(false); java.lang.String exprMeasure = org.eclipse.birt.core.data.ExpressionUtil.createJSDataExpression(org.eclipse.birt.chart.reportitem.ChartXTabUtil.generateComputedColumnName(cell)); java.lang.String exprCategory = null; if (checkTransposed(cell)) { cm.setTransposed(true); java.lang.Object content = getFirstContent(org.eclipse.birt.chart.reportitem.ChartXTabUtil.getInnermostLevelCell(cell.getCrosstab(), ICrosstabConstants.ROW_AXIS_TYPE)); if (content instanceof org.eclipse.birt.report.model.api.DataItemHandle) { org.eclipse.birt.report.model.api.DataItemHandle dataItemHandle = ((org.eclipse.birt.report.model.api.DataItemHandle) (content)); exprCategory = dataItemHandle.getResultSetColumn(); } } else { java.lang.Object content = getFirstContent(org.eclipse.birt.chart.reportitem.ChartXTabUtil.getInnermostLevelCell(cell.getCrosstab(), ICrosstabConstants.COLUMN_AXIS_TYPE)); if (content instanceof org.eclipse.birt.report.model.api.DataItemHandle) { org.eclipse.birt.report.model.api.DataItemHandle dataItemHandle = ((org.eclipse.birt.report.model.api.DataItemHandle) (content)); exprCategory = dataItemHandle.getResultSetColumn(); } } org.eclipse.birt.chart.model.data.SeriesDefinition sdBase = org.eclipse.birt.chart.model.data.impl.SeriesDefinitionImpl.create(); sdBase.getSeriesPalette().shift(0); org.eclipse.birt.chart.model.component.Series series = org.eclipse.birt.chart.model.component.impl.SeriesImpl.create(); sdBase.getSeries().add(series); cm.getBaseAxes()[0].getSeriesDefinitions().add(sdBase); if (exprCategory != null) { org.eclipse.birt.chart.model.data.Query query = org.eclipse.birt.chart.model.data.impl.QueryImpl.create(org.eclipse.birt.core.data.ExpressionUtil.createJSDataExpression(exprCategory)); series.getDataDefinition().add(query); } org.eclipse.birt.chart.model.data.SeriesDefinition sdOrth = org.eclipse.birt.chart.model.data.impl.SeriesDefinitionImpl.create(); sdOrth.getSeriesPalette().shift(0); series = org.eclipse.birt.chart.model.type.impl.BarSeriesImpl.create(); sdOrth.getSeries().add(series); cm.getOrthogonalAxes(cm.getBaseAxes()[0], true)[0].getSeriesDefinitions().add(sdOrth); if (exprMeasure != null) { org.eclipse.birt.chart.model.data.Query query = org.eclipse.birt.chart.model.data.impl.QueryImpl.create(exprMeasure); series.getDataDefinition().add(query); } org.eclipse.birt.chart.model.data.SampleData sampleData = DataFactory.eINSTANCE.createSampleData(); sampleData.getBaseSampleData().clear(); sampleData.getOrthogonalSampleData().clear(); org.eclipse.birt.chart.model.data.BaseSampleData sampleDataBase = DataFactory.eINSTANCE.createBaseSampleData(); sampleDataBase.setDataSetRepresentation("A, B, C"); sampleData.getBaseSampleData().add(sampleDataBase); org.eclipse.birt.chart.model.data.OrthogonalSampleData sampleDataOrth = DataFactory.eINSTANCE.createOrthogonalSampleData(); sampleDataOrth.setDataSetRepresentation("5,4,12"); sampleDataOrth.setSeriesDefinitionIndex(0); sampleData.getOrthogonalSampleData().add(sampleDataOrth); cm.setSampleData(sampleData); return cm; }
public void createControl(org.eclipse.swt.widgets.Composite parent) { org.eclipse.swt.widgets.Composite container = new org.eclipse.swt.widgets.Composite(parent, org.eclipse.swt.SWT.NONE); org.eclipse.swt.layout.GridLayout gridLayout = new org.eclipse.swt.layout.GridLayout(); gridLayout.marginWidth = 20; gridLayout.marginHeight = 10; gridLayout.verticalSpacing = 7; gridLayout.numColumns = 3; container.setLayout(gridLayout); new org.eclipse.swt.widgets.Label(container, org.eclipse.swt.SWT.NONE).setText(org.eclipse.birt.report.designer.ui.actions.PublishPage.LABEL_DISPLAY_NAME); nameText = createText(container, 2, 1); if ((module.getProperty(ModuleHandle.DISPLAY_NAME_PROP)) != null) nameText.setText(module.getDisplayName()); new org.eclipse.swt.widgets.Label(container, org.eclipse.swt.SWT.NONE).setText(org.eclipse.birt.report.designer.ui.actions.PublishPage.LABEL_DESCRIPTION); descText = createText(container, 2, 5); if ((module.getProperty(ModuleHandle.DESCRIPTION_PROP)) != null) descText.setText(((java.lang.String) (module.getProperty(ModuleHandle.DESCRIPTION_PROP)))); new org.eclipse.swt.widgets.Label(container, org.eclipse.swt.SWT.NONE).setText(org.eclipse.birt.report.designer.ui.actions.PublishPage.LABEL_IMAGE); previewImageText = createText(container, 1, 1); if ((module.getIconFile()) != null) previewImageText.setText(module.getIconFile()); previewImageText.addModifyListener(new org.eclipse.swt.events.ModifyListener() { public void modifyText(org.eclipse.swt.events.ModifyEvent e) { validate(); } }); org.eclipse.swt.widgets.Button chooseBtn = new org.eclipse.swt.widgets.Button(container, org.eclipse.swt.SWT.NONE); chooseBtn.setText(org.eclipse.birt.report.designer.ui.actions.PublishPage.BTN_CHOOSE); chooseBtn.addSelectionListener(new org.eclipse.swt.events.SelectionListener() { public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { org.eclipse.swt.widgets.FileDialog dialog = new org.eclipse.swt.widgets.FileDialog(org.eclipse.ui.PlatformUI.getWorkbench().getDisplay().getActiveShell()); dialog.setText(org.eclipse.birt.report.designer.ui.actions.PublishPage.BROWSE_TITLE); dialog.setFilterExtensions(new java.lang.String[]{ "*.gif", "*.jpg", "*.png", "*.ico", "*.bmp" }); java.lang.String fileName = dialog.open(); if (fileName == null) { return; } previewImageText.setText(fileName); } public void widgetDefaultSelected(org.eclipse.swt.events.SelectionEvent e) { } }); new org.eclipse.swt.widgets.Label(container, org.eclipse.swt.SWT.NONE).setText(org.eclipse.birt.report.designer.ui.actions.PublishPage.LABEL_CHEATSHEET); cheatSheetText = createText(container, 1, 1); if ((module.getCheetSheet()) != null) cheatSheetText.setText(module.getCheetSheet()); cheatSheetText.addModifyListener(new org.eclipse.swt.events.ModifyListener() { public void modifyText(org.eclipse.swt.events.ModifyEvent e) { validate(); } }); org.eclipse.swt.widgets.Button chooseBtn2 = new org.eclipse.swt.widgets.Button(container, org.eclipse.swt.SWT.NONE); chooseBtn2.setText(org.eclipse.birt.report.designer.ui.actions.PublishPage.BTN_CHOOSE); chooseBtn2.addSelectionListener(new org.eclipse.swt.events.SelectionListener() { public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { org.eclipse.swt.widgets.FileDialog dialog = new org.eclipse.swt.widgets.FileDialog(org.eclipse.ui.PlatformUI.getWorkbench().getDisplay().getActiveShell()); dialog.setText(org.eclipse.birt.report.designer.ui.actions.PublishPage.BROWSE_CS_TITLE); java.lang.String fileName = dialog.open(); if (fileName == null) { return; } cheatSheetText.setText(fileName); } public void widgetDefaultSelected(org.eclipse.swt.events.SelectionEvent e) { } }); chooseBtn.forceFocus(); setControl(container); }
public boolean isEnabled() { if ((getSelection()) instanceof org.eclipse.birt.report.model.api.DesignElementHandle) { org.eclipse.birt.report.model.api.DesignElementHandle elementHandle = ((org.eclipse.birt.report.model.api.DesignElementHandle) (getSelection())); if ((getClipBoardContents()) instanceof org.eclipse.birt.report.model.api.core.IDesignElement) { org.eclipse.birt.report.model.api.core.IDesignElement content = ((org.eclipse.birt.report.model.api.core.IDesignElement) (getClipBoardContents())); try { if (!(elementHandle.canPaste(org.eclipse.birt.report.designer.util.DEUtil.getDefaultContentName(elementHandle), content))) return false; } catch (org.eclipse.birt.report.model.api.activity.SemanticException e) { } } else if ((getClipBoardContents()) instanceof java.lang.Object[]) { java.lang.Object[] array = ((java.lang.Object[]) (getClipBoardContents())); for (int i = 0; i < (array.length); i++) { if ((array[i]) instanceof org.eclipse.birt.report.model.api.core.IDesignElement) { org.eclipse.birt.report.model.api.core.IDesignElement content = ((org.eclipse.birt.report.model.api.core.IDesignElement) (array[i])); try { if (!(elementHandle.canPaste(org.eclipse.birt.report.designer.util.DEUtil.getDefaultContentName(elementHandle), content))) return false; } catch (org.eclipse.birt.report.model.api.activity.SemanticException e) { } } } } } return (org.eclipse.birt.report.designer.util.DNDUtil.handleValidateTargetCanContain(getSelection(), getClipBoardContents())) && (org.eclipse.birt.report.designer.util.DNDUtil.handleValidateTargetCanContainMore(getSelection(), org.eclipse.birt.report.designer.util.DNDUtil.getObjectLength(getClipBoardContents()))); }
private java.lang.Object handleText(org.eclipse.birt.report.engine.content.ITextContent content) { boolean isInline = (parent) instanceof org.eclipse.birt.report.engine.layout.pdf.PDFLineAreaLM; if (isInline) { assert (parent) instanceof org.eclipse.birt.report.engine.layout.pdf.PDFLineAreaLM; org.eclipse.birt.report.engine.ir.DimensionType width = content.getWidth(); if (width != null) { return new org.eclipse.birt.report.engine.layout.pdf.PDFTextInlineBlockLM(context, parent, content, executor); } else { return new org.eclipse.birt.report.engine.layout.pdf.PDFTextLM(context, parent, content, executor); } } else { java.lang.String text = content.getText(); if ((text == null) || ("".equals(text))) { content.setText(" "); } return new org.eclipse.birt.report.engine.layout.pdf.PDFTextBlockContainerLM(context, parent, content, executor); } }
public void run() { java.lang.Object model = evt.getNewValue(); java.lang.Object editpart = getViewer().getEditPartRegistry().get(model); if (editpart instanceof org.eclipse.gef.EditPart) { getViewer().flush(); if (!(editpart instanceof org.eclipse.birt.report.designer.internal.lib.editparts.EmptyEditPart)) { getViewer().select(((org.eclipse.gef.EditPart) (editpart))); } } if (editpart != null) { getViewer().reveal(((org.eclipse.gef.EditPart) (editpart))); } }
public void focusLost(org.eclipse.swt.events.FocusEvent e) { java.lang.String key = org.eclipse.birt.report.designer.internal.ui.util.UIUtil.convertToModelString(keyChooser.getText(), true); if (key != null) { java.lang.String tocExp = null; if ((keyChooser.indexOf(key)) != (-1)) { tocExp = org.eclipse.birt.report.designer.util.DEUtil.getExpression(columnList.get(keyChooser.indexOf(key))); } else { for (int i = 0; i < (columnList.size()); i++) { if (key.equals(org.eclipse.birt.report.designer.util.DEUtil.getExpression(columnList.get(i)))) { tocExp = org.eclipse.birt.report.designer.util.DEUtil.getExpression(columnList.get(i)); break; } } } if (!(tocEditor.getText().equals(tocExp))) { if (tocExp == null) { tocEditor.setText(""); } else { tocEditor.setText(tocExp); } return; } } }
public void defineCube(org.eclipse.birt.report.model.api.olap.CubeHandle cubeHandle) throws org.eclipse.birt.core.exception.BirtException { java.util.Set involvedDataSets = getInvolvedDataSets(((org.eclipse.birt.report.model.api.olap.TabularCubeHandle) (cubeHandle))); java.util.Iterator itr = involvedDataSets.iterator(); while (itr.hasNext()) { org.eclipse.birt.report.model.api.DataSetHandle dsHandle = ((org.eclipse.birt.report.model.api.DataSetHandle) (itr.next())); org.eclipse.birt.data.engine.api.querydefn.BaseDataSourceDesign baseDataSource = this.modelAdaptor.adaptDataSource(dsHandle.getDataSource()); org.eclipse.birt.data.engine.api.querydefn.BaseDataSetDesign baseDataSet = this.modelAdaptor.adaptDataSet(dsHandle); if (baseDataSource != null) this.defineDataSource(baseDataSource); this.defineDataSet(baseDataSet); } if (!(cubeHandleMap.containsKey(cubeHandle.getQualifiedName()))) { this.cubeHandleMap.put(cubeHandle.getQualifiedName(), cubeHandle); } }
private org.eclipse.birt.data.engine.api.IQueryResults getGroupingQueryResults(org.eclipse.birt.report.model.api.DataSetHandle dataSet, java.util.Iterator inputParamBindings, java.util.Iterator columnBindings, java.lang.String boundColumnName) throws org.eclipse.birt.core.exception.BirtException { assert dataSet != null; org.eclipse.birt.data.engine.api.querydefn.QueryDefinition query = new org.eclipse.birt.data.engine.api.querydefn.QueryDefinition(); query.setDataSetName(dataSet.getQualifiedName()); org.eclipse.birt.data.engine.api.querydefn.GroupDefinition group = new org.eclipse.birt.data.engine.api.querydefn.GroupDefinition(); group.setKeyColumn(boundColumnName); query.addGroup(group); query.setUsesDetails(false); org.eclipse.birt.report.model.api.ModuleHandle moduleHandle = sessionContext.getModuleHandle(); if (moduleHandle == null) moduleHandle = dataSet.getModuleHandle(); org.eclipse.birt.report.data.adapter.impl.QueryExecutionHelper execHelper = new org.eclipse.birt.report.data.adapter.impl.QueryExecutionHelper(this.dataEngine, this.modelAdaptor, moduleHandle); org.eclipse.birt.data.engine.api.IQueryResults results = execHelper.executeQuery(query, inputParamBindings, null, columnBindings); return results; }
protected void __execute() throws java.rmi.RemoteException { try { org.eclipse.birt.report.context.ViewerAttributeBean attrBean = ((org.eclipse.birt.report.context.ViewerAttributeBean) (context.getBean())); assert attrBean != null; java.lang.String format = org.eclipse.birt.report.utility.ParameterAccessor.getFormat(context.getRequest()); java.util.Locale locale = attrBean.getLocale(); boolean master = attrBean.isMasterPageContent(); java.util.Map parameterMap = attrBean.getParameters(); java.util.Map displayTexts = attrBean.getDisplayTexts(); if ((operation) != null) { java.lang.String displayTextParam = null; org.eclipse.birt.report.soapengine.api.Oprand[] oprands = operation.getOprand(); for (int i = 0; i < (oprands.length); i++) { java.lang.String paramName = oprands[i].getName(); java.lang.Object paramValue = oprands[i].getValue(); if ((ParameterAccessor.PARAM_ISNULL.equalsIgnoreCase(paramName)) && (paramValue != null)) { org.eclipse.birt.report.model.api.ScalarParameterHandle parameter = ((org.eclipse.birt.report.model.api.ScalarParameterHandle) (attrBean.findParameter(paramValue.toString()))); if (parameter != null) { parameterMap.put(paramValue, null); continue; } } else if ((displayTextParam = org.eclipse.birt.report.utility.ParameterAccessor.isDisplayText(paramName)) != null) { displayTexts.put(displayTextParam, paramValue); continue; } org.eclipse.birt.report.model.api.ScalarParameterHandle parameter = ((org.eclipse.birt.report.model.api.ScalarParameterHandle) (attrBean.findParameter(paramName))); if ((parameter != null) && (paramValue != null)) { paramValue = org.eclipse.birt.report.utility.DataUtil.validate(parameter.getDataType(), parameter.getPattern(), paramValue.toString(), attrBean.getLocale()); } if (parameter != null) { parameterMap.put(paramName, paramValue); } } } org.eclipse.birt.report.service.api.IViewerReportDesignHandle reportDesignHandle = attrBean.getReportDesignHandle(context.getRequest()); boolean svgFlag = org.eclipse.birt.report.utility.ParameterAccessor.getSVGFlag(context.getRequest()); java.lang.String docName = attrBean.getReportDocumentName(); java.lang.String bookmark = getBookmark(operation.getOprand(), context.getBean()); org.eclipse.birt.report.service.api.InputOptions options = new org.eclipse.birt.report.service.api.InputOptions(); options.setOption(InputOptions.OPT_REQUEST, context.getRequest()); options.setOption(InputOptions.OPT_LOCALE, locale); options.setOption(InputOptions.OPT_RTL, new java.lang.Boolean(attrBean.isRtl())); options.setOption(InputOptions.OPT_IS_MASTER_PAGE_CONTENT, new java.lang.Boolean(master)); options.setOption(InputOptions.OPT_SVG_FLAG, new java.lang.Boolean(svgFlag)); options.setOption(InputOptions.OPT_FORMAT, format); options.setOption(InputOptions.OPT_IS_DESIGNER, new java.lang.Boolean(attrBean.isDesigner())); java.io.ByteArrayOutputStream out = new java.io.ByteArrayOutputStream(); if (org.eclipse.birt.report.utility.ParameterAccessor.isGetImageOperator(context.getRequest())) { org.eclipse.birt.report.service.actionhandler.BirtRenderImageActionHandler renderImageHandler = new org.eclipse.birt.report.service.actionhandler.BirtRenderImageActionHandler(context, operation, response); renderImageHandler.execute(); } else if (org.eclipse.birt.report.utility.ParameterAccessor.isGetReportlet(context.getRequest())) { java.lang.String __reportletId = attrBean.getReportletId(); getReportService().renderReportlet(docName, __reportletId, options, new java.util.ArrayList(), out); } else if (context.getBean().documentInUrl) { getReportService().renderReport(docName, null, options, out); } else { getReportService().runAndRenderReport(reportDesignHandle, docName, options, parameterMap, out, new java.util.ArrayList(), displayTexts); } org.eclipse.birt.report.soapengine.api.UpdateContent content = new org.eclipse.birt.report.soapengine.api.UpdateContent(); content.setContent(out.toString()); content.setTarget("Document"); if (bookmark != null) content.setBookmark(bookmark); org.eclipse.birt.report.soapengine.api.Update updateDocument = new org.eclipse.birt.report.soapengine.api.Update(); updateDocument.setUpdateContent(content); response.setUpdate(new org.eclipse.birt.report.soapengine.api.Update[]{ updateDocument }); } catch (java.lang.Exception e) { org.apache.axis.AxisFault fault = new org.apache.axis.AxisFault(); fault.setFaultCode(new javax.xml.namespace.QName("BirtGetPageAllActionHandler.__execute( )")); fault.setFaultReason(e.getLocalizedMessage()); throw fault; } }
private java.lang.String copyToResourceFolder(java.lang.String filename) throws java.io.IOException { java.io.File orgFile = new java.io.File(filename); java.io.File resourceFolder = new java.io.File(org.eclipse.birt.report.designer.ui.ReportPlugin.getDefault().getResourcePreference()); if (resourceFolder.exists()) { java.io.File targetFile = new java.io.File(resourceFolder, orgFile.getName()); if (targetFile.exists()) { if (targetFile.getAbsolutePath().equals(orgFile.getAbsolutePath())) { return orgFile.getAbsolutePath(); } if (org.eclipse.jface.dialogs.MessageDialog.openConfirm(org.eclipse.birt.report.designer.internal.ui.util.UIUtil.getDefaultShell(), org.eclipse.birt.report.designer.nls.Messages.getString("UseLibraryAction.Error.Title"), org.eclipse.birt.report.designer.nls.Messages.getFormattedString("UseLibraryAction.Error.Message", new java.lang.String[]{ targetFile.getName() }))) coypFile(orgFile, targetFile); } return targetFile.getAbsolutePath(); } return null; }
public void buildContextMenu(org.eclipse.jface.action.IMenuManager menuManager) { org.eclipse.gef.ui.actions.GEFActionConstants.addStandardActionGroups(menuManager); java.lang.Object firstSelectedElement = getFirstElement(); java.lang.Object selectedElements = getSelectedElement(); java.lang.Object multiSelection = getMultiSelectedElement(); if (((((multiSelection == (java.lang.Object.class)) || (multiSelection == (org.eclipse.birt.report.model.api.DesignElementHandle.class))) || (isRootElementHandleClass(multiSelection))) || (multiSelection == (org.eclipse.birt.report.model.api.ReportItemHandle.class))) || (multiSelection == (org.eclipse.birt.report.model.api.ListHandle.class))) { menuManager.appendToGroup(GEFActionConstants.GROUP_UNDO, getAction(ActionFactory.UNDO.getId())); menuManager.appendToGroup(GEFActionConstants.GROUP_UNDO, getAction(ActionFactory.REDO.getId())); menuManager.appendToGroup(GEFActionConstants.GROUP_COPY, new org.eclipse.birt.report.designer.internal.ui.views.actions.CutAction(selectedElements)); menuManager.appendToGroup(GEFActionConstants.GROUP_COPY, new org.eclipse.birt.report.designer.internal.ui.views.actions.CopyAction(selectedElements)); menuManager.appendToGroup(GEFActionConstants.GROUP_COPY, new org.eclipse.birt.report.designer.internal.ui.views.actions.PasteAction(selectedElements)); menuManager.appendToGroup(GEFActionConstants.GROUP_COPY, new org.eclipse.birt.report.designer.internal.ui.views.actions.DeleteAction(selectedElements)); if (isRootElementHandleClass(multiSelection)) { createInsertElementMenu(menuManager, GEFActionConstants.GROUP_EDIT); } createStyleMenu(menuManager, GEFActionConstants.GROUP_REST); if (org.eclipse.birt.report.designer.internal.ui.util.Policy.TRACING_MENU_SHOW) { java.lang.System.out.println("Menu(for Editor) >> Shows for multi-selcetion."); } } else if (firstSelectedElement instanceof org.eclipse.birt.report.model.api.DesignElementHandle) { menuManager.appendToGroup(GEFActionConstants.GROUP_UNDO, getAction(ActionFactory.UNDO.getId())); menuManager.appendToGroup(GEFActionConstants.GROUP_UNDO, getAction(ActionFactory.REDO.getId())); menuManager.appendToGroup(GEFActionConstants.GROUP_COPY, new org.eclipse.birt.report.designer.internal.ui.views.actions.CutAction(selectedElements)); menuManager.appendToGroup(GEFActionConstants.GROUP_COPY, new org.eclipse.birt.report.designer.internal.ui.views.actions.CopyAction(selectedElements)); menuManager.appendToGroup(GEFActionConstants.GROUP_COPY, new org.eclipse.birt.report.designer.internal.ui.views.actions.PasteAction(selectedElements)); createStyleMenu(menuManager, GEFActionConstants.GROUP_REST); if ((((org.eclipse.jface.viewers.IStructuredSelection) (getSelection())).size()) == 1) { java.lang.Object element = ((org.eclipse.jface.viewers.IStructuredSelection) (getSelection())).getFirstElement(); if ((element instanceof org.eclipse.birt.report.designer.internal.ui.editors.schematic.editparts.LabelEditPart) || (element instanceof org.eclipse.birt.report.designer.internal.ui.editors.schematic.editparts.ImageEditPart)) { org.eclipse.jface.action.IAction action = getAction(GEFActionConstants.DIRECT_EDIT); action.setAccelerator(SWT.F2); if (element instanceof org.eclipse.birt.report.designer.internal.ui.editors.schematic.editparts.DataEditPart) { action.setText(org.eclipse.birt.report.designer.nls.Messages.getString("SchematicContextMenuProvider.ActionText.editData")); } else { action.setText(org.eclipse.birt.report.designer.nls.Messages.getString("SchematicContextMenuProvider.ActionText.editLabel")); } menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT, action); } } if (firstSelectedElement instanceof org.eclipse.birt.report.model.api.RowHandle) { if ((getRowHandles().size()) != 0) { org.eclipse.jface.action.MenuManager insertMenu = new org.eclipse.jface.action.MenuManager(org.eclipse.birt.report.designer.internal.ui.editors.schematic.providers.SchematicContextMenuProvider.INSERT_MENU_ITEM_TEXT); org.eclipse.jface.action.MenuManager rowMenu = new org.eclipse.jface.action.MenuManager(org.eclipse.birt.report.designer.internal.ui.editors.schematic.providers.SchematicContextMenuProvider.INSERT_ROW_MENU_ITEM_TEXT); rowMenu.add(getAction(InsertRowAboveAction.ID)); rowMenu.add(getAction(InsertRowBelowAction.ID)); org.eclipse.birt.report.model.api.RowHandle row = ((org.eclipse.birt.report.model.api.RowHandle) (getRowHandles().get(0))); if (!((row.getContainer()) instanceof org.eclipse.birt.report.model.api.GridHandle)) { insertMenu.add(getAction(IncludeHeaderAction.ID)); insertMenu.add(getAction(IncludeDetailAction.ID)); insertMenu.add(getAction(IncludeFooterAction.ID)); } insertMenu.add(rowMenu); menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT, insertMenu); } menuManager.appendToGroup(GEFActionConstants.GROUP_COPY, getAction(DeleteRowAction.ID)); menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT, getAction(MergeAction.ID)); menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT, getAction(SplitAction.ID)); } else if (firstSelectedElement instanceof org.eclipse.birt.report.model.api.ColumnHandle) { menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT, new org.eclipse.birt.report.designer.ui.actions.InsertPasteColumnAction(selectedElements)); if ((getColumnHandles().size()) != 0) { org.eclipse.jface.action.MenuManager subMenu = new org.eclipse.jface.action.MenuManager(org.eclipse.birt.report.designer.internal.ui.editors.schematic.providers.SchematicContextMenuProvider.INSERT_MENU_ITEM_TEXT); subMenu.add(getAction(InsertColumnRightAction.ID)); subMenu.add(getAction(InsertColumnLeftAction.ID)); menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT, subMenu); } menuManager.appendToGroup(GEFActionConstants.GROUP_COPY, getAction(DeleteColumnAction.ID)); menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT, getAction(MergeAction.ID)); menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT, getAction(SplitAction.ID)); } else if (firstSelectedElement instanceof org.eclipse.birt.report.model.api.CellHandle) { createInsertElementMenu(menuManager, GEFActionConstants.GROUP_EDIT); menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT, getAction(MergeAction.ID)); menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT, getAction(SplitAction.ID)); menuManager.appendToGroup(GEFActionConstants.GROUP_COPY, new org.eclipse.birt.report.designer.internal.ui.views.actions.DeleteAction(selectedElements)); } else { menuManager.appendToGroup(GEFActionConstants.GROUP_COPY, new org.eclipse.birt.report.designer.internal.ui.views.actions.DeleteAction(selectedElements)); } if (org.eclipse.birt.report.designer.internal.ui.util.Policy.TRACING_MENU_SHOW) { java.lang.System.out.println(("Menu(for Editor) >> Shows for " + (((org.eclipse.birt.report.model.api.DesignElementHandle) (firstSelectedElement)).getDefn().getDisplayName()))); } } else if (firstSelectedElement instanceof org.eclipse.birt.report.model.api.SlotHandle) { menuManager.appendToGroup(GEFActionConstants.GROUP_UNDO, getAction(ActionFactory.UNDO.getId())); menuManager.appendToGroup(GEFActionConstants.GROUP_UNDO, getAction(ActionFactory.REDO.getId())); menuManager.appendToGroup(GEFActionConstants.GROUP_COPY, new org.eclipse.birt.report.designer.internal.ui.views.actions.CutAction(selectedElements)); menuManager.appendToGroup(GEFActionConstants.GROUP_COPY, new org.eclipse.birt.report.designer.internal.ui.views.actions.CopyAction(selectedElements)); menuManager.appendToGroup(GEFActionConstants.GROUP_COPY, new org.eclipse.birt.report.designer.internal.ui.views.actions.PasteAction(selectedElements)); menuManager.appendToGroup(GEFActionConstants.GROUP_COPY, new org.eclipse.birt.report.designer.internal.ui.views.actions.DeleteAction(selectedElements)); createInsertElementMenu(menuManager, GEFActionConstants.GROUP_EDIT); if (org.eclipse.birt.report.designer.internal.ui.util.Policy.TRACING_MENU_SHOW) { java.lang.System.out.println(((("Menu(for Editor) >> Shows for the slot " + (((org.eclipse.birt.report.model.api.SlotHandle) (firstSelectedElement)).getSlotID())) + " of ") + (((org.eclipse.birt.report.model.api.SlotHandle) (firstSelectedElement)).getElementHandle().getDefn().getDisplayName()))); } } else { } if (!(getTableEditParts().isEmpty())) { createInsertGroupMenu(menuManager, GEFActionConstants.GROUP_ADD); menuManager.appendToGroup(GEFActionConstants.GROUP_ADD, getAction(DeleteTableGroupAction.ID)); if ((getTableEditParts().size()) == 1) { createEditGroupMenu(menuManager, GEFActionConstants.GROUP_ADD); org.eclipse.jface.action.Separator separator = new org.eclipse.jface.action.Separator(org.eclipse.birt.report.designer.internal.ui.editors.schematic.actions.EditBindingAction.ID); menuManager.add(separator); menuManager.appendToGroup(EditBindingAction.ID, getAction(EditBindingAction.ID)); } } if (!(getListEditParts().isEmpty())) { createInsertGroupMenu(menuManager, GEFActionConstants.GROUP_ADD); menuManager.appendToGroup(GEFActionConstants.GROUP_ADD, getAction(DeleteListGroupAction.ID)); if ((getListEditParts().size()) == 1) { createEditGroupMenu(menuManager, GEFActionConstants.GROUP_ADD); } } }
public static org.eclipse.jface.resource.ImageDescriptor getImageDescriptor(java.lang.String path) { return org.eclipse.birt.report.designer.ui.preview.AbstractUIPlugin.imageDescriptorFromPlugin("org.eclipse.birt.report.designer.ui.preview", path); }
private void initValueArea() { if (isStatic()) { if (DesignChoiceConstants.PARAM_CONTROL_CHECK_BOX.equals(getSelectedControlType())) { if ((isValidValue(defaultValue)) != null) { defaultValue = null; defaultValueChooser.select(0); } else { if (java.lang.Boolean.valueOf(defaultValue).booleanValue()) { defaultValueChooser.select(1); } else { defaultValueChooser.select(2); } } } else if ((DesignChoiceConstants.PARAM_CONTROL_TEXT_BOX.equals(getSelectedControlType())) && ((defaultValue) != null)) { if ((defaultValue.equals(java.lang.Boolean.toString(true))) || (defaultValue.equals(java.lang.Boolean.toString(false)))) { defaultValue = null; } else { defaultValueEditor.setText(defaultValue); } } else { defaultValue = null; } refreshValueTable(); } else { refreshDataSets(); if ((inputParameter.getDataSetName()) != null) { dataSetChooser.setText(inputParameter.getDataSetName()); } refreshColumns(false); java.lang.String columnName = getColumnName(inputParameter.getValueExpr()); if (columnName != null) { columnChooser.setText(columnName); } columnName = getColumnName(inputParameter.getLabelExpr()); if (columnName != null) { displayTextChooser.setText(columnName); } if ((defaultValue) != null) { defaultValueEditor.setText(defaultValue); } } updateMessageLine(); }
public void run() { org.eclipse.birt.report.model.api.CommandStack stack = org.eclipse.birt.report.designer.core.model.SessionHandleAdapter.getInstance().getCommandStack(); stack.startTrans(org.eclipse.birt.report.designer.internal.ui.views.actions.InsertInLayoutAction.DISPLAY_TEXT); try { if (org.eclipse.birt.report.designer.internal.ui.util.Policy.TRACING_ACTIONS) { java.lang.System.out.println("Insert layout action >> Runs ..."); } java.lang.Object newElement = org.eclipse.birt.report.designer.internal.ui.dnd.InsertInLayoutUtil.performInsert(getSelection(), getTargetEditPart()); if (newElement != null) runCreate(newElement, targetPart.getModel()); stack.commit(); fireCreateRequest(newElement); } catch (org.eclipse.birt.report.model.api.activity.SemanticException e) { org.eclipse.birt.report.designer.internal.ui.util.ExceptionHandler.handle(e); stack.rollback(); } }
public boolean hasLocalPropertyValues() { if (propValues.isEmpty()) return false; java.util.Iterator<java.lang.String> iter = propValues.keySet().iterator(); while (iter.hasNext()) { java.lang.String propName = iter.next(); org.eclipse.birt.report.model.metadata.ElementPropertyDefn propDefn = getPropertyDefn(propName); if ((propDefn.getTypeCode()) != (org.eclipse.birt.report.model.api.metadata.IPropertyType.ELEMENT_TYPE)) return true; } return false; }
public void createContextMenu(org.eclipse.jface.viewers.TreeViewer sourceViewer, java.lang.Object object, org.eclipse.jface.action.IMenuManager menu) { if (((org.eclipse.birt.report.model.api.DataSourceHandle) (object)).canEdit()) { org.eclipse.birt.report.designer.data.ui.util.WizardUtil.createEditDataSourceMenu(menu, object); } super.createContextMenu(sourceViewer, object, menu); org.eclipse.birt.report.designer.data.ui.actions.ExportElementToSourceCPStoreAction exportSourceAction = new org.eclipse.birt.report.designer.data.ui.actions.ExportElementToSourceCPStoreAction(object); if (exportSourceAction.isEnabled()) { menu.add(exportSourceAction); } }
public void layout() throws org.eclipse.birt.core.exception.BirtException { init(); if (org.eclipse.birt.report.engine.layout.pdf.util.PropertyUtil.isInlineElement(image)) { assert (parent) instanceof org.eclipse.birt.report.engine.nLayout.area.impl.InlineStackingArea; org.eclipse.birt.report.engine.nLayout.area.impl.InlineStackingArea lineParent = ((org.eclipse.birt.report.engine.nLayout.area.impl.InlineStackingArea) (parent)); if ((root.getAllocatedWidth()) > (parent.getCurrentMaxContentWidth())) { if (!(lineParent.isEmptyLine())) { lineParent.endLine(); layout(); } else { parent.add(root); root.finished = true; parent.update(root); return; } } else { parent.add(root); root.finished = true; parent.update(root); return; } } else { parent.add(root); if ((!(parent.isInInlineStacking)) && (context.isAutoPageBreak())) { int aHeight = root.getAllocatedHeight(); if ((aHeight + (parent.getAbsoluteBP())) > (context.getMaxBP())) { parent.autoPageBreak(); } } root.finished = true; parent.update(root); } }
private void doPostReloadAction(org.eclipse.birt.report.model.css.CssStyleSheet css) { org.eclipse.birt.report.model.api.command.CssReloadedEvent event = new org.eclipse.birt.report.model.api.command.CssReloadedEvent(module, css); module.broadcast(event); org.eclipse.birt.report.model.activity.ActivityStack activityStack = module.getActivityStack(); activityStack.commit(); activityStack.flush(); module.setSaveState(0); activityStack.sendNotifcations(new org.eclipse.birt.report.model.api.activity.ActivityStackEvent(activityStack, org.eclipse.birt.report.model.api.activity.ActivityStackEvent.DONE)); module.getModuleHandle().checkReport(); }
public void handleEvent(org.eclipse.swt.widgets.Event event) { org.eclipse.swt.widgets.TreeItem item = ((org.eclipse.swt.widgets.TreeItem) (event.item)); if (((event.item.getData()) instanceof org.eclipse.birt.report.model.api.css.CssStyleSheetHandle) || ((event.item.getData()) instanceof org.eclipse.birt.report.model.api.CssSharedStyleHandle)) { org.eclipse.swt.graphics.Color gray = org.eclipse.swt.widgets.Display.getCurrent().getSystemColor(SWT.COLOR_DARK_GRAY); if (!(item.getForeground().equals(gray))) { item.setForeground(gray); } } else { org.eclipse.swt.graphics.Color black = org.eclipse.swt.widgets.Display.getCurrent().getSystemColor(SWT.COLOR_BLACK); if (!(item.getForeground().equals(black))) { item.setForeground(black); } } }
public org.eclipse.birt.report.engine.extension.IReportItemExecutor createPageExecutor(long pageNumber, org.eclipse.birt.report.engine.ir.MasterPageDesign pageDesign) { org.eclipse.birt.report.engine.content.IPageContent pageContent = ((org.eclipse.birt.report.engine.content.IPageContent) (pages.get(pageDesign))); if (pageContent == null) { org.eclipse.birt.report.engine.extension.IReportItemExecutor pageExecutor = new org.eclipse.birt.report.engine.executor.MasterPageExecutor(manager, pageNumber, pageDesign); pageContent = ((org.eclipse.birt.report.engine.content.IPageContent) (pageExecutor.execute())); org.eclipse.birt.report.engine.emitter.IContentEmitter domEmitter = new org.eclipse.birt.report.engine.emitter.DOMBuilderEmitter(pageContent); org.eclipse.birt.report.engine.executor.ReportExecutorUtil.executeAll(pageExecutor, domEmitter); pageExecutor.close(); pages.put(pageDesign, pageContent); } else { pageContent.setPageNumber(pageNumber); } return new org.eclipse.birt.report.engine.internal.executor.dom.DOMReportItemExecutor(pageContent, true); }
public java.lang.String getMessage(java.lang.String key, java.util.Locale locale, java.lang.Object[] params) { java.lang.String msg = context.getDesign().getMessage(key, locale); if (msg == null) return ""; return com.ibm.icu.text.MessageFormat.format(msg, params); }
public void handleEvent(org.eclipse.swt.widgets.Event event) { switch (event.type) { case org.eclipse.swt.SWT.KeyDown : if (((event.keyCode) == (org.eclipse.swt.SWT.CR)) || ((event.keyCode) == (org.eclipse.swt.SWT.KEYPAD_CR))) { onChange(); } break; case org.eclipse.swt.SWT.FocusOut : case org.eclipse.swt.SWT.Selection : onChange(); break; } }
private java.lang.String getImagePath(int angleType, boolean bAntiRotation) { java.lang.String basePath = "icons/obj16/"; java.lang.String filename = null; switch (angleType) { case org.eclipse.birt.chart.model.attribute.AngleType.X : filename = (bAntiRotation) ? "x_rotation.gif" : "x_anti_rotation.gif"; break; case org.eclipse.birt.chart.model.attribute.AngleType.Y : filename = (bAntiRotation) ? "y_rotation.gif" : "y_anti_rotation.gif"; break; case org.eclipse.birt.chart.model.attribute.AngleType.Z : filename = (bAntiRotation) ? "z_rotation.gif" : "z_anti_rotation.gif"; break; } return basePath + filename; }
public static char getSep(javax.servlet.http.HttpServletRequest request) { java.lang.String sepKey = org.eclipse.birt.report.utility.ParameterAccessor.getParameter(request, org.eclipse.birt.report.utility.ParameterAccessor.PARAM_SEP); if (sepKey == null) return org.eclipse.birt.report.utility.ParameterAccessor.DEFAULT_SEP; java.lang.String key = "viewer.sep." + sepKey; java.lang.String sep = org.eclipse.birt.report.utility.ParameterAccessor.getInitProp(key); if ((sep == null) || ((sep.length()) <= 0)) return org.eclipse.birt.report.utility.ParameterAccessor.DEFAULT_SEP; return sep.charAt(0); }
protected EngineTask(org.eclipse.birt.report.engine.api.IReportEngine engine, org.eclipse.birt.report.engine.api.IReportRunnable runnable) { taskID = (org.eclipse.birt.report.engine.api.impl.EngineTask.id)++; this.engine = engine; this.log = engine.getLogger(); executionContext = new org.eclipse.birt.report.engine.executor.ExecutionContext(this); executionContext.setReportContext(new org.eclipse.birt.report.engine.script.internal.ReportContextImpl(executionContext)); setReportRunnable(runnable); setAppContext(engine.getConfig().getAppContext()); cancelFlag = false; runningStatus = STATUS_NOT_STARTED; }
public static java.lang.Object convert(java.lang.Object source, java.lang.Class toTypeClass) throws org.eclipse.birt.core.exception.BirtException { if (toTypeClass == (org.eclipse.birt.core.data.DataType.getClass(DataType.ANY_TYPE))) return source; if (toTypeClass == (java.lang.Integer.class)) return org.eclipse.birt.core.data.DataTypeUtil.toInteger(source); if (toTypeClass == (java.math.BigDecimal.class)) return org.eclipse.birt.core.data.DataTypeUtil.toBigDecimal(source); if (toTypeClass == (java.lang.Boolean.class)) return org.eclipse.birt.core.data.DataTypeUtil.toBoolean(source); if (toTypeClass == (java.sql.Time.class)) return org.eclipse.birt.core.data.DataTypeUtil.toTime(source); if (java.util.Date.class.isAssignableFrom(toTypeClass)) return org.eclipse.birt.core.data.DataTypeUtil.toDate(source); if (toTypeClass == (java.lang.Double.class)) return org.eclipse.birt.core.data.DataTypeUtil.toDouble(source); if (toTypeClass == (java.lang.String.class)) return org.eclipse.birt.core.data.DataTypeUtil.toString(source); if (toTypeClass == (java.sql.Blob.class)) return org.eclipse.birt.core.data.DataTypeUtil.toBlob(source); throw new org.eclipse.birt.core.exception.BirtException(org.eclipse.birt.core.data.DataTypeUtil.pluginId, org.eclipse.birt.core.i18n.ResourceConstants.INVALID_TYPE, org.eclipse.birt.core.data.DataTypeUtil.resourceBundle); }
private int getActualPageBodySize(org.eclipse.birt.report.engine.layout.area.impl.PageArea page, int direction) { int pref = 0; org.eclipse.birt.report.engine.layout.area.IContainerArea body = page.getBody(); if (body == null) { return 0; } java.util.Iterator iter = page.getBody().getChildren(); while (iter.hasNext()) { org.eclipse.birt.report.engine.layout.area.impl.AbstractArea area = ((org.eclipse.birt.report.engine.layout.area.impl.AbstractArea) (iter.next())); if (direction == (org.eclipse.birt.report.engine.layout.emitter.PageDeviceRender.BODY_HEIGHT)) { pref = java.lang.Math.max(pref, ((area.getAllocatedY()) + (area.getAllocatedHeight()))); } else { pref = java.lang.Math.max(pref, ((area.getAllocatedY()) + (area.getAllocatedWidth()))); } } return pref; }
public EditStyleAction(org.eclipse.birt.report.model.api.SharedStyleHandle handle) { this.handle = handle; setId(org.eclipse.birt.report.designer.internal.ui.editors.schematic.actions.EditStyleAction.ID); if (((handle.getContainerSlotHandle()) != null) && ((handle.getContainerSlotHandle().getElementHandle()) instanceof org.eclipse.birt.report.model.api.ThemeHandle)) { setText((((((org.eclipse.birt.report.model.api.ThemeHandle) (handle.getContainerSlotHandle().getElementHandle())).getName()) + ".") + (org.eclipse.birt.report.designer.util.DEUtil.getEscapedMenuItemText(org.eclipse.birt.report.designer.util.DEUtil.getDisplayLabel(handle, false))))); } else { setText(org.eclipse.birt.report.designer.util.DEUtil.getEscapedMenuItemText(org.eclipse.birt.report.designer.util.DEUtil.getDisplayLabel(handle, false))); } }
public static java.lang.String getDisplayValue(java.lang.String dataType, java.lang.String format, java.lang.Object value, com.ibm.icu.util.ULocale locale) { if (value == null) return null; if (org.eclipse.birt.report.model.api.util.StringUtil.isBlank(format)) { return org.eclipse.birt.report.model.api.util.ParameterValidationUtil.getDisplayValue(dataType, value, locale); } if ((DesignChoiceConstants.PARAM_TYPE_DATETIME.equalsIgnoreCase(dataType)) || (value instanceof java.util.Date)) { org.eclipse.birt.core.format.DateFormatter formatter = new org.eclipse.birt.core.format.DateFormatter(locale); formatter.applyPattern(format); return formatter.format(((java.util.Date) (value))); } else if (((DesignChoiceConstants.PARAM_TYPE_FLOAT.equalsIgnoreCase(dataType)) || (value instanceof java.lang.Float)) || (value instanceof java.lang.Double)) { if (value instanceof java.lang.Float) { org.eclipse.birt.core.format.NumberFormatter formatter = new org.eclipse.birt.core.format.NumberFormatter(locale); formatter.applyPattern(format); return formatter.format(((java.lang.Number) (value)).floatValue()); } else { org.eclipse.birt.core.format.NumberFormatter formatter = new org.eclipse.birt.core.format.NumberFormatter(locale); formatter.applyPattern(format); return formatter.format(((java.lang.Number) (value)).doubleValue()); } } else if ((DesignChoiceConstants.PARAM_TYPE_DECIMAL.equalsIgnoreCase(dataType)) || (value instanceof java.math.BigDecimal)) { org.eclipse.birt.core.format.NumberFormatter formatter = new org.eclipse.birt.core.format.NumberFormatter(locale); formatter.applyPattern(format); return formatter.format(((java.math.BigDecimal) (value))); } else if (((DesignChoiceConstants.PARAM_TYPE_INTEGER.equalsIgnoreCase(dataType)) || (value instanceof java.lang.Integer)) || (value instanceof java.lang.Long)) { org.eclipse.birt.core.format.NumberFormatter formatter = new org.eclipse.birt.core.format.NumberFormatter(locale); formatter.applyPattern(format); return formatter.format(((java.lang.Number) (value)).longValue()); } else if ((DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equalsIgnoreCase(dataType)) || (value instanceof java.lang.Boolean)) { if (((java.lang.Boolean) (value)).booleanValue()) { return org.eclipse.birt.report.model.api.util.ParameterValidationUtil.getMessage(locale, BooleanPropertyType.BOOLEAN_TRUE_RESOURCE_KEY); } return org.eclipse.birt.report.model.api.util.ParameterValidationUtil.getMessage(locale, BooleanPropertyType.BOOLEAN_FALSE_RESOURCE_KEY); } else if ((DesignChoiceConstants.PARAM_TYPE_STRING.equalsIgnoreCase(dataType)) || (value instanceof java.lang.String)) { org.eclipse.birt.core.format.StringFormatter formatter = new org.eclipse.birt.core.format.StringFormatter(locale); formatter.applyPattern(format); return formatter.format(((java.lang.String) (value))); } else { org.eclipse.birt.core.format.StringFormatter formatter = new org.eclipse.birt.core.format.StringFormatter(locale); formatter.applyPattern(format); return formatter.format(value.toString()); } }
protected void init() throws org.eclipse.birt.core.exception.BirtException { if (org.eclipse.birt.report.engine.layout.pdf.util.PropertyUtil.isInlineElement(image)) { root = new org.eclipse.birt.report.engine.nLayout.area.impl.ImageInlineContainer(parent, context, image); } else { root = new org.eclipse.birt.report.engine.nLayout.area.impl.ImageBlockContainer(parent, context, image); } root.initialize(); root.setAllocatedWidth(parent.getCurrentMaxContentWidth()); root.setMaxAvaWidth(root.getContentWidth()); org.eclipse.birt.report.engine.content.Dimension contentDimension = getSpecifiedDimension(image, root.getContentWidth(), true); org.eclipse.birt.report.engine.nLayout.area.impl.ImageArea imageArea = createImageArea(image); int maxHeight = root.getMaxAvaHeight(); int maxWidth = root.getMaxAvaWidth(); int cHeight = contentDimension.getHeight(); int cWidth = contentDimension.getWidth(); int actualHeight = cHeight; int actualWidth = cWidth; if ((cHeight > maxHeight) || (cWidth > maxWidth)) { if (fitToContainer) { float rh = ((float) (maxHeight)) / cHeight; float rw = ((float) (maxWidth)) / cWidth; if (rh > rw) { actualHeight = ((int) ((((float) (cHeight)) * maxWidth) / cWidth)); actualWidth = maxWidth; } else { actualHeight = maxHeight; actualWidth = ((int) ((((float) (cWidth)) * maxHeight) / cHeight)); } imageArea.setWidth(actualWidth); imageArea.setHeight(actualHeight); root.setContentWidth(imageArea.getWidth()); root.setContentHeight(imageArea.getHeight()); } else { imageArea.setWidth(actualWidth); imageArea.setHeight(actualHeight); root.setNeedClip(true); root.setAllocatedHeight(java.lang.Math.min(maxHeight, cHeight)); root.setAllocatedWidth(java.lang.Math.min(maxWidth, cWidth)); } } else { imageArea.setWidth(actualWidth); imageArea.setHeight(actualHeight); root.setContentWidth(imageArea.getWidth()); root.setContentHeight(imageArea.getHeight()); } root.addChild(imageArea); imageArea.setPosition(root.getContentX(), root.getContentY()); processChartLegend(image, imageArea); root.finished = false; }
public static void duplicateProperties(org.eclipse.birt.report.model.api.DesignElementHandle source, org.eclipse.birt.report.model.api.DesignElementHandle destination, boolean onlyFactoryProperty) { assert source != null; assert destination != null; if (!((source instanceof org.eclipse.birt.report.model.api.ReportDesignHandle) && (destination instanceof org.eclipse.birt.report.model.api.LibraryHandle))) assert destination.getDefn().getName().equalsIgnoreCase(source.getDefn().getName()); if (source.getDefn().allowsUserProperties()) { org.eclipse.birt.report.model.api.PropertyHandle propHandle = source.getPropertyHandle(IDesignElementModel.USER_PROPERTIES_PROP); java.lang.Object value = source.getElement().getUserProperties(); java.lang.Object valueToSet = null; if (propHandle != null) { valueToSet = org.eclipse.birt.report.model.util.ModelUtil.copyValue(propHandle.getDefn(), value); } if (valueToSet != null) { java.util.Iterator iter = ((java.util.List) (valueToSet)).iterator(); while (iter.hasNext()) { org.eclipse.birt.report.model.api.core.UserPropertyDefn userPropDefn = ((org.eclipse.birt.report.model.api.core.UserPropertyDefn) (iter.next())); destination.getElement().addUserPropertyDefn(userPropDefn); } } } if ((source.getElement()) instanceof org.eclipse.birt.report.model.extension.IExtendableElement) org.eclipse.birt.report.model.util.ModelUtil.duplicateExtensionIdentifier(source.getElement(), destination.getElement(), source.getModule()); java.util.Iterator iter = source.getPropertyIterator(); while (iter.hasNext()) { org.eclipse.birt.report.model.api.PropertyHandle propHandle = ((org.eclipse.birt.report.model.api.PropertyHandle) (iter.next())); java.lang.String propName = propHandle.getDefn().getName(); if ((((((((IStyledElementModel.STYLE_PROP.equals(propName)) || (IDesignElementModel.EXTENDS_PROP.equals(propName))) || (IDesignElementModel.USER_PROPERTIES_PROP.equals(propName))) || (IOdaExtendableElementModel.EXTENSION_ID_PROP.equals(propName))) || (IExtendedItemModel.EXTENSION_NAME_PROP.equals(propName))) || (IDesignElementModel.REF_TEMPLATE_PARAMETER_PROP.equals(propName))) || (IDesignElementModel.VIEW_ACTION_PROP.equals(propName))) || (IModuleModel.LIBRARIES_PROP.equals(propName))) continue; org.eclipse.birt.report.model.metadata.ElementPropertyDefn propDefn = destination.getElement().getPropertyDefn(propName); if ((propDefn == null) || ((propDefn.getTypeCode()) == (org.eclipse.birt.report.model.api.metadata.IPropertyType.ELEMENT_TYPE))) continue; java.lang.Object value = null; if (((propHandle.getElement()) instanceof org.eclipse.birt.report.model.elements.GroupElement) && ((((IGroupElementModel.TOC_PROP.equals(propName)) || (IStyleModel.PAGE_BREAK_AFTER_PROP.equals(propName))) || (IStyleModel.PAGE_BREAK_BEFORE_PROP.equals(propName))) || (IStyleModel.PAGE_BREAK_INSIDE_PROP.equals(propName)))) value = propHandle.getElement().getLocalProperty(propHandle.getModule(), propDefn); else if (onlyFactoryProperty) value = propHandle.getElement().getFactoryProperty(propHandle.getModule(), propDefn); else if (IModuleModel.IMAGES_PROP.equals(propName)) { java.util.Iterator images = source.getPropertyHandle(IModuleModel.IMAGES_PROP).iterator(); while (images.hasNext()) { org.eclipse.birt.report.model.api.StructureHandle image = ((org.eclipse.birt.report.model.api.StructureHandle) (images.next())); try { org.eclipse.birt.report.model.api.util.ElementExportUtil.exportStructure(image, ((org.eclipse.birt.report.model.api.LibraryHandle) (destination)), false); } catch (org.eclipse.birt.report.model.api.activity.SemanticException e) { assert false; } } continue; } else value = propHandle.getElement().getStrategy().getPropertyExceptRomDefault(propHandle.getModule(), propHandle.getElement(), propDefn); if (propDefn.isEncryptable()) { java.lang.String encryption = propHandle.getElement().getEncryptionID(propDefn); java.lang.Object valueToSet = org.eclipse.birt.report.model.util.ModelUtil.encryptProperty(destination.getElement(), propDefn, encryption, org.eclipse.birt.report.model.util.ModelUtil.copyValue(propHandle.getDefn(), value)); destination.getElement().setProperty(propName, valueToSet); destination.getElement().setEncryptionHelper(propDefn, encryption); } else { java.lang.Object valueToSet = org.eclipse.birt.report.model.util.ModelUtil.copyValue(propHandle.getDefn(), value); destination.getElement().setProperty(propName, valueToSet); } } }
public void save() throws java.io.IOException { java.lang.String fileName = getFileName(); if (fileName == null) return; module.prepareToSave(); java.lang.String resolvedFileName = org.eclipse.birt.report.model.api.util.URIUtil.getLocalPath(fileName); if (resolvedFileName != null) fileName = resolvedFileName; module.getWriter().write(new java.io.File(fileName)); module.onSave(); }
protected java.lang.String buildDrillAction(org.eclipse.birt.report.engine.api.IAction action, java.lang.Object context) { java.lang.String baseURL = null; if ((context != null) && (context instanceof org.eclipse.birt.report.engine.api.HTMLRenderContext)) { baseURL = ((org.eclipse.birt.report.engine.api.HTMLRenderContext) (context)).getBaseURL(); } java.lang.StringBuffer link = new java.lang.StringBuffer(); java.lang.String reportName = action.getReportName(); if ((reportName != null) && (!(reportName.equals("")))) { java.lang.String format = action.getFormat(); if (!("html".equalsIgnoreCase(format))) { link.append(baseURL.replaceFirst("frameset", "run")); } else { link.append(baseURL); } link.append((reportName.toLowerCase().endsWith(".rptdocument") ? "?__document=" : "?__report=")); try { link.append(java.net.URLEncoder.encode(reportName, "UTF-8")); } catch (java.io.UnsupportedEncodingException e1) { } if ((format != null) && ((format.length()) > 0)) { link.append(("&__format=" + format)); } if ((action.getParameterBindings()) != null) { java.util.Iterator paramsIte = action.getParameterBindings().entrySet().iterator(); while (paramsIte.hasNext()) { java.util.Map.Entry entry = ((java.util.Map.Entry) (paramsIte.next())); try { java.lang.String key = ((java.lang.String) (entry.getKey())); java.lang.Object valueObj = entry.getValue(); if (valueObj != null) { java.lang.String value = valueObj.toString(); link.append(((("&" + (java.net.URLEncoder.encode(key, "UTF-8"))) + "=") + (java.net.URLEncoder.encode(value, "UTF-8")))); } } catch (java.io.UnsupportedEncodingException e) { } } } link.append("&__overwrite=true"); if ((!("pdf".equalsIgnoreCase(format))) && ((action.getBookmark()) != null)) { try { if ((baseURL.lastIndexOf("run")) > 0) { link.append("#"); } else { link.append("&__bookmark="); } link.append(java.net.URLEncoder.encode(action.getBookmark(), "UTF-8")); } catch (java.io.UnsupportedEncodingException e) { } } } return link.toString(); }
public java.lang.String doSelection(java.lang.String input) { java.lang.String retValue = null; org.eclipse.birt.report.designer.ui.dialogs.ExpressionBuilder dialog = new org.eclipse.birt.report.designer.ui.dialogs.ExpressionBuilder(org.eclipse.ui.PlatformUI.getWorkbench().getDisplay().getActiveShell(), input); if (groupBtn.getSelection()) { dialog.setExpressionProvier(new org.eclipse.birt.report.item.crosstab.internal.ui.dialogs.CrosstabFilterExpressionProvider(designHandle)); } else { dialog.setExpressionProvier(new org.eclipse.birt.report.item.crosstab.internal.ui.dialogs.CrosstabExpressionProvider(designHandle, null) { protected java.util.List getChildrenList(java.lang.Object parent) { if (parent instanceof org.eclipse.birt.report.model.api.olap.TabularDimensionHandle) { org.eclipse.birt.report.model.api.olap.TabularDimensionHandle handle = ((org.eclipse.birt.report.model.api.olap.TabularDimensionHandle) (parent)); return java.util.Arrays.asList(new org.eclipse.birt.report.designer.ui.cubebuilder.provider.TabularDimensionNodeProvider().getChildren(handle)); } else if (parent instanceof org.eclipse.birt.report.model.api.olap.TabularLevelHandle) { org.eclipse.birt.report.model.api.olap.TabularLevelHandle handle = ((org.eclipse.birt.report.model.api.olap.TabularLevelHandle) (parent)); return java.util.Arrays.asList(new org.eclipse.birt.report.designer.ui.cubebuilder.provider.TabularLevelNodeProvider().getChildren(handle)); } return super.getChildrenList(parent); } protected void addFilterToProvider() { addFilter(new org.eclipse.birt.report.designer.ui.expressions.ExpressionFilter() { public boolean select(java.lang.Object parentElement, java.lang.Object element) { if (((parentElement instanceof java.lang.String) && (((java.lang.String) (parentElement)).equals(org.eclipse.birt.report.item.crosstab.ui.views.dialogs.CURRENT_CUBE))) && (element instanceof org.eclipse.birt.report.model.api.PropertyHandle)) { org.eclipse.birt.report.model.api.PropertyHandle handle = ((org.eclipse.birt.report.model.api.PropertyHandle) (element)); if (handle.getPropertyDefn().getName().equals(ICubeModel.MEASURE_GROUPS_PROP)) { return false; } } return true; } }); } }); } if ((dialog.open()) == (org.eclipse.jface.dialogs.IDialogConstants.OK_ID)) { retValue = dialog.getResult(); } return retValue; }
protected void addData(org.eclipse.birt.report.engine.emitter.excel.SheetData data) { org.eclipse.birt.report.engine.emitter.excel.layout.XlsContainer container = getCurrentContainer(); container.setEmpty(false); int col = axis.getColumnIndexByCoordinate(data.getStartX()); if ((col == (-1)) || (col >= (cache.getColumnCount()))) return; int span = (axis.getColumnIndexByCoordinate(data.getEndX())) - col; outputDataIfBufferIsFull(); updataRowIndex(data, container); addDatatoCache(col, data); for (int i = col + 1; i < (col + span); i++) { org.eclipse.birt.report.engine.emitter.excel.BlankData blankData = new org.eclipse.birt.report.engine.emitter.excel.BlankData(data); blankData.setType(Type.HORIZONTAL); addDatatoCache(i, blankData); } if ((data.getDataType()) == (org.eclipse.birt.report.engine.emitter.excel.SheetData.IMAGE)) { addEmptyData(data, container); } while (container != null) { if (container instanceof org.eclipse.birt.report.engine.emitter.excel.layout.XlsCell) { org.eclipse.birt.report.engine.emitter.excel.layout.XlsCell cell = ((org.eclipse.birt.report.engine.emitter.excel.layout.XlsCell) (container)); data.setRowSpanInDesign(((cell.getRowSpan()) - 1)); break; } else { container = container.getParent(); } } }
public java.lang.String getPath() { if (!(newFileName.equals(""))) { java.lang.String path = super.getPath(); return ((super.getPath()) + (path.endsWith("/") ? "" : "/")) + (newFileName); } else { return super.getPath(); } }
@java.lang.Override public void startContent(org.eclipse.birt.report.engine.content.IContent content) throws org.eclipse.birt.core.exception.BirtException { this.addContent(content); }
protected void collectResponseState() { if ((((getControl()) == null) || (getControl().isDisposed())) || ((m_sqbDialog) == null)) { setResponseDesignerState(getInitializationDesignerState()); return; } super.collectResponseState(); org.eclipse.birt.report.data.oda.jdbc.dbprofile.ui.internal.sqb.SQLBuilderDesignState sqbState = m_sqbDialog.saveSQBState(getDataSetDesignName()); if (sqbState == null) return; java.lang.String sqbStateContent = sqbState.toString(); if ((sqbStateContent.length()) == 0) return; org.eclipse.datatools.connectivity.oda.design.DesignerState designerState = DesignFactory.eINSTANCE.createDesignerState(); designerState.setNewStateContentAsString(sqbStateContent); designerState.setVersion(sqbState.getVersion()); setResponseDesignerState(designerState); }
private org.eclipse.birt.report.engine.emitter.pdf.PDFEmitter.PDFRender.tplValueTriple computeTplVerticalValTriple(float absPos, float containerBaseAbsPos, float containerSize, float ImageSize) { float tplOrigin = 0.0F; float tplSize = 0.0F; float translation = 0.0F; if (absPos <= 0) { if (((ImageSize + absPos) > 0) && ((ImageSize + absPos) <= containerSize)) { tplOrigin = (containerBaseAbsPos - ImageSize) - absPos; tplSize = ImageSize + absPos; } else if ((ImageSize + absPos) > containerSize) { tplOrigin = containerBaseAbsPos - containerSize; tplSize = containerSize; translation = (containerSize - ImageSize) - absPos; } else { } } else if (absPos >= containerSize) { } else { if ((ImageSize + absPos) <= containerSize) { tplOrigin = (containerBaseAbsPos - ImageSize) - absPos; tplSize = ImageSize; translation = 0.0F; } else { tplOrigin = containerBaseAbsPos - containerSize; tplSize = containerSize - absPos; translation = (containerSize - absPos) - ImageSize; } } return new org.eclipse.birt.report.engine.emitter.pdf.PDFEmitter.PDFRender.tplValueTriple(tplOrigin, tplSize, translation); }
public static java.lang.String formatDate(java.lang.Object data) { com.ibm.icu.text.SimpleDateFormat dateFormat = new com.ibm.icu.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss", java.util.Locale.ENGLISH); java.util.Date date = org.eclipse.birt.report.engine.emitter.excel.ExcelUtil.getDate(data); if (date == null) { return null; } return dateFormat.format(date); }
public void run() throws org.eclipse.birt.report.engine.api.EngineException { doValidateParameters(); loadDesign(); }
public static java.lang.String[] getAggFunParameters(org.eclipse.birt.chart.model.data.SeriesDefinition orthSD, org.eclipse.birt.chart.model.data.SeriesDefinition baseSD, org.eclipse.birt.chart.model.data.Query orthQuery) { if (((baseSD.getGrouping()) != null) && (baseSD.getGrouping().isEnabled())) { org.eclipse.birt.chart.model.data.SeriesGrouping grouping = orthSD.getGrouping(); if ((grouping != null) && (grouping.isEnabled())) { return grouping.getAggregateParameters().toArray(new java.lang.String[0]); } else if (((orthQuery != null) && ((orthQuery.getGrouping()) != null)) && (orthQuery.getGrouping().isEnabled())) { return orthQuery.getGrouping().getAggregateParameters().toArray(new java.lang.String[0]); } return baseSD.getGrouping().getAggregateParameters().toArray(new java.lang.String[0]); } else { if (((orthQuery != null) && ((orthQuery.getGrouping()) != null)) && (orthQuery.getGrouping().isEnabled())) { return orthQuery.getGrouping().getAggregateParameters().toArray(new java.lang.String[0]); } return orthSD.getGrouping().getAggregateParameters().toArray(new java.lang.String[0]); } }
protected boolean isRootEmpty() { if (isLast) { return false; } if (((parent.root) != null) && ((parent.root.getChildrenCount()) > 0)) { return false; } return super.isRootEmpty(); }
public static synchronized void initParameters(javax.servlet.ServletContext context) { if (org.eclipse.birt.report.utility.ParameterAccessor.isInitContext) return; org.eclipse.birt.report.utility.ParameterAccessor.workingFolder = context.getInitParameter(org.eclipse.birt.report.utility.ParameterAccessor.INIT_PARAM_REPORT_DIR); org.eclipse.birt.report.utility.ParameterAccessor.documentFolder = context.getInitParameter(org.eclipse.birt.report.utility.ParameterAccessor.INIT_PARAM_DOCUMENT_FOLDER); if (((org.eclipse.birt.report.utility.ParameterAccessor.workingFolder) == null) || ((org.eclipse.birt.report.utility.ParameterAccessor.workingFolder.trim().length()) <= 0)) { org.eclipse.birt.report.utility.ParameterAccessor.workingFolder = org.eclipse.birt.report.utility.ParameterAccessor.getRealPath(context, "/"); } if (((org.eclipse.birt.report.utility.ParameterAccessor.workingFolder) != null) && (org.eclipse.birt.report.utility.ParameterAccessor.workingFolder.trim().endsWith(java.io.File.separator))) { org.eclipse.birt.report.utility.ParameterAccessor.workingFolder = org.eclipse.birt.report.utility.ParameterAccessor.workingFolder.trim().substring(0, ((org.eclipse.birt.report.utility.ParameterAccessor.workingFolder.trim().length()) - 1)); } if (((org.eclipse.birt.report.utility.ParameterAccessor.documentFolder) == null) || ((org.eclipse.birt.report.utility.ParameterAccessor.documentFolder.trim().length()) <= 0)) org.eclipse.birt.report.utility.ParameterAccessor.documentFolder = org.eclipse.birt.report.utility.ParameterAccessor.workingFolder; org.eclipse.birt.report.utility.ParameterAccessor.webAppLocale = org.eclipse.birt.report.utility.ParameterAccessor.getLocaleFromString(context.getInitParameter(org.eclipse.birt.report.utility.ParameterAccessor.INIT_PARAM_LOCALE)); if ((org.eclipse.birt.report.utility.ParameterAccessor.webAppLocale) == null) org.eclipse.birt.report.utility.ParameterAccessor.webAppLocale = java.util.Locale.getDefault(); org.eclipse.birt.report.utility.ParameterAccessor.isDocumentFolderAccessOnly = java.lang.Boolean.valueOf(context.getInitParameter(org.eclipse.birt.report.utility.ParameterAccessor.INIT_PARAM_DOCUMENT_FOLDER_ACCESS_ONLY)).booleanValue(); java.lang.String s_maxRows = context.getInitParameter(org.eclipse.birt.report.utility.ParameterAccessor.INIT_PARAM_VIEWER_MAXROWS); try { org.eclipse.birt.report.utility.ParameterAccessor.maxRows = java.lang.Integer.valueOf(s_maxRows).intValue(); } catch (java.lang.NumberFormatException e) { org.eclipse.birt.report.utility.ParameterAccessor.maxRows = -1; } org.eclipse.birt.report.utility.ParameterAccessor.birtResourceFolder = context.getInitParameter(org.eclipse.birt.report.utility.ParameterAccessor.INIT_PARAM_BIRT_RESOURCE_PATH); java.lang.String s_overwrite = context.getInitParameter(org.eclipse.birt.report.utility.ParameterAccessor.INIT_PARAM_OVERWRITE_DOCUMENT); if ("true".equalsIgnoreCase(s_overwrite)) { org.eclipse.birt.report.utility.ParameterAccessor.isOverWrite = true; } else { org.eclipse.birt.report.utility.ParameterAccessor.isOverWrite = false; } org.eclipse.birt.report.utility.ParameterAccessor.initProps = org.eclipse.birt.report.utility.ParameterAccessor.initViewerProps(context, org.eclipse.birt.report.utility.ParameterAccessor.initProps); org.eclipse.birt.report.utility.ParameterAccessor.clearDocuments(); org.eclipse.birt.report.utility.ParameterAccessor.isInitContext = true; }
private void preview(java.lang.String uri) { if ((uri == null) || ((uri.trim().length()) == 0)) { clearPreview(); return; } try { org.eclipse.swt.graphics.Image image; if ((selectedType) == (org.eclipse.birt.report.designer.ui.dialogs.ImageBuilder.URI_TYPE)) { image = org.eclipse.birt.report.designer.util.ImageManager.getInstance().getURIImage(inputImage.getModuleHandle(), uri); } else { image = org.eclipse.birt.report.designer.util.ImageManager.getInstance().loadImage(inputImage.getModuleHandle(), uri); } previewCanvas.loadImage(image); } catch (java.lang.Exception e) { clearPreview(); logger.log(java.util.logging.Level.WARNING, e.getLocalizedMessage()); } }
public void refreshFigure() { refreshBorder(getCrosstabHandleAdapter().getDesignElementHandle(), ((org.eclipse.birt.report.designer.internal.ui.editors.schematic.border.BaseBorder) (getFigure().getBorder()))); refreshBackground(getCrosstabHandleAdapter().getDesignElementHandle()); refreshMargin(); ((org.eclipse.birt.report.designer.internal.ui.layout.TableLayout) (getContentPane().getLayoutManager())).markDirty(); }
private void initFunctions() { java.lang.reflect.Method[] tmpMethods = this.getClass().getDeclaredMethods(); java.util.Set<java.lang.String> tmpNames = new java.util.HashSet<java.lang.String>(); for (int i = 0; i < (tmpMethods.length); i++) { java.lang.reflect.Method tmpMethod = tmpMethods[i]; if (((tmpMethod.getModifiers()) & (java.lang.reflect.Modifier.PUBLIC)) != 0) tmpNames.add(tmpMethod.getName()); } tmpNames.remove("getReportElementByID"); tmpNames.remove("setUserProperty"); java.lang.String[] tmpArray = new java.lang.String[tmpNames.size()]; tmpNames.toArray(tmpArray); org.mozilla.javascript.ContextFactory.getGlobal().enterContext(); try { this.defineFunctionProperties(tmpArray, this.getClass(), org.eclipse.birt.report.model.simpleapi.DONTENUM); } finally { org.mozilla.javascript.Context.exit(); } this.defineProperty("getReportElementByID", new org.eclipse.birt.report.model.simpleapi.ReportDesign.Function_getReportElementByID(), org.eclipse.birt.report.model.simpleapi.DONTENUM); this.defineProperty("setUserProperty", new org.eclipse.birt.report.model.simpleapi.ReportDesign.Function_setUserProperty(), org.eclipse.birt.report.model.simpleapi.DONTENUM); }
private void populateGrouping(org.mozilla.javascript.Context cx) throws org.eclipse.birt.data.engine.core.DataException { java.util.List groups = this.baseQueryDefn.getGroups(); if ((groups != null) && (!(groups.isEmpty()))) { org.eclipse.birt.data.engine.odi.IQuery[] groupSpecs = new org.eclipse.birt.data.engine.odi.IQuery.GroupSpec[groups.size()]; java.util.Iterator it = groups.iterator(); for (int i = 0; it.hasNext(); i++) { org.eclipse.birt.data.engine.api.IGroupDefinition src = ((org.eclipse.birt.data.engine.api.IGroupDefinition) (it.next())); if ((((src.getKeyColumn()) == null) || ((src.getKeyColumn().trim().length()) == 0)) && (((src.getKeyExpression()) == null) || ((src.getKeyExpression().trim().length()) == 0))) throw new org.eclipse.birt.data.engine.core.DataException(org.eclipse.birt.data.engine.i18n.ResourceConstants.BAD_GROUP_EXPRESSION); java.lang.String expr = getGroupKeyExpression(src); java.lang.String groupName = ""; if ((((expr.trim().equalsIgnoreCase("row[0]")) || (expr.trim().equalsIgnoreCase("row._rowPosition"))) || (expr.trim().equalsIgnoreCase("dataSetRow[0]"))) || (expr.trim().equalsIgnoreCase("dataSetRow._rowPosition"))) { groupName = ("_{$TEMP_GROUP_" + i) + "ROWID$}_"; } else { groupName = ("_{$TEMP_GROUP_" + i) + "$}_"; } if (((src.getInterval()) != (org.eclipse.birt.data.engine.api.IGroupDefinition.NO_INTERVAL)) && ((src.getIntervalRange()) != 0)) { try { expr = org.eclipse.birt.data.engine.impl.ExpressionUtil.createGroupByExpression(src.getInterval(), src.getIntervalStart(), getGroupKeyExpression(src), src.getIntervalRange(), getColumnDataType(cx, expr)); } catch (org.eclipse.birt.core.exception.BirtException be) { throw org.eclipse.birt.data.engine.core.DataException.wrap(be); } } org.eclipse.birt.data.engine.odi.IQuery.GroupSpec dest = org.eclipse.birt.data.engine.impl.QueryExecutorUtil.groupDefnToSpec(cx, src, expr, groupName, (-1)); groupSpecs[i] = dest; if (((dest.getInterval()) != (org.eclipse.birt.data.engine.api.IGroupDefinition.NO_INTERVAL)) && ((dest.getIntervalRange()) != 0)) { if ((dest.getInterval()) == (org.eclipse.birt.data.engine.api.IGroupDefinition.STRING_PREFIX_INTERVAL)) { temporaryComputedColumns.add(new org.eclipse.birt.data.engine.api.querydefn.ComputedColumn(groupName, expr, org.eclipse.birt.core.data.DataType.STRING_TYPE)); } else { temporaryComputedColumns.add(new org.eclipse.birt.data.engine.api.querydefn.ComputedColumn(groupName, expr, org.eclipse.birt.core.data.DataType.INTEGER_TYPE)); } } else { temporaryComputedColumns.add(new org.eclipse.birt.data.engine.api.querydefn.ComputedColumn(groupName, expr, org.eclipse.birt.data.engine.impl.QueryExecutorUtil.getTempComputedColumnType(groupSpecs[i].getInterval()))); } } odiQuery.setGrouping(java.util.Arrays.asList(groupSpecs)); } }
public boolean process(org.eclipse.birt.data.engine.odi.IResultObject resultObject, int rowIndex) throws org.eclipse.birt.data.engine.core.DataException { org.eclipse.birt.data.engine.impl.ComputedColumnHelperInstance.logger.entering(org.eclipse.birt.data.engine.impl.ComputedColumnHelper.class.getName(), "process"); assert resultObject != null; org.eclipse.birt.data.engine.odi.IResultClass resultClass = resultObject.getResultClass(); if ((isPrepared) == false) prepare(resultClass); if ((computedColumn.length) == 0) { org.eclipse.birt.data.engine.impl.ComputedColumnHelperInstance.logger.exiting(org.eclipse.birt.data.engine.impl.ComputedColumnHelper.class.getName(), "process"); return true; } dataSet.setRowObject(resultObject, true); dataSet.setCurrentRowIndex(rowIndex); org.eclipse.birt.data.engine.impl.DataSetRuntime.Mode temp = dataSet.getMode(); dataSet.setMode(this.mode); try { for (int i = 0; i < (computedColumn.length); i++) { if (isAggrComputedColumn(computedColumn[i])) { continue; } if ((computedColumn[i].getExpression()) != null) { java.lang.Object value = null; try { if (((computedColumn[i].getExpression().getHandle()) != null) && ((computedColumn[i].getExpression().getHandle()) instanceof org.eclipse.birt.data.engine.expression.CompiledExpression)) value = ((org.eclipse.birt.data.engine.expression.CompiledExpression) (computedColumn[i].getExpression().getHandle())).evaluate(cx, dataSet.getScriptScope()); else { org.eclipse.birt.data.engine.api.IScriptExpression expr = ((org.eclipse.birt.data.engine.api.IScriptExpression) (computedColumn[i].getExpression())); java.lang.String exprText = expr.getText(); if (exprText != null) { if ((expr.getHandle()) == null) { expr.setHandle(cx.compile(expr.getScriptId(), null, 0, exprText)); } value = org.eclipse.birt.data.engine.script.ScriptEvalUtil.evalExpr(expr, cx, null, 0); } } if ((computedColumn[i]) instanceof org.eclipse.birt.data.engine.impl.GroupComputedColumn) { try { value = ((org.eclipse.birt.data.engine.impl.GroupComputedColumn) (computedColumn[i])).calculate(value); } catch (org.eclipse.birt.core.exception.BirtException e) { throw org.eclipse.birt.data.engine.core.DataException.wrap(e); } } value = org.eclipse.birt.core.data.DataTypeUtil.convert(value, resultClass.getFieldValueClass(columnIndexArray[i])); } catch (org.eclipse.birt.core.exception.BirtException e) { java.lang.String fieldName = resultClass.getFieldName(columnIndexArray[i]); if ((fieldName != null) && (fieldName.startsWith("_{$TEMP_"))) { throw new org.eclipse.birt.data.engine.core.DataException(org.eclipse.birt.data.engine.i18n.ResourceConstants.WRONG_SYSTEM_COMPUTED_COLUMN, e); } if (resultClass.wasAnyType(columnIndexArray[i])) throw new org.eclipse.birt.data.engine.core.DataException(org.eclipse.birt.data.engine.i18n.ResourceConstants.POSSIBLE_MIXED_DATA_TYPE_IN_COLUMN, e); throw new org.eclipse.birt.data.engine.core.DataException(org.eclipse.birt.data.engine.i18n.ResourceConstants.FAIL_RETRIEVE_VALUE_COMPUTED_COLUMN, e, resultClass.getFieldName(columnIndexArray[i])); } resultObject.setCustomFieldValue(columnIndexArray[i], value); } else { throw new org.eclipse.birt.data.engine.core.DataException(org.eclipse.birt.data.engine.i18n.ResourceConstants.EXPR_INVALID_COMPUTED_COLUMN, resultObject.getResultClass().getFieldName(columnIndexArray[i])); } } } finally { dataSet.setMode(temp); } org.eclipse.birt.data.engine.impl.ComputedColumnHelperInstance.logger.exiting(org.eclipse.birt.data.engine.impl.ComputedColumnHelper.class.getName(), "process"); return true; }
public static java.lang.String getBindingexpression(org.eclipse.birt.report.model.api.DesignElementHandle baseElement, org.eclipse.birt.report.model.api.ComputedColumnHandle column) { java.lang.String exp = org.eclipse.birt.report.designer.core.IReportElementConstants.BINDING_COLUMN_PREFIX; if (org.eclipse.birt.report.designer.util.DEUtil.isCrosstabElement(baseElement)) { exp = org.eclipse.birt.core.data.ExpressionUtil.DATA_INDICATOR; } for (int i = 0; i < (org.eclipse.birt.report.designer.util.DEUtil.getBindingLevel(column.getElementHandle(), baseElement)); i++) { exp += org.eclipse.birt.report.designer.core.IReportElementConstants.OUTER_BINDING_COLUMN_PREFIX; } exp += ("[\"" + (org.eclipse.birt.report.designer.util.DEUtil.escape(column.getName()))) + "\"]"; return exp; }
public static boolean handleValidateDragInOutline(java.lang.Object selection) { if (selection instanceof org.eclipse.jface.viewers.StructuredSelection) { return org.eclipse.birt.report.designer.util.DNDUtil.handleValidateDragInOutline(((org.eclipse.jface.viewers.StructuredSelection) (selection)).toArray()); } if (selection instanceof java.lang.Object[]) { java.lang.Object[] array = ((java.lang.Object[]) (selection)); if ((array.length) == 0) { return false; } if ((array[0]) instanceof org.eclipse.birt.report.model.api.ColumnHandle) { boolean bool = false; int columnNumber = org.eclipse.birt.report.designer.core.model.schematic.HandleAdapterFactory.getInstance().getColumnHandleAdapter(array[0]).getColumnNumber(); java.lang.Object parent = ((org.eclipse.birt.report.model.api.ColumnHandle) (array[0])).getContainer(); if (parent instanceof org.eclipse.birt.report.model.api.TableHandle) { bool = ((org.eclipse.birt.report.model.api.TableHandle) (parent)).canCopyColumn(columnNumber); } else if (parent instanceof org.eclipse.birt.report.model.api.GridHandle) { bool = ((org.eclipse.birt.report.model.api.GridHandle) (parent)).canCopyColumn(columnNumber); } if (bool && ((array.length) == 1)) { return true; } if (bool && ((array[1]) instanceof org.eclipse.birt.report.model.api.CellHandle)) { return true; } return false; } for (int i = 0; i < (array.length); i++) { if (org.eclipse.birt.report.designer.util.DNDUtil.checkContainerExists(array[i], array)) continue; if (!(org.eclipse.birt.report.designer.util.DNDUtil.handleValidateDragInOutline(array[i]))) return false; } return true; } if (selection instanceof org.eclipse.birt.report.designer.core.model.views.outline.ReportElementModel) { return org.eclipse.birt.report.designer.util.DNDUtil.handleValidateDragInOutline(((org.eclipse.birt.report.designer.core.model.views.outline.ReportElementModel) (selection)).getSlotHandle()); } if (selection instanceof org.eclipse.birt.report.model.api.SlotHandle) { org.eclipse.birt.report.model.api.SlotHandle slot = ((org.eclipse.birt.report.model.api.SlotHandle) (selection)); org.eclipse.birt.report.model.api.DesignElementHandle handle = slot.getElementHandle(); return ((slot.getContents().size()) > 0) && ((handle instanceof org.eclipse.birt.report.model.api.ListHandle) || (handle instanceof org.eclipse.birt.report.model.api.ListGroupHandle)); } if (selection instanceof org.eclipse.birt.report.model.api.ColumnHandle) { int columnNumber = org.eclipse.birt.report.designer.core.model.schematic.HandleAdapterFactory.getInstance().getColumnHandleAdapter(selection).getColumnNumber(); java.lang.Object parent = ((org.eclipse.birt.report.model.api.ColumnHandle) (selection)).getContainer(); if (parent instanceof org.eclipse.birt.report.model.api.TableHandle) { return ((org.eclipse.birt.report.model.api.TableHandle) (parent)).canCopyColumn(columnNumber); } else if (parent instanceof org.eclipse.birt.report.model.api.GridHandle) { return ((org.eclipse.birt.report.model.api.GridHandle) (parent)).canCopyColumn(columnNumber); } } return ((((((((((selection instanceof org.eclipse.birt.report.model.api.ReportItemHandle) || (selection instanceof org.eclipse.birt.report.model.api.DataSetHandle)) || (selection instanceof org.eclipse.birt.report.model.api.DataSourceHandle)) || (selection instanceof org.eclipse.birt.report.model.api.ScalarParameterHandle)) || (selection instanceof org.eclipse.birt.report.model.api.ParameterGroupHandle)) || (selection instanceof org.eclipse.birt.report.model.api.GroupHandle)) || (selection instanceof org.eclipse.birt.report.model.api.StyleHandle)) || (selection instanceof org.eclipse.birt.report.model.api.ThemeHandle)) || (selection instanceof org.eclipse.birt.report.model.api.EmbeddedImageHandle)) || (selection instanceof org.eclipse.birt.report.model.api.TemplateElementHandle)) || (selection instanceof org.eclipse.birt.report.designer.core.model.views.data.DataSetItemModel); }
private void updateRow(org.eclipse.birt.report.engine.nLayout.area.impl.RowArea rowArea, boolean isFixedLayout) { org.eclipse.birt.report.engine.nLayout.area.impl.RowArea lastRow = ((org.eclipse.birt.report.engine.nLayout.area.impl.RowArea) (rows.getCurrent())); boolean usedResolvedRow = false; int height = rowArea.getSpecifiedHeight(); if ((!isFixedLayout) || (height == 0)) { for (int i = startCol; i <= (endCol); i++) { org.eclipse.birt.report.engine.nLayout.area.impl.CellArea upperCell = null; if (lastRow != null) { upperCell = lastRow.getCell(i); } if ((upperCell != null) && ((upperCell.getRowSpan()) > 1)) { if ((rowArea.cells[i]) != null) { rowArea.removeChild(rowArea.cells[i]); } org.eclipse.birt.report.engine.nLayout.area.impl.DummyCell dummyCell = createDummyCell(upperCell); rowArea.setCell(dummyCell); int delta = dummyCell.getDelta(); if ((dummyCell.getRowSpan()) == 1) { height = java.lang.Math.max(height, ((dummyCell.getCell().getHeight()) - delta)); } i = (i + (upperCell.getColSpan())) - 1; } else { org.eclipse.birt.report.engine.nLayout.area.impl.CellArea cell = rowArea.getCell(i); if (cell == null) { if ((unresolvedRow) != null) { upperCell = unresolvedRow.getCell(i); usedResolvedRow = true; } if (upperCell != null) { cell = createEmptyCell(upperCell, i, rowArea, lastRow); } } if ((cell != null) && ((cell.getRowSpan()) == 1)) { height = java.lang.Math.max(height, cell.getHeight()); i = (i + (cell.getColSpan())) - 1; } } } } else { for (int i = startCol; i <= (endCol); i++) { org.eclipse.birt.report.engine.nLayout.area.impl.CellArea upperCell = null; if (lastRow != null) { upperCell = lastRow.getCell(i); } if ((upperCell != null) && ((upperCell.getRowSpan()) > 1)) { org.eclipse.birt.report.engine.nLayout.area.impl.DummyCell dummyCell = createDummyCell(upperCell); rowArea.setCell(dummyCell); i = (i + (upperCell.getColSpan())) - 1; } else { org.eclipse.birt.report.engine.nLayout.area.impl.CellArea cell = rowArea.getCell(i); if (cell == null) { if ((unresolvedRow) != null) { upperCell = unresolvedRow.getCell(i); usedResolvedRow = true; } if (upperCell != null) { cell = createEmptyCell(upperCell, i, rowArea, lastRow); } } if ((cell != null) && ((cell.getRowSpan()) == 1)) { i = (i + (cell.getColSpan())) - 1; } } } } if (usedResolvedRow) { unresolvedRow = null; } updateRowHeight(rowArea, height, isFixedLayout); }
private void verifyInput() { if ((isRef) && (((cmbName.getText()) == null) || (cmbName.getText().equals("")))) { dialog.getOkButton().setEnabled(false); return; } if (((txtName) != null) && (((txtName.getText()) == null) || (txtName.getText().trim().equals("")))) { if ((dialog.getOkButton()) != null) dialog.getOkButton().setEnabled(false); } else if (((txtExpression) != null) && (((txtExpression.getText()) == null) || (txtExpression.getText().trim().equals("")))) { if ((dialog.getOkButton()) != null) dialog.getOkButton().setEnabled(false); } else { if ((this.binding) == null) { for (java.util.Iterator iterator = this.bindingHolder.getColumnBindings().iterator(); iterator.hasNext();) { org.eclipse.birt.report.model.api.ComputedColumnHandle computedColumn = ((org.eclipse.birt.report.model.api.ComputedColumnHandle) (iterator.next())); if (computedColumn.getName().equals(txtName.getText())) { if ((dialog.getOkButton()) != null) dialog.getOkButton().setEnabled(false); this.messageLine.setText(org.eclipse.birt.report.designer.nls.Messages.getFormattedString("BindingDialogHelper.error.nameduplicate", new java.lang.Object[]{ txtName.getText() })); this.messageLine.setImage(org.eclipse.ui.PlatformUI.getWorkbench().getSharedImages().getImage(ISharedImages.IMG_OBJS_ERROR_TSK)); return; } } } if ((dialog.getOkButton()) != null) dialog.getOkButton().setEnabled(true); this.messageLine.setText(""); this.messageLine.setImage(null); } }
public static java.lang.String toHexString(byte[] bytes) { java.lang.StringBuffer result = new java.lang.StringBuffer(); int length = 0; for (int i = 0; i < (bytes.length); i++) { result.append(org.eclipse.birt.report.engine.emitter.postscript.truetypefont.Util.toHexString(bytes[i])); length += 2; if (length > 80) { result.append("\n"); length = 0; } } return result.toString(); }
public boolean onBroughtToTop(org.eclipse.birt.report.designer.ui.editors.IReportEditorPage prePage) { boolean isDisplay = false; if ((getEditorInput()) != (prePage.getEditorInput())) { setInput(prePage.getEditorInput()); } if (isDirtyModel()) { doSave(null); } if (prePage.isDirty()) { prePage.doSave(null); } if (isMissingParameter()) { if ((parameterDialog) != null) { parameterDialog.open(); if ((parameterDialog.getReturnCode()) == (org.eclipse.birt.report.designer.internal.ui.dialogs.InputParameterHtmlDialog.RETURN_CODE_BROWSER_CLOSED)) { isDisplay = true; if (isMissingParameter()) { editor.setActivePage(prePage.getId()); return false; } } } } else { isDisplay = true; } if (isDisplay) { display(); } org.eclipse.birt.report.designer.core.util.mediator.request.ReportRequest request = new org.eclipse.birt.report.designer.core.util.mediator.request.ReportRequest(this); java.util.List list = new java.util.ArrayList(); list.add(new java.lang.Object()); request.setSelectionObject(list); request.setType(ReportRequest.SELECTION); org.eclipse.birt.report.designer.core.model.SessionHandleAdapter.getInstance().getMediator().notifyRequest(request); return true; }
static void handleElement(org.w3c.dom.Element ele, java.util.Map cssStyles, org.eclipse.birt.report.engine.content.IContent content, org.eclipse.birt.report.engine.content.impl.ActionContent action, int index) { org.eclipse.birt.report.engine.content.IStyle cssStyle = ((org.eclipse.birt.report.engine.content.IStyle) (cssStyles.get(ele))); if (cssStyle != null) { if ("none".equals(cssStyle.getDisplay())) { return; } } java.lang.String tagName = ele.getTagName(); if (tagName.toLowerCase().equals("a")) { org.eclipse.birt.report.engine.content.IContainerContent container = content.getReportContent().createContainerContent(); org.eclipse.birt.report.engine.layout.pdf.util.HTML2Content.addChild(content, container); org.eclipse.birt.report.engine.layout.pdf.util.HTML2Content.handleStyle(ele, cssStyles, container); org.eclipse.birt.report.engine.content.impl.ActionContent actionContent = org.eclipse.birt.report.engine.layout.pdf.util.HTML2Content.handleAnchor(ele, container, action); org.eclipse.birt.report.engine.layout.pdf.util.HTML2Content.processNodes(ele, cssStyles, content, actionContent); } else if (tagName.toLowerCase().equals("img")) { org.eclipse.birt.report.engine.layout.pdf.util.HTML2Content.outputImg(ele, cssStyles, content); } else if (tagName.toLowerCase().equals("br")) { org.eclipse.birt.report.engine.content.ILabelContent label = content.getReportContent().createLabelContent(); org.eclipse.birt.report.engine.layout.pdf.util.HTML2Content.addChild(content, label); label.setText("\n"); org.eclipse.birt.report.engine.css.dom.StyleDeclaration inlineStyle = new org.eclipse.birt.report.engine.css.dom.StyleDeclaration(content.getCSSEngine()); inlineStyle.setProperty(IStyle.STYLE_DISPLAY, CSSValueConstants.INLINE_VALUE); label.setInlineStyle(inlineStyle); } else if ((tagName.toLowerCase().equals("li")) && ((ele.getParentNode().getNodeType()) == (org.w3c.dom.Node.ELEMENT_NODE))) { org.eclipse.birt.report.engine.css.dom.StyleDeclaration style = new org.eclipse.birt.report.engine.css.dom.StyleDeclaration(content.getCSSEngine()); style.setProperty(IStyle.STYLE_DISPLAY, CSSValueConstants.BLOCK_VALUE); style.setProperty(IStyle.STYLE_VERTICAL_ALIGN, CSSValueConstants.MIDDLE_VALUE); org.eclipse.birt.report.engine.content.IContainerContent container = content.getReportContent().createContainerContent(); container.setInlineStyle(style); org.eclipse.birt.report.engine.layout.pdf.util.HTML2Content.addChild(content, container); org.eclipse.birt.report.engine.layout.pdf.util.HTML2Content.handleStyle(ele, cssStyles, container); style = new org.eclipse.birt.report.engine.css.dom.StyleDeclaration(content.getCSSEngine()); style.setProperty(IStyle.STYLE_DISPLAY, CSSValueConstants.INLINE_VALUE); style.setProperty(IStyle.STYLE_VERTICAL_ALIGN, CSSValueConstants.TOP_VALUE); org.eclipse.birt.report.engine.content.IContainerContent orderContainer = content.getReportContent().createContainerContent(); org.w3c.dom.css.CSSValue fontSizeValue = content.getComputedStyle().getProperty(IStyle.STYLE_FONT_SIZE); orderContainer.setWidth(new org.eclipse.birt.report.engine.ir.DimensionType(((2.1 * (org.eclipse.birt.report.engine.layout.pdf.util.PropertyUtil.getDimensionValue(fontSizeValue))) / 1000.0), org.eclipse.birt.report.engine.ir.EngineIRConstants.UNITS_PT)); orderContainer.setInlineStyle(style); org.eclipse.birt.report.engine.layout.pdf.util.HTML2Content.addChild(container, orderContainer); org.eclipse.birt.report.engine.content.impl.TextContent text = ((org.eclipse.birt.report.engine.content.impl.TextContent) (content.getReportContent().createTextContent())); org.eclipse.birt.report.engine.layout.pdf.util.HTML2Content.addChild(orderContainer, text); if (ele.getParentNode().getNodeName().equals("ol")) { text.setText(((new java.lang.Integer(index).toString()) + ".")); } else if (ele.getParentNode().getNodeName().equals("ul")) { text.setText(new java.lang.String(new char[]{ '\u2022', ' ', ' ', ' ', ' ' })); } text.setInlineStyle(style); org.eclipse.birt.report.engine.content.IContainerContent childContainer = content.getReportContent().createContainerContent(); org.eclipse.birt.report.engine.layout.pdf.util.HTML2Content.addChild(container, childContainer); childContainer.setInlineStyle(style); org.eclipse.birt.report.engine.layout.pdf.util.HTML2Content.processNodes(ele, cssStyles, childContainer, action); } else if ((tagName.toLowerCase().equals("dd")) || (tagName.toLowerCase().equals("dt"))) { org.eclipse.birt.report.engine.content.IContainerContent container = content.getReportContent().createContainerContent(); org.eclipse.birt.report.engine.layout.pdf.util.HTML2Content.addChild(content, container); org.eclipse.birt.report.engine.layout.pdf.util.HTML2Content.handleStyle(ele, cssStyles, container); if (tagName.toLowerCase().equals("dd")) { org.eclipse.birt.report.engine.css.dom.StyleDeclaration style = new org.eclipse.birt.report.engine.css.dom.StyleDeclaration(content.getCSSEngine()); style.setProperty(IStyle.STYLE_DISPLAY, CSSValueConstants.INLINE_VALUE); style.setProperty(IStyle.STYLE_VERTICAL_ALIGN, CSSValueConstants.TOP_VALUE); org.eclipse.birt.report.engine.content.impl.TextContent text = ((org.eclipse.birt.report.engine.content.impl.TextContent) (content.getReportContent().createTextContent())); org.eclipse.birt.report.engine.layout.pdf.util.HTML2Content.addChild(container, text); if (ele.getParentNode().getNodeName().equals("dl")) { text.setText(" "); } style.setTextIndent("2em"); text.setInlineStyle(style); org.eclipse.birt.report.engine.content.IContainerContent childContainer = content.getReportContent().createContainerContent(); childContainer.setInlineStyle(style); org.eclipse.birt.report.engine.layout.pdf.util.HTML2Content.addChild(container, childContainer); org.eclipse.birt.report.engine.layout.pdf.util.HTML2Content.processNodes(ele, cssStyles, container, action); } else { org.eclipse.birt.report.engine.layout.pdf.util.HTML2Content.processNodes(ele, cssStyles, container, action); } } else if ("table".equals(tagName.toLowerCase())) { org.eclipse.birt.report.engine.layout.pdf.util.TableProcessor.processTable(ele, cssStyles, content, action); } else { org.eclipse.birt.report.engine.content.IContainerContent container = content.getReportContent().createContainerContent(); org.eclipse.birt.report.engine.layout.pdf.util.HTML2Content.handleStyle(ele, cssStyles, container); org.eclipse.birt.report.engine.layout.pdf.util.HTML2Content.addChild(content, container); org.eclipse.birt.report.engine.layout.pdf.util.HTML2Content.processNodes(ele, cssStyles, container, action); } }
public void createPageCustomControl(org.eclipse.swt.widgets.Composite parent) { sComposite = new org.eclipse.swt.custom.ScrolledComposite(parent, ((org.eclipse.swt.SWT.H_SCROLL) | (org.eclipse.swt.SWT.V_SCROLL))); sComposite.setLayout(new org.eclipse.swt.layout.GridLayout()); sComposite.setLayoutData(new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_BOTH)); sComposite.setMinWidth(600); sComposite.setExpandHorizontal(true); org.eclipse.swt.widgets.Composite mainComposite = new org.eclipse.swt.widgets.Composite(sComposite, org.eclipse.swt.SWT.NONE); mainComposite.setLayout(new org.eclipse.swt.layout.GridLayout(1, false)); org.eclipse.swt.layout.GridData gridData = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_BOTH); mainComposite.setLayoutData(gridData); createTopArea(mainComposite); createFieldsSelectionArea(mainComposite); createBottomArea(mainComposite); org.eclipse.swt.graphics.Point size = mainComposite.computeSize(SWT.DEFAULT, SWT.DEFAULT); mainComposite.setSize(size.x, size.y); sComposite.setContent(mainComposite); setControl(sComposite); setPageComplete(false); try { initPageInfos(); } catch (final org.eclipse.datatools.connectivity.oda.OdaException e) { initializeControl(); org.eclipse.swt.widgets.Display.getDefault().asyncExec(new java.lang.Runnable() { public void run() { java.lang.String errorMsg = org.eclipse.birt.data.oda.mongodb.ui.util.UIHelper.getUserErrorMessage("MongoDBDataSetWizardPage.MessageDialog.ErrorMessage.InitPage", e); org.eclipse.datatools.connectivity.internal.ui.dialogs.ExceptionHandler.showException(sComposite.getShell(), org.eclipse.birt.data.oda.mongodb.ui.i18n.Messages.getString("MongoDBDataSetWizardPage.MessageDialog.title.GeneralError"), errorMsg, e); } }); return; } initializeControl(); resetLabelWidth(); modelChanged = false; org.eclipse.birt.data.oda.mongodb.ui.util.UIHelper.setSystemHelp(getControl(), IHelpConstants.CONTEXT_ID_WIZARD_DATASET_MONGODB); }
protected void setupPageBreak(org.eclipse.birt.report.engine.executor.optimize.ExecutionOptimize.PolicyNode node) { org.eclipse.birt.report.engine.ir.ReportItemDesign item = node.design; org.eclipse.birt.report.engine.content.IStyle style = item.getStyle(); if (style != null) { org.w3c.dom.css.CSSValue masterPage = style.getProperty(IStyle.STYLE_MASTER_PAGE); org.w3c.dom.css.CSSValue pageBreakBefore = style.getProperty(IStyle.STYLE_PAGE_BREAK_BEFORE); org.w3c.dom.css.CSSValue pageBreakAfter = style.getProperty(IStyle.STYLE_PAGE_BREAK_AFTER); if ((masterPage != null) || ((pageBreakBefore != null) && (!(pageBreakBefore.equals(IStyle.AUTO_VALUE))))) { node.breakBefore = true; node.execute = true; } if ((pageBreakAfter != null) && (!(pageBreakAfter.equals(IStyle.AUTO_VALUE)))) { node.breakAfter = true; node.execute = true; } } if ((((item.getJavaClass()) != null) || ((item.getOnCreate()) != null)) || ((item.getOnPageBreak()) != null)) { node.breakBefore = true; node.breakAfter = true; node.execute = true; if (item instanceof org.eclipse.birt.report.engine.ir.TableItemDesign) { node.executeAll = true; } } if ((node.breakBefore) || (node.breakAfter)) { java.util.Iterator iter = rows.iterator(); while (iter.hasNext()) { org.eclipse.birt.report.engine.executor.optimize.ExecutionOptimize.PolicyNode row = ((org.eclipse.birt.report.engine.executor.optimize.ExecutionOptimize.PolicyNode) (iter.next())); row.executeAll = true; } return; } if (((item.getHighlight()) != null) || ((item.getMap()) != null)) { node.execute = true; } if ((((item.getTOC()) != null) || ((item.getBookmark()) != null)) || ((item.getAction()) != null)) { node.execute = true; } if ((item.getQueries()) != null) { node.execute = true; } if ((item.getVisibility()) != null) { node.execute = true; } }
public java.lang.Object visitAutoText(org.eclipse.birt.report.engine.content.IAutoTextContent autoText, java.lang.Object value) { if ((org.eclipse.birt.report.engine.content.IAutoTextContent.PAGE_NUMBER) == (autoText.getType())) { if ((parent) instanceof org.eclipse.birt.report.engine.layout.pdf.PDFLineAreaLM) { java.lang.String originalPageNumber = autoText.getText(); org.eclipse.birt.core.format.NumberFormatter nf = new org.eclipse.birt.core.format.NumberFormatter(); java.lang.String patternStr = autoText.getComputedStyle().getNumberFormat(); nf.applyPattern(patternStr); try { autoText.setText(nf.format(java.lang.Integer.parseInt(originalPageNumber))); } catch (java.lang.NumberFormatException nfe) { autoText.setText(originalPageNumber); } } return handleText(autoText); } return new org.eclipse.birt.report.engine.layout.pdf.PDFTemplateLM(context, parent, autoText, executor); }
public void onRowSets(org.eclipse.birt.report.engine.extension.IBaseResultSet[] results) throws org.eclipse.birt.core.exception.BirtException { if (((modelHandle) == null) || ((cm) == null)) { return; } org.eclipse.birt.chart.model.attribute.Bounds bo = cm.getBlock().getBounds(); if (((bo.getWidth()) == 0) && ((bo.getHeight()) == 0)) { return; } java.lang.String javaHandlerClass = modelHandle.getEventHandlerClass(); if ((javaHandlerClass != null) && ((javaHandlerClass.length()) > 0)) { cm.setScript(javaHandlerClass); } rtc = org.eclipse.birt.chart.factory.Generator.instance().prepare(cm, new org.eclipse.birt.chart.reportitem.BIRTExternalContext(context), new org.eclipse.birt.chart.reportitem.BIRTScriptClassLoader(appClassLoader), com.ibm.icu.util.ULocale.getDefault()); if (((((results == null) || ((results.length) != 1)) || (org.eclipse.birt.chart.reportitem.ChartReportItemUtil.isEmpty(results[0]))) || ((queries) == null)) || ((queries[0]) == null)) { return; } }
@java.lang.Override public java.lang.Object getParent(java.lang.Object model) { if ((model != null) && ((((org.eclipse.birt.report.model.api.VariableElementHandle) (model)).getRoot()) != null)) return ((org.eclipse.birt.report.model.api.VariableElementHandle) (model)).getRoot().getPropertyHandle(IReportDesignModel.PAGE_VARIABLES_PROP); return null; }
public void buildStyle(org.eclipse.birt.report.engine.content.IContent element, java.lang.StringBuffer styleBuffer) { org.eclipse.birt.report.engine.content.IStyle style; if (isEmbeddable) { style = element.getStyle(); } else { style = element.getInlineStyle(); } buildStyle(style, styleBuffer); if (!(isEmbeddable)) { java.lang.String value = style.getDisplay(); if (null == value) { value = element.getStyle().getDisplay(); if (null != value) { styleBuffer.append(" display:"); styleBuffer.append(value); styleBuffer.append(";"); } } } }
public void contributeToMenu(org.eclipse.jface.action.IMenuManager menubar) { super.contributeToMenu(menubar); updateEditMenu(menubar); org.eclipse.jface.action.MenuManager insertMenu = new org.eclipse.jface.action.MenuManager(org.eclipse.birt.report.designer.nls.Messages.getString("DesignerActionBarContributor.menu.insert"), org.eclipse.birt.report.designer.internal.ui.editors.DesignerActionBarContributor.M_INSERT); contributeActionsToMenu(insertMenu, getInsertElementActions()); insertMenu.add(new org.eclipse.jface.action.Separator()); insertMenu.add(getAction(ImportLibraryAction.ID)); menubar.insertAfter(IWorkbenchActionConstants.M_EDIT, insertMenu); org.eclipse.jface.action.MenuManager elementMenu = new org.eclipse.jface.action.MenuManager(org.eclipse.birt.report.designer.nls.Messages.getString("DesignerActionBarContributor.menu.element"), org.eclipse.birt.report.designer.internal.ui.editors.DesignerActionBarContributor.M_ELEMENT); contributeActionsToMenu(elementMenu, org.eclipse.birt.report.designer.internal.ui.editors.DesignerActionBarContributor.elementActions); org.eclipse.jface.action.MenuManager insertGroupMenu = new org.eclipse.jface.action.MenuManager(org.eclipse.birt.report.designer.nls.Messages.getString("DesignerActionBarContributor.element.group"), org.eclipse.birt.report.designer.ui.actions.InsertGroupMenuAction.ID); insertGroupMenu.add(org.eclipse.birt.report.designer.ui.actions.NoneAction.getInstance()); insertGroupMenu.addMenuListener(new org.eclipse.jface.action.IMenuListener() { public void menuAboutToShow(org.eclipse.jface.action.IMenuManager manager) { updateInsertGroupMenu(InsertGroupMenuAction.ID, manager); } }); elementMenu.add(insertGroupMenu); org.eclipse.jface.action.MenuManager editGroupMenu = new org.eclipse.jface.action.MenuManager(org.eclipse.birt.report.designer.nls.Messages.getString("DesignerActionBarContributor.menu.element-EditGroup")); editGroupMenu.add(org.eclipse.birt.report.designer.ui.actions.NoneAction.getInstance()); editGroupMenu.addMenuListener(new org.eclipse.jface.action.IMenuListener() { public void menuAboutToShow(org.eclipse.jface.action.IMenuManager manager) { updateDynamicItems(EditGroupMenuAction.ID, manager); } }); elementMenu.add(editGroupMenu); elementMenu.add(new org.eclipse.jface.action.Separator()); contributeStyleMenu(elementMenu); elementMenu.addMenuListener(new org.eclipse.jface.action.IMenuListener() { public void menuAboutToShow(org.eclipse.jface.action.IMenuManager manager) { org.eclipse.jface.action.IContributionItem addGroupMenu = manager.findUsingPath(AddGroupAction.ID); org.eclipse.jface.action.IContributionItem insertGroupMenus = manager.findUsingPath(InsertGroupMenuAction.ID); if ((addGroupMenu == null) || (insertGroupMenus == null)) { return; } org.eclipse.ui.actions.RetargetAction action = ((org.eclipse.ui.actions.RetargetAction) (getAction(AddGroupAction.ID))); if ((action != null) && ((action.getActionHandler()) instanceof org.eclipse.birt.report.designer.internal.ui.editors.schematic.actions.AddGroupAction)) { if (action.getActionHandler().isEnabled()) { addGroupMenu.setVisible(true); insertGroupMenus.setVisible(false); } else { addGroupMenu.setVisible(false); insertGroupMenus.setVisible(true); } manager.update(true); } } }); menubar.insertAfter(org.eclipse.birt.report.designer.internal.ui.editors.DesignerActionBarContributor.M_INSERT, elementMenu); org.eclipse.jface.action.MenuManager dataMenu = new org.eclipse.jface.action.MenuManager(org.eclipse.birt.report.designer.nls.Messages.getString("DesignerActionBarContributor.menu.data"), org.eclipse.birt.report.designer.internal.ui.editors.DesignerActionBarContributor.M_DATA); dataMenu.add(getAction(org.eclipse.birt.report.designer.internal.ui.editors.DesignerActionBarContributor.dataActions[0].id)); dataMenu.add(getAction(org.eclipse.birt.report.designer.internal.ui.editors.DesignerActionBarContributor.dataActions[1].id)); editGroupMenu = new org.eclipse.jface.action.MenuManager(org.eclipse.birt.report.designer.nls.Messages.getString("DesignerActionBarContributor.menu.data-NewParameter")); contributeActionsToMenu(editGroupMenu, org.eclipse.birt.report.designer.internal.ui.editors.DesignerActionBarContributor.parameterActions); dataMenu.add(editGroupMenu); org.eclipse.ui.menus.IMenuService menuService = ((org.eclipse.ui.menus.IMenuService) (org.eclipse.ui.PlatformUI.getWorkbench().getService(org.eclipse.ui.menus.IMenuService.class))); menuService.populateContributionManager(dataMenu, "menu:birtData"); menubar.insertAfter(org.eclipse.birt.report.designer.internal.ui.editors.DesignerActionBarContributor.M_ELEMENT, dataMenu); menubar.update(); }
private boolean needSave(org.eclipse.birt.report.engine.content.IContent content) { org.eclipse.birt.report.engine.api.InstanceID id = content.getInstanceID(); if ((id == null) || ((id.getComponentID()) == (-1))) { return true; } org.eclipse.birt.report.engine.content.IContent parent = ((org.eclipse.birt.report.engine.content.IContent) (content.getParent())); if (parent != null) { org.eclipse.birt.report.engine.api.InstanceID pid = parent.getInstanceID(); if ((pid == null) || ((pid.getComponentID()) == (-1))) { return true; } if ((parent.getGenerateBy()) instanceof org.eclipse.birt.report.engine.ir.ExtendedItemDesign) { return true; } } if (content instanceof org.eclipse.birt.report.engine.content.impl.AbstractContent) { return ((org.eclipse.birt.report.engine.content.impl.AbstractContent) (content)).needSave(); } return true; }
public void createSortArea(org.eclipse.swt.widgets.Composite parent) { cmpSortArea = new org.eclipse.swt.widgets.Group(parent, org.eclipse.swt.SWT.NONE); { cmpSortArea.setText(org.eclipse.birt.chart.ui.extension.i18n.Messages.getString("GroupSortingDialog.Composite.Group.Sorting")); cmpSortArea.setLayout(new org.eclipse.swt.layout.GridLayout(3, false)); org.eclipse.swt.layout.GridData gd = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_HORIZONTAL); gd.horizontalSpan = 2; gd.widthHint = 200; cmpSortArea.setLayoutData(gd); } lblSorting = new org.eclipse.swt.widgets.Label(cmpSortArea, org.eclipse.swt.SWT.NONE); lblSorting.setText(org.eclipse.birt.chart.ui.extension.i18n.Messages.getString("BaseSeriesDataSheetImpl.Lbl.DataSorting")); cmbSorting = new org.eclipse.swt.widgets.Combo(cmpSortArea, ((org.eclipse.swt.SWT.DROP_DOWN) | (org.eclipse.swt.SWT.READ_ONLY))); org.eclipse.swt.layout.GridData gdCMBSorting = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_HORIZONTAL); cmbSorting.setLayoutData(gdCMBSorting); cmbSorting.addListener(SWT.Selection, this); new org.eclipse.swt.widgets.Label(cmpSortArea, org.eclipse.swt.SWT.NONE); lblSortExpr = new org.eclipse.swt.widgets.Label(cmpSortArea, org.eclipse.swt.SWT.NONE); lblSortExpr.setText(org.eclipse.birt.chart.ui.extension.i18n.Messages.getString("BaseGroupSortingDialog.Label.SortOn")); cmbSortExpr = new org.eclipse.swt.widgets.Combo(cmpSortArea, org.eclipse.swt.SWT.DROP_DOWN); org.eclipse.swt.layout.GridData gdCMBSortExpr = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_HORIZONTAL); cmbSortExpr.setLayoutData(gdCMBSortExpr); cmbSortExpr.addListener(SWT.Selection, this); cmbSortExpr.addFocusListener(new org.eclipse.swt.events.FocusAdapter() { public void focusLost(org.eclipse.swt.events.FocusEvent e) { updateSortKey(); } }); try { btnSortExprBuilder = ((org.eclipse.birt.chart.ui.swt.interfaces.IExpressionButton) (wizardContext.getUIServiceProvider().invoke(IUIServiceProvider.Command.EXPRESS_BUTTON_CREATE, cmpSortArea, cmbSortExpr, wizardContext.getExtendedItem(), IUIServiceProvider.COMMAND_EXPRESSION_DATA_BINDINGS, null))); org.eclipse.birt.chart.model.data.Query query = getSeriesDefinitionForProcessing().getSortKey(); if (query != null) { btnSortExprBuilder.setExpression(query.getDefinition()); } } catch (org.eclipse.birt.chart.exception.ChartException e) { org.eclipse.birt.core.ui.frameworks.taskwizard.WizardBase.displayException(e); } lblSortLocale = new org.eclipse.swt.widgets.Label(cmpSortArea, org.eclipse.swt.SWT.NONE); lblSortLocale.setText(org.eclipse.birt.chart.ui.extension.i18n.Messages.getString("GroupSortingDialog.Composite.Label.SortLocale")); cmbSortLocale = new org.eclipse.swt.widgets.Combo(cmpSortArea, ((org.eclipse.swt.SWT.READ_ONLY) | (org.eclipse.swt.SWT.BORDER))); org.eclipse.swt.layout.GridData gd = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_HORIZONTAL); cmbSortLocale.setLayoutData(gd); cmbSortLocale.setVisibleItemCount(30); cmbSortLocale.addListener(SWT.Selection, this); new org.eclipse.swt.widgets.Label(cmpSortArea, org.eclipse.swt.SWT.NONE); lblSortStrength = new org.eclipse.swt.widgets.Label(cmpSortArea, org.eclipse.swt.SWT.NONE); lblSortStrength.setText(org.eclipse.birt.chart.ui.extension.i18n.Messages.getString("GroupSortingDialog.Composite.Label.SortStrength")); cmbSortStrength = new org.eclipse.swt.widgets.Combo(cmpSortArea, ((org.eclipse.swt.SWT.READ_ONLY) | (org.eclipse.swt.SWT.BORDER))); gd = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_HORIZONTAL); cmbSortStrength.setLayoutData(gd); cmbSortStrength.setVisibleItemCount(30); cmbSortStrength.addListener(SWT.Selection, this); if (isInheritColumnsGroups()) { disableSorting(); } }
protected void handleDrop() { updateTargetRequest(); updateTargetEditPart(); if (org.eclipse.birt.report.designer.internal.ui.dnd.DNDService.getInstance().performDrop(org.eclipse.gef.dnd.TemplateTransfer.getInstance().getTemplate(), getTargetEditPart(), DND.DROP_DEFAULT, new org.eclipse.birt.report.designer.internal.ui.dnd.DNDLocation(getDropLocation()))) { return; } boolean isScalarparameter = false; boolean isResultSetColumn = false; boolean isEmbeddImage = false; final java.lang.Object template = org.eclipse.gef.dnd.TemplateTransfer.getInstance().getTemplate(); org.eclipse.jface.util.Assert.isNotNull(template); org.eclipse.jface.util.Assert.isTrue(handleValidateDrag(template)); org.eclipse.birt.report.designer.internal.ui.editors.schematic.tools.AbstractToolHandleExtends preHandle = null; java.lang.String transName = null; if (template instanceof java.lang.String) { org.eclipse.birt.report.designer.internal.ui.extension.experimental.PaletteEntryExtension[] entries = org.eclipse.birt.report.designer.internal.ui.extension.experimental.EditpartExtensionManager.getPaletteEntries(); if (template.toString().startsWith(IReportElementConstants.REPORT_ELEMENT_EXTENDED)) { java.lang.String extensionName = template.toString().substring(IReportElementConstants.REPORT_ELEMENT_EXTENDED.length()); for (int i = 0; i < (entries.length); i++) { if (entries[i].getItemName().equals(extensionName)) { try { org.eclipse.birt.report.designer.internal.ui.command.CommandUtils.setVariable("targetEditPart", getTargetEditPart()); org.eclipse.birt.report.designer.internal.ui.command.CommandUtils.setVariable("request", getTargetRequest()); getCreateRequest().getExtendedData().put(DesignerConstants.KEY_NEWOBJECT, entries[i].executeCreate()); selectAddedObject(); return; } catch (java.lang.Exception e) { org.eclipse.birt.report.designer.internal.ui.util.ExceptionHandler.handle(e); } } } } transName = org.eclipse.birt.report.designer.internal.ui.palette.ReportTemplateTransferDropTargetListener.TRANS_LABEL_CREATE_ELEMENT; preHandle = org.eclipse.birt.report.designer.internal.ui.palette.BasePaletteFactory.getAbstractToolHandleExtendsFromPaletteName(template); } else if (handleValidateInsert(template)) { transName = org.eclipse.birt.report.designer.internal.ui.views.actions.InsertInLayoutAction.DISPLAY_TEXT; java.lang.Object objectType = getFactory(template).getObjectType(); if (objectType instanceof org.eclipse.birt.report.model.api.DataSetHandle) { preHandle = new org.eclipse.birt.report.designer.internal.ui.palette.BasePaletteFactory.DataSetToolExtends(); } else if (objectType instanceof org.eclipse.birt.report.designer.core.model.views.data.DataSetItemModel) { preHandle = new org.eclipse.birt.report.designer.internal.ui.palette.BasePaletteFactory.DataSetColumnToolExtends(); } else if (objectType instanceof org.eclipse.birt.report.model.api.ResultSetColumnHandle) { isResultSetColumn = true; preHandle = new org.eclipse.birt.report.designer.internal.ui.palette.BasePaletteFactory.DataSetColumnToolExtends(); } else if (objectType instanceof org.eclipse.birt.report.model.api.ScalarParameterHandle) { isScalarparameter = true; preHandle = new org.eclipse.birt.report.designer.internal.ui.palette.BasePaletteFactory.ParameterToolExtends(); } else if (objectType instanceof org.eclipse.birt.report.model.api.olap.DimensionHandle) { preHandle = new org.eclipse.birt.report.designer.internal.ui.palette.BasePaletteFactory.DimensionHandleToolExtends(); } else if (objectType instanceof org.eclipse.birt.report.model.api.olap.MeasureHandle) { preHandle = new org.eclipse.birt.report.designer.internal.ui.palette.BasePaletteFactory.MeasureHandleToolExtends(); } } else if (handleValidateLibrary(template)) { java.lang.Object dragObj = getSingleTransferData(template); if (dragObj instanceof org.eclipse.birt.report.model.api.EmbeddedImageHandle) { isEmbeddImage = true; preHandle = new org.eclipse.birt.report.designer.internal.ui.palette.BasePaletteFactory.ImageToolExtends(); } else preHandle = new org.eclipse.birt.report.designer.internal.ui.editors.schematic.tools.LibraryElementsToolHandleExtends(((org.eclipse.birt.report.model.api.DesignElementHandle) (dragObj))); } else if (handleValidateOutline(template)) { java.lang.Object dragObj = getSingleTransferData(template); if (dragObj instanceof org.eclipse.birt.report.model.api.EmbeddedImageHandle) { isEmbeddImage = true; preHandle = new org.eclipse.birt.report.designer.internal.ui.palette.BasePaletteFactory.ImageToolExtends(); } } if (preHandle != null) { org.eclipse.birt.report.model.api.CommandStack stack = org.eclipse.birt.report.designer.core.model.SessionHandleAdapter.getInstance().getCommandStack(); stack.startTrans(transName); preHandle.setRequest(this.getCreateRequest()); preHandle.setTargetEditPart(getTargetEditPart()); if (isEmbeddImage) { java.lang.Object dragObj = getSingleTransferData(template); if (dragObj instanceof org.eclipse.birt.report.model.api.EmbeddedImageHandle) { if ((((org.eclipse.birt.report.model.api.EmbeddedImageHandle) (dragObj)).getElementHandle().getRoot()) instanceof org.eclipse.birt.report.model.api.LibraryHandle) { org.eclipse.birt.report.model.api.ModuleHandle moduleHandle = org.eclipse.birt.report.designer.core.model.SessionHandleAdapter.getInstance().getReportDesignHandle(); org.eclipse.birt.report.model.api.LibraryHandle library = ((org.eclipse.birt.report.model.api.LibraryHandle) (((org.eclipse.birt.report.model.api.EmbeddedImageHandle) (dragObj)).getElementHandle().getRoot())); try { if (org.eclipse.birt.report.designer.internal.ui.util.UIUtil.includeLibrary(moduleHandle, library)) { org.eclipse.birt.report.model.api.elements.structures.EmbeddedImage image = org.eclipse.birt.report.model.api.StructureFactory.newEmbeddedImageFrom(((org.eclipse.birt.report.model.api.EmbeddedImageHandle) (dragObj)), moduleHandle); org.eclipse.birt.report.designer.util.DNDUtil.addEmbeddedImageHandle(getTargetEditPart().getModel(), image); } } catch (java.lang.Exception e) { org.eclipse.birt.report.designer.internal.ui.util.ExceptionHandler.handle(e); } } } } org.eclipse.gef.commands.Command command = this.getCommand(); if ((command != null) && (command.canExecute())) { if (!(preHandle.preHandleMouseUp())) { stack.rollback(); return; } } boolean isTheme = checkTheme(preHandle, getSingleTransferData(template)); if (!isTheme) { super.handleDrop(); if (!(preHandle.postHandleCreation())) { stack.rollback(); return; } if (isScalarparameter || isResultSetColumn) { org.eclipse.gef.Request request = new org.eclipse.gef.Request(org.eclipse.birt.report.designer.core.util.mediator.request.ReportRequest.CREATE_SCALARPARAMETER_OR_RESULTSETCOLUMN); selectAddedObject(request); } else if (isEmbeddImage) { java.lang.Object dragObj = getSingleTransferData(template); final java.lang.Object model = getCreateRequest().getExtendedData().get(DesignerConstants.KEY_NEWOBJECT); try { ((org.eclipse.birt.report.model.api.ImageHandle) (model)).setImageName(((org.eclipse.birt.report.model.api.EmbeddedImageHandle) (dragObj)).getName()); } catch (org.eclipse.birt.report.model.api.activity.SemanticException e) { org.eclipse.birt.report.designer.internal.ui.util.ExceptionHandler.handle(e); } org.eclipse.gef.Request request = new org.eclipse.gef.Request(org.eclipse.birt.report.designer.core.util.mediator.request.ReportRequest.SELECTION); selectAddedObject(request); } else selectAddedObject(); } stack.commit(); } }
protected org.eclipse.birt.report.engine.emitter.excel.Data addDataContent(org.eclipse.birt.report.engine.content.IDataContent data) { org.eclipse.birt.report.engine.emitter.excel.HyperlinkDef url = parseHyperLink(data); org.eclipse.birt.report.engine.emitter.excel.BookmarkDef bookmark = getBookmark(data); org.eclipse.birt.report.engine.emitter.excel.Data excelData = null; java.lang.Object generateBy = data.getGenerateBy(); org.eclipse.birt.report.engine.content.IStyle style = data.getComputedStyle(); org.eclipse.birt.report.engine.css.engine.value.DataFormatValue dataformat = style.getDataFormat(); org.eclipse.birt.report.engine.ir.MapDesign map = null; if (generateBy instanceof org.eclipse.birt.report.engine.ir.DataItemDesign) { org.eclipse.birt.report.engine.ir.DataItemDesign design = ((org.eclipse.birt.report.engine.ir.DataItemDesign) (generateBy)); map = design.getMap(); } if (((map != null) && ((map.getRuleCount()) > 0)) && ((data.getLabelText()) != null)) { excelData = engine.addData(data.getLabelText().trim(), style, url, bookmark); } else { java.lang.String locale = null; int type = org.eclipse.birt.report.engine.emitter.excel.ExcelUtil.getType(data.getValue()); if (type == (SheetData.STRING)) { if (dataformat != null) { locale = dataformat.getStringLocale(); } excelData = engine.addData(data.getText(), style, url, bookmark, locale); } else if (type == (Data.NUMBER)) { if (dataformat != null) { locale = dataformat.getNumberLocale(); } excelData = engine.addData(data.getValue(), style, url, bookmark, locale); } else { if (dataformat != null) { locale = dataformat.getDateTimeLocale(); } excelData = engine.addDateTime(data, style, url, bookmark, locale); } } return excelData; }
public ImportValueDialog(java.lang.String style) { super(org.eclipse.birt.report.designer.internal.ui.dialogs.ImportValueDialog.DLG_TITLE); org.eclipse.jface.util.Assert.isTrue(org.eclipse.birt.report.model.api.DesignEngine.getMetaDataDictionary().getChoiceSet(DesignChoiceConstants.CHOICE_PARAM_TYPE).contains(style)); this.style = style; }
public static int[] getExpressionBidiLevel(java.lang.String message) { java.text.Bidi bidi = new java.text.Bidi(message, java.text.Bidi.DIRECTION_DEFAULT_LEFT_TO_RIGHT); int[] level = new int[message.length()]; boolean bidiStart = false; java.util.Stack bracket = new java.util.Stack(); for (int i = 0; i < (message.length()); i++) { char c = message.charAt(i); if (org.eclipse.birt.report.designer.internal.ui.util.UIUtil.isNeutral(c)) { if ((c == '\'') || (c == '\"')) { if (bracket.empty()) { bracket.add(new java.lang.Character(c)); } else { if ((((java.lang.Character) (bracket.peek())).charValue()) == c) { bracket.pop(); bidiStart = false; } else { bracket.add(new java.lang.Character(c)); } } } level[i] = (bidiStart && (!(bracket.empty()))) ? 1 : 0; } else { level[i] = bidi.getLevelAt(i); if (((level[i]) % 2) == 1) { bidiStart = true; } } } return level; }
public boolean isValidAggregationType(org.eclipse.birt.chart.model.component.Series series, org.eclipse.birt.chart.model.data.SeriesDefinition orthSD, org.eclipse.birt.chart.model.data.SeriesDefinition baseSD) { boolean isValidAgg = true; org.eclipse.emf.common.util.EList<org.eclipse.birt.chart.model.data.Query> queries = series.getDataDefinition(); for (int i : validationIndex(series)) { if (!isValidAgg) { break; } org.eclipse.birt.chart.model.data.Query query = queries.get(i); boolean checked = false; java.lang.String id = ((org.eclipse.birt.chart.ui.swt.wizard.ChartWizard.Gatt_aggCheck_ID) + (series.eContainer().hashCode())) + (series.getDataDefinition().indexOf(query)); org.eclipse.birt.chart.ui.swt.wizard.ChartWizard.removeException(id); if (((query.getGrouping()) != null) && (query.getGrouping().isEnabled())) { checked = true; isValidAgg = isValidAggregation(query.getGrouping(), false, id); } if (((!checked) && ((orthSD.getGrouping()) != null)) && (orthSD.getGrouping().isEnabled())) { checked = true; isValidAgg = isValidAggregation(orthSD.getGrouping(), false, id); } if (!checked) { if (((baseSD.getGrouping()) != null) && (baseSD.getGrouping().isEnabled())) { isValidAgg = isValidAggregation(baseSD.getGrouping(), true, id); } } } return isValidAgg; }
private void preview(java.lang.String uri) { try { if ((imageData) != null) { java.io.ByteArrayInputStream bis = new java.io.ByteArrayInputStream(org.apache.commons.codec.binary.Base64.decodeBase64(imageData.getBytes())); previewCanvas.loadImage(bis); } else { previewCanvas.loadImage(new java.net.URL(uri)); } } catch (java.lang.Exception e) { org.eclipse.birt.chart.ui.swt.composites.ImageDialog.logger.log(e); } }
public org.eclipse.birt.chart.model.Chart fromXml(java.io.ByteArrayInputStream byais, boolean bStripHeaders) throws java.io.IOException { org.eclipse.emf.ecore.resource.ResourceSet rsChart = new org.eclipse.emf.ecore.resource.impl.ResourceSetImpl(); rsChart.getResourceFactoryRegistry().getExtensionToFactoryMap().put("chart", new org.eclipse.birt.chart.model.util.ModelResourceFactoryImpl()); org.eclipse.emf.ecore.resource.Resource rChart = rsChart.createResource(org.eclipse.emf.common.util.URI.createFileURI("test.chart")); java.util.Map<java.lang.String, java.lang.Object> options = new java.util.HashMap<java.lang.String, java.lang.Object>(); options.put(XMLResource.OPTION_ENCODING, "UTF-8"); if (bStripHeaders) { options.put(XMLResource.OPTION_DECLARE_XML, java.lang.Boolean.FALSE); } try { rChart.load(byais, options); } catch (org.eclipse.emf.ecore.resource.Resource.IOWrappedException e) { if (((rChart.getContents()) == null) || (rChart.getContents().isEmpty())) { throw e; } } return ((org.eclipse.birt.chart.model.Chart) (rChart.getContents().get(0))); }
protected java.lang.String buildDrillAction(org.eclipse.birt.report.engine.api.IAction action, org.eclipse.birt.report.engine.api.script.IReportContext context) { if ((action == null) || (context == null)) return null; java.lang.String baseURL = null; java.lang.Object renderContext = getRenderContext(context); if (renderContext instanceof org.eclipse.birt.report.engine.api.HTMLRenderContext) { baseURL = ((org.eclipse.birt.report.engine.api.HTMLRenderContext) (renderContext)).getBaseURL(); } if (renderContext instanceof org.eclipse.birt.report.engine.api.PDFRenderContext) { baseURL = ((org.eclipse.birt.report.engine.api.PDFRenderContext) (renderContext)).getBaseURL(); } if (baseURL == null) baseURL = org.eclipse.birt.report.IBirtConstants.VIEWER_RUN; java.lang.StringBuffer link = new java.lang.StringBuffer(); java.lang.String reportName = getReportName(context, action); if ((reportName != null) && (!(reportName.equals("")))) { link.append(baseURL); link.append((reportName.toLowerCase().endsWith(".rptdocument") ? "?__document=" : "?__report=")); try { link.append(java.net.URLEncoder.encode(reportName, ParameterAccessor.UTF_8_ENCODE)); } catch (java.io.UnsupportedEncodingException e1) { } java.lang.String format = action.getFormat(); if ((format != null) && ((format.length()) > 0)) { link.append(org.eclipse.birt.report.utility.ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_FORMAT, format)); } if ((action.getParameterBindings()) != null) { java.util.Iterator paramsIte = action.getParameterBindings().entrySet().iterator(); while (paramsIte.hasNext()) { java.util.Map.Entry entry = ((java.util.Map.Entry) (paramsIte.next())); try { java.lang.String key = ((java.lang.String) (entry.getKey())); java.lang.Object valueObj = entry.getValue(); if (valueObj != null) { java.lang.String value = org.eclipse.birt.report.utility.DataUtil.getDisplayValue(valueObj); link.append(org.eclipse.birt.report.utility.ParameterAccessor.getQueryParameterString(java.net.URLEncoder.encode(key, ParameterAccessor.UTF_8_ENCODE), java.net.URLEncoder.encode(value, ParameterAccessor.UTF_8_ENCODE))); } } catch (java.io.UnsupportedEncodingException e) { } } if ((!(reportName.toLowerCase().endsWith(ParameterAccessor.SUFFIX_REPORT_DOCUMENT))) && ((baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_FRAMESET)) > 0)) { link.append(org.eclipse.birt.report.utility.ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_OVERWRITE, java.lang.String.valueOf(true))); } } if ((locale) != null) { link.append(org.eclipse.birt.report.utility.ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE, locale.toString())); } if (isRtl) { link.append(org.eclipse.birt.report.utility.ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL, java.lang.String.valueOf(isRtl))); } link.append(org.eclipse.birt.report.utility.ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE, java.lang.String.valueOf(this.isMasterPageContent))); if ((action.getBookmark()) != null) { try { if (((baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_RUN)) > 0) || (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format))) { link.append("#"); } else { link.append("&__bookmark="); } link.append(java.net.URLEncoder.encode(action.getBookmark(), ParameterAccessor.UTF_8_ENCODE)); } catch (java.io.UnsupportedEncodingException e) { } } } return link.toString(); }
public java.lang.String getLocalizedMessage() { if ((infoCode) == (org.eclipse.birt.report.model.util.VersionInfo.CONVERT_FOR_COLUMN_BINDING)) { return org.eclipse.birt.report.model.i18n.ModelMessages.getMessage(org.eclipse.birt.report.model.util.VersionInfo.CONVERT_INFO_MSG); } return org.eclipse.birt.report.model.i18n.ModelMessages.getMessage(org.eclipse.birt.report.model.util.VersionInfo.INVALID_DESIGN_FILE_MSG); }
private void updateEnabledGroupIndexes(org.eclipse.birt.chart.model.Chart cm, java.util.List<org.eclipse.birt.data.engine.api.IGroupDefinition> groupDefinitions) throws org.eclipse.birt.chart.exception.ChartException { faEnabledGroups = new boolean[fGroupCount]; org.eclipse.emf.common.util.EList<org.eclipse.birt.chart.model.data.SeriesDefinition> baseSDs = org.eclipse.birt.chart.util.ChartUtil.getBaseSeriesDefinitions(cm); for (org.eclipse.birt.chart.model.data.SeriesDefinition sd : baseSDs) { if (((sd.getGrouping()) == null) || (!(sd.getGrouping().isEnabled()))) { continue; } org.eclipse.birt.chart.model.data.Query q = ((org.eclipse.birt.chart.model.data.Query) (sd.getDesignTimeSeries().getDataDefinition().get(0))); java.lang.String expr = q.getDefinition(); int index = getGroupIndex(expr, groupDefinitions); if (index >= 0) { faEnabledGroups[index] = true; } } java.util.List<org.eclipse.birt.chart.model.data.SeriesDefinition> orthoSDs = org.eclipse.birt.chart.util.ChartUtil.getAllOrthogonalSeriesDefinitions(cm); for (org.eclipse.birt.chart.model.data.SeriesDefinition sd : orthoSDs) { org.eclipse.birt.chart.model.data.Query q = ((org.eclipse.birt.chart.model.data.Query) (sd.getQuery())); if (((q == null) || ((q.getDefinition()) == null)) || ("".equals(q.getDefinition().trim()))) { continue; } java.lang.String expr = q.getDefinition(); int index = getGroupIndex(expr, groupDefinitions); if (index >= 0) { faEnabledGroups[index] = true; } } }
public void selectArea(boolean selected, java.lang.Object data) { if (data instanceof java.lang.Object[]) { java.lang.Object[] array = ((java.lang.Object[]) (data)); seriesdefinition = ((org.eclipse.birt.chart.model.data.SeriesDefinition) (array[0])); query = ((org.eclipse.birt.chart.model.data.Query) (array[1])); updateText(query.getDefinition()); org.eclipse.birt.chart.ui.swt.DataDefinitionTextManager.getInstance().addDataDefinitionText(getInputControl(), this); setTooltipForInputControl(); if ((fAggEditorComposite) != null) { fAggEditorComposite.setAggregation(query, seriesdefinition); } } }
public void start(org.osgi.framework.BundleContext context) throws java.lang.Exception { super.start(context); org.eclipse.birt.report.designer.ui.ReportPlugin.getDefault().addIgnoreViewID("org.eclipse.birt.report.designer.ui.editors.LibraryReportEditor"); }
public void setProperty(java.lang.String name, java.lang.String value) throws org.eclipse.datatools.connectivity.oda.OdaException { if (name == null) throw new java.lang.NullPointerException("name is null"); if (name.equals("queryTimeOut")) { if ((value != null) && ((value.length()) > 0)) { try { double secs = java.lang.Double.parseDouble(value); this.preStat.setQueryTimeout(((int) (secs))); } catch (java.sql.SQLException e) { org.eclipse.birt.report.data.oda.jdbc.Statement.logger.log(java.util.logging.Level.FINE, "Statement.setQueryTimeout failed", e); } } } else if (name.equals("rowFetchSize")) { if ((value != null) && ((value.length()) > 0)) { try { double rows = java.lang.Double.parseDouble(value); this.preStat.setFetchSize(((int) (rows))); } catch (java.sql.SQLException e) { org.eclipse.birt.report.data.oda.jdbc.Statement.logger.log(java.util.logging.Level.FINE, "Statement.setQueryTimeout failed", e); } } } else if (((name.equals(ConnectionProfileProperty.PROFILE_NAME_PROP_KEY)) || (name.equals(ConnectionProfileProperty.PROFILE_STORE_FILE_PROP_KEY))) || (name.equals(ConnectionProfileProperty.PROFILE_STORE_FILE_PATH_PROP_KEY))) { } else { org.eclipse.datatools.connectivity.oda.OdaException e = new org.eclipse.datatools.connectivity.oda.OdaException(("Unsupported query property: " + name)); addLog("setProperty", e); throw e; } }
protected void closeLayout() { regionLayout = null; if ((root) == null) { return; } int borderHeight = 0; if ((layout) != null) { layout.resolveAll(); borderHeight = layout.resolveBottomBorder(); layout.remove(((org.eclipse.birt.report.engine.layout.area.impl.TableArea) (root))); } if (isLast) { root.setHeight((((getCurrentBP()) + (getOffsetY())) + borderHeight)); } else { root.setHeight(((getCurrentBP()) + (getOffsetY()))); } }
public void doSave(java.io.OutputStream outputStream, java.util.Map requestColumnMap) throws org.eclipse.birt.data.engine.core.DataException { assert outputStream != null; java.io.DataOutputStream dos = new java.io.DataOutputStream(outputStream); java.util.Set resultSetNameSet = org.eclipse.birt.data.engine.executor.cache.ResultSetUtil.getRsColumnRequestMap(requestColumnMap); int size = resultSetNameSet.size(); for (int i = 0; i < (projectedCols.length); i++) { java.lang.String columnName = projectedCols[i].getName(); java.lang.String columnAlias = projectedCols[i].getAlias(); if ((resultSetNameSet.contains(columnName)) && (resultSetNameSet.contains(columnAlias))) size--; } try { org.eclipse.birt.core.util.IOUtil.writeInt(outputStream, size); int writeCount = 0; for (int i = 0; i < (m_fieldCount); i++) { org.eclipse.birt.data.engine.executor.ResultFieldMetadata column = projectedCols[i]; if ((resultSetNameSet.remove(column.getName())) || (resultSetNameSet.remove(column.getAlias()))) { org.eclipse.birt.core.util.IOUtil.writeInt(dos, column.getDriverPosition()); org.eclipse.birt.core.util.IOUtil.writeString(dos, column.getName()); org.eclipse.birt.core.util.IOUtil.writeString(dos, column.getLabel()); org.eclipse.birt.core.util.IOUtil.writeString(dos, column.getAlias()); org.eclipse.birt.core.util.IOUtil.writeString(dos, column.getDataType().getName()); org.eclipse.birt.core.util.IOUtil.writeString(dos, column.getNativeTypeName()); org.eclipse.birt.core.util.IOUtil.writeBool(dos, column.isCustom()); if ((column.getDriverProvidedDataType()) == null) org.eclipse.birt.core.util.IOUtil.writeString(dos, null); else org.eclipse.birt.core.util.IOUtil.writeString(dos, column.getDriverProvidedDataType().getName()); writeCount++; } } if (writeCount != size) { validateProjectColumns(projectedCols); java.lang.StringBuffer buf = new java.lang.StringBuffer(); for (java.util.Iterator i = resultSetNameSet.iterator(); i.hasNext();) { java.lang.String colName = ((java.lang.String) (i.next())); buf.append(colName); buf.append(','); } buf.deleteCharAt(((buf.length()) - 1)); throw new org.eclipse.birt.data.engine.core.DataException(org.eclipse.birt.data.engine.i18n.ResourceConstants.RESULT_CLASS_SAVE_ERROR, buf.toString()); } dos.close(); } catch (java.io.IOException e) { throw new org.eclipse.birt.data.engine.core.DataException(org.eclipse.birt.data.engine.i18n.ResourceConstants.RD_SAVE_ERROR, e, "Result Class"); } }
private void initGroups() { java.lang.String[] groups = getGroups(); if ((groups.length) > 0) { cmbGroup.setItems(groups); if (((binding) != null) && ((binding.getAggregateOn()) != null)) { btnGroup.setSelection(true); btnTable.setSelection(false); if (!(isRef)) cmbGroup.setEnabled(true); for (int i = 0; i < (groups.length); i++) { if (groups[i].equals(binding.getAggregateOn())) { cmbGroup.select(i); return; } } } else { if (((this.container) instanceof org.eclipse.birt.report.model.api.DesignElementHandle) && ((((org.eclipse.birt.report.model.api.DesignElementHandle) (this.container)).getContainer().getContainer()) instanceof org.eclipse.birt.report.model.api.TableGroupHandle)) { org.eclipse.birt.report.model.api.TableGroupHandle groupHandle = ((org.eclipse.birt.report.model.api.TableGroupHandle) (((org.eclipse.birt.report.model.api.DesignElementHandle) (this.container)).getContainer().getContainer())); for (int i = 0; i < (groups.length); i++) { if (groups[i].equals(groupHandle.getName())) { cmbGroup.select(i); } } btnTable.setSelection(false); btnGroup.setSelection(true); } else if ((this.container) instanceof org.eclipse.birt.report.model.api.ListGroupHandle) { org.eclipse.birt.report.model.api.ListGroupHandle groupHandle = ((org.eclipse.birt.report.model.api.ListGroupHandle) (this.container)); for (int i = 0; i < (groups.length); i++) { if (groups[i].equals(groupHandle.getName())) { cmbGroup.select(i); } } btnTable.setSelection(false); btnGroup.setSelection(true); } else { btnTable.setSelection(true); btnGroup.setSelection(false); cmbGroup.select(0); cmbGroup.setEnabled(false); } } } else { btnGroup.setEnabled(false); cmbGroup.setEnabled(false); btnTable.setSelection(true); } }
private boolean validateScalarParameter(org.eclipse.birt.report.model.api.ScalarParameterHandle paramHandle) throws org.eclipse.birt.report.engine.api.impl.ParameterValidationException { java.lang.String paramName = paramHandle.getName(); java.lang.Object paramValue = runValues.get(paramName); java.lang.String type = paramHandle.getDataType(); if (paramValue == null) { if (!(paramHandle.isRequired())) return true; throw new org.eclipse.birt.report.engine.api.impl.ParameterValidationException(org.eclipse.birt.report.engine.i18n.MessageConstants.NULL_PARAMETER_EXCEPTION, new java.lang.String[]{ paramName }); } java.lang.String source = paramHandle.getValidate(); if ((source != null) && ((source.length()) != 0)) { java.lang.Object result = executionContext.evaluate(source); if ((!(result instanceof java.lang.Boolean)) || (!(((java.lang.Boolean) (result)).booleanValue()))) { throw new org.eclipse.birt.report.engine.api.impl.ParameterValidationException(org.eclipse.birt.report.engine.i18n.MessageConstants.PARAMETER_SCRIPT_VALIDATION_EXCEPTION, new java.lang.String[]{ paramName, source }); } } java.lang.String paramType = paramHandle.getParamType(); if (DesignChoiceConstants.SCALAR_PARAM_TYPE_MULTI_VALUE.equals(paramType)) { if (paramValue instanceof java.lang.Object[]) { boolean isValid = true; java.lang.Object[] paramValueList = ((java.lang.Object[]) (paramValue)); for (int i = 0; i < (paramValueList.length); i++) { if ((paramValueList[i]) != null) { if (!(validateParameterValueType(paramName, paramValueList[i], type, paramHandle))) { isValid = false; } } } return isValid; } throw new org.eclipse.birt.report.engine.api.impl.ParameterValidationException(org.eclipse.birt.report.engine.i18n.MessageConstants.INVALID_PARAMETER_TYPE_EXCEPTION, new java.lang.String[]{ paramName, "Object[]", paramValue.getClass().getName() }); } else { return validateParameterValueType(paramName, paramValue, type, paramHandle); } }
protected void updatePageContent() throws org.eclipse.birt.core.exception.BirtException { if ((page) != null) { org.eclipse.birt.report.engine.content.IPageContent pc = ((org.eclipse.birt.report.engine.content.IPageContent) (page.getContent())); pc.setPageNumber(context.getPageNumber()); if (context.needLayoutPageContent()) { org.eclipse.birt.report.engine.content.IPageContent pageContent = org.eclipse.birt.report.engine.executor.ReportExecutorUtil.executeMasterPage(context.getReportExecutor(), context.getPageNumber(), ((org.eclipse.birt.report.engine.ir.MasterPageDesign) (pc.getGenerateBy()))); context.getPageLM().layoutPageContent(pageContent); page.content = pageContent; } } }
private void updateRow(org.eclipse.birt.report.engine.nLayout.area.impl.RowArea rowArea, boolean isFixedLayout) { org.eclipse.birt.report.engine.nLayout.area.impl.RowArea lastRow = ((org.eclipse.birt.report.engine.nLayout.area.impl.RowArea) (rows.getCurrent())); int height = rowArea.getSpecifiedHeight(); if ((!isFixedLayout) || (height == 0)) { for (int i = startCol; i <= (endCol); i++) { org.eclipse.birt.report.engine.nLayout.area.impl.CellArea upperCell = null; if (lastRow != null) { upperCell = lastRow.getCell(i); } if ((upperCell != null) && ((upperCell.getRowSpan()) > 1)) { org.eclipse.birt.report.engine.nLayout.area.impl.DummyCell dummyCell = createDummyCell(upperCell); rowArea.setCell(dummyCell); int delta = dummyCell.getDelta(); if ((dummyCell.getRowSpan()) == 1) { height = java.lang.Math.max(height, ((dummyCell.getCell().getHeight()) - delta)); } i = (i + (upperCell.getColSpan())) - 1; } else { org.eclipse.birt.report.engine.nLayout.area.impl.CellArea cell = rowArea.getCell(i); if ((cell != null) && ((cell.getRowSpan()) == 1)) { height = java.lang.Math.max(height, cell.getHeight()); i = (i + (cell.getColSpan())) - 1; } } } } updateRowHeight(rowArea, height, isFixedLayout); }
public void start() { super.start(); this.hasNotNullValue = false; sum = 0.0; }
protected void closeLayout(org.eclipse.birt.report.engine.layout.pdf.emitter.ContainerContext currentContext, int index, boolean finished) { if (((currentContext.root) == null) || ((currentContext.root.getChildrenCount()) == 0)) { return; } org.eclipse.birt.report.engine.layout.pdf.emitter.TableLayout.TableContext tableContext = ((org.eclipse.birt.report.engine.layout.pdf.emitter.TableLayout.TableContext) (currentContext)); int borderHeight = 0; if ((tableContext.layout) != null) { int height = tableContext.layout.resolveAll(); if (0 != height) { currentContext.currentBP = (currentContext.currentBP) + height; } borderHeight = tableContext.layout.resolveBottomBorder(); tableContext.layout.remove(((org.eclipse.birt.report.engine.layout.area.impl.TableArea) (currentContext.root))); } currentContext.root.setHeight((((currentContext.currentBP) + (getOffsetY())) + borderHeight)); parent.addToRoot(currentContext.root, index); }
public java.util.List processEvent(java.util.List renderingEvents, double xOffset, double yOffset) { org.eclipse.birt.chart.internal.computations.Matrix transMatrix = getTransformMatrix(); java.util.List rtList = new java.util.ArrayList(); java.util.List labels = new java.util.ArrayList(); org.eclipse.birt.chart.event.WrappedInstruction wi; for (java.util.Iterator itr = renderingEvents.iterator(); itr.hasNext();) { java.lang.Object obj = itr.next(); wi = null; if (obj instanceof org.eclipse.birt.chart.event.WrappedInstruction) { wi = ((org.eclipse.birt.chart.event.WrappedInstruction) (obj)); assert !(wi.isModel()); obj = wi.getEvent(); } if (translate3DEvent(obj, transMatrix, xOffset, yOffset)) { if (wi != null) { if (obj instanceof org.eclipse.birt.chart.event.Text3DRenderEvent) labels.add(wi); else rtList.add(wi); } else { if (obj instanceof org.eclipse.birt.chart.event.Text3DRenderEvent) labels.add(obj); else rtList.add(obj); } } } zsort(rtList); overlapSwap(rtList); rtList.addAll(labels); return rtList; }
public void layout() { boolean isInline = (parent) instanceof org.eclipse.birt.report.engine.layout.pdf.emitter.IInlineStackingLayout; if (isInline) { if ((parent) instanceof org.eclipse.birt.report.engine.layout.pdf.emitter.LineLayout) { org.eclipse.birt.report.engine.layout.pdf.emitter.ContainerLayout inlineContainer = new org.eclipse.birt.report.engine.layout.pdf.emitter.InlineContainerLayout(context, parent, content); inlineContainer.initialize(); addTemplateArea(inlineContainer, true); inlineContainer.closeLayout(); } else { addTemplateArea(parent, true); } } else { assert (parent) instanceof org.eclipse.birt.report.engine.layout.pdf.emitter.BlockStackingLayout; if ((content) != null) { org.eclipse.birt.report.engine.content.IStyle contentStyle = content.getComputedStyle(); java.lang.String align = contentStyle.getTextAlign(); parent.content.getComputedStyle().setTextAlign(align); } org.eclipse.birt.report.engine.layout.pdf.emitter.LineLayout line = new org.eclipse.birt.report.engine.layout.pdf.emitter.LineLayout(context, parent); line.initialize(); addTemplateArea(line, false); line.closeLayout(); } }
private void defineDataSourceDataSet(org.eclipse.birt.report.model.api.DataSetHandle handle) throws org.eclipse.birt.core.exception.BirtException { if (handle == null) return; org.eclipse.birt.report.model.api.DataSourceHandle dataSourceHandle = handle.getDataSource(); if ((dataSourceHandle != null) && ((((org.eclipse.birt.data.engine.impl.DataEngineImpl) (dataEngine)).getDataSourceRuntime(dataSourceHandle.getName())) == null)) { org.eclipse.birt.data.engine.api.IBaseDataSourceDesign dsourceDesign = this.modelAdaptor.adaptDataSource(dataSourceHandle); dataEngine.defineDataSource(dsourceDesign); } if (handle instanceof org.eclipse.birt.report.model.api.JointDataSetHandle) { defineDataSourceDataSet(((org.eclipse.birt.report.model.api.JointDataSetHandle) (handle))); } if ((((org.eclipse.birt.data.engine.impl.DataEngineImpl) (dataEngine)).getDataSetDesign(handle.getQualifiedName())) == null) { org.eclipse.birt.data.engine.api.querydefn.BaseDataSetDesign baseDS = this.modelAdaptor.adaptDataSet(handle); dataEngine.defineDataSet(baseDS); } }
private static boolean hasCorrespondingColumnBinding(org.eclipse.birt.report.model.core.Module module, org.eclipse.birt.report.model.core.DesignElement target, java.lang.String columnBindingName) { org.eclipse.birt.report.model.core.DesignElement tmpElement = org.eclipse.birt.report.model.util.BoundDataColumnUtil.findTargetOfBoundColumns(target, module); if (tmpElement instanceof org.eclipse.birt.report.model.elements.GroupElement) { tmpElement = tmpElement.getContainer(); java.util.List columns = ((java.util.List) (tmpElement.getProperty(module, IReportItemModel.BOUND_DATA_COLUMNS_PROP))); if (org.eclipse.birt.report.model.api.validators.DataColumnNameValidator.exists(columns, columnBindingName)) return true; } else { java.util.List columns = ((java.util.List) (tmpElement.getProperty(module, IReportItemModel.BOUND_DATA_COLUMNS_PROP))); if (org.eclipse.birt.report.model.api.validators.DataColumnNameValidator.exists(columns, columnBindingName)) return true; } java.util.List columns = ((java.util.List) (target.getProperty(module, IReportItemModel.BOUND_DATA_COLUMNS_PROP))); if (org.eclipse.birt.report.model.api.validators.DataColumnNameValidator.exists(columns, columnBindingName)) return true; return false; }
public final java.util.List<java.lang.Object> collectPropValues(int slotId, java.lang.String propName) { java.util.List<java.lang.Object> rtnList = new java.util.ArrayList<java.lang.Object>(); org.eclipse.birt.report.model.util.ContentIterator contents = new org.eclipse.birt.report.model.util.ContentIterator(this, new org.eclipse.birt.report.model.core.ContainerContext(this, slotId)); while (contents.hasNext()) { org.eclipse.birt.report.model.core.DesignElement ele = contents.next(); java.lang.Object obj = ele.getLocalProperty(this, propName); if (obj != null) rtnList.add(obj); } return rtnList; }
protected void updateLine() { if ((root) == null) { return; } java.util.Iterator iter = root.getChildren(); int height = root.getHeight(); int lineHeight = ((org.eclipse.birt.report.engine.layout.pdf.PDFBlockStackingLM) (parent)).getLineHeight(); while (iter.hasNext()) { org.eclipse.birt.report.engine.layout.area.impl.AbstractArea child = ((org.eclipse.birt.report.engine.layout.area.impl.AbstractArea) (iter.next())); int childHeight = child.getAllocatedHeight(); height = java.lang.Math.max(height, childHeight); } if ((parent.isPageEmpty()) && (lineHeight > (maxAvaHeight))) { height = java.lang.Math.max(height, maxAvaHeight); } else { height = java.lang.Math.max(height, lineHeight); } root.setContentHeight(height); }
public static java.lang.String[] getThemes() { java.util.ArrayList list = new java.util.ArrayList(); list.add(org.eclipse.birt.report.designer.ui.views.attributes.providers.ChoiceSetFactory.CHOICE_NONE); org.eclipse.birt.report.model.api.ModuleHandle handle = org.eclipse.birt.report.designer.core.model.SessionHandleAdapter.getInstance().getReportDesignHandle(); java.util.Iterator iterator = handle.getAllThemes().iterator(); if (iterator != null) { while (iterator.hasNext()) { org.eclipse.birt.report.model.api.ReportElementHandle elementHandle = ((org.eclipse.birt.report.model.api.ReportElementHandle) (iterator.next())); list.add(elementHandle.getName()); } } return ((java.lang.String[]) (list.toArray(new java.lang.String[0]))); }
public final boolean checkFit(org.eclipse.birt.chart.device.IDisplayServer xs, org.eclipse.birt.chart.model.component.Label la, int iLabelLocation) throws org.eclipse.birt.chart.exception.ChartException { if (((iType) == (TEXT)) || (bCategoryScale)) { return true; } final double dAngleInDegrees = la.getCaption().getFont().getRotation(); double x = 0; double y = 0; int iPointToCheck = 0; if ((iLabelLocation == (ABOVE)) || (iLabelLocation == (BELOW))) { if ((iScaleDirection) == (BACKWARD)) { iPointToCheck = ((dAngleInDegrees < 0) && (dAngleInDegrees > (-90))) ? 1 : 2; } else { iPointToCheck = ((dAngleInDegrees < 0) && (dAngleInDegrees > (-90))) ? 3 : 0; } } else if ((iLabelLocation == (LEFT)) || (iLabelLocation == (RIGHT))) { if ((iScaleDirection) == (FORWARD)) { iPointToCheck = ((dAngleInDegrees < 0) && (dAngleInDegrees > (-90))) ? 0 : 1; } else { iPointToCheck = ((dAngleInDegrees < 0) && (dAngleInDegrees > (-90))) ? 2 : 3; } } double[] da = daTickCoordinates; org.eclipse.birt.chart.computation.RotatedRectangle rrPrev = null; org.eclipse.birt.chart.computation.RotatedRectangle rrPrev2 = null; org.eclipse.birt.chart.computation.RotatedRectangle rr; if (((iType) & ((NUMERICAL) | (LINEAR))) == ((NUMERICAL) | (LINEAR))) { double dAxisValue = asDouble(getMinimum()).doubleValue(); final double dAxisStep = asDouble(getStep()).doubleValue(); java.lang.String sText; com.ibm.icu.text.DecimalFormat df = null; if ((fs) == null) { df = new com.ibm.icu.text.DecimalFormat(getNumericPattern()); } final org.eclipse.birt.chart.model.data.NumberDataElement nde = org.eclipse.birt.chart.model.data.impl.NumberDataElementImpl.create(0); for (int i = 0; i < ((da.length) - 1); i++) { nde.setValue(dAxisValue); try { sText = org.eclipse.birt.chart.computation.ValueFormatter.format(nde, fs, rtc.getULocale(), df); } catch (org.eclipse.birt.chart.exception.ChartException dfex) { org.eclipse.birt.chart.computation.withaxes.AutoScale.logger.log(dfex); sText = NULL_STRING; } if ((iLabelLocation == (ABOVE)) || (iLabelLocation == (BELOW))) { x = (da[i]) * (dZoomFactor); } else if ((iLabelLocation == (LEFT)) || (iLabelLocation == (RIGHT))) { y = (da[i]) * (dZoomFactor); } la.getCaption().setValue(sText); try { rr = computePolygon(xs, iLabelLocation, la, x, y); } catch (java.lang.IllegalArgumentException uiex) { throw new org.eclipse.birt.chart.exception.ChartException(org.eclipse.birt.chart.plugin.ChartEnginePlugin.ID, org.eclipse.birt.chart.exception.ChartException.GENERATION, uiex); } org.eclipse.birt.chart.computation.Point p = rr.getPoint(iPointToCheck); if ((isAxisLabelStaggered()) && (baTickLabelStaggered[i])) { if ((rrPrev2 != null) && (((rrPrev2.contains(p)) || (rrPrev2.getPoint(iPointToCheck).equals(p))) || (org.eclipse.birt.chart.util.ChartUtil.intersects(rr, rrPrev2)))) { return false; } rrPrev2 = rr; } else { if ((rrPrev != null) && (((rrPrev.contains(p)) || (rrPrev.getPoint(iPointToCheck).equals(p))) || (org.eclipse.birt.chart.util.ChartUtil.intersects(rr, rrPrev)))) { return false; } rrPrev = rr; } dAxisValue += dAxisStep; } } else if (((iType) & ((NUMERICAL) | (LOGARITHMIC))) == ((NUMERICAL) | (LOGARITHMIC))) { double dAxisValue = asDouble(getMinimum()).doubleValue(); final double dAxisStep = asDouble(getStep()).doubleValue(); java.lang.String sText; org.eclipse.birt.chart.model.data.NumberDataElement nde = org.eclipse.birt.chart.model.data.impl.NumberDataElementImpl.create(0); com.ibm.icu.text.DecimalFormat df = null; for (int i = 0; i < ((da.length) - 1); i++) { nde.setValue(dAxisValue); if ((fs) == null) { df = new com.ibm.icu.text.DecimalFormat(getNumericPattern(dAxisValue)); } try { sText = org.eclipse.birt.chart.computation.ValueFormatter.format(nde, fs, rtc.getULocale(), df); } catch (org.eclipse.birt.chart.exception.ChartException dfex) { org.eclipse.birt.chart.computation.withaxes.AutoScale.logger.log(dfex); sText = NULL_STRING; } if ((iLabelLocation == (ABOVE)) || (iLabelLocation == (BELOW))) { x = (da[i]) * (dZoomFactor); } else if ((iLabelLocation == (LEFT)) || (iLabelLocation == (RIGHT))) { y = (da[i]) * (dZoomFactor); } la.getCaption().setValue(sText); try { rr = computePolygon(xs, iLabelLocation, la, x, y); } catch (java.lang.IllegalArgumentException uiex) { throw new org.eclipse.birt.chart.exception.ChartException(org.eclipse.birt.chart.plugin.ChartEnginePlugin.ID, org.eclipse.birt.chart.exception.ChartException.GENERATION, uiex); } org.eclipse.birt.chart.computation.Point p = rr.getPoint(iPointToCheck); if ((isAxisLabelStaggered()) && (baTickLabelStaggered[i])) { if ((rrPrev2 != null) && (((rrPrev2.contains(p)) || (rrPrev2.getPoint(iPointToCheck).equals(p))) || (org.eclipse.birt.chart.util.ChartUtil.intersects(rr, rrPrev2)))) { return false; } rrPrev2 = rr; } else { if ((rrPrev != null) && ((rrPrev.contains(p)) || (rrPrev.getPoint(iPointToCheck).equals(p)))) { return false; } rrPrev = rr; } dAxisValue *= dAxisStep; } } else if ((iType) == (DATE_TIME)) { org.eclipse.birt.chart.util.CDateTime cdt; org.eclipse.birt.chart.util.CDateTime cdtAxisValue = asDateTime(oMinimum); final int iUnit = asInteger(oUnit); final int iStep = asInteger(oStep); final org.eclipse.birt.chart.internal.factory.IDateFormatWrapper sdf = org.eclipse.birt.chart.internal.factory.DateFormatWrapperFactory.getPreferredDateFormat(iUnit, rtc.getULocale()); java.lang.String sText; cdt = cdtAxisValue; for (int i = 0; i < ((da.length) - 1); i++) { sText = org.eclipse.birt.chart.computation.ValueFormatter.format(cdt, fs, rtc.getULocale(), sdf); if ((iLabelLocation == (ABOVE)) || (iLabelLocation == (BELOW))) { x = (da[i]) * (dZoomFactor); } else if ((iLabelLocation == (LEFT)) || (iLabelLocation == (RIGHT))) { y = (da[i]) * (dZoomFactor); } la.getCaption().setValue(sText); try { rr = computePolygon(xs, iLabelLocation, la, x, y); } catch (java.lang.IllegalArgumentException uiex) { throw new org.eclipse.birt.chart.exception.ChartException(org.eclipse.birt.chart.plugin.ChartEnginePlugin.ID, org.eclipse.birt.chart.exception.ChartException.GENERATION, uiex); } org.eclipse.birt.chart.computation.Point p = rr.getPoint(iPointToCheck); if ((isAxisLabelStaggered()) && (baTickLabelStaggered[i])) { if ((rrPrev2 != null) && (((rrPrev2.contains(p)) || (rrPrev2.getPoint(iPointToCheck).equals(p))) || (org.eclipse.birt.chart.util.ChartUtil.intersects(rr, rrPrev2)))) { return false; } rrPrev2 = rr; } else { if ((rrPrev != null) && ((rrPrev.contains(p)) || (rrPrev.getPoint(iPointToCheck).equals(p)))) { return false; } rrPrev = rr; } cdt = cdtAxisValue.forward(iUnit, (iStep * (i + 1))); } } return true; }
protected void endCell(org.eclipse.birt.report.engine.content.IContent content, boolean finished, org.eclipse.birt.report.engine.emitter.IContentEmitter emitter, boolean visible) { org.eclipse.birt.report.engine.layout.html.buffer.AbstractNode current = ((org.eclipse.birt.report.engine.layout.html.buffer.AbstractNode) (currentNode)); if (!(current.isFirst)) { current.setFinished(false); } else { current.setFinished(finished); } if (currentNode.isStarted()) { currentNode.end(); } else { if (finished) { currentNode.start(); currentNode.end(); } } currentNode = currentNode.getParent(); }
public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { if (e.getSource().equals(btnUseReportData)) { org.eclipse.birt.chart.ui.swt.wizard.internal.ColorPalette.getInstance().restore(); if (!(btnUseReportData.getSelection())) { return; } boolean bException = false; try { switchDataSet(null); } catch (org.eclipse.birt.chart.exception.ChartException e1) { bException = true; org.eclipse.birt.chart.ui.swt.wizard.ChartWizard.showException(e1.getLocalizedMessage()); } if (!bException) { org.eclipse.birt.core.ui.frameworks.taskwizard.WizardBase.removeException(); } cmbDataSet.add(BLANK_DATASET, 0); cmbDataSet.select(0); cmbDataSet.setEnabled(false); btnNewData.setEnabled(false); btnFilters.setEnabled(((hasDataSet()) && (getDataServiceProvider().isInvokingSupported()))); btnParameters.setEnabled(false); btnBinding.setEnabled(((hasDataSet()) && (getDataServiceProvider().isInvokingSupported()))); btnFilters.setVisible(getDataServiceProvider().isEclipseModeSupported()); btnParameters.setVisible(getDataServiceProvider().isEclipseModeSupported()); btnBinding.setVisible(getDataServiceProvider().isEclipseModeSupported()); } else if (e.getSource().equals(btnUseDataSet)) { if (!(btnUseDataSet.getSelection())) { return; } org.eclipse.birt.core.ui.frameworks.taskwizard.WizardBase.removeException(); cmbDataSet.removeAll(); cmbDataSet.add(BLANK_DATASET, 0); java.lang.String[] dataSets = getDataServiceProvider().getAllDataSets(); if (dataSets != null) for (int i = 0; i < (dataSets.length); i++) { cmbDataSet.add(dataSets[i], (i + 1)); } cmbDataSet.select(0); cmbDataSet.setEnabled(true); btnNewData.setEnabled(getDataServiceProvider().isInvokingSupported()); btnNewData.setVisible(getDataServiceProvider().isEclipseModeSupported()); btnParameters.setEnabled(((hasDataSet()) && (getDataServiceProvider().isInvokingSupported()))); } else if (e.getSource().equals(cmbDataSet)) { boolean bException = false; try { org.eclipse.birt.chart.ui.swt.wizard.internal.ColorPalette.getInstance().restore(); if (!(cmbDataSet.getText().equals(BLANK_DATASET))) { int bCancel = switchDataSet(cmbDataSet.getText()); if ((bCancel == (org.eclipse.jface.window.Window.OK)) && (cmbDataSet.getItem(0).equals(BLANK_DATASET))) { cmbDataSet.remove(BLANK_DATASET); } else if (bCancel == (org.eclipse.jface.window.Window.CANCEL)) { java.lang.String[] datasetNames = cmbDataSet.getItems(); for (int i = 0; i < (datasetNames.length); i++) { if (datasetNames[i].equals(getDataServiceProvider().getBoundDataSet())) { cmbDataSet.select(i); if (cmbDataSet.getItem(0).equals(BLANK_DATASET)) { cmbDataSet.remove(BLANK_DATASET); } return; } } cmbDataSet.select(0); } } } catch (org.eclipse.birt.chart.exception.ChartException e1) { bException = true; org.eclipse.birt.chart.ui.swt.wizard.ChartWizard.displayException(e1); } if (!bException) { org.eclipse.birt.core.ui.frameworks.taskwizard.WizardBase.removeException(); } btnNewData.setEnabled(getDataServiceProvider().isInvokingSupported()); btnFilters.setEnabled(((hasDataSet()) && (getDataServiceProvider().isInvokingSupported()))); btnParameters.setEnabled(((hasDataSet()) && (getDataServiceProvider().isInvokingSupported()))); btnBinding.setEnabled(((hasDataSet()) && (getDataServiceProvider().isInvokingSupported()))); btnFilters.setVisible(getDataServiceProvider().isEclipseModeSupported()); btnParameters.setVisible(getDataServiceProvider().isEclipseModeSupported()); btnBinding.setVisible(getDataServiceProvider().isEclipseModeSupported()); btnNewData.setVisible(getDataServiceProvider().isEclipseModeSupported()); } else if (e.getSource().equals(btnNewData)) { int result = getDataServiceProvider().invoke(IDataServiceProvider.COMMAND_NEW_DATASET); if (result == (org.eclipse.jface.window.Window.CANCEL)) { return; } java.lang.String[] sAllDS = getDataServiceProvider().getAllDataSets(); java.lang.String currentDataSet = cmbDataSet.getText(); int dataSetCount = cmbDataSet.getItemCount(); if (currentDataSet.equals(BLANK_DATASET)) { dataSetCount = dataSetCount - 1; } if ((sAllDS.length) == dataSetCount) { return; } if (currentDataSet.equals(BLANK_DATASET)) { cmbDataSet.removeAll(); cmbDataSet.add(BLANK_DATASET, 0); for (int i = 0; i < (sAllDS.length); i++) { cmbDataSet.add(sAllDS[i], (i + 1)); } } else { cmbDataSet.setItems(sAllDS); } cmbDataSet.setText(currentDataSet); } else if (e.getSource().equals(btnFilters)) { if ((getDataServiceProvider().invoke(IDataServiceProvider.COMMAND_EDIT_FILTER)) == (org.eclipse.jface.window.Window.OK)) { refreshTablePreview(); doLivePreview(); updateApplyButton(); } } else if (e.getSource().equals(btnParameters)) { if ((getDataServiceProvider().invoke(IDataServiceProvider.COMMAND_EDIT_PARAMETER)) == (org.eclipse.jface.window.Window.OK)) { refreshTablePreview(); doLivePreview(); updateApplyButton(); } } else if (e.getSource().equals(btnBinding)) { if ((getDataServiceProvider().invoke(IDataServiceProvider.COMMAND_EDIT_BINDING)) == (org.eclipse.jface.window.Window.OK)) { refreshTablePreview(); doLivePreview(); updateApplyButton(); } } else if ((e.getSource()) instanceof org.eclipse.swt.widgets.MenuItem) { org.eclipse.swt.widgets.MenuItem item = ((org.eclipse.swt.widgets.MenuItem) (e.getSource())); org.eclipse.jface.action.IAction action = ((org.eclipse.jface.action.IAction) (item.getData())); action.setChecked((!(action.isChecked()))); action.run(); } }
protected org.eclipse.birt.report.engine.content.IContent processExtendedContent(org.eclipse.birt.report.engine.content.IForeignContent content) { assert IForeignContent.EXTERNAL_TYPE.equals(content.getRawType()); assert (content.getGenerateBy()) instanceof org.eclipse.birt.report.engine.ir.ExtendedItemDesign; org.eclipse.birt.report.engine.content.IContent generatedContent = content; org.eclipse.birt.report.engine.ir.ExtendedItemDesign design = ((org.eclipse.birt.report.engine.ir.ExtendedItemDesign) (content.getGenerateBy())); org.eclipse.birt.report.model.api.ExtendedItemHandle handle = ((org.eclipse.birt.report.model.api.ExtendedItemHandle) (design.getHandle())); java.lang.String tagName = handle.getExtensionName(); if ("Chart".equals(tagName)) { org.eclipse.birt.report.engine.api.IHTMLImageHandler imageHandler = context.getImageHandler(); if (imageHandler != null) { java.lang.String imageId = getImageCacheID(content); org.eclipse.birt.report.engine.api.CachedImage cachedImage = imageHandler.getCachedImage(imageId, IImage.CUSTOM_IMAGE, context.getReportContext()); if (cachedImage != null) { return processCachedImage(content, cachedImage); } } } org.eclipse.birt.report.engine.extension.IReportItemPresentation itemPresentation = org.eclipse.birt.report.engine.extension.internal.ExtensionManager.getInstance().createPresentationItem(tagName); if (itemPresentation != null) { org.eclipse.birt.data.engine.api.IDataQueryDefinition[] queries = design.getQueries(); org.eclipse.birt.report.engine.extension.internal.ReportItemPresentationInfo info = new org.eclipse.birt.report.engine.extension.internal.ReportItemPresentationInfo(); info.setModelObject(handle); info.setApplicationClassLoader(context.getApplicationClassLoader()); info.setReportContext(context.getReportContext()); info.setReportQueries(queries); info.setResolution(getChartResolution()); info.setExtendedItemContent(content); info.setSupportedImageFormats(getChartFormats()); info.setActionHandler(context.getActionHandler()); info.setOutputFormat(getOutputFormat()); itemPresentation.init(info); java.lang.Object rawValue = content.getRawValue(); if (rawValue instanceof byte[]) { byte[] values = ((byte[]) (rawValue)); itemPresentation.deserialize(new java.io.ByteArrayInputStream(values)); } if (queries == null) { org.eclipse.birt.report.model.api.DesignElementHandle elementHandle = design.getHandle(); if (elementHandle instanceof org.eclipse.birt.report.model.api.ReportElementHandle) { queries = ((org.eclipse.birt.data.engine.api.IBaseQueryDefinition[]) (context.getRunnable().getReportIR().getQueryByReportHandle(((org.eclipse.birt.report.model.api.ReportElementHandle) (elementHandle))))); } } org.eclipse.birt.report.engine.extension.IBaseResultSet[] rsets = context.getResultSets(); org.eclipse.birt.report.engine.extension.IBaseResultSet[] resultSets = null; if (queries == null) { if (rsets != null) { resultSets = new org.eclipse.birt.report.engine.extension.IBaseResultSet[1]; resultSets[0] = new org.eclipse.birt.report.engine.data.dte.SingleQueryResultSet(((org.eclipse.birt.report.engine.extension.IQueryResultSet) (rsets[0]))); } } else { resultSets = rsets; } try { java.lang.Object output = itemPresentation.onRowSets(resultSets); if (output != null) { int type = itemPresentation.getOutputType(); java.lang.String imageMIMEType = itemPresentation.getImageMIMEType(); generatedContent = processExtendedContent(content, type, output, imageMIMEType); } else { generatedContent = null; } itemPresentation.finish(); } catch (org.eclipse.birt.core.exception.BirtException ex) { context.addException(design.getHandle(), ex); org.eclipse.birt.report.engine.presentation.LocalizedContentVisitor.logger.log(java.util.logging.Level.SEVERE, ex.getMessage(), ex); } } org.eclipse.birt.report.engine.extension.Size size = itemPresentation.getSize(); if (size != null) { org.eclipse.birt.report.engine.ir.DimensionType height = new org.eclipse.birt.report.engine.ir.DimensionType(size.getWidth(), size.getUnit()); org.eclipse.birt.report.engine.ir.DimensionType width = new org.eclipse.birt.report.engine.ir.DimensionType(size.getHeight(), size.getUnit()); generatedContent.setHeight(height); generatedContent.setWidth(width); } return generatedContent; }
private void writeDocumentToOutputStream(org.w3c.dom.Document svgDocument, java.io.OutputStream outputStream) throws java.lang.Exception { if ((svgDocument != null) && (outputStream != null)) { java.io.OutputStreamWriter writer = null; writer = new java.io.OutputStreamWriter(outputStream, "UTF-8"); javax.xml.transform.dom.DOMSource source = new javax.xml.transform.dom.DOMSource(svgDocument); javax.xml.transform.stream.StreamResult result = new javax.xml.transform.stream.StreamResult(writer); checkForTransformFactoryImpl(); javax.xml.transform.TransformerFactory transFactory = javax.xml.transform.TransformerFactory.newInstance(); javax.xml.transform.Transformer transformer = transFactory.newTransformer(); transformer.transform(source, result); } }
protected void mergeDropCell(org.eclipse.birt.report.engine.layout.area.impl.RowArea row) { if ((unresolvedRow) == null) { return; } org.eclipse.birt.report.engine.layout.area.impl.CellArea[] cells = new org.eclipse.birt.report.engine.layout.area.impl.CellArea[columnNumber]; java.util.Iterator iter = row.getChildren(); while (iter.hasNext()) { org.eclipse.birt.report.engine.layout.area.impl.CellArea cell = ((org.eclipse.birt.report.engine.layout.area.impl.CellArea) (iter.next())); int colStart = cell.getColumnID(); int colEnd = colStart + (cell.getColSpan()); for (int i = colStart; i < colEnd; i++) { int index = colStart - (start); if ((index >= 0) && (index < (columnNumber))) { cells[(colStart - (start))] = cell; } } } for (int i = 0; i < (columnNumber); i++) { if ((cells[i]) == null) { org.eclipse.birt.report.engine.content.ICellContent cellContent = null; org.eclipse.birt.report.engine.layout.area.impl.CellArea ca = unresolvedRow.getCell(((start) + i)); if (ca != null) { org.eclipse.birt.report.engine.content.ICellContent cc = ((org.eclipse.birt.report.engine.content.ICellContent) (ca.getContent())); cellContent = new org.eclipse.birt.report.engine.layout.pdf.cache.ClonedCellContent(cc, getRowSpan(((org.eclipse.birt.report.engine.content.IRowContent) (row.getContent())), ca)); int startColumn = cellContent.getColumn(); int endColumn = (cellContent.getColSpan()) + startColumn; org.eclipse.birt.report.engine.layout.area.impl.CellArea emptyCell = org.eclipse.birt.report.engine.layout.area.impl.AreaFactory.createCellArea(cellContent); emptyCell.setRowSpan(ca.getRowSpan()); resolveBorderConflict(emptyCell, false); emptyCell.setWidth(getCellWidth(startColumn, endColumn)); emptyCell.setPosition(layoutInfo.getXPosition(i), 0); emptyCell.setHeight(row.getHeight()); row.addChild(emptyCell); } } } }
public java.lang.Object get(java.lang.String name, org.mozilla.javascript.Scriptable start) { if (ScriptConstants.OUTER_RESULT_KEYWORD.equalsIgnoreCase(name)) { if ((this.helper.getParent()) != null) return helper.getParent().getScriptable(); else throw org.mozilla.javascript.Context.reportRuntimeError(org.eclipse.birt.data.engine.i18n.DataResourceHandle.getInstance().getMessage(ResourceConstants.NO_OUTER_RESULTS_EXIST)); } int rowIndex = -1; try { rowIndex = odiResult.getCurrentResultIndex(); } catch (org.eclipse.birt.core.exception.BirtException e1) { } if ((ScriptConstants.ROW_NUM_KEYWORD.equalsIgnoreCase(name)) || ("0".equalsIgnoreCase(name))) { return new java.lang.Integer(rowIndex); } if ((rowIndex == (currRowIndex)) && (valueCacheMap.containsKey(name))) { return valueCacheMap.get(name); } else { java.lang.Object value = null; try { org.eclipse.birt.data.engine.api.IBinding binding = this.exprManager.getBinding(name); if (binding == null) { throw org.mozilla.javascript.Context.reportRuntimeError(org.eclipse.birt.data.engine.i18n.DataResourceHandle.getInstance().getMessage(ResourceConstants.INVALID_BOUND_COLUMN_NAME, new java.lang.String[]{ name })); } if ((binding.getAggrFunction()) != null) return this.odiResult.getAggrValue(name); org.eclipse.birt.data.engine.api.IBaseExpression dataExpr = this.exprManager.getExpr(name); if (dataExpr == null) { throw org.mozilla.javascript.Context.reportRuntimeError(org.eclipse.birt.data.engine.i18n.DataResourceHandle.getInstance().getMessage(ResourceConstants.INVALID_BOUND_COLUMN_NAME, new java.lang.String[]{ name })); } value = org.eclipse.birt.data.engine.expression.ExprEvaluateUtil.evaluateValue(dataExpr, this.odiResult.getCurrentResultIndex(), this.odiResult.getCurrentResult(), this.scope, this.cx); value = org.eclipse.birt.core.script.JavascriptEvalUtil.convertToJavascriptValue(org.eclipse.birt.core.data.DataTypeUtil.convert(value, binding.getDataType()), this.scope); } catch (org.eclipse.birt.core.exception.BirtException e) { throw org.mozilla.javascript.Context.reportRuntimeError(e.getLocalizedMessage()); } if ((this.currRowIndex) != rowIndex) { this.valueCacheMap.clear(); this.currRowIndex = rowIndex; } valueCacheMap.put(name, value); return value; } }
public void javaToNative(java.lang.Object object, org.eclipse.swt.dnd.TransferData transferData) { if ((checkText(object)) && (isSupportedType(transferData))) { try { super.javaToNative(((java.lang.String) (object)).getBytes("UTF-8"), transferData); } catch (java.io.UnsupportedEncodingException e) { super.javaToNative(((java.lang.String) (object)).getBytes(), transferData); } } }
private boolean groupKeyValuesEqual(java.lang.Object[] groupKeyValues, java.lang.String[] columnNames, int i) throws org.eclipse.birt.data.engine.core.DataException { java.lang.Object fieldValue = odiResult.getCurrentResult().getFieldValue(columnNames[i]); return ((fieldValue == null) && ((groupKeyValues[i]) == null)) || (((fieldValue != null) && ((groupKeyValues[i]) != null)) && (fieldValue.equals(groupKeyValues[i]))); }
protected org.eclipse.birt.report.engine.extension.IBaseResultSet doExecuteSubCubeQuery(org.eclipse.birt.report.engine.extension.ICubeResultSet parent, org.eclipse.birt.data.engine.olap.api.query.ISubCubeQueryDefinition query) throws org.eclipse.birt.core.exception.BirtException { org.mozilla.javascript.Scriptable scope = context.getSharedScope(); org.eclipse.birt.data.engine.api.IBasePreparedQuery pQuery = ((org.eclipse.birt.data.engine.api.IBasePreparedQuery) (queryMap.get(query))); if (pQuery == null) { throw new org.eclipse.birt.report.engine.api.EngineException(("can't find the prepared query " + query)); } org.eclipse.birt.data.engine.olap.api.ICubeQueryResults dteResults = ((org.eclipse.birt.data.engine.olap.api.ICubeQueryResults) (dteSession.execute(pQuery, parent.getQueryResults(), scope))); org.eclipse.birt.report.engine.extension.IBaseResultSet resultSet = new org.eclipse.birt.report.engine.data.dte.CubeResultSet(this, context, parent, query, ((org.eclipse.birt.data.engine.olap.api.ICubeQueryResults) (dteResults))); return resultSet; }
private org.eclipse.draw2d.geometry.Dimension getPreferredSize(int wHint, int hHint, boolean isFix, boolean forceWidth, boolean forceHeight) { int rx = ((recommendSize) != null) ? recommendSize.width : 0; int ry = ((recommendSize) != null) ? recommendSize.height : 0; rx = getRealRecommendSizeX(rx, wHint); org.eclipse.draw2d.geometry.Dimension dim = null; if (isFix) { int tempHint = wHint; int maxWidth = calcMaxSegment(); if ((wHint < maxWidth) && (!forceWidth)) { tempHint = maxWidth; } dim = super.getPreferredSize((tempHint <= 0 ? -1 : tempHint), hHint); } else if (DesignChoiceConstants.DISPLAY_BLOCK.equals(display)) { dim = super.getPreferredSize((rx == 0 ? wHint : rx), hHint); } else { dim = super.getPreferredSize((rx == 0 ? -1 : rx), hHint); if (((rx == 0) && (wHint > 0)) && ((dim.width) > wHint)) { dim = super.getPreferredSize(wHint, hHint); } } return new org.eclipse.draw2d.geometry.Dimension(java.lang.Math.max(dim.width, rx), java.lang.Math.max(dim.height, ry)); }
private org.eclipse.birt.report.model.api.ColumnHintHandle findColumnHint(org.eclipse.birt.report.model.api.DataSetHandle handle, java.lang.String columnName) { if ((columnName == null) || ((columnName.trim().length()) == 0)) return null; org.eclipse.birt.report.model.api.ColumnHintHandle hint = null; java.util.Iterator iter = handle.getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP).iterator(); while (iter.hasNext()) { hint = ((org.eclipse.birt.report.model.api.ColumnHintHandle) (iter.next())); if (columnName.equals(hint.getColumnName())) { return hint; } } if ((hint == null) && (handle instanceof org.eclipse.birt.report.model.api.DerivedDataSetHandle)) { java.util.List<org.eclipse.birt.report.model.api.DataSetHandle> inputDataSets = ((org.eclipse.birt.report.model.api.DerivedDataSetHandle) (handle)).getInputDataSets(); for (int i = 0; i < (inputDataSets.size()); i++) { hint = findColumnHint(inputDataSets.get(i), columnName); if (hint != null) { return hint; } } } return hint; }
public static int getLineHeight(java.lang.String lineHeight) { try { if (lineHeight.equalsIgnoreCase("normal")) { return 0; } return ((int) (java.lang.Float.parseFloat(lineHeight))); } catch (java.lang.NumberFormatException ex) { org.eclipse.birt.report.engine.layout.pdf.util.PropertyUtil.logger.log(java.util.logging.Level.WARNING, "invalid line height: {0}", lineHeight); return 0; } }
public static org.eclipse.birt.report.designer.ui.extensions.IPropertyTabUI buildFilterPage(org.eclipse.swt.widgets.Composite parent, java.lang.Object input) { org.eclipse.swt.layout.GridLayout gl = new org.eclipse.swt.layout.GridLayout(); parent.setLayout(gl); org.eclipse.birt.report.designer.internal.ui.views.attributes.page.FormPage page = new org.eclipse.birt.report.designer.internal.ui.views.attributes.page.FormPage(org.eclipse.birt.report.designer.internal.ui.views.attributes.widget.FormPropertyDescriptor.NORMAL_FUNCTION, new org.eclipse.birt.report.designer.internal.ui.views.attributes.provider.FilterHandleProvider(), false, true); page.setInput(input); page.buildUI(parent); return page; }
public static java.lang.String getRelativedPath(java.lang.String basePath, java.lang.String path) { java.net.URI baseUri = new java.io.File(basePath).getParentFile().toURI(); java.net.URI childUri = new java.io.File(path).toURI(); return baseUri.relativize(childUri).getPath(); }
public void setProperty(org.eclipse.birt.report.model.metadata.ElementPropertyDefn prop, java.lang.Object value) throws org.eclipse.birt.report.model.api.activity.SemanticException { checkAllowedOperation(); if (prop.isElementType()) { setElementTypeProperty(prop, value); return; } java.lang.String propName = prop.getName(); if (((IReportItemModel.TOC_PROP.equals(propName)) || (IGroupElementModel.TOC_PROP.equals(propName))) && (value instanceof java.lang.String)) { java.lang.Object oldValue = element.getLocalProperty(module, prop); if (oldValue != null) { org.eclipse.birt.report.model.core.MemberRef ref = new org.eclipse.birt.report.model.core.CachedMemberRef(prop, org.eclipse.birt.report.model.api.elements.structures.TOC.TOC_EXPRESSION); setMember(ref, value); return; } value = org.eclipse.birt.report.model.api.StructureFactory.createTOC(((java.lang.String) (value))); } if (IExtendedItemModel.EXTENSION_NAME_PROP.equals(prop.getName())) { throw new org.eclipse.birt.report.model.api.metadata.PropertyValueException(element, org.eclipse.birt.report.model.elements.interfaces.IExtendedItemModel.EXTENSION_NAME_PROP, value, org.eclipse.birt.report.model.api.metadata.PropertyValueException.DESIGN_EXCEPTION_EXTENSION_SETTING_FORBIDDEN); } java.lang.String mask = element.getPropertyMask(module, prop.getName()); if (DesignChoiceConstants.PROPERTY_MASK_TYPE_LOCK.equalsIgnoreCase(mask)) { throw new org.eclipse.birt.report.model.api.metadata.PropertyValueException(element, prop, value, org.eclipse.birt.report.model.api.metadata.PropertyValueException.DESIGN_EXCEPTION_VALUE_LOCKED); } if ((element.isVirtualElement()) && ((element) instanceof org.eclipse.birt.report.model.elements.Cell)) { propName = prop.getName(); if ((((ICellModel.COL_SPAN_PROP.equalsIgnoreCase(propName)) || (ICellModel.ROW_SPAN_PROP.equalsIgnoreCase(propName))) || (ICellModel.DROP_PROP.equalsIgnoreCase(propName))) || (ICellModel.COLUMN_PROP.equalsIgnoreCase(propName))) { throw new org.eclipse.birt.report.model.api.metadata.PropertyValueException(element, prop, value, org.eclipse.birt.report.model.api.metadata.PropertyValueException.DESIGN_EXCEPTION_PROPERTY_CHANGE_FORBIDDEN); } } if ((element) instanceof org.eclipse.birt.report.model.elements.MasterPage) { propName = prop.getName(); if ((!(((org.eclipse.birt.report.model.elements.MasterPage) (element)).isCustomType(module))) && ((IMasterPageModel.WIDTH_PROP.equals(propName)) || (IMasterPageModel.HEIGHT_PROP.equals(propName)))) { throw new org.eclipse.birt.report.model.api.elements.SemanticError(element, org.eclipse.birt.report.model.api.elements.SemanticError.DESIGN_EXCEPTION_CANNOT_SPECIFY_PAGE_SIZE); } } value = validateValue(prop, value); if ((value instanceof org.eclipse.birt.report.model.metadata.ElementRefValue) && ((prop.getTypeCode()) == (org.eclipse.birt.report.model.api.metadata.IPropertyType.ELEMENT_REF_TYPE))) { checkRecursiveElementReference(prop, ((org.eclipse.birt.report.model.metadata.ElementRefValue) (value))); } if (((element) instanceof org.eclipse.birt.report.model.elements.GroupElement) && (IGroupElementModel.GROUP_NAME_PROP.equals(prop.getName()))) { if (!(isGroupNameValidInContext(((java.lang.String) (value))))) throw new org.eclipse.birt.report.model.api.command.NameException(element, ((java.lang.String) (value)), org.eclipse.birt.report.model.api.command.NameException.DESIGN_EXCEPTION_DUPLICATE); } if (prop.isIntrinsic()) { setIntrinsicProperty(prop, value); return; } if ((IDesignElementModel.REF_TEMPLATE_PARAMETER_PROP.equals(prop.getName())) && (value == null)) { clearRefTemplateParameterProp(prop, value); return; } if ((element) instanceof org.eclipse.birt.report.model.elements.ContentElement) { if (!(((org.eclipse.birt.report.model.elements.ContentElement) (element)).isLocal())) { org.eclipse.birt.report.model.command.ContentElementCommand attrCmd = new org.eclipse.birt.report.model.command.ContentElementCommand(module, element, ((org.eclipse.birt.report.model.elements.ContentElement) (element)).getValueContainer()); attrCmd.doSetProperty(prop, value); return; } } doSetProperty(prop, value); }
public void startNode(org.w3c.dom.Node node, java.util.HashMap cssStyles) { java.lang.String nodeName = node.getNodeName(); java.util.HashMap cssStyle = ((java.util.HashMap) (cssStyles.get(node))); writer.openTag(nodeName); org.w3c.dom.NamedNodeMap attributes = node.getAttributes(); if (attributes != null) { for (int i = 0; i < (attributes.getLength()); i++) { org.w3c.dom.Node attribute = attributes.item(i); java.lang.String attrName = attribute.getNodeName(); java.lang.String attrValue = attribute.getNodeValue(); if (attrValue != null) { if (("img".equalsIgnoreCase(nodeName)) && ("src".equalsIgnoreCase(attrName))) { java.lang.String attrValueTrue = handleStyleImage(attrValue); if (attrValueTrue != null) { attrValue = attrValueTrue; } } writer.attribute(attrName, attrValue); } } } if (cssStyle != null) { java.lang.StringBuffer buffer = new java.lang.StringBuffer(); java.util.Iterator ite = cssStyle.entrySet().iterator(); while (ite.hasNext()) { java.util.Map.Entry entry = ((java.util.Map.Entry) (ite.next())); java.lang.Object keyObj = entry.getKey(); java.lang.Object valueObj = entry.getValue(); if ((keyObj == null) || (valueObj == null)) { continue; } java.lang.String key = keyObj.toString(); java.lang.String value = valueObj.toString(); buffer.append(key); buffer.append(":"); if ("background-image".equalsIgnoreCase(key)) { java.lang.String valueTrue = handleStyleImage(value); if (valueTrue != null) { value = valueTrue; } buffer.append("url("); buffer.append(value); buffer.append(")"); } else { buffer.append(value.replaceAll(" ", "")); } buffer.append(";"); } if ((buffer.length()) != 0) { writer.attribute("style", buffer.toString()); } } }
protected boolean handleTextShrink(int type, org.eclipse.birt.report.engine.content.IStyle style, org.eclipse.birt.report.engine.ir.DimensionType height, org.eclipse.birt.report.engine.ir.DimensionType width, java.lang.StringBuffer styleBuffer) { boolean canShrink = (style != null) && ("true".equalsIgnoreCase(style.getCanShrink())); if ((type & (org.eclipse.birt.report.engine.emitter.html.util.HTMLEmitterUtil.DISPLAY_BLOCK)) > 0) { if (width != null) { buildSize(styleBuffer, HTMLTags.ATTR_WIDTH, width); styleBuffer.append(" overflow: hidden;"); } if (!canShrink) { buildSize(styleBuffer, HTMLTags.ATTR_MIN_HEIGHT, height); } } else if ((type & (org.eclipse.birt.report.engine.emitter.html.util.HTMLEmitterUtil.DISPLAY_INLINE)) > 0) { if ((type & (org.eclipse.birt.report.engine.emitter.html.util.HTMLEmitterUtil.DISPLAY_INLINE_BLOCK)) > 0) { buildSize(styleBuffer, HTMLTags.ATTR_HEIGHT, height); } if (!canShrink) { if (width != null) { buildSize(styleBuffer, HTMLTags.ATTR_WIDTH, width); styleBuffer.append(" overflow: hidden;"); } } } else { assert false; } return canShrink; }
public void dragStart(org.eclipse.swt.dnd.DragSourceEvent event) { org.eclipse.swt.widgets.TreeItem[] selection = availableDbObjectsTree.getSelection(); selectionArray = ((java.lang.Object[]) (selection)); if ((selection.length) > 0) { if ((selection[0].getData()) instanceof org.eclipse.birt.report.data.oda.jdbc.ui.util.DbObject) { if ((((org.eclipse.birt.report.data.oda.jdbc.ui.util.DbObject) (selection[0].getData())).getType()) == (org.eclipse.birt.report.data.oda.jdbc.ui.util.DbObject.PROCEDURE_TYPE)) { event.doit = false; return; } } else if ((selection[0].getData()) instanceof org.eclipse.birt.report.data.oda.jdbc.ui.util.ProcedureParameter) { event.doit = false; return; } } else if (((selection.length) <= 0) || ((selection[0].getData()) == null)) { event.doit = false; return; } }
protected void goThroughGapRows(int groupLevel) throws org.eclipse.birt.core.exception.BirtException, org.eclipse.birt.data.engine.core.DataException { while (((groupLevel < (odiResult.getEndingGroupLevel())) && ((odiResult.getEndingGroupLevel()) != 0)) && (odiResult.next())) { this.prepareCurrentRow(); } }
public int getColumnTypeForSpecialJDBCDriver(int index) { try { if ("java.sql.Timestamp".equals(rsMetadata.getColumnClassName(index))) return java.sql.Types.TIMESTAMP; if ("java.lang.String".equals(rsMetadata.getColumnClassName(index))) return java.sql.Types.VARCHAR; return java.sql.Types.OTHER; } catch (java.lang.Exception e) { return java.sql.Types.OTHER; } }
private org.eclipse.birt.data.engine.api.querydefn.ScriptExpression populateExpression(org.eclipse.birt.data.engine.api.querydefn.QueryDefinition query, org.eclipse.birt.report.model.api.olap.MeasureHandle measure, java.lang.String function) { org.eclipse.birt.data.engine.api.querydefn.ScriptExpression se = null; if ((function == null) || (function.equals("sum"))) { se = new org.eclipse.birt.data.engine.api.querydefn.ScriptExpression((((("Total.sum(" + (measure.getMeasureExpression())) + ",null,") + (query.getGroups().size())) + ")")); } else if (function.equals("count")) { se = new org.eclipse.birt.data.engine.api.querydefn.ScriptExpression(((("Total.count(" + "null,") + (query.getGroups().size())) + ")")); } else if (function.equals("min")) { se = new org.eclipse.birt.data.engine.api.querydefn.ScriptExpression((((("Total.min(" + (measure.getMeasureExpression())) + ",null,") + (query.getGroups().size())) + ")")); } else if (function.equals("max")) { se = new org.eclipse.birt.data.engine.api.querydefn.ScriptExpression((((("Total.max(" + (measure.getMeasureExpression())) + ",null,") + (query.getGroups().size())) + ")")); } se.setDataType(DataType.DOUBLE_TYPE); return se; }
public boolean canLeaveThePage() { handleLeaveThePage(); return true; }
public void endTable() { if (!(tables.isEmpty())) { tables.pop(); endContainer(); } }
public static boolean isNumber(java.lang.String val) { try { java.math.BigDecimal num = new java.math.BigDecimal(val); if ((num.compareTo(new java.math.BigDecimal(java.lang.Double.MAX_VALUE))) != 1) return true; else return false; } catch (java.lang.Exception e) { return false; } }
private void populateExtendedAggrInfo(java.lang.String name, org.eclipse.birt.data.engine.api.aggregation.IAggregation aggrFunc, org.eclipse.birt.core.framework.IConfigurationElement elem, org.eclipse.birt.data.engine.api.aggregation.AggrFunctionWrapper aggrWrapper) { org.eclipse.birt.core.framework.IConfigurationElement[] uiInfo = elem.getChildren(org.eclipse.birt.data.engine.api.aggregation.AggregationManager.ELEMENT_UIINFO); assert (uiInfo != null) && ((uiInfo.length) == 1); java.lang.String paramInfo = uiInfo[0].getAttribute(org.eclipse.birt.data.engine.api.aggregation.AggregationManager.ATTRIBUTE_PARAMETER_META_INFO); java.lang.String textInfo = uiInfo[0].getAttribute(org.eclipse.birt.data.engine.api.aggregation.AggregationManager.ATTRIBUTE_TEXT_DATA); aggrWrapper.setDisplayName(textInfo); java.util.List paramList = new java.util.ArrayList(); java.lang.String[] paramInfos = paramInfo.split(","); boolean[] paramFlags = aggrFunc.getParameterDefn(); if ((paramInfos != null) && ((paramInfos.length) > 0)) { populateDataFiledParameterDefn(paramList); for (int k = 0; k < (paramInfos.length); k++) { final java.lang.String s = paramInfos[k].trim(); int index = s.indexOf(' '); java.lang.String paramName = null; if (index > 0) { paramName = s.substring((index + 1)).trim(); } else { paramName = paramInfos[k]; } if ((k + 1) >= (paramFlags.length)) { break; } org.eclipse.birt.data.engine.api.aggregation.AggrFunctionWrapper.ParameterDefn paramDefn = new org.eclipse.birt.data.engine.api.aggregation.AggrFunctionWrapper.ParameterDefn(paramName, paramName, (!(paramFlags[(k + 1)])), false); paramList.add(paramDefn); } } aggrWrapper.setParameterDefn(null); }
private void prepareExecution(org.eclipse.birt.data.engine.api.IQueryResults outerRts, org.mozilla.javascript.Scriptable targetScope) throws org.eclipse.birt.data.engine.core.DataException { if (isPrepared) return; dataSource = findDataSource(); if (targetScope == null) { if ((this.dataSource) != null) { dataSource.setScope(engine.getSharedScope()); this.scope = org.eclipse.birt.data.engine.impl.DataEngineImpl.createSubscope(this.dataSource.getScriptable()); } else this.scope = org.eclipse.birt.data.engine.impl.DataEngineImpl.createSubscope(engine.getSharedScope()); } else { if ((this.dataSource) != null) { dataSource.setScope(createSubscope(targetScope)); this.scope = createSubscope(this.dataSource.getScriptable()); } else this.scope = targetScope; } openDataSource(); this.outerResults = outerRts; dataSet = newDataSetRuntime(); rowObject = new org.eclipse.birt.data.engine.script.JSRowObject(dataSet); this.scope.put("row", this.scope, rowObject); if ((dataSet) != null) { dataSet.beforeOpen(); } odiQuery = createOdiQuery(); populateOdiQuery(); prepareOdiQuery(); isPrepared = true; }
public void startTable(org.eclipse.birt.report.engine.content.ITableContent table) { assert table != null; org.eclipse.birt.report.engine.content.IStyle mergedStyle = table.getStyle(); push(mergedStyle); if (isHidden()) { return; } org.eclipse.birt.report.engine.emitter.html.HTMLReportEmitter.logger.log(java.util.logging.Level.FINE, "[HTMLTableEmitter] Start table"); org.eclipse.birt.report.engine.ir.DimensionType x = table.getX(); org.eclipse.birt.report.engine.ir.DimensionType y = table.getY(); java.lang.StringBuffer styleBuffer = new java.lang.StringBuffer(); addDefaultTableStyles(styleBuffer); writer.openTag(HTMLTags.TAG_TABLE); setStyleName(table.getStyleClass()); int display = checkElementType(x, y, mergedStyle, styleBuffer); setDisplayProperty(display, org.eclipse.birt.report.engine.emitter.html.HTMLReportEmitter.DISPLAY_INLINE, styleBuffer); handleShrink(org.eclipse.birt.report.engine.emitter.html.HTMLReportEmitter.DISPLAY_BLOCK, mergedStyle, table.getHeight(), table.getWidth(), styleBuffer); handleStyle(table, styleBuffer); java.lang.String bookmark = table.getBookmark(); if (bookmark == null) { bookmark = generateUniqueID(); } setBookmark(null, bookmark); exportElementID(table, bookmark, "TABLE"); org.eclipse.birt.report.engine.api.InstanceID iid = table.getInstanceID(); java.lang.Object generateBy = table.getGenerateBy(); if ((generateBy instanceof org.eclipse.birt.report.engine.ir.TableItemDesign) && (iid != null)) { writer.attribute("iid", iid.toString()); } java.lang.String caption = table.getCaption(); if ((caption != null) && ((caption.length()) > 0)) { writer.openTag(HTMLTags.TAG_CAPTION); writer.text(caption); writer.closeTag(HTMLTags.TAG_CAPTION); } writeColumns(table); }
protected void createFilterConditionContent(org.eclipse.swt.widgets.Composite innerParent) { org.eclipse.swt.widgets.Composite anotherParent = new org.eclipse.swt.widgets.Composite(innerParent, org.eclipse.swt.SWT.NONE); org.eclipse.swt.layout.GridData gd = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_HORIZONTAL); anotherParent.setLayoutData(gd); org.eclipse.swt.layout.GridLayout glayout = new org.eclipse.swt.layout.GridLayout(4, false); anotherParent.setLayout(glayout); org.eclipse.swt.widgets.Label lb = new org.eclipse.swt.widgets.Label(anotherParent, org.eclipse.swt.SWT.NONE); lb.setText(org.eclipse.birt.report.designer.nls.Messages.getString("FilterConditionBuilder.text.Condition")); org.eclipse.swt.widgets.Label lb2 = new org.eclipse.swt.widgets.Label(anotherParent, org.eclipse.swt.SWT.NONE); lb2.setLayoutData(new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_HORIZONTAL)); new org.eclipse.swt.widgets.Label(anotherParent, org.eclipse.swt.SWT.NONE); org.eclipse.swt.widgets.Composite condition = new org.eclipse.swt.widgets.Composite(innerParent, org.eclipse.swt.SWT.NONE); gd = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_BOTH); gd.heightHint = 180; condition.setLayoutData(gd); glayout = new org.eclipse.swt.layout.GridLayout(4, false); condition.setLayout(glayout); expression = new org.eclipse.swt.widgets.Combo(condition, org.eclipse.swt.SWT.NONE); org.eclipse.swt.layout.GridData gdata = new org.eclipse.swt.layout.GridData(); gdata.widthHint = 100; expression.setLayoutData(gdata); expression.addListener(SWT.Selection, comboModifyListener); expression.setItems(getDataSetColumns()); if ((expression.getItemCount()) == 0) { expression.add(org.eclipse.birt.report.designer.util.DEUtil.resolveNull(null)); } expression.addSelectionListener(new org.eclipse.swt.events.SelectionAdapter() { public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { if ((expression.getText().equals(org.eclipse.birt.chart.reportitem.ui.dialogs.ChartCubeFilterConditionBuilder.VALUE_OF_THIS_DATA_ITEM)) && ((designHandle) instanceof org.eclipse.birt.report.model.api.DataItemHandle)) { expression.setText(org.eclipse.birt.report.designer.util.DEUtil.getColumnExpression(((org.eclipse.birt.report.model.api.DataItemHandle) (designHandle)).getResultSetColumn())); } updateButtons(); expression.setText(getExpression(expression.getText())); } }); expression.addMouseListener(new org.eclipse.swt.events.MouseAdapter() { public void mouseUp(org.eclipse.swt.events.MouseEvent e) { if (((expression.getItem(0).length()) == 0) && ((tipsForCube) != null)) { updateMessage(tipsForCube, IMessageProvider.INFORMATION); tipsForCube = null; } } }); expression.addModifyListener(new org.eclipse.swt.events.ModifyListener() { public void modifyText(org.eclipse.swt.events.ModifyEvent e) { updateButtons(); if (!(expression.getText().equals(fCurrentExpr))) { needRefreshList = true; fCurrentExpr = expression.getText(); } } }); try { expButton = ((org.eclipse.birt.chart.ui.swt.interfaces.IExpressionButton) (context.getUIServiceProvider().invoke(IUIServiceProvider.Command.EXPRESS_BUTTON_CREATE, condition, expression, context.getExtendedItem(), IUIServiceProvider.COMMAND_EXPRESSION_DATA_BINDINGS, new org.eclipse.swt.widgets.Listener() { public void handleEvent(org.eclipse.swt.widgets.Event event) { if ((event.data) instanceof java.lang.String[]) { updateButtons(); } } }))); } catch (org.eclipse.birt.chart.exception.ChartException e) { org.eclipse.birt.core.ui.frameworks.taskwizard.WizardBase.displayException(e); } operator = new org.eclipse.swt.widgets.Combo(condition, org.eclipse.swt.SWT.READ_ONLY); for (int i = 0; i < (org.eclipse.birt.chart.reportitem.ui.dialogs.ChartCubeFilterConditionBuilder.OPERATOR.length); i++) { operator.add(org.eclipse.birt.chart.reportitem.ui.dialogs.ChartCubeFilterConditionBuilder.OPERATOR[i][0]); } operator.addSelectionListener(operatorSelectionListener); create2ValueComposite(condition); if ((inputHandle) != null) { syncViewProperties(); } lb = new org.eclipse.swt.widgets.Label(innerParent, ((org.eclipse.swt.SWT.SEPARATOR) | (org.eclipse.swt.SWT.HORIZONTAL))); lb.setLayoutData(new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_HORIZONTAL)); }
private static boolean between(java.lang.Object resultObject, java.lang.Object resultOp1, java.lang.Object resultOp2) throws org.eclipse.birt.data.engine.core.DataException { if (resultObject instanceof java.util.Date) { try { resultOp1 = org.eclipse.birt.core.data.DataTypeUtil.toDate(resultOp1); resultOp2 = org.eclipse.birt.core.data.DataTypeUtil.toDate(resultOp2); } catch (org.eclipse.birt.core.exception.BirtException e) { throw new org.eclipse.birt.data.engine.core.DataException(org.eclipse.birt.data.engine.i18n.ResourceConstants.DATATYPEUTIL_ERROR, e); } } java.lang.Object min; java.lang.Object max; if ((org.eclipse.birt.data.engine.script.ScriptEvalUtil.compare(resultOp1, resultOp2)) <= 0) { min = resultOp1; max = resultOp2; } else { min = resultOp2; max = resultOp1; } return ((org.eclipse.birt.data.engine.script.ScriptEvalUtil.compare(resultObject, min)) >= 0) && ((org.eclipse.birt.data.engine.script.ScriptEvalUtil.compare(resultObject, max)) <= 0); }
public static org.eclipse.birt.report.data.oda.jdbc.ui.util.JDBCDriverInformation newInstance(java.lang.Class driverClass) { try { java.sql.Driver d = ((java.sql.Driver) (driverClass.newInstance())); if (d != null) { org.eclipse.birt.report.data.oda.jdbc.ui.util.JDBCDriverInformation info = org.eclipse.birt.report.data.oda.jdbc.ui.util.JDBCDriverInformation.newInstance(driverClass.getName()); try { info.setMajorVersion(d.getMajorVersion()); info.setMinorVersion(d.getMinorVersion()); } catch (java.lang.Throwable e) { java.util.logging.Logger.getLogger(org.eclipse.birt.report.data.oda.jdbc.ui.util.JDBCDriverInformation.class.getName()).log(java.util.logging.Level.WARNING, e.getMessage(), e); } return info; } } catch (java.lang.Throwable e) { java.util.logging.Logger.getLogger(org.eclipse.birt.report.data.oda.jdbc.ui.util.JDBCDriverInformation.class.getName()).log(java.util.logging.Level.WARNING, e.getMessage(), e); } return null; }
public static java.lang.String resolveAbsolutePath(java.lang.String base, java.lang.String relativePath) { java.io.File file = new java.io.File(relativePath); if (file.isAbsolute()) return relativePath; java.lang.String baseDir = org.eclipse.birt.report.model.api.util.URIUtil.getLocalPath(base); java.lang.String relativeDir = org.eclipse.birt.report.model.api.util.URIUtil.getLocalPath(relativePath); if ((baseDir == null) || (relativeDir == null)) return relativePath; java.io.File baseFile = new java.io.File(baseDir); java.io.File resourceFile = new java.io.File(baseFile, relativeDir); return resourceFile.getPath(); }
public org.eclipse.birt.report.engine.css.engine.value.Value computeValue(org.eclipse.birt.report.engine.css.engine.CSSStylableElement elt, org.eclipse.birt.report.engine.css.engine.CSSEngine engine, int idx, org.eclipse.birt.report.engine.css.engine.value.Value value) { org.eclipse.birt.report.engine.css.engine.CSSContext ctx = engine.getCSSContext(); float fs = ctx.getMediumFontSize(); if (value == (CSSValueConstants.XX_SMALL_VALUE)) { return new org.eclipse.birt.report.engine.css.engine.value.FloatValue(org.w3c.dom.css.CSSPrimitiveValue.CSS_NUMBER, (((fs / 1.2F) / 1.2F) / 1.2F)); } if (value == (CSSValueConstants.X_SMALL_VALUE)) { return new org.eclipse.birt.report.engine.css.engine.value.FloatValue(org.w3c.dom.css.CSSPrimitiveValue.CSS_NUMBER, ((fs / 1.2F) / 1.2F)); } if (value == (CSSValueConstants.SMALL_VALUE)) { return new org.eclipse.birt.report.engine.css.engine.value.FloatValue(org.w3c.dom.css.CSSPrimitiveValue.CSS_NUMBER, (fs / 1.2F)); } if (value == (CSSValueConstants.MEDIUM_VALUE)) { return new org.eclipse.birt.report.engine.css.engine.value.FloatValue(org.w3c.dom.css.CSSPrimitiveValue.CSS_NUMBER, fs); } if (value == (CSSValueConstants.LARGE_VALUE)) { return new org.eclipse.birt.report.engine.css.engine.value.FloatValue(org.w3c.dom.css.CSSPrimitiveValue.CSS_NUMBER, (fs * 1.2F)); } if (value == (CSSValueConstants.X_LARGE_VALUE)) { return new org.eclipse.birt.report.engine.css.engine.value.FloatValue(org.w3c.dom.css.CSSPrimitiveValue.CSS_NUMBER, ((fs * 1.2F) * 1.2F)); } if (value == (CSSValueConstants.XX_LARGE_VALUE)) { return new org.eclipse.birt.report.engine.css.engine.value.FloatValue(org.w3c.dom.css.CSSPrimitiveValue.CSS_NUMBER, (((fs * 1.2F) * 1.2F) * 1.2F)); } float scale = 1.0F; boolean doParentRelative = false; if (value == (CSSValueConstants.SMALLER_VALUE)) { doParentRelative = true; scale = 1.0F / 1.2F; } else if (value == (CSSValueConstants.LARGER_VALUE)) { doParentRelative = true; scale = 1.2F; } else if ((value.getCssValueType()) == (org.w3c.dom.css.CSSValue.CSS_PRIMITIVE_VALUE)) { switch (value.getPrimitiveType()) { case org.w3c.dom.css.CSSPrimitiveValue.CSS_EMS : doParentRelative = true; scale = value.getFloatValue(); break; case org.w3c.dom.css.CSSPrimitiveValue.CSS_EXS : doParentRelative = true; scale = (value.getFloatValue()) * 0.5F; break; case org.w3c.dom.css.CSSPrimitiveValue.CSS_PERCENTAGE : doParentRelative = true; scale = (value.getFloatValue()) * 0.01F; break; } } if (doParentRelative) { org.eclipse.birt.report.engine.css.engine.CSSStylableElement parent = ((org.eclipse.birt.report.engine.css.engine.CSSStylableElement) (elt.getParent())); if (parent != null) { org.eclipse.birt.report.engine.content.IStyle style = parent.getComputedStyle(); if (style != null) { org.eclipse.birt.report.engine.css.engine.value.Value fontSize = ((org.eclipse.birt.report.engine.css.engine.value.Value) (style.getProperty(IStyle.STYLE_FONT_SIZE))); if (fontSize != null) { fs = fontSize.getFloatValue(); return new org.eclipse.birt.report.engine.css.engine.value.FloatValue(fontSize.getPrimitiveType(), (fs * scale)); } } } return new org.eclipse.birt.report.engine.css.engine.value.FloatValue(org.w3c.dom.css.CSSPrimitiveValue.CSS_NUMBER, (fs * scale)); } if ((value.getPrimitiveType()) == (org.w3c.dom.css.CSSPrimitiveValue.CSS_NUMBER)) { return super.computeValue(elt, engine, idx, new org.eclipse.birt.report.engine.css.engine.value.FloatValue(org.w3c.dom.css.CSSPrimitiveValue.CSS_PT, value.getFloatValue())); } return super.computeValue(elt, engine, idx, value); }
protected org.eclipse.swt.widgets.Composite getComponent(org.eclipse.swt.widgets.Composite parent) { org.eclipse.birt.chart.ui.util.ChartUIUtil.bindHelp(parent, ChartHelpContextIds.POPUP_AXIS_GRIDLINES); org.eclipse.swt.layout.GridLayout glContent = new org.eclipse.swt.layout.GridLayout(); glContent.numColumns = 2; glContent.horizontalSpacing = 5; glContent.verticalSpacing = 5; glContent.marginHeight = 7; glContent.marginWidth = 7; org.eclipse.swt.layout.GridLayout glGeneral = new org.eclipse.swt.layout.GridLayout(); glGeneral.numColumns = 10; glGeneral.horizontalSpacing = 5; glGeneral.verticalSpacing = 5; glGeneral.marginHeight = 4; glGeneral.marginWidth = 4; org.eclipse.swt.layout.GridLayout glGapWidth = new org.eclipse.swt.layout.GridLayout(); glGapWidth.numColumns = 8; glGapWidth.horizontalSpacing = 5; glGapWidth.marginHeight = 2; glGapWidth.marginWidth = 2; org.eclipse.swt.layout.FillLayout flMajor = new org.eclipse.swt.layout.FillLayout(); cmpContent = new org.eclipse.swt.widgets.Composite(parent, org.eclipse.swt.SWT.NONE); cmpContent.setLayout(glContent); org.eclipse.swt.widgets.Composite choiceComposite = new org.eclipse.swt.widgets.Composite(cmpContent, org.eclipse.swt.SWT.NONE); org.eclipse.swt.layout.GridData gd = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_HORIZONTAL); gd.horizontalSpan = 2; choiceComposite.setLayoutData(gd); choiceComposite.setLayout(new org.eclipse.swt.layout.GridLayout(3, true)); cbHidden = new org.eclipse.swt.widgets.Button(choiceComposite, org.eclipse.swt.SWT.CHECK); cbHidden.setLayoutData(new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_BOTH)); cbHidden.setText(org.eclipse.birt.chart.ui.extension.i18n.Messages.getString("BaseAxisAttributeSheetImpl.Lbl.HideAxisLine")); cbHidden.setSelection((!(axis.getLineAttributes().isVisible()))); cbHidden.addSelectionListener(this); cbCategory = new org.eclipse.swt.widgets.Button(choiceComposite, org.eclipse.swt.SWT.CHECK); cbCategory.setLayoutData(new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.HORIZONTAL_ALIGN_BEGINNING)); cbCategory.setText(org.eclipse.birt.chart.ui.extension.i18n.Messages.getString("BaseAxisAttributeSheetImpl.Lbl.IsCategoryAxis")); cbCategory.setSelection(axis.isCategoryAxis()); cbCategory.addSelectionListener(this); cbCategory.setEnabled(((ScatterChart.TYPE_LITERAL.equals(getChart().getType())) || (AxisType.DATE_TIME_LITERAL.equals(axis.getType())))); cbCategory.setVisible(((angleType) == (org.eclipse.birt.chart.model.attribute.AngleType.X))); cbTickBetweenCategory = new org.eclipse.swt.widgets.Button(choiceComposite, org.eclipse.swt.SWT.CHECK); cbTickBetweenCategory.setLayoutData(new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.HORIZONTAL_ALIGN_BEGINNING)); cbTickBetweenCategory.setText(org.eclipse.birt.chart.ui.extension.i18n.Messages.getString("BaseAxisAttributeSheetImpl.Lbl.IsTickBetweenCategories")); cbTickBetweenCategory.setSelection(axis.getScale().isTickBetweenCategories()); cbTickBetweenCategory.addSelectionListener(this); cbTickBetweenCategory.setEnabled(axis.isCategoryAxis()); cbTickBetweenCategory.setVisible(((angleType) == (org.eclipse.birt.chart.model.attribute.AngleType.X))); cmpGeneral = new org.eclipse.swt.widgets.Composite(cmpContent, org.eclipse.swt.SWT.NONE); org.eclipse.swt.layout.GridData gdCMPGeneral = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_BOTH); gdCMPGeneral.horizontalSpan = 2; gdCMPGeneral.grabExcessVerticalSpace = false; cmpGeneral.setLayoutData(gdCMPGeneral); cmpGeneral.setLayout(glGeneral); org.eclipse.swt.widgets.Label lblColor = new org.eclipse.swt.widgets.Label(cmpGeneral, org.eclipse.swt.SWT.NONE); org.eclipse.swt.layout.GridData gdLBLColor = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL); lblColor.setLayoutData(gdLBLColor); lblColor.setText(org.eclipse.birt.chart.ui.extension.i18n.Messages.getString("BaseAxisAttributeSheetImpl.Lbl.AxisLineColor")); org.eclipse.birt.chart.model.attribute.ColorDefinition clrCurrent = null; if (axis.eIsSet(ComponentPackage.eINSTANCE.getAxis_LineAttributes())) { clrCurrent = axis.getLineAttributes().getColor(); } fccLine = new org.eclipse.birt.chart.ui.swt.composites.FillChooserComposite(cmpGeneral, org.eclipse.swt.SWT.NONE, getContext(), clrCurrent, false, false); org.eclipse.swt.layout.GridData gdFCCLine = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_BOTH); gdFCCLine.horizontalSpan = 9; gdFCCLine.widthHint = 260; gdFCCLine.heightHint = fccLine.getPreferredSize().y; gdFCCLine.grabExcessVerticalSpace = false; fccLine.setLayoutData(gdFCCLine); fccLine.addListener(this); org.eclipse.swt.widgets.Label lblOrientation = new org.eclipse.swt.widgets.Label(cmpGeneral, org.eclipse.swt.SWT.NONE); org.eclipse.swt.layout.GridData gdLBLOrientation = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL); gdLBLOrientation.widthHint = 90; gdLBLOrientation.grabExcessVerticalSpace = false; lblOrientation.setLayoutData(gdLBLOrientation); lblOrientation.setText(org.eclipse.birt.chart.ui.extension.i18n.Messages.getString("BaseAxisAttributeSheetImpl.Lbl.Orientation")); cmbOrientation = new org.eclipse.swt.widgets.Label(cmpGeneral, org.eclipse.swt.SWT.SINGLE); org.eclipse.swt.layout.GridData gdCMBOrientation = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_HORIZONTAL); gdCMBOrientation.horizontalSpan = 4; gdCMBOrientation.widthHint = 120; cmbOrientation.setLayoutData(gdCMBOrientation); cmbOrientation.setText(LiteralHelper.orientationSet.getDisplayNameByName(getAxisForProcessing().getOrientation().getName())); lblGridCount = new org.eclipse.swt.widgets.Label(cmpGeneral, org.eclipse.swt.SWT.NONE); org.eclipse.swt.layout.GridData gdLBLGridCount = new org.eclipse.swt.layout.GridData(); lblGridCount.setLayoutData(gdLBLGridCount); lblGridCount.setText(org.eclipse.birt.chart.ui.extension.i18n.Messages.getString("BaseAxisDataSheetImpl.Lbl.MinorGridCount")); iscGridCount = new org.eclipse.swt.widgets.Spinner(cmpGeneral, org.eclipse.swt.SWT.BORDER); { gd = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_HORIZONTAL); gd.horizontalSpan = 3; iscGridCount.setLayoutData(gd); iscGridCount.setMinimum(1); iscGridCount.setSelection(getAxisForProcessing().getScale().getMinorGridsPerUnit()); iscGridCount.addSelectionListener(this); } grpMajor = new org.eclipse.swt.widgets.Group(cmpContent, org.eclipse.swt.SWT.NONE); org.eclipse.swt.layout.GridData gdGRPMajor = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_HORIZONTAL); grpMajor.setLayoutData(gdGRPMajor); grpMajor.setText(org.eclipse.birt.chart.ui.extension.i18n.Messages.getString("BaseAxisAttributeSheetImpl.Lbl.MajorGrid")); grpMajor.setLayout(flMajor); gacMajor = new org.eclipse.birt.chart.ui.swt.composites.GridAttributesComposite(grpMajor, org.eclipse.swt.SWT.NONE, getContext(), axis.getMajorGrid(), axis.getOrientation().getValue()); gacMajor.addListener(this); grpMinor = new org.eclipse.swt.widgets.Group(cmpContent, org.eclipse.swt.SWT.NONE); { grpMinor.setLayout(new org.eclipse.swt.layout.FillLayout()); org.eclipse.swt.layout.GridData gdGRPMinor = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_HORIZONTAL); grpMinor.setLayoutData(gdGRPMinor); grpMinor.setText(org.eclipse.birt.chart.ui.extension.i18n.Messages.getString("BaseAxisAttributeSheetImpl.Lbl.MinorGrid")); } gacMinor = new org.eclipse.birt.chart.ui.swt.composites.GridAttributesComposite(grpMinor, org.eclipse.swt.SWT.NONE, getContext(), axis.getMinorGrid(), axis.getOrientation().getValue()); gacMinor.addListener(this); setStateOfMinorGrid(); return cmpContent; }
protected void prepareParameterBean(javax.servlet.http.HttpServletRequest request, org.eclipse.birt.report.service.api.IViewerReportService service, org.eclipse.birt.report.context.ScalarParameterBean parameterBean, java.util.Locale locale) throws org.eclipse.birt.report.service.api.ReportServiceException { org.eclipse.birt.report.context.ViewerAttributeBean attrBean = ((org.eclipse.birt.report.context.ViewerAttributeBean) (request.getAttribute(IBirtConstants.ATTRIBUTE_BEAN))); assert attrBean != null; org.eclipse.birt.report.service.api.InputOptions options = new org.eclipse.birt.report.service.api.InputOptions(); options.setOption(InputOptions.OPT_REQUEST, request); java.util.Collection selectionList = null; org.eclipse.birt.report.service.api.ParameterDefinition paramDef = parameterBean.getParameter(); if (((paramDef.getGroup()) != null) && (paramDef.getGroup().cascade())) { java.util.Map paramValues = attrBean.getParameters(); selectionList = getParameterSelectionListForCascadingGroup(attrBean.getReportDesignHandle(request), service, paramValues, options); parameterBean.setCascade(true); } else { selectionList = service.getParameterSelectionList(attrBean.getReportDesignHandle(request), options, parameter.getName()); parameterBean.setCascade(false); } parameterBean.setValueInList(false); if (selectionList != null) { org.eclipse.birt.report.model.api.ScalarParameterHandle parameterHandle = ((org.eclipse.birt.report.model.api.ScalarParameterHandle) (attrBean.findParameter(parameter.getName()))); for (java.util.Iterator iter = selectionList.iterator(); iter.hasNext();) { org.eclipse.birt.report.service.api.ParameterSelectionChoice selectionItem = ((org.eclipse.birt.report.service.api.ParameterSelectionChoice) (iter.next())); java.lang.String value = org.eclipse.birt.report.utility.DataUtil.getDisplayValue(selectionItem.getValue()); if (value == null) continue; java.lang.String label = selectionItem.getLabel(); if ((label == null) || ((label.length()) <= 0)) { label = org.eclipse.birt.report.model.api.util.ParameterValidationUtil.getDisplayValue(null, parameterHandle.getPattern(), selectionItem.getValue(), locale); } else if (DesignChoiceConstants.PARAM_VALUE_TYPE_DYNAMIC.equals(parameterHandle.getValueType())) { label = org.eclipse.birt.report.model.api.util.ParameterValidationUtil.getDisplayValue(null, parameterHandle.getPattern(), label, locale); } if (label != null) { parameterBean.getSelectionList().add(label); parameterBean.getSelectionTable().put(label, value); } if (value.equals(parameterBean.getValue())) { parameterBean.setValueInList(true); } } } }
public final boolean zoomOut() { if ((bStepFixed) || ((this.getTickCordinates().size()) < 3)) { return false; } if ((((java.lang.Number) (oStep)).doubleValue()) >= (java.lang.Double.MAX_VALUE)) { return false; } if (((iType) & (NUMERICAL)) == (NUMERICAL)) { if (((iType) & (LOGARITHMIC)) == (LOGARITHMIC)) { final double dStep = asDouble(oStep).doubleValue(); if (((java.lang.Math.log(dStep)) / (LOG_10)) >= 1) { oStep = new java.lang.Double((dStep * 10)); } else { final int n = org.eclipse.birt.chart.computation.withaxes.AutoScale.iaLogarithmicDeltas.length; for (int i = 0; i < n; i++) { if (((int) (dStep)) == (org.eclipse.birt.chart.computation.withaxes.AutoScale.iaLogarithmicDeltas[i])) { oStep = new java.lang.Double(org.eclipse.birt.chart.computation.withaxes.AutoScale.iaLogarithmicDeltas[(i + 1)]); return true; } } return false; } } else if (((iType) & (LINEAR)) == (LINEAR)) { double dStep = asDouble(oStep).doubleValue(); if (bIntegralZoom) { double dPower = (java.lang.Math.log(dStep)) / (LOG_10); if (dPower < 0) { dPower = java.lang.Math.floor(dPower); } else { dPower = org.eclipse.birt.chart.util.ChartUtil.alignWithInt(dPower); } dPower = java.lang.Math.pow(10, dPower); dStep /= dPower; dStep = java.lang.Math.round(dStep); int n = org.eclipse.birt.chart.computation.withaxes.AutoScale.iaLinearDeltas.length; int i = 0; for (; i < n; i++) { if (dStep == (org.eclipse.birt.chart.computation.withaxes.AutoScale.iaLinearDeltas[i])) { if (i < (n - 1)) { dStep = (org.eclipse.birt.chart.computation.withaxes.AutoScale.iaLinearDeltas[(i + 1)]) * dPower; } else { dPower *= 20; dStep = (org.eclipse.birt.chart.computation.withaxes.AutoScale.iaLinearDeltas[0]) * dPower; } break; } } if (i == n) { throw new java.lang.RuntimeException(new org.eclipse.birt.chart.exception.ChartException(org.eclipse.birt.chart.plugin.ChartEnginePlugin.ID, org.eclipse.birt.chart.exception.ChartException.COMPUTATION, "exception.step.zoom.out", new java.lang.Object[]{ new java.lang.Double((dStep * dPower)) }, org.eclipse.birt.chart.engine.i18n.Messages.getResourceBundle(rtc.getULocale()))); } if ((((java.lang.Number) (oStep)).doubleValue()) == dStep) { return false; } } else { dStep *= 2; } dStep = org.eclipse.birt.chart.util.ChartUtil.alignWithInt(dStep); oStep = new java.lang.Double(dStep); } } else if (((iType) & (DATE_TIME)) == (DATE_TIME)) { int[] ia = null; int iStep = asInteger(oStep); int iUnit = asInteger(oUnit); for (int icu = 0; icu < (org.eclipse.birt.chart.computation.withaxes.AutoScale.iaCalendarUnits.length); icu++) { if (iUnit == (org.eclipse.birt.chart.computation.withaxes.AutoScale.iaCalendarUnits[icu])) { ia = org.eclipse.birt.chart.computation.withaxes.AutoScale.iaCalendarDeltas[icu]; if (ia == null) { iStep++; oStep = new java.lang.Integer(iStep); } else { int i = 0; int n = ia.length; for (; i < n; i++) { if ((ia[i]) == iStep) { break; } } if (i == (n - 1)) { ia = org.eclipse.birt.chart.computation.withaxes.AutoScale.iaCalendarDeltas[(icu + 1)]; oUnit = new java.lang.Integer(org.eclipse.birt.chart.computation.withaxes.AutoScale.iaCalendarUnits[(icu + 1)]); if (ia == null) { oStep = new java.lang.Integer(1); return true; } i = -1; } oStep = new java.lang.Integer(ia[(i + 1)]); break; } } } } return true; }
public org.eclipse.datatools.connectivity.oda.IResultSetMetaData getMetaData() throws org.eclipse.datatools.connectivity.oda.OdaException { org.eclipse.birt.report.data.oda.jdbc.CallStatement.logger.logp(java.util.logging.Level.FINE, org.eclipse.birt.report.data.oda.jdbc.CallStatement.class.getName(), "getMetaData", "CallableStatement.getMetaData( )"); java.sql.ResultSetMetaData resultmd = null; try { assertNotNull(callStat); resultmd = callStat.getMetaData(); } catch (java.lang.NullPointerException e) { resultmd = null; } catch (java.sql.SQLException e) { } org.eclipse.datatools.connectivity.oda.IResultSetMetaData pstmtResultMetaData = null; if (resultmd != null) { pstmtResultMetaData = new org.eclipse.birt.report.data.oda.jdbc.ResultSetMetaData(resultmd); } else { org.eclipse.datatools.connectivity.oda.IResultSet mdRs = null; try { mdRs = executeQuery(); } catch (org.eclipse.datatools.connectivity.oda.OdaException e) { mdRs = null; } try { if (mdRs != null) pstmtResultMetaData = mdRs.getMetaData(); else pstmtResultMetaData = new org.eclipse.birt.report.data.oda.jdbc.SPResultSetMetaData(null); } catch (org.eclipse.datatools.connectivity.oda.OdaException e) { } } return pstmtResultMetaData; }
public boolean refreshURLs() throws org.eclipse.datatools.connectivity.oda.OdaException { if ((bundle) == null) return false; boolean foundNew = false; if ((driverClassPath) != null) { try { java.io.File driverClassFile = new java.io.File(driverClassPath); if (driverClassFile.exists()) { this.addURL(driverClassFile.toURI().toURL()); if (driverClassFile.isDirectory()) { java.io.File[] driverFiles = driverClassFile.listFiles(new java.io.FileFilter() { public boolean accept(java.io.File pathname) { if ((pathname.isFile()) && (org.eclipse.birt.report.data.oda.jdbc.OdaJdbcDriver.isDriverFile(pathname.getName()))) { return true; } return false; } }); for (int i = 0; i < (driverFiles.length); i++) { if (!(fileSet.contains(driverFiles[i].getName()))) { foundNew = true; fileSet.add(driverFiles[i].getName()); addURL(driverFiles[i].toURI().toURL()); org.eclipse.birt.report.data.oda.jdbc.JDBCDriverManager.logger.info(((("JDBCDriverManager: found JAR file " + (driverFiles[i].getName())) + ". URL=") + (driverFiles[i].toURI().toURL()))); } } } } } catch (java.net.MalformedURLException e) { throw new org.eclipse.datatools.connectivity.oda.OdaException(e); } } java.util.Enumeration files = bundle.getEntryPaths(OdaJdbcDriver.Constants.DRIVER_DIRECTORY); while ((files != null) && (files.hasMoreElements())) { java.lang.String fileName = ((java.lang.String) (files.nextElement())); if (org.eclipse.birt.report.data.oda.jdbc.OdaJdbcDriver.isDriverFile(fileName)) { if (!(fileSet.contains(fileName))) { foundNew = true; fileSet.add(fileName); java.net.URL fileURL = bundle.getEntry(fileName); addURL(fileURL); org.eclipse.birt.report.data.oda.jdbc.JDBCDriverManager.logger.info(((("JDBCDriverManager: found JAR file " + fileName) + ". URL=") + fileURL)); } } } return foundNew; }
private java.lang.String getSecondMenuText(int axisIndex, int seriesIndex, org.eclipse.birt.chart.model.component.Series series) { java.lang.StringBuffer sb = new java.lang.StringBuffer(); if ((org.eclipse.birt.chart.ui.util.ChartUIUtil.getOrthogonalAxisNumber(getChartModel())) > 2) { sb.append(org.eclipse.birt.chart.reportitem.ui.i18n.Messages.getString("DataDefinitionSelector.Label.Axis")); sb.append((axisIndex + 1)); sb.append(" - "); } else { if (axisIndex > 0) { sb.append(org.eclipse.birt.chart.reportitem.ui.i18n.Messages.getString("StandardChartDataSheet.Label.Overlay")); } } sb.append((((((org.eclipse.birt.chart.reportitem.ui.i18n.Messages.getString("StandardChartDataSheet.Label.Series")) + (seriesIndex + 1)) + " (") + (series.getDisplayName())) + ")")); return sb.toString(); }
private org.eclipse.birt.data.engine.api.IResultMetaData getRealMetaData(org.eclipse.birt.report.model.api.DataSetHandle dataSetHandle) throws org.eclipse.birt.core.exception.BirtException { org.eclipse.birt.data.engine.api.querydefn.QueryDefinition query = new org.eclipse.birt.data.engine.api.querydefn.QueryDefinition(); query.setDataSetName(dataSetHandle.getQualifiedName()); query.setMaxRows(1); boolean useResultHints = needsUseResultHint(dataSetHandle); return new org.eclipse.birt.report.data.adapter.impl.QueryExecutionHelper(dataEngine, modelAdaptor, moduleHandle, useResultHints).executeQuery(query).getResultMetaData(); }
public void updateDataSetHandle(org.eclipse.datatools.connectivity.oda.design.DataSetDesign setDesign, org.eclipse.birt.report.model.api.OdaDataSetHandle setHandle, boolean isSourceChanged) throws org.eclipse.birt.report.model.api.activity.SemanticException { if ((setDesign == null) || (setHandle == null)) return; org.eclipse.datatools.connectivity.oda.design.util.DesignUtil.validateObject(setDesign); org.eclipse.birt.report.model.api.CommandStack stack = setHandle.getModuleHandle().getCommandStack(); stack.startTrans(null); try { setHandle.getElement().setProperty(OdaDataSourceHandle.EXTENSION_ID_PROP, setDesign.getOdaExtensionDataSetId()); setHandle.setName(setDesign.getName()); setHandle.setDisplayName(setDesign.getDisplayName()); org.eclipse.datatools.connectivity.oda.design.Properties props = setDesign.getPublicProperties(); if (props != null) { org.eclipse.emf.common.util.EList propList = props.getProperties(); for (int i = 0; i < (propList.size()); i++) { org.eclipse.datatools.connectivity.oda.design.Property prop = ((org.eclipse.datatools.connectivity.oda.design.Property) (propList.get(i))); setHandle.setProperty(prop.getName(), prop.getValue()); } } props = setDesign.getPrivateProperties(); if (props != null) { org.eclipse.emf.common.util.EList propList = props.getProperties(); for (int i = 0; i < (propList.size()); i++) { org.eclipse.datatools.connectivity.oda.design.Property prop = ((org.eclipse.datatools.connectivity.oda.design.Property) (propList.get(i))); setHandle.setPrivateDriverProperty(prop.getName(), prop.getValue()); } } updateROMDataSetParamList(setHandle, new org.eclipse.birt.report.model.adapter.oda.DataSetParameterAdapter().newROMSetParams(setDesign.getParameters(), setDesign.getOdaExtensionDataSourceId(), setDesign.getOdaExtensionDataSetId(), setHandle)); org.eclipse.datatools.connectivity.oda.design.ResultSetDefinition resultDefn = setDesign.getPrimaryResultSet(); if (resultDefn == null) { org.eclipse.datatools.connectivity.oda.design.ResultSets resultSets = setDesign.getResultSets(); if ((resultSets != null) && (!(resultSets.getResultSetDefinitions().isEmpty()))) resultDefn = ((org.eclipse.datatools.connectivity.oda.design.ResultSetDefinition) (resultSets.getResultSetDefinitions().get(0))); } updateROMStructureList(setHandle.getPropertyHandle(OdaDataSetHandle.RESULT_SET_PROP), org.eclipse.birt.report.model.adapter.oda.ResultSetsAdapter.newROMResultSets(resultDefn, setDesign.getOdaExtensionDataSourceId(), setDesign.getOdaExtensionDataSetId())); setHandle.setResultSetName(setDesign.getPrimaryResultSetName()); setHandle.setQueryText(setDesign.getQueryText()); org.eclipse.datatools.connectivity.oda.design.DataSourceDesign sourceDesign = setDesign.getDataSourceDesign(); if (sourceDesign != null) { org.eclipse.birt.report.model.api.OdaDataSourceHandle sourceHandle = ((org.eclipse.birt.report.model.api.OdaDataSourceHandle) (setHandle.getDataSource())); if ((isSourceChanged && (sourceHandle != null)) && (!(sourceHandle.getModuleHandle().isReadOnly()))) { setHandle.setDataSource(sourceDesign.getName()); updateDataSourceHandle(sourceDesign, sourceHandle); } if ((((!isSourceChanged) && (sourceHandle != null)) && (!(sourceHandle.getModuleHandle().isReadOnly()))) && (!(new org.eclipse.emf.ecore.util.EcoreUtil.EqualityHelper().equals(createDataSourceDesign(sourceHandle), sourceDesign)))) { updateDataSourceHandle(sourceDesign, sourceHandle); } } else setHandle.setDataSource(null); } catch (org.eclipse.birt.report.model.api.activity.SemanticException e) { stack.rollback(); throw e; } stack.commit(); }
private void outputClientScript(org.eclipse.birt.report.engine.content.IReportContent report) { if (report != null) { org.eclipse.birt.report.engine.content.IContent root = report.getRoot(); java.util.Map<java.lang.String, java.lang.Object> extensions = root.getExtensions(); if (extensions != null) { java.lang.String clientScripts = ((java.lang.String) (extensions.get(org.eclipse.birt.report.engine.emitter.html.HTMLReportEmitter.EXTENSION_HTML_CLIENT_SCRIPTS))); if (clientScripts != null) { writer.openTag(HTMLTags.TAG_DIV); outputBookmark(root, HTMLTags.TAG_DIV); writer.attribute(HTMLTags.ATTR_STYLE, "display:none"); writer.closeTag(HTMLTags.TAG_DIV); outputClientScript(root); } } } }
private static java.lang.String getAdaptedExprText(org.eclipse.birt.report.data.adapter.api.IModelAdapter adapter, org.eclipse.birt.report.model.api.ComputedColumnHandle target) { org.eclipse.birt.report.model.api.ExpressionHandle eh = target.getExpressionProperty(org.eclipse.birt.report.model.api.elements.structures.ComputedColumn.EXPRESSION_MEMBER); if (eh == null) { return null; } org.eclipse.birt.report.model.api.Expression expr = ((org.eclipse.birt.report.model.api.Expression) (eh.getValue())); org.eclipse.birt.data.engine.api.querydefn.ScriptExpression scriptExpr = adapter.adaptExpression(expr); if (scriptExpr == null) return null; return scriptExpr.getText(); }
public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { boolean needUpdateModel = false; java.lang.Object oSelected = e.getSource(); if (oSelected.getClass().equals(org.eclipse.swt.widgets.Button.class)) { needUpdateModel = true; if (oSelected.equals(cbOrientation)) { if (cbOrientation.getSelection()) { orientation = org.eclipse.birt.chart.model.attribute.Orientation.HORIZONTAL_LITERAL; } else { orientation = org.eclipse.birt.chart.model.attribute.Orientation.VERTICAL_LITERAL; } createAndDisplayTypesSheet(sType); setDefaultSubtypeSelection(); populateSeriesTypesList(); org.eclipse.birt.chart.ui.util.ChartCacheManager.getInstance().cacheOrientation(sType, orientation); } else { org.eclipse.swt.widgets.Button btn = ((org.eclipse.swt.widgets.Button) (e.getSource())); if (btn.getSelection()) { if (((this.sSubType) != null) && (!(getSubtypeFromButton(btn).equals(sSubType)))) { int iTypeIndex = vSubTypeNames.indexOf(sSubType); if (iTypeIndex >= 0) { ((org.eclipse.swt.widgets.Button) (cmpTypeButtons.getChildren()[iTypeIndex])).setSelection(false); cmpTypeButtons.redraw(); } } org.eclipse.birt.chart.ui.util.ChartUIUtil.saveLabelPositionIntoCache(getSeriesDefinitionForProcessing()); sSubType = getSubtypeFromButton(btn); org.eclipse.birt.chart.ui.util.ChartCacheManager.getInstance().cacheSubtype(sType, sSubType); } else { if (((this.sSubType) != null) && (getSubtypeFromButton(btn).equals(sSubType))) { btn.setSelection(true); } } } } else if (oSelected.getClass().equals(org.eclipse.swt.widgets.Table.class)) { sType = ((java.lang.String) (((org.eclipse.swt.widgets.TableItem) (e.item)).getData())).trim(); if (!(sOldType.equals(sType))) { sOldType = sType; if (!(getDataServiceProvider().checkState(IDataServiceProvider.PART_CHART))) { if (((chartModel) != null) && ((chartModel) instanceof org.eclipse.birt.chart.model.ChartWithAxes)) { org.eclipse.birt.chart.model.attribute.Orientation lastOrientation = org.eclipse.birt.chart.ui.util.ChartCacheManager.getInstance().findOrientation(sType); if ((lastOrientation != null) && ((this.orientation) != lastOrientation)) { this.orientation = lastOrientation; this.rotateAxisTitle(((org.eclipse.birt.chart.model.ChartWithAxes) (chartModel))); } if (lastOrientation == null) { org.eclipse.birt.chart.model.attribute.Orientation currentOrientation = this.orientation; this.orientation = htTypes.get(sType).getDefaultOrientation(); if (currentOrientation != (this.orientation)) { this.rotateAxisTitle(((org.eclipse.birt.chart.model.ChartWithAxes) (chartModel))); } } } } if ((((chartModel) != null) && ((chartModel) instanceof org.eclipse.birt.chart.model.ChartWithAxes)) && ((org.eclipse.birt.chart.ui.util.ChartCacheManager.getInstance().findCategory(sType)) != null)) { boolean bCategory = org.eclipse.birt.chart.ui.util.ChartCacheManager.getInstance().findCategory(sType).booleanValue(); ((org.eclipse.birt.chart.model.component.Axis) (((org.eclipse.birt.chart.model.ChartWithAxes) (chartModel)).getAxes().get(0))).setCategoryAxis(bCategory); } sSubType = null; createAndDisplayTypesSheet(sType); setDefaultSubtypeSelection(); cmpMisc.layout(); needUpdateModel = true; } } else if (oSelected.equals(cbMultipleY)) { needUpdateModel = true; lblSeriesType.setEnabled(isTwoAxesEnabled()); org.eclipse.birt.chart.model.component.Axis xAxis = ((org.eclipse.birt.chart.model.component.Axis) (((org.eclipse.birt.chart.model.ChartWithAxes) (chartModel)).getAxes().get(0))); ((org.eclipse.birt.chart.ui.swt.wizard.ChartWizardContext) (getContext())).setMoreAxesSupported(((cbMultipleY.getSelectionIndex()) == 2)); if ((chartModel) instanceof org.eclipse.birt.chart.model.ChartWithoutAxes) { throw new java.lang.IllegalArgumentException(org.eclipse.birt.chart.ui.extension.i18n.Messages.getString("TaskSelectType.Exception.CannotSupportAxes")); } org.eclipse.birt.chart.ui.swt.wizard.ChartAdapter.beginIgnoreNotifications(); int iAxisNumber = org.eclipse.birt.chart.ui.util.ChartUIUtil.getOrthogonalAxisNumber(chartModel); if ((cbMultipleY.getSelectionIndex()) == 0) { org.eclipse.birt.chart.ui.util.ChartCacheManager.getInstance().cacheSeriesType(null); if (iAxisNumber > 1) { org.eclipse.birt.chart.ui.util.ChartUIUtil.removeLastAxes(((org.eclipse.birt.chart.model.ChartWithAxes) (chartModel)), (iAxisNumber - 1)); } } else if ((cbMultipleY.getSelectionIndex()) == 1) { if (iAxisNumber == 1) { org.eclipse.birt.chart.ui.util.ChartUIUtil.addAxis(((org.eclipse.birt.chart.model.ChartWithAxes) (chartModel))); } else if (iAxisNumber > 2) { org.eclipse.birt.chart.ui.util.ChartUIUtil.removeLastAxes(((org.eclipse.birt.chart.model.ChartWithAxes) (chartModel)), (iAxisNumber - 2)); } } org.eclipse.birt.chart.ui.swt.wizard.ChartAdapter.endIgnoreNotifications(); if ((xAxis.getAssociatedAxes().size()) > 1) { java.lang.String lastSeriesType = org.eclipse.birt.chart.ui.util.ChartCacheManager.getInstance().findSeriesType(); if (lastSeriesType != null) { cbSeriesType.setText(lastSeriesType); } else { org.eclipse.birt.chart.model.component.Axis overlayAxis = ((org.eclipse.birt.chart.model.component.Axis) (xAxis.getAssociatedAxes().get(1))); java.lang.String sDisplayName = ((org.eclipse.birt.chart.model.data.SeriesDefinition) (overlayAxis.getSeriesDefinitions().get(0))).getDesignTimeSeries().getDisplayName(); cbSeriesType.setText(sDisplayName); } changeOverlaySeriesType(); } cbSeriesType.setEnabled(isTwoAxesEnabled()); if (updateDimensionCombo(sType)) { createAndDisplayTypesSheet(sType); setDefaultSubtypeSelection(); } cmpMisc.layout(); } else if (oSelected.equals(cbDimension)) { java.lang.String newDimension = cbDimension.getItem(cbDimension.getSelectionIndex()); if (!(newDimension.equals(sDimension))) { sDimension = newDimension; org.eclipse.birt.chart.ui.util.ChartCacheManager.getInstance().cacheDimension(sType, sDimension); createAndDisplayTypesSheet(sType); setDefaultSubtypeSelection(); needUpdateModel = true; } } else if (oSelected.equals(cbSeriesType)) { needUpdateModel = true; changeOverlaySeriesType(); } if (needUpdateModel) { org.eclipse.birt.chart.ui.swt.wizard.ChartAdapter.notifyUpdateApply(); refreshChart(); if (oSelected.getClass().equals(org.eclipse.swt.widgets.Table.class)) { populateSeriesTypesList(); } else if (oSelected.equals(cbOrientation)) { if ((chartModel) instanceof org.eclipse.birt.chart.model.ChartWithAxes) { rotateAxisTitle(((org.eclipse.birt.chart.model.ChartWithAxes) (chartModel))); } } doPreview(); } }
public void endContainer(org.eclipse.birt.report.engine.content.IContainerContent container) { boolean flag = hasForeignParent(container); if (flag) { if (!(CSSConstants.CSS_INLINE_VALUE.equalsIgnoreCase(container.getComputedStyle().getDisplay()))) { adjustInline(); } if (!(styles.isEmpty())) { styles.pop(); } if (!(inlineStyles.isEmpty())) { inlineStyles.pop(); } if (!(CSSConstants.CSS_INLINE_VALUE.equalsIgnoreCase(container.getComputedStyle().getDisplay()))) { if ((inForeign) && (hasPInside)) { context.addContainer(false); hasPInside = false; } else if (!(inForeign)) { context.addContainer(true); } context.setLastIsTable(true); } } }
protected void readGroupField(java.io.DataInputStream in, org.eclipse.birt.report.engine.ir.GroupDesign group, short fieldType) throws java.io.IOException { switch (fieldType) { case FIELD_GROUP_LEVEL : int groupLevel = org.eclipse.birt.core.util.IOUtil.readInt(in); group.setGroupLevel(groupLevel); break; case FIELD_PAGE_BREAK_BEFORE : java.lang.String pageBreakBefore = org.eclipse.birt.core.util.IOUtil.readString(in); group.setPageBreakBefore(pageBreakBefore); break; case FIELD_PAGE_BREAK_AFTER : java.lang.String pageBreakAfter = org.eclipse.birt.core.util.IOUtil.readString(in); group.setPageBreakAfter(pageBreakAfter); break; case FIELD_HEADER_REPEAT : boolean hideDetail = org.eclipse.birt.core.util.IOUtil.readBool(in); group.setHideDetail(hideDetail); break; case FIELD_HIDE_DETAIL : boolean headerRepeat = org.eclipse.birt.core.util.IOUtil.readBool(in); group.setHeaderRepeat(headerRepeat); break; default : readReportItemField(in, group, fieldType); } }
@java.lang.Override protected final java.lang.Object getMinMax(org.eclipse.birt.chart.model.component.Axis ax, int iType) throws java.lang.IllegalArgumentException, org.eclipse.birt.chart.exception.ChartException { if ((((ax.getType().getValue()) == (org.eclipse.birt.chart.model.attribute.AxisType.LINEAR)) && (ax.isAligned())) && ((azHelper) != null)) { double[] minmax = azHelper.getCachedMinMax(ax); if (minmax != null) { return minmax; } } org.eclipse.birt.chart.model.ChartWithAxes cwa = getModel(); final org.eclipse.birt.chart.model.component.Series[] sea = ax.getRuntimeSeries(); final int iSeriesCount = sea.length; org.eclipse.birt.chart.model.component.Series se; org.eclipse.birt.chart.model.data.DataSet ds; java.lang.Object oV1; java.lang.Object oV2; java.lang.Object oMin = null; java.lang.Object oMax = null; org.eclipse.birt.chart.util.PluginSettings ps = org.eclipse.birt.chart.util.PluginSettings.instance(); org.eclipse.birt.chart.datafeed.IDataSetProcessor iDSP = null; boolean bAnyStacked = false; for (int i = 0; i < iSeriesCount; i++) { if (sea[i].isStacked()) { if (sea[i].canBeStacked()) { bAnyStacked = true; continue; } else { throw new java.lang.IllegalArgumentException(java.text.MessageFormat.format(org.eclipse.birt.chart.engine.i18n.Messages.getResourceBundle(rtc.getULocale()).getString("exception.unstackable.is.stacked"), new java.lang.Object[]{ sea[i] })); } } iDSP = ps.getDataSetProcessor(sea[i].getClass()); ds = sea[i].getDataSet(); if ((ds instanceof org.eclipse.birt.chart.model.data.NullDataSet) && ((rtc.getSharedScale()) != null)) { oMin = rtc.getSharedScale().getScaleContext().getMin(); oMax = rtc.getSharedScale().getScaleContext().getMax(); } else { oV1 = iDSP.getMinimum(ds); oV2 = iDSP.getMaximum(ds); if ((iType & (NUMERICAL)) == (NUMERICAL)) { try { if (oV1 != null) { if (oMin == null) { oMin = oV1; } else { final double dV1 = asDouble(oV1).doubleValue(); if ((java.lang.Math.min(asDouble(oMin).doubleValue(), dV1)) == dV1) { oMin = oV1; } } } if (oV2 != null) { if (oMax == null) { oMax = oV2; } else { final double dV2 = asDouble(oV2).doubleValue(); if ((java.lang.Math.max(asDouble(oMax).doubleValue(), dV2)) == dV2) { oMax = oV2; } } } } catch (java.lang.ClassCastException ex) { throw new org.eclipse.birt.chart.exception.ChartException(org.eclipse.birt.chart.plugin.ChartEnginePlugin.ID, org.eclipse.birt.chart.exception.ChartException.DATA_SET, "exception.datetime.data.numerical.axis", org.eclipse.birt.chart.engine.i18n.Messages.getResourceBundle(rtc.getULocale())); } } else if ((iType & (DATE_TIME)) == (DATE_TIME)) { try { if (oV1 != null) { if (oMin == null) { oMin = oV1; } else { final org.eclipse.birt.chart.util.CDateTime cdtV1 = asDateTime(oV1); final org.eclipse.birt.chart.util.CDateTime cdtMin = asDateTime(oMin); if (cdtV1.before(cdtMin)) { oMin = cdtV1; } } } if (oV2 != null) { if (oMax == null) { oMax = oV2; } else { final org.eclipse.birt.chart.util.CDateTime cdtV2 = asDateTime(oV2); final org.eclipse.birt.chart.util.CDateTime cdtMax = asDateTime(oMax); if (cdtV2.after(cdtMax)) { oMax = cdtV2; } } } } catch (java.lang.ClassCastException ex) { throw new org.eclipse.birt.chart.exception.ChartException(org.eclipse.birt.chart.plugin.ChartEnginePlugin.ID, org.eclipse.birt.chart.exception.ChartException.DATA_SET, "exception.numerical.data.datetime.axis", org.eclipse.birt.chart.engine.i18n.Messages.getResourceBundle(rtc.getULocale())); } } } } if (bAnyStacked || (ax.isPercent())) { if ((ax.getType().getValue()) == (org.eclipse.birt.chart.model.attribute.AxisType.DATE_TIME)) { throw new java.lang.IllegalArgumentException(org.eclipse.birt.chart.engine.i18n.Messages.getResourceBundle(rtc.getULocale()).getString("exception.stacked.datetime.axis.series")); } java.lang.Object oValue; int iSeriesPerGroup; double dPercentMax = 0; double dPercentMin = 0; double dAxisMin = java.lang.Double.MAX_VALUE; double dAxisMax = -(java.lang.Double.MAX_VALUE); java.util.List<org.eclipse.birt.chart.computation.withaxes.StackGroup> alSeriesGroupsPerAxis = ssl.getStackGroups(ax); java.util.ArrayList<org.eclipse.birt.chart.model.component.Series> alSeriesPerGroup; org.eclipse.birt.chart.computation.withaxes.StackGroup sg; org.eclipse.birt.chart.computation.DataSetIterator[] dsi = new org.eclipse.birt.chart.computation.DataSetIterator[ssl.getSeriesCount(ax)]; if (alSeriesGroupsPerAxis == null) { throw new org.eclipse.birt.chart.exception.ChartException(org.eclipse.birt.chart.plugin.ChartEnginePlugin.ID, org.eclipse.birt.chart.exception.ChartException.DATA_SET, "exception.internal.stack.series.setup", new java.lang.Object[]{ ax }, org.eclipse.birt.chart.engine.i18n.Messages.getResourceBundle(rtc.getULocale())); } logger.log(ILogger.INFORMATION, org.eclipse.birt.chart.engine.i18n.Messages.getString("info.processing.stacked.info", new java.lang.Object[]{ ax }, rtc.getULocale())); int iSeriesIndex; int iDataSetCount = ssl.getUnitCount(); for (int k = 0; k < iDataSetCount; k++) { iSeriesIndex = 0; for (int i = 0; i < (alSeriesGroupsPerAxis.size()); i++) { sg = alSeriesGroupsPerAxis.get(i); alSeriesPerGroup = sg.getSeries(); iSeriesPerGroup = alSeriesPerGroup.size(); if (iSeriesPerGroup > 0) { se = alSeriesPerGroup.get(0); ds = se.getDataSet(); if (ds instanceof org.eclipse.birt.chart.model.data.NullDataSet) { continue; } if ((dsi[iSeriesIndex]) == null) { dsi[iSeriesIndex] = new org.eclipse.birt.chart.computation.DataSetIterator(ds); dsi[iSeriesIndex].reverse(cwa.isReverseCategory()); if (((dsi[iSeriesIndex].getDataType()) & (org.eclipse.birt.chart.computation.IConstants.NUMERICAL)) != (org.eclipse.birt.chart.computation.IConstants.NUMERICAL)) { throw new org.eclipse.birt.chart.exception.ChartException(org.eclipse.birt.chart.plugin.ChartEnginePlugin.ID, org.eclipse.birt.chart.exception.ChartException.DATA_SET, "exception.percent.stacked.non.numerical", org.eclipse.birt.chart.engine.i18n.Messages.getResourceBundle(rtc.getULocale())); } } iDataSetCount = dsi[iSeriesIndex].size(); final org.eclipse.birt.chart.computation.withaxes.AxisSubUnit au = ssl.getSubUnit(sg, k); for (int j = 0; j < iSeriesPerGroup; j++) { se = alSeriesPerGroup.get(j); if (j > 0) { if ((dsi[iSeriesIndex]) == null) { ds = se.getDataSet(); dsi[iSeriesIndex] = new org.eclipse.birt.chart.computation.DataSetIterator(ds); dsi[iSeriesIndex].reverse(cwa.isReverseCategory()); if (((dsi[iSeriesIndex].getDataType()) & (org.eclipse.birt.chart.computation.IConstants.NUMERICAL)) != (org.eclipse.birt.chart.computation.IConstants.NUMERICAL)) { throw new org.eclipse.birt.chart.exception.ChartException(org.eclipse.birt.chart.plugin.ChartEnginePlugin.ID, org.eclipse.birt.chart.exception.ChartException.DATA_SET, "exception.percent.stacked.non.numerical", org.eclipse.birt.chart.engine.i18n.Messages.getResourceBundle(rtc.getULocale())); } } } oValue = dsi[iSeriesIndex].next(); if (oValue != null) { double dValue = ((java.lang.Double) (oValue)).doubleValue(); au.computeTotal(dValue); } iSeriesIndex++; } if (ax.isPercent()) { double dAbsTotal = (au.getPositiveTotal()) - (au.getNegativeTotal()); if (dAbsTotal != 0.0) { dPercentMax = java.lang.Math.max((((au.getTotalMax()) / dAbsTotal) * 100.0), dPercentMax); dPercentMin = java.lang.Math.min((((au.getTotalMin()) / dAbsTotal) * 100.0), dPercentMin); } } else { dAxisMax = java.lang.Math.max(au.getTotalMax(), dAxisMax); dAxisMin = java.lang.Math.min(au.getTotalMin(), dAxisMin); } } } } if (ax.isPercent()) { if (dPercentMax > 100) dPercentMax = 100; if (dPercentMin < (-100)) dPercentMin = -100; if ((dPercentMax == 0) && (dPercentMin == 0)) { dPercentMax = 100; } dAxisMin = dPercentMin; dAxisMax = dPercentMax; } if ((iType & (LOGARITHMIC)) == (LOGARITHMIC)) { dAxisMin = 1; } if (dAxisMin != (java.lang.Double.MAX_VALUE)) { oMin = new java.lang.Double(dAxisMin); } if (dAxisMax != (-(java.lang.Double.MAX_VALUE))) { oMax = new java.lang.Double(dAxisMax); } } if ((oMin == null) && (oMax == null)) { if (iType == (DATE_TIME)) { int year = com.ibm.icu.util.Calendar.getInstance().get(Calendar.YEAR); oMin = new org.eclipse.birt.chart.util.CDateTime(year, 1, 1); oMax = new org.eclipse.birt.chart.util.CDateTime(year, 12, 31); } else if ((iType & (NUMERICAL)) == (NUMERICAL)) { if ((iType & (PERCENT)) == (PERCENT)) { oMin = new java.lang.Double(0); oMax = new java.lang.Double(100); } else if ((iType & (LOGARITHMIC)) == (LOGARITHMIC)) { oMin = new java.lang.Double(1); oMax = new java.lang.Double(1000); } else { oMin = new java.lang.Double((-1)); oMax = new java.lang.Double(1); } } } if (iType == (DATE_TIME)) { try { org.eclipse.birt.chart.util.CDateTime dtMin = asDateTime(oMin); org.eclipse.birt.chart.util.CDateTime dtMax = asDateTime(oMax); return new com.ibm.icu.util.Calendar[]{ dtMin, dtMax }; } catch (java.lang.ClassCastException ex) { throw new org.eclipse.birt.chart.exception.ChartException(org.eclipse.birt.chart.plugin.ChartEnginePlugin.ID, org.eclipse.birt.chart.exception.ChartException.DATA_SET, "exception.numerical.data.datetime.axis", org.eclipse.birt.chart.engine.i18n.Messages.getResourceBundle(rtc.getULocale())); } } else if ((iType & (NUMERICAL)) == (NUMERICAL)) { try { double dMin = asDouble(oMin).doubleValue(); double dMax = asDouble(oMax).doubleValue(); if (dMin == dMax) { if (dMin > 0) { dMin = 0; } if (dMax < 0) { dMax = 0; } } return new double[]{ dMin, dMax }; } catch (java.lang.ClassCastException ex) { throw new org.eclipse.birt.chart.exception.ChartException(org.eclipse.birt.chart.plugin.ChartEnginePlugin.ID, org.eclipse.birt.chart.exception.ChartException.DATA_SET, "exception.datetime.data.numerical.axis", org.eclipse.birt.chart.engine.i18n.Messages.getResourceBundle(rtc.getULocale())); } } return null; }
public static org.eclipse.swt.graphics.Font getFont(java.lang.String family, int size, int style) { org.eclipse.swt.graphics.Font font = null; if (size < 0) { size = 0; } java.lang.String key = (family + (java.lang.Integer.toString(size))) + (java.lang.Integer.toString(style)); if (org.eclipse.jface.resource.JFaceResources.getFontRegistry().hasValueFor(key)) { font = org.eclipse.jface.resource.JFaceResources.getFontRegistry().get(key); } else { org.eclipse.jface.resource.JFaceResources.getFontRegistry().put(key, new org.eclipse.swt.graphics.FontData[]{ new org.eclipse.swt.graphics.FontData(family, size, style) }); font = org.eclipse.jface.resource.JFaceResources.getFontRegistry().get(key); } return font; }
private void initializeResultClass(org.eclipse.birt.data.engine.impl.DataEngineImpl dataEngine, java.util.Map appContext) throws org.eclipse.birt.data.engine.core.DataException { try { org.eclipse.birt.data.engine.api.IQueryResults left = getResultSetQuery(dataEngine, dataSet.getLeftDataSetDesignName(), appContext, dataSet.getJoinConditions(), true); org.eclipse.birt.data.engine.api.IResultMetaData leftMetaData = left.getResultMetaData(); org.eclipse.birt.data.engine.api.IQueryResults right = getResultSetQuery(dataEngine, dataSet.getRightDataSetDesignName(), appContext, dataSet.getJoinConditions(), false); org.eclipse.birt.data.engine.api.IResultMetaData rightMetaData = right.getResultMetaData(); org.eclipse.birt.data.engine.impl.jointdataset.JointResultMetadata meta = getJointResultMetadata(leftMetaData, rightMetaData); resultClass = meta.getResultClass(); } catch (org.eclipse.birt.core.exception.BirtException be) { throw org.eclipse.birt.data.engine.core.DataException.wrap(be); } }
private void refreshValues() { resultList.clear(); if (columnChooser.isEnabled()) { java.lang.String queryExpr = null; for (java.util.Iterator iter = columnList.iterator(); iter.hasNext();) { org.eclipse.birt.report.model.api.ResultSetColumnHandle column = ((org.eclipse.birt.report.model.api.ResultSetColumnHandle) (iter.next())); if (column.getColumnName().equals(columnChooser.getText())) { queryExpr = org.eclipse.birt.report.designer.util.DEUtil.getResultSetColumnExpression(column.getColumnName()); break; } } if (queryExpr == null) { return; } try { java.util.List modelValueList = org.eclipse.birt.report.designer.data.ui.util.SelectValueFetcher.getSelectValueList(queryExpr, getDataSetHandle(), false); if (modelValueList != null) { java.util.Iterator iter = modelValueList.iterator(); org.eclipse.birt.core.format.DateFormatter formatter = new org.eclipse.birt.core.format.DateFormatter(com.ibm.icu.util.ULocale.US); while (iter.hasNext()) { java.lang.Object candiateValue = iter.next(); if (candiateValue != null) { if (((expectedColumnDataType) == (org.eclipse.birt.core.data.DataType.SQL_DATE_TYPE)) && (candiateValue instanceof java.util.Date)) { formatter.applyPattern("yyyy-MM-dd"); result = formatter.format(((java.util.Date) (candiateValue))); } else if (((expectedColumnDataType) == (org.eclipse.birt.core.data.DataType.SQL_TIME_TYPE)) && (candiateValue instanceof java.util.Date)) { formatter.applyPattern("HH:mm:ss.SSS"); result = formatter.format(((java.util.Date) (candiateValue))); } else if (((expectedColumnDataType) == (org.eclipse.birt.core.data.DataType.DATE_TYPE)) && (candiateValue instanceof java.util.Date)) { formatter.applyPattern("yyyy-MM-dd HH:mm:ss.SSS"); result = formatter.format(((java.util.Date) (candiateValue))); } else { result = java.lang.String.valueOf(candiateValue); } } else { result = nullValue; hasNullValue = true; } if (!(resultList.contains(result))) { resultList.add(result); } } } filteValues(); } catch (org.eclipse.birt.core.exception.BirtException e) { org.eclipse.birt.report.designer.internal.ui.util.ExceptionHandler.handle(e); } } else { valueList.removeAll(); valueList.deselectAll(); updateButtons(); } }
protected void align() { if ((root) == null) { return; } assert (parent) instanceof org.eclipse.birt.report.engine.layout.pdf.PDFBlockStackingLM; java.lang.String align = ((org.eclipse.birt.report.engine.layout.pdf.PDFBlockStackingLM) (parent)).getTextAlign(); if ((CSSConstants.CSS_RIGHT_VALUE.equalsIgnoreCase(align)) || (CSSConstants.CSS_CENTER_VALUE.equalsIgnoreCase(align))) { int spacing = (root.getContentWidth()) - (getCurrentIP()); java.util.Iterator iter = root.getChildren(); while (iter.hasNext()) { org.eclipse.birt.report.engine.layout.area.impl.AbstractArea area = ((org.eclipse.birt.report.engine.layout.area.impl.AbstractArea) (iter.next())); if (CSSConstants.CSS_RIGHT_VALUE.equalsIgnoreCase(align)) { area.setAllocatedPosition((spacing + (area.getAllocatedX())), area.getAllocatedY()); } else if (CSSConstants.CSS_CENTER_VALUE.equalsIgnoreCase(align)) { area.setAllocatedPosition(((spacing / 2) + (area.getAllocatedX())), area.getAllocatedY()); } } } java.util.Iterator iter = root.getChildren(); int height = root.getHeight(); while (iter.hasNext()) { org.eclipse.birt.report.engine.layout.area.impl.AbstractArea child = ((org.eclipse.birt.report.engine.layout.area.impl.AbstractArea) (iter.next())); org.eclipse.birt.report.engine.content.IStyle childStyle = child.getStyle(); java.lang.String vAlign = childStyle.getVerticalAlign(); if (childStyle != null) { int spacing = height - (child.getAllocatedHeight()); assert spacing >= 0; if (CSSConstants.CSS_BOTTOM_VALUE.equalsIgnoreCase(vAlign)) { child.setPosition(child.getX(), (spacing + (child.getY()))); } else if (CSSConstants.CSS_MIDDLE_VALUE.equalsIgnoreCase(vAlign)) { child.setPosition(child.getX(), ((spacing / 2) + (child.getY()))); } else { int lineHeight = ((org.eclipse.birt.report.engine.layout.pdf.PDFBlockStackingLM) (parent)).getLineHeight(); if (lineHeight > 0) { child.setPosition(child.getX(), ((spacing / 2) + (child.getY()))); } } } } }
public org.eclipse.birt.chart.style.IStyle getStyle(org.eclipse.birt.chart.model.Chart model, org.eclipse.birt.chart.model.attribute.StyledComponent name) { org.eclipse.birt.chart.style.SimpleStyle ss = null; if (((cache) == null) || (!(useCache))) { org.eclipse.birt.report.model.api.StyleHandle style = handle.getPrivateStyle(); ss = new org.eclipse.birt.chart.style.SimpleStyle(); java.lang.String fname = style.getFontFamilyHandle().getStringValue(); fname = org.eclipse.birt.chart.reportitem.FontHelper.getFontFamily(fname); int fsize = org.eclipse.birt.chart.reportitem.ChartReportStyleProcessor.getFontSizeIntValue(handle); boolean fbold = (org.eclipse.birt.chart.reportitem.ChartReportStyleProcessor.getFontWeight(style.getFontWeight())) >= 700; boolean fitalic = DesignChoiceConstants.FONT_STYLE_ITALIC.equals(style.getFontStyle()); boolean funder = DesignChoiceConstants.TEXT_UNDERLINE_UNDERLINE.equals(style.getTextUnderline()); boolean fstrike = DesignChoiceConstants.TEXT_LINE_THROUGH_LINE_THROUGH.equals(style.getTextLineThrough()); if ((dstyle) != null) { org.w3c.dom.css.CSSValueList valueList = ((org.w3c.dom.css.CSSValueList) (dstyle.getProperty(StyleConstants.STYLE_FONT_FAMILY))); if ((valueList.getLength()) > 0) { fname = org.eclipse.birt.chart.reportitem.FontHelper.getFontFamily(valueList.item(0).getCssText()); } fsize = getSize(dstyle.getProperty(StyleConstants.STYLE_FONT_SIZE)); fbold = isBoldFont(dstyle.getProperty(StyleConstants.STYLE_FONT_WEIGHT)); fitalic = isItalicFont(dstyle.getFontStyle()); funder = CSSConstants.CSS_UNDERLINE_VALUE.equals(dstyle.getTextUnderline()); fstrike = CSSConstants.CSS_LINE_THROUGH_VALUE.equals(dstyle.getTextLineThrough()); } org.eclipse.birt.chart.model.attribute.HorizontalAlignment ha = org.eclipse.birt.chart.model.attribute.HorizontalAlignment.LEFT_LITERAL; if (DesignChoiceConstants.TEXT_ALIGN_CENTER.equals(style.getTextAlign())) { ha = org.eclipse.birt.chart.model.attribute.HorizontalAlignment.CENTER_LITERAL; } else if (DesignChoiceConstants.TEXT_ALIGN_RIGHT.equals(style.getTextAlign())) { ha = org.eclipse.birt.chart.model.attribute.HorizontalAlignment.RIGHT_LITERAL; } org.eclipse.birt.chart.model.attribute.VerticalAlignment va = org.eclipse.birt.chart.model.attribute.VerticalAlignment.TOP_LITERAL; if (DesignChoiceConstants.VERTICAL_ALIGN_MIDDLE.equals(style.getVerticalAlign())) { va = org.eclipse.birt.chart.model.attribute.VerticalAlignment.CENTER_LITERAL; } else if (DesignChoiceConstants.VERTICAL_ALIGN_BOTTOM.equals(style.getVerticalAlign())) { va = org.eclipse.birt.chart.model.attribute.VerticalAlignment.BOTTOM_LITERAL; } org.eclipse.birt.chart.model.attribute.TextAlignment ta = org.eclipse.birt.chart.model.attribute.impl.TextAlignmentImpl.create(); ta.setHorizontalAlignment(ha); ta.setVerticalAlignment(va); org.eclipse.birt.chart.model.attribute.FontDefinition fd = org.eclipse.birt.chart.model.attribute.impl.FontDefinitionImpl.create(fname, fsize, fbold, fitalic, funder, fstrike, true, 0, ta); ss.setFont(fd); org.eclipse.birt.report.model.api.ColorHandle ch = style.getColor(); if ((dstyle) != null) { ss.setColor(getColor(dstyle.getProperty(StyleConstants.STYLE_COLOR))); } else if ((ch != null) && ((ch.getRGB()) != (-1))) { int rgbValue = ch.getRGB(); org.eclipse.birt.chart.model.attribute.ColorDefinition cd = org.eclipse.birt.chart.model.attribute.impl.ColorDefinitionImpl.create(((rgbValue >> 16) & 255), ((rgbValue >> 8) & 255), (rgbValue & 255)); ss.setColor(cd); } else { ss.setColor(org.eclipse.birt.chart.model.attribute.impl.ColorDefinitionImpl.BLACK()); } ch = style.getBackgroundColor(); if ((dstyle) != null) { ss.setBackgroundColor(getColor(dstyle.getProperty(StyleConstants.STYLE_BACKGROUND_COLOR))); } else if ((ch != null) && ((ch.getRGB()) != (-1))) { int rgbValue = ch.getRGB(); org.eclipse.birt.chart.model.attribute.ColorDefinition cd = org.eclipse.birt.chart.model.attribute.impl.ColorDefinitionImpl.create(((rgbValue >> 16) & 255), ((rgbValue >> 8) & 255), (rgbValue & 255)); ss.setBackgroundColor(cd); } if (((style.getBackgroundImage()) != null) && ((style.getBackgroundImage().length()) > 0)) { java.lang.String urlString = style.getBackgroundImage(); try { new java.net.URL(urlString); ss.setBackgroundImage(org.eclipse.birt.chart.model.attribute.impl.ImageImpl.create(urlString)); } catch (java.lang.Exception _) { urlString = "file:///" + urlString; try { new java.net.URL(urlString); ss.setBackgroundImage(org.eclipse.birt.chart.model.attribute.impl.ImageImpl.create(urlString)); } catch (java.lang.Exception __) { org.eclipse.birt.chart.reportitem.ChartReportStyleProcessor.logger.log(_); } } } double pt = org.eclipse.birt.chart.reportitem.ChartReportStyleProcessor.convertToPixel(style.getPaddingTop()); double pb = org.eclipse.birt.chart.reportitem.ChartReportStyleProcessor.convertToPixel(style.getPaddingBottom()); double pl = org.eclipse.birt.chart.reportitem.ChartReportStyleProcessor.convertToPixel(style.getPaddingLeft()); double pr = org.eclipse.birt.chart.reportitem.ChartReportStyleProcessor.convertToPixel(style.getPaddingRight()); ss.setPadding(org.eclipse.birt.chart.model.attribute.impl.InsetsImpl.create(pt, pl, pb, pr)); if (useCache) { cache = ss; } } if (useCache) { ss = cache.copy(); } return ss; }
static org.eclipse.birt.core.framework.URLClassLoader.Loader createLoader(java.net.URL url) { try { java.lang.String file = url.getFile(); if ((file != null) && (file.endsWith("/"))) { if ("file".equals(url.getProtocol())) { return new org.eclipse.birt.core.framework.URLClassLoader.FileLoader(url); } return new org.eclipse.birt.core.framework.URLClassLoader.UrlLoader(url); } return new org.eclipse.birt.core.framework.URLClassLoader.JarLoader(url); } catch (java.io.IOException ex) { org.eclipse.birt.core.framework.URLClassLoader.logger.log(java.util.logging.Level.SEVERE, ("can't load the class from " + url), ex); return null; } }
private boolean processCommonEvent(org.eclipse.birt.chart.device.swing.ShapedAction sa, org.eclipse.birt.chart.device.util.HTMLTag tag, org.eclipse.birt.chart.model.attribute.TriggerCondition condition, org.eclipse.birt.chart.device.util.HTMLAttribute htmlAttr) { org.eclipse.birt.chart.model.data.Action ac = sa.getActionForCondition(condition); if (checkSupportedAction(ac)) { switch (ac.getType().getValue()) { case org.eclipse.birt.chart.model.attribute.ActionType.URL_REDIRECT : org.eclipse.birt.chart.model.attribute.URLValue uv = ((org.eclipse.birt.chart.model.attribute.URLValue) (ac.getValue())); if (condition == (org.eclipse.birt.chart.model.attribute.TriggerCondition.ONCLICK_LITERAL)) { tag.addAttribute(HTMLAttribute.HREF, eval2HTML(uv.getBaseUrl())); tag.addAttribute(HTMLAttribute.TARGET, eval2HTML(uv.getTarget())); } else { tag.addAttribute(HTMLAttribute.HREF, org.eclipse.birt.chart.device.image.JavaxImageIOWriter.NO_OP_JAVASCRIPT); java.lang.String value = getJsURLRedirect(uv); if (htmlAttr.equals(HTMLAttribute.ONFOCUS)) { value = "this.blur();" + value; } tag.addAttribute(htmlAttr, value); } return true; case org.eclipse.birt.chart.model.attribute.ActionType.SHOW_TOOLTIP : return false; case org.eclipse.birt.chart.model.attribute.ActionType.INVOKE_SCRIPT : tag.addAttribute(HTMLAttribute.HREF, org.eclipse.birt.chart.device.image.JavaxImageIOWriter.NO_OP_JAVASCRIPT); final org.eclipse.birt.chart.computation.DataPointHints dph; if (StructureType.SERIES_DATA_POINT.equals(sa.getSource().getType())) { dph = ((org.eclipse.birt.chart.computation.DataPointHints) (sa.getSource().getSource())); } else { dph = null; } java.lang.String callbackFunction = (getJSMethodName(condition, sa)) + "("; callbackFunction = org.eclipse.birt.chart.device.util.ScriptUtil.script(callbackFunction, dph); callbackFunction += ");"; tag.addAttribute(htmlAttr, eval2JS(callbackFunction, true)); return true; } } return false; }
public static boolean copyHandles(java.lang.Object transferData, java.lang.Object targetObj) { targetObj = org.eclipse.birt.report.designer.util.DNDUtil.unwrapToModel(targetObj); if ((org.eclipse.birt.report.designer.util.DNDUtil.getColumnHandle(transferData)) != null) { return org.eclipse.birt.report.designer.util.DNDUtil.copyColumn(org.eclipse.birt.report.designer.util.DNDUtil.getColumnHandle(transferData), targetObj, false); } int canContain = org.eclipse.birt.report.designer.util.DNDUtil.handleValidateTargetCanContain(targetObj, transferData, true); int position = org.eclipse.birt.report.designer.util.DNDUtil.calculateNextPosition(targetObj, canContain); if (position > (-1)) { java.lang.Object temp = targetObj; targetObj = org.eclipse.birt.report.designer.util.DNDUtil.getDesignElementHandle(targetObj).getContainerSlotHandle(); if (targetObj == null) { targetObj = org.eclipse.birt.report.designer.util.DNDUtil.getDesignElementHandle(temp).getContainerPropertyHandle(); if (targetObj == null) targetObj = org.eclipse.birt.report.designer.util.DNDUtil.getDesignElementHandle(temp).getContainer(); } } return org.eclipse.birt.report.designer.util.DNDUtil.copyHandles(transferData, targetObj, position); }
protected void prepareResponse() throws java.rmi.RemoteException, org.eclipse.birt.report.service.api.ReportServiceException { org.eclipse.birt.report.soapengine.api.TOC toc = new org.eclipse.birt.report.soapengine.api.TOC(); java.util.List children = __node.getChildren(); if ((children != null) && ((children.size()) > 0)) { org.eclipse.birt.report.soapengine.api.TOC[] childTOCNodes = new org.eclipse.birt.report.soapengine.api.TOC[children.size()]; for (int i = 0; i < (children.size()); i++) { org.eclipse.birt.report.service.api.ToC child = ((org.eclipse.birt.report.service.api.ToC) (children.get(i))); childTOCNodes[i] = new org.eclipse.birt.report.soapengine.api.TOC(); childTOCNodes[i].setId(child.getID()); childTOCNodes[i].setDisplayName(org.eclipse.birt.report.utility.ParameterAccessor.htmlEncode(child.getDisplayName())); childTOCNodes[i].setBookmark(child.getBookmark()); childTOCNodes[i].setStyle(child.getStyle()); childTOCNodes[i].setIsLeaf(new java.lang.Boolean((((child.getChildren()) == null) || ((child.getChildren().size()) <= 0)))); } toc.setChild(childTOCNodes); } org.eclipse.birt.report.soapengine.api.Data data = new org.eclipse.birt.report.soapengine.api.Data(); data.setTOC(toc); org.eclipse.birt.report.soapengine.api.UpdateData updateData = new org.eclipse.birt.report.soapengine.api.UpdateData(); updateData.setTarget("birtToc"); updateData.setData(data); org.eclipse.birt.report.soapengine.api.Update update = new org.eclipse.birt.report.soapengine.api.Update(); update.setUpdateData(updateData); response.setUpdate(new org.eclipse.birt.report.soapengine.api.Update[]{ update }); }
private org.eclipse.birt.data.engine.olap.api.query.IDimensionDefinition getTargetDimension() throws org.eclipse.birt.data.engine.core.DataException { if (isAggregationFilter()) { org.eclipse.birt.data.engine.olap.api.query.ILevelDefinition targetLevel = cubeFilter.getTargetLevel(); if (targetLevel == null) { throw new org.eclipse.birt.data.engine.core.DataException((("Referenced level:" + (targetLevel.getName())) + " does not exist.")); } org.eclipse.birt.data.engine.olap.api.query.IDimensionDefinition dimDefn = targetLevel.getHierarchy().getDimension(); if (dimDefn == null) { throw new org.eclipse.birt.data.engine.core.DataException((("Referenced dimension:" + (this.dimName)) + " does not exist.")); } return dimDefn; } else { org.eclipse.birt.data.engine.olap.api.query.IEdgeDefinition columnEdge = this.queryDefn.getEdge(ICubeQueryDefinition.COLUMN_EDGE); org.eclipse.birt.data.engine.olap.api.query.IEdgeDefinition rowEdge = this.queryDefn.getEdge(ICubeQueryDefinition.ROW_EDGE); java.util.List dims = new java.util.ArrayList(); if (columnEdge != null) dims.addAll(columnEdge.getDimensions()); if (rowEdge != null) dims.addAll(rowEdge.getDimensions()); for (int i = 0; i < (dims.size()); i++) { org.eclipse.birt.data.engine.olap.api.query.IDimensionDefinition dimDefn = ((org.eclipse.birt.data.engine.olap.api.query.IDimensionDefinition) (dims.get(i))); if (dimDefn.getName().equals(this.dimName)) { return dimDefn; } } return null; } }
public void calculateTopStyles() { if ((styles.size()) > 0) { org.eclipse.birt.report.engine.emitter.excel.StyleEntry style = ((org.eclipse.birt.report.engine.emitter.excel.StyleEntry) (styles.peek())); java.lang.Boolean value = ((java.lang.Boolean) (style2top.get(style))); if ((value != null) && (value.booleanValue())) { org.eclipse.birt.report.engine.emitter.excel.Span span = ((org.eclipse.birt.report.engine.emitter.excel.Span) (spans.peek())); int start = ((java.lang.Integer) (pos.peek())).intValue(); applyContainerTopBorder(span, start); style2top.put(style, java.lang.Boolean.FALSE); } } }
public void update(org.eclipse.birt.report.engine.nLayout.area.impl.AbstractArea area) throws org.eclipse.birt.core.exception.BirtException { int aWidth = area.getAllocatedWidth(); if ((aWidth + (currentIP)) > (maxAvaWidth)) { removeChild(area); endLine(); children.add(area); } area.setAllocatedPosition(currentIP, currentBP); currentIP += aWidth; if ((currentIP) > (maxAvaWidth)) { setWidth(currentIP); } int height = area.getAllocatedHeight(); if (height > (getHeight())) { this.height = height; } }
protected void prepareResponse() throws java.rmi.RemoteException, org.eclipse.birt.report.service.api.ReportServiceException { org.eclipse.birt.report.soapengine.api.TOC toc = new org.eclipse.birt.report.soapengine.api.TOC(); java.util.List children = __node.getChildren(); if ((children != null) && ((children.size()) > 0)) { org.eclipse.birt.report.soapengine.api.TOC[] childTOCNodes = new org.eclipse.birt.report.soapengine.api.TOC[children.size()]; for (int i = 0; i < (children.size()); i++) { org.eclipse.birt.report.service.api.ToC child = ((org.eclipse.birt.report.service.api.ToC) (children.get(i))); childTOCNodes[i] = new org.eclipse.birt.report.soapengine.api.TOC(); childTOCNodes[i].setId(child.getID()); childTOCNodes[i].setDisplayName(org.eclipse.birt.report.utility.ParameterAccessor.htmlEncode(child.getDisplayName())); childTOCNodes[i].setBookmark(child.getBookmark()); childTOCNodes[i].setIsLeaf(new java.lang.Boolean((((child.getChildren()) == null) || ((child.getChildren().size()) <= 0)))); } toc.setChild(childTOCNodes); } org.eclipse.birt.report.soapengine.api.Data data = new org.eclipse.birt.report.soapengine.api.Data(); data.setTOC(toc); org.eclipse.birt.report.soapengine.api.UpdateData updateData = new org.eclipse.birt.report.soapengine.api.UpdateData(); updateData.setTarget("birtToc"); updateData.setData(data); org.eclipse.birt.report.soapengine.api.Update update = new org.eclipse.birt.report.soapengine.api.Update(); update.setUpdateData(updateData); response.setUpdate(new org.eclipse.birt.report.soapengine.api.Update[]{ update }); }
public void run() { java.lang.Object selection = getSelection(); if (selection instanceof org.eclipse.jface.viewers.StructuredSelection) { selection = ((org.eclipse.jface.viewers.StructuredSelection) (selection)).getFirstElement(); } if (selection instanceof org.eclipse.birt.report.model.api.OdaDataSourceHandle) { org.eclipse.birt.report.designer.data.ui.datasource.ExportDataSourceDialog dialog = new org.eclipse.birt.report.designer.data.ui.datasource.ExportDataSourceDialog(org.eclipse.ui.PlatformUI.getWorkbench().getDisplay().getActiveShell(), org.eclipse.birt.report.designer.nls.Messages.getString("datasource.exprotToCP.title"), ((org.eclipse.birt.report.model.api.DataSourceHandle) (selection))); if ((dialog.open()) == (org.eclipse.jface.dialogs.Dialog.OK)) { try { org.eclipse.datatools.connectivity.oda.design.DesignSessionRequest designSessionRequest = org.eclipse.birt.report.designer.data.ui.util.DTPUtil.getInstance().createDesignSessionRequest(((org.eclipse.birt.report.model.api.OdaDataSourceHandle) (selection))); org.eclipse.datatools.connectivity.oda.design.ui.designsession.DataSourceDesignSession.convertDesignToLinkedProfile(designSessionRequest, ((java.lang.Boolean) (dialog.getResult())).booleanValue(), org.eclipse.ui.PlatformUI.getWorkbench().getDisplay().getActiveShell()).getResponseDataSourceDesign(); } catch (java.lang.Exception ex) { org.eclipse.birt.report.designer.internal.ui.util.ExceptionHandler.handle(ex); } } } }
protected org.eclipse.swt.widgets.Control createContents(org.eclipse.swt.widgets.Composite parent) { java.lang.String title = org.eclipse.birt.report.designer.nls.Messages.getFormattedString("dataset.edit", new java.lang.String[]{ getHandle().getName() }); getShell().setText(title); org.eclipse.swt.widgets.Control control = super.createContents(parent); setPageHelpContent(control); return control; }
private void populateOutputColums() throws org.eclipse.birt.core.exception.BirtException { java.lang.ClassLoader oldContextLoader = java.lang.Thread.currentThread().getContextClassLoader(); java.lang.ClassLoader parentLoader = oldContextLoader; if (parentLoader == null) parentLoader = this.getClass().getClassLoader(); java.lang.ClassLoader newContextLoader = org.eclipse.birt.report.designer.data.ui.util.DataSetProvider.getCustomScriptClassLoader(parentLoader, ((org.eclipse.birt.report.designer.data.ui.dataset.DataSetEditor) (getContainer())).getHandle().getModuleHandle()); org.eclipse.birt.report.model.api.ModuleHandle handle = ((org.eclipse.birt.report.designer.data.ui.dataset.DataSetEditor) (getContainer())).getHandle().getModuleHandle(); org.eclipse.birt.report.data.adapter.api.DataSessionContext context; if (handle instanceof org.eclipse.birt.report.model.api.ReportDesignHandle) { java.util.Map dataSetMap = new java.util.HashMap(); java.util.Map dataSourceMap = new java.util.HashMap(); try { org.eclipse.birt.report.engine.api.EngineConfig ec = new org.eclipse.birt.report.engine.api.EngineConfig(); ec.getAppContext().put(EngineConstants.APPCONTEXT_CLASSLOADER_KEY, newContextLoader); org.eclipse.birt.report.engine.api.impl.ReportEngine engine = ((org.eclipse.birt.report.engine.api.impl.ReportEngine) (new org.eclipse.birt.report.engine.api.impl.ReportEngineFactory().createReportEngine(ec))); org.eclipse.birt.report.designer.data.ui.dataset.DataSetUIUtil.clearPropertyBindingMap(((org.eclipse.birt.report.designer.data.ui.dataset.DataSetEditor) (getContainer())).getHandle(), dataSetMap, dataSourceMap); org.eclipse.birt.report.designer.data.ui.util.DummyEngineTask engineTask = new org.eclipse.birt.report.designer.data.ui.util.DummyEngineTask(engine, new org.eclipse.birt.report.engine.api.impl.ReportEngineHelper(engine).openReportDesign(((org.eclipse.birt.report.model.api.ReportDesignHandle) (handle))), handle); org.eclipse.birt.report.data.adapter.api.DataRequestSession session = engineTask.getDataSession(); engineTask.run(); org.eclipse.birt.report.designer.data.ui.dataset.DataSetViewData[] viewDatas = org.eclipse.birt.report.designer.data.ui.util.DataSetProvider.getCurrentInstance().populateAllOutputColumns(((org.eclipse.birt.report.designer.data.ui.dataset.DataSetEditor) (getContainer())).getHandle(), session); if (viewDatas == null) { viewDatas = ((org.eclipse.birt.report.designer.data.ui.dataset.DataSetEditor) (getContainer())).getCurrentItemModel(false, false); } if ((((org.eclipse.birt.report.designer.data.ui.dataset.DataSetEditor) (getContainer())).getHandle()) instanceof org.eclipse.birt.report.model.api.JointDataSetHandle) { org.eclipse.birt.report.model.api.PropertyHandle properyHandle = ((org.eclipse.birt.report.designer.data.ui.dataset.DataSetEditor) (getContainer())).getHandle().getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP); if (properyHandle != null) { for (int i = 0; i < (viewDatas.length); i++) { for (java.util.Iterator columns = properyHandle.iterator(); columns.hasNext();) { org.eclipse.birt.report.model.api.ColumnHintHandle column = ((org.eclipse.birt.report.model.api.ColumnHintHandle) (columns.next())); if (viewDatas[i].getName().equals(column.getColumnName())) { viewDatas[i].setAlias(column.getAlias()); break; } } } } } viewer.getViewer().setInput(viewDatas); engineTask.close(); engine.destroy(); } finally { org.eclipse.birt.report.designer.data.ui.dataset.DataSetUIUtil.resetPropertyBinding(((org.eclipse.birt.report.designer.data.ui.dataset.DataSetEditor) (getContainer())).getHandle(), dataSetMap, dataSourceMap); } } else { context = new org.eclipse.birt.report.data.adapter.api.DataSessionContext(org.eclipse.birt.report.data.adapter.api.DataSessionContext.MODE_DIRECT_PRESENTATION, ((org.eclipse.birt.report.designer.data.ui.dataset.DataSetEditor) (getContainer())).getHandle().getModuleHandle()); org.eclipse.birt.report.data.adapter.api.DataRequestSession session = org.eclipse.birt.report.data.adapter.api.DataRequestSession.newSession(context); org.eclipse.birt.report.designer.data.ui.dataset.DataSetViewData[] viewDatas = org.eclipse.birt.report.designer.data.ui.util.DataSetProvider.getCurrentInstance().populateAllOutputColumns(((org.eclipse.birt.report.designer.data.ui.dataset.DataSetEditor) (getContainer())).getHandle(), session); if (viewDatas == null) { viewDatas = ((org.eclipse.birt.report.designer.data.ui.dataset.DataSetEditor) (getContainer())).getCurrentItemModel(false, false); } viewer.getViewer().setInput(viewDatas); session.shutdown(); } java.lang.Thread.currentThread().setContextClassLoader(oldContextLoader); }
public java.lang.Object get(java.lang.String arg0, org.mozilla.javascript.Scriptable scope) { try { if (ScriptConstants.OUTER_RESULT_KEYWORD.equals(arg0)) return cursor.getObject(ScriptConstants.OUTER_RESULT_KEYWORD); return cursor.getObject(arg0); } catch (javax.olap.OLAPException e) { throw org.mozilla.javascript.Context.reportRuntimeError(e.getLocalizedMessage()); } }
private void doDelete() { int index = fListHyperlinks.getSelectionIndex(); if (index < 0) { return; } org.eclipse.birt.chart.model.attribute.URLValue value = fURLValuesMap.remove(fListHyperlinks.getItem(index)); fMultiURLValues.getURLValues().remove(value); fListHyperlinks.remove(index); int last = (fListHyperlinks.getItemCount()) - 1; fListHyperlinks.select((index < last ? index : last)); }
public void setGroupName(java.lang.String groupName) { if ((this.expr) != null) { this.expr.setGroupName(groupName); } if ((this.op1) != null) { this.op1.setGroupName(groupName); } if ((this.op2) != null) { this.op2.setGroupName(groupName); } super.setGroupName(groupName); }
org.eclipse.birt.data.engine.api.IOdaDataSourceDesign newOdaDataSource(org.eclipse.birt.report.model.api.OdaDataSourceHandle source) throws org.eclipse.birt.core.exception.BirtException { org.eclipse.birt.data.engine.api.querydefn.OdaDataSourceDesign dteSource = new org.eclipse.birt.data.engine.api.querydefn.OdaDataSourceDesign(source.getQualifiedName()); org.eclipse.birt.data.engine.api.script.IBaseDataSourceEventHandler eventHandler = new org.eclipse.birt.report.engine.script.internal.DataSourceScriptExecutor(source, context); dteSource.setEventHandler(eventHandler); adaptBaseDataSource(source, dteSource); java.lang.String driverName = source.getExtensionID(); if ((driverName == null) || ((driverName.length()) == 0)) { throw new org.eclipse.birt.report.engine.api.EngineException(("Missing extenion id in data source definition, " + (source.getName()))); } dteSource.setExtensionID(driverName); java.util.Map staticProps = getExtensionProperties(source, source.getExtensionPropertyDefinitionList()); if ((staticProps != null) && (!(staticProps.isEmpty()))) { java.util.Iterator propNamesItr = staticProps.keySet().iterator(); while (propNamesItr.hasNext()) { java.lang.String propName = ((java.lang.String) (propNamesItr.next())); assert propName != null; java.lang.String propValue; java.lang.String bindingExpr = source.getPropertyBinding(propName); if (((needPropertyBinding()) && (bindingExpr != null)) && ((bindingExpr.length()) > 0)) { propValue = evaluatePropertyBindingExpr(bindingExpr); } else { propValue = ((java.lang.String) (staticProps.get(propName))); } if (((this.context) != null) && (((this.context.getDataEngine()) instanceof org.eclipse.birt.report.engine.data.dte.DataGenerationEngine) || ((this.context.getDataEngine()) instanceof org.eclipse.birt.report.engine.data.dte.DteDataEngine))) { if ((("org.eclipse.birt.report.data.oda.xml".equals(driverName)) && ((propName.equals("FILELIST")) || (propName.equals(" ")))) && (propValue != null)) { java.lang.Object url = source.getModuleHandle().findResource(((java.lang.String) (propValue)), IResourceLocator.LIBRARY); propValue = (url == null) ? propValue : url.toString(); } } dteSource.addPublicProperty(propName, propValue); } } java.util.Iterator elmtIter = source.privateDriverPropertiesIterator(); if (elmtIter != null) { while (elmtIter.hasNext()) { org.eclipse.birt.report.model.api.ExtendedPropertyHandle modelProp = ((org.eclipse.birt.report.model.api.ExtendedPropertyHandle) (elmtIter.next())); dteSource.addPrivateProperty(modelProp.getName(), modelProp.getValue()); } } addPropertyConfigurationId(dteSource); return dteSource; }
public int findInParameter(java.lang.String paramName) throws org.eclipse.birt.data.engine.core.DataException { java.lang.String methodName = "findInParameter"; org.eclipse.birt.data.engine.odaconsumer.PreparedStatement.sm_logger.entering(org.eclipse.birt.data.engine.odaconsumer.PreparedStatement.sm_className, methodName, paramName); try { int ret = getStatement().findInParameter(paramName); org.eclipse.birt.data.engine.odaconsumer.PreparedStatement.sm_logger.exiting(org.eclipse.birt.data.engine.odaconsumer.PreparedStatement.sm_className, methodName, ret); return ret; } catch (org.eclipse.datatools.connectivity.oda.OdaException ex) { org.eclipse.birt.data.engine.odaconsumer.PreparedStatement.sm_logger.logp(java.util.logging.Level.SEVERE, org.eclipse.birt.data.engine.odaconsumer.PreparedStatement.sm_className, methodName, "Cannot find input parameter.", ex); throw new org.eclipse.birt.data.engine.core.DataException(org.eclipse.birt.data.engine.i18n.ResourceConstants.CANNOT_FIND_IN_PARAMETER, ex, new java.lang.Object[]{ paramName }); } catch (java.lang.UnsupportedOperationException ex) { org.eclipse.birt.data.engine.odaconsumer.PreparedStatement.sm_logger.logp(java.util.logging.Level.SEVERE, org.eclipse.birt.data.engine.odaconsumer.PreparedStatement.sm_className, methodName, "Cannot find input parameter.", ex); throw new org.eclipse.birt.data.engine.core.DataException(org.eclipse.birt.data.engine.i18n.ResourceConstants.CANNOT_FIND_IN_PARAMETER, ex, new java.lang.Object[]{ paramName }); } }
protected org.eclipse.birt.report.engine.extension.IBaseResultSet doExecuteCube(org.eclipse.birt.report.engine.extension.IBaseResultSet parentResultSet, org.eclipse.birt.data.engine.olap.api.query.ICubeQueryDefinition query, java.lang.Object queryOwner, boolean useCache) throws org.eclipse.birt.core.exception.BirtException { if (useCache) { java.lang.Object obj = cachedQueryToResults.get(query); java.lang.String rsetId = (obj == null) ? null : java.lang.String.valueOf(obj); query.setQueryResultsID(rsetId); } else { query.setQueryResultsID(null); } org.eclipse.birt.data.engine.api.IBasePreparedQuery pQuery = ((org.eclipse.birt.data.engine.api.IBasePreparedQuery) (queryMap.get(query))); if (pQuery == null) { throw new org.eclipse.birt.report.engine.api.EngineException(org.eclipse.birt.report.engine.i18n.MessageConstants.PREPARED_QUERY_NOT_FOUND_ERROR, query); } org.mozilla.javascript.Scriptable scope = context.getSharedScope(); org.eclipse.birt.report.engine.extension.IBaseResultSet resultSet; org.eclipse.birt.data.engine.olap.api.ICubeQueryResults dteResults; if (parentResultSet == null) { dteResults = ((org.eclipse.birt.data.engine.olap.api.ICubeQueryResults) (dteSession.execute(pQuery, null, scope))); resultSet = new org.eclipse.birt.report.engine.data.dte.CubeResultSet(this, context, query, dteResults); } else { dteResults = ((org.eclipse.birt.data.engine.olap.api.ICubeQueryResults) (dteSession.execute(pQuery, parentResultSet.getQueryResults(), scope))); resultSet = new org.eclipse.birt.report.engine.data.dte.CubeResultSet(this, context, parentResultSet, query, ((org.eclipse.birt.data.engine.olap.api.ICubeQueryResults) (dteResults))); } if (query.cacheQueryResults()) { cachedQueryToResults.put(query, dteResults.getID()); } return resultSet; }
public RDAggrValueHolder(java.io.DataInputStream valueStream) throws java.io.IOException, org.eclipse.birt.data.engine.core.DataException { this.bindingName = org.eclipse.birt.core.util.IOUtil.readString(valueStream); populateRunningAggrInfo(valueStream); this.groupLevel = org.eclipse.birt.core.util.IOUtil.readInt(valueStream); this.size = org.eclipse.birt.core.util.IOUtil.readInt(valueStream); this.valueStream = valueStream; if ((size) > 0) { this.currentValue = org.eclipse.birt.core.util.IOUtil.readObject(valueStream); } }
public void setText(java.lang.String newText) { if (newText == null) { newText = ""; } label.setText(newText); }
protected void closeLayout(org.eclipse.birt.report.engine.layout.pdf.emitter.ContainerContext currentContext, int index, boolean finished) { if ((currentContext.root) != null) { boolean added = false; if ((unresolvedRow) != null) { org.eclipse.birt.report.engine.layout.pdf.emitter.TableLayout.TableContext tc = ((org.eclipse.birt.report.engine.layout.pdf.emitter.TableLayout.TableContext) (tbl.contextList.get(index))); tc.layout.setUnresolvedRow(unresolvedRow); } tbl.updateRow(((org.eclipse.birt.report.engine.layout.area.impl.RowArea) (currentContext.root)), specifiedHeight, index); if (finished || (!(isRowEmpty(currentContext)))) { tbl.addRow(((org.eclipse.birt.report.engine.layout.area.impl.RowArea) (currentContext.root)), index); parent.addToRoot(currentContext.root, index); added = true; } if ((!finished) && ((unresolvedRow) == null)) { org.eclipse.birt.report.engine.layout.pdf.emitter.TableLayout.TableContext tc = ((org.eclipse.birt.report.engine.layout.pdf.emitter.TableLayout.TableContext) (tbl.contextList.get(index))); if (added) { unresolvedRow = tc.layout.getUnresolvedRow(); } else { unresolvedRow = tc.layout.getUnresolvedRow(((org.eclipse.birt.report.engine.layout.area.impl.RowArea) (currentContext.root))); } } } }
public static boolean hasColumnRow(java.lang.String name, org.eclipse.birt.data.engine.impl.ExprManager exprManager) { if (name == null) return false; if (name.equals(org.eclipse.birt.data.engine.expression.ExpressionCompilerUtil.ROWNUM)) return true; org.eclipse.birt.data.engine.api.IScriptExpression expr = ((org.eclipse.birt.data.engine.api.IScriptExpression) (exprManager.getExpr(name))); if (expr == null) { if (name.matches(".*\\Q__rownum\\E.*")) return org.eclipse.birt.data.engine.expression.ExpressionCompilerUtil.compile(name, exprManager); else return false; } return org.eclipse.birt.data.engine.expression.ExpressionCompilerUtil.compile(expr.getText(), exprManager); }
protected void execute(org.eclipse.birt.report.engine.content.IContent content, org.eclipse.birt.report.engine.extension.IReportItemExecutor executor) throws org.eclipse.birt.core.exception.BirtException { assert executor != null; while (executor.hasNextChild()) { org.eclipse.birt.report.engine.extension.IReportItemExecutor childExecutor = executor.getNextChild(); if (childExecutor != null) { org.eclipse.birt.report.engine.content.IContent childContent = childExecutor.execute(); if (childContent != null) { if (!(content.getChildren().contains(childContent))) { content.getChildren().add(childContent); } } execute(childContent, childExecutor); if (childContent != null) { if (!(executor.hasNextChild())) { childContent.setLastChild(true); } else { childContent.setLastChild(false); } } childExecutor.close(); } } }
void exportDesign(org.eclipse.birt.report.model.api.ReportDesignHandle designToExport, boolean canOverride, boolean genDefaultName) throws org.eclipse.birt.report.model.api.activity.SemanticException { org.eclipse.birt.report.model.util.ModelUtil.duplicateProperties(designToExport, targetLibraryHandle, false); int slotCount = designToExport.getDefn().getSlotCount(); for (int i = 0; i < slotCount; i++) { org.eclipse.birt.report.model.api.SlotHandle sourceSlotHandle = designToExport.getSlot(i); java.util.Iterator iter = sourceSlotHandle.iterator(); while (iter.hasNext()) { org.eclipse.birt.report.model.api.DesignElementHandle contentHandle = ((org.eclipse.birt.report.model.api.DesignElementHandle) (iter.next())); if (org.eclipse.birt.report.model.api.util.StringUtil.isBlank(contentHandle.getName())) { if (!genDefaultName) { java.lang.String typeName = contentHandle.getDefn().getDisplayName(); java.lang.String location = contentHandle.getElement().getIdentifier(); throw new java.lang.IllegalArgumentException(((((("The element [type=\"" + typeName) + "\",") + "location=\"") + location) + "\"] must have name defined.")); } targetLibraryHandle.getModule().makeUniqueName(contentHandle.getElement()); } exportElement(contentHandle, canOverride); } } }
public org.eclipse.birt.report.model.api.ModuleHandle init(java.lang.String fileName, java.io.InputStream input, java.util.Map properties) throws org.eclipse.birt.report.model.api.DesignFileException { org.eclipse.birt.report.model.api.ModuleHandle handle = null; if (properties == null) { handle = getSessionHandle().openModule(fileName, input); } else { handle = getSessionHandle().openModule(fileName, input, new org.eclipse.birt.report.model.api.ModuleOption(properties)); } postInit(handle, properties); handle.getCommandStack().flush(); return handle; }
protected void createRoot() { if (!(isFirst)) { int startColumn = cellContent.getColumn(); int endColumn = startColumn + (cellContent.getColSpan()); columnWidth = tableLM.getCellWidth(startColumn, endColumn); } root = org.eclipse.birt.report.engine.layout.area.impl.AreaFactory.createCellArea(cellContent); tableLM.resolveBorderConflict(((org.eclipse.birt.report.engine.layout.area.impl.CellArea) (root))); root.setWidth(columnWidth); if (!(isFirst)) { org.eclipse.birt.report.engine.content.IStyle areaStyle = root.getStyle(); areaStyle.setProperty(IStyle.STYLE_BORDER_TOP_WIDTH, IStyle.NUMBER_0); areaStyle.setProperty(IStyle.STYLE_PADDING_TOP, IStyle.NUMBER_0); areaStyle.setProperty(IStyle.STYLE_MARGIN_TOP, IStyle.NUMBER_0); } }
public ColumnInfo(int index, java.lang.String name, java.lang.String type, java.lang.String path, java.lang.String originalPath) throws org.eclipse.datatools.connectivity.oda.OdaException { this.index = index; this.name = name; this.type = type; if (!(org.eclipse.birt.report.data.oda.xml.DataTypes.isValidType(type))) throw new org.eclipse.datatools.connectivity.oda.OdaException("The given data type name is invalid."); this.path = fixTrailingAttr(buildPath(path)); this.originalPath = originalPath; }
public boolean onBroughtToTop(org.eclipse.birt.report.designer.ui.editors.IReportEditorPage page) { org.eclipse.gef.GraphicalViewer view = getGraphicalViewer(); if (view != null) { org.eclipse.birt.report.designer.internal.ui.util.UIUtil.resetViewSelection(view, true); } return true; }
public final void setMessage(java.lang.String message, int messageType) { if ((messageArea) != null) { if (messageType != (org.eclipse.jface.dialogs.IMessageProvider.NONE)) { titleImage.setVisible(false); } else { titleImage.setVisible(true); } if ((message == null) && (messageType == (org.eclipse.jface.dialogs.IMessageProvider.ERROR))) { messageArea.updateText("", messageType); } else { messageArea.updateText(message, messageType); } } }
protected void drawTextAt(org.eclipse.birt.report.engine.layout.area.ITextArea text, int textX, int textY) { org.eclipse.birt.report.engine.content.IStyle style = text.getStyle(); assert style != null; float fontSize = text.getFontInfo().getFontSize(); int x = textX + (getScaledValue(((int) (fontSize * (hTextSpace))))); int y = textY + (getScaledValue(((int) (fontSize * (vTextSpace))))); org.eclipse.birt.report.engine.layout.pdf.font.FontInfo fontInfo = new org.eclipse.birt.report.engine.layout.pdf.font.FontInfo(text.getFontInfo()); fontInfo.setFontSize(((fontInfo.getFontSize()) * (scale))); int characterSpacing = getScaledValue(org.eclipse.birt.report.engine.layout.pdf.util.PropertyUtil.getDimensionValue(style.getProperty(StyleConstants.STYLE_LETTER_SPACING))); int wordSpacing = getScaledValue(org.eclipse.birt.report.engine.layout.pdf.util.PropertyUtil.getDimensionValue(style.getProperty(StyleConstants.STYLE_WORD_SPACING))); java.awt.Color color = org.eclipse.birt.report.engine.layout.pdf.util.PropertyUtil.getColor(style.getProperty(StyleConstants.STYLE_COLOR)); org.w3c.dom.css.CSSValue align = text.getStyle().getProperty(StyleConstants.STYLE_TEXT_ALIGN); boolean linethrough = IStyle.LINE_THROUGH_VALUE.equals(style.getProperty(IStyle.STYLE_TEXT_LINETHROUGH)); boolean overline = IStyle.OVERLINE_VALUE.equals(style.getProperty(IStyle.STYLE_TEXT_OVERLINE)); boolean underline = IStyle.UNDERLINE_VALUE.equals(style.getProperty(IStyle.STYLE_TEXT_UNDERLINE)); int width = getScaledValue(text.getWidth()); int height = getScaledValue(text.getHeight()); pageGraphic.clipSave(); int clipWidth = width; if ((fontInfo.getSimulation()) && ((com.lowagie.text.Font.ITALIC) == (fontInfo.getFontStyle()))) { clipWidth = ((int) (width + (height * (org.eclipse.birt.report.engine.layout.emitter.EmitterUtil.getItalicHorizontalCoefficient())))); } pageGraphic.clip(textX, textY, clipWidth, height); org.eclipse.birt.report.engine.layout.TextStyle textStyle = new org.eclipse.birt.report.engine.layout.TextStyle(fontInfo, characterSpacing, wordSpacing, color, linethrough, overline, underline, align); drawTextAt(text, x, y, width, height, textStyle); pageGraphic.clipRestore(); }
private void setParameters(org.eclipse.birt.report.model.api.JointDataSetHandle dsHandle) throws org.eclipse.birt.report.model.api.activity.SemanticException { java.util.List<org.eclipse.birt.report.model.api.elements.structures.DataSetParameter> params = null; org.eclipse.birt.report.model.api.PropertyHandle dsParameterHandle = dsHandle.getPropertyHandle(IDataSetModel.PARAMETERS_PROP); if (leftDataSetName.equals(rightDataSetName)) { params = org.eclipse.birt.report.designer.data.ui.dataset.JointDataSetPage.getDataSetParameters(((leftDataSetName) + "1"), leftHandle.getPropertyHandle(IDataSetModel.PARAMETERS_PROP), ((rightDataSetName) + "2"), rightHandle.getPropertyHandle(IDataSetModel.PARAMETERS_PROP)); } else { params = org.eclipse.birt.report.designer.data.ui.dataset.JointDataSetPage.getDataSetParameters(leftDataSetName, leftHandle.getPropertyHandle(IDataSetModel.PARAMETERS_PROP), rightDataSetName, rightHandle.getPropertyHandle(IDataSetModel.PARAMETERS_PROP)); } if ((params.size()) == 0) { dsParameterHandle.clearValue(); } else { java.util.Iterator iter = dsParameterHandle.iterator(); int i = 0; while ((iter.hasNext()) && (i < (params.size()))) { org.eclipse.birt.report.model.api.DataSetParameterHandle parameterHandle = ((org.eclipse.birt.report.model.api.DataSetParameterHandle) (iter.next())); org.eclipse.birt.report.designer.data.ui.dataset.JointDataSetPage.updateDataSetParameterHandle(parameterHandle, params.get(i)); i++; } if ((dsParameterHandle.getListValue()) != null) while (i < (dsParameterHandle.getListValue().size())) { dsParameterHandle.removeItem(((dsParameterHandle.getListValue().size()) - 1)); } for (; i < (params.size()); i++) { dsParameterHandle.addItem(params.get(i)); } } }
private void bindSeriesQuery(org.eclipse.birt.chart.model.data.Query query, org.eclipse.birt.data.engine.olap.api.query.ICubeQueryDefinition cubeQuery, org.eclipse.birt.report.model.api.olap.CubeHandle cube) throws org.eclipse.birt.core.exception.BirtException { java.lang.String expr = query.getDefinition(); if ((expr != null) && ((expr.length()) > 0)) { boolean bBindingExp = org.eclipse.birt.chart.reportitem.ChartXTabUtil.isBinding(expr, true); if (bBindingExp && (!(org.eclipse.birt.chart.reportitem.ChartXTabUtil.isBinding(expr, false)))) { expr = org.eclipse.birt.core.data.ExpressionUtil.createJSDataExpression(org.eclipse.birt.chart.reportitem.ChartXTabUtil.getBindingName(expr, true)); } org.eclipse.birt.data.engine.api.querydefn.Binding colBinding = ((org.eclipse.birt.data.engine.api.querydefn.Binding) (registeredBindings.get(expr))); if (bBindingExp || (colBinding == null)) { java.lang.String bindingName = null; if (colBinding == null) { bindingName = org.eclipse.birt.report.model.api.StructureFactory.newComputedColumn(handle, expr.replaceAll("\"", "")).getName(); colBinding = new org.eclipse.birt.data.engine.api.querydefn.Binding(bindingName); colBinding.setDataType(org.eclipse.birt.core.data.DataType.ANY_TYPE); colBinding.setExpression(new org.eclipse.birt.data.engine.api.querydefn.ScriptExpression(expr)); registeredBindings.put(expr, colBinding); registeredQueries.put(bindingName, expr); } else { bindingName = colBinding.getBindingName(); expr = ((java.lang.String) (registeredQueries.get(bindingName))); } cubeQuery.addBinding(colBinding); java.lang.String measure = org.eclipse.birt.chart.reportitem.ChartCubeQueryHelper.getMeasure(expr); if (measure != null) { org.eclipse.birt.data.engine.olap.api.query.IMeasureDefinition mDef = cubeQuery.createMeasure(measure); java.lang.String aggFun = org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.adaptModelAggregationType(cube.getMeasure(measure).getFunction()); mDef.setAggrFunction(aggFun); } else if (org.eclipse.birt.chart.reportitem.ChartCubeQueryHelper.isReferenceToDimLevel(expr)) { java.lang.String[] levels = org.eclipse.birt.chart.reportitem.ChartCubeQueryHelper.getTargetLevel(expr); java.lang.String dimensionName = levels[0]; final int edgeType = getEdgeType(dimensionName); org.eclipse.birt.data.engine.olap.api.query.IEdgeDefinition edge = cubeQuery.getEdge(edgeType); org.eclipse.birt.data.engine.olap.api.query.IHierarchyDefinition hieDef = null; if (edge == null) { edge = cubeQuery.createEdge(edgeType); org.eclipse.birt.data.engine.olap.api.query.IDimensionDefinition dimDef = edge.createDimension(dimensionName); hieDef = dimDef.createHierarchy(cube.getDimension(dimDef.getName()).getDefaultHierarchy().getQualifiedName()); } else { hieDef = ((org.eclipse.birt.data.engine.olap.api.query.IHierarchyDefinition) (((org.eclipse.birt.data.engine.olap.api.query.IDimensionDefinition) (edge.getDimensions().get(0))).getHierarchy().get(0))); } org.eclipse.birt.data.engine.olap.api.query.ILevelDefinition levelDef = hieDef.createLevel(levels[1]); registeredLevels.put(bindingName, levelDef); org.eclipse.birt.report.model.api.olap.LevelHandle levelHandle = cube.getDimension(levelDef.getHierarchy().getDimension().getName()).getDefaultHierarchy().getLevel(levelDef.getName()); registeredLevelHandles.put(levelHandle, levelDef); } } if (!bBindingExp) { java.lang.String newExpr = org.eclipse.birt.core.data.ExpressionUtil.createJSDataExpression(colBinding.getBindingName()); query.setDefinition(newExpr); } } }
public void mouseUp(org.eclipse.swt.events.MouseEvent e) { if (bDragging) { updateScrollbars(); return; } this.bColumnSelection = false; if ((e.button) != 3) { this.iSelectedRow = ((e.y) / (org.eclipse.birt.chart.ui.swt.CustomPreviewTable.ROW_HEIGHT)) + (iVScroll); for (int i = 0, iTmp = 0; i < (columnWidths.size()); i++) { iTmp = getAdjustedLeftEdgeForColumn(i); if (iTmp > (e.x)) { iColumnIndex = i - 1; break; } iColumnIndex = i; } ((org.eclipse.swt.widgets.Button) (btnHeaders.elementAt(iColumnIndex))).setFocus(); redraw(); } else { iColumnIndex = -1; for (int i = 0, iTmp = 0; i < (columnWidths.size()); i++) { iTmp = getAdjustedLeftEdgeForColumn(i); if (iTmp > (e.x)) { iColumnIndex = i - 1; break; } iColumnIndex = i; } org.eclipse.swt.widgets.Button currentButton = ((org.eclipse.swt.widgets.Button) (btnHeaders.elementAt(iColumnIndex))); currentButton.setFocus(); fireMenuEvent(currentButton); } }
protected java.lang.String encodeText(java.lang.String text) { return org.eclipse.birt.report.engine.emitter.excel.ExcelXmlWriter.XLSEncodeUtil.encodeXLSText(text); }
public SortAdapter(org.eclipse.birt.report.data.adapter.api.IModelAdapter adapter, org.eclipse.birt.report.model.api.SortKeyHandle keyHandle) throws org.eclipse.birt.report.data.adapter.api.AdapterException { org.eclipse.birt.report.model.api.ExpressionHandle handle = keyHandle.getExpressionProperty(SortKey.KEY_MEMBER); if (handle == null) return; org.eclipse.birt.data.engine.api.IScriptExpression expr = adapter.adaptExpression(((org.eclipse.birt.report.model.api.Expression) (handle.getValue()))); this.setExpression(expr); this.setSortDirection(org.eclipse.birt.report.data.adapter.internal.adapter.SortAdapter.sortDirectionFromModel(keyHandle.getDirection())); this.setSortStrength(keyHandle.getStrength()); if ((keyHandle.getLocale()) != null) this.setSortLocale(keyHandle.getLocale()); }
public void close() throws java.io.IOException { if ((diskIndex) != null) diskIndex.close(); }
public org.eclipse.swt.widgets.Shell createPopupContainer() { if (((shellPopup) != null) && (!(shellPopup.isDisposed()))) { shellPopup.dispose(); } if (((shellPopup) == null) || (shellPopup.isDisposed())) { int shellStyle = (org.eclipse.swt.SWT.DIALOG_TRIM) | (org.eclipse.swt.SWT.RESIZE); if ((org.eclipse.swt.SWT.getPlatform().indexOf("win32")) < 0) { shellStyle |= org.eclipse.swt.SWT.APPLICATION_MODAL; } shellPopup = new org.eclipse.swt.widgets.Shell(getShell(), shellStyle); shellPopup.setLayout(new org.eclipse.swt.layout.FillLayout()); } return shellPopup; }
private void placeComponents() { org.eclipse.swt.layout.GridLayout glContent = new org.eclipse.swt.layout.GridLayout(2, false); glContent.marginHeight = 2; glContent.marginWidth = 2; glContent.horizontalSpacing = 0; this.setLayout(glContent); org.eclipse.swt.widgets.Composite cmpMarker = new org.eclipse.swt.widgets.Composite(this, org.eclipse.swt.SWT.NONE); { cmpMarker.setLayout(new org.eclipse.swt.layout.GridLayout()); cmpMarker.setLayoutData(new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_BOTH)); } org.eclipse.swt.widgets.Group grpMarker = new org.eclipse.swt.widgets.Group(cmpMarker, org.eclipse.swt.SWT.NONE); grpMarker.setText(org.eclipse.birt.chart.ui.extension.i18n.Messages.getString("GanttSeriesAttributeComposite.Lbl.Marker")); grpMarker.setLayout(new org.eclipse.swt.layout.GridLayout(2, false)); grpMarker.setLayoutData(new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_BOTH)); org.eclipse.swt.widgets.Label lblStart = new org.eclipse.swt.widgets.Label(grpMarker, org.eclipse.swt.SWT.NONE); lblStart.setText(org.eclipse.birt.chart.ui.extension.i18n.Messages.getString("GanttSeriesAttributeComposite.Lbl.Start")); new org.eclipse.birt.chart.ui.swt.composites.MarkerEditorComposite(grpMarker, createMarker(series.getStartMarker())); org.eclipse.swt.widgets.Label lblEnd = new org.eclipse.swt.widgets.Label(grpMarker, org.eclipse.swt.SWT.NONE); lblEnd.setText(org.eclipse.birt.chart.ui.extension.i18n.Messages.getString("GanttSeriesAttributeComposite.Lbl.End")); new org.eclipse.birt.chart.ui.swt.composites.MarkerEditorComposite(grpMarker, createMarker(series.getEndMarker())); org.eclipse.swt.widgets.Composite cmpGroup = new org.eclipse.swt.widgets.Composite(this, org.eclipse.swt.SWT.NONE); { org.eclipse.swt.layout.GridLayout glGroup = new org.eclipse.swt.layout.GridLayout(2, true); glGroup.marginWidth = 0; glGroup.horizontalSpacing = 6; cmpGroup.setLayout(glGroup); cmpGroup.setLayoutData(new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_BOTH)); } grpLine = new org.eclipse.swt.widgets.Group(cmpGroup, org.eclipse.swt.SWT.NONE); org.eclipse.swt.layout.GridData gdGRPLine = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_BOTH); grpLine.setLayout(new org.eclipse.swt.layout.GridLayout()); grpLine.setLayoutData(gdGRPLine); grpLine.setText(org.eclipse.birt.chart.ui.extension.i18n.Messages.getString("GanttSeriesAttributeComposite.Lbl.Bars")); gliacGantt = new org.eclipse.birt.chart.ui.swt.composites.GanttLineAttributesComposite(grpLine, context, org.eclipse.swt.SWT.NONE, series.getConnectionLine(), true, true, true); gliacGantt.setLayoutData(new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_HORIZONTAL)); gliacGantt.addListener(this); btnPalette = new org.eclipse.swt.widgets.Button(grpLine, org.eclipse.swt.SWT.CHECK); { org.eclipse.swt.layout.GridData gd = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_HORIZONTAL); gd.horizontalIndent = 4; btnPalette.setLayoutData(gd); btnPalette.setText(org.eclipse.birt.chart.ui.extension.i18n.Messages.getString("GanttSeriesAttributeComposite.Lbl.LinePalette")); btnPalette.setSelection(series.isPaletteLineColor()); btnPalette.addSelectionListener(this); } grpOutline = new org.eclipse.swt.widgets.Group(cmpGroup, org.eclipse.swt.SWT.NONE); org.eclipse.swt.layout.GridData gdGRPOutline = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_BOTH); grpOutline.setLayout(new org.eclipse.swt.layout.FillLayout()); grpOutline.setLayoutData(gdGRPOutline); grpOutline.setText(org.eclipse.birt.chart.ui.extension.i18n.Messages.getString("GanttSeriesAttributeComposite.Lbl.Outline")); oliacGantt = new org.eclipse.birt.chart.ui.swt.composites.LineAttributesComposite(grpOutline, org.eclipse.swt.SWT.NONE, context, series.getOutline(), true, true, true, true, true); oliacGantt.addListener(this); }
private boolean isEqualParameterHint(org.eclipse.birt.data.engine.odaconsumer.ParameterHint pb, org.eclipse.birt.data.engine.odaconsumer.ParameterHint pb2) { return (((((pb.getPosition()) == (pb2.getPosition())) && (isEqualString(pb.getName(), pb2.getName()))) && (isEqualString(pb.getDefaultInputValue(), pb2.getDefaultInputValue()))) && (isEqualString(pb.getDataType().toString(), pb2.getDataType().toString()))) && ((pb.getNativeDataType()) == (pb2.getNativeDataType())); }
private void resolveBorder(org.eclipse.birt.report.engine.layout.pdf.BorderConflictResolver.BorderStyleInfo[] styles, org.eclipse.birt.report.engine.layout.pdf.BorderConflictResolver.BorderStyleInfo usedStyle) { org.w3c.dom.css.CSSValue[] borderStyles = new org.w3c.dom.css.CSSValue[styles.length]; for (int i = 0; i < (styles.length); i++) { borderStyles[i] = styles[i].getBorderStyle(); if (IStyle.HIDDEN_VALUE.equals(borderStyles[i])) { usedStyle.setBorderStyle(IStyle.HIDDEN_VALUE); return; } } int maxWidth = 0; int maxCount = 1; int maxFirstIndex = 0; int[] ws = new int[styles.length]; org.w3c.dom.css.CSSValue[] borderWidths = new org.w3c.dom.css.CSSValue[styles.length]; for (int i = 0; i < (styles.length); i++) { borderWidths[i] = styles[i].getBorderWidth(); ws[i] = org.eclipse.birt.report.engine.layout.pdf.util.PropertyUtil.getDimensionValue(styles[i].getBorderWidth()); if ((ws[i]) > maxWidth) { maxWidth = ws[i]; maxCount = 1; maxFirstIndex = i; } else if ((ws[i]) == maxWidth) { maxCount++; } } if (maxCount == 1) { usedStyle.setBorder(borderStyles[maxFirstIndex], borderWidths[maxFirstIndex], styles[maxFirstIndex].getBorderColor()); return; } else { int max = 0; int maxStyleIndex = 0; int[] ss = new int[styles.length]; for (int i = 0; i < (styles.length); i++) { if ((ws[i]) == maxWidth) { ss[i] = ((java.lang.Integer) (org.eclipse.birt.report.engine.layout.pdf.BorderConflictResolver.styleMap.get(styles[i].getBorderStyle()))).intValue(); if ((ss[i]) > max) { max = ss[i]; maxFirstIndex = i; } } } usedStyle.setBorder(borderStyles[maxStyleIndex], borderWidths[maxStyleIndex], styles[maxStyleIndex].getBorderColor()); } }
protected boolean canContain(java.lang.Object target, java.lang.Object transfer) { if (((((((transfer instanceof org.eclipse.birt.report.model.api.DataSetHandle) || (transfer instanceof org.eclipse.birt.report.model.api.DataSourceHandle)) || (transfer instanceof org.eclipse.birt.report.model.api.ParameterHandle)) || (transfer instanceof org.eclipse.birt.report.model.api.ParameterGroupHandle)) || (transfer instanceof org.eclipse.birt.report.model.api.CascadingParameterGroupHandle)) || (transfer instanceof org.eclipse.birt.report.model.api.olap.CubeHandle)) || (transfer instanceof org.eclipse.birt.report.model.api.MasterPageHandle)) return true; if (org.eclipse.birt.report.designer.util.DNDUtil.handleValidateTargetCanContainMore(target, org.eclipse.birt.report.designer.util.DNDUtil.getObjectLength(transfer))) { canContain = org.eclipse.birt.report.designer.util.DNDUtil.handleValidateTargetCanContain(target, transfer, true); return (canContain) == (org.eclipse.birt.report.designer.util.DNDUtil.CONTAIN_THIS); } return false; }
private void initValueArea() { java.lang.String controlType = getSelectedControlType(); if (isStatic()) { if (DesignChoiceConstants.PARAM_CONTROL_CHECK_BOX.equals(controlType)) { if ((isValidValue(defaultValue)) != null) { defaultValue = null; defaultValueChooser.select(0); } else { if (java.lang.Boolean.valueOf(defaultValue).booleanValue()) { defaultValueChooser.select(1); } else { defaultValueChooser.select(2); } } } else if (DesignChoiceConstants.PARAM_CONTROL_TEXT_BOX.equals(controlType)) { if (getSelectedDataType().equals(DesignChoiceConstants.PARAM_TYPE_STRING)) { if ((defaultValue) == null) { defaultValueChooser.select(0); } else if (defaultValue.equals("")) { defaultValueChooser.select(1); } else if ((defaultValue.equals(java.lang.Boolean.toString(true))) || (defaultValue.equals(java.lang.Boolean.toString(false)))) { defaultValue = null; } else { defaultValueChooser.setText(defaultValue); } } else if ((defaultValue) != null) { if ((defaultValue.equals(java.lang.Boolean.toString(true))) || (defaultValue.equals(java.lang.Boolean.toString(false)))) { defaultValue = null; } else { defaultValueChooser.setText(defaultValue); } } } else if ((org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.PARAM_CONTROL_COMBO.equals(controlType)) || (org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.PARAM_CONTROL_LIST.equals(controlType))) { initSorttingArea(); if (((lastControlType) != null) && (lastControlType.equals(DesignChoiceConstants.PARAM_CONTROL_TEXT_BOX))) { defaultValue = null; } } refreshValueTable(); } else { refreshDataSets(); if ((inputParameter.getDataSetName()) != null) { dataSetChooser.setText(inputParameter.getDataSetName()); } refreshColumns(false); java.lang.String columnName = getColumnName(inputParameter.getValueExpr()); if (columnName != null) { columnChooser.setText(columnName); } columnName = getColumnName(inputParameter.getLabelExpr()); if (columnName != null) { displayTextChooser.setText(columnName); } if (getSelectedDataType().equals(DesignChoiceConstants.PARAM_TYPE_STRING)) { if ((defaultValue) == null) { defaultValueChooser.select(1); } else if (defaultValue.equals("")) { defaultValueChooser.select(2); } else { defaultValueChooser.setText(defaultValue); } } else if ((defaultValue) != null) { defaultValueChooser.setText(defaultValue); } initSorttingArea(); } updateMessageLine(); }
public static void updateAxisChart(org.eclipse.birt.report.item.crosstab.core.de.AggregationCellHandle cell, org.eclipse.birt.chart.model.ChartWithAxes cwa, org.eclipse.birt.report.model.api.ExtendedItemHandle hostChartHandle) throws org.eclipse.birt.core.exception.BirtException { boolean bTransposed = cwa.isTransposed(); if ((org.eclipse.birt.chart.reportitem.ui.ChartXTabUIUtil.getGrandTotalCell(cell, bTransposed)) != null) { org.eclipse.birt.report.item.crosstab.core.de.AggregationCellHandle grandTotalAggCell = org.eclipse.birt.chart.reportitem.ui.ChartXTabUIUtil.getGrandTotalAggregationCell(cell, bTransposed); java.lang.Object content = org.eclipse.birt.chart.reportitem.ChartXTabUtil.getFirstContent(grandTotalAggCell); if (content instanceof org.eclipse.birt.report.model.api.DataItemHandle) { if (org.eclipse.birt.chart.reportitem.ui.ChartXTabUIUtil.isYAxisVisible(cwa)) { org.eclipse.birt.report.model.api.ExtendedItemHandle axisChartHandle = org.eclipse.birt.chart.reportitem.ui.ChartXTabUIUtil.createChartHandle(cell.getModelHandle(), ChartReportItemConstants.TYPE_AXIS_CHART, hostChartHandle); grandTotalAggCell.addContent(axisChartHandle, 0); } if (!(org.eclipse.birt.chart.reportitem.ui.ChartInXTabStatusManager.hasGrandItem(cell))) { ((org.eclipse.birt.report.model.api.DataItemHandle) (content)).dropAndClear(); } } else if (org.eclipse.birt.chart.reportitem.ChartXTabUtil.isAxisChart(((org.eclipse.birt.report.model.api.DesignElementHandle) (content)))) { if ((((org.eclipse.birt.report.model.api.ExtendedItemHandle) (content)).getElementProperty(org.eclipse.birt.chart.reportitem.ui.PROPERTY_HOST_CHART)) != hostChartHandle) { ((org.eclipse.birt.report.model.api.ExtendedItemHandle) (content)).setProperty(org.eclipse.birt.chart.reportitem.ui.PROPERTY_HOST_CHART, hostChartHandle); } } else if (content == null) { org.eclipse.birt.chart.reportitem.ui.ChartXTabUIUtil.addAxisChartInXTab(cell, cwa, hostChartHandle); } } else { org.eclipse.birt.chart.reportitem.ui.ChartXTabUIUtil.addAxisChartInXTab(cell, cwa, hostChartHandle); } }
@java.lang.Override public boolean canSwitch(org.eclipse.birt.report.item.crosstab.ui.extension.SwitchCellInfo info) { org.eclipse.birt.report.item.crosstab.core.de.AggregationCellHandle cell = info.getAggregationCell(); if (cell != null) { if (((cell.getAggregationOnRow()) == null) && ((cell.getAggregationOnColumn()) == null)) { return false; } } org.eclipse.birt.report.item.crosstab.core.de.CrosstabReportItemHandle xtab = info.getCrosstab(); if (((info.getType()) == (org.eclipse.birt.report.item.crosstab.ui.extension.SwitchCellInfo.GRAND_TOTAL)) || ((info.getType()) == (org.eclipse.birt.report.item.crosstab.ui.extension.SwitchCellInfo.SUB_TOTAL))) { if (((xtab.getDimensionCount(ICrosstabConstants.ROW_AXIS_TYPE)) == 0) || ((xtab.getDimensionCount(ICrosstabConstants.COLUMN_AXIS_TYPE)) == 0)) { return false; } } if (((info.getCrosstab().getCube()) != null) && ((info.getMeasureInfo()) != null)) { if ((info.getMeasureInfo().getMeasureName()) == null) { return false; } java.lang.String dataType = info.getCrosstab().getCube().getMeasure(info.getMeasureInfo().getMeasureName()).getDataType(); return !(DesignChoiceConstants.COLUMN_DATA_TYPE_STRING.equals(dataType)); } return true; }
protected void groupPrimitive(org.eclipse.birt.chart.event.PrimitiveRenderEvent pre, boolean drawText) { if ((_iun) == null) { org.eclipse.birt.chart.device.svg.SVGInteractiveRenderer.logger.log(ILogger.WARNING, org.eclipse.birt.chart.device.svg.i18n.Messages.getString("exception.missing.component.interaction", getULocale())); return; } if ((pre.getSource()) instanceof org.eclipse.birt.chart.event.StructureSource) { org.eclipse.birt.chart.event.StructureSource sourceObject = ((org.eclipse.birt.chart.event.StructureSource) (pre.getSource())); org.eclipse.birt.chart.model.component.Series seDT = ((org.eclipse.birt.chart.model.component.Series) (getElementFromSource(sourceObject, StructureType.SERIES))); if (seDT != null) { java.lang.String groupIdentifier = null; try { if ((isColoredByCategories()) && ((getElementFromSource(sourceObject, StructureType.SERIES_DATA_POINT)) != null)) { seDT = findCategorySeries(seDT); groupIdentifier = java.lang.String.valueOf(seDT.hashCode()); org.eclipse.birt.chart.computation.DataPointHints dph = ((org.eclipse.birt.chart.computation.DataPointHints) (getElementFromSource(sourceObject, StructureType.SERIES_DATA_POINT))); groupIdentifier += "index"; groupIdentifier += dph.getIndex(); } else { seDT = findDesignTimeSeries(seDT); groupIdentifier = java.lang.String.valueOf(seDT.hashCode()); } } catch (org.eclipse.birt.chart.exception.ChartException e) { org.eclipse.birt.chart.device.svg.SVGInteractiveRenderer.logger.log(e); return; } if (drawText) { java.lang.String id = java.lang.Integer.toString(pre.hashCode()); java.util.List components = ((java.util.List) (labelPrimitives.get(seDT))); if (components == null) { components = new java.util.ArrayList(); labelPrimitives.put(seDT, components); } components.add(id); org.w3c.dom.Element outerGroup = svg_g2d.createElement("g"); svg_g2d.pushParent(outerGroup); org.w3c.dom.Element primGroup = svg_g2d.createElement("g"); outerGroup.appendChild(primGroup); svg_g2d.pushParent(primGroup); primGroup.setAttribute("id", ((groupIdentifier + "_") + id)); primGroup.setAttribute("style", "visibility:visible;"); outerGroup.setAttribute("id", (((groupIdentifier + "_") + id) + "_g")); outerGroup.setAttribute("style", "visibility:visible;"); } else { java.lang.String id = java.lang.Integer.toString(pre.hashCode()); java.util.List components = ((java.util.List) (componentPrimitives.get(seDT))); if (components == null) { components = new java.util.ArrayList(); componentPrimitives.put(seDT, components); } java.lang.String idTemp = id; if ((components.size()) > 0) { idTemp = (id + "@") + (components.size()); } components.add(idTemp); org.w3c.dom.Element primGroup = svg_g2d.createElement("g"); svg_g2d.pushParent(primGroup); primGroup.setAttribute("id", ((groupIdentifier + "_") + idTemp)); primGroup.setAttribute("style", "visibility:visible;"); svg_g2d.setDeferStrokColor(primGroup); } } else { java.lang.Object designObject = null; if ((getElementFromSource(sourceObject, StructureType.TITLE)) != null) { designObject = sourceObject.getSource(); } else if ((getElementFromSource(sourceObject, StructureType.CHART_BLOCK)) != null) { designObject = sourceObject.getSource(); } else if ((getElementFromSource(sourceObject, StructureType.PLOT)) != null) { designObject = sourceObject.getSource(); } else if ((getElementFromSource(sourceObject, StructureType.AXIS)) != null) { designObject = sourceObject.getSource(); } if (designObject != null) { java.lang.String groupIdentifier = java.lang.String.valueOf(designObject.hashCode()); java.lang.String id = java.lang.Integer.toString(pre.hashCode()); java.util.List components = ((java.util.List) (componentPrimitives.get(designObject))); if (components == null) { components = new java.util.ArrayList(); componentPrimitives.put(designObject, components); } java.lang.String idTemp = id; if ((components.size()) > 0) { idTemp = (id + "@") + (components.size()); } components.add(idTemp); org.w3c.dom.Element primGroup = svg_g2d.createElement("g"); svg_g2d.pushParent(primGroup); primGroup.setAttribute("id", ((groupIdentifier + "_") + idTemp)); primGroup.setAttribute("style", "visibility:visible;"); svg_g2d.setDeferStrokColor(primGroup); } } } }
public java.lang.Object clone() throws java.lang.CloneNotSupportedException { org.eclipse.birt.report.model.metadata.ChoiceSet set = ((org.eclipse.birt.report.model.metadata.ChoiceSet) (super.clone())); set.choices = new java.util.ArrayList<org.eclipse.birt.report.model.api.metadata.IChoice>(); if ((choices) != null) { for (int i = 0; i < (choices.size()); i++) set.choices.add(choices.get(i).copy()); } return set; }
public boolean differs(org.eclipse.birt.report.model.api.ComputedColumnHandle binding) { if (isAggregate()) { if (((txtName) != null) && (!(strEquals(txtName.getText(), binding.getName())))) return true; if (((cmbName) != null) && (!(strEquals(cmbName.getText(), binding.getName())))) return true; if (!(strEquals(binding.getDisplayName(), txtDisplayName.getText()))) return true; if (!(strEquals(binding.getDataType(), getDataType()))) return true; if (!(strEquals(binding.getExpression(), cmbDataField.getText()))) return true; if (!(strEquals(binding.getAggregateFunction(), getFunctionByDisplayName(cmbFunction.getText()).getName()))) return true; if (!(strEquals(binding.getFilterExpression(), txtFilter.getText()))) return true; if ((btnTable.getSelection()) == ((binding.getAggregateOn()) != null)) return true; if ((!(btnTable.getSelection())) && (!(binding.getAggregateOn().equals(cmbGroup.getText())))) return true; for (java.util.Iterator iterator = binding.argumentsIterator(); iterator.hasNext();) { org.eclipse.birt.report.model.api.AggregationArgumentHandle handle = ((org.eclipse.birt.report.model.api.AggregationArgumentHandle) (iterator.next())); java.lang.String argDisplayName = getArgumentDisplayNameByName(binding.getAggregateFunction(), handle.getName()); if (argsMap.containsKey(argDisplayName)) { if (!(strEquals(handle.getValue(), ((org.eclipse.swt.widgets.Text) (argsMap.get(argDisplayName))).getText()))) { return true; } } else { return true; } } } else { if (((txtName) != null) && (!(strEquals(txtName.getText(), binding.getName())))) return true; if (((cmbName) != null) && (!(strEquals(cmbName.getText(), binding.getName())))) return true; if (!(strEquals(txtDisplayName.getText(), binding.getDisplayName()))) return true; if (!(strEquals(getDataType(), binding.getDataType()))) return true; if (!(strEquals(txtExpression.getText(), binding.getExpression()))) return true; } return false; }
public void elementChanged(org.eclipse.birt.report.model.api.DesignElementHandle focus, org.eclipse.birt.report.model.api.activity.NotificationEvent ev) { switch (ev.getEventType()) { case org.eclipse.birt.report.model.api.activity.NotificationEvent.CONTENT_EVENT : case org.eclipse.birt.report.model.api.activity.NotificationEvent.STYLE_EVENT : { refresh(); break; } case org.eclipse.birt.report.model.api.activity.NotificationEvent.PROPERTY_EVENT : case org.eclipse.birt.report.model.api.activity.NotificationEvent.THEME_EVENT : case org.eclipse.birt.report.model.api.activity.NotificationEvent.TEMPLATE_TRANSFORM_EVENT : { refresh(); this.markDirty(true); break; } } }
private void loadResultSetMetaData() throws org.eclipse.birt.report.engine.api.EngineException { java.io.DataInputStream dis = null; try { java.util.HashMap query2ResultMetaData = report.getResultMetaData(); org.eclipse.birt.core.archive.IDocArchiveReader reader = reportDocReader.getArchive(); dis = new java.io.DataInputStream(reader.getStream(ReportDocumentConstants.DATA_META_STREAM)); java.util.HashMap queryCounts = new java.util.HashMap(); while (true) { org.eclipse.birt.core.util.IOUtil.readString(dis); org.eclipse.birt.core.util.IOUtil.readLong(dis); java.lang.String queryId = org.eclipse.birt.core.util.IOUtil.readString(dis); java.lang.String rsetId = org.eclipse.birt.core.util.IOUtil.readString(dis); rsetId2queryIdMapping.put(rsetId, queryId); int count = -1; java.lang.Integer countObj = ((java.lang.Integer) (queryCounts.get(queryId))); if (countObj != null) { count = countObj.intValue(); } count++; java.lang.String rsetName = getQueryName(queryId); if (count > 0) { rsetName = (rsetName + "_") + count; } queryCounts.put(queryId, new java.lang.Integer(count)); rsetName2IdMapping.put(rsetName, rsetId); if (null != query2ResultMetaData) { org.eclipse.birt.data.engine.api.IQueryDefinition query = getQuery(queryId); if (isMasterQuery(query)) { org.eclipse.birt.report.engine.api.impl.ResultMetaData metaData = ((org.eclipse.birt.report.engine.api.impl.ResultMetaData) (query2ResultMetaData.get(query))); if ((metaData.getColumnCount()) > 0) { org.eclipse.birt.report.engine.api.IResultSetItem resultItem = new org.eclipse.birt.report.engine.api.impl.ResultSetItem(rsetName, metaData); resultMetaList.add(resultItem); } } } } } catch (java.io.EOFException eofe) { } catch (java.io.IOException ioe) { org.eclipse.birt.report.engine.api.impl.DataExtractionTask.logger.log(java.util.logging.Level.SEVERE, ioe.getMessage(), ioe); } finally { if (dis != null) { try { dis.close(); } catch (java.io.IOException ex) { } } } }
boolean visitScalarParameter(org.eclipse.birt.report.model.api.ScalarParameterHandle param, java.lang.Object userData) { java.lang.String name = param.getName(); java.lang.Object value = getDefaultValue(name); values.put(name, value); return true; }
private static void prepareMeasure(org.eclipse.birt.report.model.api.olap.TabularCubeHandle cubeHandle, org.eclipse.birt.data.engine.api.querydefn.QueryDefinition query, java.util.List metaList) throws org.eclipse.birt.report.data.adapter.api.AdapterException { try { java.util.List measureGroups = cubeHandle.getContents(CubeHandle.MEASURE_GROUPS_PROP); for (int i = 0; i < (measureGroups.size()); i++) { org.eclipse.birt.report.model.api.olap.MeasureGroupHandle mgh = ((org.eclipse.birt.report.model.api.olap.MeasureGroupHandle) (measureGroups.get(i))); java.util.List measures = mgh.getContents(MeasureGroupHandle.MEASURES_PROP); for (int j = 0; j < (measures.size()); j++) { org.eclipse.birt.report.model.api.olap.MeasureHandle measure = ((org.eclipse.birt.report.model.api.olap.MeasureHandle) (measures.get(j))); java.lang.String function = measure.getFunction(); java.lang.String exprText = measure.getMeasureExpression(); org.eclipse.birt.data.engine.api.IScriptExpression expr = (exprText != null) ? new org.eclipse.birt.data.engine.api.querydefn.ScriptExpression(exprText) : null; if ((query.getGroups().size()) > 0) { org.eclipse.birt.data.engine.api.querydefn.Binding binding = new org.eclipse.birt.data.engine.api.querydefn.Binding(measure.getName(), expr); binding.setAggrFunction(org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.adaptModelAggregationType(function)); org.eclipse.birt.data.engine.api.IGroupDefinition group = ((org.eclipse.birt.data.engine.api.IGroupDefinition) (query.getGroups().get(((query.getGroups().size()) - 1)))); binding.addAggregateOn(group.getName()); query.addBinding(binding); } else { query.addBinding(new org.eclipse.birt.data.engine.api.querydefn.Binding(measure.getName(), expr)); } org.eclipse.birt.report.data.adapter.impl.DataSetIterator.ColumnMeta meta = new org.eclipse.birt.report.data.adapter.impl.DataSetIterator.ColumnMeta(measure.getName(), null, org.eclipse.birt.report.data.adapter.impl.DataSetIterator.ColumnMeta.MEASURE_TYPE); meta.setDataType(org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.adaptModelDataType(measure.getDataType())); metaList.add(meta); } } } catch (org.eclipse.birt.data.engine.core.DataException e) { throw new org.eclipse.birt.report.data.adapter.api.AdapterException(e.getLocalizedMessage()); } }
private boolean isCustom() { if ((((((DesignChoiceConstants.STRING_FORMAT_TYPE_CUSTOM.equals(formatCategroy)) || (DesignChoiceConstants.NUMBER_FORMAT_TYPE_CUSTOM.equals(formatCategroy))) || (DesignChoiceConstants.DATETIEM_FORMAT_TYPE_CUSTOM.equals(formatCategroy))) || (DesignChoiceConstants.DATE_FORMAT_TYPE_CUSTOM.equals(formatCategroy))) || (DesignChoiceConstants.TIME_FORMAT_TYPE_CUSTOM.equals(formatCategroy))) || (DesignChoiceConstants.NUMBER_FORMAT_TYPE_CURRENCY.equals(formatCategroy))) { return true; } return false; }
public void endContainer(org.eclipse.birt.report.engine.content.IContent content, boolean finished, org.eclipse.birt.report.engine.emitter.IContentEmitter emitter, boolean visible) { if ((content != null) && visible) { org.eclipse.birt.report.engine.emitter.ContentEmitterUtil.endContent(pageContent, emitter); } }
private void createDataSelection(org.eclipse.swt.widgets.Composite composite) { org.eclipse.swt.widgets.Label referDataLabel = new org.eclipse.swt.widgets.Label(composite, org.eclipse.swt.SWT.NONE); referDataLabel.setText(org.eclipse.birt.report.designer.nls.Messages.getString("CrosstabBindingDialogHelper.referencedate.label")); org.eclipse.swt.layout.GridData gd = new org.eclipse.swt.layout.GridData(); gd.verticalAlignment = org.eclipse.swt.SWT.BEGINNING; referDataLabel.setLayoutData(gd); org.eclipse.swt.widgets.Composite radioContainer = new org.eclipse.swt.widgets.Composite(composite, org.eclipse.swt.SWT.NONE); org.eclipse.swt.layout.GridLayout layout = new org.eclipse.swt.layout.GridLayout(); gd = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_HORIZONTAL); gd.horizontalSpan = 3; radioContainer.setLayoutData(gd); layout = new org.eclipse.swt.layout.GridLayout(); layout.marginWidth = layout.marginHeight = 0; layout.numColumns = 2; radioContainer.setLayout(layout); todayButton = new org.eclipse.swt.widgets.Button(radioContainer, org.eclipse.swt.SWT.RADIO); todayButton.addSelectionListener(new org.eclipse.swt.events.SelectionAdapter() { public void widgetSelected(org.eclipse.swt.events.SelectionEvent event) { dateButtonSelection(true); } }); todayButton.setText(org.eclipse.birt.report.designer.nls.Messages.getString("CrosstabBindingDialogHelper.today.label")); todayButton.setLayoutData(new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL, org.eclipse.swt.layout.GridData.FILL, true, false, 2, 1)); dateSelectionButton = new org.eclipse.swt.widgets.Button(radioContainer, org.eclipse.swt.SWT.RADIO); dateSelectionButton.setText(org.eclipse.birt.report.designer.nls.Messages.getString("CrosstabBindingDialogHelper.thisdate.label")); dateSelectionButton.addSelectionListener(new org.eclipse.swt.events.SelectionAdapter() { public void widgetSelected(org.eclipse.swt.events.SelectionEvent event) { dateButtonSelection(true); } }); org.eclipse.swt.widgets.Composite dateSelecionContainer = new org.eclipse.swt.widgets.Composite(radioContainer, org.eclipse.swt.SWT.NONE); org.eclipse.swt.layout.GridData gridData = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_HORIZONTAL); gridData.horizontalAlignment = org.eclipse.swt.SWT.FILL; gridData.grabExcessHorizontalSpace = true; dateSelecionContainer.setLayoutData(gridData); layout = new org.eclipse.swt.layout.GridLayout(); layout.marginWidth = layout.marginHeight = 0; layout.horizontalSpacing = 0; layout.numColumns = 2; dateSelecionContainer.setLayout(layout); dateText = new org.eclipse.swt.widgets.Text(dateSelecionContainer, ((org.eclipse.swt.SWT.BORDER) | (org.eclipse.swt.SWT.WRAP))); dateText.addModifyListener(new org.eclipse.swt.events.ModifyListener() { public void modifyText(org.eclipse.swt.events.ModifyEvent e) { dateFormatLbl.setText(getDateHintText()); modifyDialogContent(); validate(); } }); dateText.addFocusListener(new org.eclipse.swt.events.FocusListener() { public void focusGained(org.eclipse.swt.events.FocusEvent e) { todayButton.setSelection(false); recentButton.setSelection(false); dateSelectionButton.setSelection(true); dateButtonSelection(true); } public void focusLost(org.eclipse.swt.events.FocusEvent e) { } }); gd = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_HORIZONTAL); gd.heightHint = (dateText.computeSize(SWT.DEFAULT, SWT.DEFAULT).y) - ((dateText.getBorderWidth()) * 2); dateText.setLayoutData(gd); if ((expressionProvider) == null) { if (isAggregate()) expressionProvider = new org.eclipse.birt.report.item.crosstab.internal.ui.dialogs.CrosstabAggregationExpressionProvider(this.bindingHolder, this.binding); else expressionProvider = new org.eclipse.birt.report.item.crosstab.internal.ui.dialogs.CrosstabBindingExpressionProvider(this.bindingHolder, this.binding); } button = org.eclipse.birt.report.designer.internal.ui.util.ExpressionButtonUtil.createExpressionButton(dateSelecionContainer, dateText, expressionProvider, this.bindingHolder, changeExprTypeListener, true, SWT.PUSH); dateText.setData(ExpressionButtonUtil.EXPR_TYPE, ExpressionType.CONSTANT); button.refresh(); new org.eclipse.swt.widgets.Label(radioContainer, org.eclipse.swt.SWT.NONE); dateFormatLbl = new org.eclipse.swt.widgets.Label(radioContainer, org.eclipse.swt.SWT.NONE); dateFormatLbl.setText(getDateHintText()); dateFormatLbl.setForeground(org.eclipse.birt.report.designer.util.ColorManager.getColor(128, 128, 128)); dateFormatLbl.setLayoutData(new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_HORIZONTAL)); recentButton = new org.eclipse.swt.widgets.Button(radioContainer, org.eclipse.swt.SWT.RADIO); recentButton.addSelectionListener(new org.eclipse.swt.events.SelectionAdapter() { public void widgetSelected(org.eclipse.swt.events.SelectionEvent event) { if (isStatic) { isStatic = false; initCalculationTypeCombo(getTimeDimsionName()); } modifyDialogContent(); validate(); } }); recentButton.setText(org.eclipse.birt.report.designer.nls.Messages.getString("CrosstabBindingDialogHelper.recentday.description")); recentButton.setLayoutData(new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL, org.eclipse.swt.layout.GridData.FILL, true, false, 3, 1)); radioContainer.setTabList(new org.eclipse.swt.widgets.Control[]{ todayButton, dateSelectionButton, dateSelecionContainer, recentButton }); }
void shutdownDerby() { try { if (((derbyClassLoader) == null) || (!(derbyClassLoader.isGood()))) { initClassLoaders(); } getDerbyDriver().connect("jdbc:derby:;shutdown=true", null); } catch (java.sql.SQLException e) { } }
protected void okPressed() { try { inputParameter.setName(nameEditor.getText()); inputParameter.setPromptText(org.eclipse.birt.report.designer.internal.ui.util.UIUtil.convertToModelString(promptTextEditor.getText(), true)); java.lang.String newControlType = getSelectedControlType(); if (org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.PARAM_CONTROL_COMBO.equals(newControlType)) { newControlType = org.eclipse.birt.report.model.api.elements.DesignChoiceConstants.PARAM_CONTROL_LIST_BOX; inputParameter.setMustMatch(false); } else if (org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.PARAM_CONTROL_LIST.equals(newControlType)) { newControlType = org.eclipse.birt.report.model.api.elements.DesignChoiceConstants.PARAM_CONTROL_LIST_BOX; inputParameter.setMustMatch(true); } else { inputParameter.setProperty(ScalarParameterHandle.MUCH_MATCH_PROP, null); } inputParameter.setControlType(newControlType); if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(getSelectedDataType())) { defaultValue = org.eclipse.birt.report.designer.util.DEUtil.convertToXMLString(org.eclipse.birt.core.data.DataTypeUtil.toDate(defaultValue, ULocale.US)); } inputParameter.setDefaultValue(defaultValue); inputParameter.setDataType(org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.DATA_TYPE_CHOICE_SET.findChoiceByDisplayName(dataTypeChooser.getText()).getName()); org.eclipse.birt.report.model.api.PropertyHandle selectionChioceList = inputParameter.getPropertyHandle(ScalarParameterHandle.SELECTION_LIST_PROP); selectionChioceList.setValue(null); if (isStatic()) { inputParameter.setValueType(DesignChoiceConstants.PARAM_VALUE_TYPE_STATIC); if ((!(DesignChoiceConstants.PARAM_CONTROL_TEXT_BOX.equals(newControlType))) && (!(DesignChoiceConstants.PARAM_CONTROL_CHECK_BOX.equals(newControlType)))) { for (java.util.Iterator iter = choiceList.iterator(); iter.hasNext();) { org.eclipse.birt.report.model.api.elements.structures.SelectionChoice choice = ((org.eclipse.birt.report.model.api.elements.structures.SelectionChoice) (iter.next())); if ((isValidValue(choice.getValue())) == null) { selectionChioceList.addItem(choice); } } } inputParameter.setDataSetName(null); inputParameter.setValueExpr(null); inputParameter.setLabelExpr(null); } else { inputParameter.setValueType(DesignChoiceConstants.PARAM_VALUE_TYPE_DYNAMIC); inputParameter.setDataSetName(dataSetChooser.getText()); inputParameter.setValueExpr(getExpression(columnChooser.getText())); if (displayTextChooser.getText().equals(org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.LABEL_NULL)) { inputParameter.setLabelExpr(""); } else { inputParameter.setLabelExpr(getExpression(displayTextChooser.getText())); } } inputParameter.setHelpText(org.eclipse.birt.report.designer.internal.ui.util.UIUtil.convertToModelString(helpTextEditor.getText(), false)); inputParameter.setCategory(formatCategroy); inputParameter.setPattern(formatPattern); if (((isStatic()) && ((org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.PARAM_CONTROL_COMBO.equals(getSelectedControlType())) || (DesignChoiceConstants.PARAM_CONTROL_RADIO_BUTTON.equals(getSelectedControlType())))) && (!(containValue(null, defaultValue, org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.COLUMN_VALUE)))) { defaultValue = null; } if (dirtyProperties.containsKey(org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.CHECKBOX_HIDDEN)) { inputParameter.setHidden(getProperty(org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.CHECKBOX_HIDDEN)); } if (dirtyProperties.containsKey(org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.CHECKBOX_ISREQUIRED)) { inputParameter.setIsRequired(getProperty(org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.CHECKBOX_ISREQUIRED)); } if (doNotEcho.isEnabled()) { if (dirtyProperties.containsKey(org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.CHECKBOX_DO_NOT_ECHO)) { inputParameter.setConcealValue(getProperty(org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.CHECKBOX_DO_NOT_ECHO)); } } else { inputParameter.setProperty(ScalarParameterHandle.CONCEAL_VALUE_PROP, null); } if ((((sorttingArea) != null) && (!(sorttingArea.isDisposed()))) && (sorttingArea.isVisible())) { if (!(sortKeyChooser.getText().equals(org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.CHOICE_NONE))) { inputParameter.setFixedOrder(false); inputParameter.setDistinct((!(distinct.getSelection()))); if (sortKeyChooser.getText().equals(org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.CHOICE_DISPLAY_TEXT)) { inputParameter.setSortBy(DesignChoiceConstants.PARAM_SORT_VALUES_LABEL); } else if (sortKeyChooser.getText().equals(org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.CHOICE_VALUE_COLUMN)) { inputParameter.setSortBy(DesignChoiceConstants.PARAM_SORT_VALUES_VALUE); } if (sortDirectionChooser.getText().equals(org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.CHOICE_ASCENDING)) { inputParameter.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_ASC); } else if (sortDirectionChooser.getText().equals(org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.CHOICE_DESCENDING)) { inputParameter.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_DESC); } } else { inputParameter.setFixedOrder(true); inputParameter.setSortBy(null); inputParameter.setSortDirection(null); inputParameter.setDistinct(false); } } else { inputParameter.setProperty(ScalarParameterHandle.FIXED_ORDER_PROP, null); } if ((!(isStatic())) && (!(org.eclipse.birt.report.model.api.util.StringUtil.isBlank(listLimit.getText())))) { try { inputParameter.setListlimit(java.lang.Integer.parseInt(listLimit.getText())); } catch (java.lang.NumberFormatException ex) { org.eclipse.birt.report.designer.internal.ui.util.ExceptionHandler.openErrorMessageBox(org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.ERROR_TITLE_INVALID_LIST_LIMIT, java.text.MessageFormat.format(org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.ERROR_MSG_INVALID_LIST_LIMIT, new java.lang.Object[]{ java.lang.Integer.toString(java.lang.Integer.MAX_VALUE) })); } } else { inputParameter.setProperty(ScalarParameterHandle.LIST_LIMIT_PROP, null); } } catch (java.lang.Exception e) { org.eclipse.birt.report.designer.internal.ui.util.ExceptionHandler.handle(e); return; } setResult(inputParameter); super.okPressed(); }
public java.util.HashMap getExpressions() { if ((text) == null) { return null; } if ((exprs) != null) { return exprs; } if ((org.eclipse.birt.report.engine.ir.TextItemDesign.HTML_TEXT.equals(textType)) || ((org.eclipse.birt.report.engine.ir.TextItemDesign.AUTO_TEXT.equals(textType)) && (text.substring(0, 6).equalsIgnoreCase("<html>")))) { exprs = new java.util.HashMap(); org.eclipse.birt.core.template.TextTemplate template = new org.eclipse.birt.core.template.TemplateParser().parse(text); if ((template != null) && ((template.getNodes()) != null)) { java.util.Iterator itor = template.getNodes().iterator(); java.lang.Object obj; java.lang.String expression = null; while (itor.hasNext()) { obj = itor.next(); if (obj instanceof org.eclipse.birt.core.template.TextTemplate.ValueNode) { expression = ((org.eclipse.birt.core.template.TextTemplate.ValueNode) (obj)).getValue(); } else if (obj instanceof org.eclipse.birt.core.template.TextTemplate.ImageNode) { expression = ((org.eclipse.birt.core.template.TextTemplate.ImageNode) (obj)).getExpr(); } if ((expression != null) && (!(expression.trim().equals("")))) { exprs.put(expression, expression); expression = null; } } } } return exprs; }
public void close() throws org.eclipse.birt.core.exception.BirtException { if ((resultIterator) != null) resultIterator.close(); }
public org.eclipse.birt.chart.ui.swt.interfaces.ISelectDataComponent getSeriesDataComponent(int seriesType, org.eclipse.birt.chart.model.data.SeriesDefinition seriesDefn, org.eclipse.birt.chart.ui.swt.wizard.ChartWizardContext context, java.lang.String sTitle) { if (seriesType == (org.eclipse.birt.chart.ui.swt.interfaces.ISelectDataCustomizeUI.ORTHOGONAL_SERIES)) { return new org.eclipse.birt.chart.ui.swt.wizard.data.BaseDataDefinitionComponent(org.eclipse.birt.chart.ui.swt.wizard.data.BaseDataDefinitionComponent.BUTTON_AGGREGATION, sTitle, seriesDefn, org.eclipse.birt.chart.ui.util.ChartUIUtil.getDataQuery(seriesDefn, 0), context, sTitle); } else if (seriesType == (org.eclipse.birt.chart.ui.swt.interfaces.ISelectDataCustomizeUI.GROUPING_SERIES)) { org.eclipse.birt.chart.ui.swt.wizard.data.BaseDataDefinitionComponent ddc = new org.eclipse.birt.chart.ui.swt.wizard.data.YOptionalDataDefinitionComponent(org.eclipse.birt.chart.ui.swt.wizard.data.BaseDataDefinitionComponent.BUTTON_GROUP, org.eclipse.birt.chart.ui.util.ChartUIConstants.QUERY_OPTIONAL, seriesDefn, seriesDefn.getQuery(), context, sTitle); return ddc; } return new org.eclipse.birt.chart.ui.swt.DefaultSelectDataComponent(); }
private static java.lang.Class getClassUsingCustomClassPath(java.lang.String className, java.lang.String classPathKey, java.lang.ClassLoader parentLoader) { java.lang.String classPath = java.lang.System.getProperty(classPathKey); if (((classPath == null) || ((classPath.length()) == 0)) || (className == null)) return null; java.lang.String[] classPathArray = classPath.split(EngineConstants.PROPERTYSEPARATOR, (-1)); java.net.URL[] urls = null; if ((classPathArray.length) != 0) { java.util.List l = new java.util.ArrayList(); for (int i = 0; i < (classPathArray.length); i++) { java.lang.String cpValue = classPathArray[i]; java.io.File file = new java.io.File(cpValue); try { l.add(file.toURL()); } catch (java.net.MalformedURLException e) { e.printStackTrace(); } } urls = ((java.net.URL[]) (l.toArray(new java.net.URL[l.size()]))); } if (urls != null) { java.lang.ClassLoader cl = new java.net.URLClassLoader(urls, parentLoader); try { return cl.loadClass(className); } catch (java.lang.ClassNotFoundException e) { } } return null; }
public static void buildSize(java.lang.StringBuffer content, java.lang.String name, org.eclipse.birt.report.engine.ir.DimensionType value) { if (value != null) { if (HTMLTags.ATTR_MIN_HEIGHT.equals(name)) { org.eclipse.birt.report.engine.emitter.html.AttributeBuilder.addPropName(content, HTMLTags.ATTR_MIN_HEIGHT); org.eclipse.birt.report.engine.emitter.html.AttributeBuilder.addPropValue(content, "auto !important"); content.append(';'); org.eclipse.birt.report.engine.emitter.html.AttributeBuilder.addPropName(content, HTMLTags.ATTR_HEIGHT); org.eclipse.birt.report.engine.emitter.html.AttributeBuilder.addPropValue(content, value.toString()); content.append(';'); org.eclipse.birt.report.engine.emitter.html.AttributeBuilder.addPropName(content, HTMLTags.ATTR_MIN_HEIGHT); org.eclipse.birt.report.engine.emitter.html.AttributeBuilder.addPropValue(content, value.toString()); content.append(';'); } else { org.eclipse.birt.report.engine.emitter.html.AttributeBuilder.addPropName(content, name); org.eclipse.birt.report.engine.emitter.html.AttributeBuilder.addPropValue(content, value.toString()); content.append(';'); } } }
private static java.lang.Object doPalette(java.lang.Object object, java.lang.String type) { assert object instanceof org.eclipse.gef.palette.PaletteRoot; org.eclipse.gef.palette.PaletteRoot root = ((org.eclipse.gef.palette.PaletteRoot) (object)); java.util.List list = root.getChildren(); java.util.List exts = org.eclipse.birt.report.designer.internal.ui.extension.ExtensionPointManager.getInstance().getExtendedElementPoints(); if (exts == null) { return root; } for (java.util.Iterator itor = exts.iterator(); itor.hasNext();) { org.eclipse.birt.report.designer.internal.ui.extension.ExtendedElementUIPoint point = ((org.eclipse.birt.report.designer.internal.ui.extension.ExtendedElementUIPoint) (itor.next())); if (point == null) { return root; } java.lang.String category = ((java.lang.String) (point.getAttribute(IExtensionConstants.ATTRIBUTE_PALETTE_CATEGORY))); org.eclipse.jface.resource.ImageDescriptor icon = ((org.eclipse.jface.resource.ImageDescriptor) (point.getAttribute(IExtensionConstants.ATTRIBUTE_KEY_PALETTE_ICON))); org.eclipse.birt.report.designer.ui.extensions.IReportItemFigureProvider UI = point.getReportItemUI(); if (UI == null) { return root; } if (org.eclipse.birt.report.designer.internal.ui.editors.schematic.extensions.GuiExtensionManager.PALETTE_DESIGNER.equals(type)) { java.lang.Boolean bool = ((java.lang.Boolean) (point.getAttribute(IExtensionConstants.ATTRIBUTE_EDITOR_SHOW_IN_DESIGNER))); if (!(bool.booleanValue())) { continue; } } else if (org.eclipse.birt.report.designer.internal.ui.editors.schematic.extensions.GuiExtensionManager.PALETTE_MASTERPAGE.equals(type)) { java.lang.Boolean bool = ((java.lang.Boolean) (point.getAttribute(IExtensionConstants.ATTRIBUTE_EDITOR_SHOW_IN_MASTERPAGE))); { continue; } } java.lang.String displayName = org.eclipse.birt.report.designer.util.DEUtil.getMetaDataDictionary().getExtension(point.getExtensionName()).getDisplayName(); org.eclipse.gef.palette.CombinedTemplateCreationEntry combined = new org.eclipse.birt.report.designer.internal.ui.palette.ReportCombinedTemplateCreationEntry(displayName, org.eclipse.birt.report.designer.nls.Messages.getFormattedString("GuiExtensionManager.tooltip.insert", new java.lang.Object[]{ displayName }), org.eclipse.birt.report.designer.internal.ui.editors.schematic.extensions.GuiExtensionManager.getExtendedPalletTemplateName(point), new org.eclipse.birt.report.designer.internal.ui.palette.ReportElementFactory(((org.eclipse.birt.report.designer.core.IReportElementConstants.REPORT_ELEMENT_EXTENDED) + (point.getExtensionName()))), icon, icon, org.eclipse.birt.report.designer.internal.ui.palette.BasePaletteFactory.getAbstractToolHandleExtendsFromPaletteName(org.eclipse.birt.report.designer.internal.ui.editors.schematic.extensions.GuiExtensionManager.getExtendedPalletTemplateName(point))); org.eclipse.gef.palette.PaletteContainer entry = org.eclipse.birt.report.designer.internal.ui.editors.schematic.extensions.GuiExtensionManager.findCategory(list, category); if (entry == null) { java.lang.String categoryLabel = ((java.lang.String) (point.getAttribute(IExtensionConstants.ATTRIBUTE_PALETTE_CATEGORY_DISPLAYNAME))); if (categoryLabel == null) { categoryLabel = category; } entry = new org.eclipse.birt.report.designer.internal.ui.palette.PaletteCategory(category, categoryLabel, null); root.add(entry); } entry.add(combined); } org.eclipse.birt.report.designer.internal.ui.extension.experimental.PaletteEntryExtension[] entries = org.eclipse.birt.report.designer.internal.ui.extension.experimental.EditpartExtensionManager.getPaletteEntries(); for (int i = 0; i < (entries.length); i++) { if (org.eclipse.birt.report.designer.internal.ui.editors.schematic.extensions.GuiExtensionManager.PALETTE_MASTERPAGE.equals(type)) { continue; } java.lang.String category = entries[i].getCategory(); org.eclipse.gef.palette.PaletteContainer entry = org.eclipse.birt.report.designer.internal.ui.editors.schematic.extensions.GuiExtensionManager.findCategory(list, category); if (entry == null) { entry = new org.eclipse.birt.report.designer.internal.ui.palette.PaletteCategory(category, category, null); root.add(entry); } org.eclipse.gef.palette.CombinedTemplateCreationEntry combined = new org.eclipse.birt.report.designer.internal.ui.extension.experimental.CommandCombinedTemplateCreationEntry(entries[i]); entry.add(combined); } return root; }
public static org.eclipse.birt.report.designer.ui.views.INodeProvider createProvider(java.lang.Object object) { if (object instanceof org.eclipse.birt.report.model.api.ReportDesignHandle) { return new org.eclipse.birt.report.designer.internal.ui.views.outline.providers.ReportDesignNodeProvider(); } if (object instanceof org.eclipse.birt.report.model.api.LibraryHandle) { return new org.eclipse.birt.report.designer.internal.ui.views.outline.providers.LibraryHandleNodeProvider(); } else if (object instanceof org.eclipse.birt.report.designer.core.model.views.outline.ReportElementModel) { org.eclipse.birt.report.designer.core.model.views.outline.ReportElementModel model = ((org.eclipse.birt.report.designer.core.model.views.outline.ReportElementModel) (object)); org.eclipse.birt.report.model.api.DesignElementHandle handle = model.getElementHandle(); if (handle instanceof org.eclipse.birt.report.model.api.ModuleHandle) { switch (model.getSlotId()) { case org.eclipse.birt.report.model.api.ReportDesignHandle.BODY_SLOT : return new org.eclipse.birt.report.designer.internal.ui.views.outline.providers.BodyNodeProvider(); case org.eclipse.birt.report.model.api.ModuleHandle.COMPONENT_SLOT : return new org.eclipse.birt.report.designer.internal.ui.views.outline.providers.ComponentsProvider(); case org.eclipse.birt.report.model.elements.interfaces.ILibraryModel.THEMES_SLOT : { if ((model.getElementHandle()) instanceof org.eclipse.birt.report.model.api.LibraryHandle) { org.eclipse.birt.report.designer.internal.ui.views.outline.providers.ThemesNodeProvider themesProvider = new org.eclipse.birt.report.designer.internal.ui.views.outline.providers.ThemesNodeProvider(); themesProvider.setSorter(new org.eclipse.birt.report.designer.util.AlphabeticallyComparator()); return themesProvider; } org.eclipse.birt.report.designer.internal.ui.views.outline.providers.StylesNodeProvider provider = new org.eclipse.birt.report.designer.internal.ui.views.outline.providers.StylesNodeProvider(); provider.setSorter(new org.eclipse.birt.report.designer.util.AlphabeticallyComparator()); return provider; } case org.eclipse.birt.report.model.api.ModuleHandle.PAGE_SLOT : return new org.eclipse.birt.report.designer.internal.ui.views.outline.providers.MasterPagesNodeProvider(); case org.eclipse.birt.report.model.api.ModuleHandle.DATA_SOURCE_SLOT : return new org.eclipse.birt.report.designer.internal.ui.views.data.providers.DataSourcesNodeProvider(); case org.eclipse.birt.report.model.api.ModuleHandle.PARAMETER_SLOT : return new org.eclipse.birt.report.designer.internal.ui.views.data.providers.ParametersNodeProvider(); case org.eclipse.birt.report.model.api.ModuleHandle.DATA_SET_SLOT : return new org.eclipse.birt.report.designer.internal.ui.views.data.providers.DataSetsNodeProvider(); } } else if ((handle instanceof org.eclipse.birt.report.model.api.TableHandle) || (handle instanceof org.eclipse.birt.report.model.api.TableGroupHandle)) { return new org.eclipse.birt.report.designer.internal.ui.views.outline.providers.TableBandProvider(); } else if ((handle instanceof org.eclipse.birt.report.model.api.ListHandle) || (handle instanceof org.eclipse.birt.report.model.api.ListGroupHandle)) { return new org.eclipse.birt.report.designer.internal.ui.views.outline.providers.ListBandProvider(); } else if (handle instanceof org.eclipse.birt.report.model.api.MasterPageHandle) { return new org.eclipse.birt.report.designer.internal.ui.views.outline.providers.MasterPageBandProvider(); } } else if (object instanceof org.eclipse.birt.report.model.api.DesignElementHandle) { java.lang.String elementName = ((org.eclipse.birt.report.model.api.DesignElementHandle) (object)).getDefn().getName(); org.eclipse.birt.report.designer.ui.extensions.IProviderFactory factory = org.eclipse.birt.report.designer.internal.ui.extension.ExtensionPointManager.getInstance().getProviderFactory(elementName); if (factory != null) { return factory.createProvider(object); } if (object instanceof org.eclipse.birt.report.model.api.CellHandle) { return new org.eclipse.birt.report.designer.internal.ui.views.outline.providers.CellProvider(); } else if (object instanceof org.eclipse.birt.report.model.api.GridHandle) { return new org.eclipse.birt.report.designer.internal.ui.views.outline.providers.GridProvider(); } else if (object instanceof org.eclipse.birt.report.model.api.StyleHandle) { return new org.eclipse.birt.report.designer.internal.ui.views.outline.providers.StyleNodeProvider(); } else if (object instanceof org.eclipse.birt.report.model.api.ListHandle) { return new org.eclipse.birt.report.designer.internal.ui.views.outline.providers.ListProvider(); } else if (object instanceof org.eclipse.birt.report.model.api.TableHandle) { return new org.eclipse.birt.report.designer.internal.ui.views.outline.providers.TableProvider(); } else if ((object instanceof org.eclipse.birt.report.model.api.TableGroupHandle) || (object instanceof org.eclipse.birt.report.model.api.ListGroupHandle)) { return new org.eclipse.birt.report.designer.internal.ui.views.outline.providers.GroupProvider(); } else if (object instanceof org.eclipse.birt.report.model.api.RowHandle) { return new org.eclipse.birt.report.designer.internal.ui.views.outline.providers.RowProvider(); } else if (object instanceof org.eclipse.birt.report.model.api.DataItemHandle) { return new org.eclipse.birt.report.designer.internal.ui.views.outline.providers.DataProvider(); } else if (object instanceof org.eclipse.birt.report.model.api.LabelHandle) { return new org.eclipse.birt.report.designer.internal.ui.views.outline.providers.LabelProvider(); } else if (object instanceof org.eclipse.birt.report.model.api.MasterPageHandle) { return new org.eclipse.birt.report.designer.internal.ui.views.outline.providers.MasterPageNodeProvider(); } else if (object instanceof org.eclipse.birt.report.model.api.DataSourceHandle) { return new org.eclipse.birt.report.designer.internal.ui.views.data.providers.DataSourceNodeProvider(); } else if (object instanceof org.eclipse.birt.report.model.api.DataSetHandle) { return new org.eclipse.birt.report.designer.internal.ui.views.data.providers.DataSetNodeProvider(); } else if (object instanceof org.eclipse.birt.report.model.api.ParameterGroupHandle) { if (object instanceof org.eclipse.birt.report.model.api.CascadingParameterGroupHandle) { return new org.eclipse.birt.report.designer.internal.ui.views.data.providers.CascadingParameterGroupNodeProvider(); } return new org.eclipse.birt.report.designer.internal.ui.views.data.providers.ParameterGroupNodeProvider(); } else if (object instanceof org.eclipse.birt.report.model.api.ParameterHandle) { return new org.eclipse.birt.report.designer.internal.ui.views.data.providers.ParameterNodeProvider(); } else if (object instanceof org.eclipse.birt.report.model.api.ThemeHandle) { return new org.eclipse.birt.report.designer.internal.ui.views.outline.providers.ThemeNodeProvider(); } } else if (object instanceof org.eclipse.birt.report.designer.core.model.views.data.DataSetItemModel) { return new org.eclipse.birt.report.designer.internal.ui.views.data.providers.DataSetColumnProvider(); } else if (object instanceof org.eclipse.birt.report.model.api.DataSetParameterHandle) { return new org.eclipse.birt.report.designer.internal.ui.views.data.providers.DataSetParameterProvider(); } else if (object instanceof org.eclipse.birt.report.designer.core.model.views.outline.EmbeddedImageNode) { return new org.eclipse.birt.report.designer.internal.ui.views.outline.providers.EmbeddedImagesNodeProvider(); } else if (object instanceof org.eclipse.birt.report.model.api.EmbeddedImageHandle) { return new org.eclipse.birt.report.designer.internal.ui.views.outline.providers.EmbeddedImageNodeProvider(); } else if (object instanceof org.eclipse.birt.report.designer.core.model.views.outline.LibraryNode) { return new org.eclipse.birt.report.designer.internal.ui.views.outline.providers.LibrariesNodeProvider(); } return org.eclipse.birt.report.designer.ui.views.ProviderFactory.getDefaultProvider(); }
private void populateSeriesTypesList() { if ((cbSeriesType) == null) { return; } cbSeriesType.removeAll(); org.eclipse.birt.chart.model.component.Series series = getSeriesDefinitionForProcessing().getDesignTimeSeries(); if (getCurrentChartType().canCombine()) { populateSeriesTypes(org.eclipse.birt.chart.ui.swt.wizard.ChartUIExtensionsImpl.instance().getUIChartTypeExtensions(getContext().getClass().getSimpleName()), series, this.orientation); } else { java.lang.String seriesName = series.getDisplayName(); cbSeriesType.add(seriesName); cbSeriesType.select(0); } if ((this.chartModel) instanceof org.eclipse.birt.chart.model.ChartWithAxes) { org.eclipse.birt.chart.model.component.Axis xAxis = ((org.eclipse.birt.chart.model.component.Axis) (((org.eclipse.birt.chart.model.ChartWithAxes) (chartModel)).getAxes().get(0))); if ((xAxis.getAssociatedAxes().size()) > 1) { java.lang.String lastType = org.eclipse.birt.chart.ui.util.ChartCacheManager.getInstance().findSeriesType(); org.eclipse.birt.chart.model.component.Axis overlayAxis = ((org.eclipse.birt.chart.model.component.Axis) (xAxis.getAssociatedAxes().get(1))); if (!(overlayAxis.getSeriesDefinitions().isEmpty())) { org.eclipse.birt.chart.model.component.Series oseries = ((org.eclipse.birt.chart.model.data.SeriesDefinition) (overlayAxis.getSeriesDefinitions().get(0))).getDesignTimeSeries(); java.lang.String sDisplayName = oseries.getDisplayName(); if (lastType != null) { cbSeriesType.setText(lastType); } else { cbSeriesType.setText(sDisplayName); } java.lang.String seriesName = oseries.getSeriesIdentifier().toString(); if ((seriesName.trim().length()) != 0) { java.util.Iterator<java.util.Map.Entry<java.lang.String, org.eclipse.birt.chart.model.component.Series>> itr = org.eclipse.birt.chart.ui.swt.wizard.TaskSelectType.htSeriesNames.entrySet().iterator(); while (itr.hasNext()) { java.util.Map.Entry<java.lang.String, org.eclipse.birt.chart.model.component.Series> entry = itr.next(); entry.getValue().setSeriesIdentifier(seriesName); } } } changeOverlaySeriesType(); } } }
protected org.w3c.dom.Element createText(java.lang.String text) { org.w3c.dom.Element elem = dom.createElement("text"); elem.appendChild(dom.createTextNode(text)); switch (getFont().getStyle()) { case java.awt.Font.BOLD : elem.setAttribute("font-weight", "bold"); break; case java.awt.Font.ITALIC : elem.setAttribute("font-style", "italic"); break; case (java.awt.Font.BOLD) + (java.awt.Font.ITALIC) : elem.setAttribute("font-style", "italic"); elem.setAttribute("font-weight", "bold"); break; } java.lang.String textDecorator = null; java.util.Map attributes = getFont().getAttributes(); if ((attributes.get(java.awt.font.TextAttribute.UNDERLINE)) == (java.awt.font.TextAttribute.UNDERLINE_ON)) { textDecorator = "underline"; } if ((attributes.get(java.awt.font.TextAttribute.STRIKETHROUGH)) == (java.awt.font.TextAttribute.STRIKETHROUGH_ON)) { if (textDecorator == null) textDecorator = "line-through"; else textDecorator += ",line-through"; } if (textDecorator != null) elem.setAttribute("text-decoration", textDecorator); elem.setAttribute("stroke", "none"); elem.setAttribute("font-family", getFont().getFamily()); elem.setAttribute("font-size", java.lang.Integer.toString(getFont().getSize())); java.lang.String style = getRenderingStyle(java.awt.RenderingHints.KEY_TEXT_ANTIALIASING); if ((color) != null) { java.lang.String alpha = alphaToString(color); if (alpha != null) style += ("fill-opacity:" + alpha) + ";"; style += ("fill:" + (serializeToString(color))) + ";"; } elem.setAttribute("style", style); if ((transforms.getType()) != (java.awt.geom.AffineTransform.TYPE_IDENTITY)) { double[] matrix = new double[6]; transforms.getMatrix(matrix); elem.setAttribute("transform", (((((((((((("matrix(" + (matrix[0])) + ",") + (matrix[1])) + ",") + (matrix[2])) + ",") + (matrix[3])) + ",") + (matrix[4])) + ",") + (matrix[5])) + ")")); } return elem; }
public MarginsPropertyDescriptorProvider(java.lang.String property, java.lang.String element) { super(property, element); choiceSet = org.eclipse.birt.report.designer.ui.views.attributes.providers.ChoiceSetFactory.getDimensionChoiceSet(element, property); }
private static java.util.List<org.eclipse.birt.report.model.api.IVersionInfo> checkVersion(java.io.InputStream streamData, java.lang.String filename) throws org.eclipse.birt.report.model.api.DesignFileException { org.eclipse.birt.report.model.core.DesignSession session = new org.eclipse.birt.report.model.core.DesignSession(com.ibm.icu.util.ULocale.ENGLISH); byte[] buf = new byte[512]; int len; java.io.ByteArrayOutputStream bySteam = new java.io.ByteArrayOutputStream(); byte[] data = null; try { while ((len = streamData.read(buf)) > 0) { bySteam.write(buf, 0, len); bySteam.flush(); } data = bySteam.toByteArray(); bySteam.close(); } catch (java.io.IOException e1) { } try { java.io.InputStream inputStreamToParse = new java.io.ByteArrayInputStream(data); org.eclipse.birt.report.model.core.Module module = session.openModule(filename, inputStreamToParse); java.lang.String version = module.getVersionManager().getVersion(); java.util.List<org.eclipse.birt.report.model.api.IVersionInfo> retList = org.eclipse.birt.report.model.util.ModelUtil.checkVersion(version); if (org.eclipse.birt.report.model.api.ModuleUtil.hasCompatibilities(module)) retList.add(new org.eclipse.birt.report.model.util.VersionInfo(version, org.eclipse.birt.report.model.util.VersionInfo.EXTENSION_COMPATIBILITY)); return retList; } catch (org.eclipse.birt.report.model.api.DesignFileException e) { if (data != null) { org.eclipse.birt.report.model.api.ModuleUtil.VersionParserHandler handler = new org.eclipse.birt.report.model.api.ModuleUtil.VersionParserHandler(); java.io.InputStream inputStreamToParse = new java.io.ByteArrayInputStream(data); if (!(inputStreamToParse.markSupported())) inputStreamToParse = new java.io.BufferedInputStream(streamData); org.eclipse.birt.report.model.api.ModuleUtil.parse(handler, inputStreamToParse, filename); return org.eclipse.birt.report.model.util.ModelUtil.checkVersion(handler.version); } return java.util.Collections.emptyList(); } }
public void transform(org.eclipse.birt.report.engine.content.ITextContent textContent) { java.lang.String transformType = textContent.getComputedStyle().getTextTransform(); if (transformType.equalsIgnoreCase("uppercase")) { textContent.setText(textContent.getText().toUpperCase()); } else if (transformType.equalsIgnoreCase("lowercase")) { textContent.setText(textContent.getText().toLowerCase()); } else if (transformType.equalsIgnoreCase("capitalize")) { textContent.setText(capitalize(textContent.getText())); } com.ibm.icu.text.ArabicShaping shaping = new com.ibm.icu.text.ArabicShaping(com.ibm.icu.text.ArabicShaping.LETTERS_SHAPE); try { java.lang.String shapingText = shaping.shape(textContent.getText()); textContent.setText(shapingText); } catch (com.ibm.icu.text.ArabicShapingException e) { logger.log(java.util.logging.Level.WARNING, e.getMessage(), e); } }
public boolean canContain(java.lang.String propName, java.lang.String type) { if ((org.eclipse.birt.report.model.api.util.StringUtil.isBlank(type)) || (org.eclipse.birt.report.model.api.util.StringUtil.isBlank(propName))) return false; org.eclipse.birt.report.model.api.metadata.IElementPropertyDefn defn = getPropertyDefn(propName); if (defn == null) return false; return new org.eclipse.birt.report.model.core.ContainerContext(getElement(), propName).canContain(getModule(), type); }
public static void prepareParameterBean(org.eclipse.birt.report.service.api.IViewerReportDesignHandle designHandle, org.eclipse.birt.report.service.api.IViewerReportService service, javax.servlet.http.HttpServletRequest request, org.eclipse.birt.report.context.ScalarParameterBean parameterBean, org.eclipse.birt.report.service.api.ParameterDefinition parameter, java.util.Locale locale, boolean isDesigner) throws org.eclipse.birt.report.service.api.ReportServiceException { java.lang.String displayName = parameter.getPromptText(); displayName = ((displayName == null) || ((displayName.length()) <= 0)) ? parameter.getDisplayName() : displayName; displayName = ((displayName == null) || ((displayName.length()) <= 0)) ? parameter.getName() : displayName; displayName = org.eclipse.birt.report.utility.ParameterAccessor.htmlEncode(displayName); parameterBean.setDisplayName(displayName); org.eclipse.birt.report.context.ViewerAttributeBean attrBean = ((org.eclipse.birt.report.context.ViewerAttributeBean) (request.getAttribute(IBirtConstants.ATTRIBUTE_BEAN))); assert attrBean != null; java.lang.Object paramValueObj = null; java.lang.String parameterValue = null; if ((attrBean.getParametersAsString()) != null) paramValueObj = attrBean.getParametersAsString().get(parameterBean.getName()); if (paramValueObj != null) { if (paramValueObj instanceof java.util.Date) { parameterValue = org.eclipse.birt.report.model.api.util.ParameterValidationUtil.getDisplayValue(paramValueObj); } else { parameterValue = paramValueObj.toString(); } } else if ((!(parameter.allowNull())) && (parameter.allowBlank())) { parameterValue = ""; } switch (parameter.getDataType()) { case org.eclipse.birt.report.service.api.ParameterDefinition.TYPE_STRING : { parameterBean.setRequired(false); if ((parameterValue == null) && (!(parameter.allowNull()))) { parameterBean.setRequired(true); } else if (((parameterValue != null) && ((parameterValue.trim().length()) <= 0)) && (!(parameter.allowBlank()))) { parameterBean.setRequired(true); } break; } default : { parameterBean.setRequired((paramValueObj == null)); break; } } org.eclipse.birt.report.model.api.ScalarParameterHandle parameterHandle = ((org.eclipse.birt.report.model.api.ScalarParameterHandle) (attrBean.findParameter(parameter.getName()))); java.util.Map configMap = attrBean.getParameters(); if ((configMap != null) && (configMap.containsKey(parameter.getName()))) { java.lang.Object configObj = configMap.get(parameter.getName()); if ((configObj != null) && ((parameter.getControlType()) == (org.eclipse.birt.report.service.api.ParameterDefinition.TEXT_BOX))) { parameterValue = org.eclipse.birt.report.model.api.util.ParameterValidationUtil.getDisplayValue(null, parameterHandle.getPattern(), configObj, attrBean.getLocale()); } } parameterBean.setValue(parameterValue); parameterBean.setDefaultValue(org.eclipse.birt.report.utility.DataUtil.getDefaultValue(parameterHandle.getDataType(), parameterHandle.getDefaultValue())); }
public void buildContextMenu(org.eclipse.jface.action.IMenuManager menuManager) { if ((proxy) != null) { proxy.menuAboutToShow(menuManager); proxy = null; return; } org.eclipse.gef.ui.actions.GEFActionConstants.addStandardActionGroups(menuManager); java.lang.Object firstSelectedElement = getFirstElement(); java.lang.Object selectedElements = getSelectedElement(); java.lang.Object multiSelection = getMultiSelectedElement(); boolean isExtended = false; if (firstSelectedElement instanceof org.eclipse.core.runtime.IAdaptable) { if ((((org.eclipse.core.runtime.IAdaptable) (firstSelectedElement)).getAdapter(org.eclipse.birt.report.model.api.DesignElementHandle.class)) instanceof org.eclipse.birt.report.model.api.ExtendedItemHandle) isExtended = true; } if (isMutilSelection(multiSelection)) { menuManager.appendToGroup(GEFActionConstants.GROUP_UNDO, getAction(ActionFactory.UNDO.getId())); menuManager.appendToGroup(GEFActionConstants.GROUP_UNDO, getAction(ActionFactory.REDO.getId())); menuManager.appendToGroup(GEFActionConstants.GROUP_COPY, new org.eclipse.birt.report.designer.internal.ui.views.actions.CutAction(selectedElements)); menuManager.appendToGroup(GEFActionConstants.GROUP_COPY, new org.eclipse.birt.report.designer.internal.ui.views.actions.CopyAction(selectedElements)); menuManager.appendToGroup(GEFActionConstants.GROUP_COPY, new org.eclipse.birt.report.designer.internal.ui.views.actions.PasteAction(selectedElements)); menuManager.appendToGroup(GEFActionConstants.GROUP_COPY, getAction(ActionFactory.DELETE.getId())); if (isRootElementHandleClass(multiSelection)) { org.eclipse.jface.action.Action action = new org.eclipse.birt.report.designer.internal.ui.views.actions.RefreshModuleHandleAction(selectedElements); menuManager.add(action); createInsertElementMenu(menuManager, GEFActionConstants.GROUP_EDIT); createThemeMenu(menuManager, GEFActionConstants.GROUP_REST); action = new org.eclipse.birt.report.designer.internal.ui.views.actions.ExportToLibraryAction(selectedElements); menuManager.add(action); } if (isListHandleCalss(multiSelection)) { org.eclipse.jface.action.IAction action = getAction(CreatePlaceHolderPartAction.ID); menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT, action); } createStyleMenu(menuManager, GEFActionConstants.GROUP_REST); if (org.eclipse.birt.report.designer.internal.ui.util.Policy.TRACING_MENU_SHOW) { java.lang.System.out.println("Menu(for Editor) >> Shows for multi-selcetion."); } } else if ((firstSelectedElement instanceof org.eclipse.birt.report.model.api.DesignElementHandle) || isExtended) { menuManager.appendToGroup(GEFActionConstants.GROUP_UNDO, getAction(ActionFactory.UNDO.getId())); menuManager.appendToGroup(GEFActionConstants.GROUP_UNDO, getAction(ActionFactory.REDO.getId())); menuManager.appendToGroup(GEFActionConstants.GROUP_COPY, new org.eclipse.birt.report.designer.internal.ui.views.actions.CutAction(selectedElements)); menuManager.appendToGroup(GEFActionConstants.GROUP_COPY, new org.eclipse.birt.report.designer.internal.ui.views.actions.CopyAction(selectedElements)); menuManager.appendToGroup(GEFActionConstants.GROUP_COPY, new org.eclipse.birt.report.designer.internal.ui.views.actions.PasteAction(selectedElements)); createStyleMenu(menuManager, GEFActionConstants.GROUP_REST); if ((((org.eclipse.jface.viewers.IStructuredSelection) (getSelection())).size()) == 1) { java.lang.Object element = ((org.eclipse.jface.viewers.IStructuredSelection) (getSelection())).getFirstElement(); if ((element instanceof org.eclipse.birt.report.designer.internal.ui.editors.schematic.editparts.LabelEditPart) || (element instanceof org.eclipse.birt.report.designer.internal.ui.editors.schematic.editparts.ImageEditPart)) { if (element instanceof org.eclipse.birt.report.designer.internal.ui.editors.schematic.editparts.DataEditPart) { org.eclipse.jface.action.IAction action = getAction(ChangeDataColumnPartAction.ID); menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT, action); } org.eclipse.jface.action.IAction action = getAction(GEFActionConstants.DIRECT_EDIT); action.setAccelerator(SWT.F2); if (element instanceof org.eclipse.birt.report.designer.internal.ui.editors.schematic.editparts.DataEditPart) { action.setText(org.eclipse.birt.report.designer.nls.Messages.getString("SchematicContextMenuProvider.ActionText.editData")); } else { action.setText(org.eclipse.birt.report.designer.nls.Messages.getString("SchematicContextMenuProvider.ActionText.editLabel")); } menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT, action); if (element instanceof org.eclipse.birt.report.designer.internal.ui.editors.schematic.editparts.ImageEditPart) { action = getAction(ResetImageSizeAction.ID); menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT, action); } } if (firstSelectedElement instanceof org.eclipse.birt.report.model.api.ReportItemHandle) { org.eclipse.jface.action.IAction action = getAction(CreatePlaceHolderPartAction.ID); menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT, action); } if (firstSelectedElement instanceof org.eclipse.birt.report.model.api.TemplateReportItemHandle) { org.eclipse.jface.action.IAction action = getAction(RevertToReportItemPartAction.ID); menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT, action); } java.lang.Object[] objs = org.eclipse.birt.report.designer.ui.views.ElementAdapterManager.getAdapters(firstSelectedElement, org.eclipse.birt.report.designer.ui.extensions.IReportItemViewProvider.class); if ((objs != null) && ((objs.length) == 1)) { org.eclipse.jface.action.IAction action = getAction(CreateChartAction.ID); menuManager.appendToGroup(GEFActionConstants.GROUP_VIEW, action); } } if (firstSelectedElement instanceof org.eclipse.birt.report.model.api.RowHandle) { if ((getRowHandles().size()) != 0) { org.eclipse.jface.action.MenuManager insertMenu = new org.eclipse.jface.action.MenuManager(org.eclipse.birt.report.designer.internal.ui.editors.schematic.providers.SchematicContextMenuProvider.INSERT_MENU_ITEM_TEXT); org.eclipse.jface.action.MenuManager rowMenu = new org.eclipse.jface.action.MenuManager(org.eclipse.birt.report.designer.internal.ui.editors.schematic.providers.SchematicContextMenuProvider.INSERT_ROW_MENU_ITEM_TEXT); rowMenu.add(getAction(InsertRowAboveAction.ID)); rowMenu.add(getAction(InsertRowBelowAction.ID)); org.eclipse.birt.report.model.api.RowHandle row = ((org.eclipse.birt.report.model.api.RowHandle) (getRowHandles().get(0))); if (!((row.getContainer()) instanceof org.eclipse.birt.report.model.api.GridHandle)) { insertMenu.add(getAction(IncludeHeaderAction.ID)); insertMenu.add(getAction(IncludeDetailAction.ID)); insertMenu.add(getAction(IncludeFooterAction.ID)); } insertMenu.add(rowMenu); menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT, insertMenu); } menuManager.appendToGroup(GEFActionConstants.GROUP_COPY, getAction(DeleteRowAction.ID)); menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT, getAction(MergeAction.ID)); menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT, getAction(SplitAction.ID)); } else if (firstSelectedElement instanceof org.eclipse.birt.report.model.api.ColumnHandle) { menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT, new org.eclipse.birt.report.designer.ui.actions.InsertPasteColumnAction(selectedElements)); if ((getColumnHandles().size()) != 0) { org.eclipse.jface.action.MenuManager subMenu = new org.eclipse.jface.action.MenuManager(org.eclipse.birt.report.designer.internal.ui.editors.schematic.providers.SchematicContextMenuProvider.INSERT_MENU_ITEM_TEXT); subMenu.add(getAction(InsertColumnRightAction.ID)); subMenu.add(getAction(InsertColumnLeftAction.ID)); menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT, subMenu); } menuManager.appendToGroup(GEFActionConstants.GROUP_COPY, getAction(DeleteColumnAction.ID)); menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT, getAction(MergeAction.ID)); menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT, getAction(SplitAction.ID)); } else if (firstSelectedElement instanceof org.eclipse.birt.report.model.api.CellHandle) { createInsertElementMenu(menuManager, GEFActionConstants.GROUP_EDIT); menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT, getAction(CopyCellContentsContextAction.ID)); menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT, getAction(MergeAction.ID)); menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT, getAction(SplitAction.ID)); menuManager.appendToGroup(GEFActionConstants.GROUP_COPY, new org.eclipse.birt.report.designer.internal.ui.views.actions.DeleteAction(selectedElements)); } else { menuManager.appendToGroup(GEFActionConstants.GROUP_COPY, getAction(ActionFactory.DELETE.getId())); } menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT, getAction(ExportElementToLibraryPartAction.ID)); if (org.eclipse.birt.report.designer.internal.ui.util.Policy.TRACING_MENU_SHOW) { java.lang.System.out.println(("Menu(for Editor) >> Shows for " + (((org.eclipse.birt.report.model.api.DesignElementHandle) (firstSelectedElement)).getDefn().getDisplayName()))); } } else if (firstSelectedElement instanceof org.eclipse.birt.report.model.api.SlotHandle) { menuManager.appendToGroup(GEFActionConstants.GROUP_UNDO, getAction(ActionFactory.UNDO.getId())); menuManager.appendToGroup(GEFActionConstants.GROUP_UNDO, getAction(ActionFactory.REDO.getId())); menuManager.appendToGroup(GEFActionConstants.GROUP_COPY, new org.eclipse.birt.report.designer.internal.ui.views.actions.CutAction(selectedElements)); menuManager.appendToGroup(GEFActionConstants.GROUP_COPY, new org.eclipse.birt.report.designer.internal.ui.views.actions.CopyAction(selectedElements)); menuManager.appendToGroup(GEFActionConstants.GROUP_COPY, new org.eclipse.birt.report.designer.internal.ui.views.actions.PasteAction(selectedElements)); menuManager.appendToGroup(GEFActionConstants.GROUP_COPY, new org.eclipse.birt.report.designer.internal.ui.views.actions.DeleteAction(selectedElements)); createInsertElementMenu(menuManager, GEFActionConstants.GROUP_EDIT); if (org.eclipse.birt.report.designer.internal.ui.util.Policy.TRACING_MENU_SHOW) { java.lang.System.out.println(((("Menu(for Editor) >> Shows for the slot " + (((org.eclipse.birt.report.model.api.SlotHandle) (firstSelectedElement)).getSlotID())) + " of ") + (((org.eclipse.birt.report.model.api.SlotHandle) (firstSelectedElement)).getElementHandle().getDefn().getDisplayName()))); } } else { } if ((!(getTableEditParts().isEmpty())) || (!(getTableMultipleEditParts().isEmpty()))) { if (firstSelectedElement instanceof org.eclipse.birt.report.model.api.TableHandle) { org.eclipse.jface.action.MenuManager insertMenu = new org.eclipse.jface.action.MenuManager(org.eclipse.birt.report.designer.nls.Messages.getString("TableBandProvider.action.text.row")); insertMenu.add(getAction(IncludeHeaderAction.ID)); insertMenu.add(getAction(IncludeDetailAction.ID)); insertMenu.add(getAction(IncludeFooterAction.ID)); menuManager.appendToGroup(GEFActionConstants.GROUP_ADD, insertMenu); } createInsertGroupMenu(menuManager, GEFActionConstants.GROUP_ADD); if (((getTableEditParts().size()) == 1) || ((getTableMultipleEditParts().size()) == 1)) { createDeleteGroupMenus(menuManager, GEFActionConstants.GROUP_ADD); createEditGroupMenu(menuManager, GEFActionConstants.GROUP_ADD); createInsertGroupHeaderFooter(menuManager, GEFActionConstants.GROUP_ADD); org.eclipse.jface.action.Separator separator = new org.eclipse.jface.action.Separator(org.eclipse.birt.report.designer.internal.ui.editors.schematic.actions.EditBindingAction.ID); menuManager.add(separator); menuManager.appendToGroup(EditBindingAction.ID, getAction(EditBindingAction.ID)); } } if (!(getListEditParts().isEmpty())) { createInsertGroupMenu(menuManager, GEFActionConstants.GROUP_ADD); if ((getListEditParts().size()) == 1) { createDeleteGroupMenus(menuManager, GEFActionConstants.GROUP_ADD); createEditGroupMenu(menuManager, GEFActionConstants.GROUP_ADD); org.eclipse.jface.action.Separator separator = new org.eclipse.jface.action.Separator(org.eclipse.birt.report.designer.internal.ui.editors.schematic.actions.EditBindingAction.ID); menuManager.add(separator); menuManager.appendToGroup(EditBindingAction.ID, getAction(EditBindingAction.ID)); } } if (((getElements().size()) == 1) || (isMutilSelection(multiSelection))) { if (firstSelectedElement instanceof org.eclipse.birt.report.model.api.DesignElementHandle) { java.lang.String elementName = ((org.eclipse.birt.report.model.api.DesignElementHandle) (firstSelectedElement)).getDefn().getName(); org.eclipse.birt.report.designer.ui.extensions.IMenuBuilder menuBuilder = org.eclipse.birt.report.designer.internal.ui.extension.ExtensionPointManager.getInstance().getMenuBuilder(elementName); if (menuBuilder != null) { menuBuilder.buildMenu(menuManager, getElements()); } } java.lang.Object[] menuAdapters = org.eclipse.birt.report.designer.ui.views.ElementAdapterManager.getAdapters(firstSelectedElement, org.eclipse.jface.action.IMenuListener.class); if ((menuAdapters != null) && ((menuAdapters.length) > 0)) { for (int i = 0; i < (menuAdapters.length); i++) { if ((menuAdapters[i]) instanceof org.eclipse.birt.report.designer.internal.ui.editors.schematic.providers.ISchematicMenuListener) { ((org.eclipse.birt.report.designer.internal.ui.editors.schematic.providers.ISchematicMenuListener) (menuAdapters[i])).setActionRegistry(getActionRegistry()); } ((org.eclipse.jface.action.IMenuListener) (menuAdapters[i])).menuAboutToShow(menuManager); } } } }
public static boolean includeLibrary(org.eclipse.birt.report.model.api.ModuleHandle moduleHandle, org.eclipse.birt.report.model.api.LibraryHandle libraryHandle) throws org.eclipse.birt.report.model.api.DesignFileException, org.eclipse.birt.report.model.api.activity.SemanticException { if ((moduleHandle != libraryHandle) && (!(moduleHandle.isInclude(libraryHandle)))) { return org.eclipse.birt.report.designer.internal.ui.util.UIUtil.includeLibrary(moduleHandle, libraryHandle.getFileName()); } return false; }
protected void openQuery(org.eclipse.birt.report.engine.content.IContent content) { java.lang.Object generateBy = content.getGenerateBy(); if (generateBy instanceof org.eclipse.birt.report.engine.ir.ReportItemDesign) { if (!(generateBy instanceof org.eclipse.birt.report.engine.ir.ExtendedItemDesign)) { org.eclipse.birt.report.engine.api.InstanceID iid = content.getInstanceID(); if (iid != null) { org.eclipse.birt.report.engine.api.DataID dataId = iid.getDataID(); if (dataId != null) { org.eclipse.birt.report.engine.api.DataSetID dataSetId = dataId.getDataSetID(); if (dataSetId != null) { org.eclipse.birt.report.engine.api.DataSetID parentSetId = dataSetId.getParentID(); long parentRowId = dataSetId.getRowID(); if ((parentSetId != null) && (parentRowId != (-1))) { if (!(resultSets.isEmpty())) { org.eclipse.birt.report.engine.data.IResultSet rset = ((org.eclipse.birt.report.engine.data.IResultSet) (resultSets.peek())); if (rset != null) { if (parentRowId != (rset.getCurrentPosition())) { rset.skipTo(parentRowId); } } } } } } } org.eclipse.birt.report.engine.ir.ReportItemDesign design = ((org.eclipse.birt.report.engine.ir.ReportItemDesign) (generateBy)); org.eclipse.birt.data.engine.api.IBaseQueryDefinition query = design.getQuery(); if (query != null) { org.eclipse.birt.report.engine.data.IResultSet rset = dataEngine.execute(query); resultSets.push(rset); } } } org.eclipse.birt.report.engine.api.InstanceID iid = content.getInstanceID(); if (iid != null) { org.eclipse.birt.report.engine.api.DataID dataId = iid.getDataID(); while ((dataId == null) && ((iid.getParentID()) != null)) { iid = iid.getParentID(); dataId = iid.getDataID(); } if (dataId != null) { if (!(resultSets.isEmpty())) { org.eclipse.birt.report.engine.data.IResultSet rset = ((org.eclipse.birt.report.engine.data.IResultSet) (resultSets.peek())); if (rset != null) { long rowId = dataId.getRowID(); if ((rowId != (-1)) && (rowId != (rset.getCurrentPosition()))) { rset.skipTo(rowId); } } } } } if ((generateBy instanceof org.eclipse.birt.report.engine.ir.DataItemDesign) && (content instanceof org.eclipse.birt.report.engine.content.impl.DataContent)) { org.eclipse.birt.report.engine.ir.DataItemDesign design = ((org.eclipse.birt.report.engine.ir.DataItemDesign) (generateBy)); org.eclipse.birt.report.engine.content.impl.DataContent data = ((org.eclipse.birt.report.engine.content.impl.DataContent) (content)); if ((design.getMap()) == null) { java.lang.String valueExpr = design.getValue(); if (valueExpr != null) { java.lang.Object value = context.evaluate(valueExpr); data.setValue(value); } } } }
private java.lang.String[] getDataSetColumns(org.eclipse.birt.report.model.api.ScalarParameterHandle handle) { if ((dataSet) == null) { return new java.lang.String[0]; } org.eclipse.birt.report.designer.core.model.views.data.DataSetItemModel[] models = org.eclipse.birt.report.designer.internal.ui.util.DataSetManager.getCurrentInstance().getColumns(dataSet, false); if (models == null) { return new java.lang.String[0]; } java.util.ArrayList valueList = new java.util.ArrayList(models.length); for (int i = 0; i < (models.length); i++) { if ((handle == null) || (matchDataType(handle, models[i]))) { valueList.add(((models[i].getAlias()) == null ? models[i].getName() : models[i].getAlias())); } } return ((java.lang.String[]) (valueList.toArray(new java.lang.String[0]))); }
private void synchronize(double height) { org.eclipse.birt.report.engine.emitter.excel.layout.XlsContainer rowContainer = getCurrentContainer(); org.eclipse.birt.report.engine.emitter.excel.layout.ContainerSizeInfo rowSizeInfo = rowContainer.getSizeInfo(); int startCoordinate = rowSizeInfo.getStartCoordinate(); int endCoordinate = rowSizeInfo.getEndCoordinate(); int startColumnIndex = axis.getColumnIndexByCoordinate(startCoordinate); int endColumnIndex = axis.getColumnIndexByCoordinate(endCoordinate); int maxRowIndex = 0; int[] rowIndexes = new int[endColumnIndex - startColumnIndex]; for (int currentColumnIndex = startColumnIndex; currentColumnIndex < endColumnIndex; currentColumnIndex++) { int rowIndex = cache.getMaxRowIndex(currentColumnIndex); org.eclipse.birt.report.engine.emitter.excel.SheetData lastData = cache.getColumnLastData(currentColumnIndex); rowIndexes[(currentColumnIndex - startColumnIndex)] = rowIndex; int span = (lastData != null) ? lastData.getRowSpanInDesign() : 0; if ((span == 0) || ((span == 1) && (!(isInContainer(lastData, rowContainer))))) { maxRowIndex = (maxRowIndex > rowIndex) ? maxRowIndex : rowIndex; } } int startRowIndex = rowContainer.getRowIndex(); if (maxRowIndex == startRowIndex) { maxRowIndex++; } rowContainer.setRowIndex(maxRowIndex); double resize = height / (maxRowIndex - startRowIndex); for (int i = startRowIndex; i < maxRowIndex; i++) { cache.setRowHeight(i, resize); } for (int currentColumnIndex = startColumnIndex; currentColumnIndex < endColumnIndex; currentColumnIndex++) { int rowspan = maxRowIndex - (rowIndexes[(currentColumnIndex - startColumnIndex)]); org.eclipse.birt.report.engine.emitter.excel.SheetData upstair = cache.getColumnLastData(currentColumnIndex); if (rowspan > 0) { if ((upstair != null) && (canSpan(upstair, rowContainer))) { org.eclipse.birt.report.engine.emitter.excel.BlankData.Type blankType = org.eclipse.birt.report.engine.emitter.excel.BlankData.Type.VERTICAL; if (upstair.isBlank()) { org.eclipse.birt.report.engine.emitter.excel.BlankData blankData = ((org.eclipse.birt.report.engine.emitter.excel.BlankData) (upstair)); if ((blankData.getType()) == (org.eclipse.birt.report.engine.emitter.excel.BlankData.Type.VERTICAL)) { upstair.setRowSpan(((upstair.getRowSpan()) + rowspan)); if (!(isInContainer(blankData, rowContainer))) { upstair.decreasRowSpanInDesign(); } } blankType = blankData.getType(); } else { upstair.setRowSpan(((upstair.getRowSpan()) + rowspan)); if (!(isInContainer(upstair, rowContainer))) { upstair.decreasRowSpanInDesign(); } } int rowIndex = upstair.getRowIndex(); for (int p = 1; p <= rowspan; p++) { org.eclipse.birt.report.engine.emitter.excel.BlankData blank = new org.eclipse.birt.report.engine.emitter.excel.BlankData(upstair); blank.setRowIndex((rowIndex + p)); blank.setType(blankType); cache.addData(currentColumnIndex, blank); } } } else if (((upstair.getRowSpanInDesign()) > 0) && (!(isInContainer(upstair, rowContainer)))) { upstair.decreasRowSpanInDesign(); } } }
public java.lang.String doSelection(java.lang.String input) { java.lang.String retValue = null; org.eclipse.birt.report.designer.ui.dialogs.ExpressionBuilder dialog = new org.eclipse.birt.report.designer.ui.dialogs.ExpressionBuilder(org.eclipse.ui.PlatformUI.getWorkbench().getDisplay().getActiveShell(), input); if (groupBtn.getSelection()) { dialog.setExpressionProvier(new org.eclipse.birt.report.item.crosstab.internal.ui.dialogs.CrosstabFilterExpressionProvider(designHandle)); } else { dialog.setExpressionProvier(new org.eclipse.birt.report.item.crosstab.internal.ui.dialogs.CrosstabExpressionProvider(designHandle, null) { protected java.util.List getChildrenList(java.lang.Object parent) { if (parent instanceof org.eclipse.birt.report.model.api.olap.TabularDimensionHandle) { org.eclipse.birt.report.model.api.olap.TabularDimensionHandle handle = ((org.eclipse.birt.report.model.api.olap.TabularDimensionHandle) (parent)); return java.util.Arrays.asList(new org.eclipse.birt.report.designer.ui.cubebuilder.provider.TabularDimensionNodeProvider().getChildren(handle)); } else if (parent instanceof org.eclipse.birt.report.model.api.olap.TabularLevelHandle) { org.eclipse.birt.report.model.api.olap.TabularLevelHandle handle = ((org.eclipse.birt.report.model.api.olap.TabularLevelHandle) (parent)); return java.util.Arrays.asList(new org.eclipse.birt.report.designer.ui.cubebuilder.provider.TabularLevelNodeProvider().getChildren(handle)); } return super.getChildrenList(parent); } protected void addFilterToProvider() { addFilter(new org.eclipse.birt.report.designer.ui.expressions.ExpressionFilter() { public boolean select(java.lang.Object parentElement, java.lang.Object element) { if (((parentElement instanceof java.lang.String) && (((java.lang.String) (parentElement)).equals(org.eclipse.birt.report.item.crosstab.ui.views.dialogs.CURRENT_CUBE))) && (element instanceof org.eclipse.birt.report.model.api.PropertyHandle)) { org.eclipse.birt.report.model.api.PropertyHandle handle = ((org.eclipse.birt.report.model.api.PropertyHandle) (element)); if (handle.getPropertyDefn().getName().equals(ICubeModel.MEASURE_GROUPS_PROP)) { return false; } } return true; } }); } }); } if ((dialog.open()) == (org.eclipse.jface.dialogs.IDialogConstants.OK_ID)) { retValue = dialog.getResult(); } return retValue; }
private java.util.List convertParamterBindings(java.util.Iterator paramBindingIt) { if (paramBindingIt == null) return null; java.util.List parameterBindings = new java.util.ArrayList(); while (paramBindingIt.hasNext()) { java.lang.Object paramObj = paramBindingIt.next(); if (paramObj instanceof org.eclipse.birt.report.model.api.ParamBindingHandle) { org.eclipse.birt.report.model.api.ParamBindingHandle paramBinding = ((org.eclipse.birt.report.model.api.ParamBindingHandle) (paramObj)); if ((paramBinding.getExpression()) != null) { org.eclipse.birt.data.engine.api.querydefn.ScriptExpression paramValueExpr = new org.eclipse.birt.data.engine.api.querydefn.ScriptExpression(paramBinding.getExpression()); org.eclipse.birt.data.engine.api.querydefn.InputParameterBinding inputParamBinding = new org.eclipse.birt.data.engine.api.querydefn.InputParameterBinding(paramBinding.getParamName(), paramValueExpr); parameterBindings.add(inputParamBinding); } } else if (paramObj instanceof org.eclipse.birt.report.model.api.OdaDataSetParameterHandle) { org.eclipse.birt.report.model.api.OdaDataSetParameterHandle paramBinding = ((org.eclipse.birt.report.model.api.OdaDataSetParameterHandle) (paramObj)); if ((paramBinding.getDefaultValue()) != null) { org.eclipse.birt.data.engine.api.querydefn.ScriptExpression paramValueExpr = new org.eclipse.birt.data.engine.api.querydefn.ScriptExpression(paramBinding.getDefaultValue()); org.eclipse.birt.data.engine.api.querydefn.InputParameterBinding inputParamBinding = new org.eclipse.birt.data.engine.api.querydefn.InputParameterBinding(paramBinding.getName(), paramValueExpr); parameterBindings.add(inputParamBinding); } } } return parameterBindings; }
private java.lang.Object validateValue(java.lang.String value, java.lang.String type) throws org.eclipse.birt.core.exception.BirtException { java.lang.String tempdefaultValue = value; java.lang.String exprType = org.eclipse.birt.report.model.api.ExpressionType.CONSTANT; if (type != null) exprType = type; if (!((DesignChoiceConstants.PARAM_TYPE_STRING.endsWith(getSelectedDataType())) || (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.endsWith(getSelectedDataType())))) { if (ExpressionType.CONSTANT.equals(exprType)) { if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(getSelectedDataType())) { tempdefaultValue = org.eclipse.birt.report.designer.ui.parameters.ParameterUtil.convertToStandardFormat(org.eclipse.birt.core.data.DataTypeUtil.toDate(tempdefaultValue)); } else if (DesignChoiceConstants.PARAM_TYPE_DATE.equals(getSelectedDataType())) { tempdefaultValue = org.eclipse.birt.report.designer.ui.parameters.ParameterUtil.convertToStandardFormat(org.eclipse.birt.core.data.DataTypeUtil.toSqlDate(tempdefaultValue)); } else if (DesignChoiceConstants.PARAM_TYPE_TIME.equals(getSelectedDataType())) { tempdefaultValue = org.eclipse.birt.report.designer.ui.parameters.ParameterUtil.convertToStandardFormat(org.eclipse.birt.core.data.DataTypeUtil.toSqlTime(tempdefaultValue)); } return org.eclipse.birt.report.model.api.util.ParameterValidationUtil.validate(getSelectedDataType(), ParameterUtil.STANDARD_DATE_TIME_PATTERN, tempdefaultValue, com.ibm.icu.util.ULocale.getDefault()); } else return tempdefaultValue; } if (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equals(getSelectedDataType())) { if ((tempdefaultValue != null) && (tempdefaultValue.equals(org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.CHOICE_NO_DEFAULT))) { return org.eclipse.birt.core.data.DataTypeUtil.toBoolean(null); } if (ExpressionType.CONSTANT.equals(exprType)) return org.eclipse.birt.core.data.DataTypeUtil.toBoolean(tempdefaultValue); else return tempdefaultValue; } else return tempdefaultValue; }
public static org.eclipse.birt.report.engine.emitter.excel.layout.TableInfo createTable(org.eclipse.birt.report.engine.content.ITableContent table, int width) { width = org.eclipse.birt.report.engine.emitter.excel.layout.LayoutUtil.getElementWidth(table, width); int colcount = table.getColumnCount(); if (colcount == 0) { return null; } int[] index = new int[colcount]; int know = 0; java.util.List unmount = new java.util.ArrayList(); for (int i = 0; i < colcount; i++) { org.eclipse.birt.report.engine.ir.DimensionType value = table.getColumn(i).getWidth(); if (value == null) { unmount.add(new java.lang.Integer(i)); } else { try { index[i] = org.eclipse.birt.report.engine.emitter.excel.ExcelUtil.covertDimensionType(value, width); know += index[i]; } catch (java.lang.IllegalArgumentException ex) { unmount.add(new java.lang.Integer(i)); } } } int left = width - know; if ((left > 0) && ((unmount.size()) == 0)) { index[((index.length) - 1)] = (index[((index.length) - 1)]) + left; return new org.eclipse.birt.report.engine.emitter.excel.layout.DefaultTableInfo(index); } else if (left < 0) { return new org.eclipse.birt.report.engine.emitter.excel.layout.DefaultTableInfo(org.eclipse.birt.report.engine.emitter.excel.layout.LayoutUtil.split(width, colcount)); } else if ((left > 0) && ((unmount.size()) > 0)) { int[] size = org.eclipse.birt.report.engine.emitter.excel.layout.LayoutUtil.split(left, unmount.size()); java.util.Iterator iter = unmount.iterator(); int i = 0; while (iter.hasNext()) { int pos = ((java.lang.Integer) (iter.next())).intValue(); index[pos] = size[i]; i++; } return new org.eclipse.birt.report.engine.emitter.excel.layout.DefaultTableInfo(index); } else { return new org.eclipse.birt.report.engine.emitter.excel.layout.DefaultTableInfo(index); } }
public org.eclipse.swt.widgets.Control createContents(org.eclipse.swt.widgets.Composite parent) { initPropertyBinding(); int size = bindingName.size(); org.eclipse.swt.widgets.Composite composite = new org.eclipse.swt.widgets.Composite(parent, org.eclipse.swt.SWT.NONE); composite.setLayout(new org.eclipse.swt.layout.GridLayout(3, false)); org.eclipse.swt.layout.GridData gridData = new org.eclipse.swt.layout.GridData(((org.eclipse.swt.layout.GridData.HORIZONTAL_ALIGN_FILL) | (org.eclipse.swt.layout.GridData.VERTICAL_ALIGN_FILL))); composite.setLayoutData(gridData); org.eclipse.swt.widgets.Label nameLabel; org.eclipse.swt.widgets.Text propertyText = null; for (int i = 0; i < size; i++) { nameLabel = new org.eclipse.swt.widgets.Label(composite, org.eclipse.swt.SWT.NONE); nameLabel.setText((((java.lang.String) (displayName.get(i))) + (org.eclipse.birt.report.designer.nls.Messages.getString("PropertyBindingPage.label.colon")))); nameLabelList.add(nameLabel); org.eclipse.swt.layout.GridData data = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_HORIZONTAL); if (((java.lang.String) (bindingName.get(i))).equals(QUERYTEXT)) { propertyText = new org.eclipse.swt.widgets.Text(composite, (((org.eclipse.swt.SWT.BORDER) | (org.eclipse.swt.SWT.V_SCROLL)) | (org.eclipse.swt.SWT.H_SCROLL))); data.heightHint = 100; } else if (((java.lang.String) (bindingName.get(i))).equals(PASSWORD)) { propertyText = new org.eclipse.swt.widgets.Text(composite, org.eclipse.swt.SWT.BORDER); if ((ds) instanceof org.eclipse.birt.report.model.api.DesignElementHandle) { org.eclipse.birt.report.model.api.Expression expr = ((org.eclipse.birt.report.model.api.DesignElementHandle) (ds)).getPropertyBindingExpression(((java.lang.String) (bindingName.get(i)))); if ((expr != null) && (ExpressionType.CONSTANT.equals(expr.getType()))) { org.eclipse.swt.widgets.Text dummy = new org.eclipse.swt.widgets.Text(composite, ((org.eclipse.swt.SWT.BORDER) | (org.eclipse.swt.SWT.PASSWORD))); propertyText.setEchoChar(dummy.getEchoChar()); dummy.dispose(); } } } else propertyText = new org.eclipse.swt.widgets.Text(composite, org.eclipse.swt.SWT.BORDER); propertyText.setLayoutData(data); propertyText.setText((((java.lang.String) (bindingValue.get(i))) == null ? "" : ((java.lang.String) (bindingValue.get(i))))); propertyTextList.add(propertyText); if ((ds) instanceof org.eclipse.birt.report.model.api.OdaDataSourceHandle) { handle = ((org.eclipse.birt.report.model.api.OdaDataSourceHandle) (ds)); org.eclipse.birt.report.model.api.OdaDataSourceHandle odsh = ((org.eclipse.birt.report.model.api.OdaDataSourceHandle) (ds)); org.eclipse.birt.report.designer.data.ui.util.Utility.setSystemHelp(composite, ((((((org.eclipse.birt.report.designer.data.ui.util.IHelpConstants.PREFIX) + "Wizard_DataSourcePropertyBinding") + "(") + (odsh.getExtensionID().replace('.', '_'))) + ")") + "_ID")); } else if ((ds) instanceof org.eclipse.birt.report.model.api.OdaDataSetHandle) { handle = ((org.eclipse.birt.report.model.api.OdaDataSetHandle) (ds)); org.eclipse.birt.report.model.api.OdaDataSourceHandle odsh = ((org.eclipse.birt.report.model.api.OdaDataSourceHandle) (((org.eclipse.birt.report.model.api.OdaDataSetHandle) (ds)).getDataSource())); org.eclipse.birt.report.designer.data.ui.util.Utility.setSystemHelp(composite, ((((((org.eclipse.birt.report.designer.data.ui.util.IHelpConstants.PREFIX) + "Wizard_DataSetPropertyBinding") + "(") + (odsh.getExtensionID().replace('.', '_'))) + ")") + "_ID")); } createExpressionButton(composite, propertyText, ((java.lang.String) (bindingName.get(i)))); } if (size <= 0) setEmptyPropertyMessages(composite); return composite; }
public void update() { org.eclipse.ui.forms.editor.FormEditor editor = org.eclipse.birt.report.designer.internal.ui.util.UIUtil.getActiveReportEditor(); setEnabled((editor != null)); if (((editor != null) && ((editor.getActivePageInstance()) != null)) && ((editor.getActivePageInstance().getId()) != null)) { setChecked(editor.getActivePageInstance().getId().equals(pageId)); } }
protected void createRoot() { super.createRoot(); org.eclipse.birt.report.engine.content.IStyle style = root.getStyle(); removeBoxProperty(root.getStyle()); style.setProperty(StyleConstants.STYLE_BACKGROUND_IMAGE, IStyle.NONE_VALUE); style.setProperty(StyleConstants.STYLE_BACKGROUND_COLOR, IStyle.AUTO_VALUE); }
public void initialize(org.eclipse.birt.report.engine.emitter.IEmitterServices services) { this.reportRunnable = services.getReportRunnable(); if ((reportRunnable) != null) { reportDesign = ((org.eclipse.birt.report.model.api.ReportDesignHandle) (reportRunnable.getDesignHandle())); } java.lang.Object renderContext = services.getRenderContext(); if ((renderContext != null) && (renderContext instanceof java.util.Map)) { java.lang.Object con = ((java.util.Map) (renderContext)).get(EngineConstants.APPCONTEXT_PDF_RENDER_CONTEXT); if (con instanceof org.eclipse.birt.report.engine.api.PDFRenderContext) { this.context = ((org.eclipse.birt.report.engine.api.PDFRenderContext) (con)); } } java.lang.Object fd = services.getOption(RenderOptionBase.OUTPUT_FILE_NAME); java.io.File file = null; try { if (fd != null) { file = new java.io.File(fd.toString()); java.io.File parent = file.getParentFile(); if ((parent != null) && (!(parent.exists()))) { parent.mkdirs(); } output = new java.io.FileOutputStream(file); } } catch (java.io.FileNotFoundException fnfe) { org.eclipse.birt.report.engine.emitter.pdf.PDFEmitter.logger.log(java.util.logging.Level.WARNING, fnfe.getMessage(), fnfe); } if ((output) == null) { java.lang.Object value = services.getOption(RenderOptionBase.OUTPUT_STREAM); if ((value != null) && (value instanceof java.io.OutputStream)) { output = ((java.io.OutputStream) (value)); } else { try { file = new java.io.File(org.eclipse.birt.report.engine.emitter.pdf.PDFEmitter.REPORT_FILE); output = new java.io.FileOutputStream(file); } catch (java.io.FileNotFoundException e) { org.eclipse.birt.report.engine.emitter.pdf.PDFEmitter.logger.log(java.util.logging.Level.SEVERE, e.getMessage(), e); } } } }
public void handleSelectionChanged(org.eclipse.jface.viewers.ISelection selection) { if (((getSourceViewer()) == null) || (!(getSourceViewer().getTextWidget().isVisible()))) { return; } if ((editorUIEnabled) == true) { saveModel(); } if (selection != null) { settingText = true; java.lang.Object[] sel = ((org.eclipse.jface.viewers.IStructuredSelection) (selection)).toArray(); if (((sel.length) == 1) && ((sel[0]) instanceof org.eclipse.birt.report.model.api.DesignElementHandle)) { editObject = sel[0]; palettePage.getSupport().setCurrentEditObject(editObject); if ((editObject) instanceof org.eclipse.birt.report.model.api.ExtendedItemHandle) { disableEditor(); cmbExpList.removeAll(); cmbItemLastSelected = null; getSourceViewer().getTextWidget().setEnabled(true); setEditorText(((org.eclipse.birt.report.model.api.ExtendedItemHandle) (editObject)).getExternalScript()); context.setVariable("this", "org.eclipse.birt.report.model.api.ExtendedItemHandle"); } else { setComboViewerInput(editObject); cmbItemLastSelected = null; setEditorText(""); if ((cmbExpList.getItemCount()) > 0) { enableEditor(); selectItemInComboExpList(((org.eclipse.jface.viewers.ISelection) (selectionMap.get(getModel())))); } else { disableEditor(); } } checkDirty(); } else { disableEditor(); cmbExpList.removeAll(); cmbItemLastSelected = null; palettePage.getSupport().setCurrentEditObject(null); } updateAnnotationLabel(((sel.length) > 0 ? sel[0] : null)); settingText = false; } }
public org.eclipse.birt.data.engine.api.IBasePreparedQuery prepare(org.eclipse.birt.data.engine.api.IDataQueryDefinition query, java.util.Map appContext) throws org.eclipse.birt.report.data.adapter.api.AdapterException { try { if (query instanceof org.eclipse.birt.data.engine.api.IQueryDefinition) return prepare(((org.eclipse.birt.data.engine.api.IQueryDefinition) (query)), (appContext == null ? this.sessionContext.getAppContext() : appContext)); else if (query instanceof org.eclipse.birt.data.engine.olap.api.query.ICubeQueryDefinition) return prepare(((org.eclipse.birt.data.engine.olap.api.query.ICubeQueryDefinition) (query))); else return null; } catch (org.eclipse.birt.core.exception.BirtException e) { throw new org.eclipse.birt.report.data.adapter.api.AdapterException(e.getLocalizedMessage()); } }
private void initBindings(org.eclipse.birt.data.engine.olap.api.query.ICubeQueryDefinition cubeQuery, org.eclipse.birt.report.model.api.olap.CubeHandle cube) throws org.eclipse.birt.core.exception.BirtException { for (java.util.Iterator<org.eclipse.birt.report.model.api.ComputedColumnHandle> bindings = org.eclipse.birt.chart.reportitem.ChartReportItemUtil.getAllColumnBindingsIterator(handle); bindings.hasNext();) { org.eclipse.birt.report.model.api.ComputedColumnHandle column = bindings.next(); org.eclipse.birt.data.engine.api.IBinding binding = new org.eclipse.birt.data.engine.api.querydefn.Binding(column.getName()); binding.setDataType(org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.adaptModelDataType(column.getDataType())); binding.setAggrFunction(((column.getAggregateFunction()) == null ? null : org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.adaptModelAggregationType(column.getAggregateFunction()))); java.lang.String expression = column.getExpression(); if (expression == null) { for (java.util.Iterator<org.eclipse.birt.report.model.api.AggregationArgumentHandle> argItr = column.argumentsIterator(); argItr.hasNext();) { org.eclipse.birt.report.model.api.AggregationArgumentHandle aah = argItr.next(); expression = aah.getValue(); if (expression != null) { binding.addArgument(aah.getName(), org.eclipse.birt.chart.reportitem.ChartReportItemUtil.newExpression(modelAdapter, aah)); } } } binding.setExpression(org.eclipse.birt.chart.reportitem.ChartReportItemUtil.newExpression(modelAdapter, column)); java.util.List<java.lang.String> lstAggOn = column.getAggregateOnList(); if ((expression == null) || ((!(bSingleChart)) && (!(lstAggOn.isEmpty())))) { addAggregateOn(binding, lstAggOn, cubeQuery, cube); } registeredBindings.put(binding.getBindingName(), binding); registeredQueries.put(binding.getBindingName(), expression); } }
public org.eclipse.birt.report.engine.css.engine.value.Value computeValue(org.eclipse.birt.report.engine.css.engine.CSSStylableElement elt, org.eclipse.birt.report.engine.css.engine.CSSEngine engine, int idx, org.eclipse.birt.report.engine.css.engine.value.Value value) { if ((value.getCssValueType()) == (org.w3c.dom.css.CSSValue.CSS_PRIMITIVE_VALUE)) { switch (value.getPrimitiveType()) { case org.w3c.dom.css.CSSPrimitiveValue.CSS_NUMBER : return value; case org.w3c.dom.css.CSSPrimitiveValue.CSS_PX : float v = value.getFloatValue(); org.eclipse.birt.report.engine.css.engine.CSSContext cx = engine.getCSSContext(); float ratio = cx.getPixelUnitToMillimeter(); return new org.eclipse.birt.report.engine.css.engine.value.FloatValue(org.w3c.dom.css.CSSPrimitiveValue.CSS_NUMBER, (((v * ratio) / 25.4F) * 72000.0F)); case org.w3c.dom.css.CSSPrimitiveValue.CSS_MM : v = value.getFloatValue(); return new org.eclipse.birt.report.engine.css.engine.value.FloatValue(org.w3c.dom.css.CSSPrimitiveValue.CSS_NUMBER, ((v / 25.4F) * 72000.0F)); case org.w3c.dom.css.CSSPrimitiveValue.CSS_CM : v = value.getFloatValue(); return new org.eclipse.birt.report.engine.css.engine.value.FloatValue(org.w3c.dom.css.CSSPrimitiveValue.CSS_NUMBER, ((v / 2.54F) * 72000.0F)); case org.w3c.dom.css.CSSPrimitiveValue.CSS_IN : v = value.getFloatValue(); return new org.eclipse.birt.report.engine.css.engine.value.FloatValue(org.w3c.dom.css.CSSPrimitiveValue.CSS_NUMBER, (v * 72000.0F)); case org.w3c.dom.css.CSSPrimitiveValue.CSS_PT : v = value.getFloatValue(); return new org.eclipse.birt.report.engine.css.engine.value.FloatValue(org.w3c.dom.css.CSSPrimitiveValue.CSS_NUMBER, (v * 1000.0F)); case org.w3c.dom.css.CSSPrimitiveValue.CSS_PC : v = value.getFloatValue(); return new org.eclipse.birt.report.engine.css.engine.value.FloatValue(org.w3c.dom.css.CSSPrimitiveValue.CSS_NUMBER, ((v * 12.0F) * 1000.0F)); case org.w3c.dom.css.CSSPrimitiveValue.CSS_EMS : v = value.getFloatValue(); org.eclipse.birt.report.engine.css.engine.value.Value fontSize = ((org.eclipse.birt.report.engine.css.engine.value.Value) (elt.getComputedStyle().getProperty(IStyle.STYLE_FONT_SIZE))); float fs = fontSize.getFloatValue(); return new org.eclipse.birt.report.engine.css.engine.value.FloatValue(org.w3c.dom.css.CSSPrimitiveValue.CSS_NUMBER, (v * fs)); case org.w3c.dom.css.CSSPrimitiveValue.CSS_EXS : v = value.getFloatValue(); fontSize = ((org.eclipse.birt.report.engine.css.engine.value.Value) (elt.getComputedStyle().getProperty(IStyle.STYLE_FONT_SIZE))); fs = fontSize.getFloatValue(); return new org.eclipse.birt.report.engine.css.engine.value.FloatValue(org.w3c.dom.css.CSSPrimitiveValue.CSS_NUMBER, ((v * fs) * 0.5F)); } } return value; }
public void visitColumn(org.eclipse.birt.report.model.api.ColumnHandle handle) { org.eclipse.birt.report.engine.ir.ColumnDesign col = new org.eclipse.birt.report.engine.ir.ColumnDesign(); setupReportElement(col, handle); org.eclipse.birt.report.engine.css.dom.StyleDeclaration style = this.createColumnStyle(handle); if ((style != null) && (!(style.isEmpty()))) { col.setStyleName(assignStyleName(style)); } col.setColumnHeaderState(false); org.eclipse.birt.report.engine.ir.DimensionType width = createDimension(handle.getWidth(), false); col.setWidth(width); boolean supress = handle.suppressDuplicates(); col.setSuppressDuplicate(supress); org.eclipse.birt.report.engine.ir.VisibilityDesign visibility = createVisibility(handle.visibilityRulesIterator()); col.setVisibility(visibility); setCurrentElement(col); }
public void renderTitle(org.eclipse.birt.chart.device.IPrimitiveRenderer ipr, org.eclipse.birt.chart.model.layout.TitleBlock b) throws org.eclipse.birt.chart.exception.ChartException { org.eclipse.birt.chart.model.attribute.TextAlignment restoreValue = b.getLabel().getCaption().getFont().getAlignment(); b.getLabel().getCaption().getFont().setAlignment(switchTextAlignment(restoreValue)); double dWrapping = 0; org.eclipse.emf.ecore.EObject container = b.eContainer(); if (container instanceof org.eclipse.birt.chart.model.layout.Block) { dWrapping = ((((org.eclipse.birt.chart.model.layout.Block) (container)).getBounds().getWidth()) / 72) * (xs.getDpiResolution()); final org.eclipse.birt.chart.device.ITextMetrics itm = xs.getTextMetrics(b.getLabel()); if (dWrapping > 0) { itm.reuse(b.getLabel(), dWrapping); } itm.dispose(); } renderLabel(ipr, b, org.eclipse.birt.chart.event.StructureSource.createTitle(b)); b.getLabel().getCaption().getFont().setAlignment(restoreValue); if (isInteractivityEnabled()) { org.eclipse.birt.chart.model.data.Trigger tg; org.eclipse.emf.common.util.EList elTriggers = b.getTriggers(); org.eclipse.birt.chart.model.attribute.Location[] loaHotspot = new org.eclipse.birt.chart.model.attribute.Location[4]; final double dScale = getDeviceScale(); org.eclipse.birt.chart.model.attribute.Bounds bo = b.getBounds().scaledInstance(dScale); double dLeft = bo.getLeft(); double dTop = bo.getTop(); double dWidth = bo.getWidth(); double dHeight = bo.getHeight(); loaHotspot[0] = org.eclipse.birt.chart.model.attribute.impl.LocationImpl.create(dLeft, dTop); loaHotspot[1] = org.eclipse.birt.chart.model.attribute.impl.LocationImpl.create((dLeft + dWidth), dTop); loaHotspot[2] = org.eclipse.birt.chart.model.attribute.impl.LocationImpl.create((dLeft + dWidth), (dTop + dHeight)); loaHotspot[3] = org.eclipse.birt.chart.model.attribute.impl.LocationImpl.create(dLeft, (dTop + dHeight)); if (!(elTriggers.isEmpty())) { final org.eclipse.birt.chart.event.InteractionEvent iev = ((org.eclipse.birt.chart.event.InteractionEvent) (((org.eclipse.birt.chart.event.EventObjectCache) (ipr)).getEventObject(org.eclipse.birt.chart.event.StructureSource.createTitle(b), org.eclipse.birt.chart.event.InteractionEvent.class))); for (int t = 0; t < (elTriggers.size()); t++) { tg = org.eclipse.birt.chart.model.data.impl.TriggerImpl.copyInstance(((org.eclipse.birt.chart.model.data.Trigger) (elTriggers.get(t)))); processTrigger(tg, org.eclipse.birt.chart.event.StructureSource.createTitle(b)); iev.addTrigger(tg); } final org.eclipse.birt.chart.event.PolygonRenderEvent pre = ((org.eclipse.birt.chart.event.PolygonRenderEvent) (((org.eclipse.birt.chart.event.EventObjectCache) (ipr)).getEventObject(org.eclipse.birt.chart.event.StructureSource.createTitle(b), org.eclipse.birt.chart.event.PolygonRenderEvent.class))); pre.setPoints(loaHotspot); iev.setHotSpot(pre); ipr.enableInteraction(iev); } } }
private java.sql.Driver findDriver(java.lang.String className, java.util.Collection<java.lang.String> driverClassPath, boolean refreshClassLoader) throws org.eclipse.datatools.connectivity.oda.OdaException { java.lang.Class driverClass = null; try { driverClass = java.lang.Class.forName(className); org.eclipse.birt.report.data.oda.jdbc.JDBCDriverManager.logger.info(("Loaded JDBC driver class in class path: " + className)); } catch (java.lang.ClassNotFoundException e) { if (org.eclipse.birt.report.data.oda.jdbc.JDBCDriverManager.logger.isLoggable(java.util.logging.Level.FINE)) { org.eclipse.birt.report.data.oda.jdbc.JDBCDriverManager.logger.info((("Driver class not in class path: " + className) + ". Trying to locate driver in drivers directory")); } driverClass = loadExtraDriver(className, true, refreshClassLoader, driverClassPath); if (driverClass == null) { java.lang.ClassLoader loader = java.lang.Thread.currentThread().getContextClassLoader(); if (loader != null) { try { driverClass = java.lang.Class.forName(className, true, loader); } catch (java.lang.ClassNotFoundException e1) { driverClass = null; } } } } if (driverClass == null) { org.eclipse.birt.report.data.oda.jdbc.JDBCDriverManager.logger.warning(("Failed to load JDBC driver class: " + className)); throw new org.eclipse.birt.report.data.oda.jdbc.JDBCException(org.eclipse.birt.report.data.oda.i18n.ResourceConstants.CANNOT_LOAD_DRIVER, null, className); } java.sql.Driver driver = null; try { driver = this.getDriverInstance(driverClass); } catch (java.lang.Exception e) { org.eclipse.birt.report.data.oda.jdbc.JDBCDriverManager.logger.log(java.util.logging.Level.WARNING, ("Failed to create new instance of JDBC driver:" + className), e); throw new org.eclipse.birt.report.data.oda.jdbc.JDBCException(org.eclipse.birt.report.data.oda.i18n.ResourceConstants.CANNOT_INSTANTIATE_DRIVER, null, className); } return driver; }
protected void outputReportTitle(org.eclipse.birt.report.engine.content.IReportContent report) { java.lang.String title = null; if (report != null) { title = report.getTitle(); } if (title == null) { if ((renderOption) != null) { org.eclipse.birt.report.engine.api.HTMLRenderOption htmlOption = new org.eclipse.birt.report.engine.api.HTMLRenderOption(renderOption); title = htmlOption.getHtmlTitle(); } } if (title != null) { writer.openTag(HTMLTags.TAG_TITLE); writer.text(title); writer.closeTag(HTMLTags.TAG_TITLE); } }
private org.eclipse.swt.graphics.Image loadImage(java.net.URL url) throws java.io.IOException { java.lang.String key = url.toString(); org.eclipse.swt.graphics.Image image = getImageRegistry().get(key); if (image != null) { return image; } java.io.InputStream in = null; try { if (url.toString().toLowerCase().endsWith(".svg")) { org.apache.batik.transcoder.image.JPEGTranscoder transcoder = new org.apache.batik.transcoder.image.JPEGTranscoder(); transcoder.addTranscodingHint(JPEGTranscoder.KEY_QUALITY, new java.lang.Float(0.8)); java.lang.String svgURI = url.toString(); org.apache.batik.transcoder.TranscoderInput input = new org.apache.batik.transcoder.TranscoderInput(svgURI); java.io.ByteArrayOutputStream ostream = new java.io.ByteArrayOutputStream(); org.apache.batik.transcoder.TranscoderOutput output = new org.apache.batik.transcoder.TranscoderOutput(ostream); try { transcoder.transcode(input, output); } catch (org.apache.batik.transcoder.TranscoderException e) { } ostream.flush(); in = new java.io.ByteArrayInputStream(ostream.toByteArray()); } else { in = url.openStream(); } image = new org.eclipse.swt.graphics.Image(null, in); } catch (java.io.IOException e) { throw e; } finally { if (in != null) { in.close(); } } if (image != null) { getImageRegistry().put(key, image); } return image; }
protected void endContainer(org.eclipse.birt.report.engine.layout.area.IContainerArea container) { if (container instanceof org.eclipse.birt.report.engine.layout.area.impl.PageArea) { pageGraphic.dispose(); } else { if (container.needClip()) { pageGraphic.clipRestore(); } } currentX -= getX(container); currentY -= getY(container); }
public void drawBackgroundImage(java.lang.String imageURI, float x, float y, float width, float height, float positionX, float positionY, java.lang.String repeat) { if ((imageURI == null) || ((imageURI.length()) == 0)) { return; } float imageWidth = 0; float imageHeight = 0; byte[] imageData = null; java.io.InputStream imageStream = null; try { java.net.URL url = new java.net.URL(imageURI); imageStream = url.openStream(); imageData = getImageData(imageStream); imageStream.close(); imageStream = url.openStream(); java.awt.Image image = javax.imageio.ImageIO.read(imageStream); javax.swing.ImageIcon imageIcon = new javax.swing.ImageIcon(image); imageWidth = imageIcon.getIconWidth(); imageHeight = imageIcon.getIconHeight(); } catch (java.io.IOException ioe) { org.eclipse.birt.report.engine.emitter.ppt.PPTWriter.logger.log(java.util.logging.Level.WARNING, ioe.getMessage(), ioe); } finally { if (imageStream != null) { try { imageStream.close(); } catch (java.io.IOException e) { } } } java.lang.String imageTitle = (("slide" + (currentPageNum)) + "_image") + (++(shapeCount)); imageTitles.add(imageTitle); java.lang.String imageName; if (imageNames.containsKey(imageURI)) { imageName = ((java.lang.String) (imageNames.get(imageURI))); } else { java.lang.String extension = getImageExtension(imageURI); imageName = (imageTitle + ".") + extension; imageNames.put(imageTitle, imageName); imageExtensions.put(imageTitle, extension); recordFileLists(imageName); currentImageData.put(imageTitle, imageData); } org.eclipse.birt.report.engine.layout.emitter.util.Position areaPosition = new org.eclipse.birt.report.engine.layout.emitter.util.Position(x, y); org.eclipse.birt.report.engine.layout.emitter.util.Position areaSize = new org.eclipse.birt.report.engine.layout.emitter.util.Position(width, height); org.eclipse.birt.report.engine.layout.emitter.util.Position imagePosition = new org.eclipse.birt.report.engine.layout.emitter.util.Position((x + positionX), (y + positionY)); org.eclipse.birt.report.engine.layout.emitter.util.Position imageSize = new org.eclipse.birt.report.engine.layout.emitter.util.Position(imageWidth, imageHeight); org.eclipse.birt.report.engine.layout.emitter.util.BackgroundImageLayout layout = new org.eclipse.birt.report.engine.layout.emitter.util.BackgroundImageLayout(areaPosition, areaSize, imagePosition, imageSize); java.util.Collection positions = layout.getImagePositions(repeat); java.util.Iterator iterator = positions.iterator(); while (iterator.hasNext()) { org.eclipse.birt.report.engine.layout.emitter.util.Position position = ((org.eclipse.birt.report.engine.layout.emitter.util.Position) (iterator.next())); exportImageDefn(imageName, imageTitle, imageWidth, imageHeight, position.getX(), position.getY()); } }
public QueryResultSet(org.eclipse.birt.report.engine.data.dte.QueryResultSet parent, org.eclipse.birt.data.engine.api.ISubqueryDefinition queryDefn, org.eclipse.birt.data.engine.api.IResultIterator ri) { assert parent != null; assert queryDefn != null; this.parent = parent; this.id = new org.eclipse.birt.report.engine.api.DataSetID(parent.getID(), parent.getRowIndex(), queryDefn.getName()); this.context = parent.context; this.dataEngine = parent.dataEngine; this.queryDefn = queryDefn; this.rs = ri; this.queryResults = this.rs.getQueryResults(); initializeRowIdOfGroups(queryDefn.getGroups().size()); }
protected void populateOdiQuery() throws org.eclipse.birt.data.engine.core.DataException { assert (odiQuery) != null; assert (scope) != null; assert (queryDefn) != null; org.mozilla.javascript.Context cx = org.mozilla.javascript.Context.enter(); try { java.util.List groups = queryDefn.getGroups(); if ((groups != null) && (!(groups.isEmpty()))) { org.eclipse.birt.data.engine.odi.IQuery[] groupSpecs = new org.eclipse.birt.data.engine.odi.IQuery.GroupSpec[groups.size()]; java.util.Iterator it = groups.iterator(); for (int i = 0; it.hasNext(); i++) { org.eclipse.birt.data.engine.api.IGroupDefinition src = ((org.eclipse.birt.data.engine.api.IGroupDefinition) (it.next())); org.eclipse.birt.data.engine.odi.IQuery.GroupSpec dest = groupDefnToSpec(cx, src); groupSpecs[i] = dest; } odiQuery.setGrouping(java.util.Arrays.asList(groupSpecs)); } java.util.List sorts = queryDefn.getSorts(); if ((sorts != null) && (!(sorts.isEmpty()))) { org.eclipse.birt.data.engine.odi.IQuery[] sortSpecs = new org.eclipse.birt.data.engine.odi.IQuery.SortSpec[sorts.size()]; java.util.Iterator it = sorts.iterator(); for (int i = 0; it.hasNext(); i++) { org.eclipse.birt.data.engine.api.ISortDefinition src = ((org.eclipse.birt.data.engine.api.ISortDefinition) (it.next())); java.lang.String sortKey = src.getColumn(); if ((sortKey == null) || ((sortKey.length()) == 0)) { sortKey = getColNameFromJSExpr(cx, src.getExpression()); } org.eclipse.birt.data.engine.odi.IQuery.SortSpec dest = new org.eclipse.birt.data.engine.odi.IQuery.SortSpec(sortKey, ((src.getSortDirection()) == (org.eclipse.birt.data.engine.api.ISortDefinition.SORT_ASC))); sortSpecs[i] = dest; } odiQuery.setOrdering(java.util.Arrays.asList(sortSpecs)); } if ((dataSet) != null) { java.util.List computedColumns = this.dataSet.getComputedColumns(); if ((computedColumns != null) && ((computedColumns.size()) > 0)) { org.eclipse.birt.data.engine.odi.IResultObjectEvent objectEvent = new org.eclipse.birt.data.engine.impl.ComputedColumnHelper(this.scope, this.rowObject, computedColumns); odiQuery.addOnFetchEvent(objectEvent); } } if ((dataSet) != null) { java.lang.String onFetchScript = dataSet.getOnFetchScript(); if ((onFetchScript != null) && ((onFetchScript.length()) > 0)) { org.eclipse.birt.data.engine.script.OnFetchScriptHelper event = new org.eclipse.birt.data.engine.script.OnFetchScriptHelper(dataSet); odiQuery.addOnFetchEvent(event); } } assert (rowObject) != null; assert (scope) != null; java.util.List mergedFilters = new java.util.ArrayList(); if ((queryDefn.getFilters()) != null) { mergedFilters.addAll(queryDefn.getFilters()); } if (((dataSet) != null) && ((dataSet.getFilters()) != null)) { mergedFilters.addAll(dataSet.getFilters()); } if ((mergedFilters.size()) > 0) { org.eclipse.birt.data.engine.odi.IResultObjectEvent objectEvent = new org.eclipse.birt.data.engine.impl.FilterByRow(mergedFilters, scope, rowObject); odiQuery.addOnFetchEvent(objectEvent); } odiQuery.setMaxRows(queryDefn.getMaxRows()); } finally { org.mozilla.javascript.Context.exit(); } }
private void placeComponents() { foSashForm = new org.eclipse.swt.custom.SashForm(topControl, org.eclipse.swt.SWT.VERTICAL); { org.eclipse.swt.layout.GridLayout layout = new org.eclipse.swt.layout.GridLayout(); foSashForm.setLayout(layout); org.eclipse.swt.layout.GridData gridData = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_BOTH); gridData.heightHint = 570; foSashForm.setLayoutData(gridData); } createPreviewArea(); createTypeArea(); setDefaultTypeSelection(); if ((chartModel) == null) { refreshChart(); } populateSeriesTypesList(); }
PreparedQuery(org.eclipse.birt.data.engine.impl.DataEngineSession session, org.eclipse.birt.data.engine.api.DataEngineContext deContext, org.eclipse.birt.data.engine.api.IBaseQueryDefinition queryDefn, org.eclipse.birt.data.engine.impl.IPreparedQueryService queryService, java.util.Map appContext) throws org.eclipse.birt.data.engine.core.DataException { org.eclipse.birt.data.engine.impl.PreparedQuery.logger.logp(java.util.logging.Level.FINE, org.eclipse.birt.data.engine.impl.PreparedQuery.class.getName(), "PreparedQuery", "PreparedQuery starts up."); assert queryDefn != null; this.expressionCompiler = new org.eclipse.birt.data.engine.expression.ExpressionCompiler(); this.expressionCompiler.setDataSetMode(false); this.dataEngineContext = deContext; this.session = session; this.baseQueryDefn = org.eclipse.birt.data.engine.impl.QueryDefinitionCopyUtil.copy(queryDefn); this.queryService = queryService; this.appContext = appContext; this.exprManager = new org.eclipse.birt.data.engine.impl.ExprManager(baseQueryDefn); this.subQueryMap = new java.util.HashMap(); this.subQueryDefnMap = new java.util.HashMap(); this.aggrTable = new org.eclipse.birt.data.engine.impl.aggregation.AggregateTable(this.session.getSharedScope(), baseQueryDefn.getGroups()); org.eclipse.birt.data.engine.impl.PreparedQuery.logger.fine("Start to prepare a PreparedQuery."); prepare(); org.eclipse.birt.data.engine.impl.PreparedQuery.logger.fine("Finished preparing the PreparedQuery."); }
private void createColumnsViewerArea(org.eclipse.swt.widgets.Composite parent) { cmpColumnsList = org.eclipse.birt.chart.ui.util.ChartUIUtil.createCompositeWrapper(parent); org.eclipse.swt.widgets.Label label = new org.eclipse.swt.widgets.Label(cmpColumnsList, org.eclipse.swt.SWT.NONE); { label.setText(org.eclipse.birt.chart.reportitem.ui.i18n.Messages.getString("StandardChartDataSheet.Label.DataPreview")); label.setFont(org.eclipse.jface.resource.JFaceResources.getBannerFont()); } if ((!(dataProvider.isInXTabMeasureCell())) && (!(dataProvider.isInMultiView()))) { columnListDescription = new org.eclipse.swt.widgets.Label(cmpColumnsList, org.eclipse.swt.SWT.WRAP); { org.eclipse.swt.layout.GridData gd = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_HORIZONTAL); columnListDescription.setLayoutData(gd); columnListDescription.setText(org.eclipse.birt.chart.reportitem.ui.i18n.Messages.getString("StandardChartDataSheet.Label.ToBindADataColumn")); } } btnShowDataPreviewB = new org.eclipse.swt.widgets.Button(cmpColumnsList, org.eclipse.swt.SWT.CHECK); btnShowDataPreviewB.setText(org.eclipse.birt.chart.reportitem.ui.i18n.Messages.getString("StandardChartDataSheet.Label.ShowDataPreview")); btnShowDataPreviewB.addListener(SWT.Selection, this); final org.eclipse.swt.widgets.Table table = new org.eclipse.swt.widgets.Table(cmpColumnsList, (((((org.eclipse.swt.SWT.SINGLE) | (org.eclipse.swt.SWT.BORDER)) | (org.eclipse.swt.SWT.H_SCROLL)) | (org.eclipse.swt.SWT.V_SCROLL)) | (org.eclipse.swt.SWT.FULL_SELECTION))); org.eclipse.swt.layout.GridData gd = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_BOTH); table.setLayoutData(gd); table.setLinesVisible(true); tableViewerColumns = new org.eclipse.jface.viewers.TableViewer(table); tableViewerColumns.setUseHashlookup(true); new org.eclipse.swt.widgets.TableColumn(table, org.eclipse.swt.SWT.CENTER); table.addMouseMoveListener(new org.eclipse.swt.events.MouseMoveListener() { public void mouseMove(org.eclipse.swt.events.MouseEvent e) { if (!(dataProvider.isLivePreviewEnabled())) { table.setToolTipText(null); return; } java.lang.String tooltip = null; org.eclipse.swt.widgets.TableItem item = ((org.eclipse.swt.widgets.Table) (e.widget)).getItem(new org.eclipse.swt.graphics.Point(e.x, e.y)); if (item != null) { java.util.List<java.lang.Object[]> data = ((java.util.List<java.lang.Object[]>) (tableViewerColumns.getData(org.eclipse.birt.chart.reportitem.ui.StandardChartDataSheet.KEY_PREVIEW_DATA))); if (data != null) { java.lang.StringBuilder sb = new java.lang.StringBuilder(); int index = ((org.eclipse.swt.widgets.Table) (e.widget)).indexOf(item); int i = 0; for (; i < (data.size()); i++) { if ((sb.length()) > 45) { break; } if ((data.get(i)[index]) != null) { if (i != 0) sb.append("; "); sb.append(java.lang.String.valueOf(data.get(i)[index])); } } if ((i == 1) && ((sb.length()) > 45)) { sb = new java.lang.StringBuilder(sb.substring(0, 45)); sb.append("..."); } else if (i < (data.size())) { sb.append(";..."); } tooltip = sb.toString(); } } table.setToolTipText(tooltip); } }); table.addMouseListener(new org.eclipse.swt.events.MouseAdapter() { public void mouseDown(org.eclipse.swt.events.MouseEvent e) { if ((e.button) == 3) { if (isCubeMode()) { table.setMenu(null); } else { org.eclipse.swt.widgets.TableItem item = ((org.eclipse.swt.widgets.Table) (e.widget)).getItem(new org.eclipse.swt.graphics.Point(e.x, e.y)); if (item == null) { tableViewerColumns.getTable().select((-1)); } boolean isSharingChart = dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY); if ((item != null) && (!isSharingChart)) { if ((table.getMenu()) != null) { table.getMenu().dispose(); } table.setMenu(createMenuManager(item.getData()).createContextMenu(table)); } else { table.setMenu(null); } if (((table.getMenu()) != null) && (!isSharingChart)) { table.getMenu().setVisible(true); } } } } }); table.addListener(SWT.Resize, new org.eclipse.swt.widgets.Listener() { public void handleEvent(org.eclipse.swt.widgets.Event event) { org.eclipse.swt.widgets.Table table = ((org.eclipse.swt.widgets.Table) (event.widget)); int totalWidth = table.getClientArea().width; table.getColumn(0).setWidth(totalWidth); } }); org.eclipse.swt.dnd.DragSource ds = new org.eclipse.swt.dnd.DragSource(table, ((org.eclipse.swt.dnd.DND.DROP_COPY) | (org.eclipse.swt.dnd.DND.DROP_MOVE))); ds.setTransfer(new org.eclipse.swt.dnd.Transfer[]{ org.eclipse.birt.chart.ui.swt.SimpleTextTransfer.getInstance() }); org.eclipse.birt.chart.reportitem.ui.ColumnNamesTableDragListener dragSourceAdapter = new org.eclipse.birt.chart.reportitem.ui.ColumnNamesTableDragListener(table, itemHandle); ds.addDragListener(dragSourceAdapter); tableViewerColumns.setContentProvider(new org.eclipse.jface.viewers.IStructuredContentProvider() { public java.lang.Object[] getElements(java.lang.Object arg0) { if (arg0 == null) return null; return ((org.eclipse.birt.chart.ui.swt.ColumnBindingInfo[]) (arg0)); } public void dispose() { } public void inputChanged(org.eclipse.jface.viewers.Viewer arg0, java.lang.Object arg1, java.lang.Object arg2) { } }); tableViewerColumns.setLabelProvider(new org.eclipse.jface.viewers.ILabelProvider() { public org.eclipse.swt.graphics.Image getImage(java.lang.Object arg0) { java.lang.String imageName = ((org.eclipse.birt.chart.ui.swt.ColumnBindingInfo) (arg0)).getImageName(); if (imageName == null) return null; return org.eclipse.birt.chart.ui.util.UIHelper.getImage(imageName); } public java.lang.String getText(java.lang.Object arg0) { return ((org.eclipse.birt.chart.ui.swt.ColumnBindingInfo) (arg0)).getName(); } public void addListener(org.eclipse.jface.viewers.ILabelProviderListener arg0) { } public void dispose() { } public boolean isLabelProperty(java.lang.Object arg0, java.lang.String arg1) { return false; } public void removeListener(org.eclipse.jface.viewers.ILabelProviderListener arg0) { } }); }
protected void outputImg(org.w3c.dom.Element ele, java.util.HashMap cssStyles, org.eclipse.birt.report.engine.content.IContent content) { java.lang.String src = ele.getAttribute("src"); if (src != null) { org.eclipse.birt.report.engine.content.IImageContent image = new org.eclipse.birt.report.engine.content.impl.ImageContent(content); addChild(content, image); handleStyle(ele, cssStyles, image); if (!(org.eclipse.birt.report.engine.util.FileUtil.isLocalResource(src))) { image.setImageSource(IImageContent.IMAGE_URL); image.setURI(src); } else { org.eclipse.birt.report.model.api.ReportDesignHandle handle = content.getReportContent().getDesign().getReportDesign(); java.net.URL url = handle.findResource(src, IResourceLocator.IMAGE); if (url != null) { src = url.toString(); } image.setImageSource(IImageContent.IMAGE_FILE); image.setURI(src); } if ((null != (ele.getAttribute("width"))) && (!("".equals(ele.getAttribute("width"))))) { image.setWidth(org.eclipse.birt.report.engine.ir.DimensionType.parserUnit(ele.getAttribute("width"), DimensionType.UNITS_PX)); } if (((ele.getAttribute("height")) != null) && (!("".equals(ele.getAttribute("height"))))) { image.setHeight(org.eclipse.birt.report.engine.ir.DimensionType.parserUnit(ele.getAttribute("height"), DimensionType.UNITS_PX)); } if (((ele.getAttribute("alt")) != null) && (!("".equals(ele.getAttribute("alt"))))) { image.setAltText(ele.getAttribute("alt")); } } }
public void addArgument(java.lang.String name, org.eclipse.birt.data.engine.api.IBaseExpression expr) { if ("Data Field".equals(name)) { this.argument.put("Expression", expr); } else { this.argument.put(name, expr); } }
public ResultSetWrapper(java.util.Collection stExpressionKeys, java.util.List liResultSet, org.eclipse.birt.chart.internal.datafeed.GroupKey[] groupKeys) { rawResultSet = liResultSet; workingResultSet = new java.util.ArrayList(); workingResultSet.addAll(rawResultSet); saExpressionKeys = ((java.lang.String[]) (stExpressionKeys.toArray(new java.lang.String[stExpressionKeys.size()]))); iaDataTypes = new int[saExpressionKeys.length]; htLookup = new java.util.Hashtable(); for (int i = 0; i < (saExpressionKeys.length); i++) { htLookup.put(saExpressionKeys[i], new java.lang.Integer(i)); } oaGroupKeys = groupKeys; iaGroupBreaks = findGroupBreaks(workingResultSet, (((oaGroupKeys) != null) && ((oaGroupKeys.length) > 0) ? oaGroupKeys[0] : null)); initializeMeta(); }
public Image(org.eclipse.birt.report.engine.content.IImageContent content) { java.lang.String imgUri = content.getURI(); byte[] imgData = content.getData(); extension = content.getExtension(); if ((extension) == null) { java.lang.String mimeType = content.getMIMEType(); if (mimeType != null) { extension = org.eclipse.birt.report.engine.util.FileUtil.getExtFromType(mimeType); } } switch (content.getImageSource()) { case org.eclipse.birt.report.engine.content.IImageContent.IMAGE_FILE : if (imgUri != null) { this.id = imgUri; this.source = org.eclipse.birt.report.engine.api.IImage.FILE_IMAGE; } break; case org.eclipse.birt.report.engine.content.IImageContent.IMAGE_NAME : if (imgData != null) { this.data = imgData; this.source = org.eclipse.birt.report.engine.api.IImage.DESIGN_IMAGE; this.id = imgUri; } break; case org.eclipse.birt.report.engine.content.IImageContent.IMAGE_EXPRESSION : if (imgData != null) { this.data = imgData; this.source = org.eclipse.birt.report.engine.api.IImage.CUSTOM_IMAGE; this.id = content.getInstanceID().toString(); } break; case org.eclipse.birt.report.engine.content.IImageContent.IMAGE_URI : if (imgUri != null) { this.id = imgUri; this.source = org.eclipse.birt.report.engine.api.IImage.URL_IMAGE; } break; default : assert false; } }
public void updateRow(org.eclipse.birt.report.engine.layout.area.impl.RowArea rowArea, int specifiedHeight, boolean finished) { hasDropCell = !finished; org.eclipse.birt.report.engine.layout.pdf.cache.TableAreaLayout.Row lastRow = getPreviousRow(); if (((lastRow == null) && (existDropCells())) && (!(org.eclipse.birt.report.engine.layout.LayoutUtil.isRepeatableRow(((org.eclipse.birt.report.engine.content.IRowContent) (rowArea.getContent())))))) { lastRow = unresolvedRow; } org.eclipse.birt.report.engine.layout.pdf.cache.TableAreaLayout.Row row = new org.eclipse.birt.report.engine.layout.pdf.cache.TableAreaLayout.Row(rowArea, startCol, endCol, finished); int height = specifiedHeight; for (int i = startCol; i <= (endCol); i++) { org.eclipse.birt.report.engine.layout.area.impl.CellArea lastCell = null; if (lastRow != null) { lastCell = lastRow.getCell(i); } org.eclipse.birt.report.engine.layout.area.impl.CellArea cell = row.getCell(i); if ((lastCell != null) && (((lastCell.getRowSpan()) > 1) || (isDropCell(lastCell)))) { if (isDropCell(lastCell)) { if (cell != null) { row.remove(i); } } if ((lastCell.getRowSpan()) == 2) { if (lastCell instanceof org.eclipse.birt.report.engine.layout.pdf.cache.DummyCell) { height = java.lang.Math.max(height, lastCell.getHeight()); } else { height = java.lang.Math.max(height, ((lastCell.getHeight()) - (lastRow.getArea().getHeight()))); } } i = (i + (lastCell.getColSpan())) - 1; } else { if (cell != null) { if ((cell.getRowSpan()) == 1) { height = java.lang.Math.max(height, cell.getHeight()); } } if (cell == null) { org.eclipse.birt.report.engine.content.ICellContent cellContent = null; if ((unresolvedRow) != null) { org.eclipse.birt.report.engine.layout.area.impl.CellArea ca = unresolvedRow.getCell(i); if (ca != null) { org.eclipse.birt.report.engine.content.ICellContent cc = ((org.eclipse.birt.report.engine.content.ICellContent) (ca.getContent())); cellContent = new org.eclipse.birt.report.engine.layout.pdf.cache.ClonedCellContent(cc, getRowSpan(((org.eclipse.birt.report.engine.content.IRowContent) (rowArea.getContent())), ca, unresolvedRow.row)); } } if (cellContent == null) { cellContent = tableContent.getReportContent().createCellContent(); cellContent.setColumn(i); cellContent.setColSpan(1); cellContent.setRowSpan(1); cellContent.setParent(rowArea.getContent()); } int startColumn = cellContent.getColumn(); int endColumn = (cellContent.getColSpan()) + startColumn; org.eclipse.birt.report.engine.layout.area.impl.CellArea emptyCell = org.eclipse.birt.report.engine.layout.area.impl.AreaFactory.createCellArea(cellContent); resolveBorderConflict(emptyCell, false); org.eclipse.birt.report.engine.content.IStyle areaStyle = emptyCell.getStyle(); areaStyle.setProperty(IStyle.STYLE_PADDING_TOP, IStyle.NUMBER_0); areaStyle.setProperty(IStyle.STYLE_MARGIN_TOP, IStyle.NUMBER_0); emptyCell.setWidth(getCellWidth(startColumn, endColumn)); emptyCell.setPosition(layoutInfo.getXPosition(i), 0); rowArea.addChild(emptyCell); i = (i + (emptyCell.getColSpan())) - 1; } } } if ((specifiedHeight == 0) && (isEmptyRow(row))) { height = java.lang.Math.max(height, getHeightOfEmptyRow(row)); } if (height >= 0) { java.util.Iterator iter = rowArea.getChildren(); while (iter.hasNext()) { org.eclipse.birt.report.engine.layout.area.impl.CellArea cell = ((org.eclipse.birt.report.engine.layout.area.impl.CellArea) (iter.next())); if ((cell.getRowSpan()) == 1) { cell.setHeight(height); verticalAlign(cell); } } rowArea.setHeight(height); } if (((firstRow) && (existDropCells())) && (!(org.eclipse.birt.report.engine.layout.LayoutUtil.isRepeatableRow(((org.eclipse.birt.report.engine.content.IRowContent) (rowArea.getContent())))))) { mergeDropCell(rowArea); } }
public static java.lang.String getPattern(java.lang.Object data, java.lang.String val) { if ((val != null) && (data instanceof java.util.Date)) { return org.eclipse.birt.report.engine.emitter.excel.ExcelUtil.replaceDateFormat(val); } else if ((val == null) && (data instanceof java.sql.Time)) { return "Long Time"; } else if ((val == null) && (data instanceof java.sql.Date)) { return "mmm d, yyyy hh:mm AM/PM"; } else if ((val == null) && (data instanceof java.util.Date)) { return "mmm d, yyyy hh:mm AM/PM"; } else if ((val != null) && (data instanceof java.lang.Number)) { if ((val.indexOf("E")) >= 0) { return "Scientific"; } return new org.eclipse.birt.core.format.NumberFormatter(val).getPattern(); } else if ((val != null) && (data instanceof java.lang.String)) { return new org.eclipse.birt.core.format.StringFormatter(val).getPattern(); } return null; }
public org.eclipse.birt.report.engine.css.engine.value.Value computeValue(org.eclipse.birt.report.engine.css.engine.CSSStylableElement elt, org.eclipse.birt.report.engine.css.engine.CSSEngine engine, int idx, org.eclipse.birt.report.engine.css.engine.value.Value value) { org.eclipse.birt.report.engine.css.engine.CSSContext ctx = engine.getCSSContext(); float fs = ctx.getMediumFontSize(); if (value == (CSSValueConstants.XX_SMALL_VALUE)) { return new org.eclipse.birt.report.engine.css.engine.value.FloatValue(org.w3c.dom.css.CSSPrimitiveValue.CSS_NUMBER, (((fs / 1.2F) / 1.2F) / 1.2F)); } if (value == (CSSValueConstants.X_SMALL_VALUE)) { return new org.eclipse.birt.report.engine.css.engine.value.FloatValue(org.w3c.dom.css.CSSPrimitiveValue.CSS_NUMBER, ((fs / 1.2F) / 1.2F)); } if (value == (CSSValueConstants.SMALL_VALUE)) { return new org.eclipse.birt.report.engine.css.engine.value.FloatValue(org.w3c.dom.css.CSSPrimitiveValue.CSS_NUMBER, (fs / 1.2F)); } if (value == (CSSValueConstants.MEDIUM_VALUE)) { return new org.eclipse.birt.report.engine.css.engine.value.FloatValue(org.w3c.dom.css.CSSPrimitiveValue.CSS_NUMBER, fs); } if (value == (CSSValueConstants.LARGE_VALUE)) { return new org.eclipse.birt.report.engine.css.engine.value.FloatValue(org.w3c.dom.css.CSSPrimitiveValue.CSS_NUMBER, (fs * 1.2F)); } if (value == (CSSValueConstants.X_LARGE_VALUE)) { return new org.eclipse.birt.report.engine.css.engine.value.FloatValue(org.w3c.dom.css.CSSPrimitiveValue.CSS_NUMBER, ((fs * 1.2F) * 1.2F)); } if (value == (CSSValueConstants.XX_LARGE_VALUE)) { return new org.eclipse.birt.report.engine.css.engine.value.FloatValue(org.w3c.dom.css.CSSPrimitiveValue.CSS_NUMBER, (((fs * 1.2F) * 1.2F) * 1.2F)); } float scale = 1.0F; boolean doParentRelative = false; if (value == (CSSValueConstants.SMALLER_VALUE)) { doParentRelative = true; scale = 1.0F / 1.2F; } else if (value == (CSSValueConstants.LARGER_VALUE)) { doParentRelative = true; scale = 1.2F; } else if ((value.getCssValueType()) == (org.w3c.dom.css.CSSValue.CSS_PRIMITIVE_VALUE)) { switch (value.getPrimitiveType()) { case org.w3c.dom.css.CSSPrimitiveValue.CSS_EMS : doParentRelative = true; scale = value.getFloatValue(); break; case org.w3c.dom.css.CSSPrimitiveValue.CSS_EXS : doParentRelative = true; scale = (value.getFloatValue()) * 0.5F; break; case org.w3c.dom.css.CSSPrimitiveValue.CSS_PERCENTAGE : doParentRelative = true; scale = (value.getFloatValue()) * 0.01F; break; } } if (doParentRelative) { org.eclipse.birt.report.engine.css.engine.CSSStylableElement parent = ((org.eclipse.birt.report.engine.css.engine.CSSStylableElement) (elt.getParent())); if (parent != null) { org.eclipse.birt.report.engine.content.IStyle style = parent.getComputedStyle(); if (style != null) { org.eclipse.birt.report.engine.css.engine.value.Value fontSize = ((org.eclipse.birt.report.engine.css.engine.value.Value) (style.getProperty(IStyle.STYLE_FONT_SIZE))); if (fontSize != null) { fs = fontSize.getFloatValue(); } } } return new org.eclipse.birt.report.engine.css.engine.value.FloatValue(org.w3c.dom.css.CSSPrimitiveValue.CSS_NUMBER, (fs * scale)); } if ((value.getPrimitiveType()) == (org.w3c.dom.css.CSSPrimitiveValue.CSS_NUMBER)) { return super.computeValue(elt, engine, idx, new org.eclipse.birt.report.engine.css.engine.value.FloatValue(org.w3c.dom.css.CSSPrimitiveValue.CSS_PT, value.getFloatValue())); } return super.computeValue(elt, engine, idx, value); }
public java.util.Collection getSelectionList(java.lang.String name) { usingParameterValues(); org.eclipse.birt.report.model.api.ReportDesignHandle report = ((org.eclipse.birt.report.model.api.ReportDesignHandle) (this.runnable.getDesignHandle())); org.eclipse.birt.report.model.api.ScalarParameterHandle parameter = ((org.eclipse.birt.report.model.api.ScalarParameterHandle) (report.findParameter(name))); if (parameter == null) { return java.util.Collections.EMPTY_LIST; } java.lang.String selectionType = parameter.getValueType(); java.lang.String dataType = parameter.getDataType(); boolean fixedOrder = parameter.isFixedOrder(); if (DesignChoiceConstants.PARAM_VALUE_TYPE_DYNAMIC.equals(selectionType)) { org.eclipse.birt.report.model.api.CascadingParameterGroupHandle group = null; if (isCascadingParameter(parameter)) { group = getCascadingGroup(parameter); } if ((group != null) && (DesignChoiceConstants.DATA_SET_MODE_SINGLE.equals(group.getDataSetMode()))) { return getCascadingParameterList(parameter); } else if ((parameter.getDataSetName()) != null) { return getChoicesFromParameterQuery(parameter); } else if (group != null) { return getCascadingParameterList(parameter); } } else if (DesignChoiceConstants.PARAM_VALUE_TYPE_STATIC.equals(selectionType)) { java.util.Iterator iter = parameter.choiceIterator(); java.util.ArrayList choices = new java.util.ArrayList(); while (iter.hasNext()) { org.eclipse.birt.report.model.api.SelectionChoiceHandle choice = ((org.eclipse.birt.report.model.api.SelectionChoiceHandle) (iter.next())); java.lang.String label = report.getMessage(choice.getLabelKey(), locale); if (label == null) { label = choice.getLabel(); } java.lang.Object value = getStringValue(choice.getValue(), dataType); choices.add(new org.eclipse.birt.report.engine.api.impl.GetParameterDefinitionTask.SelectionChoice(label, value)); } if (!fixedOrder) java.util.Collections.sort(choices, new org.eclipse.birt.report.engine.api.impl.SelectionChoiceComparator(true, parameter.getPattern(), com.ibm.icu.util.ULocale.forLocale(locale))); return choices; } return java.util.Collections.EMPTY_LIST; }
public final org.eclipse.birt.report.model.api.extension.IReportItem copy() { final org.eclipse.birt.chart.reportitem.ChartReportItemImpl crii = new org.eclipse.birt.chart.reportitem.ChartReportItemImpl(handle); crii.setProperty("chart.instance", org.eclipse.emf.ecore.util.EcoreUtil.copy(cm)); return crii; }
private void populateEventData(org.eclipse.swt.events.TypedEvent event) { org.eclipse.swt.widgets.TreeItem[] selection = availableDbObjectsTree.getSelection(); if ((selection == null) || ((selection.length) == 0)) selection = selectionMac; java.lang.String identifierQuoteString; try { identifierQuoteString = metaDataProvider.getMetaData().getIdentifierQuoteString(); } catch (java.sql.SQLException e) { identifierQuoteString = ""; } if ((selection.length) > 0) { java.lang.String data = ""; for (int i = 0; i < (selection.length); i++) { java.lang.Object obj = selection[i].getData(); if (obj instanceof org.eclipse.birt.report.data.oda.jdbc.ui.util.DbObject) { data += org.eclipse.birt.report.data.oda.jdbc.ui.editors.SQLUtility.getDnDString(((org.eclipse.birt.report.data.oda.jdbc.ui.util.DbObject) (obj)).getName(), identifierQuoteString, identifierQuoteStringCheckBox.getSelection()); } else if (obj instanceof org.eclipse.birt.report.data.oda.jdbc.ui.util.Procedure) { data += org.eclipse.birt.report.data.oda.jdbc.ui.editors.SQLUtility.getDnDString(((org.eclipse.birt.report.data.oda.jdbc.ui.util.Procedure) (obj)).getProcedureNameWithSchema(), identifierQuoteString, identifierQuoteStringCheckBox.getSelection()); } else { data += org.eclipse.birt.report.data.oda.jdbc.ui.editors.SQLUtility.getDnDString(obj, identifierQuoteString, identifierQuoteStringCheckBox.getSelection()); } data += (i != ((selection.length) - 1)) ? "," : ""; } event.data = data; } }
public void startListBand(org.eclipse.birt.report.engine.content.IListBandContent listBand) { engine.addCell(0, 1, 0, listBand.getComputedStyle()); }
public static org.eclipse.birt.data.engine.api.aggregation.AggregationManager getAggregationManager() throws org.eclipse.birt.core.exception.BirtException { if ((org.eclipse.birt.report.designer.data.ui.util.DataUtil.manager) == null) { org.eclipse.birt.report.data.adapter.api.DataRequestSession session = org.eclipse.birt.report.data.adapter.api.DataRequestSession.newSession(new org.eclipse.birt.report.data.adapter.api.DataSessionContext(org.eclipse.birt.report.data.adapter.api.DataSessionContext.MODE_DIRECT_PRESENTATION)); org.eclipse.birt.report.designer.data.ui.util.DataUtil.manager = session.getAggregationManager(); session.shutdown(); } return org.eclipse.birt.report.designer.data.ui.util.DataUtil.manager; }
protected void update() throws org.eclipse.birt.core.exception.BirtException { if ((parent) != null) { if ((context.isFixedLayout()) && ((height) > (specifiedHeight))) { setHeight(specifiedHeight); setNeedClip(true); } if ((!(isInInlineStacking)) && (context.isAutoPageBreak())) { int aHeight = getAllocatedHeight(); int size = children.size(); if (((aHeight + (parent.getAbsoluteBP())) > (context.getMaxBP())) && (size > 1)) { org.eclipse.birt.report.engine.content.IStyle style = content.getComputedStyle(); int widow = java.lang.Math.min(size, org.eclipse.birt.report.engine.layout.pdf.util.PropertyUtil.getIntValue(style.getProperty(IStyle.STYLE_WIDOWS))); int orphan = java.lang.Math.min(size, org.eclipse.birt.report.engine.layout.pdf.util.PropertyUtil.getIntValue(style.getProperty(IStyle.STYLE_ORPHANS))); for (int i = 0; i < size; i++) { org.eclipse.birt.report.engine.nLayout.area.impl.TextLineArea line = ((org.eclipse.birt.report.engine.nLayout.area.impl.TextLineArea) (children.get(i))); if ((i > 0) && (i < orphan)) { line.setPageBreakBefore(IStyle.AVOID_VALUE); } else if (i > (size - widow)) { line.setPageBreakBefore(IStyle.AVOID_VALUE); } } } while ((aHeight + (parent.getAbsoluteBP())) >= (context.getMaxBP())) { parent.autoPageBreak(); aHeight = getAllocatedHeight(); } } parent.update(this); } }
public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { org.eclipse.swt.widgets.FileDialog fileSelector = new org.eclipse.swt.widgets.FileDialog(org.eclipse.ui.PlatformUI.getWorkbench().getDisplay().getActiveShell(), org.eclipse.swt.SWT.NULL); fileSelector.setFilterExtensions(new java.lang.String[]{ "*.css;*.CSS" }); java.lang.String fileName = fileSelector.open(); if (fileName != null) { fileNameField.setText(fileName); } }
protected java.util.List<java.lang.Object> getCategoryList() { java.util.List<java.lang.Object> list = super.getCategoryList(); if (((((this._categoryStyle) & (org.eclipse.birt.chart.reportitem.ui.dialogs.ChartExpressionProvider.CATEGORY_WITH_DATA_POINTS)) == (org.eclipse.birt.chart.reportitem.ui.dialogs.ChartExpressionProvider.CATEGORY_WITH_DATA_POINTS)) || (((this._categoryStyle) & (org.eclipse.birt.chart.reportitem.ui.dialogs.ChartExpressionProvider.CATEGORY_WITH_JAVASCRIPT)) == (org.eclipse.birt.chart.reportitem.ui.dialogs.ChartExpressionProvider.CATEGORY_WITH_JAVASCRIPT))) || (((this._categoryStyle) & (org.eclipse.birt.chart.reportitem.ui.dialogs.ChartExpressionProvider.CATEGORY_WITH_LEGEND_ITEMS)) == (org.eclipse.birt.chart.reportitem.ui.dialogs.ChartExpressionProvider.CATEGORY_WITH_LEGEND_ITEMS))) { if (!(list.contains(org.eclipse.birt.chart.reportitem.ui.dialogs.ChartExpressionProvider.CHART_VARIABLES))) { list.add(org.eclipse.birt.chart.reportitem.ui.dialogs.ChartExpressionProvider.CHART_VARIABLES); } } return list; }
private org.eclipse.birt.data.engine.api.IJointDataSetDesign newJointDataSet(org.eclipse.birt.report.model.api.JointDataSetHandle handle, org.eclipse.birt.report.engine.executor.ExecutionContext context2) throws org.eclipse.birt.core.exception.BirtException { java.util.Iterator it = handle.joinConditionsIterator(); java.util.List joinConditions = new java.util.ArrayList(); org.eclipse.birt.report.model.api.JoinConditionHandle jc = null; while (it.hasNext()) { jc = ((org.eclipse.birt.report.model.api.JoinConditionHandle) (it.next())); joinConditions.add(new org.eclipse.birt.data.engine.api.querydefn.JoinCondition(new org.eclipse.birt.data.engine.api.querydefn.ScriptExpression(jc.getLeftExpression()), new org.eclipse.birt.data.engine.api.querydefn.ScriptExpression(jc.getRightExpression()), toDteJoinOperator(jc.getOperator()))); } int joinType = toDteJoinType(jc.getJoinType()); org.eclipse.birt.data.engine.api.script.IBaseDataSetEventHandler eventHandler = new org.eclipse.birt.report.engine.script.internal.DataSetScriptExecutor(handle, context); org.eclipse.birt.data.engine.api.querydefn.JointDataSetDesign dteDataSet = new org.eclipse.birt.data.engine.api.querydefn.JointDataSetDesign(handle.getQualifiedName(), jc.getLeftDataSet(), jc.getRightDataSet(), joinType, joinConditions); dteDataSet.setEventHandler(eventHandler); adaptBaseDataSet(handle, dteDataSet); return dteDataSet; }
public void defineCube(org.eclipse.birt.report.model.api.olap.CubeHandle cubeHandle) throws org.eclipse.birt.core.exception.BirtException { java.util.Set involvedDataSets = getInvolvedDataSets(((org.eclipse.birt.report.model.api.olap.TabularCubeHandle) (cubeHandle))); java.util.Iterator itr = involvedDataSets.iterator(); while (itr.hasNext()) { org.eclipse.birt.report.model.api.DataSetHandle dsHandle = ((org.eclipse.birt.report.model.api.DataSetHandle) (itr.next())); org.eclipse.birt.data.engine.api.querydefn.BaseDataSourceDesign baseDataSource = this.modelAdaptor.adaptDataSource(dsHandle.getDataSource()); org.eclipse.birt.data.engine.api.querydefn.BaseDataSetDesign baseDataSet = this.modelAdaptor.adaptDataSet(dsHandle); if ((baseDataSource != null) && ((this.dataEngine.getDataSourceRuntime(baseDataSource.getName())) == null)) this.defineDataSource(baseDataSource); if ((this.dataEngine.getDataSetDesign(baseDataSet.getName())) == null) this.defineDataSet(baseDataSet); this.defineDataSet(baseDataSet); } if (!(cubeHandleMap.containsKey(cubeHandle.getQualifiedName()))) { this.cubeHandleMap.put(cubeHandle.getQualifiedName(), cubeHandle); } }
protected void handleGroupAction() { org.eclipse.birt.chart.model.data.SeriesDefinition sdBackup = ((org.eclipse.birt.chart.model.data.SeriesDefinition) (org.eclipse.emf.ecore.util.EcoreUtil.copy(seriesdefinition))); org.eclipse.birt.chart.ui.swt.composites.GroupSortingDialog groupDialog = createGroupSortingDialog(sdBackup); if ((groupDialog.open()) == (org.eclipse.jface.window.Window.OK)) { if (!(sdBackup.eIsSet(DataPackage.eINSTANCE.getSeriesDefinition_Sorting()))) { seriesdefinition.eUnset(DataPackage.eINSTANCE.getSeriesDefinition_Sorting()); } else { seriesdefinition.setSorting(sdBackup.getSorting()); } org.eclipse.birt.chart.ui.swt.wizard.ChartAdapter.beginIgnoreNotifications(); java.util.List<?> sds = org.eclipse.birt.chart.ui.util.ChartUIUtil.getAllOrthogonalSeriesDefinitions(context.getModel()); for (int i = 0; i < (sds.size()); i++) { if (i != 0) { org.eclipse.birt.chart.model.data.SeriesDefinition sdf = ((org.eclipse.birt.chart.model.data.SeriesDefinition) (sds.get(i))); if (!(sdBackup.eIsSet(DataPackage.eINSTANCE.getSeriesDefinition_Sorting()))) { sdf.eUnset(DataPackage.eINSTANCE.getSeriesDefinition_Sorting()); } else { sdf.setSorting(sdBackup.getSorting()); } } } org.eclipse.birt.chart.ui.swt.wizard.ChartAdapter.endIgnoreNotifications(); seriesdefinition.setSortKey(sdBackup.getSortKey()); seriesdefinition.getSortKey().eAdapters().addAll(seriesdefinition.eAdapters()); if ((seriesdefinition.getQuery()) != null) { if ((sdBackup.getQuery().getGrouping()) == null) { return; } seriesdefinition.getQuery().setGrouping(sdBackup.getQuery().getGrouping()); seriesdefinition.getQuery().getGrouping().eAdapters().addAll(seriesdefinition.getQuery().eAdapters()); org.eclipse.birt.chart.ui.swt.wizard.ChartAdapter.beginIgnoreNotifications(); for (int i = 0; i < (sds.size()); i++) { if (i != 0) { org.eclipse.birt.chart.model.data.SeriesDefinition sdf = ((org.eclipse.birt.chart.model.data.SeriesDefinition) (sds.get(i))); sdf.getQuery().setGrouping(((org.eclipse.birt.chart.model.data.SeriesGrouping) (org.eclipse.emf.ecore.util.EcoreUtil.copy(seriesdefinition.getQuery().getGrouping())))); sdf.getQuery().getGrouping().eAdapters().addAll(sdf.getQuery().eAdapters()); } } org.eclipse.birt.chart.ui.swt.wizard.ChartAdapter.endIgnoreNotifications(); org.eclipse.birt.chart.ui.util.ChartUIUtil.checkGroupType(context, context.getModel()); } } }
public boolean reloadOutlinePage() { if (((!(getActivePageInstance().getId().equals(org.eclipse.birt.report.designer.ui.editors.MultiPageReportEditor.XMLSourcePage_ID))) || ((outlinePage) == null)) || (!(getCurrentPageInstance().getId().equals(org.eclipse.birt.report.designer.ui.editors.MultiPageReportEditor.XMLSourcePage_ID)))) { return false; } if (((outlinePage.getCurrentPage()) instanceof org.eclipse.birt.report.designer.internal.ui.views.outline.DesignerOutlinePage) || ((outlinePage.getCurrentPage()) == null)) { outlinePage.setActivePage(((org.eclipse.ui.part.IPageBookViewPage) (getActivePageInstance().getAdapter(org.eclipse.ui.views.contentoutline.IContentOutlinePage.class)))); } else { outlinePage.setActivePage(((org.eclipse.ui.part.IPageBookViewPage) (getActivePageInstance().getAdapter(org.eclipse.ui.views.contentoutline.ContentOutlinePage.class)))); } if ((outlinePage.getSite()) != null) { outlinePage.getSite().getActionBars().updateActionBars(); } return true; }
private static java.lang.String convertApiTypeToROMParameterType(int apiDataType) { switch (apiDataType) { case org.eclipse.birt.core.data.DataType.INTEGER_TYPE : return org.eclipse.birt.report.model.api.elements.DesignChoiceConstants.PARAM_TYPE_INTEGER; case org.eclipse.birt.core.data.DataType.STRING_TYPE : return org.eclipse.birt.report.model.api.elements.DesignChoiceConstants.PARAM_TYPE_STRING; case org.eclipse.birt.core.data.DataType.DATE_TYPE : return org.eclipse.birt.report.model.api.elements.DesignChoiceConstants.PARAM_TYPE_DATETIME; case org.eclipse.birt.core.data.DataType.SQL_DATE_TYPE : return org.eclipse.birt.report.model.api.elements.DesignChoiceConstants.PARAM_TYPE_DATE; case org.eclipse.birt.core.data.DataType.SQL_TIME_TYPE : return org.eclipse.birt.report.model.api.elements.DesignChoiceConstants.PARAM_TYPE_TIME; case org.eclipse.birt.core.data.DataType.DECIMAL_TYPE : return org.eclipse.birt.report.model.api.elements.DesignChoiceConstants.PARAM_TYPE_DECIMAL; case org.eclipse.birt.core.data.DataType.DOUBLE_TYPE : return org.eclipse.birt.report.model.api.elements.DesignChoiceConstants.PARAM_TYPE_FLOAT; case org.eclipse.birt.core.data.DataType.BOOLEAN_TYPE : return org.eclipse.birt.report.model.api.elements.DesignChoiceConstants.PARAM_TYPE_BOOLEAN; case org.eclipse.birt.core.data.DataType.ANY_TYPE : return org.eclipse.birt.report.model.api.elements.DesignChoiceConstants.PARAM_TYPE_ANY; case org.eclipse.birt.core.data.DataType.BLOB_TYPE : case org.eclipse.birt.core.data.DataType.BINARY_TYPE : default : return org.eclipse.birt.report.model.api.elements.DesignChoiceConstants.PARAM_TYPE_ANY; } }
public int[] getColumnWidths() { int length = (columnCoordinates.size()) - 1; int[] columnWidths = new int[length]; for (int i = 0; i < (length - 1); i++) { columnWidths[i] = (columnCoordinates.get((i + 1))) - (columnCoordinates.get(i)); } return columnWidths; }
protected int getMaxPageBreakInterval() { @java.lang.SuppressWarnings("rawtypes") java.util.Map appContext = executorContext.getAppContext(); if (appContext != null) { java.lang.Object maxPageBreakObject = appContext.get(EngineConstants.APPCONTEXT_MAX_PAGE_BREAK_INTERVAL); if (maxPageBreakObject instanceof java.lang.Number) { return ((java.lang.Number) (maxPageBreakObject)).intValue(); } } return org.eclipse.birt.report.engine.executor.ListingElementExecutor.MAX_PAGE_BREAK_INTERVAL; }
public org.eclipse.swt.widgets.Composite createArea(org.eclipse.swt.widgets.Composite parent) { int numColumns = 2; if (((description) != null) && ((description.length()) > 0)) { numColumns++; } if (((style) & (org.eclipse.birt.chart.ui.swt.wizard.data.BaseDataDefinitionComponent.BUTTON_AGGREGATION)) == (org.eclipse.birt.chart.ui.swt.wizard.data.BaseDataDefinitionComponent.BUTTON_AGGREGATION)) { numColumns++; } if (((style) & (org.eclipse.birt.chart.ui.swt.wizard.data.BaseDataDefinitionComponent.BUTTON_GROUP)) == (org.eclipse.birt.chart.ui.swt.wizard.data.BaseDataDefinitionComponent.BUTTON_GROUP)) { numColumns++; } cmpTop = new org.eclipse.swt.widgets.Composite(parent, org.eclipse.swt.SWT.NONE); { org.eclipse.swt.layout.GridLayout glContent = new org.eclipse.swt.layout.GridLayout(); glContent.numColumns = numColumns; glContent.marginHeight = 0; glContent.marginWidth = 0; glContent.horizontalSpacing = 2; cmpTop.setLayout(glContent); org.eclipse.swt.layout.GridData gd = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_HORIZONTAL); cmpTop.setLayoutData(gd); } org.eclipse.swt.widgets.Label lblDesc = null; if (((description) != null) && ((description.length()) > 0)) { lblDesc = new org.eclipse.swt.widgets.Label(cmpTop, org.eclipse.swt.SWT.NONE); lblDesc.setText(description); lblDesc.setToolTipText(tooltipWhenBlank); } if (((style) & (org.eclipse.birt.chart.ui.swt.wizard.data.BaseDataDefinitionComponent.BUTTON_AGGREGATION)) == (org.eclipse.birt.chart.ui.swt.wizard.data.BaseDataDefinitionComponent.BUTTON_AGGREGATION)) { createAggregationItem(cmpTop); } boolean isSharingChart = context.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_CHART_QUERY); final java.lang.Object[] predefinedQuery = context.getPredefinedQuery(queryType); org.eclipse.birt.chart.ui.swt.interfaces.IDataServiceProvider provider = context.getDataServiceProvider(); boolean needComboField = ((predefinedQuery != null) && ((predefinedQuery.length) > 0)) && (((provider.checkState(IDataServiceProvider.SHARE_QUERY)) || (provider.checkState(IDataServiceProvider.HAS_CUBE))) || (provider.checkState(IDataServiceProvider.INHERIT_COLUMNS_GROUPS))); needComboField &= !isSharingChart; boolean hasContentAssist = ((!isSharingChart) && (predefinedQuery != null)) && ((predefinedQuery.length) > 0); if (needComboField) { org.eclipse.swt.widgets.Composite control = new org.eclipse.swt.widgets.Composite(cmpTop, org.eclipse.swt.SWT.NONE); org.eclipse.swt.layout.GridData gd = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_BOTH); gd.widthHint = 80; control.setLayoutData(gd); org.eclipse.swt.layout.GridLayout gl = new org.eclipse.swt.layout.GridLayout(); org.eclipse.birt.chart.ui.swt.fieldassist.FieldAssistHelper.getInstance().initDecorationMargin(gl); control.setLayout(gl); cmbDefinition = new org.eclipse.swt.custom.CCombo(control, (context.getDataServiceProvider().checkState(IDataServiceProvider.PART_CHART) ? (org.eclipse.swt.SWT.READ_ONLY) | (org.eclipse.swt.SWT.BORDER) : org.eclipse.swt.SWT.BORDER)); gd = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_HORIZONTAL); gd.grabExcessHorizontalSpace = true; cmbDefinition.setLayoutData(gd); if (hasContentAssist) { java.lang.String[] items = getContentItems(predefinedQuery); if (items != null) { new org.eclipse.birt.chart.ui.swt.fieldassist.CComboAssistField(cmbDefinition, null, items); } } if ((predefinedQuery.length) > 0) { populateExprComboItems(predefinedQuery); } else if (((getQuery().getDefinition()) == null) || (getQuery().getDefinition().equals(""))) { cmbDefinition.setEnabled(false); } cmbDefinition.addListener(SWT.Selection, new org.eclipse.swt.widgets.Listener() { public void handleEvent(org.eclipse.swt.widgets.Event event) { java.lang.String oldQuery = ((query.getDefinition()) == null) ? "" : query.getDefinition(); java.lang.String text = cmbDefinition.getText(); if ((!(isTableSharedBinding())) && (text.equals(oldQuery))) { return; } updateQuery(text); if ((!(oldQuery.equals(text))) && ((queryType) == (org.eclipse.birt.chart.ui.util.ChartUIConstants.QUERY_VALUE))) { if (context.getDataServiceProvider().update(ChartUIConstants.QUERY_VALUE, text)) { org.eclipse.swt.widgets.Event e = new org.eclipse.swt.widgets.Event(); e.data = org.eclipse.birt.chart.ui.swt.wizard.data.BaseDataDefinitionComponent.this; e.widget = cmbDefinition; e.type = org.eclipse.birt.chart.ui.swt.interfaces.IChartDataSheet.EVENT_QUERY; context.getDataSheet().notifyListeners(e); } } if (((context.getDataServiceProvider().checkState(IDataServiceProvider.PART_CHART)) && (ChartUIConstants.QUERY_CATEGORY.equals(queryType))) && ((context.getModel()) instanceof org.eclipse.birt.chart.model.ChartWithAxes)) { ((org.eclipse.birt.chart.model.ChartWithAxes) (context.getModel())).setTransposed(((cmbDefinition.getSelectionIndex()) > 0)); } if (((predefinedQuery.length) == 0) && (((getQuery().getDefinition()) == null) || (getQuery().getDefinition().equals("")))) { cmbDefinition.setEnabled(false); } } }); cmbDefinition.addModifyListener(this); cmbDefinition.addFocusListener(this); cmbDefinition.addKeyListener(this); initComboExprText(); } else { org.eclipse.swt.widgets.Composite control = cmpTop; if (hasContentAssist) { control = new org.eclipse.swt.widgets.Composite(cmpTop, org.eclipse.swt.SWT.NONE); org.eclipse.swt.layout.GridData gd = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_BOTH); gd.widthHint = 80; control.setLayoutData(gd); org.eclipse.swt.layout.GridLayout gl = new org.eclipse.swt.layout.GridLayout(); org.eclipse.birt.chart.ui.swt.fieldassist.FieldAssistHelper.getInstance().initDecorationMargin(gl); control.setLayout(gl); } txtDefinition = new org.eclipse.swt.widgets.Text(control, ((org.eclipse.swt.SWT.BORDER) | (org.eclipse.swt.SWT.SINGLE))); org.eclipse.swt.layout.GridData gdTXTDefinition = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_HORIZONTAL); gdTXTDefinition.widthHint = 80; gdTXTDefinition.grabExcessHorizontalSpace = true; txtDefinition.setLayoutData(gdTXTDefinition); if (((query) != null) && ((query.getDefinition()) != null)) { txtDefinition.setText(query.getDefinition()); txtDefinition.setToolTipText(getTooltipForDataText(query.getDefinition())); } txtDefinition.addModifyListener(this); txtDefinition.addFocusListener(this); txtDefinition.addKeyListener(this); if (hasContentAssist) { java.lang.String[] items = getContentItems(predefinedQuery); if (items != null) { org.eclipse.birt.chart.ui.swt.fieldassist.TextAssistField taf = new org.eclipse.birt.chart.ui.swt.fieldassist.TextAssistField(txtDefinition, null, items); ((org.eclipse.birt.chart.ui.swt.fieldassist.CTextContentAdapter) (taf.getContentAdapter())).addContentChangeListener(new org.eclipse.birt.chart.ui.swt.fieldassist.IContentChangeListener() { public void contentChanged(org.eclipse.swt.widgets.Control control, java.lang.Object newValue, java.lang.Object oldValue) { isQueryModified = true; saveQuery(); } }); } } } org.eclipse.swt.widgets.Control dropControl = getInputControl(); org.eclipse.swt.dnd.DropTarget target = new org.eclipse.swt.dnd.DropTarget(dropControl, org.eclipse.swt.dnd.DND.DROP_COPY); org.eclipse.swt.dnd.Transfer[] types = new org.eclipse.swt.dnd.Transfer[]{ org.eclipse.birt.chart.ui.swt.SimpleTextTransfer.getInstance() }; target.setTransfer(types); target.addDropListener(new org.eclipse.birt.chart.ui.swt.DataTextDropListener(dropControl)); org.eclipse.birt.chart.ui.swt.DataDefinitionTextManager.getInstance().addDataDefinitionText(dropControl, this); btnBuilder = new org.eclipse.swt.widgets.Button(cmpTop, org.eclipse.swt.SWT.PUSH); { org.eclipse.swt.layout.GridData gdBTNBuilder = new org.eclipse.swt.layout.GridData(); org.eclipse.birt.chart.ui.util.ChartUIUtil.setChartImageButtonSizeByPlatform(gdBTNBuilder); btnBuilder.setLayoutData(gdBTNBuilder); btnBuilder.setImage(org.eclipse.birt.chart.ui.util.UIHelper.getImage("icons/obj16/expressionbuilder.gif")); btnBuilder.addSelectionListener(this); btnBuilder.setToolTipText(org.eclipse.birt.chart.ui.extension.i18n.Messages.getString("DataDefinitionComposite.Tooltip.InvokeExpressionBuilder")); btnBuilder.getImage().setBackground(btnBuilder.getBackground()); btnBuilder.setEnabled(context.getUIServiceProvider().isInvokingSupported()); btnBuilder.setVisible(context.getUIServiceProvider().isEclipseModeSupported()); } if (((style) & (org.eclipse.birt.chart.ui.swt.wizard.data.BaseDataDefinitionComponent.BUTTON_GROUP)) == (org.eclipse.birt.chart.ui.swt.wizard.data.BaseDataDefinitionComponent.BUTTON_GROUP)) { btnGroup = new org.eclipse.swt.widgets.Button(cmpTop, org.eclipse.swt.SWT.PUSH); org.eclipse.swt.layout.GridData gdBTNGroup = new org.eclipse.swt.layout.GridData(); org.eclipse.birt.chart.ui.util.ChartUIUtil.setChartImageButtonSizeByPlatform(gdBTNGroup); btnGroup.setLayoutData(gdBTNGroup); btnGroup.setImage(org.eclipse.birt.chart.ui.util.UIHelper.getImage("icons/obj16/group.gif")); btnGroup.addSelectionListener(this); btnGroup.setToolTipText(org.eclipse.birt.chart.ui.extension.i18n.Messages.getString("BaseDataDefinitionComponent.Label.EditGroupSorting")); } setColor(); boolean isCubeNoMultiDimensions = ((provider.checkState(IDataServiceProvider.HAS_CUBE)) || (provider.checkState(IDataServiceProvider.SHARE_CROSSTAB_QUERY))) && (!(provider.checkState(IDataServiceProvider.MULTI_CUBE_DIMENSIONS))); if ((context.getDataServiceProvider().checkState(IDataServiceProvider.PART_CHART)) || (context.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_QUERY))) { if (((txtDefinition) != null) && ((!(context.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_CROSSTAB_QUERY))) || isSharingChart)) { if ((((!(ChartUIConstants.QUERY_OPTIONAL.equals(queryType))) || (!(provider.checkState(IDataServiceProvider.SHARE_TABLE_QUERY)))) || ((getQuery().getDefinition()) == null)) || ((getQuery().getDefinition().trim().length()) == 0)) { txtDefinition.setEnabled(false); } } btnBuilder.setEnabled(false); if ((btnGroup) != null) { btnGroup.setEnabled(false); } } if ((((cmbDefinition) != null) && (ChartUIConstants.QUERY_OPTIONAL.equals(queryType))) && isCubeNoMultiDimensions) { cmbDefinition.setEnabled(false); btnBuilder.setEnabled(false); } setTooltipForInputControl(); boolean isRequiredField = ChartUIConstants.QUERY_CATEGORY.equals(queryType); if ((lblDesc != null) && isRequiredField) { org.eclipse.birt.chart.ui.swt.fieldassist.FieldAssistHelper.getInstance().addRequiredFieldIndicator(lblDesc); } return cmpTop; }
public void initializeModule(java.util.Map properties) throws org.eclipse.birt.report.model.api.activity.SemanticException { if (isInitialized) return; java.lang.String name = null; java.lang.Object value = null; org.eclipse.birt.report.model.core.Module root = ((org.eclipse.birt.report.model.core.Module) (getElement())); java.util.Set propNames = properties.keySet(); java.util.Iterator itre = propNames.iterator(); while (itre.hasNext()) { name = ((java.lang.String) (itre.next())); try { value = org.eclipse.birt.report.model.api.util.PropertyValueValidationUtil.validateProperty(this, name, properties.get(name)); root.setProperty(name, value); } catch (org.eclipse.birt.report.model.api.activity.SemanticException e) { } } isInitialized = true; }
private boolean checkAllInbound(final org.eclipse.birt.chart.computation.withaxes.SeriesRenderingHints srh, final org.eclipse.birt.chart.model.attribute.Bounds plotBounds, final double dCoeff, final boolean isCategoryAxis) throws org.eclipse.birt.chart.exception.ChartException { boolean hasEntryChecked = false; final org.eclipse.birt.chart.computation.withaxes.AutoScale scaleOrth = getInternalOrthogonalAxis().getScale(); final org.eclipse.birt.chart.computation.withaxes.AutoScale scaleBase = getInternalBaseAxis().getScale(); for (int i = 1; i < (iSeriesCount); i++) { org.eclipse.birt.chart.render.BaseRenderer renderer = getRenderer(i); if (renderer instanceof org.eclipse.birt.chart.extension.render.Bubble) { if ((((org.eclipse.birt.chart.extension.render.Bubble) (renderer)).getAxis()) != (this.getAxis())) { continue; } org.eclipse.birt.chart.computation.DataPointHints[] dpha = renderer.getSeriesRenderingHints().getDataPoints(); for (int j = 0; j < (dpha.length); j++) { final org.eclipse.birt.chart.extension.datafeed.BubbleEntry be = ((org.eclipse.birt.chart.extension.datafeed.BubbleEntry) (dpha[j].getOrthogonalValue())); if (!(isValidBubbleEntry(be))) { continue; } if (((checkEntryByType(scaleOrth, dpha[j].getOrthogonalValue())) == 0) && ((checkEntryByType(scaleBase, dpha[j].getBaseValue())) == 0)) { final org.eclipse.birt.chart.model.attribute.Location lo = dpha[j].getLocation(); final double unitSize = dpha[j].getSize(); double faX; double faY; if (isTransposed()) { faX = srh.getLocationOnOrthogonal(be.getValue()); faY = (lo.getY()) + (isCategoryAxis ? unitSize / 2 : 0); } else { faX = (lo.getX()) + (isCategoryAxis ? unitSize / 2 : 0); faY = srh.getLocationOnOrthogonal(be.getValue()); } hasEntryChecked = true; if (checkInbound(plotBounds, faX, faY, 0)) { if (!(checkInbound(plotBounds, faX, faY, ((java.lang.Math.abs(be.getSize())) * dCoeff)))) { return false; } } } } } } if (!hasEntryChecked) { throw new java.lang.RuntimeException(org.eclipse.birt.chart.engine.extension.i18n.Messages.getString("exception.invalid.data.point.outbound.bubble")); } return hasEntryChecked; }
private org.eclipse.jface.action.MenuManager createFileMenu() { org.eclipse.jface.action.MenuManager menu = new org.eclipse.jface.action.MenuManager(org.eclipse.birt.report.designer.ui.rcp.nls.DesignerWorkbenchMessages.Workbench_file, org.eclipse.ui.IWorkbenchActionConstants.M_FILE); org.eclipse.jface.action.MenuManager newMenu = new org.eclipse.jface.action.MenuManager(org.eclipse.birt.report.designer.ui.rcp.nls.DesignerWorkbenchMessages.Workbench_new, ActionFactory.NEW.getId()); newMenu.add(newReportAction); newMenu.add(newLibraryAction); newMenu.add(newReportTemplateAction); menu.add(newMenu); menu.add(openFileAction); menu.add(new org.eclipse.jface.action.Separator()); menu.add(closeAction); menu.add(closeAllAction); menu.add(new org.eclipse.jface.action.GroupMarker(org.eclipse.ui.IWorkbenchActionConstants.CLOSE_EXT)); menu.add(new org.eclipse.jface.action.Separator()); menu.add(saveAction); menu.add(saveAsAction); menu.add(saveAllAction); menu.add(new org.eclipse.jface.action.GroupMarker(org.eclipse.ui.IWorkbenchActionConstants.SAVE_EXT)); menu.add(new org.eclipse.jface.action.Separator(org.eclipse.ui.IWorkbenchActionConstants.MB_ADDITIONS)); menu.add(ContributionItemFactory.REOPEN_EDITORS.create(getWindow())); menu.add(new org.eclipse.jface.action.GroupMarker(org.eclipse.ui.IWorkbenchActionConstants.MRU)); menu.add(new org.eclipse.jface.action.Separator()); menu.add(quitAction); menu.add(new org.eclipse.jface.action.GroupMarker(org.eclipse.ui.IWorkbenchActionConstants.FILE_END)); return menu; }
public void setKeepWithNext(boolean keepWithNext) { if (keepWithNext) { keepWith = true; } if ((!(keepWith)) && (!(pageBreakAvoid))) { clearCache(); } }
protected java.lang.Object getMenuForDimension(org.eclipse.birt.chart.model.Chart chart, java.lang.String expr) { java.util.List<java.lang.Object> menus = new java.util.ArrayList<java.lang.Object>(2); if (((java.lang.Boolean) (dataProvider.checkData(ChartUIConstants.QUERY_CATEGORY, expr))).booleanValue()) { menus.add(getBaseSeriesMenu(getChartModel(), expr)); } if ((dataProvider.checkState(IDataServiceProvider.MULTI_CUBE_DIMENSIONS)) && (((java.lang.Boolean) (dataProvider.checkData(ChartUIConstants.QUERY_OPTIONAL, expr))).booleanValue())) { menus.add(getGroupSeriesMenu(getChartModel(), expr)); } return menus; }
private void handleNext() { int freeSpace = this.getFreeSpace(); if ((isNew) || ((currentPos) == (chunk.getText().length()))) { if (cg.hasMore()) { chunk = cg.getNext(); if ((chunk) == (org.eclipse.birt.report.engine.layout.pdf.text.Chunk.HARD_LINE_BREAK)) { currentPos = chunk.getText().length(); org.eclipse.birt.report.engine.layout.area.impl.AbstractArea con = ((org.eclipse.birt.report.engine.layout.area.impl.AbstractArea) (createInlineContainer(content, false, false))); con.setWidth(0); if (null == (chunk.getFontInfo())) { org.eclipse.birt.report.engine.content.IStyle style = content.getComputedStyle(); con.setHeight((((((getDimensionValue(style.getProperty(StyleConstants.STYLE_FONT_SIZE))) + (topBorder)) + (topPadding)) + (bottomBorder)) + (bottomPadding))); } else { con.setHeight(((((((int) ((chunk.getFontInfo().getWordHeight()) * (org.eclipse.birt.report.engine.layout.PDFConstants.LAYOUT_TO_PDF_RATIO))) + (topBorder)) + (topPadding)) + (bottomBorder)) + (bottomPadding))); } this.addSpaceHolder(con); this.newLine(); vestigeIndex = -1; return; } currentPos = 0; vestigeIndex = -1; vestigeLength = 0; wr = new org.eclipse.birt.report.engine.layout.pdf.hyphen.ICUWordRecognizer(chunk.getText(), context.getLocale()); } else { return; } } if (isNew) { isNew = false; if (isInline) { org.eclipse.birt.report.engine.layout.area.impl.AbstractArea con = ((org.eclipse.birt.report.engine.layout.area.impl.AbstractArea) (createInlineContainer(content, true, false))); con.setWidth(((leftBorder) + (leftPadding))); con.setHeight(((((((int) ((chunk.getFontInfo().getWordHeight()) * (org.eclipse.birt.report.engine.layout.PDFConstants.LAYOUT_TO_PDF_RATIO))) + (topBorder)) + (topPadding)) + (bottomBorder)) + (bottomPadding))); this.addSpaceHolder(con); leftSpaceHolder = ((leftMargin) + (leftBorder)) + (leftPadding); freeSpace -= leftSpaceHolder; } } java.lang.String str = null; org.eclipse.birt.report.engine.layout.pdf.hyphen.Word currentWord = null; if ((-1) == (vestigeIndex)) { currentWord = wr.getNextWord(); if (null == currentWord) { return; } str = currentWord.getValue(); areaStartPos = (chunk.getOffset()) + (currentWord.getStart()); } else { str = chunk.getText().substring(vestigeIndex, ((vestigeIndex) + (vestigeLength))); areaStartPos = (chunk.getOffset()) + (vestigeIndex); } int prevAreaWidth = 0; int areaWidth = (((int) ((chunk.getFontInfo().getWordWidth(chunk.getText().substring(currentPos, ((currentPos) + (str.length()))))) * (org.eclipse.birt.report.engine.layout.PDFConstants.LAYOUT_TO_PDF_RATIO))) + ((letterSpacing) * (str.length()))) + (wordSpacing); if (isInline) { if (isAtLast((((chunk.getOffset()) + (currentPos)) + (str.length())))) { rightSpaceHolder = ((rightMargin) + (rightBorder)) + (rightPadding); freeSpace -= rightSpaceHolder; } } while (freeSpace >= areaWidth) { currentPos += str.length(); currentWord = wr.getNextWord(); if (null == currentWord) { str = null; break; } str = currentWord.getValue(); prevAreaWidth = areaWidth; areaWidth += (((int) ((chunk.getFontInfo().getWordWidth(chunk.getText().substring(currentPos, ((currentPos) + (str.length()))))) * (org.eclipse.birt.report.engine.layout.PDFConstants.LAYOUT_TO_PDF_RATIO))) + ((letterSpacing) * (str.length()))) + (wordSpacing); if (isAtLast((((chunk.getOffset()) + (currentPos)) + (str.length())))) { rightSpaceHolder = ((rightMargin) + (rightBorder)) + (rightPadding); freeSpace -= rightSpaceHolder; } } int length = chunk.getText().length(); if ((currentPos) == length) { org.eclipse.birt.report.engine.content.Dimension d = new org.eclipse.birt.report.engine.content.Dimension(areaWidth, ((int) ((chunk.getFontInfo().getWordHeight()) * (org.eclipse.birt.report.engine.layout.PDFConstants.LAYOUT_TO_PDF_RATIO)))); java.lang.String originalText = chunk.getText().substring(((areaStartPos) - (chunk.getOffset())), chunk.getText().length()); org.eclipse.birt.report.engine.layout.area.IArea builtArea = buildArea(getReverseText(originalText), content, chunk.getFontInfo(), d); this.addTextLine(builtArea); vestigeIndex = -1; vestigeLength = 0; return; } if ((maxLineSpace) < ((((chunk.getFontInfo().getWordWidth(str)) * (org.eclipse.birt.report.engine.layout.PDFConstants.LAYOUT_TO_PDF_RATIO)) + ((letterSpacing) * (str.length()))) + (wordSpacing))) { if (0 == (str.length())) { vestigeIndex = -1; vestigeLength = 0; return; } org.eclipse.birt.report.engine.layout.pdf.hyphen.IHyphenationManager hm; if (org.eclipse.birt.report.engine.layout.pdf.PDFTextLM.ENABLE_HYPHENATION) { hm = new org.eclipse.birt.report.engine.layout.pdf.hyphen.DefaultHyphenationManager(); } else { hm = new org.eclipse.birt.report.engine.layout.pdf.hyphen.DummyHyphenationManager(); } org.eclipse.birt.report.engine.layout.pdf.hyphen.Hyphenation hyph = hm.getHyphenation(str); int endHyphenIndex = hyphen(0, (freeSpace - prevAreaWidth), hyph, chunk.getFontInfo()); if (endHyphenIndex == 0) { if (nothingSplitted) { str = hyph.getHyphenText(0, (endHyphenIndex + 1)); addByForce = true; nothingSplitted = false; } else { nothingSplitted = true; vestigeIndex = currentPos; vestigeLength = (null == currentWord) ? vestigeLength : currentWord.getLength(); if (0 == prevAreaWidth) return; org.eclipse.birt.report.engine.content.Dimension d = new org.eclipse.birt.report.engine.content.Dimension(prevAreaWidth, ((int) ((chunk.getFontInfo().getWordHeight()) * (org.eclipse.birt.report.engine.layout.PDFConstants.LAYOUT_TO_PDF_RATIO)))); java.lang.String originalText = chunk.getText().substring(((areaStartPos) - (chunk.getOffset())), currentPos); org.eclipse.birt.report.engine.layout.area.IArea builtArea = buildArea(getReverseText(originalText), content, chunk.getFontInfo(), d); this.addTextLine(builtArea); this.newLine(); return; } } else { str = hyph.getHyphenText(0, endHyphenIndex); } currentPos += str.length(); vestigeIndex = currentPos; vestigeLength = (null == currentWord) ? (vestigeLength) - (str.length()) : (currentWord.getLength()) - (str.length()); org.eclipse.birt.report.engine.content.Dimension d = null; if (addByForce) { d = new org.eclipse.birt.report.engine.content.Dimension(freeSpace, ((int) ((chunk.getFontInfo().getWordHeight()) * (org.eclipse.birt.report.engine.layout.PDFConstants.LAYOUT_TO_PDF_RATIO)))); addByForce = false; } else { d = new org.eclipse.birt.report.engine.content.Dimension(((prevAreaWidth + ((int) ((chunk.getFontInfo().getWordWidth(str)) * (org.eclipse.birt.report.engine.layout.PDFConstants.LAYOUT_TO_PDF_RATIO)))) + ((letterSpacing) * (str.length()))), ((int) ((chunk.getFontInfo().getWordHeight()) * (org.eclipse.birt.report.engine.layout.PDFConstants.LAYOUT_TO_PDF_RATIO)))); } java.lang.String originalText = chunk.getText().substring(((areaStartPos) - (chunk.getOffset())), vestigeIndex); org.eclipse.birt.report.engine.layout.area.IArea builtArea = buildArea(getReverseText(originalText), content, chunk.getFontInfo(), d); this.addTextLine(builtArea); this.newLine(); return; } else { org.eclipse.birt.report.engine.content.Dimension d = new org.eclipse.birt.report.engine.content.Dimension(prevAreaWidth, ((int) ((chunk.getFontInfo().getWordHeight()) * (org.eclipse.birt.report.engine.layout.PDFConstants.LAYOUT_TO_PDF_RATIO)))); java.lang.String originalText = chunk.getText().substring(((areaStartPos) - (chunk.getOffset())), currentPos); org.eclipse.birt.report.engine.layout.area.IArea builtArea = buildArea(getReverseText(originalText), content, chunk.getFontInfo(), d); this.addTextLine(builtArea); this.newLine(); vestigeIndex = (null == currentWord) ? -1 : currentWord.getStart(); vestigeLength = (null == currentWord) ? 0 : currentWord.getLength(); return; } }
protected void doRender(java.util.List pageSequences) throws org.eclipse.birt.report.engine.api.EngineException { if ((pageSequences.size()) == 0) { return; } try { org.eclipse.birt.report.model.api.ReportDesignHandle reportDesign = executionContext.getDesign(); org.eclipse.birt.report.engine.emitter.IContentEmitter emitter = createContentEmitter(); java.lang.String format = executionContext.getOutputFormat(); if ("pdf".equalsIgnoreCase(format)) { org.eclipse.birt.report.engine.executor.IReportExecutor executor = new org.eclipse.birt.report.engine.internal.executor.doc.ReportPageReader(executionContext, pageSequences, false); executor = new org.eclipse.birt.report.engine.internal.executor.l18n.LocalizedReportExecutor(executionContext, executor); executionContext.setExecutor(executor); initializeContentEmitter(emitter, executor); org.eclipse.birt.report.engine.layout.IReportLayoutEngine layoutEngine = org.eclipse.birt.report.engine.layout.LayoutEngineFactory.createLayoutEngine(format); org.eclipse.birt.report.engine.executor.OnPageBreakLayoutPageHandle handle = new org.eclipse.birt.report.engine.executor.OnPageBreakLayoutPageHandle(executionContext); layoutEngine.setPageHandler(handle); startRender(); layoutEngine.layout(executor, emitter, true); closeRender(); executor.close(); } else { org.eclipse.birt.report.engine.executor.IReportExecutor executor = new org.eclipse.birt.report.engine.executor.ReportExecutor(executionContext, reportDesign, null); executor = new org.eclipse.birt.report.engine.internal.executor.l18n.LocalizedReportExecutor(executionContext, executor); executionContext.setExecutor(executor); initializeContentEmitter(emitter, executor); org.eclipse.birt.report.engine.internal.document.ReportContentLoader loader = new org.eclipse.birt.report.engine.internal.document.ReportContentLoader(executionContext); startRender(); org.eclipse.birt.report.engine.api.IRenderOption renderOption = executionContext.getRenderOption(); if (renderOption instanceof org.eclipse.birt.report.engine.api.HTMLRenderOption) { boolean htmlPagination = ((org.eclipse.birt.report.engine.api.HTMLRenderOption) (renderOption)).getHtmlPagination(); bodyOnly = !htmlPagination; } loader.loadPageRange(pageSequences, bodyOnly, emitter); closeRender(); executor.close(); } } catch (java.lang.Exception ex) { log.log(java.util.logging.Level.SEVERE, "An error happened while running the report. Cause:", ex); } catch (java.lang.OutOfMemoryError err) { log.log(java.util.logging.Level.SEVERE, "An OutOfMemory error happened while running the report."); throw err; } }
private void updateDragDataSource() { if (isCubeMode()) { if ((getDataServiceProvider().getReportItemReference()) != null) { if (!(getDataServiceProvider().checkState(IDataServiceProvider.SHARE_CHART_QUERY))) { ((org.eclipse.swt.layout.GridData) (columnListDescription.getLayoutData())).exclude = false; columnListDescription.setVisible(true); columnListDescription.setText(org.eclipse.birt.chart.reportitem.ui.i18n.Messages.getString("StandardChartDataSheet.Label.ShareCrossTab")); } else { ((org.eclipse.swt.layout.GridData) (columnListDescription.getLayoutData())).exclude = true; columnListDescription.setVisible(false); } cmpColumnsList.layout(); getContext().setShowingDataPreview(java.lang.Boolean.FALSE); btnShowDataPreviewB.setSelection(false); btnShowDataPreviewB.setEnabled(false); stackLayout.topControl = cmpColumnsList; refreshDataPreviewPane(); } else { stackLayout.topControl = cmpCubeTree; cubeTreeViewer.setInput(getCube()); } cmpStack.layout(); return; } if ((columnListDescription) != null) { ((org.eclipse.swt.layout.GridData) (columnListDescription.getLayoutData())).exclude = false; columnListDescription.setVisible(true); columnListDescription.setText(org.eclipse.birt.chart.reportitem.ui.i18n.Messages.getString("StandardChartDataSheet.Label.ToBindADataColumn")); } btnShowDataPreviewB.setEnabled(true); cmpColumnsList.layout(); java.lang.String pValue = ((previousData) == null) ? "" : previousData; java.lang.String cValue = ((currentData) == null) ? "" : currentData; if (!(pValue.equals(cValue))) { getContext().setShowingDataPreview(null); } previousData = currentData; try { if ((!(getContext().isSetShowingDataPreview())) && ((getDataServiceProvider().getPreviewHeadersInfo().length) >= 6)) { getContext().setShowingDataPreview(java.lang.Boolean.FALSE); } org.eclipse.birt.chart.ui.swt.wizard.ChartWizard.removeException(ChartWizard.StaChartDSh_gHeaders_ID); } catch (java.lang.NullPointerException e) { } catch (org.eclipse.birt.chart.exception.ChartException e) { org.eclipse.birt.chart.ui.swt.wizard.ChartWizard.showException(ChartWizard.StaChartDSh_gHeaders_ID, e.getMessage()); } btnShowDataPreviewA.setSelection(getContext().isShowingDataPreview()); btnShowDataPreviewB.setSelection(getContext().isShowingDataPreview()); if (getContext().isShowingDataPreview()) { stackLayout.topControl = cmpDataPreview; } else { stackLayout.topControl = cmpColumnsList; } refreshDataPreviewPane(); cmpStack.layout(); }
protected void updateLine() { if ((root) == null) { return; } java.util.Iterator iter = root.getChildren(); int height = root.getHeight(); int lineHeight = ((org.eclipse.birt.report.engine.layout.pdf.PDFBlockStackingLM) (parent)).getLineHeight(); if (lineHeight > (maxAvaHeight)) { lineHeight = 0; } while (iter.hasNext()) { org.eclipse.birt.report.engine.layout.area.impl.AbstractArea child = ((org.eclipse.birt.report.engine.layout.area.impl.AbstractArea) (iter.next())); int childHeight = child.getAllocatedHeight(); height = java.lang.Math.max(height, childHeight); } if (parent.isPageEmpty()) { height = java.lang.Math.min(maxAvaHeight, java.lang.Math.max(height, lineHeight)); } else { height = java.lang.Math.max(height, lineHeight); } root.setContentHeight(height); }
public void run() { org.eclipse.birt.chart.model.Chart cm = org.eclipse.birt.chart.examples.view.ChartExamples.getChartModel().copyInstance(); if (cm != null) { final org.eclipse.swt.widgets.FileDialog saveDialog = new org.eclipse.swt.widgets.FileDialog(cmp.getShell(), org.eclipse.swt.SWT.SAVE); saveDialog.setFilterExtensions(new java.lang.String[]{ "*.chart" }); try { saveDialog.open(); java.lang.String name = saveDialog.getFileName(); if ((name != null) && (name != "")) { org.eclipse.birt.chart.model.Serializer serializer = null; final java.io.File file = new java.io.File(saveDialog.getFilterPath(), name); if (file.exists()) { org.eclipse.swt.widgets.MessageBox box = new org.eclipse.swt.widgets.MessageBox(cmp.getShell(), (((org.eclipse.swt.SWT.ICON_WARNING) | (org.eclipse.swt.SWT.YES)) | (org.eclipse.swt.SWT.NO))); box.setText(org.eclipse.birt.chart.examples.view.description.Messages.getDescription("SaveXMLAction.MessageBox.Text")); box.setMessage(org.eclipse.birt.chart.examples.view.description.Messages.getDescription("SaveXMLAction.MessageBox.Message")); if ((box.open()) != (org.eclipse.swt.SWT.YES)) { return; } } serializer = org.eclipse.birt.chart.model.impl.SerializerImpl.instance(); try { serializer.write(cm, new java.io.FileOutputStream(file)); } catch (java.io.IOException ioe) { ioe.printStackTrace(); } } } catch (java.lang.Throwable e) { e.printStackTrace(); } } }
public static java.lang.Object convert(java.lang.Object source, java.lang.Class toTypeClass) throws org.eclipse.birt.core.exception.BirtException { if (toTypeClass == (org.eclipse.birt.core.data.DataType.getClass(DataType.ANY_TYPE))) return source; if (toTypeClass == (java.lang.Integer.class)) return org.eclipse.birt.core.data.DataTypeUtil.toInteger(source); if (toTypeClass == (java.math.BigDecimal.class)) return org.eclipse.birt.core.data.DataTypeUtil.toBigDecimal(source); if (toTypeClass == (java.lang.Boolean.class)) return org.eclipse.birt.core.data.DataTypeUtil.toBoolean(source); if (toTypeClass == (java.sql.Time.class)) return org.eclipse.birt.core.data.DataTypeUtil.toSqlTime(source); if (toTypeClass == (java.sql.Date.class)) return org.eclipse.birt.core.data.DataTypeUtil.toSqlDate(source); if (toTypeClass == (java.sql.Timestamp.class)) return org.eclipse.birt.core.data.DataTypeUtil.toDate(source); if (toTypeClass == (java.util.Date.class)) return org.eclipse.birt.core.data.DataTypeUtil.toDate(source); if (toTypeClass == (java.lang.Double.class)) return org.eclipse.birt.core.data.DataTypeUtil.toDouble(source); if (toTypeClass == (java.lang.String.class)) return org.eclipse.birt.core.data.DataTypeUtil.toString(source); if (toTypeClass == (java.sql.Blob.class)) { if (source instanceof byte[]) return source; else return org.eclipse.birt.core.data.DataTypeUtil.toBlob(source); } if (toTypeClass == (byte[].class)) return source; throw new org.eclipse.birt.core.exception.CoreException(org.eclipse.birt.core.i18n.ResourceConstants.INVALID_TYPE, org.eclipse.birt.core.data.DataTypeUtil.resourceBundle); }
public java.lang.Object get(java.lang.String arg0, org.mozilla.javascript.Scriptable scope) { try { if ((this.currentIterator) == null) return null; if (("__rownum".equalsIgnoreCase(arg0)) || ("0".equalsIgnoreCase(arg0))) { return new java.lang.Integer(this.currentIterator.getRowIndex()); } if ("_outer".equalsIgnoreCase(arg0)) { return new org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.JSResultIteratorObject(it.getParent(), this.scope); } return org.eclipse.birt.core.script.JavascriptEvalUtil.convertToJavascriptValue(this.currentIterator.getValue(arg0), this.scope); } catch (org.eclipse.birt.core.exception.BirtException e) { return null; } }
public void run() { org.eclipse.birt.report.model.api.olap.TabularCubeHandle transfer = ((org.eclipse.birt.report.model.api.olap.TabularCubeHandle) (this.getFirstSelectedObj())); org.eclipse.birt.report.model.api.CommandStack stack = org.eclipse.birt.report.designer.core.model.SessionHandleAdapter.getInstance().getCommandStack(); stack.startTrans(org.eclipse.birt.report.item.crosstab.ui.i18n.Messages.getString("InsertCubeInLayoutAction.action.message")); org.eclipse.birt.report.model.api.olap.TabularCubeHandle cube = ((org.eclipse.birt.report.model.api.olap.TabularCubeHandle) (transfer)); org.eclipse.birt.report.model.api.ModuleHandle moduleHandle = org.eclipse.birt.report.designer.core.model.SessionHandleAdapter.getInstance().getReportDesignHandle(); if (((cube.getModuleHandle()) != moduleHandle) && ((cube.getRoot()) instanceof org.eclipse.birt.report.model.api.LibraryHandle)) { try { org.eclipse.birt.report.designer.internal.ui.util.UIUtil.includeLibrary(moduleHandle, ((org.eclipse.birt.report.model.api.LibraryHandle) (cube.getRoot()))); cube = ((org.eclipse.birt.report.model.api.olap.TabularCubeHandle) (moduleHandle.getElementFactory().newElementFrom(cube, cube.getName()))); moduleHandle.getCubes().add(cube); } catch (java.lang.Exception e) { stack.rollback(); return; } } org.eclipse.birt.report.model.api.ExtendedItemHandle handle = null; java.lang.String name = org.eclipse.birt.report.designer.ui.ReportPlugin.getDefault().getCustomName(ICrosstabConstants.CROSSTAB_EXTENSION_NAME); try { handle = org.eclipse.birt.report.item.crosstab.core.util.CrosstabExtendedItemFactory.createCrosstabReportItem(org.eclipse.birt.report.designer.core.model.SessionHandleAdapter.getInstance().getReportDesignHandle(), null, name); } catch (java.lang.Exception e) { stack.rollback(); return; } if ((targetPart) instanceof org.eclipse.gef.EditPart) { org.eclipse.gef.EditPartViewer viewer = ((org.eclipse.gef.EditPart) (targetPart)).getViewer(); org.eclipse.gef.EditPart editPart = ((org.eclipse.gef.EditPart) (targetPart)); if (editPart != null) { try { java.util.HashMap map = new java.util.HashMap(); map.put(DesignerConstants.KEY_NEWOBJECT, handle); org.eclipse.birt.report.designer.core.commands.CreateCommand command = new org.eclipse.birt.report.designer.core.commands.CreateCommand(map); if ((targetPart) == null) { targetPart = org.eclipse.birt.report.designer.internal.ui.util.UIUtil.getCurrentEditPart(); } java.lang.Object parentModel = org.eclipse.birt.report.designer.util.DNDUtil.unwrapToModel(targetPart.getModel()); if (parentModel instanceof org.eclipse.birt.report.model.api.DesignElementHandle) { org.eclipse.birt.report.model.api.DesignElementHandle parentHandle = ((org.eclipse.birt.report.model.api.DesignElementHandle) (parentModel)); if ((parentHandle.getDefn().isContainer()) && ((parentHandle.canContain(org.eclipse.birt.report.designer.util.DEUtil.getDefaultSlotID(parentHandle), handle)) || (parentHandle.canContain(org.eclipse.birt.report.designer.util.DEUtil.getDefaultContentName(parentHandle), handle)))) { command.setParent(parentHandle); } else { if ((parentHandle.getContainerSlotHandle()) != null) { command.setAfter(parentHandle.getContainerSlotHandle().get(((parentHandle.getIndex()) + 1))); } else if ((parentHandle.getContainerPropertyHandle()) != null) { command.setAfter(parentHandle.getContainerPropertyHandle().get(((parentHandle.getIndex()) + 1))); } org.eclipse.birt.report.model.api.DesignElementHandle container = parentHandle.getContainer(); if (container instanceof org.eclipse.birt.report.model.api.ListHandle) { command.setParent(parentHandle.getContainerSlotHandle()); } else { command.setParent(container); } } } else if (parentModel instanceof org.eclipse.birt.report.model.api.SlotHandle) { command.setParent(parentModel); } else { command.setParent(org.eclipse.birt.report.designer.core.model.SessionHandleAdapter.getInstance().getReportDesignHandle()); } if ((command != null) && (command.canExecute())) { viewer.getEditDomain().getCommandStack().execute(command); handle.setProperty(IReportItemModel.CUBE_PROP, cube); java.util.List dimensions = cube.getContents(CubeHandle.DIMENSIONS_PROP); for (java.util.Iterator iterator = dimensions.iterator(); iterator.hasNext();) { org.eclipse.birt.report.model.api.olap.TabularDimensionHandle dimension = ((org.eclipse.birt.report.model.api.olap.TabularDimensionHandle) (iterator.next())); if (dimension.isTimeType()) { createDimensionViewHandle(handle, dimension, ICrosstabConstants.COLUMN_AXIS_TYPE); } else { createDimensionViewHandle(handle, dimension, ICrosstabConstants.ROW_AXIS_TYPE); } } java.util.List measureGroups = cube.getContents(CubeHandle.MEASURE_GROUPS_PROP); int index = 0; for (java.util.Iterator iterator = measureGroups.iterator(); iterator.hasNext();) { org.eclipse.birt.report.model.api.olap.MeasureGroupHandle measureGroup = ((org.eclipse.birt.report.model.api.olap.MeasureGroupHandle) (iterator.next())); java.util.List measures = measureGroup.getContents(MeasureGroupHandle.MEASURES_PROP); for (int j = 0; j < (measures.size()); j++) { java.lang.Object temp = measures.get(j); if (temp instanceof org.eclipse.birt.report.model.api.olap.MeasureHandle) { addMeasureHandle(handle, ((org.eclipse.birt.report.model.api.olap.MeasureHandle) (temp)), (index++)); } } } stack.commit(); if ((targetPart) instanceof org.eclipse.gef.EditPart) { ((org.eclipse.gef.EditPart) (targetPart)).getViewer().flush(); } org.eclipse.birt.report.designer.core.util.mediator.request.ReportRequest request = new org.eclipse.birt.report.designer.core.util.mediator.request.ReportRequest(); java.util.List selectionObjects = new java.util.ArrayList(); selectionObjects.add(handle); request.setSelectionObject(selectionObjects); request.setType(ReportRequest.SELECTION); org.eclipse.birt.report.designer.core.model.SessionHandleAdapter.getInstance().getMediator().notifyRequest(request); if ((org.eclipse.birt.report.designer.core.model.SessionHandleAdapter.getInstance().getReportDesignHandle()) instanceof org.eclipse.birt.report.model.api.LibraryHandle) { org.eclipse.birt.report.designer.core.model.schematic.HandleAdapterFactory.getInstance().getLibraryHandleAdapter().setCurrentEditorModel(handle, LibraryHandleAdapter.CREATE_ELEMENT); } return; } } catch (java.lang.Exception e) { stack.rollback(); return; } } } }
protected void initialJdbcInfo() { createMetaDataProvider(); jdbcConnection = connectMetadataProvider(metaDataProvider, this.getDataSetDesign().getDataSourceDesign()); if ((jdbcConnection) != null) { try { isSchemaSupported = metaDataProvider.isSchemaSupported(); this.odaConnectionProvider.connect(); } catch (java.lang.Exception e) { org.eclipse.birt.report.data.oda.jdbc.ui.editors.SQLDataSetEditorPage.logger.log(java.util.logging.Level.WARNING, e.getMessage(), e); } } }
private ReportEngineService(javax.servlet.ServletConfig servletConfig) { java.lang.System.setProperty("RUN_UNDER_ECLIPSE", "false"); if (servletConfig == null) { return; } config = new org.eclipse.birt.report.engine.api.EngineConfig(); org.eclipse.birt.report.engine.api.HTMLEmitterConfig emitterConfig = new org.eclipse.birt.report.engine.api.HTMLEmitterConfig(); emitterConfig.setActionHandler(new org.eclipse.birt.report.engine.api.HTMLActionHandler()); imageHandler = new org.eclipse.birt.report.engine.api.HTMLServerImageHandler(); emitterConfig.setImageHandler(imageHandler); config.getEmitterConfigs().put("html", emitterConfig); imageDirectory = servletConfig.getServletContext().getInitParameter(ParameterAccessor.INIT_PARAM_IMAGE_DIR); if ((((imageDirectory) == null) || ((imageDirectory.trim().length()) <= 0)) || (org.eclipse.birt.report.utility.ParameterAccessor.isRelativePath(imageDirectory))) { imageDirectory = org.eclipse.birt.report.utility.ParameterAccessor.getRealPath(servletConfig.getServletContext(), "/report/images"); } imageBaseUrl = (org.eclipse.birt.report.IBirtConstants.SERVLET_PATH_PREVIEW) + "?__imageID="; java.lang.String logDirectory = servletConfig.getServletContext().getInitParameter(ParameterAccessor.INIT_PARAM_LOG_DIR); if (((logDirectory == null) || ((logDirectory.trim().length()) <= 0)) || (org.eclipse.birt.report.utility.ParameterAccessor.isRelativePath(logDirectory))) { logDirectory = org.eclipse.birt.report.utility.ParameterAccessor.getRealPath(servletConfig.getServletContext(), "/logs"); } java.lang.String logLevel = servletConfig.getServletContext().getInitParameter(ParameterAccessor.INIT_PARAM_LOG_LEVEL); java.util.logging.Level level = ((logLevel != null) && ((logLevel.length()) > 0)) ? java.util.logging.Level.parse(logLevel) : java.util.logging.Level.OFF; config.setLogConfig(logDirectory, level); java.lang.String scriptLibDir = servletConfig.getServletContext().getInitParameter(ParameterAccessor.INIT_PARAM_SCRIPTLIB_DIR); if (((scriptLibDir == null) || ((scriptLibDir.trim().length()) <= 0)) || (org.eclipse.birt.report.utility.ParameterAccessor.isRelativePath(scriptLibDir))) { scriptLibDir = org.eclipse.birt.report.utility.ParameterAccessor.getRealPath(servletConfig.getServletContext(), "/scriptlib"); } java.util.ArrayList jarFileList = new java.util.ArrayList(); if (scriptLibDir != null) { java.io.File dir = new java.io.File(scriptLibDir); getAllJarFiles(dir, jarFileList); } java.lang.String scriptlibClassPath = ""; for (int i = 0; i < (jarFileList.size()); i++) scriptlibClassPath += (org.eclipse.birt.report.engine.api.EngineConstants.PROPERTYSEPARATOR) + (((java.io.File) (jarFileList.get(i))).getAbsolutePath()); if (scriptlibClassPath.startsWith(EngineConstants.PROPERTYSEPARATOR)) scriptlibClassPath = scriptlibClassPath.substring(EngineConstants.PROPERTYSEPARATOR.length()); java.lang.System.setProperty(EngineConstants.WEBAPP_CLASSPATH_KEY, scriptlibClassPath); config.setEngineHome(""); }
protected boolean performEdit(org.eclipse.birt.report.model.api.ReportElementHandle handle) { org.eclipse.birt.report.model.api.DataSetHandle dsHandle = ((org.eclipse.birt.report.model.api.DataSetHandle) (handle)); if ((!(dsHandle instanceof org.eclipse.birt.report.model.api.JointDataSetHandle)) && ((dsHandle.getDataSource()) == null)) { org.eclipse.jface.dialogs.MessageDialog.openError(org.eclipse.ui.PlatformUI.getWorkbench().getDisplay().getActiveShell(), org.eclipse.birt.report.designer.nls.Messages.getString("dataset.error.title.noDataSources"), org.eclipse.birt.report.designer.nls.Messages.getString("dataset.error.dataSourceMissing")); return false; } org.eclipse.birt.report.designer.data.ui.dataset.DataSetEditor dialog = new org.eclipse.birt.report.designer.data.ui.dataset.DataSetEditor(org.eclipse.ui.PlatformUI.getWorkbench().getDisplay().getActiveShell(), ((org.eclipse.birt.report.model.api.DataSetHandle) (handle)), false); return (dialog.open()) == (org.eclipse.jface.dialogs.Dialog.OK); }
public boolean isIndexColumn() { if ((this.columnHintHandle) != null) { return columnHintHandle.isIndexColumn(); } else { if ((columnHint.getProperty(null, ColumnHint.INDEX_COLUMN_MEMBER)) instanceof java.lang.Boolean) { return ((java.lang.Boolean) (columnHint.getProperty(null, ColumnHint.INDEX_COLUMN_MEMBER))); } return false; } }
protected void setIntrinsicProperty(java.lang.String propName, java.lang.Object value) { if (org.eclipse.birt.report.model.api.elements.structures.StyleRule.OPERATOR_MEMBER.equals(propName)) operator = ((java.lang.String) (value)); else if (org.eclipse.birt.report.model.api.elements.structures.StyleRule.VALUE1_MEMBER.equals(propName)) { if (value == null) { value1 = null; return; } if (value instanceof java.util.List) { value1 = ((java.util.List) (value)); } else { value1 = new java.util.ArrayList(); value1.add(value); } } else if (org.eclipse.birt.report.model.api.elements.structures.StyleRule.VALUE2_MEMBER.equals(propName)) value2 = ((java.lang.String) (value)); else if (org.eclipse.birt.report.model.api.elements.structures.StyleRule.TEST_EXPR_MEMBER.equals(propName)) testExpression = ((java.lang.String) (value)); else if (org.eclipse.birt.report.model.api.elements.structures.StyleRule.IS_DESIGN_TIME_MEMBER.equals(propName)) isDesignTime = ((java.lang.Boolean) (value)); else super.setIntrinsicProperty(propName, value); }
public java.lang.Object[] getChildren(java.lang.Object model) { org.eclipse.birt.report.model.api.ReportDesignHandle handle = ((org.eclipse.birt.report.model.api.ReportDesignHandle) (model)); java.util.ArrayList list = new java.util.ArrayList(); list.add(handle.getParameters()); if (handle instanceof org.eclipse.birt.report.model.api.ReportDesignHandle) list.add(((org.eclipse.birt.report.model.api.ReportDesignHandle) (handle)).getPropertyHandle(IReportDesignModel.PAGE_VARIABLES_PROP)); list.add(handle.getBody()); list.add(handle.getMasterPages()); list.add(handle.getStyles()); list.add(new org.eclipse.birt.report.designer.core.model.views.outline.EmbeddedImageNode(handle)); if ((handle.getTheme()) != null) { list.add(handle.getTheme()); } list.add(new org.eclipse.birt.report.designer.core.model.views.outline.LibraryNode(handle)); list.add(new org.eclipse.birt.report.designer.core.model.views.outline.ScriptsNode(handle)); return list.toArray(); }
private java.util.List doCheckStructureList(org.eclipse.birt.report.model.core.Module module, org.eclipse.birt.report.model.core.DesignElement element, org.eclipse.birt.report.model.api.metadata.IPropertyDefn propDefn, java.util.List list, org.eclipse.birt.report.model.api.core.IStructure toAdd) { boolean checkList = toAdd == null; java.util.List errorList = new java.util.ArrayList(); if ((list == null) || ((list.size()) == 0)) return errorList; assert propDefn != null; assert (propDefn.getTypeCode()) == (org.eclipse.birt.report.model.metadata.PropertyType.STRUCT_TYPE); boolean checkID = propDefn.getStructDefn().getName().equals(PropertyBinding.PROPERTY_BINDING_STRUCT); if (!checkID) { org.eclipse.birt.report.model.metadata.PropertyDefn uniqueMember = null; java.util.Iterator iter = propDefn.getStructDefn().getPropertyIterator(); while (iter.hasNext()) { org.eclipse.birt.report.model.metadata.PropertyDefn memberDefn = ((org.eclipse.birt.report.model.metadata.PropertyDefn) (iter.next())); if ((memberDefn.getTypeCode()) == (org.eclipse.birt.report.model.metadata.PropertyType.NAME_TYPE)) { uniqueMember = memberDefn; break; } } java.util.HashSet values = new java.util.HashSet(); for (int i = 0; i < (list.size()); i++) { org.eclipse.birt.report.model.core.Structure struct = ((org.eclipse.birt.report.model.core.Structure) (list.get(i))); if (checkList) errorList.addAll(struct.validate(module, element)); if (uniqueMember != null) { java.lang.String value = ((java.lang.String) (struct.getProperty(module, uniqueMember))); if (values.contains(value)) { if (checkList) errorList.add(new org.eclipse.birt.report.model.api.metadata.PropertyValueException(element, propDefn, value, org.eclipse.birt.report.model.api.metadata.PropertyValueException.DESIGN_EXCEPTION_VALUE_EXISTS)); } else { values.add(value); } } } if ((uniqueMember != null) && (toAdd != null)) { java.lang.String value = ((java.lang.String) (toAdd.getProperty(module, uniqueMember))); if (values.contains(value)) { errorList.add(new org.eclipse.birt.report.model.api.metadata.PropertyValueException(element, propDefn.getName(), value, org.eclipse.birt.report.model.api.metadata.PropertyValueException.DESIGN_EXCEPTION_VALUE_EXISTS)); } } } else { java.util.HashMap values = new java.util.HashMap(); for (int i = 0; i < (list.size()); i++) { org.eclipse.birt.report.model.api.elements.structures.PropertyBinding struct = ((org.eclipse.birt.report.model.api.elements.structures.PropertyBinding) (list.get(i))); if (checkList) errorList.addAll(struct.validate(module, element)); java.lang.String name = struct.getName(); java.math.BigDecimal id = struct.getID(); java.util.List names = ((java.util.List) (values.get(id))); if (names != null) { if (names.contains(name)) { if (checkList) errorList.add(new org.eclipse.birt.report.model.api.metadata.PropertyValueException(element, propDefn, name, org.eclipse.birt.report.model.api.metadata.PropertyValueException.DESIGN_EXCEPTION_VALUE_EXISTS)); } else { names.add(name); } } else { names = new java.util.ArrayList(); names.add(name); values.put(id, names); } } if (toAdd != null) { assert toAdd instanceof org.eclipse.birt.report.model.api.elements.structures.PropertyBinding; java.lang.String name = ((org.eclipse.birt.report.model.api.elements.structures.PropertyBinding) (toAdd)).getName(); java.math.BigDecimal id = ((org.eclipse.birt.report.model.api.elements.structures.PropertyBinding) (toAdd)).getID(); java.util.List names = ((java.util.List) (values.get(id))); if ((names != null) && (names.contains(name))) { errorList.add(new org.eclipse.birt.report.model.api.metadata.PropertyValueException(element, propDefn, name, org.eclipse.birt.report.model.api.metadata.PropertyValueException.DESIGN_EXCEPTION_VALUE_EXISTS)); } } } return errorList; }
public void buildContextMenu(org.eclipse.jface.action.IMenuManager menuManager) { org.eclipse.gef.ui.actions.GEFActionConstants.addStandardActionGroups(menuManager); java.lang.Object firstSelectedElement = getFirstElement(); java.lang.Object selectedElements = getSelectedElement(); java.lang.Object multiSelection = getMultiSelectedElement(); if (isMutilSelection(multiSelection)) { menuManager.appendToGroup(GEFActionConstants.GROUP_UNDO, getAction(ActionFactory.UNDO.getId())); menuManager.appendToGroup(GEFActionConstants.GROUP_UNDO, getAction(ActionFactory.REDO.getId())); menuManager.appendToGroup(GEFActionConstants.GROUP_COPY, new org.eclipse.birt.report.designer.internal.ui.views.actions.CutAction(selectedElements)); menuManager.appendToGroup(GEFActionConstants.GROUP_COPY, new org.eclipse.birt.report.designer.internal.ui.views.actions.CopyAction(selectedElements)); menuManager.appendToGroup(GEFActionConstants.GROUP_COPY, new org.eclipse.birt.report.designer.internal.ui.views.actions.PasteAction(selectedElements)); menuManager.appendToGroup(GEFActionConstants.GROUP_COPY, getAction(ActionFactory.DELETE.getId())); if (isRootElementHandleClass(multiSelection)) { org.eclipse.jface.action.Action action = new org.eclipse.birt.report.designer.internal.ui.views.actions.RefreshModuleHandleAction(selectedElements); menuManager.add(action); createInsertElementMenu(menuManager, GEFActionConstants.GROUP_EDIT); createThemeMenu(menuManager, GEFActionConstants.GROUP_REST); } if (isListHandleCalss(multiSelection)) { org.eclipse.jface.action.IAction action = getAction(CreatePlaceHolderPartAction.ID); menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT, action); } createStyleMenu(menuManager, GEFActionConstants.GROUP_REST); if (org.eclipse.birt.report.designer.internal.ui.util.Policy.TRACING_MENU_SHOW) { java.lang.System.out.println("Menu(for Editor) >> Shows for multi-selcetion."); } } else if (firstSelectedElement instanceof org.eclipse.birt.report.model.api.DesignElementHandle) { menuManager.appendToGroup(GEFActionConstants.GROUP_UNDO, getAction(ActionFactory.UNDO.getId())); menuManager.appendToGroup(GEFActionConstants.GROUP_UNDO, getAction(ActionFactory.REDO.getId())); menuManager.appendToGroup(GEFActionConstants.GROUP_COPY, new org.eclipse.birt.report.designer.internal.ui.views.actions.CutAction(selectedElements)); menuManager.appendToGroup(GEFActionConstants.GROUP_COPY, new org.eclipse.birt.report.designer.internal.ui.views.actions.CopyAction(selectedElements)); menuManager.appendToGroup(GEFActionConstants.GROUP_COPY, new org.eclipse.birt.report.designer.internal.ui.views.actions.PasteAction(selectedElements)); createStyleMenu(menuManager, GEFActionConstants.GROUP_REST); if ((((org.eclipse.jface.viewers.IStructuredSelection) (getSelection())).size()) == 1) { java.lang.Object element = ((org.eclipse.jface.viewers.IStructuredSelection) (getSelection())).getFirstElement(); if ((element instanceof org.eclipse.birt.report.designer.internal.ui.editors.schematic.editparts.LabelEditPart) || (element instanceof org.eclipse.birt.report.designer.internal.ui.editors.schematic.editparts.ImageEditPart)) { if (element instanceof org.eclipse.birt.report.designer.internal.ui.editors.schematic.editparts.DataEditPart) { org.eclipse.jface.action.IAction action = getAction(ChangeDataColumnPartAction.ID); menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT, action); } org.eclipse.jface.action.IAction action = getAction(GEFActionConstants.DIRECT_EDIT); action.setAccelerator(SWT.F2); if (element instanceof org.eclipse.birt.report.designer.internal.ui.editors.schematic.editparts.DataEditPart) { action.setText(org.eclipse.birt.report.designer.nls.Messages.getString("SchematicContextMenuProvider.ActionText.editData")); } else { action.setText(org.eclipse.birt.report.designer.nls.Messages.getString("SchematicContextMenuProvider.ActionText.editLabel")); } menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT, action); } if (firstSelectedElement instanceof org.eclipse.birt.report.model.api.ReportItemHandle) { org.eclipse.jface.action.IAction action = getAction(CreatePlaceHolderPartAction.ID); menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT, action); action = getAction(RevertToReportItemPartAction.ID); menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT, action); action = getAction(RevertToTemplatePartAction.ID); menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT, action); } if (firstSelectedElement instanceof org.eclipse.birt.report.model.api.TemplateReportItemHandle) { org.eclipse.jface.action.IAction action = getAction(RevertToReportItemPartAction.ID); menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT, action); } } if (firstSelectedElement instanceof org.eclipse.birt.report.model.api.RowHandle) { if ((getRowHandles().size()) != 0) { org.eclipse.jface.action.MenuManager insertMenu = new org.eclipse.jface.action.MenuManager(org.eclipse.birt.report.designer.internal.ui.editors.schematic.providers.SchematicContextMenuProvider.INSERT_MENU_ITEM_TEXT); org.eclipse.jface.action.MenuManager rowMenu = new org.eclipse.jface.action.MenuManager(org.eclipse.birt.report.designer.internal.ui.editors.schematic.providers.SchematicContextMenuProvider.INSERT_ROW_MENU_ITEM_TEXT); rowMenu.add(getAction(InsertRowAboveAction.ID)); rowMenu.add(getAction(InsertRowBelowAction.ID)); org.eclipse.birt.report.model.api.RowHandle row = ((org.eclipse.birt.report.model.api.RowHandle) (getRowHandles().get(0))); if (!((row.getContainer()) instanceof org.eclipse.birt.report.model.api.GridHandle)) { insertMenu.add(getAction(IncludeHeaderAction.ID)); insertMenu.add(getAction(IncludeDetailAction.ID)); insertMenu.add(getAction(IncludeFooterAction.ID)); } insertMenu.add(rowMenu); menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT, insertMenu); } menuManager.appendToGroup(GEFActionConstants.GROUP_COPY, getAction(DeleteRowAction.ID)); menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT, getAction(MergeAction.ID)); menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT, getAction(SplitAction.ID)); } else if (firstSelectedElement instanceof org.eclipse.birt.report.model.api.ColumnHandle) { menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT, new org.eclipse.birt.report.designer.ui.actions.InsertPasteColumnAction(selectedElements)); if ((getColumnHandles().size()) != 0) { org.eclipse.jface.action.MenuManager subMenu = new org.eclipse.jface.action.MenuManager(org.eclipse.birt.report.designer.internal.ui.editors.schematic.providers.SchematicContextMenuProvider.INSERT_MENU_ITEM_TEXT); subMenu.add(getAction(InsertColumnRightAction.ID)); subMenu.add(getAction(InsertColumnLeftAction.ID)); menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT, subMenu); } menuManager.appendToGroup(GEFActionConstants.GROUP_COPY, getAction(DeleteColumnAction.ID)); menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT, getAction(MergeAction.ID)); menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT, getAction(SplitAction.ID)); } else if (firstSelectedElement instanceof org.eclipse.birt.report.model.api.CellHandle) { createInsertElementMenu(menuManager, GEFActionConstants.GROUP_EDIT); menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT, getAction(MergeAction.ID)); menuManager.appendToGroup(GEFActionConstants.GROUP_EDIT, getAction(SplitAction.ID)); menuManager.appendToGroup(GEFActionConstants.GROUP_COPY, new org.eclipse.birt.report.designer.internal.ui.views.actions.DeleteAction(selectedElements)); } else { menuManager.appendToGroup(GEFActionConstants.GROUP_COPY, getAction(ActionFactory.DELETE.getId())); } if (org.eclipse.birt.report.designer.internal.ui.util.Policy.TRACING_MENU_SHOW) { java.lang.System.out.println(("Menu(for Editor) >> Shows for " + (((org.eclipse.birt.report.model.api.DesignElementHandle) (firstSelectedElement)).getDefn().getDisplayName()))); } } else if (firstSelectedElement instanceof org.eclipse.birt.report.model.api.SlotHandle) { menuManager.appendToGroup(GEFActionConstants.GROUP_UNDO, getAction(ActionFactory.UNDO.getId())); menuManager.appendToGroup(GEFActionConstants.GROUP_UNDO, getAction(ActionFactory.REDO.getId())); menuManager.appendToGroup(GEFActionConstants.GROUP_COPY, new org.eclipse.birt.report.designer.internal.ui.views.actions.CutAction(selectedElements)); menuManager.appendToGroup(GEFActionConstants.GROUP_COPY, new org.eclipse.birt.report.designer.internal.ui.views.actions.CopyAction(selectedElements)); menuManager.appendToGroup(GEFActionConstants.GROUP_COPY, new org.eclipse.birt.report.designer.internal.ui.views.actions.PasteAction(selectedElements)); menuManager.appendToGroup(GEFActionConstants.GROUP_COPY, new org.eclipse.birt.report.designer.internal.ui.views.actions.DeleteAction(selectedElements)); createInsertElementMenu(menuManager, GEFActionConstants.GROUP_EDIT); if (org.eclipse.birt.report.designer.internal.ui.util.Policy.TRACING_MENU_SHOW) { java.lang.System.out.println(((("Menu(for Editor) >> Shows for the slot " + (((org.eclipse.birt.report.model.api.SlotHandle) (firstSelectedElement)).getSlotID())) + " of ") + (((org.eclipse.birt.report.model.api.SlotHandle) (firstSelectedElement)).getElementHandle().getDefn().getDisplayName()))); } } else { } if (!(getTableEditParts().isEmpty())) { createInsertGroupMenu(menuManager, GEFActionConstants.GROUP_ADD); if ((getTableEditParts().size()) == 1) { createDeleteGroupMenus(menuManager, GEFActionConstants.GROUP_ADD); createEditGroupMenu(menuManager, GEFActionConstants.GROUP_ADD); createInsertGroupHeaderFooter(menuManager, GEFActionConstants.GROUP_ADD); org.eclipse.jface.action.Separator separator = new org.eclipse.jface.action.Separator(org.eclipse.birt.report.designer.internal.ui.editors.schematic.actions.EditBindingAction.ID); menuManager.add(separator); menuManager.appendToGroup(EditBindingAction.ID, getAction(EditBindingAction.ID)); } } if (!(getListEditParts().isEmpty())) { createInsertGroupMenu(menuManager, GEFActionConstants.GROUP_ADD); if ((getListEditParts().size()) == 1) { createDeleteGroupMenus(menuManager, GEFActionConstants.GROUP_ADD); createEditGroupMenu(menuManager, GEFActionConstants.GROUP_ADD); org.eclipse.jface.action.Separator separator = new org.eclipse.jface.action.Separator(org.eclipse.birt.report.designer.internal.ui.editors.schematic.actions.EditBindingAction.ID); menuManager.add(separator); menuManager.appendToGroup(EditBindingAction.ID, getAction(EditBindingAction.ID)); } } if (((getElements().size()) == 1) || (isMutilSelection(multiSelection))) { if (firstSelectedElement instanceof org.eclipse.birt.report.model.api.DesignElementHandle) { java.lang.String elementName = ((org.eclipse.birt.report.model.api.DesignElementHandle) (firstSelectedElement)).getDefn().getName(); org.eclipse.birt.report.designer.ui.extensions.IMenuBuilder menuBuilder = org.eclipse.birt.report.designer.internal.ui.extension.ExtensionPointManager.getInstance().getMenuBuilder(elementName); if (menuBuilder != null) { menuBuilder.buildMenu(menuManager, getElements()); } } } }
protected boolean performInsert(java.lang.Object model, org.eclipse.birt.report.model.api.SlotHandle slotHandle, java.lang.String type, java.lang.String position, java.util.Map extendData) throws java.lang.Exception { if (type == null) { java.util.List supportList = org.eclipse.birt.report.designer.util.DEUtil.getElementSupportList(slotHandle); supportList.remove(org.eclipse.birt.report.designer.util.DEUtil.getElementDefn("AutoText")); if ((supportList.size()) == 0) { org.eclipse.birt.report.designer.internal.ui.util.ExceptionHandler.openMessageBox(org.eclipse.birt.report.designer.internal.ui.views.DefaultNodeProvider.WARNING_DIALOG_TITLE, org.eclipse.birt.report.designer.internal.ui.views.DefaultNodeProvider.WARNING_DIALOG_MESSAGE_EMPTY_LIST, SWT.ICON_WARNING); return false; } else if ((supportList.size()) == 1) { type = ((org.eclipse.birt.report.model.api.metadata.IElementDefn) (supportList.get(0))).getName(); } else { org.eclipse.birt.report.designer.internal.ui.dialogs.NewSectionDialog dialog = new org.eclipse.birt.report.designer.internal.ui.dialogs.NewSectionDialog(org.eclipse.ui.PlatformUI.getWorkbench().getDisplay().getActiveShell(), supportList); if ((dialog.open()) == (org.eclipse.jface.dialogs.Dialog.CANCEL)) { return false; } type = ((java.lang.String) (dialog.getResult()[0])); } } org.eclipse.birt.report.designer.internal.ui.extension.experimental.PaletteEntryExtension[] entries = org.eclipse.birt.report.designer.internal.ui.extension.experimental.EditpartExtensionManager.getPaletteEntries(); for (int i = 0; i < (entries.length); i++) { if (entries[i].getItemName().equals(type)) { extendData.put(IRequestConstants.REQUEST_KEY_RESULT, entries[i].executeCreate()); return true; } } org.eclipse.birt.report.model.api.DesignElementHandle elementHandle = createElement(slotHandle, type); if (extendData != null) { extendData.put(IRequestConstants.REQUEST_KEY_RESULT, elementHandle); } if (elementHandle == null) { return false; } if (position == (org.eclipse.birt.report.designer.internal.ui.views.actions.InsertAction.CURRENT)) { slotHandle.add(elementHandle); } else { int pos = org.eclipse.birt.report.designer.util.DNDUtil.calculateNextPosition(model, org.eclipse.birt.report.designer.util.DNDUtil.handleValidateTargetCanContain(model, elementHandle, true)); if ((pos > 0) && (position == (org.eclipse.birt.report.designer.internal.ui.views.actions.InsertAction.ABOVE))) { pos--; } if (pos == (-1)) { slotHandle.add(elementHandle); } else { slotHandle.add(elementHandle, pos); } } if (elementHandle instanceof org.eclipse.birt.report.model.api.ExtendedItemHandle) { if (((org.eclipse.birt.report.designer.internal.ui.processor.ElementProcessorFactory.createProcessor(elementHandle)) != null) && (!(org.eclipse.birt.report.designer.internal.ui.processor.ElementProcessorFactory.createProcessor(elementHandle).editElement(elementHandle)))) { return false; } } return true; }
public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { org.eclipse.swt.widgets.FileDialog dialog = new org.eclipse.swt.widgets.FileDialog(org.eclipse.birt.report.designer.internal.ui.util.UIUtil.getDefaultShell()); if (needFilter) { dialog.setFilterExtensions(new java.lang.String[]{ fileExt }); } try { java.lang.String filename = dialog.open(); if (filename != null) { filename = new java.io.File(filename).toURL().toString(); if (needFilter) { filename = org.eclipse.birt.report.model.api.util.URIUtil.getRelativePath(getBasePath(), filename); } filename = new org.eclipse.core.runtime.Path(filename).toString(); if (needQuote) { filename = ("\"" + filename) + "\""; } text.setText(filename); } else { text.setText(""); } updateButtons(); } catch (java.lang.Exception ex) { org.eclipse.birt.report.designer.internal.ui.util.ExceptionHandler.handle(ex); } }
protected void populateTableList() { if ((rootNode) != null) { availableDbObjectsTree.removeAll(); setRootElement(); } java.lang.String namePattern = null; java.lang.String[] tableType = null; if ((searchTxt.getText().length()) > 0) { namePattern = searchTxt.getText(); if (namePattern != null) { if ((namePattern.lastIndexOf('%')) == (-1)) { namePattern = namePattern + "%"; } } } java.lang.String dbtype = getSelectedDbType(); if ((dbtype != null) && (!(org.eclipse.birt.report.data.oda.jdbc.ui.editors.DbType.ALL_STRING.equalsIgnoreCase(dbtype)))) { tableType = new java.lang.String[]{ dbtype }; } java.lang.String catalogName = metaDataProvider.getCatalog(); java.util.ArrayList tableList = new java.util.ArrayList(); java.util.ArrayList targetSchemaList = new java.util.ArrayList(); if (((schemaList) != null) && ((schemaList.size()) > 0)) { if ((schemaCombo.getSelectionIndex()) == 0) { targetSchemaList = schemaList; } else { targetSchemaList.add(schemaCombo.getItem(schemaCombo.getSelectionIndex())); } java.sql.ResultSet tablesRs = null; int numTables = 0; boolean maxRecordsDisplayed = false; for (int i = 0; i < (targetSchemaList.size()); i++) { if (maxRecordsDisplayed) { break; } int count = 0; java.lang.String schemaName = ((java.lang.String) (targetSchemaList.get(i))); tablesRs = metaDataProvider.getAlltables(catalogName, schemaName, namePattern, tableType); tableList = new java.util.ArrayList(); if (tablesRs == null) { continue; } try { java.util.ArrayList schema = new java.util.ArrayList(); org.eclipse.swt.widgets.TreeItem[] schemaTreeItem = null; org.eclipse.swt.graphics.Image image = tableImage; if (count == 0) { schema.add(schemaName); schemaTreeItem = org.eclipse.birt.report.data.oda.jdbc.ui.util.Utility.createTreeItems(rootNode, schema, SWT.NONE, schemaImage); if ((schemaTreeItem != null) && ((schemaTreeItem.length) > 0)) availableDbObjectsTree.showItem(schemaTreeItem[0]); } while (tablesRs.next()) { count++; java.lang.String tableName = tablesRs.getString("TABLE_NAME"); java.lang.String type = tablesRs.getString("TABLE_TYPE"); int dbType = org.eclipse.birt.report.data.oda.jdbc.ui.util.DbObject.TABLE_TYPE; if (type.equalsIgnoreCase("TABLE")) { image = tableImage; dbType = org.eclipse.birt.report.data.oda.jdbc.ui.util.DbObject.TABLE_TYPE; } else if (type.equalsIgnoreCase("VIEW")) { image = viewImage; dbType = org.eclipse.birt.report.data.oda.jdbc.ui.util.DbObject.VIEW_TYPE; } java.lang.String fullyQualifiedTableName = tableName; if ((schemaName != null) && ((schemaName.trim().length()) > 0)) { fullyQualifiedTableName = (schemaName + ".") + tableName; } org.eclipse.birt.report.data.oda.jdbc.ui.util.DbObject dbObject = new org.eclipse.birt.report.data.oda.jdbc.ui.util.DbObject(fullyQualifiedTableName, tableName, dbType, image); tableList.add(dbObject); numTables++; if (numTables == (org.eclipse.birt.report.data.oda.jdbc.ui.editors.DbType.MAX_ITEMS_DISPLAY_COUNT)) { maxRecordsDisplayed = true; break; } } if ((schemaTreeItem != null) && ((schemaTreeItem.length) > 0)) { org.eclipse.swt.widgets.TreeItem[] item = org.eclipse.birt.report.data.oda.jdbc.ui.util.Utility.createTreeItems(schemaTreeItem[0], tableList, SWT.NONE, null); if ((item != null) && ((item.length) > 0)) availableDbObjectsTree.showItem(item[0]); } } catch (java.sql.SQLException e) { e.printStackTrace(); } } checkForMaxRecordsDisplayed(maxRecordsDisplayed, tablesRs); } else { java.sql.ResultSet tablesRs = metaDataProvider.getAlltables(catalogName, null, namePattern, tableType); if (tablesRs == null) { return; } int count = 0; boolean maxRecordsDisplayed = false; try { org.eclipse.swt.graphics.Image image = tableImage; while (tablesRs.next()) { count++; java.lang.String tableName = tablesRs.getString("TABLE_NAME"); java.lang.String type = tablesRs.getString("TABLE_TYPE"); int dbType = org.eclipse.birt.report.data.oda.jdbc.ui.util.DbObject.TABLE_TYPE; if (type.equalsIgnoreCase("TABLE")) { image = tableImage; dbType = org.eclipse.birt.report.data.oda.jdbc.ui.util.DbObject.TABLE_TYPE; } else if (type.equalsIgnoreCase("VIEW")) { image = viewImage; dbType = org.eclipse.birt.report.data.oda.jdbc.ui.util.DbObject.VIEW_TYPE; } org.eclipse.birt.report.data.oda.jdbc.ui.util.DbObject dbObject = new org.eclipse.birt.report.data.oda.jdbc.ui.util.DbObject(tableName, tableName, dbType, image); tableList.add(dbObject); if (count == (org.eclipse.birt.report.data.oda.jdbc.ui.editors.DbType.MAX_ITEMS_DISPLAY_COUNT)) { maxRecordsDisplayed = true; break; } } org.eclipse.swt.widgets.TreeItem[] item = org.eclipse.birt.report.data.oda.jdbc.ui.util.Utility.createTreeItems(rootNode, tableList, SWT.NONE, null); if ((item != null) && ((item.length) > 0)) availableDbObjectsTree.showItem(item[0]); checkForMaxRecordsDisplayed(maxRecordsDisplayed, tablesRs); } catch (java.lang.Exception e) { e.printStackTrace(); } } addFetchColumnListener(); }
protected void doRefresh() throws org.eclipse.birt.report.engine.api.EngineException { org.eclipse.birt.report.engine.api.IReportDocumentLock lock = null; try { lock = lock(getName()); synchronized(lock) { org.eclipse.birt.report.engine.api.impl.ReportDocumentReader.ReportDocumentCoreInfo documentInfo = new org.eclipse.birt.report.engine.api.impl.ReportDocumentReader.ReportDocumentCoreInfo(); documentInfo.checkpoint = CHECKPOINT_INIT; documentInfo.pageCount = PAGECOUNT_INIT; org.eclipse.birt.core.archive.RAInputStream in = archive.getStream(org.eclipse.birt.report.engine.api.impl.CHECKPOINT_STREAM); if (in == null) { documentInfo.checkpoint = CHECKPOINT_END; if ((pageHintReader) == null) { createPageHintReader(); } if ((pageHintReader) != null) { documentInfo.pageCount = pageHintReader.getTotalPage(); } } else { try { java.io.DataInputStream di = new java.io.DataInputStream(in); documentInfo.checkpoint = org.eclipse.birt.core.util.IOUtil.readInt(di); documentInfo.pageCount = org.eclipse.birt.core.util.IOUtil.readLong(di); } finally { if (in != null) { in.close(); } } if ((documentInfo.checkpoint) == (checkpoint)) { return; } } in = archive.getStream(org.eclipse.birt.report.engine.api.impl.CORE_STREAM); try { java.io.DataInputStream di = new java.io.DataInputStream(in); documentInfo.version = checkVersion(di); java.lang.String orgSystemId = org.eclipse.birt.core.util.IOUtil.readString(di); if ((systemId) == null) { documentInfo.systemId = orgSystemId; } else { documentInfo.systemId = systemId; } documentInfo.parameters = convertToCompatibleParameter(org.eclipse.birt.report.engine.internal.util.EngineIOUtil.readMap(di)); documentInfo.globalVariables = ((java.util.HashMap) (org.eclipse.birt.core.util.IOUtil.readMap(di))); } finally { if (in != null) { in.close(); } } checkpoint = documentInfo.checkpoint; pageCount = documentInfo.pageCount; version = documentInfo.version; systemId = documentInfo.systemId; globalVariables = documentInfo.globalVariables; parameters = documentInfo.parameters; } } catch (org.eclipse.birt.report.engine.api.EngineException ee) { throw ee; } catch (java.lang.Exception ex) { throw new org.eclipse.birt.report.engine.api.EngineException("document refresh failed", ex); } finally { lock.unlock(); } }
private void doEdit(java.lang.Object structureOrHandle) { org.eclipse.birt.report.designer.ui.dialogs.FilterConditionBuilder dlg = new org.eclipse.birt.report.designer.ui.dialogs.FilterConditionBuilder(((org.eclipse.birt.report.designer.data.ui.dataset.DataSetEditor) (getContainer())).getShell(), this.getTitle(structureOrHandle), this.getTitle(structureOrHandle)); dlg.setDataSetHandle(((org.eclipse.birt.report.model.api.DataSetHandle) (getContainer().getModel())), new org.eclipse.birt.report.designer.data.ui.util.DataSetExpressionProvider(((org.eclipse.birt.report.model.api.DataSetHandle) (getContainer().getModel())))); dlg.setBindingParams(getParamBindingHandleArray()); dlg.setInput(structureOrHandle); if ((dlg.open()) == (org.eclipse.jface.window.Window.OK)) { update(structureOrHandle); } }
protected boolean handleMove() { boolean validateTrue = false; if (isCreating) { return true; } updateTargetUnderMouse(); if ((getTargetEditPart().getModel()) instanceof org.eclipse.birt.report.model.api.LibraryHandle) { return true; } if ((getTargetEditPart()) != null) { validateTrue = org.eclipse.birt.report.designer.internal.ui.editors.schematic.tools.ReportCreationTool.handleValidatePalette(getFactory().getObjectType(), getTargetEditPart()); } if (validateTrue) { updateTargetRequest(); setCurrentCommand(getCommand()); showTargetFeedback(); } else { setCurrentCommand(null); } return validateTrue; }
public void selectionChanged(org.eclipse.jface.viewers.SelectionChangedEvent event) { org.eclipse.jface.viewers.IStructuredSelection selection = ((org.eclipse.jface.viewers.IStructuredSelection) (event.getSelection())); org.eclipse.jface.viewers.Viewer target = null; if ((event.getSource()) == (categoryTable)) { target = subCategoryTable; } else if ((event.getSource()) == (subCategoryTable)) { target = functionTable; } if (target != null) { target.setInput((selection == null ? null : selection.getFirstElement())); } if ((event.getSource()) == (functionTable)) { org.eclipse.swt.widgets.Table table = functionTable.getTable(); if ((table.getSelectionCount()) == 1) { java.lang.String message = table.getSelection()[0].getText(); message = message.replaceAll("&", "&&"); messageLine.setText(message); } else { messageLine.setText(""); } } }
public boolean hasNextChild() { if ((children) == null) { return false; } if ((currentChild) < (children.size())) { return true; } if (needRowGroups) { if (endOfGroups) { return false; } try { while (!(endOfGroups)) { int endingGroupIndex = org.eclipse.birt.report.item.crosstab.core.re.executor.GroupUtil.getEndingGroupLevel(rowCursor, groupCursors); if (endingGroupIndex <= 0) { currentChild = 0; children = new java.util.ArrayList(); if (needRowGrandTotal(org.eclipse.birt.report.item.crosstab.core.re.executor.GRAND_TOTAL_LOCATION_AFTER)) { org.eclipse.birt.report.item.crosstab.core.re.executor.CrosstabFooterExecutor totalExecutor = new org.eclipse.birt.report.item.crosstab.core.re.executor.CrosstabFooterExecutor(this); children.add(totalExecutor); } endOfGroups = true; return (currentChild) < (children.size()); } if (rowCursor.next()) { collectExecutable(); return (currentChild) < (children.size()); } } } catch (javax.olap.OLAPException e) { org.eclipse.birt.report.item.crosstab.core.re.executor.CrosstabReportItemExecutor.logger.log(java.util.logging.Level.SEVERE, org.eclipse.birt.report.item.crosstab.core.i18n.Messages.getString("CrosstabReportItemExecutor.error.generate.columns"), e); } } return false; }
protected void addColumBinding(org.eclipse.birt.data.engine.api.IBaseQueryDefinition transfer, org.eclipse.birt.report.model.api.ComputedColumnHandle columnBinding) throws org.eclipse.birt.chart.exception.ChartException { java.lang.String name = columnBinding.getName(); java.lang.String expr = columnBinding.getExpression(); java.lang.String type = columnBinding.getDataType(); int dbType = org.eclipse.birt.report.engine.adapter.ModelDteApiAdapter.toDteDataType(type); org.eclipse.birt.data.engine.api.IBaseExpression dbExpr = (expr == null) ? null : new org.eclipse.birt.data.engine.api.querydefn.ScriptExpression(expr, dbType); org.eclipse.birt.data.engine.api.IBinding binding = new org.eclipse.birt.data.engine.api.querydefn.Binding(name, dbExpr); try { binding.setDataType(dbType); if ((columnBinding.getAggregateOn()) != null) { binding.addAggregateOn(columnBinding.getAggregateOn()); } if ((columnBinding.getAggregateFunction()) != null) { binding.setAggrFunction(columnBinding.getAggregateFunction()); } java.lang.String filter = columnBinding.getFilterExpression(); if (filter != null) { binding.setFilter(new org.eclipse.birt.data.engine.api.querydefn.ScriptExpression(filter)); } java.util.Iterator arguments = columnBinding.argumentsIterator(); if (arguments != null) { while (arguments.hasNext()) { org.eclipse.birt.report.model.api.AggregationArgumentHandle argumentHandle = ((org.eclipse.birt.report.model.api.AggregationArgumentHandle) (arguments.next())); java.lang.String argument = argumentHandle.getValue(); if (argument != null) { binding.addArgument(new org.eclipse.birt.data.engine.api.querydefn.ScriptExpression(argument)); } } } transfer.addBinding(binding); } catch (org.eclipse.birt.data.engine.core.DataException ex) { throw new org.eclipse.birt.chart.exception.ChartException(org.eclipse.birt.chart.reportitem.plugin.ChartReportItemPlugin.ID, org.eclipse.birt.chart.exception.ChartException.DATA_BINDING, ex); } }
public void startImage(org.eclipse.birt.report.engine.content.IImageContent image) { assert image != null; org.eclipse.birt.report.engine.content.IStyle mergedStyle = image.getStyle(); org.eclipse.birt.report.engine.emitter.html.HTMLReportEmitter.logger.log(java.util.logging.Level.FINE, "[HTMLImageEmitter] Start image"); java.lang.StringBuffer styleBuffer = new java.lang.StringBuffer(); int display = checkElementType(image.getX(), image.getY(), mergedStyle, styleBuffer); java.lang.String tag = openTagByType(display, org.eclipse.birt.report.engine.emitter.html.HTMLReportEmitter.DISPLAY_BLOCK); boolean hasAction = handleAction(image.getHyperlinkAction()); if ((image.getBookmark()) == null) { image.setBookmark(idGenerator.generateUniqueID()); } boolean useSVG = (("image/svg+xml".equalsIgnoreCase(image.getMIMEType())) || (".svg".equalsIgnoreCase(image.getExtension()))) || (((image.getURI()) != null) && (image.getURI().toLowerCase().endsWith(".svg"))); if (useSVG) { image.setMIMEType("image/svg+xml"); } boolean useSWT = "application/x-shockwave-flash".equalsIgnoreCase(image.getMIMEType()); if (useSVG || useSWT) { outputSVGImage(image, styleBuffer, display); } else { java.lang.Object imageMapObject = image.getImageMap(); java.lang.String imageMapId = null; boolean hasImageMap = ((imageMapObject != null) && (imageMapObject instanceof java.lang.String)) && ((((java.lang.String) (imageMapObject)).length()) > 0); if (hasImageMap) { java.lang.String id = idGenerator.generateUniqueID(); imageMapId = ((htmlIDNamespace) != null) ? (htmlIDNamespace) + id : id; writer.openTag(HTMLTags.TAG_MAP); writer.attribute(HTMLTags.ATTR_ID, imageMapId); writer.attribute(HTMLTags.ATTR_NAME, imageMapId); writer.cdata(((java.lang.String) (imageMapObject))); writer.closeTag(HTMLTags.TAG_MAP); } writer.openTag(HTMLTags.TAG_IMAGE); outputImageStyleClassBookmark(image, HTMLTags.TAG_IMAGE); java.lang.String ext = image.getExtension(); java.lang.String imgUri = getImageURI(image); writer.attribute(HTMLTags.ATTR_SRC, imgUri); if (hasImageMap) { if (!hasAction) { resetImageDefaultBorders(image, styleBuffer); } writer.attribute(HTMLTags.ATTR_USEMAP, ("#" + imageMapId)); } java.lang.String altText = image.getAltText(); if (altText == null) { writer.attributeAllowEmpty(HTMLTags.ATTR_ALT, ""); } else { writer.attribute(HTMLTags.ATTR_ALT, altText); } java.lang.String titleText = image.getHelpText(); if (titleText == null) { if (hasAction) { titleText = image.getHyperlinkAction().getTooltip(); } } writer.attribute(HTMLTags.ATTR_TITLE, titleText); htmlEmitter.buildImageStyle(image, styleBuffer, display); writer.attribute(HTMLTags.ATTR_STYLE, styleBuffer.toString()); if ((".PNG".equalsIgnoreCase(ext)) && ((imageHandler) != null)) { if (needFixTransparentPNG) { if (null == (htmlIDNamespace)) { writer.attribute(HTMLTags.ATTR_ONLOAD, "fixPNG(this)"); } else { writer.attribute(HTMLTags.ATTR_ONLOAD, ((htmlIDNamespace) + "fixPNG(this)")); } } } writer.closeTag(HTMLTags.TAG_IMAGE); } if (hasAction) { writer.closeTag(HTMLTags.TAG_A); } if (tag != null) { writer.closeTag(tag); } }
@java.lang.Override public final org.eclipse.birt.chart.model.data.DataSet populate(java.lang.Object oResultSetDef, org.eclipse.birt.chart.model.data.DataSet ds) throws org.eclipse.birt.chart.exception.ChartException { if (oResultSetDef instanceof org.eclipse.birt.chart.datafeed.IResultSetDataSet) { final org.eclipse.birt.chart.datafeed.IResultSetDataSet rsds = ((org.eclipse.birt.chart.datafeed.IResultSetDataSet) (oResultSetDef)); final long lRowCount = rsds.getSize(); if (lRowCount <= 0) { throw new org.eclipse.birt.chart.exception.ChartException(org.eclipse.birt.chart.plugin.ChartEngineExtensionPlugin.ID, org.eclipse.birt.chart.exception.ChartException.ZERO_DATASET, "exception.empty.dataset", org.eclipse.birt.chart.engine.extension.i18n.Messages.getResourceBundle(getULocale())); } int dataType = rsds.getDataType(0); boolean isBigDecimal = false; int i = 0; final org.eclipse.birt.chart.extension.datafeed.BubbleEntry[] bea = new org.eclipse.birt.chart.extension.datafeed.BubbleEntry[((int) (lRowCount))]; java.lang.Object[][] values = new java.lang.Object[((int) (lRowCount))][2]; if (dataType == (org.eclipse.birt.chart.computation.IConstants.NUMERICAL)) { while (rsds.hasNext()) { java.lang.Object[] o = rsds.next(); java.lang.Object[] newO = new java.lang.Object[2]; newO[0] = o[0]; newO[1] = o[1]; values[(i++)] = newO; if (((!isBigDecimal) && (org.eclipse.birt.chart.util.NumberUtil.isBigDecimal(o[0]))) || (org.eclipse.birt.chart.util.NumberUtil.isBigDecimal(o[1]))) { isBigDecimal = true; } } } else { while (rsds.hasNext()) { java.lang.Object[] o = rsds.next(); java.lang.Object[] newO = new java.lang.Object[2]; newO[0] = o[0]; newO[1] = o[1]; values[(i++)] = newO; } } if (isBigDecimal) { i = 0; for (java.lang.Object[] o : values) { validateBubbleEntryData(o); java.lang.Object value = o[0]; java.lang.Object size = o[1]; bea[(i++)] = new org.eclipse.birt.chart.extension.datafeed.BubbleEntry(org.eclipse.birt.chart.util.NumberUtil.asBigNumber(((java.lang.Number) (value)), null), org.eclipse.birt.chart.util.NumberUtil.asBigNumber(((java.lang.Number) (size)), null)); } } else { for (i = 0; i < (values.length); i++) { validateBubbleEntryData(values[i]); java.lang.Object value = values[i][0]; java.lang.Object size = values[i][1]; if (dataType == (org.eclipse.birt.chart.computation.IConstants.NUMERICAL)) { bea[i] = new org.eclipse.birt.chart.extension.datafeed.BubbleEntry(value, size); } else if (dataType == (org.eclipse.birt.chart.computation.IConstants.DATE_TIME)) { bea[i] = new org.eclipse.birt.chart.extension.datafeed.BubbleEntry((value == null ? null : value), size); } else { bea[i] = new org.eclipse.birt.chart.extension.datafeed.BubbleEntry(value, size, (i + 1)); } } } if (ds == null) { ds = org.eclipse.birt.chart.model.data.impl.BubbleDataSetImpl.create(bea); } else { ds.setValues(bea); } ((org.eclipse.birt.chart.model.data.impl.DataSetImpl) (ds)).setIsBigNumber(isBigDecimal); } else { throw new org.eclipse.birt.chart.exception.ChartException(org.eclipse.birt.chart.plugin.ChartEngineExtensionPlugin.ID, org.eclipse.birt.chart.exception.ChartException.DATA_SET, "exception.unknown.custom.dataset", new java.lang.Object[]{ ds, oResultSetDef }, org.eclipse.birt.chart.engine.extension.i18n.Messages.getResourceBundle(getULocale())); } return ds; }
AggregationCalculator(org.eclipse.birt.data.engine.olap.data.impl.AggregationDefinition aggregationDef, org.eclipse.birt.data.engine.olap.data.impl.DimColumn[] parameterColNames, org.eclipse.birt.data.engine.olap.data.impl.aggregation.IDataSet4Aggregation.MetaInfo metaInfo) throws java.io.IOException, org.eclipse.birt.data.engine.core.DataException { java.lang.Object[] params = new java.lang.Object[]{ aggregationDef, parameterColNames, metaInfo }; org.eclipse.birt.data.engine.olap.data.impl.aggregation.AggregationCalculator.logger.entering(org.eclipse.birt.data.engine.olap.data.impl.aggregation.AggregationCalculator.class.getName(), "AggregationCalculator", params); this.aggregation = aggregationDef; org.eclipse.birt.data.engine.olap.data.impl.AggregationFunctionDefinition[] aggregationFunction = aggregationDef.getAggregationFunctions(); if ((aggregationDef.getLevels()) == null) this.levelCount = 0; else this.levelCount = aggregationDef.getLevels().length; if (aggregationFunction != null) { this.accumulators = new org.eclipse.birt.data.engine.api.aggregation.Accumulator[aggregationFunction.length]; this.measureIndexes = new int[aggregationFunction.length]; this.parameterColIndex = new int[aggregationFunction.length]; for (int i = 0; i < (aggregationFunction.length); i++) { org.eclipse.birt.data.engine.api.aggregation.IAggrFunction aggregation = org.eclipse.birt.data.engine.api.aggregation.AggregationManager.getInstance().getAggregation(aggregationFunction[i].getFunctionName()); if (aggregation == null) { throw new org.eclipse.birt.data.engine.core.DataException(((org.eclipse.birt.data.engine.i18n.DataResourceHandle.getInstance().getMessage(ResourceConstants.UNSUPPORTED_FUNCTION)) + (aggregationFunction[i].getFunctionName()))); } if (org.eclipse.birt.data.engine.aggregation.AggregationUtil.needDataField(aggregation)) { this.parameterColIndex[i] = org.eclipse.birt.data.engine.olap.data.impl.aggregation.AggregationCalculator.find(parameterColNames, aggregationFunction[i].getParaCol()); } else { this.parameterColIndex[i] = -1; } this.accumulators[i] = aggregation.newAccumulator(); this.accumulators[i].start(); final java.lang.String measureName = aggregationFunction[i].getMeasureName(); this.measureIndexes[i] = metaInfo.getMeasureIndex(measureName); if (((this.measureIndexes[i]) == (-1)) && (measureName != null)) { throw new org.eclipse.birt.data.engine.core.DataException(org.eclipse.birt.data.engine.i18n.ResourceConstants.MEASURE_NAME_NOT_FOUND, measureName); } } } result = new org.eclipse.birt.data.engine.olap.data.util.BufferedStructureArray(org.eclipse.birt.data.engine.olap.data.impl.aggregation.AggregationResultRow.getCreator(), org.eclipse.birt.data.engine.olap.data.impl.Constants.LIST_BUFFER_SIZE); measureInfos = metaInfo.getMeasureInfos(); facttableRow = new org.eclipse.birt.data.engine.olap.data.impl.aggregation.FacttableRow(measureInfos); org.eclipse.birt.data.engine.olap.data.impl.aggregation.AggregationCalculator.logger.exiting(org.eclipse.birt.data.engine.olap.data.impl.aggregation.AggregationCalculator.class.getName(), "AggregationCalculator"); }
public static java.lang.Object evalExpr(org.eclipse.birt.data.engine.api.IBaseExpression expr, org.mozilla.javascript.Context cx, org.mozilla.javascript.Scriptable scope, java.lang.String source, int lineNo) throws org.eclipse.birt.data.engine.core.DataException { if (org.eclipse.birt.data.engine.script.ScriptEvalUtil.logger.isLoggable(java.util.logging.Level.FINER)) org.eclipse.birt.data.engine.script.ScriptEvalUtil.logger.entering(org.eclipse.birt.data.engine.script.ScriptEvalUtil.class.getName(), "evalExpr", ((((("evalExpr() expr=" + (org.eclipse.birt.data.engine.impl.LogUtil.toString(expr))) + ", source=") + source) + ", lineNo=") + lineNo)); if (expr == null) { if (org.eclipse.birt.data.engine.script.ScriptEvalUtil.logger.isLoggable(java.util.logging.Level.FINER)) org.eclipse.birt.data.engine.script.ScriptEvalUtil.logger.exiting(org.eclipse.birt.data.engine.script.ScriptEvalUtil.class.getName(), "evalExpr", null); return null; } else if (expr instanceof org.eclipse.birt.data.engine.api.IConditionalExpression) { org.eclipse.birt.data.engine.api.querydefn.ConditionalExpression ConditionalExpr = ((org.eclipse.birt.data.engine.api.querydefn.ConditionalExpression) (expr)); java.lang.Object expression = org.eclipse.birt.data.engine.script.ScriptEvalUtil.evalExpr(ConditionalExpr.getExpression(), cx, scope, source, lineNo); java.lang.Object Op1 = org.eclipse.birt.data.engine.script.ScriptEvalUtil.evalExpr(org.eclipse.birt.data.engine.script.ScriptEvalUtil.constructValidScriptExpression(ConditionalExpr.getOperand1()), cx, scope, source, lineNo); java.lang.Object Op2 = org.eclipse.birt.data.engine.script.ScriptEvalUtil.evalExpr(org.eclipse.birt.data.engine.script.ScriptEvalUtil.constructValidScriptExpression(ConditionalExpr.getOperand2()), cx, scope, source, lineNo); if (org.eclipse.birt.data.engine.script.ScriptEvalUtil.logger.isLoggable(java.util.logging.Level.FINER)) org.eclipse.birt.data.engine.script.ScriptEvalUtil.logger.exiting(org.eclipse.birt.data.engine.script.ScriptEvalUtil.class.getName(), "evalExpr", org.eclipse.birt.data.engine.script.ScriptEvalUtil.evalConditionalExpr(expression, ConditionalExpr.getOperator(), Op1, Op2)); return org.eclipse.birt.data.engine.script.ScriptEvalUtil.evalConditionalExpr(expression, ConditionalExpr.getOperator(), Op1, Op2); } else { org.eclipse.birt.data.engine.api.IScriptExpression jsExpr = ((org.eclipse.birt.data.engine.api.IScriptExpression) (expr)); if (org.eclipse.birt.data.engine.script.ScriptEvalUtil.logger.isLoggable(java.util.logging.Level.FINER)) org.eclipse.birt.data.engine.script.ScriptEvalUtil.logger.exiting(org.eclipse.birt.data.engine.script.ScriptEvalUtil.class.getName(), "evalExpr", org.eclipse.birt.data.engine.script.ScriptEvalUtil.evaluateJSAsExpr(cx, scope, jsExpr.getText(), source, lineNo)); if (((jsExpr.getText()) != null) && ((jsExpr.getHandle()) != null)) return org.eclipse.birt.data.engine.script.ScriptEvalUtil.convertNativeObjToJavaObj(((org.eclipse.birt.data.engine.impl.CompiledExpression) (jsExpr.getHandle())).evaluate(cx, scope)); return org.eclipse.birt.data.engine.script.ScriptEvalUtil.evaluateJSAsExpr(cx, scope, jsExpr.getText(), source, lineNo); } }
protected java.lang.String buildDrillAction(org.eclipse.birt.report.engine.api.IAction action, org.eclipse.birt.report.engine.api.script.IReportContext context) { if ((action == null) || (context == null)) return null; java.lang.String baseURL = null; java.lang.Object renderContext = getRenderContext(context); if (renderContext instanceof org.eclipse.birt.report.engine.api.HTMLRenderContext) { baseURL = ((org.eclipse.birt.report.engine.api.HTMLRenderContext) (renderContext)).getBaseURL(); } if (renderContext instanceof org.eclipse.birt.report.engine.api.PDFRenderContext) { baseURL = ((org.eclipse.birt.report.engine.api.PDFRenderContext) (renderContext)).getBaseURL(); } if (baseURL == null) baseURL = org.eclipse.birt.report.IBirtConstants.VIEWER_RUN; java.lang.StringBuffer link = new java.lang.StringBuffer(); java.lang.String reportName = getReportName(context, action); if ((reportName != null) && (!(reportName.equals("")))) { link.append(baseURL); link.append((reportName.toLowerCase().endsWith(".rptdocument") ? "?__document=" : "?__report=")); try { link.append(java.net.URLEncoder.encode(reportName, ParameterAccessor.UTF_8_ENCODE)); } catch (java.io.UnsupportedEncodingException e1) { } java.lang.String format = action.getFormat(); if ((format == null) || ((format.length()) == 0)) format = hostFormat; if ((format != null) && ((format.length()) > 0)) { link.append(org.eclipse.birt.report.utility.ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_FORMAT, format)); } if ((action.getParameterBindings()) != null) { java.util.Iterator paramsIte = action.getParameterBindings().entrySet().iterator(); while (paramsIte.hasNext()) { java.util.Map.Entry entry = ((java.util.Map.Entry) (paramsIte.next())); try { java.lang.String key = ((java.lang.String) (entry.getKey())); java.lang.Object valueObj = entry.getValue(); if (valueObj != null) { java.lang.String value = org.eclipse.birt.report.utility.DataUtil.getDisplayValue(valueObj); link.append(org.eclipse.birt.report.utility.ParameterAccessor.getQueryParameterString(java.net.URLEncoder.encode(key, ParameterAccessor.UTF_8_ENCODE), java.net.URLEncoder.encode(value, ParameterAccessor.UTF_8_ENCODE))); } } catch (java.io.UnsupportedEncodingException e) { } } if ((!(reportName.toLowerCase().endsWith(ParameterAccessor.SUFFIX_REPORT_DOCUMENT))) && ((baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_FRAMESET)) > 0)) { link.append(org.eclipse.birt.report.utility.ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_OVERWRITE, java.lang.String.valueOf(true))); } } if ((locale) != null) { link.append(org.eclipse.birt.report.utility.ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE, locale.toString())); } if (isRtl) { link.append(org.eclipse.birt.report.utility.ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL, java.lang.String.valueOf(isRtl))); } link.append(org.eclipse.birt.report.utility.ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE, java.lang.String.valueOf(this.isMasterPageContent))); try { if ((resourceFolder) != null) resourceFolder = java.net.URLEncoder.encode(resourceFolder, ParameterAccessor.UTF_8_ENCODE); } catch (java.io.UnsupportedEncodingException e) { } if ((resourceFolder) != null) { link.append(org.eclipse.birt.report.utility.ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RESOURCE_FOLDER, this.resourceFolder)); } if ((action.getBookmark()) != null) { try { if (((baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_PREVIEW)) > 0) || (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format))) { link.append("#"); } else { link.append("&__bookmark="); } link.append(java.net.URLEncoder.encode(action.getBookmark(), ParameterAccessor.UTF_8_ENCODE)); } catch (java.io.UnsupportedEncodingException e) { } } } return link.toString(); }
public java.lang.Object get(int index, org.mozilla.javascript.Scriptable start) { if (!(rsets.isEmpty())) { org.eclipse.birt.report.engine.data.IResultSet rset = ((org.eclipse.birt.report.engine.data.IResultSet) (rsets.getFirst())); try { org.eclipse.birt.data.engine.api.IResultMetaData metaData = rset.getResultMetaData(); if ((index >= 0) && (index < (metaData.getColumnCount()))) { java.lang.String name = metaData.getColumnName(index); return rset.getValue(name); } } catch (org.eclipse.birt.core.exception.BirtException ex) { } } return NOT_FOUND; }
public double toDouble(org.eclipse.birt.report.model.core.Module module, java.lang.Object value) { if (value == null) return 0.0; if (value instanceof java.lang.String) { try { return java.lang.Double.valueOf(((java.lang.String) (value))).doubleValue(); } catch (java.lang.NumberFormatException e) { return 0.0; } } org.eclipse.birt.report.model.api.metadata.DimensionValue dim = ((org.eclipse.birt.report.model.api.metadata.DimensionValue) (value)); if (DimensionValue.DEFAULT_UNIT.equalsIgnoreCase(dim.getUnits())) return dim.getMeasure(); try { return org.eclipse.birt.report.model.api.util.DimensionUtil.convertTo(dim.getMeasure(), dim.getUnits(), module.getSession().getUnits()).getMeasure(); } catch (java.lang.IllegalArgumentException e) { return 0.0; } }
private void handleElement(org.w3c.dom.Element ele, boolean needEscape, java.util.HashMap cssStyles, org.eclipse.birt.report.engine.content.IContent content, int index) { org.eclipse.birt.report.engine.content.IStyle cssStyle = ((org.eclipse.birt.report.engine.content.IStyle) (cssStyles.get(ele))); if (cssStyle != null) { if ("none".equals(cssStyle.getDisplay())) { return; } } java.lang.String tagName = ele.getTagName(); if (tagName.toLowerCase().equals("a")) { org.eclipse.birt.report.engine.content.IContainerContent container = new org.eclipse.birt.report.engine.content.impl.ContainerContent(((org.eclipse.birt.report.engine.content.impl.ReportContent) (content.getReportContent()))); container.setParent(content); handleStyle(ele, cssStyles, container); org.eclipse.birt.report.engine.content.impl.ActionContent oldAction = action; handleAnchor(ele, container); processNodes(ele, needEscape, cssStyles, container); this.action = oldAction; } else if (tagName.toLowerCase().equals("img")) { outputImg(ele, cssStyles, content); } else if (tagName.toLowerCase().equals("br")) { org.eclipse.birt.report.engine.content.ILabelContent label = new org.eclipse.birt.report.engine.content.impl.LabelContent(((org.eclipse.birt.report.engine.content.impl.ReportContent) (content.getReportContent()))); addChild(content, label); label.setText("\n"); org.eclipse.birt.report.engine.css.dom.StyleDeclaration inlineStyle = new org.eclipse.birt.report.engine.css.dom.StyleDeclaration(content.getCSSEngine()); inlineStyle.setProperty(IStyle.STYLE_DISPLAY, CSSValueConstants.INLINE_VALUE); label.setInlineStyle(inlineStyle); } else if ((tagName.toLowerCase().equals("li")) && ((ele.getParentNode().getNodeType()) == (org.w3c.dom.Node.ELEMENT_NODE))) { org.eclipse.birt.report.engine.css.dom.StyleDeclaration style = new org.eclipse.birt.report.engine.css.dom.StyleDeclaration(content.getCSSEngine()); style.setProperty(IStyle.STYLE_DISPLAY, CSSValueConstants.BLOCK_VALUE); style.setProperty(IStyle.STYLE_VERTICAL_ALIGN, CSSValueConstants.MIDDLE_VALUE); org.eclipse.birt.report.engine.content.IContainerContent container = new org.eclipse.birt.report.engine.content.impl.ContainerContent(((org.eclipse.birt.report.engine.content.impl.ReportContent) (content.getReportContent()))); container.setInlineStyle(style); addChild(content, container); handleStyle(ele, cssStyles, container); org.eclipse.birt.report.engine.content.impl.TextContent text = new org.eclipse.birt.report.engine.content.impl.TextContent(((org.eclipse.birt.report.engine.content.impl.ReportContent) (content.getReportContent()))); addChild(container, text); if (ele.getParentNode().getNodeName().equals("ol")) { text.setText(((new java.lang.Integer(index).toString()) + ". ")); } else if (ele.getParentNode().getNodeName().equals("ul")) { text.setText(" â¢ "); } style = new org.eclipse.birt.report.engine.css.dom.StyleDeclaration(content.getCSSEngine()); style.setProperty(IStyle.STYLE_DISPLAY, CSSValueConstants.INLINE_VALUE); style.setProperty(IStyle.STYLE_VERTICAL_ALIGN, CSSValueConstants.TOP_VALUE); text.setInlineStyle(style); org.eclipse.birt.report.engine.content.IContainerContent childContainer = new org.eclipse.birt.report.engine.content.impl.ContainerContent(((org.eclipse.birt.report.engine.content.impl.ReportContent) (content.getReportContent()))); addChild(container, childContainer); childContainer.setInlineStyle(style); processNodes(ele, needEscape, cssStyles, childContainer); } else if ((tagName.toLowerCase().equals("dd")) || (tagName.toLowerCase().equals("dt"))) { org.eclipse.birt.report.engine.content.IContainerContent container = new org.eclipse.birt.report.engine.content.impl.ContainerContent(((org.eclipse.birt.report.engine.content.impl.ReportContent) (content.getReportContent()))); addChild(content, container); handleStyle(ele, cssStyles, container); if (tagName.toLowerCase().equals("dd")) { org.eclipse.birt.report.engine.css.dom.StyleDeclaration style = new org.eclipse.birt.report.engine.css.dom.StyleDeclaration(content.getCSSEngine()); style.setProperty(IStyle.STYLE_DISPLAY, CSSValueConstants.INLINE_VALUE); style.setProperty(IStyle.STYLE_VERTICAL_ALIGN, CSSValueConstants.TOP_VALUE); org.eclipse.birt.report.engine.content.impl.TextContent text = new org.eclipse.birt.report.engine.content.impl.TextContent(((org.eclipse.birt.report.engine.content.impl.ReportContent) (content.getReportContent()))); addChild(content, text); if (ele.getParentNode().getNodeName().equals("dl")) { text.setText(""); } style.setTextIndent("3em"); text.setInlineStyle(style); org.eclipse.birt.report.engine.content.IContainerContent childContainer = new org.eclipse.birt.report.engine.content.impl.ContainerContent(((org.eclipse.birt.report.engine.content.impl.ReportContent) (content.getReportContent()))); childContainer.setInlineStyle(style); addChild(container, childContainer); processNodes(ele, needEscape, cssStyles, container); } else { processNodes(ele, needEscape, cssStyles, container); } } else { org.eclipse.birt.report.engine.content.IContainerContent container = new org.eclipse.birt.report.engine.content.impl.ContainerContent(((org.eclipse.birt.report.engine.content.impl.ReportContent) (content.getReportContent()))); handleStyle(ele, cssStyles, container); if (org.eclipse.birt.report.engine.layout.pdf.util.HTML2Content.htmlDisplayMode.contains(ele.getTagName())) { addChild(content, container); processNodes(ele, needEscape, cssStyles, container); } else { if (inlineContainerStack.isEmpty()) { container.setParent(content); } else { container.setParent(((org.eclipse.birt.report.engine.content.IContent) (inlineContainerStack.peek()))); } inlineContainerStack.push(container); processNodes(ele, needEscape, cssStyles, content); inlineContainerStack.pop(); } } }
public void startImage(org.eclipse.birt.report.engine.content.IImageContent image) { assert image != null; org.eclipse.birt.report.engine.content.IStyle mergedStyle = image.getStyle(); org.eclipse.birt.report.engine.emitter.html.HTMLReportEmitter.logger.log(java.util.logging.Level.FINE, "[HTMLImageEmitter] Start image"); java.lang.StringBuffer styleBuffer = new java.lang.StringBuffer(); int display = checkElementType(image.getX(), image.getY(), mergedStyle, styleBuffer); java.lang.String tag = openTagByType(display, org.eclipse.birt.report.engine.emitter.html.HTMLReportEmitter.DISPLAY_BLOCK); boolean hasAction = handleAction(image.getHyperlinkAction()); if ((image.getBookmark()) == null) { image.setBookmark(idGenerator.generateUniqueID()); } boolean useSVG = (("image/svg+xml".equalsIgnoreCase(image.getMIMEType())) || (".svg".equalsIgnoreCase(image.getExtension()))) || (((image.getURI()) != null) && (image.getURI().toLowerCase().endsWith(".svg"))); if (useSVG) { image.setMIMEType("image/svg+xml"); } boolean useSWT = "application/x-shockwave-flash".equalsIgnoreCase(image.getMIMEType()); if (useSVG || useSWT) { outputSVGImage(image, styleBuffer, display); } else { java.lang.Object imageMapObject = image.getImageMap(); java.lang.String imageMapId = null; boolean hasImageMap = ((imageMapObject != null) && (imageMapObject instanceof java.lang.String)) && ((((java.lang.String) (imageMapObject)).length()) > 0); if (hasImageMap) { imageMapId = idGenerator.generateUniqueID(); writer.openTag(HTMLTags.TAG_MAP); writer.attribute(HTMLTags.ATTR_ID, imageMapId); writer.attribute(HTMLTags.ATTR_NAME, imageMapId); writer.cdata(((java.lang.String) (imageMapObject))); writer.closeTag(HTMLTags.TAG_MAP); } writer.openTag(HTMLTags.TAG_IMAGE); outputImageStyleClassBookmark(image, HTMLTags.TAG_IMAGE); java.lang.String ext = image.getExtension(); java.lang.String imgUri = getImageURI(image); writer.attribute(HTMLTags.ATTR_SRC, imgUri); if (hasImageMap) { if (!hasAction) { resetImageDefaultBorders(image, styleBuffer); } writer.attribute(HTMLTags.ATTR_USEMAP, ("#" + imageMapId)); } java.lang.String altText = image.getAltText(); if (altText == null) { writer.attributeAllowEmpty(HTMLTags.ATTR_ALT, ""); } else { writer.attribute(HTMLTags.ATTR_ALT, altText); } java.lang.String titleText = image.getHelpText(); if (titleText == null) { if (hasAction) { titleText = image.getHyperlinkAction().getTooltip(); } } writer.attribute(HTMLTags.ATTR_TITLE, titleText); htmlEmitter.buildImageStyle(image, styleBuffer, display); writer.attribute(HTMLTags.ATTR_STYLE, styleBuffer.toString()); if ((".PNG".equalsIgnoreCase(ext)) && ((imageHandler) != null)) { if (needFixTransparentPNG) { if (null == (htmlIDNamespace)) { writer.attribute(HTMLTags.ATTR_ONLOAD, "fixPNG(this)"); } else { writer.attribute(HTMLTags.ATTR_ONLOAD, ((htmlIDNamespace) + "fixPNG(this)")); } } } writer.closeTag(HTMLTags.TAG_IMAGE); } if (hasAction) { writer.closeTag(HTMLTags.TAG_A); } if (tag != null) { writer.closeTag(tag); } }
public static java.util.Iterator getStyles(java.util.Comparator comparator) { java.util.List styles = null; if ((org.eclipse.birt.report.designer.core.model.SessionHandleAdapter.getInstance().getReportDesignHandle()) instanceof org.eclipse.birt.report.model.api.ReportDesignHandle) { styles = org.eclipse.birt.report.designer.core.model.SessionHandleAdapter.getInstance().getReportDesignHandle().getAllStyles(); } else if ((org.eclipse.birt.report.designer.core.model.SessionHandleAdapter.getInstance().getReportDesignHandle()) instanceof org.eclipse.birt.report.model.api.LibraryHandle) { styles = new java.util.ArrayList(); org.eclipse.birt.report.model.api.ThemeHandle theme = ((org.eclipse.birt.report.model.api.LibraryHandle) (org.eclipse.birt.report.designer.core.model.SessionHandleAdapter.getInstance().getReportDesignHandle())).getTheme(); if (theme != null) { styles.addAll(theme.getStyles().getContents()); } } java.lang.Object[] stylesArray = (styles == null) ? new java.lang.Object[0] : styles.toArray(); if (comparator != null) { java.util.Arrays.sort(stylesArray, comparator); } return java.util.Arrays.asList(stylesArray).iterator(); }
public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { sort(index, asc); asc = !(asc); }
public org.eclipse.birt.report.designer.data.ui.dataset.DataSetViewData[] getCachedDataSetItemModel(org.eclipse.birt.report.model.api.DataSetHandle ds) { org.eclipse.birt.report.designer.data.ui.dataset.DataSetViewData[] result = ((org.eclipse.birt.report.designer.data.ui.dataset.DataSetViewData[]) (this.htColumns.get(ds))); if (result == null) { org.eclipse.birt.report.data.adapter.api.DataRequestSession session; try { org.eclipse.birt.report.data.adapter.api.DataSessionContext context = new org.eclipse.birt.report.data.adapter.api.DataSessionContext(org.eclipse.birt.report.data.adapter.api.DataSessionContext.MODE_DIRECT_PRESENTATION, ds.getModuleHandle()); session = org.eclipse.birt.report.data.adapter.api.DataRequestSession.newSession(context); result = this.populateAllOutputColumns(ds, session); session.shutdown(); return result; } catch (org.eclipse.birt.core.exception.BirtException e) { result = new org.eclipse.birt.report.designer.data.ui.dataset.DataSetViewData[0]; } } return result; }
public void saveReport(org.eclipse.birt.report.model.api.ModuleHandle moduleHandle, java.lang.Object element, org.eclipse.core.runtime.IPath origReportPath, org.eclipse.core.runtime.IProgressMonitor monitor) { if (element instanceof org.eclipse.ui.IFileEditorInput) { org.eclipse.ui.IFileEditorInput input = ((org.eclipse.ui.IFileEditorInput) (element)); org.eclipse.core.resources.IFile file = input.getFile(); if ((org.eclipse.core.resources.ResourcesPlugin.getWorkspace().validateEdit(new org.eclipse.core.resources.IFile[]{ file }, org.eclipse.core.resources.IWorkspace.VALIDATE_PROMPT).getSeverity()) == (org.eclipse.core.runtime.IStatus.OK)) { saveFile(moduleHandle, file, origReportPath, monitor); } } else if (element instanceof org.eclipse.ui.IEditorInput) { org.eclipse.core.runtime.IPath path = getInputPath(((org.eclipse.ui.IEditorInput) (element))); if (path != null) { saveFile(moduleHandle, path.toFile(), origReportPath, monitor); } } }
private void saveNamingRelation(org.eclipse.birt.data.engine.impl.document.NamingRelation relation) throws org.eclipse.birt.data.engine.core.DataException { this.rdSave.saveNamingRelation(relation); }
public static org.eclipse.birt.report.model.api.metadata.DimensionValue parseInput(java.lang.String value, com.ibm.icu.util.ULocale locale) throws org.eclipse.birt.report.model.api.metadata.PropertyValueException { return org.eclipse.birt.report.model.util.DimensionValueUtil.doParse(value, true, locale); }
protected void update() throws org.eclipse.birt.core.exception.BirtException { if (((context.isFixedLayout()) && ((height) > (specifiedHeight))) && ((specifiedHeight) > 0)) { setHeight(specifiedHeight); setNeedClip(true); } if ((parent) != null) { checkPageBreak(); parent.update(this); } }
protected int[] formalize(org.eclipse.birt.report.engine.ir.DimensionType[] columns, int tableWidth, boolean isTableWidthDefined) { java.util.ArrayList percentageList = new java.util.ArrayList(); java.util.ArrayList unsetList = new java.util.ArrayList(); java.util.ArrayList preFixedList = new java.util.ArrayList(); int[] resolvedColumnWidth = new int[columns.length]; double total = 0.0F; int fixedLength = 0; for (int i = 0; i < (columns.length); i++) { if ((columns[i]) == null) { unsetList.add(new java.lang.Integer(i)); } else if (EngineIRConstants.UNITS_PERCENTAGE.equals(columns[i].getUnits())) { percentageList.add(new java.lang.Integer(i)); total += columns[i].getMeasure(); } else if ((EngineIRConstants.UNITS_EM.equals(columns[i].getUnits())) || (EngineIRConstants.UNITS_EX.equals(columns[i].getUnits()))) { int len = this.getDimensionValue(columns[i], org.eclipse.birt.report.engine.layout.pdf.util.PropertyUtil.getDimensionValue(table.getComputedStyle().getProperty(StyleConstants.STYLE_FONT_SIZE))); resolvedColumnWidth[i] = len; fixedLength += len; } else { int len = this.getDimensionValue(columns[i], tableWidth); resolvedColumnWidth[i] = len; preFixedList.add(new java.lang.Integer(i)); fixedLength += len; } } if (((!isTableWidthDefined) && (unsetList.isEmpty())) && (percentageList.isEmpty())) { return resolvedColumnWidth; } if (fixedLength >= tableWidth) { for (int i = 0; i < (unsetList.size()); i++) { java.lang.Integer index = ((java.lang.Integer) (unsetList.get(i))); resolvedColumnWidth[index.intValue()] = 0; } for (int i = 0; i < (percentageList.size()); i++) { java.lang.Integer index = ((java.lang.Integer) (percentageList.get(i))); resolvedColumnWidth[index.intValue()] = 0; } return resolvedColumnWidth; } if (unsetList.isEmpty()) { if (percentageList.isEmpty()) { int left = tableWidth - fixedLength; if (!(preFixedList.isEmpty())) { int delta = left / (preFixedList.size()); for (int i = 0; i < (preFixedList.size()); i++) { java.lang.Integer index = ((java.lang.Integer) (preFixedList.get(i))); resolvedColumnWidth[index.intValue()] += delta; } } } else { float leftPercentage = (((float) (tableWidth - fixedLength)) / tableWidth) * 100.0F; double ratio = leftPercentage / total; for (int i = 0; i < (percentageList.size()); i++) { java.lang.Integer index = ((java.lang.Integer) (percentageList.get(i))); columns[index.intValue()] = new org.eclipse.birt.report.engine.ir.DimensionType(((columns[index.intValue()].getMeasure()) * ratio), columns[index.intValue()].getUnits()); resolvedColumnWidth[index.intValue()] = this.getDimensionValue(columns[index.intValue()], tableWidth); } } } else { if (percentageList.isEmpty()) { int left = tableWidth - fixedLength; int eachWidth = left / (unsetList.size()); for (int i = 0; i < (unsetList.size()); i++) { java.lang.Integer index = ((java.lang.Integer) (unsetList.get(i))); resolvedColumnWidth[index.intValue()] = eachWidth; } } else { float leftPercentage = (((float) (tableWidth - fixedLength)) / tableWidth) * 100.0F; if (leftPercentage <= total) { double ratio = leftPercentage / total; for (int i = 0; i < (unsetList.size()); i++) { java.lang.Integer index = ((java.lang.Integer) (unsetList.get(i))); resolvedColumnWidth[index.intValue()] = 0; } for (int i = 0; i < (percentageList.size()); i++) { java.lang.Integer index = ((java.lang.Integer) (percentageList.get(i))); columns[index.intValue()] = new org.eclipse.birt.report.engine.ir.DimensionType(((columns[index.intValue()].getMeasure()) * ratio), columns[index.intValue()].getUnits()); resolvedColumnWidth[index.intValue()] = this.getDimensionValue(columns[index.intValue()], tableWidth); } } else { int usedLength = fixedLength; for (int i = 0; i < (percentageList.size()); i++) { java.lang.Integer index = ((java.lang.Integer) (percentageList.get(i))); int width = this.getDimensionValue(columns[index.intValue()], tableWidth); usedLength += width; resolvedColumnWidth[index.intValue()] = width; } int left = tableWidth - usedLength; int eachWidth = left / (unsetList.size()); for (int i = 0; i < (unsetList.size()); i++) { java.lang.Integer index = ((java.lang.Integer) (unsetList.get(i))); resolvedColumnWidth[index.intValue()] = eachWidth; } } } } return resolvedColumnWidth; }
public static boolean isParameterGroup(java.lang.Object transferSource) { return (transferSource instanceof org.eclipse.birt.report.model.api.core.IDesignElement) && ((((org.eclipse.birt.report.model.api.core.IDesignElement) (transferSource)).getDefn().getName().equals(ReportDesignConstants.PARAMETER_GROUP_ELEMENT)) || (((org.eclipse.birt.report.model.api.core.IDesignElement) (transferSource)).getDefn().getName().equals(ReportDesignConstants.CASCADING_PARAMETER_GROUP_ELEMENT))); }
public void importCssStyles(org.eclipse.birt.report.model.api.css.CssStyleSheetHandle stylesheet, java.util.List selectedStyles) { if (((stylesheet == null) || (selectedStyles == null)) || (selectedStyles.isEmpty())) { return; } org.eclipse.birt.report.model.activity.ActivityStack stack = module.getActivityStack(); stack.startTrans(org.eclipse.birt.report.model.util.CommandLabelFactory.getCommandLabel(MessageConstants.IMPORT_CSS_STYLES_MESSAGE)); for (int i = 0; i < (selectedStyles.size()); i++) { java.lang.Object selectedStyle = selectedStyles.get(i); if (!(selectedStyle instanceof org.eclipse.birt.report.model.api.SharedStyleHandle)) { continue; } org.eclipse.birt.report.model.api.SharedStyleHandle style = ((org.eclipse.birt.report.model.api.SharedStyleHandle) (selectedStyle)); if ((stylesheet.findStyle(style.getName())) != null) { org.eclipse.birt.report.model.api.SharedStyleHandle newStyle = org.eclipse.birt.report.model.util.StyleUtil.TransferCssStyleToSharedStyle(module, style); module.makeUniqueName(newStyle.getElement()); if (newStyle == null) continue; try { addElement(newStyle, IReportDesignModel.STYLE_SLOT); } catch (org.eclipse.birt.report.model.api.command.ContentException e) { assert false; } catch (org.eclipse.birt.report.model.api.command.NameException e) { assert false; } } } stack.commit(); }
private final void showTooltip(org.eclipse.birt.chart.model.data.Action ac) { org.eclipse.birt.chart.model.attribute.TooltipValue tv = ((org.eclipse.birt.chart.model.attribute.TooltipValue) (ac.getValue())); if ((tv.getText()) == null) { return; } java.lang.String tooltip = tv.getText().replaceAll("\\\n", "<br>"); if (!(tooltip.equals(tv.getText()))) { tooltip = ("<html>" + tooltip) + "</html>"; } else { tooltip = tv.getText(); } ((javax.swing.JComponent) (iun.peerInstance())).setToolTipText(tooltip); }
public java.lang.Object execute(org.eclipse.core.commands.ExecutionEvent event) throws org.eclipse.core.commands.ExecutionException { boolean retBoolean = true; super.execute(event); java.lang.Object obj = getElementHandles(); if (obj instanceof java.util.List) { obj = ((java.util.List) (obj)).get(0); } if ((obj instanceof org.eclipse.birt.report.model.api.LibraryHandle) && ((((org.eclipse.birt.report.model.api.LibraryHandle) (obj)).getHostHandle()) != obj)) { org.eclipse.birt.report.model.api.ModuleHandle host = ((org.eclipse.birt.report.model.api.LibraryHandle) (obj)).getHostHandle(); if ((host == null) || (!(host.isInclude(((org.eclipse.birt.report.model.api.LibraryHandle) (obj)))))) { return new java.lang.Boolean(retBoolean); } try { host.reloadLibrary(((org.eclipse.birt.report.model.api.LibraryHandle) (obj))); } catch (org.eclipse.birt.report.model.api.activity.SemanticException e) { org.eclipse.birt.report.designer.internal.ui.util.ExceptionHandler.handle(e); retBoolean = false; } catch (org.eclipse.birt.report.model.api.DesignFileException e) { org.eclipse.birt.report.designer.internal.ui.util.ExceptionHandler.handle(e); retBoolean = false; } } else { return reloadAllLibraries(obj); } return new java.lang.Boolean(retBoolean); }
protected boolean existDropCells() { if ((unresolvedRow) != null) { for (int i = 0; i < (columnNumber); i++) { org.eclipse.birt.report.engine.layout.area.impl.CellArea cell = unresolvedRow.getCell(((start) + i)); if ((cell != null) && ((isDropCell(cell)) || ((cell.getRowSpan()) > 1))) { return true; } } } return false; }
private org.eclipse.datatools.connectivity.oda.design.InputParameterAttributes updateInputElementAttrs(org.eclipse.datatools.connectivity.oda.design.InputParameterAttributes inputParamAttrs, org.eclipse.birt.report.model.api.ScalarParameterHandle paramHandle, org.eclipse.datatools.connectivity.oda.design.DataSetDesign dataSetDesign) { org.eclipse.datatools.connectivity.oda.design.InputParameterAttributes retInputParamAttrs = inputParamAttrs; if (inputParamAttrs == null) retInputParamAttrs = designFactory.createInputParameterAttributes(); org.eclipse.datatools.connectivity.oda.design.InputElementAttributes inputAttrs = retInputParamAttrs.getElementAttributes(); if (inputAttrs == null) inputAttrs = designFactory.createInputElementAttributes(); inputAttrs.setDefaultScalarValue(paramHandle.getDefaultValue()); inputAttrs.setOptional(getReportParamAllowMumble(paramHandle, org.eclipse.birt.report.model.adapter.oda.impl.ReportParameterAdapter.ALLOW_BLANK_PROP_NAME)); inputAttrs.setMasksValue(paramHandle.isConcealValue()); org.eclipse.datatools.connectivity.oda.design.ScalarValueChoices staticChoices = null; java.util.Iterator selectionList = paramHandle.choiceIterator(); while (selectionList.hasNext()) { if (staticChoices == null) staticChoices = designFactory.createScalarValueChoices(); org.eclipse.birt.report.model.api.SelectionChoiceHandle choice = ((org.eclipse.birt.report.model.api.SelectionChoiceHandle) (selectionList.next())); org.eclipse.datatools.connectivity.oda.design.ScalarValueDefinition valueDefn = designFactory.createScalarValueDefinition(); valueDefn.setValue(choice.getValue()); valueDefn.setDisplayName(choice.getLabel()); staticChoices.getScalarValues().add(valueDefn); } inputAttrs.setStaticValueChoices(staticChoices); org.eclipse.birt.report.model.api.DataSetHandle setHandle = paramHandle.getDataSet(); java.lang.String valueExpr = paramHandle.getValueExpr(); java.lang.String labelExpr = paramHandle.getLabelExpr(); boolean isEnabled = DesignChoiceConstants.PARAM_VALUE_TYPE_DYNAMIC.equalsIgnoreCase(paramHandle.getValueType()); org.eclipse.datatools.connectivity.oda.design.DynamicValuesQuery valueQuery = designFactory.createDynamicValuesQuery(); if ((setHandle instanceof org.eclipse.birt.report.model.api.OdaDataSetHandle) && ((valueExpr != null) || (labelExpr != null))) { if (dataSetDesign != null) { org.eclipse.datatools.connectivity.oda.design.DataSetDesign targetDataSetDesign = ((org.eclipse.datatools.connectivity.oda.design.DataSetDesign) (org.eclipse.emf.ecore.util.EcoreUtil.copy(dataSetDesign))); if (!(setHandle.getName().equals(dataSetDesign.getName()))) targetDataSetDesign = new org.eclipse.birt.report.model.adapter.oda.impl.ModelOdaAdapter().createDataSetDesign(((org.eclipse.birt.report.model.api.OdaDataSetHandle) (setHandle))); valueQuery.setDataSetDesign(targetDataSetDesign); } else { org.eclipse.datatools.connectivity.oda.design.DataSetDesign targetDataSetDesign = new org.eclipse.birt.report.model.adapter.oda.impl.ModelOdaAdapter().createDataSetDesign(((org.eclipse.birt.report.model.api.OdaDataSetHandle) (setHandle))); valueQuery.setDataSetDesign(targetDataSetDesign); } valueQuery.setDisplayNameColumn(labelExpr); valueQuery.setValueColumn(valueExpr); } valueQuery.setEnabled(isEnabled); inputAttrs.setDynamicValueChoices(valueQuery); org.eclipse.datatools.connectivity.oda.design.InputElementUIHints uiHints = designFactory.createInputElementUIHints(); uiHints.setPromptStyle(org.eclipse.birt.report.model.adapter.oda.impl.ReportParameterAdapter.newPromptStyle(paramHandle.getControlType(), paramHandle.isMustMatch())); inputAttrs.setUiHints(uiHints); if ((paramHandle.getContainer()) instanceof org.eclipse.birt.report.model.api.ParameterGroupHandle) { org.eclipse.birt.report.model.api.ParameterGroupHandle groupHandle = ((org.eclipse.birt.report.model.api.ParameterGroupHandle) (paramHandle.getContainer())); org.eclipse.datatools.connectivity.oda.design.InputParameterUIHints paramUiHints = designFactory.createInputParameterUIHints(); paramUiHints.setGroupPromptDisplayName(groupHandle.getDisplayName()); retInputParamAttrs.setUiHints(paramUiHints); } retInputParamAttrs.setElementAttributes(inputAttrs); return retInputParamAttrs; }
public void setInitializationData(org.eclipse.core.runtime.IConfigurationElement config, java.lang.String propertyName, java.lang.Object data) throws org.eclipse.core.runtime.CoreException { org.osgi.framework.Bundle sampledbBundle = org.eclipse.core.runtime.Platform.getBundle(org.eclipse.birt.report.data.oda.jdbc.dbprofile.sampledb.internal.impl.SampleDbFactory.SAMPLEDB_PLUGIN_ID); java.lang.String stateLocation = org.eclipse.core.runtime.Platform.getStateLocation(org.eclipse.core.runtime.Platform.getBundle(config.getDeclaringExtension().getNamespaceIdentifier())).toOSString(); try { initSampleDb(sampledbBundle, stateLocation); removeObsoleteDriverDefinition(); } catch (java.lang.RuntimeException ex) { ex.printStackTrace(); throw new org.eclipse.core.runtime.CoreException(((org.eclipse.core.runtime.IStatus) (new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, org.eclipse.birt.report.data.oda.jdbc.dbprofile.sampledb.internal.impl.SampleDbFactory.PLUGIN_ID, ex.getLocalizedMessage(), ex)))); } catch (java.io.IOException ex) { ex.printStackTrace(); throw new org.eclipse.core.runtime.CoreException(((org.eclipse.core.runtime.IStatus) (new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, org.eclipse.birt.report.data.oda.jdbc.dbprofile.sampledb.internal.impl.SampleDbFactory.PLUGIN_ID, ex.getLocalizedMessage(), ex)))); } }
public org.eclipse.birt.report.engine.content.IStyle getStyle() { if ((style) == null) { if ((inlineStyle) == null) { inlineStyle = report.createStyle(); } java.lang.String styleClass = getStyleClass(); org.eclipse.birt.report.engine.content.IStyle classStyle = report.findStyle(styleClass); style = new org.eclipse.birt.report.engine.css.dom.CompositeStyle(classStyle, inlineStyle); } return style; }
java.util.Collection resolveDataSetParameters(boolean evaluateValue) throws org.eclipse.birt.data.engine.core.DataException { java.util.List paramDefns = this.dsRT.getParameters(); int nParams = (paramDefns == null) ? 0 : paramDefns.size(); org.eclipse.birt.data.engine.odaconsumer.ParameterHint[] paramHints = new org.eclipse.birt.data.engine.odaconsumer.ParameterHint[nParams]; boolean[] bindingResolved = new boolean[nParams]; for (int i = 0; i < nParams; i++) { org.eclipse.birt.data.engine.api.IParameterDefinition paramDefn = ((org.eclipse.birt.data.engine.api.IParameterDefinition) (paramDefns.get(i))); paramHints[i] = createParameterHint(paramDefn, paramDefn.getDefaultInputValue()); bindingResolved[i] = false; if ((paramDefn.isInputMode()) && ((paramDefn.getName()) != null)) { java.lang.Object paramValue = DataSetRuntime.UNSET_VALUE; try { paramValue = this.dsRT.getInputParameterValue(paramDefn.getName()); } catch (org.eclipse.birt.core.exception.BirtException e) { assert false; throw org.eclipse.birt.data.engine.core.DataException.wrap(e); } if (paramValue != (DataSetRuntime.UNSET_VALUE)) { if ((paramHints[i].getDataType()) == null) { if (paramValue != null) { java.lang.Class clazz = paramValue.getClass(); paramHints[i].setDataType(clazz); } else { paramHints[i].setDataType(java.lang.String.class); } } java.lang.String paramValueStr = this.getParameterValueString(paramHints[i].getDataType(), paramValue); paramHints[i].setDefaultInputValue(paramValueStr); bindingResolved[i] = true; } } } if (evaluateValue) { org.mozilla.javascript.Context cx = null; cx = org.mozilla.javascript.Context.enter(); try { resolveParameterBindings(this.queryDefn.getInputParamBindings(), paramHints, bindingResolved, cx); resolveParameterBindings(this.dsRT.getInputParamBindings(), paramHints, bindingResolved, cx); } finally { if (cx != null) org.mozilla.javascript.Context.exit(); } } return java.util.Arrays.asList(paramHints); }
protected void __init(javax.servlet.http.HttpServletRequest request) throws java.lang.Exception { if (org.eclipse.birt.report.utility.ParameterAccessor.isGetImageOperator(request)) { return; } this.category = "BIRT"; this.masterPageContent = org.eclipse.birt.report.utility.ParameterAccessor.isMasterPageContent(request); this.isDesigner = org.eclipse.birt.report.utility.ParameterAccessor.isDesigner(request); this.bookmark = org.eclipse.birt.report.utility.ParameterAccessor.getBookmark(request); this.reportPage = java.lang.String.valueOf(org.eclipse.birt.report.utility.ParameterAccessor.getPage(request)); this.reportDocumentName = org.eclipse.birt.report.utility.ParameterAccessor.getReportDocument(request); this.reportDesignName = org.eclipse.birt.report.utility.ParameterAccessor.getReport(request); processReport(request); java.lang.String title = null; if ((title == null) || ((title.trim().length()) <= 0)) { title = org.eclipse.birt.report.resource.BirtResources.getString("birt.viewer.title"); } this.reportTitle = org.eclipse.birt.report.utility.ParameterAccessor.htmlEncode(title); this.__initParameters(request); }
public void add(org.eclipse.birt.report.engine.nLayout.area.impl.AbstractArea area) { super.add(area); if ((repeatList) != null) { org.eclipse.birt.report.engine.content.IContent content = ((org.eclipse.birt.report.engine.nLayout.area.impl.ContainerArea) (area)).getContent(); if (content != null) { org.eclipse.birt.report.engine.content.IElement parent = content.getParent(); if ((parent != null) && (parent instanceof org.eclipse.birt.report.engine.content.IBandContent)) { int type = ((org.eclipse.birt.report.engine.content.IBandContent) (parent)).getBandType(); if ((type == (org.eclipse.birt.report.engine.content.IBandContent.BAND_HEADER)) || (type == (org.eclipse.birt.report.engine.content.IBandContent.BAND_GROUP_HEADER))) { if (content instanceof org.eclipse.birt.report.engine.content.IRowContent) { org.eclipse.birt.report.engine.ir.RowDesign rowDesign = ((org.eclipse.birt.report.engine.ir.RowDesign) (content.getGenerateBy())); if ((rowDesign != null) && (rowDesign.getRepeatable())) { repeatList.add(area); } } else { repeatList.add(area); } } } } } }
private static boolean isDate(int dataType) { return ((dataType == (org.eclipse.birt.core.data.DataType.DATE_TYPE)) || (dataType == (org.eclipse.birt.core.data.DataType.SQL_DATE_TYPE))) || (dataType == (org.eclipse.birt.core.data.DataType.SQL_TIME_TYPE)); }
private java.lang.String getParameterValueString(java.lang.Class paramType, java.lang.Object paramValue) throws org.eclipse.birt.data.engine.core.DataException { if (paramValue instanceof java.lang.String) return ((java.lang.String) (paramValue)); try { paramValue = org.eclipse.birt.core.data.DataTypeUtil.convert(paramValue, paramType); if (paramValue instanceof java.util.Date) { com.ibm.icu.text.SimpleDateFormat sdf = new com.ibm.icu.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss.S"); return sdf.format(((java.util.Date) (paramValue))); } if (paramValue != null) { return paramValue.toString(); } return null; } catch (org.eclipse.birt.core.exception.BirtException e) { throw new org.eclipse.birt.data.engine.core.DataException(org.eclipse.birt.data.engine.i18n.ResourceConstants.DATATYPEUTIL_ERROR, e); } }
private java.util.List doQueryCascadeParameterSelectionList(java.lang.String paramName, org.eclipse.birt.report.service.api.IViewerReportDesignHandle design, java.lang.String groupName, java.lang.Object[] groupKeys, org.eclipse.birt.report.service.api.InputOptions options, org.eclipse.birt.report.context.ViewerAttributeBean attrBean, boolean keepDefValue) throws java.rmi.RemoteException, org.eclipse.birt.report.service.api.ReportServiceException { org.eclipse.birt.report.service.api.ParameterDefinition parameter = attrBean.findParameterDefinition(paramName); java.lang.String defaultValue = null; java.lang.String defaultLabel = null; if (keepDefValue) { java.lang.Object obj = attrBean.getDefaultValues().get(parameter.getName()); if (obj != null) { defaultValue = org.eclipse.birt.report.utility.DataUtil.getDisplayValue(obj); defaultLabel = org.eclipse.birt.report.model.api.util.ParameterValidationUtil.getDisplayValue(null, parameter.getPattern(), obj, attrBean.getLocale()); } } java.util.List selectionList = preHandleCascadeParameterSelectionList(parameter, defaultValue, defaultLabel); int index = selectionList.size(); java.util.Collection list = getReportService().getSelectionListForCascadingGroup(design, groupName, groupKeys, options); if ((list != null) && ((list.size()) > 0)) { java.util.Iterator iList = list.iterator(); while ((iList != null) && (iList.hasNext())) { org.eclipse.birt.report.service.api.ParameterSelectionChoice item = ((org.eclipse.birt.report.service.api.ParameterSelectionChoice) (iList.next())); if (item == null) continue; java.lang.Object value = item.getValue(); try { value = org.eclipse.birt.report.utility.DataUtil.convert(value, parameter.getDataType()); } catch (java.lang.Exception e) { value = null; } java.lang.String displayValue = org.eclipse.birt.report.utility.DataUtil.getDisplayValue(value); if (displayValue == null) continue; java.lang.String label = item.getLabel(); if ((label == null) || ((label.length()) <= 0)) { label = org.eclipse.birt.report.model.api.util.ParameterValidationUtil.getDisplayValue(null, parameter.getPattern(), value, attrBean.getLocale()); } if (label != null) { if (keepDefValue) { if ((displayValue.equals(defaultValue)) && ((label.equals(defaultLabel)) || (parameter.isDistinct()))) continue; } org.eclipse.birt.report.soapengine.api.SelectItemChoice selectItemChoice = new org.eclipse.birt.report.soapengine.api.SelectItemChoice(); selectItemChoice.setLabel(label); selectItemChoice.setValue(displayValue); selectionList.add((index++), selectItemChoice); } } } return selectionList; }
protected void populateOdiQuery() throws org.eclipse.birt.data.engine.core.DataException { super.populateOdiQuery(); org.eclipse.birt.data.engine.odi.ICandidateQuery candidateQuery = ((org.eclipse.birt.data.engine.odi.ICandidateQuery) (odiQuery)); assert candidateQuery != null; org.eclipse.birt.data.engine.impl.ScriptDataSetRuntime scriptDataSet = ((org.eclipse.birt.data.engine.impl.ScriptDataSetRuntime) (dataSet)); java.util.List resultHints = dataSet.getResultSetHints(); java.util.List computedColumns = dataSet.getComputedColumns(); java.util.List columnsList = new java.util.ArrayList(); if (scriptDataSet.describe()) { columnsList.addAll(scriptDataSet.getDescribedMetaData()); } else { java.util.Iterator it = resultHints.iterator(); for (int j = 0; it.hasNext(); j++) { org.eclipse.birt.data.engine.api.IColumnDefinition columnDefn = ((org.eclipse.birt.data.engine.api.IColumnDefinition) (it.next())); org.eclipse.birt.data.engine.executor.ResultFieldMetadata columnMetaData = new org.eclipse.birt.data.engine.executor.ResultFieldMetadata((j + 1), columnDefn.getColumnName(), columnDefn.getColumnName(), org.eclipse.birt.core.data.DataType.getClass(columnDefn.getDataType()), null, true); columnsList.add(columnMetaData); columnMetaData.setAlias(columnDefn.getAlias()); } } int count = columnsList.size(); java.util.Iterator it = computedColumns.iterator(); for (int j = resultHints.size(); it.hasNext(); j++) { org.eclipse.birt.data.engine.api.IComputedColumn compColumn = ((org.eclipse.birt.data.engine.api.IComputedColumn) (it.next())); org.eclipse.birt.data.engine.executor.ResultFieldMetadata columnMetaData = new org.eclipse.birt.data.engine.executor.ResultFieldMetadata((++count), compColumn.getName(), compColumn.getName(), org.eclipse.birt.core.data.DataType.getClass(compColumn.getDataType()), null, true); columnsList.add(columnMetaData); } resultClass = new org.eclipse.birt.data.engine.executor.ResultClass(columnsList); }
private void populateAggFuncNames() { java.lang.String aggFuncName = null; fCmbAggregate.removeAll(); java.lang.String[] aggDisplayNames = null; java.lang.String[] aggFunctions = null; if (isBaseGroupingDefined()) { try { java.lang.String[] names = aggDisplayNames = org.eclipse.birt.chart.util.PluginSettings.instance().getRegisteredAggregateFunctionDisplayNames(); java.lang.String[] funcs = org.eclipse.birt.chart.util.PluginSettings.instance().getRegisteredAggregateFunctions(); aggDisplayNames = new java.lang.String[(names.length) + 1]; aggFunctions = new java.lang.String[(names.length) + 1]; org.eclipse.birt.chart.model.data.SeriesDefinition baseSD = ((org.eclipse.birt.chart.model.data.SeriesDefinition) (org.eclipse.birt.chart.ui.util.ChartUIUtil.getBaseSeriesDefinitions(fChartContext.getModel()).get(0))); java.lang.String aggFunc = baseSD.getGrouping().getAggregateExpression(); int index = 0; for (int i = 0; i < (funcs.length); i++) { if (funcs[i].equals(aggFunc)) { index = i; break; } } java.lang.String noneItem = (((org.eclipse.birt.chart.ui.swt.wizard.data.AggregateEditorComposite.AGG_DISPLAY_NONE) + "(") + (names[index])) + ")"; aggDisplayNames[0] = noneItem; aggFunctions[0] = org.eclipse.birt.chart.ui.swt.wizard.data.AggregateEditorComposite.AGG_FUNC_NONE; for (int i = 1; i < (aggDisplayNames.length); i++) { aggDisplayNames[i] = names[(i - 1)]; aggFunctions[i] = funcs[(i - 1)]; } } catch (org.eclipse.birt.chart.exception.ChartException e) { org.eclipse.birt.core.ui.frameworks.taskwizard.WizardBase.displayException(e); } } else { try { java.lang.String[] names = org.eclipse.birt.chart.util.PluginSettings.instance().getRegisteredAggregateFunctionDisplayNames(IAggregateFunction.RUNNING_AGGR); java.lang.String[] funcs = org.eclipse.birt.chart.util.PluginSettings.instance().getRegisteredAggregateFunctions(IAggregateFunction.RUNNING_AGGR); aggDisplayNames = new java.lang.String[(names.length) + 1]; aggFunctions = new java.lang.String[(names.length) + 1]; aggDisplayNames[0] = org.eclipse.birt.chart.ui.swt.wizard.data.AggregateEditorComposite.AGG_DISPLAY_NONE; aggFunctions[0] = org.eclipse.birt.chart.ui.swt.wizard.data.AggregateEditorComposite.AGG_FUNC_NONE; for (int i = 1; i < (aggDisplayNames.length); i++) { aggDisplayNames[i] = names[(i - 1)]; aggFunctions[i] = funcs[(i - 1)]; } } catch (org.eclipse.birt.chart.exception.ChartException e) { org.eclipse.birt.core.ui.frameworks.taskwizard.WizardBase.displayException(e); } } fCmbAggregate.setItems(aggDisplayNames); fCmbAggregate.setData(aggFunctions); if ((fGrouping.getAggregateExpression()) != null) { int idx = getAggregateIndexByName(fGrouping.getAggregateExpression()); if ((fCmbAggregate.getItemCount()) > idx) { fCmbAggregate.select(idx); } } else if ((fCmbAggregate.getItemCount()) > 0) { fCmbAggregate.select(0); } aggFuncName = ((java.lang.String[]) (fCmbAggregate.getData()))[fCmbAggregate.getSelectionIndex()]; showAggregateParameters(aggFuncName); }
private java.util.List getAvailableDataBindingReferenceList(java.lang.String propName) { java.util.List rtnList = new java.util.ArrayList(); int slotID = org.eclipse.birt.report.model.core.DesignElement.NO_SLOT; if ((module) instanceof org.eclipse.birt.report.model.elements.ReportDesign) slotID = org.eclipse.birt.report.model.elements.ReportDesign.BODY_SLOT; else if ((module) instanceof org.eclipse.birt.report.model.elements.Library) slotID = org.eclipse.birt.report.model.elements.Library.COMPONENT_SLOT; org.eclipse.birt.report.model.util.ContentIterator iter1 = new org.eclipse.birt.report.model.util.ContentIterator(module, new org.eclipse.birt.report.model.core.ContainerContext(module, slotID)); while (iter1.hasNext()) { org.eclipse.birt.report.model.core.DesignElement e = ((org.eclipse.birt.report.model.core.DesignElement) (iter1.next())); if (e == (getElement())) continue; if (!(e instanceof org.eclipse.birt.report.model.elements.ReportItem)) continue; org.eclipse.birt.report.model.api.ReportItemHandle elementHandle = ((org.eclipse.birt.report.model.api.ReportItemHandle) (e.getHandle(module))); int bindingType = elementHandle.getDataBindingType(); if ((bindingType == (org.eclipse.birt.report.model.api.ReportItemHandle.DATABINDING_TYPE_DATA)) && ((propName == null) || ((elementHandle.getProperty(propName)) != null))) { rtnList.add(elementHandle); } else if (bindingType == (org.eclipse.birt.report.model.api.ReportItemHandle.DATABINDING_TYPE_NONE)) { java.lang.Object tmpValue = e.getLocalProperty(module, IReportItemModel.BOUND_DATA_COLUMNS_PROP); if ((tmpValue instanceof java.util.List) && (!(((java.util.List) (tmpValue)).isEmpty()))) rtnList.add(elementHandle); } else if (bindingType == (org.eclipse.birt.report.model.api.ReportItemHandle.DATABINDING_TYPE_REPORT_ITEM_REF)) { org.eclipse.birt.report.model.api.DesignElementHandle tmpElementHandle = elementHandle.getDataBindingReference(); if (tmpElementHandle == null) { rtnList.add(elementHandle); continue; } if (((element) instanceof org.eclipse.birt.report.model.core.IReferencableElement) && (!(org.eclipse.birt.report.model.util.ModelUtil.isRecursiveReference(tmpElementHandle.getElement(), ((org.eclipse.birt.report.model.core.IReferencableElement) (element)))))) if ((tmpElementHandle.getProperty(propName)) != null) { rtnList.add(elementHandle); } } } if (rtnList.isEmpty()) return java.util.Collections.EMPTY_LIST; return java.util.Collections.unmodifiableList(rtnList); }
public org.eclipse.birt.report.engine.nLayout.area.ILayout createLayout(org.eclipse.birt.report.engine.nLayout.area.impl.ContainerArea parent, org.eclipse.birt.report.engine.nLayout.LayoutContext context, org.eclipse.birt.report.engine.content.IContent content) { switch (content.getContentType()) { case org.eclipse.birt.report.engine.content.IContent.DATA_CONTENT : case org.eclipse.birt.report.engine.content.IContent.LABEL_CONTENT : case org.eclipse.birt.report.engine.content.IContent.TEXT_CONTENT : if (org.eclipse.birt.report.engine.layout.pdf.util.PropertyUtil.isInlineElement(content)) { org.eclipse.birt.report.engine.ir.DimensionType width = content.getWidth(); if (width != null) { return new org.eclipse.birt.report.engine.nLayout.area.impl.BlockTextArea(parent, context, content); } else { return new org.eclipse.birt.report.engine.nLayout.area.impl.InlineTextArea(parent, context, content); } } else { return new org.eclipse.birt.report.engine.nLayout.area.impl.BlockTextArea(parent, context, content); } case org.eclipse.birt.report.engine.content.IContent.IMAGE_CONTENT : return new org.eclipse.birt.report.engine.nLayout.area.impl.ImageAreaLayout(parent, context, ((org.eclipse.birt.report.engine.content.IImageContent) (content))); case org.eclipse.birt.report.engine.content.IContent.AUTOTEXT_CONTENT : int type = ((org.eclipse.birt.report.engine.content.IAutoTextContent) (content)).getType(); if (((type == (org.eclipse.birt.report.engine.content.IAutoTextContent.TOTAL_PAGE)) || (type == (org.eclipse.birt.report.engine.content.IAutoTextContent.UNFILTERED_TOTAL_PAGE))) && (("pdf".equalsIgnoreCase(context.getFormat())) || ((context.getEngineTaskType()) != (org.eclipse.birt.report.engine.api.IEngineTask.TASK_RENDER)))) { context.addUnresolvedContent(content); return new org.eclipse.birt.report.engine.nLayout.area.impl.TemplateAreaLayout(parent, context, content); } else { if (org.eclipse.birt.report.engine.layout.pdf.util.PropertyUtil.isInlineElement(content)) { return new org.eclipse.birt.report.engine.nLayout.area.impl.InlineTextArea(parent, context, content); } else { return new org.eclipse.birt.report.engine.nLayout.area.impl.BlockTextArea(parent, context, content); } } default : return null; } }
protected void __execute() throws java.lang.Exception { org.eclipse.birt.report.context.ViewerAttributeBean attrBean = ((org.eclipse.birt.report.context.ViewerAttributeBean) (context.getBean())); assert attrBean != null; java.lang.String reportDesignName = attrBean.getReportDesignName(); java.lang.String configFileName = org.eclipse.birt.report.utility.ParameterAccessor.getConfigFileName(reportDesignName); if (configFileName == null) { handleUpdate(); return; } org.eclipse.birt.report.model.api.SessionHandle sessionHandle = org.eclipse.birt.report.model.api.DesignEngine.newSession(ULocale.US); java.io.File configFile = new java.io.File(configFileName); if (((configFile != null) && (configFile.exists())) && (configFile.isFile())) { configFile.delete(); } org.eclipse.birt.report.model.api.ReportDesignHandle handle = sessionHandle.createDesign(); java.lang.String displayTextParam = null; org.eclipse.birt.report.soapengine.api.Oprand[] op = this.operation.getOprand(); if (op != null) { for (int i = 0; i < (op.length); i++) { org.eclipse.birt.report.model.api.elements.structures.ConfigVariable configVar = new org.eclipse.birt.report.model.api.elements.structures.ConfigVariable(); java.lang.String paramName = op[i].getName(); java.lang.String paramValue = op[i].getValue(); org.eclipse.birt.report.model.api.ScalarParameterHandle parameter = null; if ((paramName.equalsIgnoreCase(ParameterAccessor.PARAM_ISNULL)) && (paramValue != null)) { parameter = ((org.eclipse.birt.report.model.api.ScalarParameterHandle) (attrBean.findParameter(paramValue))); if (parameter != null) { configVar.setName((((org.eclipse.birt.report.utility.ParameterAccessor.PARAM_ISNULL) + "_") + (parameter.getID()))); configVar.setValue(((paramValue + "_") + (parameter.getID()))); handle.addConfigVariable(configVar); } continue; } else if ((displayTextParam = org.eclipse.birt.report.utility.ParameterAccessor.isDisplayText(paramName)) != null) { parameter = ((org.eclipse.birt.report.model.api.ScalarParameterHandle) (attrBean.findParameter(displayTextParam))); if (parameter != null) { configVar.setName(((paramName + "_") + (parameter.getID()))); configVar.setValue(paramValue); handle.addConfigVariable(configVar); } continue; } parameter = ((org.eclipse.birt.report.model.api.ScalarParameterHandle) (attrBean.findParameter(paramName))); if ((paramValue == null) || (parameter == null)) continue; java.lang.String pattern = parameter.getPattern(); java.lang.String dataType = parameter.getDataType(); if ((paramValue.trim().length()) > 0) { try { java.lang.Object paramValueObj = org.eclipse.birt.report.model.api.util.ParameterValidationUtil.validate(dataType, pattern, paramValue, attrBean.getLocale()); if (DesignChoiceConstants.PARAM_TYPE_STRING.equalsIgnoreCase(dataType)) { pattern = null; } else if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equalsIgnoreCase(dataType)) { pattern = org.eclipse.birt.report.model.api.util.ParameterValidationUtil.DEFAULT_DATETIME_FORMAT; } if (paramValueObj != null) paramValue = org.eclipse.birt.report.model.api.util.ParameterValidationUtil.getDisplayValue(dataType, pattern, paramValueObj, ULocale.US); } catch (java.lang.Exception err) { paramValue = op[i].getValue(); } } configVar.setName(((paramName + "_") + (parameter.getID()))); configVar.setValue(paramValue); handle.addConfigVariable(configVar); org.eclipse.birt.report.model.api.elements.structures.ConfigVariable typeVar = new org.eclipse.birt.report.model.api.elements.structures.ConfigVariable(); typeVar.setName(((((paramName + "_") + (parameter.getID())) + "_") + (org.eclipse.birt.report.IBirtConstants.PROP_TYPE))); typeVar.setValue(dataType); handle.addConfigVariable(typeVar); } } handle.saveAs(configFileName); handle.close(); handleUpdate(); }
private void splitText() { java.lang.Integer taskType = ((java.lang.Integer) (engine.getOption(EngineTask.TASK_TYPE))); if (((taskType.intValue()) == (org.eclipse.birt.report.engine.api.IEngineTask.TASK_RENDER)) && (context.isFixedLayout())) { org.eclipse.birt.report.engine.nLayout.area.impl.SizeBasedContent sizeBasedContent = context.getPageHintManager().getSizeBasedContentMapping().get(content.getInstanceID().toUniqueString()); if ((sizeBasedContent == null) || ((sizeBasedContent.dimension) == (-1))) { return; } org.eclipse.birt.report.engine.nLayout.area.impl.HtmlRegionArea container = new org.eclipse.birt.report.engine.nLayout.area.impl.HtmlRegionArea(); container.setWidth(sizeBasedContent.width); org.eclipse.birt.report.engine.content.IContainerContent containerContent = content.getReportContent().createContainerContent(); containerContent.getChildren().add(content); org.eclipse.birt.report.engine.nLayout.LayoutContext pdfLayoutContext = new org.eclipse.birt.report.engine.nLayout.LayoutContext(); pdfLayoutContext.setFormat("pdf"); pdfLayoutContext.setFixedLayout(true); pdfLayoutContext.setInHtmlRender(true); pdfLayoutContext.setLocale(engine.locale); pdfLayoutContext.setHtmlLayoutContext(context); pdfLayoutContext.setMaxBP(java.lang.Integer.MAX_VALUE); org.eclipse.birt.report.engine.nLayout.RegionLayoutEngine rle = new org.eclipse.birt.report.engine.nLayout.RegionLayoutEngine(container, pdfLayoutContext); try { rle.layout(containerContent); } catch (org.eclipse.birt.core.exception.BirtException e) { logger.log(java.util.logging.Level.WARNING, e.getMessage(), e); } } }
public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { if (((selectedParameter) != null) && ((selectedParameter) != (newParameter))) { try { java.lang.String newControlType = getSelectedDisplayType(); if (org.eclipse.birt.report.designer.ui.dialogs.CascadingParametersDialog.PARAM_CONTROL_COMBO.equals(newControlType)) { newControlType = org.eclipse.birt.report.model.api.elements.DesignChoiceConstants.PARAM_CONTROL_LIST_BOX; selectedParameter.setMustMatch(true); } else if (org.eclipse.birt.report.designer.ui.dialogs.CascadingParametersDialog.PARAM_CONTROL_LIST.equals(newControlType)) { newControlType = org.eclipse.birt.report.model.api.elements.DesignChoiceConstants.PARAM_CONTROL_LIST_BOX; selectedParameter.setMustMatch(false); } else { selectedParameter.setProperty(ScalarParameterHandle.MUCH_MATCH_PROP, null); } selectedParameter.setControlType(newControlType); } catch (org.eclipse.birt.report.model.api.activity.SemanticException e1) { org.eclipse.birt.report.designer.internal.ui.util.ExceptionHandler.handle(e1); } } }
public java.util.HashMap getExpressions() { if ((text) == null) { return null; } if ((exprs) != null) { return exprs; } if ((org.eclipse.birt.report.engine.ir.TextItemDesign.HTML_TEXT.equals(textType)) || ((org.eclipse.birt.report.engine.ir.TextItemDesign.AUTO_TEXT.equals(textType)) && (startsWithIgnoreCase(text, "<html>")))) { exprs = new java.util.HashMap(); org.eclipse.birt.core.template.TextTemplate template = new org.eclipse.birt.core.template.TemplateParser().parse(text); if ((template != null) && ((template.getNodes()) != null)) { java.util.Iterator itor = template.getNodes().iterator(); java.lang.Object obj; java.lang.String expression = null; while (itor.hasNext()) { obj = itor.next(); if (obj instanceof org.eclipse.birt.core.template.TextTemplate.ValueNode) { expression = ((org.eclipse.birt.core.template.TextTemplate.ValueNode) (obj)).getValue(); } else if (obj instanceof org.eclipse.birt.core.template.TextTemplate.ImageNode) { expression = ((org.eclipse.birt.core.template.TextTemplate.ImageNode) (obj)).getExpr(); } if ((expression != null) && (!(expression.trim().equals("")))) { exprs.put(expression, expression); expression = null; } } } } return exprs; }
private void refreshChart() { org.eclipse.birt.chart.ui.swt.wizard.ChartAdapter.beginIgnoreNotifications(); org.eclipse.birt.chart.ui.swt.interfaces.IChartType chartType = org.eclipse.birt.chart.ui.util.ChartUIUtil.getChartType(sType); try { chartModel = chartType.getModel(sSubType, this.orientation, this.sDimension, this.chartModel); if (getDataServiceProvider().checkState(IDataServiceProvider.PART_CHART)) { org.eclipse.birt.chart.model.ChartWithAxes cwa = ((org.eclipse.birt.chart.model.ChartWithAxes) (chartModel)); cwa.getAxes().get(0).setCategoryAxis(true); if (cwa.isTransposed()) { cwa.setReverseCategory(true); } } ((org.eclipse.birt.chart.ui.swt.wizard.ChartWizardContext) (context)).setModel(chartModel); ((org.eclipse.birt.chart.ui.swt.wizard.ChartWizardContext) (context)).setChartType(chartType); updateAdapters(); org.eclipse.birt.chart.ui.swt.wizard.ChartWizard.removeException(ChartWizard.TaskSelType_refreCh_ID); } catch (java.lang.Exception e) { org.eclipse.birt.chart.ui.swt.wizard.ChartWizard.showException(ChartWizard.TaskSelType_refreCh_ID, e.getLocalizedMessage()); } org.eclipse.birt.chart.ui.swt.wizard.ChartAdapter.endIgnoreNotifications(); updateSelection(); ((org.eclipse.birt.chart.ui.swt.wizard.ChartWizardContext) (context)).setModel(chartModel); ((org.eclipse.birt.chart.ui.swt.wizard.ChartWizardContext) (context)).setChartType(chartType); setContext(context); }
public void run() { if (org.eclipse.birt.report.designer.internal.ui.util.Policy.TRACING_ACTIONS) { java.lang.System.out.println(("Rename action >> Runs with " + (org.eclipse.birt.report.designer.util.DEUtil.getDisplayLabel(getSelectedObjects().getFirstElement())))); } if ((selectedItem) != null) { doRename(); } }
public void initialize() throws org.eclipse.birt.core.exception.BirtException { org.eclipse.birt.report.engine.content.IPageContent pageContent = ((org.eclipse.birt.report.engine.content.IPageContent) (content)); if ((context.getEngineTaskType()) == (org.eclipse.birt.report.engine.api.IEngineTask.TASK_RENDER)) { if (context.isReserveDocumentPageNumbers()) { long number = pageContent.getPageNumber(); if (number > 0) { context.setPageNumber(number); } } else { context.setPageNumber(((context.getPageNumber()) + 1)); pageContent = createPageContent(pageContent); } } else { if (context.isAutoPageBreak()) { context.setPageNumber(((context.getPageNumber()) + 1)); pageContent = createPageContent(pageContent); } else { long number = pageContent.getPageNumber(); if (number > 0) { context.setPageNumber(number); } } } createNewPage(pageContent); maxAvaWidth = page.getBody().getWidth(); width = maxAvaWidth; }
private java.util.Map getParameterSelectionLists(org.eclipse.birt.report.service.api.IViewerReportDesignHandle design, java.util.Map params, org.eclipse.birt.report.service.api.InputOptions options) throws org.eclipse.birt.report.service.api.ReportServiceException { if ((params == null) || ((params.size()) == 0)) return new java.util.HashMap(); java.util.List[] listArray = null; java.util.Map ret = new java.util.HashMap(); java.util.List remainingParamNames = new java.util.ArrayList(); java.lang.String firstName = ((java.lang.String) (params.keySet().iterator().next())); java.util.Collection paramDefs = getReportService().getParameterDefinitions(design, options); org.eclipse.birt.report.engine.api.IParameterDefnBase paramDef = null; for (java.util.Iterator it = paramDefs.iterator(); it.hasNext();) { org.eclipse.birt.report.engine.api.IParameterDefnBase temp = ((org.eclipse.birt.report.engine.api.IParameterDefnBase) (it.next())); if (temp.getName().equals(firstName)) { paramDef = temp; break; } } if (paramDef == null) { throw new org.eclipse.birt.report.service.api.ReportServiceException(("Invalid parameter: " + firstName)); } java.lang.String groupName = null; org.eclipse.birt.report.model.api.ReportElementHandle element = paramDef.getHandle(); assert element != null; if ((element.getContainer()) instanceof org.eclipse.birt.report.model.api.CascadingParameterGroupHandle) { org.eclipse.birt.report.model.api.CascadingParameterGroupHandle groupHandle = ((org.eclipse.birt.report.model.api.CascadingParameterGroupHandle) (element.getContainer())); groupName = groupHandle.getName(); if ((groupHandle.getParameters().getCount()) > (params.size())) { int remainingParams = (groupHandle.getParameters().getCount()) - (params.size()); for (int i = 0; i < remainingParams; i++) { remainingParamNames.add(groupHandle.getParameters().get(((params.size()) + i)).getName()); } } if (groupName == null) { throw new org.eclipse.birt.report.service.api.ReportServiceException("Can not find cascade parameter group name."); } } try { if ((remainingParamNames.size()) > 0) { listArray = new java.util.List[remainingParamNames.size()]; for (int k = 0; k < (remainingParamNames.size()); k++) { java.lang.Object[] keyValue = new java.lang.Object[(params.size()) + k]; java.util.Set values = params.keySet(); int i = 0; for (java.util.Iterator it = values.iterator(); it.hasNext();) { keyValue[i] = params.get(it.next()); i++; } for (i = 0; i < k; i++) { if (listArray[i].isEmpty()) { keyValue[((params.size()) + i)] = null; } else { keyValue[((params.size()) + i)] = listArray[i].get(0); } } listArray[k] = doQueryCascadeParameterSelectionList(design, groupName, keyValue); ret.put(remainingParamNames.get(k), listArray[k]); } } } catch (java.rmi.RemoteException e) { throw new org.eclipse.birt.report.service.api.ReportServiceException(e.getLocalizedMessage()); } return ret; }
public void add(org.eclipse.birt.report.engine.internal.document.DocumentExtension ext) { ext.setParent(index); if ((firstChild) == (-1)) { updateFirstChild(ext); lastChild = firstChild; lastChildId = firstChildId; return; } if ((head) == null) { if ((ext.contentId) == ((lastChildId) + 1)) { ext.setPrevious(lastChild); ext.setNext((-1)); lastChild = ext.index; lastChildId = ext.contentId; } else { head = new org.eclipse.birt.report.engine.internal.document.ExtensionSegment(firstChildId, firstChild, lastChildId, lastChild); insert(ext); } } else { if (((latest) != null) && ((ext.contentId) == ((latest.endId) + 1))) { ext.setPrevious(latest.endIndex); if ((latest.next) != null) { ext.setNext(latest.next.startIndex); } else { ext.setNext((-1)); } latest.endId = ext.contentId; latest.endIndex = ext.index; } else { insert(ext); } } }
private boolean validateScalarParameter(org.eclipse.birt.report.model.api.ScalarParameterHandle paramHandle) { java.lang.String paramName = paramHandle.getName(); java.lang.Object paramValue = runValues.get(paramName); java.lang.String type = paramHandle.getDataType(); if (paramValue == null) { if (!(paramHandle.isRequired())) return true; log.log(java.util.logging.Level.SEVERE, "Parameter {0} doesn't allow a null value.", paramName); return false; } java.lang.String source = paramHandle.getValidate(); if ((source != null) && ((source.length()) != 0)) { java.lang.Object result = executionContext.evaluate(source); if ((!(result instanceof java.lang.Boolean)) || (!(((java.lang.Boolean) (result)).booleanValue()))) { log.log(java.util.logging.Level.SEVERE, "Parameter validate failed: ", source); return false; } } if ((DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(type)) || (DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(type))) { if (paramValue instanceof java.lang.Number) return true; log.log(java.util.logging.Level.SEVERE, "The supplied value {0} for parameter {1} is not a number.", new java.lang.String[]{ paramValue.toString(), paramName }); return false; } else if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(type)) { if (paramValue instanceof java.util.Date) return true; log.log(java.util.logging.Level.SEVERE, "The supplied value {0} for parameter {1} is not a valid date time.", new java.lang.String[]{ paramValue.toString(), paramName }); return false; } else if (DesignChoiceConstants.PARAM_TYPE_DATE.equals(type)) { if (paramValue instanceof java.sql.Date) return true; log.log(java.util.logging.Level.SEVERE, "The supplied value {0} for parameter {1} is not a valid date.", new java.lang.String[]{ paramValue.toString(), paramName }); return false; } else if (DesignChoiceConstants.PARAM_TYPE_TIME.equals(type)) { if (paramValue instanceof java.sql.Time) return true; log.log(java.util.logging.Level.SEVERE, "The supplied value {0} for parameter {1} is not a valid time.", new java.lang.String[]{ paramValue.toString(), paramName }); return false; } else if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(type)) { java.lang.String value = paramValue.toString().trim(); if ((paramHandle.isRequired()) && (value.equals(""))) { log.log(java.util.logging.Level.SEVERE, "parameter {0} can't be blank.", paramName); return false; } return true; } else if (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equals(type)) { if (paramValue instanceof java.lang.Boolean) return true; log.log(java.util.logging.Level.SEVERE, "The supplied value {0} for parameter {1} is not a boolean.", new java.lang.String[]{ paramValue.toString(), paramName }); return false; } return true; }
private boolean isMeasureHandle(java.lang.Object transfer) { if (transfer instanceof java.lang.Object[]) { java.lang.Object[] items = ((java.lang.Object[]) (transfer)); for (int i = 0; i < (items.length); i++) { if (!((items[i]) instanceof org.eclipse.birt.report.model.api.olap.MeasureHandle)) return false; } return true; } return (transfer instanceof org.eclipse.birt.report.model.api.olap.MeasureHandle) || (transfer instanceof org.eclipse.birt.report.model.api.olap.MeasureGroupHandle); }
public static boolean handleValidateDragInOutline(java.lang.Object selection) { if (selection instanceof org.eclipse.jface.viewers.StructuredSelection) { return org.eclipse.birt.report.designer.util.DNDUtil.handleValidateDragInOutline(((org.eclipse.jface.viewers.StructuredSelection) (selection)).toArray()); } if (selection instanceof java.lang.Object[]) { java.lang.Object[] array = ((java.lang.Object[]) (selection)); if ((array.length) == 0) { return false; } if (((array[0]) instanceof org.eclipse.birt.report.model.api.ColumnHandle) && ((((org.eclipse.birt.report.model.api.ColumnHandle) (array[0])).getRoot()) != null)) { boolean bool = false; int columnNumber = org.eclipse.birt.report.designer.core.model.schematic.HandleAdapterFactory.getInstance().getColumnHandleAdapter(array[0]).getColumnNumber(); java.lang.Object parent = ((org.eclipse.birt.report.model.api.ColumnHandle) (array[0])).getContainer(); if (parent instanceof org.eclipse.birt.report.model.api.TableHandle) { bool = ((org.eclipse.birt.report.model.api.TableHandle) (parent)).canCopyColumn(columnNumber); } else if (parent instanceof org.eclipse.birt.report.model.api.GridHandle) { bool = ((org.eclipse.birt.report.model.api.GridHandle) (parent)).canCopyColumn(columnNumber); } if (bool && ((array.length) == 1)) { return true; } if (bool && ((array[1]) instanceof org.eclipse.birt.report.model.api.CellHandle)) { return true; } return false; } for (int i = 0; i < (array.length); i++) { if (org.eclipse.birt.report.designer.util.DNDUtil.checkContainerExists(array[i], array)) continue; if (!(org.eclipse.birt.report.designer.util.DNDUtil.handleValidateDragInOutline(array[i]))) return false; } return true; } if (selection instanceof org.eclipse.birt.report.designer.core.model.views.outline.ReportElementModel) { return org.eclipse.birt.report.designer.util.DNDUtil.handleValidateDragInOutline(((org.eclipse.birt.report.designer.core.model.views.outline.ReportElementModel) (selection)).getSlotHandle()); } if (selection instanceof org.eclipse.birt.report.model.api.SlotHandle) { org.eclipse.birt.report.model.api.SlotHandle slot = ((org.eclipse.birt.report.model.api.SlotHandle) (selection)); org.eclipse.birt.report.model.api.DesignElementHandle handle = slot.getElementHandle(); return ((slot.getContents().size()) > 0) && ((handle instanceof org.eclipse.birt.report.model.api.ListHandle) || (handle instanceof org.eclipse.birt.report.model.api.ListGroupHandle)); } if ((selection instanceof org.eclipse.birt.report.model.api.ColumnHandle) && ((((org.eclipse.birt.report.model.api.ColumnHandle) (selection)).getRoot()) != null)) { int columnNumber = org.eclipse.birt.report.designer.core.model.schematic.HandleAdapterFactory.getInstance().getColumnHandleAdapter(selection).getColumnNumber(); java.lang.Object parent = ((org.eclipse.birt.report.model.api.ColumnHandle) (selection)).getContainer(); if (parent instanceof org.eclipse.birt.report.model.api.TableHandle) { return ((org.eclipse.birt.report.model.api.TableHandle) (parent)).canCopyColumn(columnNumber); } else if (parent instanceof org.eclipse.birt.report.model.api.GridHandle) { return ((org.eclipse.birt.report.model.api.GridHandle) (parent)).canCopyColumn(columnNumber); } } return ((((((((((selection instanceof org.eclipse.birt.report.model.api.ReportItemHandle) || (selection instanceof org.eclipse.birt.report.model.api.DataSetHandle)) || (selection instanceof org.eclipse.birt.report.model.api.DataSourceHandle)) || (selection instanceof org.eclipse.birt.report.model.api.ScalarParameterHandle)) || (selection instanceof org.eclipse.birt.report.model.api.ParameterGroupHandle)) || (selection instanceof org.eclipse.birt.report.model.api.GroupHandle)) || (selection instanceof org.eclipse.birt.report.model.api.StyleHandle)) || (selection instanceof org.eclipse.birt.report.model.api.ThemeHandle)) || (selection instanceof org.eclipse.birt.report.model.api.EmbeddedImageHandle)) || (selection instanceof org.eclipse.birt.report.model.api.TemplateElementHandle)) || (selection instanceof org.eclipse.birt.report.designer.core.model.views.data.DataSetItemModel); }
protected static java.lang.String getCreationType(java.lang.String template) { java.lang.String type = ""; if (IReportElementConstants.REPORT_ELEMENT_IMAGE.equalsIgnoreCase(template)) { type = org.eclipse.birt.report.model.api.elements.ReportDesignConstants.IMAGE_ITEM; } else if (IReportElementConstants.REPORT_ELEMENT_TABLE.equalsIgnoreCase(template)) { type = org.eclipse.birt.report.model.api.elements.ReportDesignConstants.TABLE_ITEM; } else if (IReportElementConstants.REPORT_ELEMENT_TEXTDATA.equalsIgnoreCase(template)) { type = org.eclipse.birt.report.model.api.elements.ReportDesignConstants.TEXT_DATA_ITEM; } else if ((((((IReportElementConstants.REPORT_ELEMENT_TEXT.equalsIgnoreCase(template)) || (IReportElementConstants.AUTOTEXT_DATE.equalsIgnoreCase(template))) || (IReportElementConstants.AUTOTEXT_CREATEDON.equalsIgnoreCase(template))) || (IReportElementConstants.AUTOTEXT_CREATEDBY.equalsIgnoreCase(template))) || (IReportElementConstants.AUTOTEXT_FILENAME.equalsIgnoreCase(template))) || (IReportElementConstants.AUTOTEXT_LASTPRINTED.equalsIgnoreCase(template))) { type = org.eclipse.birt.report.model.api.elements.ReportDesignConstants.TEXT_ITEM; } else if ((IReportElementConstants.AUTOTEXT_TOTAL_PAGE_COUNT.equalsIgnoreCase(template)) || (IReportElementConstants.AUTOTEXT_PAGE.equalsIgnoreCase(template))) { type = org.eclipse.birt.report.model.api.elements.ReportDesignConstants.AUTOTEXT_ITEM; } else if ((((IReportElementConstants.AUTOTEXT_AUTHOR_PAGE_DATE.equalsIgnoreCase(template)) || (IReportElementConstants.AUTOTEXT_CONFIDENTIAL_PAGE.equalsIgnoreCase(template))) || (IReportElementConstants.REPORT_ELEMENT_GRID.equalsIgnoreCase(template))) || (IReportElementConstants.AUTOTEXT_PAGEXOFY.equalsIgnoreCase(template))) { type = org.eclipse.birt.report.model.api.elements.ReportDesignConstants.GRID_ITEM; } else if (IReportElementConstants.REPORT_ELEMENT_LABEL.equalsIgnoreCase(template)) { type = org.eclipse.birt.report.model.api.elements.ReportDesignConstants.LABEL_ITEM; } else if (IReportElementConstants.REPORT_ELEMENT_DATA.equalsIgnoreCase(template)) { type = org.eclipse.birt.report.model.api.elements.ReportDesignConstants.DATA_ITEM; } else if (IReportElementConstants.REPORT_ELEMENT_LIST.equalsIgnoreCase(template)) { type = org.eclipse.birt.report.model.api.elements.ReportDesignConstants.LIST_ITEM; } else { if (template.startsWith(IReportElementConstants.REPORT_ELEMENT_EXTENDED)) { type = org.eclipse.birt.report.model.api.elements.ReportDesignConstants.EXTENDED_ITEM; } } return type; }
public void startData(org.eclipse.birt.report.engine.content.IDataContent data) { super.startData(data); org.eclipse.birt.report.engine.emitter.excel.HyperlinkDef url = parseHyperLink(data); org.eclipse.birt.report.engine.emitter.excel.BookmarkDef bookmark = getBookmark(data); if ((((((org.eclipse.birt.report.engine.ir.StyledElementDesign) (data.getGenerateBy())).getMap()) != null) && ((((org.eclipse.birt.report.engine.ir.StyledElementDesign) (data.getGenerateBy())).getMap().getRuleCount()) > 0)) && ((data.getLabelText()) != null)) { engine.addData(data.getLabelText().trim(), data.getComputedStyle(), url, bookmark); } else if (!(org.eclipse.birt.report.engine.emitter.excel.ExcelUtil.getType(data.getValue()).equals(Data.NUMBER))) { engine.addData(data.getText(), data.getComputedStyle(), url, bookmark); } else { engine.addData(data.getValue(), data.getComputedStyle(), url, bookmark); } }
static org.eclipse.birt.data.engine.api.IPreparedQuery newInstance(org.eclipse.birt.data.engine.impl.DataEngineImpl dataEngine, org.eclipse.birt.data.engine.api.IQueryDefinition queryDefn, java.util.Map appContext) throws org.eclipse.birt.data.engine.core.DataException { assert dataEngine != null; assert queryDefn != null; if ((queryDefn.getQueryResultsID()) != null) { if (((dataEngine.getContext().getMode()) == (org.eclipse.birt.data.engine.api.DataEngineContext.MODE_GENERATION)) || ((dataEngine.getContext().getMode()) == (org.eclipse.birt.data.engine.api.DataEngineContext.DIRECT_PRESENTATION))) { return new org.eclipse.birt.data.engine.impl.PreparedQueryUtil.DummyPreparedQuery(queryDefn, dataEngine.getSession().getTempDir()); } if ((dataEngine.getContext().getMode()) == (org.eclipse.birt.data.engine.api.DataEngineContext.MODE_PRESENTATION)) { return new org.eclipse.birt.data.engine.impl.PreparedQueryUtil.DummyPreparedQuery(queryDefn, dataEngine.getSession().getTempDir(), dataEngine.getContext()); } return org.eclipse.birt.data.engine.impl.PreparedQueryUtil.newIVInstance(dataEngine, queryDefn); } org.eclipse.birt.data.engine.api.IBaseDataSetDesign dset = org.eclipse.birt.data.engine.impl.PreparedQueryUtil.cloneDataSetDesign(dataEngine.getDataSetDesign(queryDefn.getDataSetName()), appContext); if (dset == null) { if ((queryDefn.getQueryResultsID()) == null) return new org.eclipse.birt.data.engine.impl.PreparedDummyQuery(dataEngine.getContext(), queryDefn, dataEngine.getSession().getSharedScope()); } org.eclipse.birt.data.engine.api.IPreparedQuery preparedQuery; if (dset instanceof org.eclipse.birt.data.engine.api.IScriptDataSetDesign) { preparedQuery = new org.eclipse.birt.data.engine.impl.PreparedScriptDSQuery(dataEngine, queryDefn, dset, appContext); } else if (dset instanceof org.eclipse.birt.data.engine.api.IOdaDataSetDesign) { if (dset instanceof org.eclipse.birt.data.engine.impl.IIncreCacheDataSetDesign) { preparedQuery = new org.eclipse.birt.data.engine.impl.PreparedIncreCacheDSQuery(dataEngine, queryDefn, dset, appContext); } else { preparedQuery = new org.eclipse.birt.data.engine.impl.PreparedOdaDSQuery(dataEngine, queryDefn, dset, appContext); } } else if (dset instanceof org.eclipse.birt.data.engine.api.IJointDataSetDesign) { preparedQuery = new org.eclipse.birt.data.engine.impl.PreparedJointDataSourceQuery(dataEngine, queryDefn, dset, appContext); } else { throw new org.eclipse.birt.data.engine.core.DataException(org.eclipse.birt.data.engine.i18n.ResourceConstants.UNSUPPORTED_DATASET_TYPE, dset.getName()); } return preparedQuery; }
protected void startDiagonalCell(org.eclipse.birt.report.engine.content.ICellContent cell) { org.eclipse.birt.report.engine.ir.DimensionType cellWidth = getCellWidth(cell); org.eclipse.birt.report.engine.ir.DimensionType cellHeight = getCellHeight(cell); if ((cellWidth == null) || (cellHeight == null)) return; java.lang.String imgUri = diagonalCellImageMap.get(cell.getInstanceID().getComponentID()); if (imgUri == null) { org.eclipse.birt.report.engine.emitter.html.util.DiagonalLineImage imageCreater = new org.eclipse.birt.report.engine.emitter.html.util.DiagonalLineImage(); imageCreater.setDiagonalLine(cell.getDiagonalNumber(), cell.getDiagonalStyle(), cell.getDiagonalWidth(), cell.getDiagonalColor()); imageCreater.setAntidiagonalLine(cell.getAntidiagonalNumber(), cell.getAntidiagonalStyle(), cell.getAntidiagonalWidth(), cell.getAntidiagonalColor()); imageCreater.setImageDpi(imageDpi); imageCreater.setImageSize(cellWidth, cellHeight); org.eclipse.birt.report.engine.content.IStyle cellComputedStyle = cell.getComputedStyle(); java.lang.String strColor = cellComputedStyle.getColor(); imageCreater.setColor(org.eclipse.birt.report.engine.layout.pdf.util.PropertyUtil.getColor(strColor)); byte[] imageByteArray = null; try { imageByteArray = imageCreater.drawImage(); } catch (java.io.IOException e) { org.eclipse.birt.report.engine.emitter.html.HTMLReportEmitter.logger.log(java.util.logging.Level.WARNING, e.getMessage(), e); } if (imageByteArray != null) { org.eclipse.birt.report.engine.api.impl.Image image = new org.eclipse.birt.report.engine.api.impl.Image(imageByteArray, cell.getInstanceID().toUniqueString(), ".png"); image.setReportRunnable(runnable); image.setRenderOption(renderOption); imgUri = imageHandler.onCustomImage(image, reportContext); if (imgUri != null) { diagonalCellImageMap.put(cell.getInstanceID().getComponentID(), imgUri); } } } writer.openTag(HTMLTags.TAG_DIV); writer.attribute(HTMLTags.ATTR_STYLE, "position: relative; height: 100%;"); if (imgUri != null) { writer.openTag(HTMLTags.TAG_IMAGE); writer.attributeAllowEmpty(HTMLTags.ATTR_ALT, ""); writer.attribute(HTMLTags.ATTR_SRC, imgUri); writer.attribute(HTMLTags.ATTR_STYLE, "position: absolute; width: 100%; height: 100%; z-index: -1;"); if (null == (htmlIDNamespace)) { writer.attribute(HTMLTags.ATTR_ONLOAD, "fixPNG(this)"); } else { writer.attribute(HTMLTags.ATTR_ONLOAD, ((htmlIDNamespace) + "fixPNG(this)")); } writer.closeTag(HTMLTags.TAG_IMAGE); } }
public final void paintClientArea(org.eclipse.draw2d.Graphics g) { if (bPainting) { return; } final org.eclipse.draw2d.geometry.Rectangle r = getClientArea().getCopy(); if (((r.width) <= 0) || ((r.height) <= 0)) { return; } bPainting = true; if (bDirty) { bDirty = false; final org.eclipse.swt.widgets.Display d = org.eclipse.swt.widgets.Display.getCurrent(); org.eclipse.draw2d.geometry.Dimension dSize = r.getSize(); if ((((imgChart) == null) || ((imgChart.getImageData().width) != (dSize.width))) || ((imgChart.getImageData().height) != (dSize.height))) { if ((gc) != null) { gc.dispose(); } if ((imgChart) != null) { imgChart.dispose(); } bDirty = true; final org.eclipse.swt.graphics.ImageData ida = new org.eclipse.swt.graphics.ImageData(dSize.width, dSize.height, 32, org.eclipse.birt.chart.reportitem.ui.DesignerRepresentation.PALETTE_DATA); ida.transparentPixel = org.eclipse.birt.chart.reportitem.ui.DesignerRepresentation.TRANSPARENT_COLOR; imgChart = new org.eclipse.swt.graphics.Image(d, ida); gc = new org.eclipse.swt.graphics.GC(imgChart); } if (((org.eclipse.core.runtime.Platform.OS_MACOSX.equals(org.eclipse.core.runtime.Platform.getOS())) && ((gc) != null)) && (!(gc.isDisposed()))) { gc.dispose(); gc = new org.eclipse.swt.graphics.GC(imgChart); } final org.eclipse.swt.graphics.Color clrPreviousBG = gc.getBackground(); gc.setBackground(org.eclipse.swt.widgets.Display.getDefault().getSystemColor(SWT.COLOR_LIST_BACKGROUND)); gc.fillRectangle(0, 0, imgChart.getImageData().width, imgChart.getImageData().height); gc.setBackground(clrPreviousBG); if ((cm) == null) { showNullChart(dSize); } else { showChart(dSize); } } if ((imgChart) != null) { g.drawImage(imgChart, r.x, r.y); } bPainting = false; }
public int canDrop(java.lang.Object transfer, java.lang.Object target, int operation, org.eclipse.birt.report.designer.internal.ui.dnd.DNDLocation location) { if ((transfer instanceof org.eclipse.birt.report.model.api.VariableElementHandle) && (target instanceof org.eclipse.gef.EditPart)) { org.eclipse.gef.EditPart editPart = ((org.eclipse.gef.EditPart) (target)); editPart.getRoot().getModel(); if ((((editPart.getModel()) instanceof org.eclipse.birt.report.model.api.ReportDesignHandle) || ((editPart.getModel()) instanceof org.eclipse.birt.report.model.api.DesignElementHandle)) || ((editPart.getModel()) instanceof org.eclipse.birt.report.model.api.SlotHandle)) { if ((editPart.getModel()) instanceof org.eclipse.birt.report.model.api.SlotHandle) { int slot_id = ((org.eclipse.birt.report.model.api.SlotHandle) (editPart.getModel())).getSlotID(); if ((slot_id == (org.eclipse.birt.report.model.elements.interfaces.ISimpleMasterPageModel.PAGE_HEADER_SLOT)) || (slot_id == (org.eclipse.birt.report.model.elements.interfaces.ISimpleMasterPageModel.PAGE_FOOTER_SLOT))) { if ((((org.eclipse.birt.report.model.api.SlotHandle) (editPart.getModel())).getCount()) > 0) return org.eclipse.birt.report.designer.internal.ui.dnd.DNDService.LOGIC_FALSE; else return org.eclipse.birt.report.designer.internal.ui.dnd.DNDService.LOGIC_TRUE; } else if (slot_id == (org.eclipse.birt.report.model.elements.interfaces.ISimpleMasterPageModel.PAGE_HEADER_SLOT)) { return org.eclipse.birt.report.designer.internal.ui.dnd.DNDService.LOGIC_TRUE; } } if (((getMasterPageHandle(editPart)) != null) || (((org.eclipse.birt.report.model.api.VariableElementHandle) (transfer)).getType().equals(DesignChoiceConstants.VARIABLE_TYPE_REPORT))) return org.eclipse.birt.report.designer.internal.ui.dnd.DNDService.LOGIC_TRUE; else return org.eclipse.birt.report.designer.internal.ui.dnd.DNDService.LOGIC_FALSE; } } return org.eclipse.birt.report.designer.internal.ui.dnd.DNDService.LOGIC_UNKNOW; }
public void visitExtendedItem(org.eclipse.birt.report.model.elements.ExtendedItem obj) { boundColumnsMgr.dealExtendedItem(obj, getModule()); writer.startElement(DesignSchemaConstants.EXTENDED_ITEM_TAG); org.eclipse.birt.report.model.metadata.ExtensionElementDefn extDefn = obj.getExtDefn(); if (extDefn == null) { attribute(obj, DesignSchemaConstants.EXTENSION_NAME_ATTRIB, IExtendedItemModel.EXTENSION_NAME_PROP); attribute(obj, DesignSchemaConstants.EXTENSION_VERSION_ATTRIB, IExtendedItemModel.EXTENSION_VERSION_PROP); super.visitExtendedItem(obj); resourceKey(obj, IExtendedItemModel.ALT_TEXT_KEY_PROP, IExtendedItemModel.ALT_TEXT_PROP); writeStructureList(obj, IExtendedItemModel.FILTER_PROP); writeUserPropertyDefns(obj); org.eclipse.birt.report.model.parser.treebuild.ContentTree tree = obj.getExtensibilityProvider().getContentTree(); writeContentTree(tree); } else { markLineNumber(obj); attribute(obj, DesignSchemaConstants.EXTENSION_NAME_ATTRIB, IExtendedItemModel.EXTENSION_NAME_PROP); attribute(obj, DesignSchemaConstants.EXTENSION_VERSION_ATTRIB, IExtendedItemModel.EXTENSION_VERSION_PROP); java.lang.String name = ((java.lang.String) (obj.getLocalProperty(getModule(), IDesignElementModel.NAME_PROP))); if (!(org.eclipse.birt.report.model.api.util.StringUtil.isBlank(name))) writer.attribute(DesignSchemaConstants.NAME_ATTRIB, name); java.lang.String extendsFrom = obj.getExtendsName(); if (!(org.eclipse.birt.report.model.api.util.StringUtil.isBlank(extendsFrom))) writer.attribute(DesignSchemaConstants.EXTENDS_ATTRIB, extendsFrom); writer.attribute(DesignSchemaConstants.ID_ATTRIB, new java.lang.Long(obj.getID()).toString()); java.util.List props = extDefn.getProperties(); for (int i = 0; i < (props.size()); i++) { org.eclipse.birt.report.model.metadata.ElementPropertyDefn prop = ((org.eclipse.birt.report.model.metadata.ElementPropertyDefn) (props.get(i))); java.lang.String propName = prop.getName(); if ((((IDesignElementModel.NAME_PROP.equals(propName)) || (IExtendedItemModel.EXTENSION_NAME_PROP.equals(propName))) || (IDesignElementModel.EXTENDS_PROP.equals(propName))) || (IExtendedItemModel.EXTENSION_VERSION_PROP.equals(propName))) continue; switch (prop.getTypeCode()) { case org.eclipse.birt.report.model.api.metadata.IPropertyType.LIST_TYPE : writeSimplePropertyList(obj, propName); break; case org.eclipse.birt.report.model.api.metadata.IPropertyType.XML_TYPE : if (obj.hasLocalPropertyValuesOnOwnModel()) writeProperty(obj, org.eclipse.birt.report.model.util.ModelUtil.getTagByPropertyType(prop), propName, true); break; case org.eclipse.birt.report.model.api.metadata.IPropertyType.STRUCT_TYPE : if (prop.isList()) writeStructureList(obj, propName); else writeStructure(obj, propName); break; case org.eclipse.birt.report.model.api.metadata.IPropertyType.ELEMENT_TYPE : case org.eclipse.birt.report.model.api.metadata.IPropertyType.CONTENT_ELEMENT_TYPE : writeContents(obj, propName); break; default : writeProperty(obj, org.eclipse.birt.report.model.util.ModelUtil.getTagByPropertyType(prop), prop.getName(), false); break; } } writeUserPropertyDefns(obj); writeUserPropertyValues(obj); writeOverridenPropertyValues(obj); } writer.endElement(); }
protected void createFilterConditionContent(org.eclipse.swt.widgets.Composite innerParent) { org.eclipse.swt.widgets.Composite anotherParent = new org.eclipse.swt.widgets.Composite(innerParent, org.eclipse.swt.SWT.NONE); org.eclipse.swt.layout.GridData gd = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_HORIZONTAL); anotherParent.setLayoutData(gd); org.eclipse.swt.layout.GridLayout glayout = new org.eclipse.swt.layout.GridLayout(4, false); anotherParent.setLayout(glayout); org.eclipse.swt.widgets.Label lb = new org.eclipse.swt.widgets.Label(anotherParent, org.eclipse.swt.SWT.NONE); lb.setText(org.eclipse.birt.report.designer.nls.Messages.getString("FilterConditionBuilder.text.Condition")); org.eclipse.swt.widgets.Label lb2 = new org.eclipse.swt.widgets.Label(anotherParent, org.eclipse.swt.SWT.NONE); lb2.setLayoutData(new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_HORIZONTAL)); new org.eclipse.swt.widgets.Label(anotherParent, org.eclipse.swt.SWT.NONE); org.eclipse.swt.widgets.Composite condition = new org.eclipse.swt.widgets.Composite(innerParent, org.eclipse.swt.SWT.NONE); gd = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_BOTH); gd.heightHint = 180; condition.setLayoutData(gd); glayout = new org.eclipse.swt.layout.GridLayout(4, false); condition.setLayout(glayout); expression = new org.eclipse.swt.widgets.Combo(condition, org.eclipse.swt.SWT.NONE); org.eclipse.swt.layout.GridData gdata = new org.eclipse.swt.layout.GridData(); gdata.widthHint = 100; expression.setLayoutData(gdata); expression.addListener(SWT.Selection, comboModifyListener); if ((expression.getItemCount()) == 0) { expression.add(org.eclipse.birt.report.designer.util.DEUtil.resolveNull(null)); } expression.addSelectionListener(new org.eclipse.swt.events.SelectionAdapter() { public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { if ((expression.getText().equals(org.eclipse.birt.chart.reportitem.ui.dialogs.ChartCubeFilterConditionBuilder.VALUE_OF_THIS_DATA_ITEM)) && ((designHandle) instanceof org.eclipse.birt.report.model.api.DataItemHandle)) { expression.setText(org.eclipse.birt.report.designer.util.DEUtil.getColumnExpression(((org.eclipse.birt.report.model.api.DataItemHandle) (designHandle)).getResultSetColumn())); } updateButtons(); } }); org.eclipse.birt.report.designer.ui.dialogs.ExpressionProvider ep = new org.eclipse.birt.chart.reportitem.ui.dialogs.ChartExpressionProvider(designHandle, context, org.eclipse.birt.chart.reportitem.ui.ChartReportItemUIUtil.getExpressionBuilderStyle(IUIServiceProvider.COMMAND_EXPRESSION_DATA_BINDINGS)); expButton = org.eclipse.birt.chart.reportitem.ui.ChartExpressionButtonUtil.createExpressionButton(condition, expression, ((org.eclipse.birt.report.model.api.ExtendedItemHandle) (designHandle)), ep); expButton.addListener(new org.eclipse.swt.widgets.Listener() { public void handleEvent(org.eclipse.swt.widgets.Event event) { if ((event.data) instanceof java.lang.String[]) { updateButtons(); if (!(expButton.getExpression().equals(fCurrentExpr))) { needRefreshList = true; fCurrentExpr = expButton.getExpression(); } } } }); expButton.setPredefinedQuery(getDataSetColumns()); operator = new org.eclipse.swt.widgets.Combo(condition, org.eclipse.swt.SWT.READ_ONLY); for (int i = 0; i < (org.eclipse.birt.chart.reportitem.ui.dialogs.ChartCubeFilterConditionBuilder.OPERATOR.length); i++) { operator.add(org.eclipse.birt.chart.reportitem.ui.dialogs.ChartCubeFilterConditionBuilder.OPERATOR[i][0]); } operator.setVisibleItemCount(30); operator.addSelectionListener(operatorSelectionListener); create2ValueComposite(condition); if ((inputHandle) != null) { syncViewProperties(); } lb = new org.eclipse.swt.widgets.Label(innerParent, ((org.eclipse.swt.SWT.SEPARATOR) | (org.eclipse.swt.SWT.HORIZONTAL))); lb.setLayoutData(new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_HORIZONTAL)); }
public static java.lang.String relativize(java.net.URL url) { if (url.getProtocol().equals("file")) { try { return new java.io.File(org.eclipse.birt.report.designer.ui.ReportPlugin.getDefault().getResourceFolder()).toURI().relativize(url.toURI()).getPath(); } catch (java.net.URISyntaxException e) { } } return url.getPath(); }
public void load() { for (int i = 0; i < (toggles.length); i++) { if (((toggles[i]) != null) && (!(toggles[i].getControl().isDisposed()))) toggles[i].load(); } if (!(composite.isDisposed())) { composite.layout(); } }
public boolean canLeaveThePage() { if (isDirty()) { org.eclipse.jface.dialogs.MessageDialog prefDialog = new org.eclipse.jface.dialogs.MessageDialog(org.eclipse.birt.report.designer.internal.ui.util.UIUtil.getDefaultShell(), org.eclipse.birt.report.designer.nls.Messages.getString("XMLSourcePage.Error.Dialog.title"), null, org.eclipse.birt.report.designer.nls.Messages.getString("XMLSourcePage.Error.Dialog.Message.PromptMsg"), org.eclipse.jface.dialogs.MessageDialog.INFORMATION, new java.lang.String[]{ org.eclipse.birt.report.designer.nls.Messages.getString("XMLSourcePage.Error.Dialog.Message.Yes"), org.eclipse.birt.report.designer.nls.Messages.getString("XMLSourcePage.Error.Dialog.Message.No"), org.eclipse.birt.report.designer.nls.Messages.getString("XMLSourcePage.Error.Dialog.Message.Cancel") }, 0); int ret = prefDialog.open(); switch (ret) { case 0 : doSave(null); break; case 1 : if ((getEditorInput()) != null) { this.setInput(getEditorInput()); } break; case 2 : if ((getEditorInput()) != null) { this.setInput(getEditorInput()); } return false; } } int errorLine = getErrorLIine(); if (errorLine > (-1)) { org.eclipse.jface.dialogs.MessageDialog.openError(org.eclipse.swt.widgets.Display.getCurrent().getActiveShell(), org.eclipse.birt.report.designer.nls.Messages.getString("XMLSourcePage.Error.Dialog.title"), org.eclipse.birt.report.designer.nls.Messages.getString("XMLSourcePage.Error.Dialog.Message.InvalidFile")); setFocus(); setHighlightLine(errorLine); return false; } return true; }
void prepareExecution(org.eclipse.birt.data.engine.api.IQueryResults outerRts, org.mozilla.javascript.Scriptable targetScope) throws org.eclipse.birt.data.engine.core.DataException { if (isPrepared) return; this.parentScope = targetScope; dataSource = findDataSource(); if ((outerRts != null) && (outerRts instanceof org.eclipse.birt.data.engine.impl.IQueryService)) { outerResults = ((org.eclipse.birt.data.engine.impl.IQueryService) (outerRts)); if (outerResults.isClosed()) { throw new org.eclipse.birt.data.engine.core.DataException(org.eclipse.birt.data.engine.i18n.ResourceConstants.RESULT_CLOSED); } this.nestedLevel = outerResults.getNestedLevel(); org.eclipse.birt.data.engine.impl.IExecutorHelper helper = outerResults.getExecutorHelper(); this.setParentExecutorHelper(helper); } dataSet = newDataSetRuntime(); assert (dataSet) != null; openDataSource(); dataSet.beforeOpen(); odiQuery = createOdiQuery(); odiQuery.setDistinctValueFlag(dataSet.needDistinctValue()); odiQuery.setExprProcessor(new org.eclipse.birt.data.engine.expression.ExpressionProcessor(dataSet)); if ((dataSet.getDesign()) != null) { odiQuery.setRowFetchLimit(dataSet.getDesign().getRowFetchLimit()); } populateOdiQuery(); prepareOdiQuery(); isPrepared = true; }
private void initPageBuffer(org.eclipse.birt.report.engine.content.impl.PageContent pageContent) { org.eclipse.birt.report.engine.ir.MasterPageDesign pageDesign = ((org.eclipse.birt.report.engine.ir.MasterPageDesign) (pageContent.getGenerateBy())); org.eclipse.birt.report.engine.ir.Report report = pageContent.getReportContent().getDesign(); if (((((pageDesign.getOnPageStart()) != null) || ((pageDesign.getOnPageEnd()) != null)) || ((report.getOnPageStart()) != null)) || ((report.getOnPageEnd()) != null)) { bufferAllContents = true; } else { bufferAllContents = false; } this.contents.clear(); this.pageContent = pageContent; }
private boolean checkExtensions(java.lang.String fileName) { for (int i = 0; i < (org.eclipse.birt.report.designer.ui.dialogs.ImageBuilder.IMAGE_TYPES.length); i++) { if (fileName.toLowerCase().endsWith(org.eclipse.birt.report.designer.ui.dialogs.ImageBuilder.IMAGE_TYPES[i])) { return true; } } return false; }
protected org.eclipse.birt.report.engine.nLayout.area.impl.SplitResult _split(int height, boolean force) throws org.eclipse.birt.core.exception.BirtException { if ((children.size()) == 0) { if ((isPageBreakBeforeAvoid()) && (!force)) { updateChildrenPosition(); return SplitResult.BEFORE_AVOID_WITH_NULL; } else { updateChildrenPosition(); return SplitResult.SUCCEED_WITH_NULL; } } org.eclipse.birt.report.engine.nLayout.area.impl.BlockContainerArea newContainer = null; int status = SplitResult.SPLIT_BEFORE_AVOID_WITH_NULL; int cheight = getContentHeight(height); java.util.ListIterator iter = children.listIterator(); int contentHeight = 0; java.util.ArrayList result = new java.util.ArrayList(); org.eclipse.birt.report.engine.nLayout.area.impl.ContainerArea current = null; org.eclipse.birt.report.engine.nLayout.area.impl.ContainerArea previous = null; while (iter.hasNext()) { previous = current; current = ((org.eclipse.birt.report.engine.nLayout.area.impl.ContainerArea) (iter.next())); int ah = current.getAllocatedHeight(); contentHeight += ah; if ((contentHeight <= cheight) && (current.finished)) { result.add(current); continue; } else { contentHeight -= ah; int childSplitHeight = cheight - contentHeight; org.eclipse.birt.report.engine.nLayout.area.impl.SplitResult splitResult = current.split(childSplitHeight, (force && (!(isValidResult(result))))); if ((splitResult.status) == (SplitResult.SPLIT_SUCCEED_WITH_PART)) { org.eclipse.birt.report.engine.nLayout.area.impl.ContainerArea splitChildArea = splitResult.getResult(); result.add(splitChildArea); status = SplitResult.SPLIT_SUCCEED_WITH_PART; contentHeight += splitChildArea.getAllocatedHeight(); break; } else if ((splitResult.status) == (SplitResult.SPLIT_BEFORE_AVOID_WITH_NULL)) { if (force) { if ((result.size()) > 0) { status = SplitResult.SPLIT_SUCCEED_WITH_PART; } } break; } else if ((splitResult.status) == (SplitResult.SPLIT_SUCCEED_WITH_NULL)) { if (isValidResult(result)) { if (force) { status = SplitResult.SPLIT_SUCCEED_WITH_PART; break; } else { if (previous.isPageBreakAfterAvoid()) { status = SplitResult.SPLIT_BEFORE_AVOID_WITH_NULL; break; } else { status = SplitResult.SPLIT_SUCCEED_WITH_PART; break; } } } else { if (force) { status = SplitResult.SPLIT_SUCCEED_WITH_PART; break; } else { if (isPageBreakBeforeAvoid()) { return SplitResult.BEFORE_AVOID_WITH_NULL; } else { return SplitResult.SUCCEED_WITH_NULL; } } } } } } if ((result.size()) == (children.size())) { status = SplitResult.SPLIT_SUCCEED_WITH_PART; } if ((!force) && (status == (SplitResult.SPLIT_BEFORE_AVOID_WITH_NULL))) { if ((result.size()) == 0) { return SplitResult.BEFORE_AVOID_WITH_NULL; } iter.previous(); while (iter.hasPrevious()) { current = ((org.eclipse.birt.report.engine.nLayout.area.impl.ContainerArea) (iter.previous())); int ah = current.getAllocatedHeight(); org.eclipse.birt.report.engine.nLayout.area.impl.SplitResult splitResult = current.splitLines(1); if ((splitResult.status) == (SplitResult.SPLIT_BEFORE_AVOID_WITH_NULL)) { result.remove(current); contentHeight -= ah; continue; } else if ((splitResult.status) == (SplitResult.SPLIT_SUCCEED_WITH_PART)) { result.remove(current); org.eclipse.birt.report.engine.nLayout.area.impl.ContainerArea splitChildArea = splitResult.getResult(); contentHeight = (contentHeight - ah) + (splitChildArea.getAllocatedHeight()); result.add(splitChildArea); status = SplitResult.SPLIT_SUCCEED_WITH_PART; break; } else if ((splitResult.status) == (SplitResult.SPLIT_SUCCEED_WITH_NULL)) { result.remove(current); int preIndex = iter.previousIndex(); if (preIndex >= 0) { org.eclipse.birt.report.engine.nLayout.area.impl.ContainerArea prev = ((org.eclipse.birt.report.engine.nLayout.area.impl.ContainerArea) (children.get(preIndex))); if (prev.isPageBreakAfterAvoid()) { continue; } else { status = SplitResult.SPLIT_SUCCEED_WITH_PART; break; } } else { if (isPageBreakBeforeAvoid()) { return SplitResult.BEFORE_AVOID_WITH_NULL; } else { return SplitResult.SUCCEED_WITH_NULL; } } } } if ((result.size()) == 0) { return SplitResult.BEFORE_AVOID_WITH_NULL; } } if (status == (SplitResult.SPLIT_SUCCEED_WITH_PART)) { if ((isValidResult(result)) || force) { newContainer = getSplitArea(result, contentHeight); } else { return SplitResult.SUCCEED_WITH_NULL; } } if (newContainer != null) { addRepeatedItem(); updateChildrenPosition(); } return new org.eclipse.birt.report.engine.nLayout.area.impl.SplitResult(newContainer, status); }
public static org.eclipse.birt.report.utility.Printer getPrinter(javax.servlet.http.HttpServletRequest request) { java.lang.String printerName = org.eclipse.birt.report.utility.ParameterAccessor.getParameter(request, org.eclipse.birt.report.utility.PrintUtility.PARAM_PRINTER); org.eclipse.birt.report.utility.Printer printer = null; if (printerName != null) { java.util.List printers = org.eclipse.birt.report.utility.PrintUtility.findPrinters(); for (int i = 0; i < (printers.size()); i++) { if (printerName.equalsIgnoreCase(((org.eclipse.birt.report.utility.Printer) (printers.get(i))).getName())) { printer = ((org.eclipse.birt.report.utility.Printer) (printers.get(i))); break; } } } if (printer == null) { javax.print.PrintService service = javax.print.PrintServiceLookup.lookupDefaultPrintService(); printer = org.eclipse.birt.report.utility.PrintUtility.createPrinter(service); } if (printer != null) { java.lang.String copies = org.eclipse.birt.report.utility.ParameterAccessor.getParameter(request, org.eclipse.birt.report.utility.PrintUtility.PARAM_PRINTER_COPIES); if (copies != null) printer.setCopies(java.lang.Integer.parseInt(copies)); java.lang.String collate = org.eclipse.birt.report.utility.ParameterAccessor.getParameter(request, org.eclipse.birt.report.utility.PrintUtility.PARAM_PRINTER_COLLATE); if (collate != null) printer.setCollate(java.lang.Boolean.valueOf(collate).booleanValue()); java.lang.String duplex = org.eclipse.birt.report.utility.ParameterAccessor.getParameter(request, org.eclipse.birt.report.utility.PrintUtility.PARAM_PRINTER_DUPLEX); if (duplex != null) printer.setDuplex(java.lang.Integer.parseInt(duplex)); java.lang.String mode = org.eclipse.birt.report.utility.ParameterAccessor.getParameter(request, org.eclipse.birt.report.utility.PrintUtility.PARAM_PRINTER_MODE); if (mode != null) printer.setMode(java.lang.Integer.parseInt(mode)); java.lang.String mediaSize = org.eclipse.birt.report.utility.ParameterAccessor.getParameter(request, org.eclipse.birt.report.utility.PrintUtility.PARAM_PRINTER_MEDIASIZE); mediaSize = org.eclipse.birt.report.utility.ParameterAccessor.htmlDecode(mediaSize); if (mediaSize != null) printer.setMediaSize(mediaSize); } return printer; }
public static void resetViewSelection(final org.eclipse.gef.EditPartViewer viewer, final boolean notofyToMedia) { final java.util.List list = new java.util.ArrayList(((org.eclipse.jface.viewers.StructuredSelection) (viewer.getSelection())).toList()); boolean hasColumnOrRow = false; for (int i = 0; i < (list.size()); i++) { if (((list.get(i)) instanceof org.eclipse.birt.report.designer.internal.ui.editors.schematic.editparts.TableEditPart.DummyRowEditPart) || ((list.get(i)) instanceof org.eclipse.birt.report.designer.internal.ui.editors.schematic.editparts.TableEditPart.DummyColumnEditPart)) { hasColumnOrRow = true; break; } } if (hasColumnOrRow) { int selectionType = 0; org.eclipse.birt.report.designer.internal.ui.editors.schematic.editparts.TableEditPart part = null; int[] selectContents = new int[0]; for (int i = 0; i < (list.size()); i++) { java.lang.Object obj = list.get(i); int number = -1; if (obj instanceof org.eclipse.birt.report.designer.internal.ui.editors.schematic.editparts.TableEditPart.DummyRowEditPart) { selectionType = 0; number = ((org.eclipse.birt.report.designer.internal.ui.editors.schematic.editparts.TableEditPart.DummyRowEditPart) (obj)).getRowNumber(); } else if (obj instanceof org.eclipse.birt.report.designer.internal.ui.editors.schematic.editparts.TableEditPart.DummyColumnEditPart) { selectionType = 1; number = ((org.eclipse.birt.report.designer.internal.ui.editors.schematic.editparts.TableEditPart.DummyColumnEditPart) (obj)).getColumnNumber(); } else if (obj instanceof org.eclipse.birt.report.designer.internal.ui.editors.schematic.editparts.TableCellEditPart) { part = ((org.eclipse.birt.report.designer.internal.ui.editors.schematic.editparts.TableEditPart) (((org.eclipse.birt.report.designer.internal.ui.editors.schematic.editparts.TableCellEditPart) (obj)).getParent())); } if (number != (-1)) { int lenegth = selectContents.length; int[] temp = new int[lenegth + 1]; java.lang.System.arraycopy(selectContents, 0, temp, 0, lenegth); temp[lenegth] = number; selectContents = temp; } } if (((part == null) || ((selectContents.length) == 0)) || (!(viewer.getControl().isVisible()))) { return; } if (selectionType == 0) { part.selectRow(selectContents, notofyToMedia); } else if (selectionType == 1) { part.selectColumn(selectContents, notofyToMedia); } } else { if (viewer.getControl().isVisible()) { if (viewer instanceof org.eclipse.birt.report.designer.internal.ui.editors.parts.DeferredGraphicalViewer) ((org.eclipse.birt.report.designer.internal.ui.editors.parts.DeferredGraphicalViewer) (viewer)).setSelection(new org.eclipse.jface.viewers.StructuredSelection(list), notofyToMedia); } } }
protected static org.eclipse.birt.report.model.api.DataItemHandle performInsertParameter(org.eclipse.birt.report.model.api.ScalarParameterHandle model) throws org.eclipse.birt.report.model.api.activity.SemanticException { org.eclipse.birt.report.model.api.DataItemHandle dataHandle = org.eclipse.birt.report.designer.ui.newelement.DesignElementFactory.getInstance().newDataItem(null); org.eclipse.birt.report.model.api.elements.structures.ComputedColumn bindingColumn = org.eclipse.birt.report.model.api.StructureFactory.newComputedColumn(dataHandle, model.getName()); bindingColumn.setExpression(org.eclipse.birt.report.designer.util.DEUtil.getExpression(model)); bindingColumn.setDataType(model.getDataType()); dataHandle.addColumnBinding(bindingColumn, false); dataHandle.setResultSetColumn(bindingColumn.getName()); return dataHandle; }
public static boolean isTemplateSupported(org.eclipse.birt.report.model.core.DesignElement element) { if (element instanceof org.eclipse.birt.report.model.elements.DataSet) return true; if (element instanceof org.eclipse.birt.report.model.elements.ReportItem) { org.eclipse.birt.report.model.api.metadata.IChoiceSet choiceSet = org.eclipse.birt.report.model.metadata.MetaDataDictionary.getInstance().getChoiceSet(DesignChoiceConstants.CHOICE_TEMPLATE_ELEMENT_TYPE); assert choiceSet != null; org.eclipse.birt.report.model.api.metadata.IChoice[] choices = choiceSet.getChoices(); for (int i = 0; i < (choices.length); i++) { if (element.getDefn().getName().equalsIgnoreCase(choices[i].getName())) return true; } } return false; }
private void dropUserProperties(org.eclipse.birt.report.model.core.DesignElement obj) throws org.eclipse.birt.report.model.api.command.UserPropertyException { java.util.Collection props = obj.getLocalUserProperties(); if (props != null) { org.eclipse.birt.report.model.command.UserPropertyCommand propCmd = new org.eclipse.birt.report.model.command.UserPropertyCommand(module, obj); java.util.Iterator iter = props.iterator(); while (iter.hasNext()) { org.eclipse.birt.report.model.api.core.UserPropertyDefn prop = ((org.eclipse.birt.report.model.api.core.UserPropertyDefn) (iter.next())); propCmd.dropUserProperty(prop.getName()); } } }
public final java.util.List getAllIncludeScripts() { return getFilteredStructureList(org.eclipse.birt.report.model.api.INCLUDE_SCRIPTS_PROP, IncludeScript.FILE_NAME_MEMBER); }
public org.eclipse.birt.report.engine.extension.IReportItemExecutor createPageExecutor(long pageNumber, org.eclipse.birt.report.engine.ir.MasterPageDesign pageDesign) { org.eclipse.birt.report.engine.content.IPageContent pageContent = ((org.eclipse.birt.report.engine.content.IPageContent) (pages.get(pageDesign))); if (pageContent == null) { org.eclipse.birt.report.engine.extension.IReportItemExecutor pageExecutor = new org.eclipse.birt.report.engine.executor.MasterPageExecutor(manager, pageNumber, pageDesign); pageContent = ((org.eclipse.birt.report.engine.content.IPageContent) (pageExecutor.execute())); org.eclipse.birt.report.engine.emitter.IContentEmitter domEmitter = new org.eclipse.birt.report.engine.emitter.DOMBuilderEmitter(pageContent); org.eclipse.birt.report.engine.executor.ReportExecutorUtil.executeAll(pageExecutor, domEmitter); pageExecutor.close(); pages.put(pageDesign, pageContent); } else { pageContent.setPageNumber(pageNumber); context.setPageNumber(pageNumber); } return new org.eclipse.birt.report.engine.internal.executor.dom.DOMReportItemExecutor(pageContent, true); }
public java.util.List getResultSetsMetadata(java.lang.String docName, org.eclipse.birt.report.service.api.InputOptions options) throws org.eclipse.birt.report.service.api.ReportServiceException { org.eclipse.birt.report.engine.api.IReportDocument doc = org.eclipse.birt.report.service.ReportEngineService.getInstance().openReportDocument(getReportDesignName(options), docName); if (doc == null) { throw new org.eclipse.birt.report.service.api.ReportServiceException("There is no document file available for extracting the data."); } org.eclipse.birt.report.soapengine.api.ResultSet[] resultSetArray; try { resultSetArray = org.eclipse.birt.report.service.ReportEngineService.getInstance().getResultSets(doc); doc.close(); } catch (java.rmi.RemoteException e) { e.printStackTrace(); throw new org.eclipse.birt.report.service.api.ReportServiceException(e.getLocalizedMessage()); } if ((resultSetArray == null) || ((resultSetArray.length) <= 0)) { throw new org.eclipse.birt.report.service.api.ReportServiceException("There is no result set available for extracting the data."); } return transformResultSetArray(resultSetArray); }
public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { org.eclipse.birt.report.data.oda.jdbc.ui.dialogs.JdbcDriverManagerDialog dlg = new org.eclipse.birt.report.data.oda.jdbc.ui.dialogs.JdbcDriverManagerDialog(getShell()); manageButton.setEnabled(false); testButton.setEnabled(false); if ((dlg.open()) == (org.eclipse.jface.window.Window.OK)) { org.eclipse.swt.custom.BusyIndicator.showWhile(((getShell()) == null ? null : getShell().getDisplay()), new java.lang.Runnable() { public void run() { okPressedProcess(); } }); } updateTestButton(); manageButton.setEnabled(true); }
public int getInt(int index) throws org.eclipse.datatools.connectivity.oda.OdaException { assertNotNull(rs); try { return rs.getInt(index); } catch (java.sql.SQLException e) { try { if ((rs.getMetaData().getColumnType(index)) == (java.sql.Types.BIT)) { if (rs.getString(index).equals("t")) return 1; else if (rs.getString(index).equals("f")) return 0; } throw new org.eclipse.birt.report.data.oda.jdbc.JDBCException(org.eclipse.birt.report.data.oda.i18n.ResourceConstants.RESULTSET_CANNOT_GET_INT_VALUE, e); } catch (java.sql.SQLException ex) { throw new org.eclipse.birt.report.data.oda.jdbc.JDBCException(org.eclipse.birt.report.data.oda.i18n.ResourceConstants.RESULTSET_CANNOT_GET_INT_VALUE, e); } } }
public org.eclipse.swt.graphics.Image getImage() { java.lang.String imageSource = getImageHandle().getSource(); if (DesignChoiceConstants.IMAGE_REF_TYPE_EMBED.equalsIgnoreCase(imageSource)) { return org.eclipse.birt.report.designer.util.ImageManager.getInstance().getEmbeddedImage(getImageHandle().getModuleHandle(), getImageHandle().getImageName()); } else if (DesignChoiceConstants.IMAGE_REF_TYPE_FILE.equalsIgnoreCase(imageSource)) { if (org.eclipse.birt.report.model.api.util.URIUtil.isValidResourcePath(getImageHandle().getURI())) { return org.eclipse.birt.report.designer.util.ImageManager.getInstance().getImage(getHandle().getModuleHandle(), org.eclipse.birt.report.model.api.util.URIUtil.getLocalPath(removeQuoteString(getImageHandle().getURI()))); } else { return org.eclipse.birt.report.designer.util.ImageManager.getInstance().getImage(getHandle().getModuleHandle(), removeQuoteString(getImageHandle().getURI())); } } else if (DesignChoiceConstants.IMAGE_REF_TYPE_URL.equalsIgnoreCase(imageSource)) { return org.eclipse.birt.report.designer.util.ImageManager.getInstance().getURIImage(getHandle().getModuleHandle(), removeQuoteString(getImageHandle().getURI())); } else if (DesignChoiceConstants.IMAGE_REF_TYPE_EXPR.equalsIgnoreCase(imageSource)) { } return null; }
private void checkValueLabel(org.eclipse.birt.chart.computation.LegendItemHints lih) { if ((sed) != (lih.getSeriesDefinition())) { if ((laiValue) != null) { laiValue.dispose(); } org.eclipse.birt.chart.model.component.Label laValue = org.eclipse.birt.chart.model.component.impl.LabelImpl.copyInstance(lih.getSeriesDefinition().getDesignTimeSeries().getLabel()); laValue.setEllipsis(1); this.laiValue = new org.eclipse.birt.chart.computation.LegendBuilder.LabelItem(lgData.xs, lgData.rtc, laValue, lgData.maxWrappingSize); } }
private java.util.Collection createDynamicSelectionChoices(java.lang.String dataSetName, java.lang.String labelStmt, java.lang.String valueStmt, java.lang.String dataType, int limit, boolean fixedOrder) { java.util.ArrayList choices = new java.util.ArrayList(); org.eclipse.birt.report.model.api.ReportDesignHandle report = ((org.eclipse.birt.report.model.api.ReportDesignHandle) (this.runnable.getDesignHandle())); org.eclipse.birt.report.model.api.DataSetHandle dataSet = report.findDataSet(dataSetName); if (dataSet != null) { try { org.eclipse.birt.report.engine.data.IDataEngine dataEngine = executionContext.getDataEngine(); org.eclipse.birt.data.engine.api.DataEngine dteDataEngine = getDataEngine(); dataEngine.defineDataSet(dataSet); org.eclipse.birt.data.engine.api.querydefn.ScriptExpression labelExpr = null; if ((labelStmt != null) && ((labelStmt.length()) > 0)) { labelExpr = new org.eclipse.birt.data.engine.api.querydefn.ScriptExpression(labelStmt); } org.eclipse.birt.data.engine.api.querydefn.ScriptExpression valueExpr = new org.eclipse.birt.data.engine.api.querydefn.ScriptExpression(valueStmt); org.eclipse.birt.data.engine.api.querydefn.QueryDefinition queryDefn = new org.eclipse.birt.data.engine.api.querydefn.QueryDefinition(); queryDefn.setDataSetName(dataSetName); java.util.Iterator paramIter = dataSet.paramBindingsIterator(); while (paramIter.hasNext()) { org.eclipse.birt.report.model.api.ParamBindingHandle binding = ((org.eclipse.birt.report.model.api.ParamBindingHandle) (paramIter.next())); java.lang.String paramName = binding.getParamName(); java.lang.String paramExpr = binding.getExpression(); queryDefn.getInputParamBindings().add(new org.eclipse.birt.data.engine.api.querydefn.InputParameterBinding(paramName, new org.eclipse.birt.data.engine.api.querydefn.ScriptExpression(paramExpr))); } java.lang.String labelColumnName = org.eclipse.birt.report.engine.api.impl.GetParameterDefinitionTask.LABEL_PREFIX; java.lang.String valueColumnName = org.eclipse.birt.report.engine.api.impl.GetParameterDefinitionTask.VALUE_PREFIX; if (labelExpr != null) { queryDefn.addResultSetExpression(labelColumnName, labelExpr); } queryDefn.addResultSetExpression(valueColumnName, valueExpr); org.eclipse.birt.data.engine.api.querydefn.GroupDefinition groupDef = new org.eclipse.birt.data.engine.api.querydefn.GroupDefinition(); groupDef.setKeyColumn(valueColumnName); queryDefn.addGroup(groupDef); queryDefn.setAutoBinding(true); org.eclipse.birt.data.engine.api.IPreparedQuery query = dteDataEngine.prepare(queryDefn); org.eclipse.birt.data.engine.api.IQueryResults result = query.execute(executionContext.getSharedScope()); org.eclipse.birt.data.engine.api.IResultIterator iter = result.getResultIterator(); int count = 0; while (iter.next()) { java.lang.String label = null; if (labelExpr != null) { label = iter.getString(labelColumnName); } java.lang.Object value = iter.getValue(valueColumnName); choices.add(new org.eclipse.birt.report.engine.api.impl.GetParameterDefinitionTask.SelectionChoice(label, convertToType(value, dataType))); count++; if ((limit != 0) && (count >= limit)) { break; } iter.skipToEnd(1); } } catch (org.eclipse.birt.core.exception.BirtException ex) { ex.printStackTrace(); } } if (!fixedOrder) java.util.Collections.sort(choices, new org.eclipse.birt.report.engine.api.impl.SelectionChoiceComparator(true)); return choices; }
public java.lang.Object evaluate(java.lang.String expr, java.lang.String name, int lineNo) { if (expr != null) { try { return scriptContext.eval(expr, name, lineNo); } catch (java.lang.Throwable e) { log.log(java.util.logging.Level.SEVERE, e.getMessage(), e); addException(new org.eclipse.birt.report.engine.api.EngineException(org.eclipse.birt.report.engine.i18n.MessageConstants.SCRIPT_EVALUATION_ERROR, expr, e)); } } return null; }
public static void startEngineLogging(java.lang.String directoryName, java.util.logging.Level logLevel) { org.eclipse.birt.report.engine.api.impl.EngineLogger.dirName = directoryName; java.util.logging.Logger logger = java.util.logging.Logger.getLogger(org.eclipse.birt.report.engine.api.impl.EngineLogger.BIRT_NAME_SPACE); assert logger != null; if (logLevel != null) logger.setLevel(logLevel); if ((logger.getLevel()) != (java.util.logging.Level.OFF)) { org.eclipse.birt.report.engine.api.impl.EngineLogger.createLogFile(logger); } }
protected org.eclipse.birt.report.engine.content.IContent loadFullContent(org.eclipse.birt.report.engine.content.IContent root, org.eclipse.birt.report.engine.internal.document.v2.ReportContentReaderV2 reader) { org.eclipse.birt.report.engine.emitter.IContentEmitter emitter = new org.eclipse.birt.report.engine.emitter.DOMBuilderEmitter(root); org.eclipse.birt.report.engine.content.IContent parent = root; initializeContent(root); openQuery(root); try { org.eclipse.birt.report.engine.content.IContent next = reader.readContent(); while (next != null) { if ((next.getParent()) == parent) { initializeContent(next); startContent(next, emitter); parent = next; next = reader.readContent(); } else { if (parent == root) { closeQuery(root); return next; } endContent(parent, emitter); parent = ((org.eclipse.birt.report.engine.content.IContent) (parent.getParent())); } } } catch (java.io.IOException ex) { } while (parent != root) { endContent(parent, emitter); parent = ((org.eclipse.birt.report.engine.content.IContent) (parent.getParent())); } closeQuery(root); return null; }
public boolean canProcessWithWarning() { try { java.lang.String type = getDataTypeDisplayName(org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.adapterToModelDataType(org.eclipse.birt.report.designer.data.ui.util.DataUtil.getAggregationManager().getAggregation(getFunctionByDisplayName(cmbFunction.getText()).getName()).getDataType())); if ((type != null) && (!(type.equals(cmbType.getText())))) { if (!(canProcessFunctionTypeError(cmbFunction.getText(), cmbType.getText(), type))) { return false; } } org.eclipse.birt.data.engine.api.aggregation.IAggrFunction function = getFunctionByDisplayName(cmbFunction.getText()); if (function != null) { org.eclipse.birt.report.model.api.DataSetHandle dataSetHandle = org.eclipse.birt.report.designer.util.DEUtil.getFirstDataSet(this.bindingHolder); java.util.List<org.eclipse.birt.report.model.api.elements.structures.ResultSetColumn> columnList = null; if (dataSetHandle != null) { org.eclipse.birt.report.model.api.CachedMetaDataHandle meta = dataSetHandle.getCachedMetaDataHandle(); if (meta == null) { org.eclipse.birt.report.designer.data.ui.dataset.DataSetUIUtil.updateColumnCache(dataSetHandle); meta = dataSetHandle.getCachedMetaDataHandle(); } columnList = meta.getResultSet().getListValue(); } java.util.List<org.eclipse.birt.report.model.api.ComputedColumnHandle> bindingList = org.eclipse.birt.report.designer.util.DEUtil.getAllColumnBindingList(this.bindingHolder, true); loop : for (org.eclipse.birt.data.engine.api.aggregation.IParameterDefn param : function.getParameterDefn()) { if (param.isDataField()) { java.lang.String expression = getControlValue(paramsMap.get(param.getName())); if (expression != null) { if (bindingList != null) { java.lang.String bindingName = org.eclipse.birt.core.data.ExpressionUtil.getColumnBindingName(expression); if (bindingName != null) for (org.eclipse.birt.report.model.api.ComputedColumnHandle bindingHandle : bindingList) { if (bindingHandle.getName().equals(bindingName)) { if (!(param.supportDataType(org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.adaptModelDataType(bindingHandle.getDataType())))) { if (!(canProcessParamTypeError(expression, param.getDisplayName()))) { return false; } continue loop; } } } } if (columnList != null) { java.lang.String columnName = org.eclipse.birt.core.data.ExpressionUtil.getColumnName(expression); if (columnName != null) for (org.eclipse.birt.report.model.api.elements.structures.ResultSetColumn column : columnList) { if (column.getColumnName().equals(columnName)) { if (!(param.supportDataType(org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.adaptModelDataType(column.getDataType())))) { if (!(canProcessParamTypeError(expression, param.getDisplayName()))) { return false; } continue loop; } } } } } } } } } catch (org.eclipse.birt.core.exception.BirtException e) { } return true; }
public float getWordWidth(java.lang.String word) { if (((bf) == null) || (word == null)) return 0; return bf.getWidthPoint(word, fontSize); }
public void setTextIndent(org.eclipse.birt.report.engine.content.ITextContent content) { if ((((currentIP) == 0) && (!(setIndent))) && (content != null)) { org.eclipse.birt.report.engine.content.IStyle contentStyle = content.getComputedStyle(); currentIP = getDimensionValue(contentStyle.getProperty(StyleConstants.STYLE_TEXT_INDENT), maxAvaWidth); setIndent = true; } }
public void updatePreview(org.eclipse.birt.chart.model.attribute.FormatSpecifier fs) { if ((!(isInEditor)) && (fs == null)) { lblPreview.setText(org.eclipse.birt.chart.ui.swt.composites.FormatSpecifierPreview.SAMPLE_NONE); getParent().layout(); return; } if ((!(isInEditor)) || ((dataType) == null)) { if ((fs instanceof org.eclipse.birt.chart.model.attribute.DateFormatSpecifier) || (fs instanceof org.eclipse.birt.chart.model.attribute.JavaDateFormatSpecifier)) { dataType = FormatSpecifierComposite.DATA_TYPE_DATETIME; } else if (((fs instanceof org.eclipse.birt.chart.model.attribute.NumberFormatSpecifier) || (fs instanceof org.eclipse.birt.chart.model.attribute.JavaNumberFormatSpecifier)) || (fs instanceof org.eclipse.birt.chart.model.attribute.FractionNumberFormatSpecifier)) { dataType = FormatSpecifierComposite.DATA_TYPE_NUMBER; } else { dataType = FormatSpecifierComposite.DATA_TYPE_NONE; } } if (FormatSpecifierComposite.DATA_TYPE_NONE.equals(dataType)) { lblPreview.setText(org.eclipse.birt.chart.ui.swt.composites.FormatSpecifierPreview.SAMPLE_NA); } else if (FormatSpecifierComposite.DATA_TYPE_NUMBER.equals(dataType)) { if (fs == null) { lblPreview.setText(org.eclipse.birt.chart.ui.swt.composites.FormatSpecifierPreview.SAMPLE_NUMBER.toString()); } else { try { lblPreview.setText(org.eclipse.birt.chart.computation.ValueFormatter.format(org.eclipse.birt.chart.ui.swt.composites.FormatSpecifierPreview.SAMPLE_NUMBER, fs, com.ibm.icu.util.ULocale.getDefault(), null)); } catch (org.eclipse.birt.chart.exception.ChartException e) { e.printStackTrace(); } } } else if (FormatSpecifierComposite.DATA_TYPE_DATETIME.equals(dataType)) { if (fs == null) { lblPreview.setText(org.eclipse.birt.chart.ui.swt.composites.FormatSpecifierPreview.SAMPLE_DATETIME.getTime().toString()); } else { try { lblPreview.setText(org.eclipse.birt.chart.computation.ValueFormatter.format(org.eclipse.birt.chart.ui.swt.composites.FormatSpecifierPreview.SAMPLE_DATETIME, fs, com.ibm.icu.util.ULocale.getDefault(), null)); } catch (org.eclipse.birt.chart.exception.ChartException e) { e.printStackTrace(); } } } getParent().layout(); }
public void run() throws org.eclipse.birt.report.engine.api.EngineException { if (!(validateParameters())) { throw new org.eclipse.birt.report.engine.api.EngineException(org.eclipse.birt.report.engine.i18n.MessageConstants.INVALID_PARAMETER_EXCEPTION); } org.eclipse.birt.report.engine.emitter.EngineEmitterServices services = new org.eclipse.birt.report.engine.emitter.EngineEmitterServices(this); services.setRenderOption(renderOption); org.eclipse.birt.report.engine.api.EngineConfig config = engine.getConfig(); if (config != null) services.setEmitterConfig(engine.getConfig().getEmitterConfigs()); services.setRenderContext(renderContext); services.setReportRunnable(runnable); if ((runValues) != null) executionContext.getParams().putAll(runValues); executionContext.getConfigs().putAll(runnable.getTestConfig()); executionContext.getConfigs().putAll(java.lang.System.getProperties()); executionContext.setRenderOption(renderOption); java.lang.String format = renderOption.getOutputFormat(); if ((format == null) || ((format.length()) == 0)) { renderOption.setOutputFormat("html"); format = "html"; } else if ((((renderOption) != null) && (format.equalsIgnoreCase("fo"))) && (((org.eclipse.birt.report.engine.api.FORenderOption) (renderOption)).getTailoredForFOP())) { format = "fop"; } if (!(org.eclipse.birt.report.engine.extension.internal.ExtensionManager.getInstance().getEmitterExtensions().containsKey(format))) { log.log(java.util.logging.Level.SEVERE, MessageConstants.FORMAT_NOT_SUPPORTED_EXCEPTION, format); throw new org.eclipse.birt.report.engine.api.EngineException(org.eclipse.birt.report.engine.i18n.MessageConstants.FORMAT_NOT_SUPPORTED_EXCEPTION, format); } org.eclipse.birt.report.engine.emitter.IReportEmitter emitter = org.eclipse.birt.report.engine.extension.internal.ExtensionManager.getInstance().createEmitter(format); if (emitter == null) { log.log(java.util.logging.Level.SEVERE, "Report engine can not create {0} emitter.", format); throw new org.eclipse.birt.report.engine.api.EngineException(org.eclipse.birt.report.engine.i18n.MessageConstants.CANNOT_CREATE_EMITTER_EXCEPTION); } emitter.initialize(services); org.eclipse.birt.report.engine.executor.ReportExecutor executor = new org.eclipse.birt.report.engine.executor.ReportExecutor(executionContext, emitter); try { executor.execute(((org.eclipse.birt.report.engine.api.impl.ReportRunnable) (runnable)).getReport(), inputValues); } catch (java.lang.Exception ex) { log.log(java.util.logging.Level.SEVERE, "An error happened while running the report. Cause:", ex); } catch (java.lang.OutOfMemoryError err) { log.log(java.util.logging.Level.SEVERE, "An OutOfMemory error happened while running the report."); throw err; } }
public static org.eclipse.birt.report.model.api.simpleapi.IDesignElement getElement(org.eclipse.birt.report.model.api.DesignElementHandle element) { if (element == null) return null; if (element instanceof org.eclipse.birt.report.model.api.ReportDesignHandle) return new org.eclipse.birt.report.model.simpleapi.ReportDesign(((org.eclipse.birt.report.model.api.ReportDesignHandle) (element))); if (!(element instanceof org.eclipse.birt.report.model.api.ReportElementHandle)) return null; if (element instanceof org.eclipse.birt.report.model.api.DataItemHandle) return new org.eclipse.birt.report.model.simpleapi.DataItem(((org.eclipse.birt.report.model.api.DataItemHandle) (element))); if (element instanceof org.eclipse.birt.report.model.api.GridHandle) return new org.eclipse.birt.report.model.simpleapi.Grid(((org.eclipse.birt.report.model.api.GridHandle) (element))); if (element instanceof org.eclipse.birt.report.model.api.ImageHandle) return new org.eclipse.birt.report.model.simpleapi.Image(((org.eclipse.birt.report.model.api.ImageHandle) (element))); if (element instanceof org.eclipse.birt.report.model.api.LabelHandle) return new org.eclipse.birt.report.model.simpleapi.Label(((org.eclipse.birt.report.model.api.LabelHandle) (element))); if (element instanceof org.eclipse.birt.report.model.api.ListHandle) return new org.eclipse.birt.report.model.simpleapi.List(((org.eclipse.birt.report.model.api.ListHandle) (element))); if (element instanceof org.eclipse.birt.report.model.api.ListGroupHandle) return new org.eclipse.birt.report.model.simpleapi.ListGroup(((org.eclipse.birt.report.model.api.ListGroupHandle) (element))); if (element instanceof org.eclipse.birt.report.model.api.TableHandle) return new org.eclipse.birt.report.model.simpleapi.Table(((org.eclipse.birt.report.model.api.TableHandle) (element))); if (element instanceof org.eclipse.birt.report.model.api.TableGroupHandle) return new org.eclipse.birt.report.model.simpleapi.TableGroup(((org.eclipse.birt.report.model.api.TableGroupHandle) (element))); if (element instanceof org.eclipse.birt.report.model.api.TextDataHandle) return new org.eclipse.birt.report.model.simpleapi.DynamicText(((org.eclipse.birt.report.model.api.TextDataHandle) (element))); if (element instanceof org.eclipse.birt.report.model.api.TextItemHandle) return new org.eclipse.birt.report.model.simpleapi.TextItem(((org.eclipse.birt.report.model.api.TextItemHandle) (element))); if (element instanceof org.eclipse.birt.report.model.api.CellHandle) return new org.eclipse.birt.report.model.simpleapi.Cell(((org.eclipse.birt.report.model.api.CellHandle) (element))); if (element instanceof org.eclipse.birt.report.model.api.RowHandle) return new org.eclipse.birt.report.model.simpleapi.Row(((org.eclipse.birt.report.model.api.RowHandle) (element))); if (element instanceof org.eclipse.birt.report.model.api.ColumnHandle) return new org.eclipse.birt.report.model.simpleapi.Column(((org.eclipse.birt.report.model.api.ColumnHandle) (element))); if (element instanceof org.eclipse.birt.report.model.api.MasterPageHandle) { return new org.eclipse.birt.report.model.simpleapi.MasterPage(((org.eclipse.birt.report.model.api.MasterPageHandle) (element))); } if (element instanceof org.eclipse.birt.report.model.api.FilterConditionElementHandle) { return new org.eclipse.birt.report.model.simpleapi.FilterConditionElement(((org.eclipse.birt.report.model.api.FilterConditionElementHandle) (element))); } if (element instanceof org.eclipse.birt.report.model.api.SortElementHandle) { return new org.eclipse.birt.report.model.simpleapi.SortElement(((org.eclipse.birt.report.model.api.SortElementHandle) (element))); } if (element instanceof org.eclipse.birt.report.model.api.ExtendedItemHandle) { org.eclipse.birt.report.model.api.simpleapi.IReportItem item = null; try { org.eclipse.birt.report.model.api.extension.IReportItem extensionItem = ((org.eclipse.birt.report.model.api.ExtendedItemHandle) (element)).getReportItem(); if (extensionItem != null) item = extensionItem.getSimpleElement(); } catch (org.eclipse.birt.report.model.api.extension.ExtendedElementException e) { } if (item == null) item = new org.eclipse.birt.report.model.simpleapi.ExtendedItem(((org.eclipse.birt.report.model.api.ExtendedItemHandle) (element))); return item; } return new org.eclipse.birt.report.model.simpleapi.ReportElement(((org.eclipse.birt.report.model.api.ReportElementHandle) (element))); }
public void startPage(org.eclipse.birt.report.engine.content.IPageContent page) { (pageNo)++; if (((pageNo) > 1) && ((outputMasterPageContent) == false)) { writer.openTag("hr"); writer.closeTag("hr"); } if ((pageNo) > 1) { writer.writeCode(" <div style=\"visibility: hidden; height: 0px; overflow: hidden; page-break-after: always;\">page separator</div>"); } boolean fixedReport = HTMLRenderOption.LAYOUT_PREFERENCE_FIXED.equals(layoutPreference); java.lang.StringBuffer styleBuffer = new java.lang.StringBuffer(); writer.openTag(HTMLTags.TAG_TABLE); writer.attribute("cellpadding", "0"); styleBuffer.append(" border-collapse: collapse; empty-cells: show;"); if ((page != null) && (outputMasterPageContent)) { htmlEmitter.buildPageStyle(page, styleBuffer); if (fixedReport) { org.eclipse.birt.report.engine.ir.DimensionType width = getPageWidth(page); if (width != null) { styleBuffer.append(" width:"); styleBuffer.append(width.toString()); styleBuffer.append(";"); } } else { styleBuffer.append(" width:100%;"); } if (!(pageFooterFloatFlag)) { org.eclipse.birt.report.engine.ir.DimensionType height = getPageHeight(page); if (height != null) { styleBuffer.append(" height:"); styleBuffer.append(height.toString()); styleBuffer.append(";"); } } if (fixedReport) { styleBuffer.append(" overflow: hidden;"); styleBuffer.append(" table-layout:fixed;"); } } else { styleBuffer.append("width:100%;"); } writer.attribute(HTMLTags.ATTR_STYLE, styleBuffer.toString()); if ((page != null) && (outputMasterPageContent)) { if (outputMasterPageMargins) { outputColumn(page.getMarginLeft()); } writer.openTag(HTMLTags.TAG_COL); writer.closeTag(HTMLTags.TAG_COL); if (outputMasterPageMargins) { outputColumn(page.getMarginLeft()); outputVMargin(page.getMarginTop()); } if (showPageHeader(page)) { writer.openTag(HTMLTags.TAG_TR); if (outputMasterPageMargins) { outputHMargin(page.getMarginLeft()); } outputPageBand(page, page.getPageHeader()); if (outputMasterPageMargins) { outputHMargin(page.getMarginRight()); } writer.closeTag(HTMLTags.TAG_TR); } } writer.openTag(HTMLTags.TAG_TR); if (!(pageFooterFloatFlag)) { writer.attribute(HTMLTags.ATTR_STYLE, "height:100%;"); } if (((page != null) && (outputMasterPageContent)) && (outputMasterPageMargins)) { outputHMargin(page.getMarginLeft()); } writer.openTag(HTMLTags.TAG_TD); writer.attribute("valign", "top"); if (htmlRtLFlag) { writer.attribute(HTMLTags.ATTR_HTML_DIR, CSSConstants.CSS_RTL_VALUE); } }
public static int compare(java.lang.Object obj1, java.lang.Object obj2) throws org.eclipse.birt.data.engine.core.DataException { if ((obj1 == null) || (obj2 == null)) { if ((obj1 == null) && (obj2 != null)) return -1; else if ((obj1 != null) && (obj2 == null)) return 1; else return 0; } try { if (org.eclipse.birt.data.engine.script.ScriptEvalUtil.MiscUtil.isSameType(obj1, obj2)) { if (obj1 instanceof java.lang.Boolean) { if (obj1.equals(obj2)) return 0; java.lang.Boolean bool = ((java.lang.Boolean) (obj1)); if (bool.equals(java.lang.Boolean.TRUE)) return 1; else return -1; } else if (obj1 instanceof java.lang.Comparable) { return ((java.lang.Comparable) (obj1)).compareTo(obj2); } else { return obj1.toString().compareTo(obj2.toString()); } } else if ((org.eclipse.birt.data.engine.script.ScriptEvalUtil.MiscUtil.isNumericOrString(obj1)) && (org.eclipse.birt.data.engine.script.ScriptEvalUtil.MiscUtil.isNumericOrString(obj2))) { try { return org.eclipse.birt.core.data.DataTypeUtil.toDouble(obj1).compareTo(org.eclipse.birt.core.data.DataTypeUtil.toDouble(obj2)); } catch (java.lang.Exception e) { return org.eclipse.birt.core.data.DataTypeUtil.toString(obj1).compareTo(org.eclipse.birt.core.data.DataTypeUtil.toString(obj2)); } } else if ((org.eclipse.birt.data.engine.script.ScriptEvalUtil.MiscUtil.isDateOrString(obj1)) && (org.eclipse.birt.data.engine.script.ScriptEvalUtil.MiscUtil.isDateOrString(obj2))) { try { return org.eclipse.birt.core.data.DataTypeUtil.toDate(obj1).compareTo(org.eclipse.birt.core.data.DataTypeUtil.toDate(obj2)); } catch (java.lang.Exception e) { return org.eclipse.birt.core.data.DataTypeUtil.toString(obj1).compareTo(org.eclipse.birt.core.data.DataTypeUtil.toString(obj2)); } } else if ((org.eclipse.birt.data.engine.script.ScriptEvalUtil.MiscUtil.isBooleanOrString(obj1)) && (org.eclipse.birt.data.engine.script.ScriptEvalUtil.MiscUtil.isBooleanOrString(obj2))) { try { return org.eclipse.birt.core.data.DataTypeUtil.toBoolean(obj1).compareTo(org.eclipse.birt.core.data.DataTypeUtil.toBoolean(obj2)); } catch (java.lang.Exception e) { return org.eclipse.birt.core.data.DataTypeUtil.toString(obj1).compareTo(org.eclipse.birt.core.data.DataTypeUtil.toString(obj2)); } } else throw new org.eclipse.birt.data.engine.core.DataException(org.eclipse.birt.data.engine.i18n.ResourceConstants.INVALID_TYPE_IN_EXPR); } catch (org.eclipse.birt.core.exception.BirtException e) { throw new org.eclipse.birt.data.engine.core.DataException(org.eclipse.birt.data.engine.i18n.ResourceConstants.DATATYPEUTIL_ERROR, e); } }
public org.eclipse.datatools.connectivity.oda.IResultSet executeQuery() throws org.eclipse.datatools.connectivity.oda.OdaException { org.eclipse.birt.report.data.oda.jdbc.CallStatement.logger.logp(java.util.logging.Level.FINE, org.eclipse.birt.report.data.oda.jdbc.CallStatement.class.getName(), "executeQuery", "CallableStatement.executeQuery( )"); if ((this.cachedResultSet) != null) { org.eclipse.datatools.connectivity.oda.IResultSet ret = this.cachedResultSet; this.cachedResultSet = null; return ret; } try { if (!(maxRowsUpToDate)) { try { assertNotNull(callStat); callStat.setMaxRows(maxrows); } catch (java.sql.SQLException e1) { } maxRowsUpToDate = true; } registerOutputParameter(); java.sql.ResultSet rs = this.callStat.executeQuery(); if (rs != null) return new org.eclipse.birt.report.data.oda.jdbc.ResultSet(rs); java.sql.ResultSet resultSet = getOutputParamResultSet(); if (resultSet != null) return new org.eclipse.birt.report.data.oda.jdbc.ResultSet(resultSet); else return new org.eclipse.birt.report.data.oda.jdbc.SPResultSet(null); } catch (java.sql.SQLException e) { throw new org.eclipse.birt.report.data.oda.jdbc.JDBCException(org.eclipse.birt.report.data.oda.i18n.ResourceConstants.RESULTSET_CANNOT_RETURN, e); } }
public boolean equals(java.lang.Object obj) { if ((obj == null) || (!(obj instanceof org.eclipse.birt.report.engine.css.engine.value.StringValue))) { return false; } org.eclipse.birt.report.engine.css.engine.value.StringValue v = ((org.eclipse.birt.report.engine.css.engine.value.StringValue) (obj)); if ((unitType) != (v.unitType)) { return false; } if ((value) != null) { return value.equals(v.value); } else { if ((v.value) == null) { return true; } } return false; }
public final int getTickCount() throws org.eclipse.birt.chart.exception.ChartException { if ((this.oStepNumber) != null) { if ((bCategoryScale) || (((iType) & (NUMERICAL)) != (NUMERICAL))) { org.eclipse.birt.chart.computation.withaxes.AutoScale.logger.log(new org.eclipse.birt.chart.exception.ChartException(org.eclipse.birt.chart.plugin.ChartEnginePlugin.ID, org.eclipse.birt.chart.exception.ChartException.GENERATION, "exception.unsupported.step.number", org.eclipse.birt.chart.engine.i18n.Messages.getResourceBundle(rtc.getULocale()))); } else { return (this.oStepNumber.intValue()) + 1; } } int nTicks = 2; if (isCategoryScale()) { if ((dsiData) != null) { nTicks = (dsiData.size()) + 1; if (!(bTickBetweenCategories)) { nTicks++; } } } else if (((iType) & (NUMERICAL)) == (NUMERICAL)) { if (((iType) & (LINEAR)) == (LINEAR)) { double dMax = asDouble(oMaximum).doubleValue(); double dMin = asDouble(oMinimum).doubleValue(); double dStep = asDouble(oStep).doubleValue(); if (!(org.eclipse.birt.chart.util.ChartUtil.mathEqual(dMax, dMin))) { double lNTicks = (java.lang.Math.ceil((((dMax - dMin) / dStep) - 0.5))) + 1; if ((lNTicks > (org.eclipse.birt.chart.computation.withaxes.AutoScale.TICKS_MAX)) || (lNTicks < 2)) { if (lNTicks > (org.eclipse.birt.chart.computation.withaxes.AutoScale.TICKS_MAX)) { nTicks = org.eclipse.birt.chart.computation.withaxes.AutoScale.TICKS_MAX; } else { nTicks = 2; } dStep = (dMax / (nTicks - 1)) - (dMin / (nTicks - 1)); checkValible(dStep, org.eclipse.birt.chart.engine.i18n.Messages.getString("AutoScale.ValueName.StepSize")); dStep = org.eclipse.birt.chart.util.ChartUtil.alignWithInt(dStep, true); oStep = new java.lang.Double(dStep); } else { nTicks = ((int) (lNTicks)); } } else nTicks = 5; } else if (((iType) & (LOGARITHMIC)) == (LOGARITHMIC)) { double dMax = asDouble(oMaximum).doubleValue(); double dMin = asDouble(oMinimum).doubleValue(); double dStep = asDouble(oStep).doubleValue(); double dMaxLog = (java.lang.Math.log(dMax)) / (LOG_10); double dMinLog = (java.lang.Math.log(dMin)) / (LOG_10); double dStepLog = (java.lang.Math.log(dStep)) / (LOG_10); nTicks = ((int) (java.lang.Math.ceil(((dMaxLog - dMinLog) / dStepLog)))) + 1; } } else if (((iType) & (DATE_TIME)) == (DATE_TIME)) { final org.eclipse.birt.chart.util.CDateTime cdt1 = ((org.eclipse.birt.chart.util.CDateTime) (oMinimum)); final org.eclipse.birt.chart.util.CDateTime cdt2 = ((org.eclipse.birt.chart.util.CDateTime) (oMaximum)); double diff = (org.eclipse.birt.chart.util.CDateTime.computeDifference(cdt2, cdt1, asInteger(oUnit))) / (asInteger(oStep)); nTicks = ((int) (java.lang.Math.round(diff))) + 1; } else { throw new org.eclipse.birt.chart.exception.ChartException(org.eclipse.birt.chart.plugin.ChartEnginePlugin.ID, org.eclipse.birt.chart.exception.ChartException.GENERATION, "exception.unknown.axis.type.tick.computations", org.eclipse.birt.chart.engine.i18n.Messages.getResourceBundle(rtc.getULocale())); } if (nTicks > 10000) { nTicks = 10000; } if (nTicks < 2) { nTicks = 2; } return nTicks; }
private org.eclipse.swt.graphics.Image getImage() { if ((getDefaultHandle()) instanceof org.eclipse.birt.report.model.api.LabelHandle) { return org.eclipse.birt.report.designer.ui.ReportPlatformUIImages.getImage(IReportGraphicConstants.ICON_ELEMENT_LABEL); } if ((getDefaultHandle()) instanceof org.eclipse.birt.report.model.api.TextItemHandle) { return org.eclipse.birt.report.designer.ui.ReportPlatformUIImages.getImage(IReportGraphicConstants.ICON_ELEMENT_TEXT); } if ((getDefaultHandle()) instanceof org.eclipse.birt.report.model.api.DataItemHandle) { return org.eclipse.birt.report.designer.ui.ReportPlatformUIImages.getImage(IReportGraphicConstants.ICON_ELEMENT_DATA); } if ((getDefaultHandle()) instanceof org.eclipse.birt.report.model.api.TextDataHandle) { return org.eclipse.birt.report.designer.ui.ReportPlatformUIImages.getImage(IReportGraphicConstants.ICON_ELEMENT_TEXTDATA); } if ((getDefaultHandle()) instanceof org.eclipse.birt.report.model.api.ImageHandle) { return org.eclipse.birt.report.designer.ui.ReportPlatformUIImages.getImage(IReportGraphicConstants.ICON_ELEMENT_IMAGE); } if ((getDefaultHandle()) instanceof org.eclipse.birt.report.model.api.TableHandle) { return org.eclipse.birt.report.designer.ui.ReportPlatformUIImages.getImage(IReportGraphicConstants.ICON_ELEMENT_TABLE); } if ((getDefaultHandle()) instanceof org.eclipse.birt.report.model.api.GridHandle) { return org.eclipse.birt.report.designer.ui.ReportPlatformUIImages.getImage(IReportGraphicConstants.ICON_ELEMENT_GRID); } if ((getDefaultHandle()) instanceof org.eclipse.birt.report.model.api.ListHandle) { return org.eclipse.birt.report.designer.ui.ReportPlatformUIImages.getImage(IReportGraphicConstants.ICON_ELEMENT_LIST); } if ((getDefaultHandle()) instanceof org.eclipse.birt.report.model.api.ExtendedItemHandle) { return org.eclipse.birt.report.designer.ui.ReportPlatformUIImages.getImage(getDefaultHandle()); } return null; }
public void setDataSourceAndDataSet(org.eclipse.birt.data.engine.api.IBaseDataSourceDesign dataSourceDesign, org.eclipse.birt.data.engine.api.IBaseDataSetDesign dataSetDesign, java.util.Collection parameterHints, java.util.Map appContext) { this.dataSourceDesign = dataSourceDesign; this.dataSetDesign = dataSetDesign; this.parameterHints = parameterHints; this.appContext = appContext; setRowFetchLimit(); }
public boolean compose() { boolean hasMore; while ((hasMore = hasMore()) && (!(this.needPause()))) { handleNext(); } return hasMore; }
private java.util.List doValidate(org.eclipse.birt.report.model.core.Module module, org.eclipse.birt.report.model.elements.ExtendedItem toValidate) { java.util.List list = new java.util.ArrayList(); if ((toValidate.getExtendedElement()) == null) { if (!((module instanceof org.eclipse.birt.report.model.elements.Library) && ((((org.eclipse.birt.report.model.elements.Library) (module)).getHost()) != null))) { try { toValidate.initializeReportItem(module); } catch (org.eclipse.birt.report.model.api.extension.ExtendedElementException e) { return list; } } } if ((toValidate.getExtendedElement()) != null) { java.util.List exceptions = toValidate.getExtendedElement().validate(); if (exceptions != null) list.addAll(exceptions); } return list; }
public boolean differs(org.eclipse.birt.report.model.api.ComputedColumnHandle binding) { if (isAggregate()) { if (!(strEquals(binding.getName(), txtName.getText()))) return true; if (!(strEquals(binding.getDisplayName(), txtDisplayName.getText()))) return true; if (!(strEquals(binding.getDataType(), getDataType()))) return true; if (!(strEquals(binding.getExpression(), cmbDataField.getText()))) return true; if (!(strEquals(binding.getAggregateFunction(), getFunctionByDisplayName(cmbFunction.getText()).getName()))) return true; if (!(strEquals(binding.getFilterExpression(), txtFilter.getText()))) return true; if ((btnTable.getSelection()) == ((binding.getAggregateOn()) != null)) return true; } else { if (!(strEquals(txtName.getText(), binding.getName()))) return true; if (!(strEquals(txtDisplayName.getText(), binding.getDisplayName()))) return true; if (!(strEquals(getDataType(), binding.getDataType()))) return true; if (!(strEquals(txtExpression.getText(), binding.getExpression()))) return true; } return false; }
public java.lang.Object getSummaryValue() { if ((count) <= 1) return null; java.lang.Number ret = null; try { ret = calculator.divide(calculator.subtract(calculator.multiply(count, squareSum), calculator.multiply(sum, sum)), calculator.multiply(count, calculator.subtract(count, 1))); return calculator.add(0, java.lang.Math.sqrt(ret.doubleValue())); } catch (org.eclipse.birt.data.engine.core.DataException e) { return null; } }
public boolean performDrop(java.lang.Object data) { if ((data instanceof java.lang.Object[]) && ((((java.lang.Object[]) (data))[0]) instanceof org.eclipse.birt.report.model.api.ThemeHandle)) { if ((getCurrentTarget()) instanceof org.eclipse.birt.report.model.api.ModuleHandle) { if (org.eclipse.birt.report.designer.internal.ui.util.Policy.TRACING_DND_DRAG) { java.lang.System.out.println(("DND >> Dropped. Operation: Apply Theme, Target: " + (getCurrentTarget()))); } return ApplyTheme(((org.eclipse.birt.report.model.api.ThemeHandle) (((java.lang.Object[]) (data))[0])), ((org.eclipse.birt.report.model.api.ModuleHandle) (getCurrentTarget()))); } else { return false; } } if ((getCurrentOperation()) == (org.eclipse.swt.dnd.DND.DROP_MOVE)) { if (org.eclipse.birt.report.designer.internal.ui.util.Policy.TRACING_DND_DRAG) { java.lang.System.out.println(("DND >> Dropped. Operation: Copy, Target: " + (getCurrentTarget()))); } return moveData(data, getCurrentTarget()); } else if (((getCurrentOperation()) == (org.eclipse.swt.dnd.DND.DROP_COPY)) || ((getCurrentOperation()) == (org.eclipse.swt.dnd.DND.DROP_LINK))) { if (org.eclipse.birt.report.designer.internal.ui.util.Policy.TRACING_DND_DRAG) { java.lang.System.out.println(("DND >> Dropped. Operation: Move, Target: " + (getCurrentTarget()))); } return copyData(data, getCurrentTarget()); } return false; }
public OdaDataSourceAdapter(org.eclipse.birt.report.model.api.OdaDataSourceHandle source, org.mozilla.javascript.Scriptable propBindingScope, org.eclipse.birt.data.engine.api.DataEngineContext dtCotnext) throws org.eclipse.birt.core.exception.BirtException { super(source.getQualifiedName()); bindingScope = propBindingScope; org.eclipse.birt.report.data.adapter.internal.adapter.DataAdapterUtil.adaptBaseDataSource(source, this); java.lang.String driverName = source.getExtensionID(); if ((driverName == null) || ((driverName.length()) == 0)) { throw new org.eclipse.birt.report.data.adapter.api.AdapterException(org.eclipse.birt.report.data.adapter.i18n.ResourceConstants.DATASOURCE_EXID_ERROR, source.getName()); } setExtensionID(driverName); java.util.Map staticProps = org.eclipse.birt.report.data.adapter.internal.adapter.DataAdapterUtil.getExtensionProperties(source, source.getExtensionPropertyDefinitionList()); if ((staticProps != null) && (!(staticProps.isEmpty()))) { java.util.Iterator propNamesItr = staticProps.keySet().iterator(); while (propNamesItr.hasNext()) { java.lang.String propName = ((java.lang.String) (propNamesItr.next())); assert propName != null; java.lang.String propValue; java.lang.String bindingExpr = source.getPropertyBinding(propName); if (((((bindingScope) != null) && (bindingExpr != null)) && ((bindingExpr.length()) > 0)) && ((org.eclipse.birt.report.data.adapter.api.DataSessionContext.MODE_UPDATE) != (dtCotnext.getMode()))) { java.lang.Object value = org.eclipse.birt.core.script.JavascriptEvalUtil.evaluateScript(null, bindingScope, bindingExpr, ScriptExpression.defaultID, 0); propValue = (value == null) ? null : value.toString(); } else { propValue = ((java.lang.String) (staticProps.get(propName))); } addPublicProperty(propName, propValue); } } java.util.Iterator elmtIter = source.privateDriverPropertiesIterator(); if (elmtIter != null) { while (elmtIter.hasNext()) { org.eclipse.birt.report.model.api.ExtendedPropertyHandle modelProp = ((org.eclipse.birt.report.model.api.ExtendedPropertyHandle) (elmtIter.next())); addPrivateProperty(modelProp.getName(), modelProp.getValue()); } } addPropertyConfigurationId(this); }
void createCustomControl(org.eclipse.swt.widgets.Composite parent) { org.eclipse.swt.widgets.Composite content = new org.eclipse.swt.widgets.Composite(parent, org.eclipse.swt.SWT.NONE); org.eclipse.swt.layout.GridLayout layout = new org.eclipse.swt.layout.GridLayout(); layout.numColumns = 3; layout.verticalSpacing = 10; layout.marginBottom = 10; content.setLayout(layout); org.eclipse.swt.layout.GridData gridData; new org.eclipse.swt.widgets.Label(content, org.eclipse.swt.SWT.RIGHT).setText(org.eclipse.birt.report.data.oda.jdbc.ui.JdbcPlugin.getResourceString("wizard.label.driverClass")); driverChooserCombo = new org.eclipse.jface.viewers.ComboViewer(content, org.eclipse.swt.SWT.DROP_DOWN); gridData = new org.eclipse.swt.layout.GridData(); gridData.horizontalSpan = 2; gridData.horizontalAlignment = org.eclipse.swt.SWT.FILL; driverChooserCombo.getControl().setLayoutData(gridData); java.util.List driverList = org.eclipse.birt.report.data.oda.jdbc.ui.util.JdbcToolKit.getJdbcDriversFromODADir(JDBC_EXTENSION_ID); driverChooserCombo.setContentProvider(new org.eclipse.jface.viewers.IStructuredContentProvider() { public java.lang.Object[] getElements(java.lang.Object inputElement) { if (inputElement != null) { return ((java.util.ArrayList) (inputElement)).toArray(); } return new org.eclipse.birt.report.data.oda.jdbc.ui.util.JDBCDriverInformation[]{ }; } public void dispose() { } public void inputChanged(org.eclipse.jface.viewers.Viewer viewer, java.lang.Object oldInput, java.lang.Object newInput) { } }); driverChooserCombo.setLabelProvider(new org.eclipse.jface.viewers.LabelProvider() { public java.lang.String getText(java.lang.Object inputElement) { org.eclipse.birt.report.data.oda.jdbc.ui.util.JDBCDriverInformation info = ((org.eclipse.birt.report.data.oda.jdbc.ui.util.JDBCDriverInformation) (inputElement)); return info.getDisplayString(); } }); driverChooserCombo.setInput(sortDriverList(driverList)); driverChooserCombo.addSelectionChangedListener(new org.eclipse.jface.viewers.ISelectionChangedListener() { private java.lang.String driverClassName; public void selectionChanged(org.eclipse.jface.viewers.SelectionChangedEvent event) { org.eclipse.jface.viewers.StructuredSelection selection = ((org.eclipse.jface.viewers.StructuredSelection) (event.getSelection())); org.eclipse.birt.report.data.oda.jdbc.ui.util.JDBCDriverInformation info = ((org.eclipse.birt.report.data.oda.jdbc.ui.util.JDBCDriverInformation) (selection.getFirstElement())); java.lang.String className = (info != null) ? info.getDriverClassName() : org.eclipse.birt.report.data.oda.jdbc.ui.profile.JDBCSelectionPageHelper.EMPTY_STRING; if ((className.equalsIgnoreCase(driverClassName)) == true) return; driverClassName = className; if (info != null) { if ((info.getUrlFormat()) != null) { jdbcUrl.setText(info.getUrlFormat()); } else { jdbcUrl.setText(org.eclipse.birt.report.data.oda.jdbc.ui.profile.JDBCSelectionPageHelper.EMPTY_STRING); } } jndiName.setText(org.eclipse.birt.report.data.oda.jdbc.ui.profile.JDBCSelectionPageHelper.EMPTY_STRING); userName.setText(org.eclipse.birt.report.data.oda.jdbc.ui.profile.JDBCSelectionPageHelper.EMPTY_STRING); password.setText(org.eclipse.birt.report.data.oda.jdbc.ui.profile.JDBCSelectionPageHelper.EMPTY_STRING); updateTestButton(); } }); new org.eclipse.swt.widgets.Label(content, org.eclipse.swt.SWT.RIGHT).setText(org.eclipse.birt.report.data.oda.jdbc.ui.JdbcPlugin.getResourceString("wizard.label.url")); jdbcUrl = new org.eclipse.swt.widgets.Text(content, org.eclipse.swt.SWT.BORDER); gridData = new org.eclipse.swt.layout.GridData(); gridData.horizontalSpan = 2; gridData.horizontalAlignment = org.eclipse.swt.SWT.FILL; gridData.grabExcessHorizontalSpace = true; jdbcUrl.setLayoutData(gridData); new org.eclipse.swt.widgets.Label(content, org.eclipse.swt.SWT.RIGHT).setText(org.eclipse.birt.report.data.oda.jdbc.ui.JdbcPlugin.getResourceString("wizard.label.username")); userName = new org.eclipse.swt.widgets.Text(content, org.eclipse.swt.SWT.BORDER); gridData = new org.eclipse.swt.layout.GridData(); gridData.horizontalSpan = 2; gridData.horizontalAlignment = org.eclipse.swt.SWT.FILL; userName.setLayoutData(gridData); new org.eclipse.swt.widgets.Label(content, org.eclipse.swt.SWT.RIGHT).setText(org.eclipse.birt.report.data.oda.jdbc.ui.JdbcPlugin.getResourceString("wizard.label.password")); password = new org.eclipse.swt.widgets.Text(content, ((org.eclipse.swt.SWT.BORDER) | (org.eclipse.swt.SWT.PASSWORD))); gridData = new org.eclipse.swt.layout.GridData(); gridData.horizontalSpan = 2; gridData.horizontalAlignment = org.eclipse.swt.SWT.FILL; password.setLayoutData(gridData); java.lang.String jndiLabel = "&JNDI URL:"; new org.eclipse.swt.widgets.Label(content, org.eclipse.swt.SWT.RIGHT).setText(jndiLabel); jndiName = new org.eclipse.swt.widgets.Text(content, org.eclipse.swt.SWT.BORDER); gridData = new org.eclipse.swt.layout.GridData(); gridData.horizontalSpan = 2; gridData.horizontalAlignment = org.eclipse.swt.SWT.FILL; jndiName.setLayoutData(gridData); new org.eclipse.swt.widgets.Label(content, org.eclipse.swt.SWT.NONE); manageButton = new org.eclipse.swt.widgets.Button(content, org.eclipse.swt.SWT.PUSH); manageButton.setText(org.eclipse.birt.report.data.oda.jdbc.ui.JdbcPlugin.getResourceString("wizard.label.manageDriver")); testButton = new org.eclipse.swt.widgets.Button(content, org.eclipse.swt.SWT.PUSH); testButton.setText(org.eclipse.birt.report.data.oda.jdbc.ui.JdbcPlugin.getResourceString("wizard.label.testConnection")); testButton.setLayoutData(new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.CENTER)); addControlListeners(); updateTestButton(); verifyJDBCProperties(); org.eclipse.birt.report.data.oda.jdbc.ui.util.Utility.setSystemHelp(content, IHelpConstants.CONEXT_ID_DATASOURCE_JDBC); }
private void createDropDownComponent(int iXLoc, int iYLoc) { if (!(bEnabled)) { return; } int iShellHeight = 170; int iShellWidth = 190; if (bGradientEnabled) { iShellHeight += 30; } if (bImageEnabled) { iShellHeight += 30; } if (bAutoEnabled) { iShellHeight += 30; } if (bTransparentEnabled) { iShellHeight += 30; } if (bPositiveNegativeEnabled) { iShellHeight += 30; } org.eclipse.swt.widgets.Shell shell = new org.eclipse.swt.widgets.Shell(this.getShell(), org.eclipse.swt.SWT.NO_FOCUS); shell.setLayout(new org.eclipse.swt.layout.FillLayout()); shell.setSize(iShellWidth, iShellHeight); if (((getStyle()) & (org.eclipse.swt.SWT.RIGHT_TO_LEFT)) != 0) { iXLoc -= iShellWidth; } shell.setLocation(iXLoc, iYLoc); shell.addShellListener(new org.eclipse.swt.events.ShellAdapter() { public void shellClosed(org.eclipse.swt.events.ShellEvent e) { clearColorSelection(); } }); cmpDropDown = new org.eclipse.swt.widgets.Composite(shell, org.eclipse.swt.SWT.NO_FOCUS); org.eclipse.swt.layout.GridLayout glDropDown = new org.eclipse.swt.layout.GridLayout(); glDropDown.marginHeight = 2; glDropDown.marginWidth = 2; glDropDown.horizontalSpacing = 1; glDropDown.verticalSpacing = 4; cmpDropDown.setLayout(glDropDown); if ((org.eclipse.birt.chart.ui.swt.composites.FillChooserComposite.colorArray) == null) { org.eclipse.birt.chart.ui.swt.composites.FillChooserComposite.colorArray = createColorMap(getDisplay()); } org.eclipse.birt.chart.ui.swt.composites.FillChooserComposite.ColorSelectionCanvas cnv = new org.eclipse.birt.chart.ui.swt.composites.FillChooserComposite.ColorSelectionCanvas(cmpDropDown, org.eclipse.swt.SWT.BORDER, org.eclipse.birt.chart.ui.swt.composites.FillChooserComposite.colorArray); org.eclipse.swt.layout.GridData gdCnv = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_BOTH); gdCnv.widthHint = 190; gdCnv.heightHint = 110; cnv.setLayoutData(gdCnv); cnv.addListener(SWT.Traverse, this); cnv.addListener(SWT.FocusOut, this); if ((this.fCurrent) instanceof org.eclipse.birt.chart.model.attribute.ColorDefinition) { cnv.setColor(new org.eclipse.swt.graphics.Color(this.getDisplay(), ((org.eclipse.birt.chart.model.attribute.ColorDefinition) (fCurrent)).getRed(), ((org.eclipse.birt.chart.model.attribute.ColorDefinition) (fCurrent)).getGreen(), ((org.eclipse.birt.chart.model.attribute.ColorDefinition) (fCurrent)).getBlue())); } cmpButtons = new org.eclipse.swt.widgets.Composite(cmpDropDown, org.eclipse.swt.SWT.NO_FOCUS); org.eclipse.swt.layout.GridLayout glButtons = new org.eclipse.swt.layout.GridLayout(); glButtons.marginHeight = 3; glButtons.marginWidth = 4; glButtons.horizontalSpacing = 1; glButtons.verticalSpacing = 4; glButtons.numColumns = 2; cmpButtons.setLayout(glButtons); org.eclipse.swt.layout.GridData gdButtons = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_HORIZONTAL); cmpButtons.setLayoutData(gdButtons); org.eclipse.swt.layout.GridLayout glTransparency = new org.eclipse.swt.layout.GridLayout(); glTransparency.numColumns = 1; glTransparency.horizontalSpacing = 5; glTransparency.verticalSpacing = 3; glTransparency.marginHeight = 4; glTransparency.marginWidth = 0; org.eclipse.swt.widgets.Composite cmpTransparency = new org.eclipse.swt.widgets.Composite(cmpButtons, ((org.eclipse.swt.SWT.NONE) | (org.eclipse.swt.SWT.NO_FOCUS))); org.eclipse.swt.layout.GridData gdTransparency = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_BOTH); gdTransparency.horizontalSpan = 2; cmpTransparency.setLayoutData(gdTransparency); cmpTransparency.setLayout(glTransparency); if (bTransparencySliderEnable) { lblTransparency = new org.eclipse.swt.widgets.Label(cmpTransparency, org.eclipse.swt.SWT.NONE); org.eclipse.swt.layout.GridData gdLBLTransparency = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_HORIZONTAL); gdLBLTransparency.horizontalIndent = 2; lblTransparency.setLayoutData(gdLBLTransparency); lblTransparency.setText(org.eclipse.birt.chart.ui.extension.i18n.Messages.getString("FillChooserComposite.Lbl.Opacity")); srTransparency = new org.eclipse.swt.widgets.Slider(cmpTransparency, ((org.eclipse.swt.SWT.HORIZONTAL) | (org.eclipse.swt.SWT.NO_FOCUS))); org.eclipse.swt.layout.GridData gdTransparent = new org.eclipse.swt.layout.GridData(((org.eclipse.swt.layout.GridData.VERTICAL_ALIGN_BEGINNING) | (org.eclipse.swt.layout.GridData.FILL_HORIZONTAL))); gdTransparent.horizontalSpan = 2; srTransparency.setLayoutData(gdTransparent); if ((fCurrent) == null) { srTransparency.setValues(0, 0, 256, 1, 1, 10); srTransparency.setEnabled(false); } else { int iValue = 0; if ((fCurrent) instanceof org.eclipse.birt.chart.model.attribute.ColorDefinition) { iValue = ((org.eclipse.birt.chart.model.attribute.ColorDefinition) (fCurrent)).getTransparency(); srTransparency.setValues(iValue, 0, 256, 1, 1, 10); } else if ((fCurrent) instanceof org.eclipse.birt.chart.model.attribute.Gradient) { iValue = ((org.eclipse.birt.chart.model.attribute.Gradient) (fCurrent)).getTransparency(); srTransparency.setValues(iValue, 0, 256, 1, 1, 10); } else { srTransparency.setEnabled(false); } } lblTransparency.setText(new java.text.MessageFormat(org.eclipse.birt.chart.ui.extension.i18n.Messages.getString("FillChooserComposite.Lbl.Opacity")).format(new java.lang.Object[]{ java.lang.Integer.valueOf(srTransparency.getSelection()) })); srTransparency.setToolTipText(java.lang.String.valueOf(srTransparency.getSelection())); srTransparency.addSelectionListener(this); srTransparency.addListener(SWT.FocusOut, this); srTransparency.addListener(SWT.KeyDown, this); srTransparency.addListener(SWT.Traverse, this); } final int BUTTON_HEIGHTHINT = 28; if (this.bTransparentEnabled) { btnReset = new org.eclipse.swt.widgets.Button(cmpButtons, org.eclipse.swt.SWT.NONE); org.eclipse.swt.layout.GridData gdReset = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_BOTH); gdReset.heightHint = BUTTON_HEIGHTHINT; gdReset.horizontalSpan = 2; btnReset.setLayoutData(gdReset); btnReset.setText(org.eclipse.birt.chart.ui.extension.i18n.Messages.getString("FillChooserComposite.Lbl.Transparent")); btnReset.addSelectionListener(this); btnReset.addListener(SWT.FocusOut, this); btnReset.addListener(SWT.KeyDown, this); btnReset.addListener(SWT.Traverse, this); } if (this.bAutoEnabled) { btnAuto = new org.eclipse.swt.widgets.Button(cmpButtons, org.eclipse.swt.SWT.NONE); org.eclipse.swt.layout.GridData gdGradient = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_BOTH); gdGradient.heightHint = BUTTON_HEIGHTHINT; gdGradient.horizontalSpan = 2; btnAuto.setLayoutData(gdGradient); btnAuto.setText(org.eclipse.birt.chart.ui.extension.i18n.Messages.getString("FillChooserComposite.Lbl.Auto")); btnAuto.addSelectionListener(this); btnAuto.addListener(SWT.FocusOut, this); btnAuto.addListener(SWT.KeyDown, this); btnAuto.addListener(SWT.Traverse, this); } if (this.bGradientEnabled) { btnGradient = new org.eclipse.swt.widgets.Button(cmpButtons, org.eclipse.swt.SWT.NONE); org.eclipse.swt.layout.GridData gdGradient = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_BOTH); gdGradient.heightHint = BUTTON_HEIGHTHINT; gdGradient.horizontalSpan = 2; btnGradient.setLayoutData(gdGradient); btnGradient.setText(org.eclipse.birt.chart.ui.extension.i18n.Messages.getString("FillChooserComposite.Lbl.Gradient")); btnGradient.addSelectionListener(this); btnGradient.addListener(SWT.FocusOut, this); btnGradient.addListener(SWT.KeyDown, this); btnGradient.addListener(SWT.Traverse, this); } btnCustom = new org.eclipse.swt.widgets.Button(cmpButtons, org.eclipse.swt.SWT.NONE); org.eclipse.swt.layout.GridData gdCustom = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_BOTH); gdCustom.heightHint = BUTTON_HEIGHTHINT; gdCustom.horizontalSpan = 2; btnCustom.setLayoutData(gdCustom); btnCustom.setText(org.eclipse.birt.chart.ui.extension.i18n.Messages.getString("FillChooserComposite.Lbl.CustomColor")); btnCustom.addSelectionListener(this); btnCustom.addListener(SWT.FocusOut, this); btnCustom.addListener(SWT.KeyDown, this); btnCustom.addListener(SWT.Traverse, this); if (this.bImageEnabled) { btnImage = new org.eclipse.swt.widgets.Button(cmpButtons, org.eclipse.swt.SWT.NONE); org.eclipse.swt.layout.GridData gdImage = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_BOTH); gdImage.heightHint = BUTTON_HEIGHTHINT; gdImage.horizontalSpan = 2; btnImage.setLayoutData(gdImage); btnImage.setText(org.eclipse.birt.chart.ui.extension.i18n.Messages.getString("FillChooserComposite.Lbl.Image")); btnImage.addSelectionListener(this); btnImage.addListener(SWT.FocusOut, this); btnImage.addListener(SWT.KeyDown, this); btnImage.addListener(SWT.Traverse, this); } if (this.bPositiveNegativeEnabled) { btnPN = new org.eclipse.swt.widgets.Button(cmpButtons, org.eclipse.swt.SWT.NONE); org.eclipse.swt.layout.GridData gdPN = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_BOTH); gdPN.heightHint = BUTTON_HEIGHTHINT; gdPN.horizontalSpan = 2; btnPN.setLayoutData(gdPN); btnPN.setText(org.eclipse.birt.chart.ui.extension.i18n.Messages.getString("FillChooserComposite.Lbl.PositiveNegative")); btnPN.addSelectionListener(this); btnPN.addListener(SWT.FocusOut, this); btnPN.addListener(SWT.KeyDown, this); btnPN.addListener(SWT.Traverse, this); } shell.pack(); shell.layout(); shell.open(); }
public org.eclipse.birt.report.engine.content.IContent execute() { if (executed) { return content; } context.setExecutingMasterPage(true); context.setPageNumber(pageNumber); executed = true; try { long pageNo = pageNumber; org.eclipse.birt.report.engine.internal.document.PageHintReader hintReader = manager.getPageHintReader(); long totalPage = hintReader.getTotalPage(); if ((pageNumber) > totalPage) { pageNo = totalPage; } org.eclipse.birt.report.engine.presentation.IPageHint hint = hintReader.getPageHint(pageNo); pageOffset = hint.getOffset(); org.eclipse.birt.report.engine.internal.document.v3.CachedReportContentReaderV3 pageReader = manager.getPageReader(); content = pageReader.loadContent(pageOffset); org.eclipse.birt.report.engine.api.InstanceID iid = content.getInstanceID(); long id = iid.getComponentID(); masterPage = ((org.eclipse.birt.report.engine.ir.SimpleMasterPageDesign) (context.getReport().getReportItemByID(id))); content.setGenerateBy(masterPage); org.eclipse.birt.report.engine.content.IPageContent pageContent = ((org.eclipse.birt.report.engine.content.IPageContent) (content)); pageContent.setPageNumber(pageNumber); return content; } catch (java.io.IOException ex) { context.addException(new org.eclipse.birt.report.engine.api.EngineException(ex.getLocalizedMessage(), ex)); } return null; }
public DataEngineImpl(org.eclipse.birt.data.engine.api.DataEngineContext context) { assert context != null; org.eclipse.birt.data.engine.impl.DataEngineImpl.logger.entering(org.eclipse.birt.data.engine.impl.DataEngineImpl.class.getName(), "DataEngineImpl", context); this.context = context; this.sharedScope = context.getJavaScriptScope(); org.mozilla.javascript.Context cx = org.mozilla.javascript.Context.enter(); if ((this.sharedScope) == null) { this.sharedScope = new org.mozilla.javascript.ImporterTopLevel(cx); } new org.eclipse.birt.core.script.CoreJavaScriptInitializer().initialize(cx, sharedScope); org.mozilla.javascript.Context.exit(); compiler = new org.eclipse.birt.data.engine.impl.ExpressionCompiler(); org.eclipse.birt.data.engine.impl.DataEngineImpl.logger.exiting(org.eclipse.birt.data.engine.impl.DataEngineImpl.class.getName(), "DataEngineImpl"); org.eclipse.birt.data.engine.impl.DataEngineImpl.logger.log(java.util.logging.Level.INFO, "Data Engine starts up"); }
protected boolean layoutChildren() { repeatHeader(); boolean hasNext = super.layoutChildren(); if (!(isOutput)) { startContent(); } tableEmitter.resolveAll(); tableEmitter.flush(); return hasNext; }
public java.lang.Object load() { if ((input) == null) return ""; org.eclipse.birt.report.model.api.DesignElementHandle handle = ((org.eclipse.birt.report.model.api.DesignElementHandle) (org.eclipse.birt.report.designer.util.DEUtil.getInputFirstElement(input))); if (handle != null) return org.eclipse.osgi.util.TextProcessor.process(((org.eclipse.birt.report.model.api.ModuleHandle) (handle)).getFileName(), org.eclipse.birt.report.designer.internal.ui.views.attributes.provider.PathDescriptorProvider.PATH_DELIMETER); return ""; }
public final boolean zoomOut() { if (bStepFixed) return false; if (((((java.lang.Number) (oStep)).doubleValue()) >= (java.lang.Double.POSITIVE_INFINITY)) || ((((java.lang.Number) (oStep)).doubleValue()) >= (java.lang.Double.MAX_VALUE))) return false; if (((iType) & (NUMERICAL)) == (NUMERICAL)) { if (((iType) & (LOGARITHMIC)) == (LOGARITHMIC)) { final double dStep = asDouble(oStep).doubleValue(); if (((java.lang.Math.log(dStep)) / (LOG_10)) >= 1) { oStep = new java.lang.Double((dStep * 10)); } else { final int n = org.eclipse.birt.chart.computation.withaxes.AutoScale.iaLogarithmicDeltas.length; for (int i = 0; i < n; i++) { if (((int) (dStep)) == (org.eclipse.birt.chart.computation.withaxes.AutoScale.iaLogarithmicDeltas[i])) { oStep = new java.lang.Double(org.eclipse.birt.chart.computation.withaxes.AutoScale.iaLogarithmicDeltas[(i + 1)]); return true; } } return false; } } else if (((iType) & (LINEAR)) == (LINEAR)) { double dStep = asDouble(oStep).doubleValue(); if (bIntegralZoom) { double dPower = (java.lang.Math.log(dStep)) / (LOG_10); if (dPower < 0) { dPower = java.lang.Math.floor(dPower); } dPower = java.lang.Math.pow(10, dPower); dStep /= dPower; dStep = java.lang.Math.round(dStep); int n = org.eclipse.birt.chart.computation.withaxes.AutoScale.iaLinearDeltas.length; int i = 0; for (; i < n; i++) { if (((double) (dStep)) == (org.eclipse.birt.chart.computation.withaxes.AutoScale.iaLinearDeltas[i])) { if (i < (n - 1)) { dStep = (org.eclipse.birt.chart.computation.withaxes.AutoScale.iaLinearDeltas[(i + 1)]) * dPower; if (dStep > 1) dStep = java.lang.Math.round(dStep); } else { dPower *= 10; dStep = (org.eclipse.birt.chart.computation.withaxes.AutoScale.iaLinearDeltas[0]) * dPower; if (dStep > 1) dStep = java.lang.Math.round(dStep); } break; } } if (i == n) { throw new java.lang.RuntimeException(new org.eclipse.birt.chart.exception.ChartException(org.eclipse.birt.chart.plugin.ChartEnginePlugin.ID, org.eclipse.birt.chart.exception.ChartException.COMPUTATION, "exception.step.zoom.out", new java.lang.Object[]{ new java.lang.Double(dStep) }, java.util.ResourceBundle.getBundle(Messages.ENGINE, rtc.getLocale()))); } if ((((java.lang.Number) (oStep)).doubleValue()) == dStep) { return false; } oStep = new java.lang.Double(dStep); } else { dStep *= 2; oStep = new java.lang.Double(dStep); } } } else if (((iType) & (DATE_TIME)) == (DATE_TIME)) { int[] ia = null; int iStep = asInteger(oStep); int iUnit = asInteger(oUnit); for (int icu = 0; icu < (org.eclipse.birt.chart.computation.withaxes.AutoScale.iaCalendarUnits.length); icu++) { if (iUnit == (org.eclipse.birt.chart.computation.withaxes.AutoScale.iaCalendarUnits[icu])) { ia = org.eclipse.birt.chart.computation.withaxes.AutoScale.iaCalendarDeltas[icu]; if (ia == null) { iStep++; oStep = new java.lang.Integer(iStep); } else { int i = 0; int n = ia.length; for (; i < n; i++) { if ((ia[i]) == iStep) { break; } } if (i == (n - 1)) { ia = org.eclipse.birt.chart.computation.withaxes.AutoScale.iaCalendarDeltas[(icu + 1)]; oUnit = new java.lang.Integer(org.eclipse.birt.chart.computation.withaxes.AutoScale.iaCalendarUnits[(icu + 1)]); if (ia == null) { oStep = new java.lang.Integer(1); return false; } i = -1; } oStep = new java.lang.Integer(ia[(i + 1)]); break; } } } } return true; }
public void visitParameterGroup(org.eclipse.birt.report.model.api.ParameterGroupHandle handle) { org.eclipse.birt.report.engine.api.impl.ParameterGroupDefn paramGroup = new org.eclipse.birt.report.engine.api.impl.ParameterGroupDefn(); paramGroup.setHandle(handle); paramGroup.setParameterType(IParameterDefnBase.PARAMETER_GROUP); paramGroup.setName(handle.getName()); paramGroup.setDisplayName(handle.getDisplayName()); paramGroup.setDisplayNameKey(handle.getDisplayNameKey()); paramGroup.setHelpText(handle.getHelpText()); paramGroup.setHelpTextKey(handle.getHelpTextKey()); paramGroup.setPromptText(handle.getPromptText()); paramGroup.setPromptTextKey(handle.getPromptTextKey()); org.eclipse.birt.report.model.api.SlotHandle parameters = handle.getParameters(); java.util.List properties = handle.getUserProperties(); for (int i = 0; i < (properties.size()); i++) { org.eclipse.birt.report.model.api.core.UserPropertyDefn p = ((org.eclipse.birt.report.model.api.core.UserPropertyDefn) (properties.get(i))); paramGroup.addUserProperty(p.getName(), handle.getProperty(p.getName())); } int size = parameters.getCount(); for (int n = 0; n < size; n++) { apply(parameters.get(n)); if ((currentElement) != null) { paramGroup.addParameter(((org.eclipse.birt.report.engine.api.IParameterDefnBase) (currentElement))); } } currentElement = paramGroup; }
protected void addCommonPages(org.eclipse.birt.report.model.api.DataSetHandle ds) { if (ds instanceof org.eclipse.birt.report.model.api.ScriptDataSetHandle) { addScriptOutputColumnDefnPage(); addParametersPage(); addFiltersPage(); addDataSetSettingPage(ds); addResultSetPreviewPage(); } else if (ds instanceof org.eclipse.birt.report.model.api.OdaDataSetHandle) { addOutputColumnsPage(); addComputedColumnsPage(); if (includeInputParameterPage) addParametersPage(); addDataSetFilterPage(); addPropertyBindingPage(); addDataSetSettingPage(ds); if (includeOutputParameterPage) addOutputParameterPreviewPage(); addResultSetPreviewPage(); } else if (ds instanceof org.eclipse.birt.report.model.api.JointDataSetHandle) { addJointDataSetPage(); addOutputColumnsPage(); addComputedColumnsPage(); addParametersPage(); addFiltersPage(); addResultSetPreviewPage(); } else { org.eclipse.birt.report.designer.ui.dialogs.properties.IPropertyPage[] pages = org.eclipse.birt.report.designer.data.ui.dataset.ExtenalUIUtil.getCommonPages(ds); if ((pages != null) && ((pages.length) > 0)) { for (int i = 0; i < (pages.length); i++) { addPageTo("/", pages[i].getClass().getName(), pages[i].getName(), null, pages[i]); } addOutputColumnsPage(); addComputedColumnsPage(); addParametersPage(); addFiltersPage(); addResultSetPreviewPage(); } } }
public final void compute(org.eclipse.birt.chart.model.attribute.Bounds bo) throws java.lang.IllegalArgumentException, org.eclipse.birt.chart.exception.ChartException { bo = bo.scaledInstance(dPointToPixel); dSeriesThickness = ((ids.getDpiResolution()) / 72.0) * (cwa.getSeriesThickness()); dSeriesThickness = (cwa.getPlot().getClientArea().isVisible()) ? dSeriesThickness : 0; double dX = (bo.getLeft()) + (insCA.getLeft()); double dY = (bo.getTop()) + (insCA.getTop()); double dW = ((bo.getWidth()) - (insCA.getLeft())) - (insCA.getRight()); double dH = ((bo.getHeight()) - (insCA.getTop())) - (insCA.getBottom()); iDimension = getDimension(cwa.getDimension()); dXAxisPlotSpacing = (cwa.getPlot().getHorizontalSpacing()) * (dPointToPixel); dYAxisPlotSpacing = (cwa.getPlot().getVerticalSpacing()) * (dPointToPixel); if ((iDimension) == (TWO_5_D)) { dY += dSeriesThickness; dH -= dSeriesThickness; dW -= dSeriesThickness; bo.setHeight(dH); bo.setTop(dY); bo.setWidth(dW); } if ((aax.getOverlayCount()) > 0) { if (aax.areAxesSwapped()) { updateOverlayScales(aax, dX, (dX + dW), dY, dH); dY = aax.getStart(); dH = aax.getLength(); } else { updateOverlayScales(aax, (dY - dH), dY, dX, dW); dX = aax.getStart(); dW = aax.getLength(); } } double dStart; double dEnd; final org.eclipse.birt.chart.model.component.Axis[] axa = cwa.getPrimaryBaseAxes(); final org.eclipse.birt.chart.model.component.Axis axPrimaryBase = axa[0]; final org.eclipse.birt.chart.model.component.Axis axPrimaryOrthogonal = cwa.getPrimaryOrthogonalAxis(axPrimaryBase); org.eclipse.birt.chart.model.component.Scale sc = axPrimaryBase.getScale(); org.eclipse.birt.chart.computation.withaxes.AutoScale scPrimaryBase = null; org.eclipse.birt.chart.computation.withaxes.OneAxis oaxPrimaryBase = aax.getPrimaryBase(); int iAxisType = getAxisType(axPrimaryBase); java.lang.Object oaData = null; if ((iAxisType == (TEXT)) || (oaxPrimaryBase.isCategoryScale())) { oaData = getTypedDataSet(axPrimaryBase, iAxisType, 0); } else if ((iAxisType & (NUMERICAL)) == (NUMERICAL)) { oaData = getMinMax(axPrimaryBase, iAxisType); } else if ((iAxisType & (DATE_TIME)) == (DATE_TIME)) { oaData = getMinMax(axPrimaryBase, iAxisType); } org.eclipse.birt.chart.computation.DataSetIterator dsi = (oaData instanceof org.eclipse.birt.chart.computation.DataSetIterator) ? ((org.eclipse.birt.chart.computation.DataSetIterator) (oaData)) : new org.eclipse.birt.chart.computation.DataSetIterator(oaData, iAxisType); oaData = null; dStart = (aax.areAxesSwapped()) ? dY + dH : dX; dEnd = (aax.areAxesSwapped()) ? dY : dStart + dW; int iDirection = AUTO; scPrimaryBase = org.eclipse.birt.chart.computation.withaxes.AutoScale.computeScale(ids, oaxPrimaryBase, dsi, iAxisType, dStart, dEnd, sc, axPrimaryBase.getFormatSpecifier(), rtc, iDirection, 1, iMarginPercent); oaxPrimaryBase.set(scPrimaryBase); org.eclipse.birt.chart.computation.withaxes.AutoScale scPrimaryOrthogonal = null; org.eclipse.birt.chart.computation.withaxes.OneAxis oaxPrimaryOrthogonal = aax.getPrimaryOrthogonal(); iAxisType = getAxisType(axPrimaryOrthogonal); oaData = null; if (((iAxisType & (NUMERICAL)) == (NUMERICAL)) || ((iAxisType & (DATE_TIME)) == (DATE_TIME))) { dsi = new org.eclipse.birt.chart.computation.DataSetIterator(getMinMax(axPrimaryOrthogonal, iAxisType), iAxisType); dsi.reverse(cwa.isReverseCategory()); } else { throw new org.eclipse.birt.chart.exception.ChartException(org.eclipse.birt.chart.plugin.ChartEnginePlugin.ID, org.eclipse.birt.chart.exception.ChartException.DATA_FORMAT, "exception.orthogonal.axis.numerical.datetime", org.eclipse.birt.chart.engine.i18n.Messages.getResourceBundle(rtc.getULocale())); } dStart = (aax.areAxesSwapped()) ? dX : dY + dH; dEnd = (aax.areAxesSwapped()) ? dX + dW : dY; sc = axPrimaryOrthogonal.getScale(); scPrimaryOrthogonal = org.eclipse.birt.chart.computation.withaxes.AutoScale.computeScale(ids, oaxPrimaryOrthogonal, dsi, iAxisType, dStart, dEnd, sc, oaxPrimaryBase.getModelAxis().getOrigin(), axPrimaryOrthogonal.getFormatSpecifier(), rtc, org.eclipse.birt.chart.computation.withaxes.AUTO, 1, iMarginPercent); oaxPrimaryOrthogonal.set(scPrimaryOrthogonal); double dYAxisLocation = adjustHorizontal(dX, dW, aax); double dXAxisLocation = adjustVerticalDueToHorizontal(dY, dH, aax); iAxisType = getAxisType(axPrimaryOrthogonal); oaData = getTypedDataSet(axPrimaryOrthogonal, iAxisType, 0); scPrimaryOrthogonal.setData(dsi); iAxisType = getAxisType(axPrimaryBase); if (iAxisType != (org.eclipse.birt.chart.computation.IConstants.TEXT)) { scPrimaryBase.setData(getTypedDataSet(axPrimaryBase, iAxisType, 0)); } scPrimaryBase.resetShifts(); scPrimaryOrthogonal.resetShifts(); updateOverlayAxes(aax); growBaseAxis(aax, bo); final org.eclipse.birt.chart.computation.withaxes.OneAxis axPH = (aax.areAxesSwapped()) ? aax.getPrimaryOrthogonal() : aax.getPrimaryBase(); final org.eclipse.birt.chart.computation.withaxes.OneAxis axPV = (aax.areAxesSwapped()) ? aax.getPrimaryBase() : aax.getPrimaryOrthogonal(); axPH.setAxisCoordinate(dXAxisLocation); axPV.setAxisCoordinate(dYAxisLocation); double[] daX = axPH.getScale().getEndPoints(); double[] daY = axPV.getScale().getEndPoints(); if ((axPH.getScale().getDirection()) == (BACKWARD)) { boPlotBackground.setLeft(((daX[1]) - (insCA.getLeft()))); boPlotBackground.setWidth((((((daX[0]) - (daX[1])) + (insCA.getLeft())) + (insCA.getRight())) + 1)); } else { boPlotBackground.setLeft(((daX[0]) - (insCA.getLeft()))); boPlotBackground.setWidth((((((daX[1]) - (daX[0])) + (insCA.getLeft())) + (insCA.getRight())) + 1)); } if ((axPV.getScale().getDirection()) == (FORWARD)) { boPlotBackground.setTop(((daY[0]) - (insCA.getTop()))); boPlotBackground.setHeight((((((daY[1]) - (daY[0])) + (insCA.getTop())) + (insCA.getBottom())) + 1)); } else { boPlotBackground.setTop(((daY[1]) - (insCA.getTop()))); boPlotBackground.setHeight((((((daY[0]) - (daY[1])) + (insCA.getTop())) + (insCA.getBottom())) + 1)); } if ((iDimension) == (TWO_5_D)) { boPlotBackground.delta(dSeriesThickness, (-(dSeriesThickness)), 0, 0); } boPlotWithMargin = org.eclipse.birt.chart.model.attribute.impl.BoundsImpl.copyInstance(boPlotBackground); if ((iMarginPercent) > 0) { org.eclipse.birt.chart.computation.withaxes.AutoScale scale = axPH.getScale(); if (((scale.getMaxWithMargin()) != null) || ((scale.getMinWithMargin()) != null)) { if (((scale.getType()) & (LINEAR)) == (LINEAR)) { double factor = (java.lang.Math.abs(((daX[1]) - (daX[0])))) / ((asDouble(scale.getMaximum()).doubleValue()) - (asDouble(scale.getMinimum()).doubleValue())); if ((scale.getMinWithMargin()) != null) { boPlotWithMargin.setLeft(((boPlotWithMargin.getLeft()) - (factor * ((asDouble(scale.getMinimum()).doubleValue()) - (asDouble(scale.getMinWithMargin()).doubleValue()))))); } boPlotWithMargin.setWidth(((((factor * ((asDouble(((scale.getMaxWithMargin()) == null ? scale.getMaximum() : scale.getMaxWithMargin())).doubleValue()) - (asDouble(((scale.getMinWithMargin()) == null ? scale.getMinimum() : scale.getMinWithMargin())).doubleValue()))) + (insCA.getLeft())) + (insCA.getRight())) + 1)); } } scale = axPV.getScale(); if (((scale.getMaxWithMargin()) != null) || ((scale.getMinWithMargin()) != null)) { if (((scale.getType()) & (LINEAR)) == (LINEAR)) { double factor = (java.lang.Math.abs(((daX[1]) - (daX[0])))) / ((asDouble(scale.getMaximum()).doubleValue()) - (asDouble(scale.getMinimum()).doubleValue())); if ((scale.getMaxWithMargin()) != null) { boPlotWithMargin.setTop(((boPlotWithMargin.getTop()) - (factor * ((asDouble(scale.getMaxWithMargin()).doubleValue()) - (asDouble(scale.getMaximum()).doubleValue()))))); } boPlotWithMargin.setHeight(((((factor * ((asDouble(((scale.getMaxWithMargin()) == null ? scale.getMaximum() : scale.getMaxWithMargin())).doubleValue()) - (asDouble(((scale.getMinWithMargin()) == null ? scale.getMinimum() : scale.getMinWithMargin())).doubleValue()))) + (insCA.getTop())) + (insCA.getBottom())) + 1)); } } } }
private boolean isCommentLine(int index) { int start = index; while ((start >= 0) && ((script.charAt(start)) != '\n')) { if ((start + 1) < (script.length())) { if (((script.charAt(start)) == '/') && ((script.charAt((start + 1))) == '/')) { return true; } } start--; } return false; }
private boolean handleValidateLibrary(java.lang.Object dragObj) { org.eclipse.gef.EditPart targetEditPart = getTargetEditPart(); if (targetEditPart == null) { return true; } if (dragObj != null) { java.lang.Object[] dragObjs; if (dragObj instanceof java.lang.Object[]) { dragObjs = ((java.lang.Object[]) (dragObj)); } else { dragObjs = new java.lang.Object[]{ dragObj }; } if ((dragObjs.length) == 0) { return false; } for (int i = 0; i < (dragObjs.length); i++) { dragObj = dragObjs[i]; if (dragObj instanceof org.eclipse.birt.report.model.api.ReportElementHandle) { if ((((org.eclipse.birt.report.model.api.ReportElementHandle) (dragObj)).getRoot()) instanceof org.eclipse.birt.report.model.api.LibraryHandle) { if (((dragObj instanceof org.eclipse.birt.report.model.api.DataSetHandle) || (dragObj instanceof org.eclipse.birt.report.model.api.ParameterHandle)) && ((getTargetEditPart()) == null)) return true; if ((dragObj instanceof org.eclipse.birt.report.model.api.DataSourceHandle) || (dragObj instanceof org.eclipse.birt.report.model.api.MasterPageHandle)) { return (targetEditPart instanceof org.eclipse.birt.report.designer.internal.ui.editors.schematic.editparts.ReportDesignEditPart) && ((((org.eclipse.birt.report.model.api.ReportElementHandle) (dragObj)).getRoot()) != (targetEditPart.getModel())); } if ((!(org.eclipse.birt.report.designer.util.DNDUtil.handleValidateTargetCanContain(targetEditPart.getModel(), dragObj))) || (!(org.eclipse.birt.report.designer.util.DNDUtil.handleValidateTargetCanContainMore(targetEditPart.getModel(), 1)))) { return false; } } else { return false; } } else if ((dragObj instanceof org.eclipse.birt.report.model.api.EmbeddedImageHandle) && ((((org.eclipse.birt.report.model.api.EmbeddedImageHandle) (dragObj)).getElementHandle().getRoot()) instanceof org.eclipse.birt.report.model.api.LibraryHandle)) { int canContain = org.eclipse.birt.report.designer.util.DNDUtil.handleValidateTargetCanContain(targetEditPart.getModel(), dragObj, true); return canContain == (org.eclipse.birt.report.designer.util.DNDUtil.CONTAIN_THIS); } else { return false; } } return true; } return false; }
public ParameterAdapter(org.eclipse.birt.report.model.api.DataSetParameterHandle modelParam) { setName(modelParam.getName()); if ((modelParam.getPosition()) != null) setPosition(modelParam.getPosition().intValue()); if ((modelParam.getNativeDataType()) != null) setNativeType(modelParam.getNativeDataType().intValue()); if (modelParam instanceof org.eclipse.birt.report.model.api.OdaDataSetParameterHandle) { setNativeName(((org.eclipse.birt.report.model.api.OdaDataSetParameterHandle) (modelParam)).getNativeName()); } setType(org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.adaptModelDataType(modelParam.getDataType())); setInputMode(modelParam.isInput()); setOutputMode(modelParam.isOutput()); setNullable(modelParam.allowNull()); setInputOptional(modelParam.isOptional()); if ((modelParam instanceof org.eclipse.birt.report.model.api.OdaDataSetParameterHandle) && ((((org.eclipse.birt.report.model.api.OdaDataSetParameterHandle) (modelParam)).getParamName()) != null)) { setDefaultInputValue(org.eclipse.birt.core.data.ExpressionUtil.createJSParameterExpression(((org.eclipse.birt.report.model.api.OdaDataSetParameterHandle) (modelParam)).getParamName())); } else setDefaultInputValue(modelParam.getDefaultValue()); }
public org.eclipse.birt.report.model.api.DesignElementHandle createView(org.eclipse.birt.report.model.api.DesignElementHandle host) throws org.eclipse.birt.core.exception.BirtException { org.eclipse.birt.chart.model.ChartWithAxes cm = org.eclipse.birt.chart.model.impl.ChartWithAxesImpl.create(); cm.setType("Bar Chart"); cm.setSubType("Side-by-side"); cm.setUnits("Points"); cm.setUnitSpacing(50); cm.getTitle().getLabel().getCaption().setValue(org.eclipse.birt.chart.reportitem.ui.i18n.Messages.getString("ChartReportItemViewProvider.BarChart.Text.Title")); org.eclipse.birt.chart.model.data.SeriesDefinition sdBase = org.eclipse.birt.chart.model.data.impl.SeriesDefinitionImpl.create(); sdBase.getSeriesPalette().shift(0); org.eclipse.birt.chart.model.component.Series series = org.eclipse.birt.chart.model.component.impl.SeriesImpl.create(); sdBase.getSeries().add(series); cm.getBaseAxes()[0].getSeriesDefinitions().add(sdBase); cm.getBaseAxes()[0].setCategoryAxis(true); org.eclipse.birt.chart.model.data.SeriesDefinition sdOrth = org.eclipse.birt.chart.model.data.impl.SeriesDefinitionImpl.create(); sdOrth.getSeriesPalette().shift(0); series = org.eclipse.birt.chart.model.type.impl.BarSeriesImpl.create(); sdOrth.getSeries().add(series); cm.getOrthogonalAxes(cm.getBaseAxes()[0], true)[0].getSeriesDefinitions().add(sdOrth); org.eclipse.birt.chart.ui.util.ChartUIUtil.setSeriesName(cm); org.eclipse.birt.chart.model.data.SampleData sampleData = DataFactory.eINSTANCE.createSampleData(); sampleData.getBaseSampleData().clear(); sampleData.getOrthogonalSampleData().clear(); org.eclipse.birt.chart.model.data.BaseSampleData sampleDataBase = DataFactory.eINSTANCE.createBaseSampleData(); sampleDataBase.setDataSetRepresentation("A, B, C"); sampleData.getBaseSampleData().add(sampleDataBase); org.eclipse.birt.chart.model.data.OrthogonalSampleData sampleDataOrth = DataFactory.eINSTANCE.createOrthogonalSampleData(); sampleDataOrth.setDataSetRepresentation("5,4,12"); sampleDataOrth.setSeriesDefinitionIndex(0); sampleData.getOrthogonalSampleData().add(sampleDataOrth); cm.setSampleData(sampleData); java.lang.String name = org.eclipse.birt.report.designer.ui.ReportPlugin.getDefault().getCustomName(ChartReportItemConstants.CHART_EXTENSION_NAME); org.eclipse.birt.report.model.api.ExtendedItemHandle itemHandle = host.getElementFactory().newExtendedItem(name, getViewName()); itemHandle.getReportItem().setProperty(ChartReportItemUtil.PROPERTY_CHART, cm); return itemHandle; }
public java.util.Collection getReportParameters() { if ((parameterTask) != null) { return parameterTask.getParameterDefns(false); } return null; }
private java.lang.Object createNullValueReplacer(int fieldType) { switch (fieldType) { case org.eclipse.birt.core.data.DataType.DATE_TYPE : return new java.util.Date(org.eclipse.birt.report.data.adapter.impl.DataSetIterator.nullTime); case org.eclipse.birt.core.data.DataType.SQL_DATE_TYPE : return new java.sql.Date(org.eclipse.birt.report.data.adapter.impl.DataSetIterator.nullTime); case org.eclipse.birt.core.data.DataType.SQL_TIME_TYPE : return new java.sql.Time(org.eclipse.birt.report.data.adapter.impl.DataSetIterator.nullTime); case org.eclipse.birt.core.data.DataType.BOOLEAN_TYPE : return new java.lang.Boolean(false); case org.eclipse.birt.core.data.DataType.DECIMAL_TYPE : return new java.lang.Double(0); case org.eclipse.birt.core.data.DataType.DOUBLE_TYPE : return new java.lang.Double(0); case org.eclipse.birt.core.data.DataType.INTEGER_TYPE : return new java.lang.Integer(0); case org.eclipse.birt.core.data.DataType.STRING_TYPE : return ""; default : return ""; } }
private java.util.HashMap evaluateParameterValues(org.eclipse.birt.report.engine.api.IReportRunnable runnable) { java.util.HashMap inputValues = new java.util.HashMap(); org.eclipse.birt.report.engine.api.IGetParameterDefinitionTask task = engine.createGetParameterDefinitionTask(runnable); java.util.Collection paramDefns = task.getParameterDefns(false); java.util.Iterator iter = paramDefns.iterator(); while (iter.hasNext()) { org.eclipse.birt.report.engine.api.IParameterDefnBase pBase = ((org.eclipse.birt.report.engine.api.IParameterDefnBase) (iter.next())); if (pBase instanceof org.eclipse.birt.report.engine.api.IScalarParameterDefn) { org.eclipse.birt.report.engine.api.IScalarParameterDefn paramDefn = ((org.eclipse.birt.report.engine.api.IScalarParameterDefn) (pBase)); java.lang.String paramName = paramDefn.getName(); java.lang.String inputValue = ((java.lang.String) (params.get(paramName))); int paramDataType = paramDefn.getDataType(); java.lang.String paramType = paramDefn.getScalarParameterType(); try { java.lang.Object paramValue = null; if (DesignChoiceConstants.SCALAR_PARAM_TYPE_MULTI_VALUE.equals(paramType)) { paramValue = stringToObjectArray(paramDataType, inputValue); } else { paramValue = stringToObject(paramDataType, inputValue); } if (paramValue != null) { inputValues.put(paramName, paramValue); } } catch (org.eclipse.birt.core.exception.BirtException ex) { org.eclipse.birt.report.engine.api.ReportRunner.logger.log(java.util.logging.Level.SEVERE, (("the value of parameter " + paramName) + " is invalid"), ex); } } } return inputValues; }
public void createControl(org.eclipse.swt.widgets.Composite parent) { fConfigurationBlock = new org.eclipse.birt.chart.reportitem.ui.ChartConfigurationBlock(getNewStatusChangedListener(), getProject()); super.createControl(parent); org.eclipse.ui.PlatformUI.getWorkbench().getHelpSystem().setHelp(getControl(), ChartHelpContextIds.PREFERENCE_CHART); }
public java.lang.String getUnits() { if (!(org.eclipse.birt.report.model.api.util.StringUtil.isBlank(units))) return units; java.lang.String tempUnits = ((java.lang.String) (getPropertyDefn(org.eclipse.birt.report.model.core.UNITS_PROP).getDefault())); if (!(org.eclipse.birt.report.model.api.util.StringUtil.isBlank(tempUnits))) return tempUnits; return getSession().getUnits(); }
private void populateDataSet() throws org.eclipse.birt.data.engine.core.DataException { int originalMaxRows = this.populator.getQuery().getMaxRows(); boolean changeMaxRows = ((filterByRow) == null) ? false : ((filterByRow.getFilterList(FilterByRow.QUERY_FILTER).size()) + (filterByRow.getFilterList(FilterByRow.GROUP_FILTER).size())) > 0; if (changeMaxRows) this.populator.getQuery().setMaxRows(0); if ((this.computedColumnHelper) != null) this.computedColumnHelper.setModel(TransformationConstants.NONE_MODEL); doDataSetFilter(changeMaxRows); java.util.List aggCCList = prepareComputedColumns(TransformationConstants.DATA_SET_MODEL); populateAggrCCs(this.getAggrComputedColumns(aggCCList, true)); removeAvailableComputedColumns(); populateComputedColumns(this.getAggrComputedColumns(aggCCList, false)); this.populator.getQuery().setMaxRows(originalMaxRows); }
private java.lang.Object evaluateInputParameterValue(org.mozilla.javascript.Scriptable scope, org.mozilla.javascript.Context cx, org.eclipse.birt.data.engine.api.IInputParameterBinding iParamBind) throws org.eclipse.birt.data.engine.core.DataException { java.lang.Object evaluateResult = null; try { if ((iParamBind.getExpr()) instanceof org.eclipse.birt.data.engine.api.IScriptExpression) { org.eclipse.birt.core.script.ScriptContext evalContext = ((this.outerScope) == null) ? context : context.newContext(this.outerScope); org.eclipse.birt.core.script.ICompiledScript compiledScript = evalContext.compile("javascript", null, 0, ((org.eclipse.birt.data.engine.api.IScriptExpression) (iParamBind.getExpr())).getText()); evaluateResult = evalContext.evaluate(compiledScript); } } catch (org.eclipse.birt.core.exception.BirtException e) { org.eclipse.birt.data.engine.core.DataException dataEx = new org.eclipse.birt.data.engine.core.DataException(org.eclipse.birt.data.engine.i18n.ResourceConstants.UNEXPECTED_ERROR, e); if ((logger) != null) logger.logp(java.util.logging.Level.FINE, org.eclipse.birt.data.engine.impl.PreparedOdaDSQuery.class.getName(), "getMergedParameters", "Error occurs in IQueryResults.getResultIterator()", e); throw dataEx; } return evaluateResult; }
private void uiDisplayURL(final java.lang.String url) { org.eclipse.swt.browser.Browser.clearSessions(); uiClose(); getBrowser().displayUrl(url); }
private java.util.List getSelectValueList() throws org.eclipse.birt.core.exception.BirtException { java.util.List selectValueList = new java.util.ArrayList(); org.eclipse.birt.report.model.api.ReportItemHandle reportItem = org.eclipse.birt.report.designer.util.DEUtil.getBindingHolder(currentItem); if (((bindingName) != null) && (reportItem != null)) { org.eclipse.birt.report.data.adapter.api.DataRequestSession session = org.eclipse.birt.report.data.adapter.api.DataRequestSession.newSession(new org.eclipse.birt.report.data.adapter.api.DataSessionContext(org.eclipse.birt.report.data.adapter.api.DataSessionContext.MODE_DIRECT_PRESENTATION, reportItem.getModuleHandle())); selectValueList.addAll(session.getColumnValueSet(reportItem.getDataSet(), reportItem.paramBindingsIterator(), reportItem.columnBindingsIterator(), bindingName)); session.shutdown(); } else { org.eclipse.birt.report.designer.internal.ui.util.ExceptionHandler.openErrorMessageBox(org.eclipse.birt.report.designer.nls.Messages.getString("SelectValueDialog.errorRetrievinglist"), org.eclipse.birt.report.designer.nls.Messages.getString("SelectValueDialog.noExpressionSet")); } return selectValueList; }
public boolean isEqualDataSourceDesign(org.eclipse.datatools.connectivity.oda.design.DataSourceDesign designFromHandle, org.eclipse.datatools.connectivity.oda.design.DataSourceDesign design) { if ((designFromHandle == null) && (design == null)) return true; if ((designFromHandle != null) && (design == null)) return false; if ((designFromHandle == null) && (design != null)) return false; assert designFromHandle != null; org.eclipse.datatools.connectivity.oda.design.Properties handleProps = designFromHandle.getPublicProperties(); org.eclipse.datatools.connectivity.oda.design.Properties props = design.getPublicProperties(); if ((handleProps == null) && (props == null)) return true; if ((handleProps != null) && (props == null)) return false; if ((handleProps == null) && (props != null)) return false; assert handleProps != null; assert props != null; org.eclipse.emf.common.util.EList publicProps = handleProps.getProperties(); for (int i = 0; i < (publicProps.size()); i++) { org.eclipse.datatools.connectivity.oda.design.Property prop = ((org.eclipse.datatools.connectivity.oda.design.Property) (publicProps.get(i))); java.lang.String propValue = prop.getValue(); java.lang.String propName = prop.getName(); if (propValue == null) { java.lang.String value = props.getProperty(propName); if ((value != null) && (value.trim().equals(""))) prop.setNameValue(prop.getName(), ""); } } return new org.eclipse.emf.ecore.util.EcoreUtil.EqualityHelper().equals(designFromHandle, design); }
private void updateInputElementAttrsToReportParam(org.eclipse.datatools.connectivity.oda.design.InputElementAttributes elementAttrs, org.eclipse.datatools.connectivity.oda.design.InputElementAttributes cachedElementAttrs, org.eclipse.birt.report.model.api.ScalarParameterHandle reportParam, org.eclipse.birt.report.model.api.OdaDataSetHandle setHandle) throws org.eclipse.birt.report.model.api.activity.SemanticException { if (elementAttrs == null) return; java.lang.String defaultValue = elementAttrs.getDefaultScalarValue(); java.lang.String cachedDefaultValue = (cachedElementAttrs == null) ? null : cachedElementAttrs.getDefaultScalarValue(); if (!(org.eclipse.birt.report.model.adapter.oda.impl.CompareUtil.isEquals(cachedDefaultValue, defaultValue))) { if (!(DataSetParameterAdapter.BIRT_JS_EXPR.equals(defaultValue))) reportParam.setDefaultValue(defaultValue); } java.lang.Boolean isOptional = java.lang.Boolean.valueOf(elementAttrs.isOptional()); java.lang.Boolean cachedIsOptional = (cachedElementAttrs == null) ? null : java.lang.Boolean.valueOf(cachedElementAttrs.isOptional()); if (!(org.eclipse.birt.report.model.adapter.oda.impl.CompareUtil.isEquals(cachedIsOptional, isOptional))) setReportParamIsRequired(reportParam, org.eclipse.birt.report.model.adapter.oda.impl.ReportParameterAdapter.ALLOW_BLANK_PROP_NAME, isOptional.booleanValue()); java.lang.Boolean masksValue = java.lang.Boolean.valueOf(elementAttrs.isMasksValue()); java.lang.Boolean cachedMasksValues = (cachedElementAttrs == null) ? null : java.lang.Boolean.valueOf(cachedElementAttrs.isMasksValue()); if (!(org.eclipse.birt.report.model.adapter.oda.impl.CompareUtil.isEquals(cachedMasksValues, masksValue))) reportParam.setConcealValue(masksValue.booleanValue()); updateROMSelectionList(elementAttrs.getStaticValueChoices(), (cachedElementAttrs == null ? null : cachedElementAttrs.getStaticValueChoices()), reportParam); org.eclipse.datatools.connectivity.oda.design.DynamicValuesQuery valueQuery = elementAttrs.getDynamicValueChoices(); updateROMDyanmicList(valueQuery, (cachedElementAttrs == null ? null : cachedElementAttrs.getDynamicValueChoices()), reportParam, setHandle); org.eclipse.datatools.connectivity.oda.design.DynamicValuesQuery cachedValueQuery = (cachedElementAttrs == null) ? null : cachedElementAttrs.getDynamicValueChoices(); if ((valueQuery == null) && (cachedValueQuery == null)) return; if (valueQuery == null) valueQuery = designFactory.createDynamicValuesQuery(); boolean isEnabled = valueQuery.isEnabled(); boolean cachedIsEnabled = (cachedValueQuery == null) ? false : cachedValueQuery.isEnabled(); if (((cachedValueQuery == null) || (cachedIsEnabled != isEnabled)) && isEnabled) reportParam.setValueType(DesignChoiceConstants.PARAM_VALUE_TYPE_DYNAMIC); else if (((cachedValueQuery == null) || (cachedIsEnabled != isEnabled)) && (!isEnabled)) reportParam.setValueType(DesignChoiceConstants.PARAM_VALUE_TYPE_STATIC); org.eclipse.datatools.connectivity.oda.design.InputElementUIHints uiHints = elementAttrs.getUiHints(); if (uiHints != null) { org.eclipse.datatools.connectivity.oda.design.InputElementUIHints cachedUiHints = (cachedElementAttrs == null) ? null : cachedElementAttrs.getUiHints(); org.eclipse.datatools.connectivity.oda.design.InputPromptControlStyle style = uiHints.getPromptStyle(); org.eclipse.datatools.connectivity.oda.design.InputPromptControlStyle cachedStyle = (cachedUiHints == null) ? null : cachedUiHints.getPromptStyle(); if ((cachedStyle == null) || ((style != null) && ((cachedStyle.getValue()) != (style.getValue())))) reportParam.setControlType((style == null ? null : org.eclipse.birt.report.model.adapter.oda.impl.ReportParameterAdapter.newROMControlType(style.getValue()))); } }
protected org.eclipse.birt.report.service.api.IViewerReportDesignHandle getDesignHandle() throws java.lang.Exception { if ((viewer) == null) return null; org.eclipse.birt.report.service.api.IViewerReportDesignHandle design = null; org.eclipse.birt.report.engine.api.IReportRunnable reportRunnable = null; java.lang.String designFile = createAbsolutePath(viewer.getReportDesign()); java.lang.String documentFile = createAbsolutePath(viewer.getReportDocument()); javax.servlet.http.HttpServletRequest request = ((javax.servlet.http.HttpServletRequest) (pageContext.getRequest())); boolean isValidDocument = org.eclipse.birt.report.utility.ParameterAccessor.isValidFilePath(documentFile); if ((documentFile != null) && isValidDocument) { org.eclipse.birt.report.engine.api.IReportDocument reportDocumentInstance = org.eclipse.birt.report.service.ReportEngineService.getInstance().openReportDocument(designFile, documentFile, getModuleOptions()); if (reportDocumentInstance != null) { this.documentInUrl = true; reportRunnable = reportDocumentInstance.getReportRunnable(); reportDocumentInstance.close(); } } if (reportRunnable == null) { if ((documentFile != null) && (designFile == null)) { if (isValidDocument) throw new org.eclipse.birt.report.exception.ViewerException(org.eclipse.birt.report.resource.ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_FILE_ERROR, new java.lang.String[]{ documentFile }); else throw new org.eclipse.birt.report.exception.ViewerException(org.eclipse.birt.report.resource.ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_ACCESS_ERROR, new java.lang.String[]{ documentFile }); } if (!(org.eclipse.birt.report.utility.ParameterAccessor.isValidFilePath(designFile))) { throw new org.eclipse.birt.report.exception.ViewerException(org.eclipse.birt.report.resource.ResourceConstants.GENERAL_EXCEPTION_REPORT_ACCESS_ERROR, new java.lang.String[]{ designFile }); } else { java.io.File file = new java.io.File(designFile); if (file.exists()) { reportRunnable = org.eclipse.birt.report.service.ReportEngineService.getInstance().openReportDesign(designFile, getModuleOptions()); } else if (!(org.eclipse.birt.report.utility.ParameterAccessor.isWorkingFolderAccessOnly())) { java.io.InputStream is = null; java.net.URL url = null; try { java.lang.String reportPath = viewer.getReportDesign(); if (!(reportPath.startsWith("/"))) reportPath = "/" + reportPath; url = request.getSession().getServletContext().getResource(reportPath); if (url != null) is = url.openStream(); if (is != null) reportRunnable = org.eclipse.birt.report.service.ReportEngineService.getInstance().openReportDesign(url.toString(), is, getModuleOptions()); } catch (java.lang.Exception e) { } } if (reportRunnable == null) { throw new org.eclipse.birt.report.exception.ViewerException(org.eclipse.birt.report.resource.ResourceConstants.GENERAL_EXCEPTION_REPORT_FILE_ERROR, new java.lang.String[]{ designFile }); } } } if (reportRunnable != null) { design = new org.eclipse.birt.report.service.BirtViewerReportDesignHandle(org.eclipse.birt.report.service.api.IViewerReportDesignHandle.RPT_RUNNABLE_OBJECT, reportRunnable); } return design; }
public int getRowSpan(org.eclipse.birt.report.engine.content.ICellContent cell) { int groupLevel = getGroupLevel(); int rowSpan = cell.getRowSpan(); if (groupLevel >= 0) { java.lang.Object generateBy = cell.getGenerateBy(); if (generateBy instanceof org.eclipse.birt.report.engine.ir.CellDesign) { org.eclipse.birt.report.engine.ir.CellDesign cellDesign = ((org.eclipse.birt.report.engine.ir.CellDesign) (generateBy)); if (cellDesign != null) { java.lang.String dropType = cellDesign.getDrop(); if ((dropType != null) && (!("none".equals(dropType)))) { return createDropID(groupLevel, dropType); } } } } return rowSpan; }
public boolean addArea(org.eclipse.birt.report.engine.layout.area.IArea area, boolean keepWithPrevious, boolean keepWithNext) { if (area == null) { return true; } keepWith = ((keepWith) || keepWithNext) || (pageBreakAvoid); if ((!(keepWith)) && (!keepWithPrevious)) { clearCache(); } org.eclipse.birt.report.engine.layout.area.impl.AbstractArea aArea = ((org.eclipse.birt.report.engine.layout.area.impl.AbstractArea) (area)); if ((((keepWithCache.getHeight()) + (aArea.getAllocatedHeight())) + (getCurrentBP())) > (getMaxAvaHeight())) { context.setAutoPageBreak(true); return false; } else { if (keepWithPrevious || (keepWith)) { keepWithCache.add(area); } else { addToRoot(aArea); } } keepWith = keepWithNext; if (!(keepWith)) { clearCache(); } return true; }
private org.eclipse.birt.report.designer.internal.ui.views.attributes.provider.IDescriptorProvider[] createFontStyleProviders() { return new org.eclipse.birt.report.designer.internal.ui.views.attributes.provider.IDescriptorProvider[]{ new org.eclipse.birt.report.designer.internal.ui.views.attributes.provider.FontStylePropertyDescriptorProvider(org.eclipse.birt.report.model.api.StyleHandle.FONT_WEIGHT_PROP, org.eclipse.birt.report.model.api.elements.ReportDesignConstants.STYLE_ELEMENT), new org.eclipse.birt.report.designer.internal.ui.views.attributes.provider.FontStylePropertyDescriptorProvider(org.eclipse.birt.report.model.api.StyleHandle.FONT_STYLE_PROP, org.eclipse.birt.report.model.api.elements.ReportDesignConstants.STYLE_ELEMENT), new org.eclipse.birt.report.designer.internal.ui.views.attributes.provider.FontStylePropertyDescriptorProvider(org.eclipse.birt.report.model.api.StyleHandle.TEXT_UNDERLINE_PROP, org.eclipse.birt.report.model.api.elements.ReportDesignConstants.STYLE_ELEMENT), new org.eclipse.birt.report.designer.internal.ui.views.attributes.provider.FontStylePropertyDescriptorProvider(org.eclipse.birt.report.model.api.StyleHandle.TEXT_LINE_THROUGH_PROP, org.eclipse.birt.report.model.api.elements.ReportDesignConstants.STYLE_ELEMENT), new org.eclipse.birt.report.designer.internal.ui.views.attributes.provider.PropertyDescriptorProvider(org.eclipse.birt.report.model.api.StyleHandle.TEXT_DIRECTION_PROP, org.eclipse.birt.report.model.api.elements.ReportDesignConstants.STYLE_ELEMENT) }; }
protected void addData(org.eclipse.birt.report.engine.emitter.excel.SheetData data) { org.eclipse.birt.report.engine.emitter.excel.layout.XlsContainer container = getCurrentContainer(); container.setEmpty(false); if ((data.getStartX()) == (data.getEndX())) return; int col = axis.getColumnIndexByCoordinate(data.getStartX()); if ((col == (-1)) || (col >= (cache.getColumnCount()))) return; int span = (axis.getColumnIndexByCoordinate(data.getEndX())) - col; outputDataIfBufferIsFull(); updataRowIndex(data, container); addDatatoCache(col, data); for (int i = col + 1; i < (col + span); i++) { org.eclipse.birt.report.engine.emitter.excel.BlankData blankData = new org.eclipse.birt.report.engine.emitter.excel.BlankData(data); blankData.setType(Type.HORIZONTAL); addDatatoCache(i, blankData); } if ((data.getDataType()) == (org.eclipse.birt.report.engine.emitter.excel.SheetData.IMAGE)) { addEmptyData(data, container); } while (container != null) { if (container instanceof org.eclipse.birt.report.engine.emitter.excel.layout.XlsCell) { org.eclipse.birt.report.engine.emitter.excel.layout.XlsCell cell = ((org.eclipse.birt.report.engine.emitter.excel.layout.XlsCell) (container)); data.setRowSpanInDesign(((cell.getRowSpan()) - 1)); break; } else { container = container.getParent(); } } }
public java.lang.String getColumnText(java.lang.Object element, int columnIndex) { if ((element instanceof org.eclipse.birt.report.designer.data.ui.dataset.CellValue[]) && ((((org.eclipse.birt.report.designer.data.ui.dataset.CellValue[]) (element)).length) > 0)) { return ((org.eclipse.birt.report.designer.data.ui.dataset.CellValue[]) (element))[columnIndex].getDisplayValue(); } else { return null; } }
private org.eclipse.birt.report.model.api.ColumnHintHandle findColumnHint(org.eclipse.birt.report.model.api.DataSetHandle handle, java.lang.String columnName) { if ((columnName == null) || ((columnName.trim().length()) == 0)) return null; org.eclipse.birt.report.model.api.ColumnHintHandle hint = null; java.util.Iterator iter = handle.getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP).iterator(); while (iter.hasNext()) { hint = ((org.eclipse.birt.report.model.api.ColumnHintHandle) (iter.next())); if (columnName.equals(hint.getColumnName())) { return hint; } } if ((hint == null) && (handle instanceof org.eclipse.birt.report.model.api.DerivedDataSetHandle)) { java.util.List<org.eclipse.birt.report.model.api.DataSetHandle> inputDataSets = ((org.eclipse.birt.report.model.api.DerivedDataSetHandle) (handle)).getInputDataSets(); for (int i = 0; i < (inputDataSets.size()); i++) { hint = findColumnHint(inputDataSets.get(i), columnName); if (hint != null) { return hint; } } } return hint; }
private void configEngine() { org.eclipse.birt.report.engine.api.HTMLRenderOption emitterConfig = new org.eclipse.birt.report.engine.api.HTMLRenderOption(); emitterConfig.setActionHandler(new org.eclipse.birt.report.engine.api.HTMLActionHandler() { public java.lang.String getURL(org.eclipse.birt.report.engine.api.IAction actionDefn, java.lang.Object context) { if ((actionDefn.getType()) == (org.eclipse.birt.report.engine.api.IAction.ACTION_DRILLTHROUGH)) return "birt://" + (java.net.URLEncoder.encode(super.getURL(actionDefn, context))); return super.getURL(actionDefn, context); } }); engineConfig.getEmitterConfigs().put(RenderOption.OUTPUT_FORMAT_HTML, emitterConfig); java.lang.String userClassPath = org.eclipse.birt.report.debug.internal.core.launcher.ReportLauncher.getUserClassPath(); org.eclipse.birt.report.debug.internal.core.launcher.ReportLauncher.logger.info(("User class path received: " + userClassPath)); if (userClassPath != null) { engineConfig.setProperty(EngineConstants.PROJECT_CLASSPATH_KEY, userClassPath); } }
private java.util.Map getColumnBindings(org.eclipse.birt.data.engine.api.IBaseQueryDefinition defn) { java.util.Map result = new java.util.HashMap(); java.util.Iterator temp = defn.getResultSetExpressions().keySet().iterator(); while (temp.hasNext()) { java.lang.Object key = temp.next(); result.put(key, defn.getResultSetExpressions().get(key)); } result.putAll(populateGroupColumnBindings(defn.getGroups().iterator())); result.putAll(populateSubQueryColumnBindings(defn.getSubqueries().iterator())); return result; }
public void handleSelectionChanged(org.eclipse.jface.viewers.ISelection selection) { if (((getSourceViewer()) == null) || (!(getSourceViewer().getTextWidget().isVisible()))) { return; } if ((editorUIEnabled) == true) { saveModel(); } if (selection != null) { settingText = true; java.lang.Object[] sel = ((org.eclipse.jface.viewers.IStructuredSelection) (selection)).toArray(); if (((sel.length) == 1) && ((sel[0]) instanceof org.eclipse.birt.report.model.api.DesignElementHandle)) { editObject = sel[0]; palettePage.getSupport().setCurrentEditObject(editObject); if ((editObject) instanceof org.eclipse.birt.report.model.api.ExtendedItemHandle) { disableEditor(); cmbExpList.removeAll(); cmbItemLastSelected = null; getSourceViewer().getTextWidget().setEnabled(true); setEditorText(((org.eclipse.birt.report.model.api.ExtendedItemHandle) (editObject)).getExternalScript()); context.setVariable("this", "org.eclipse.birt.report.model.api.ExtendedItemHandle"); } else { setComboViewerInput(editObject); cmbItemLastSelected = null; setEditorText(""); if ((cmbExpList.getItemCount()) > 0) { enableEditor(); selectItemInComboExpList(((org.eclipse.jface.viewers.ISelection) (selectionMap.get(getModel())))); } else { disableEditor(); } } checkDirty(); palettePage.getSupport().updateParametersTree(); } else { disableEditor(); cmbExpList.removeAll(); cmbItemLastSelected = null; palettePage.getSupport().setCurrentEditObject(null); } updateAnnotationLabel(((sel.length) > 0 ? sel[0] : null)); settingText = false; } }
public void flush() { java.lang.StringBuffer buffer = new java.lang.StringBuffer(EventHandlers.content); codeScript.appendChild(dom.createCDATASection(buffer.append(scriptBuffer).toString())); buffer = new java.lang.StringBuffer(EventHandlers.styles); styles.appendChild(dom.createCDATASection(buffer.append(styleBuffer).toString())); scriptBuffer = new java.lang.StringBuffer(); styleBuffer = new java.lang.StringBuffer(); }
private java.util.Map<java.lang.String, org.eclipse.birt.report.data.oda.jdbc.ui.model.RootNode.TablesAndProcedures> generateSchemaToTablesAndProceduresMap(org.eclipse.birt.report.data.oda.jdbc.ui.model.FilterConfig fc, boolean supportsProcedure) { java.util.Map<java.lang.String, org.eclipse.birt.report.data.oda.jdbc.ui.model.RootNode.TablesAndProcedures> schemas = new java.util.HashMap<java.lang.String, org.eclipse.birt.report.data.oda.jdbc.ui.model.RootNode.TablesAndProcedures>(); java.lang.String[] tableTypes = fc.getTableTypesForJDBC(); if (tableTypes != null) { java.sql.ResultSet rs = org.eclipse.birt.report.data.oda.jdbc.ui.provider.JdbcMetaDataProvider.getInstance().getAlltables(fc.getSchemaName(), fc.getNamePattern(), fc.getTableTypesForJDBC()); if (rs != null) { try { while (rs.next()) { java.lang.String schemaName = rs.getString("TABLE_SCHEM"); java.lang.String tableName = rs.getString("TABLE_NAME"); java.lang.String type = rs.getString("TABLE_TYPE"); org.eclipse.birt.report.data.oda.jdbc.ui.model.TableNode table = new org.eclipse.birt.report.data.oda.jdbc.ui.model.TableNode(null, tableName, "VIEW".equalsIgnoreCase(type)); org.eclipse.birt.report.data.oda.jdbc.ui.model.RootNode.TablesAndProcedures tap = schemas.get(schemaName); if (tap == null) { tap = new org.eclipse.birt.report.data.oda.jdbc.ui.model.RootNode.TablesAndProcedures(); schemas.put(schemaName, tap); } if ((tap.getTableCount()) < (fc.getMaxTableCountPerSchema())) { tap.addTable(table); } } } catch (java.sql.SQLException e) { org.eclipse.birt.report.data.oda.jdbc.ui.model.RootNode.logger.log(java.util.logging.Level.WARNING, e.getLocalizedMessage(), e); } } } if (supportsProcedure && (((fc.getType()) == (FilterConfig.Type.ALL)) || ((fc.getType()) == (FilterConfig.Type.PROCEDURE)))) { java.sql.ResultSet rs = org.eclipse.birt.report.data.oda.jdbc.ui.provider.JdbcMetaDataProvider.getInstance().getProcedures(fc.getSchemaName(), fc.getNamePattern()); if (rs != null) { try { while (rs.next()) { java.lang.String schemaName = rs.getString("PROCEDURE_SCHEM"); java.lang.String procedureName = rs.getString("PROCEDURE_NAME"); org.eclipse.birt.report.data.oda.jdbc.ui.model.ProcedureNode procedure = new org.eclipse.birt.report.data.oda.jdbc.ui.model.ProcedureNode(schemaName, procedureName); org.eclipse.birt.report.data.oda.jdbc.ui.model.RootNode.TablesAndProcedures tap = schemas.get(schemaName); if (tap == null) { tap = new org.eclipse.birt.report.data.oda.jdbc.ui.model.RootNode.TablesAndProcedures(); schemas.put(schemaName, tap); } tap.addProcedure(procedure); } } catch (java.sql.SQLException e) { org.eclipse.birt.report.data.oda.jdbc.ui.model.RootNode.logger.log(java.util.logging.Level.WARNING, e.getLocalizedMessage(), e); } } } return schemas; }
public void startContainer(org.eclipse.birt.report.engine.content.IContent content, boolean isFirst, org.eclipse.birt.report.engine.emitter.IContentEmitter emitter, boolean visible) throws org.eclipse.birt.core.exception.BirtException { switch (content.getContentType()) { case org.eclipse.birt.report.engine.content.IContent.TABLE_CONTENT : (nestCount)++; if ((buffers) == null) { org.eclipse.birt.report.engine.content.ITableContent table = ((org.eclipse.birt.report.engine.content.ITableContent) (content)); boolean hasPageBreak = hasPageBreak(table); if (hasPageBreak) { if ((currentTableIndex) < 0) { org.eclipse.birt.report.engine.layout.html.buffer.INode[] nodeList = currentBuffer.getNodeStack(); pageBreakIndexs = getPageBreakIndex(table); repeatEnd = getRepeatEnd(table); currentBuffer.startContainer(createTable(table, pageBreakIndexs, 0), isFirst, emitter, visible); currentTableIndex = nestCount; buffers = new org.eclipse.birt.report.engine.layout.html.buffer.IPageBuffer[pageBreakIndexs.length]; buffers[0] = currentBuffer; java.lang.String tableId = table.getInstanceID().toUniqueString(); currentBuffer.addTableColumnHint(new org.eclipse.birt.report.engine.presentation.TableColumnHint(tableId, 0, ((pageBreakIndexs[0]) + 1))); for (int i = 1; i < (pageBreakIndexs.length); i++) { buffers[i] = new org.eclipse.birt.report.engine.layout.html.buffer.TableBreakBuffer(null, context); org.eclipse.birt.report.engine.layout.html.buffer.INode[] list = new org.eclipse.birt.report.engine.layout.html.buffer.INode[(nodeList.length) + 1]; org.eclipse.birt.report.engine.content.ITableContent newTable = createTable(table, pageBreakIndexs, i); list[0] = new org.eclipse.birt.report.engine.layout.html.buffer.ContainerBufferNode(newTable, emitter, null, true); for (int j = 0; j < (nodeList.length); j++) { list[(j + 1)] = nodeList[j]; } buffers[i].openPage(list); if ((hasRepeatedColumn) && ((repeatEnd) > (repeatStart))) { buffers[i].addTableColumnHint(new org.eclipse.birt.report.engine.presentation.TableColumnHint(tableId, repeatStart, ((repeatEnd) - (repeatStart)))); } buffers[i].addTableColumnHint(new org.eclipse.birt.report.engine.presentation.TableColumnHint(tableId, ((pageBreakIndexs[(i - 1)]) + 1), ((pageBreakIndexs[i]) - (pageBreakIndexs[(i - 1)])))); } } } else { currentBuffer.startContainer(content, isFirst, emitter, visible); } } else { currentBuffer.startContainer(content, isFirst, emitter, visible); } break; case org.eclipse.birt.report.engine.content.IContent.TABLE_GROUP_CONTENT : case org.eclipse.birt.report.engine.content.IContent.TABLE_BAND_CONTENT : case org.eclipse.birt.report.engine.content.IContent.ROW_CONTENT : if (((currentTableIndex) == (nestCount)) && ((currentTableIndex) > 0)) { currentIndex = 0; currentBuffer = buffers[0]; startContainerInPages(content, isFirst, emitter, visible); if (hasRepeatedColumn) { repeatEvent.clear(); } } else { currentBuffer.startContainer(content, isFirst, emitter, visible); } break; case org.eclipse.birt.report.engine.content.IContent.CELL_CONTENT : if (((currentTableIndex) == (nestCount)) && ((currentTableIndex) > 0)) { if ((hasRepeatedColumn) && (isRepeatedCell(((org.eclipse.birt.report.engine.content.ICellContent) (content))))) { isRepeatStatus = true; } int index = getStartPageIndex(((org.eclipse.birt.report.engine.content.ICellContent) (content))); if (index != (currentIndex)) { currentIndex = index; repeatCells(emitter); } currentBuffer = buffers[currentIndex]; if (isRepeatCellContent) { if ((currentIndex) >= 1) { org.eclipse.birt.report.engine.content.ICellContent cc = ((org.eclipse.birt.report.engine.content.ICellContent) (content)); int start = cc.getColumn(); if (start > ((pageBreakIndexs[((currentIndex) - 1)]) + 1)) repeatCellContent(emitter); repeatCellContentEvent.clear(); isRepeatCellContent = false; } } if (((org.eclipse.birt.report.engine.content.ICellContent) (content)).repeatContent()) { int colSpan = ((org.eclipse.birt.report.engine.content.ICellContent) (content)).getColSpan(); if (colSpan > 1) { int col = ((org.eclipse.birt.report.engine.content.ICellContent) (content)).getColumn(); if ((col + colSpan) > ((pageBreakIndexs[currentIndex]) + 1)) { isRepeatCellContent = true; } } } } currentBuffer.startContainer(content, isFirst, emitter, visible); break; default : currentBuffer.startContainer(content, isFirst, emitter, visible); break; } if (isRepeatStatus) { repeatEvent.add(new org.eclipse.birt.report.engine.layout.html.buffer.TableBreakBuffer.ContentEvent(content, visible, org.eclipse.birt.report.engine.layout.html.buffer.TableBreakBuffer.ContentEvent.START_CONTAINER_EVENT)); } if (isRepeatCellContent) { repeatCellContentEvent.add(new org.eclipse.birt.report.engine.layout.html.buffer.TableBreakBuffer.ContentEvent(content, visible, org.eclipse.birt.report.engine.layout.html.buffer.TableBreakBuffer.ContentEvent.START_CONTAINER_EVENT)); } }
public java.lang.String invoke(int command, java.lang.String value, final java.lang.Object context, java.lang.String sTitle) throws org.eclipse.birt.chart.exception.ChartException { final org.eclipse.birt.report.designer.ui.dialogs.ExpressionProvider ep = new org.eclipse.birt.chart.reportitem.ui.dialogs.ChartExpressionProvider(((org.eclipse.birt.report.model.api.ExtendedItemHandle) (context)), getExpressionBuilderStyle(command)); org.eclipse.swt.widgets.Shell shell = null; switch (command) { case COMMAND_HYPERLINK : case COMMAND_HYPERLINK_DATAPOINTS : shell = new org.eclipse.swt.widgets.Shell(org.eclipse.swt.widgets.Display.getDefault(), (((org.eclipse.swt.SWT.DIALOG_TRIM) | (org.eclipse.swt.SWT.RESIZE)) | (org.eclipse.swt.SWT.APPLICATION_MODAL))); org.eclipse.birt.chart.ui.util.ChartUIUtil.bindHelp(shell, ChartHelpContextIds.DIALOG_EDIT_URL); org.eclipse.birt.report.designer.ui.dialogs.HyperlinkBuilder hb = new org.eclipse.birt.report.designer.ui.dialogs.HyperlinkBuilder(shell, true) { protected void configureExpressionBuilder(org.eclipse.birt.report.designer.ui.dialogs.ExpressionBuilder builder) { builder.setExpressionProvier(ep); } }; try { hb.setInputString(value, extendedHandle); if (sTitle != null) { hb.setTitle((((hb.getTitle()) + " - ") + sTitle)); } if ((hb.open()) == (org.eclipse.jface.window.Window.OK)) { value = hb.getResultString(); } } catch (java.lang.Exception e) { throw new org.eclipse.birt.chart.exception.ChartException(ChartReportItemUIActivator.ID, org.eclipse.birt.chart.exception.ChartException.UNDEFINED_VALUE, e); } break; case COMMAND_EXPRESSION_CHART_DATAPOINTS : case COMMAND_EXPRESSION_DATA_BINDINGS : case COMMAND_EXPRESSION_TRIGGERS_SIMPLE : case COMMAND_EXPRESSION_TRIGGERS_DATAPOINTS : shell = new org.eclipse.swt.widgets.Shell(org.eclipse.swt.widgets.Display.getDefault(), (((org.eclipse.swt.SWT.DIALOG_TRIM) | (org.eclipse.swt.SWT.RESIZE)) | (org.eclipse.swt.SWT.APPLICATION_MODAL))); org.eclipse.birt.chart.ui.util.ChartUIUtil.bindHelp(shell, ChartHelpContextIds.DIALOG_EXPRESSION_BUILDER); org.eclipse.birt.report.designer.ui.dialogs.ExpressionBuilder eb = new org.eclipse.birt.report.designer.ui.dialogs.ExpressionBuilder(shell, value); eb.setExpressionProvier(ep); if (sTitle != null) { eb.setDialogTitle((((eb.getDialogTitle()) + " - ") + sTitle)); } if ((eb.open()) == (org.eclipse.jface.window.Window.OK)) { value = eb.getResult(); } } return value; }
public PropertyHandleTableViewer(org.eclipse.swt.widgets.Composite parent, boolean showMenus, boolean showButtons, boolean enableKeyStrokes) { mainControl = new org.eclipse.swt.widgets.Composite(parent, org.eclipse.swt.SWT.NONE); org.eclipse.swt.layout.GridLayout layout = new org.eclipse.swt.layout.GridLayout(); layout.numColumns = 2; mainControl.setLayout(layout); org.eclipse.swt.layout.GridData data = null; viewer = new org.eclipse.jface.viewers.TableViewer(mainControl, org.eclipse.swt.SWT.FULL_SELECTION); data = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_BOTH); viewer.getControl().setLayoutData(data); viewer.getTable().setHeaderVisible(true); viewer.getTable().setLinesVisible(true); if (showButtons) { org.eclipse.swt.widgets.Composite btnComposite = new org.eclipse.swt.widgets.Composite(mainControl, org.eclipse.swt.SWT.NONE); data = new org.eclipse.swt.layout.GridData(); data.verticalAlignment = org.eclipse.swt.SWT.CENTER; btnComposite.setLayoutData(data); org.eclipse.swt.layout.GridLayout btnLayout = new org.eclipse.swt.layout.GridLayout(); layout.verticalSpacing = 20; btnComposite.setLayout(btnLayout); org.eclipse.swt.layout.GridData btnData = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.CENTER); btnData.widthHint = 20; btnData.heightHint = 20; btnUp = new org.eclipse.swt.widgets.Button(btnComposite, ((org.eclipse.swt.SWT.ARROW) | (org.eclipse.swt.SWT.UP))); btnUp.setLayoutData(btnData); btnUp.addSelectionListener(new org.eclipse.swt.events.SelectionListener() { public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { int index = viewer.getTable().getSelectionIndex(); org.eclipse.birt.report.model.api.PropertyHandle handle = ((org.eclipse.birt.report.model.api.PropertyHandle) (viewer.getInput())); if (((index > 0) && ((handle.getListValue()) != null)) && (index < (handle.getListValue().size()))) { viewer.cancelEditing(); try { handle.moveItem(index, (index - 1)); } catch (org.eclipse.birt.report.model.api.metadata.PropertyValueException e1) { org.eclipse.birt.report.designer.internal.ui.util.ExceptionHandler.handle(e1); } viewer.refresh(); viewer.getTable().select((index - 1)); } } public void widgetDefaultSelected(org.eclipse.swt.events.SelectionEvent e) { } }); btnData = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.CENTER); btnData.widthHint = 20; btnData.heightHint = 20; btnRemove = new org.eclipse.swt.widgets.Button(btnComposite, org.eclipse.swt.SWT.PUSH); btnRemove.setImage(org.eclipse.ui.PlatformUI.getWorkbench().getSharedImages().getImage(ISharedImages.IMG_TOOL_DELETE)); btnRemove.setLayoutData(btnData); btnRemove.addSelectionListener(new org.eclipse.swt.events.SelectionListener() { public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { removeSelectedItem(); } public void widgetDefaultSelected(org.eclipse.swt.events.SelectionEvent e) { } }); btnData = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.CENTER); btnData.widthHint = 20; btnData.heightHint = 20; btnDown = new org.eclipse.swt.widgets.Button(btnComposite, ((org.eclipse.swt.SWT.ARROW) | (org.eclipse.swt.SWT.DOWN))); btnDown.setLayoutData(btnData); btnDown.addSelectionListener(new org.eclipse.swt.events.SelectionListener() { public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { int index = viewer.getTable().getSelectionIndex(); org.eclipse.birt.report.model.api.PropertyHandle handle = ((org.eclipse.birt.report.model.api.PropertyHandle) (viewer.getInput())); if (((index > (-1)) && ((handle.getListValue()) != null)) && (index < ((handle.getListValue().size()) - 1))) { viewer.cancelEditing(); try { handle.moveItem(index, (index + 2)); } catch (org.eclipse.birt.report.model.api.metadata.PropertyValueException e1) { org.eclipse.birt.report.designer.internal.ui.util.ExceptionHandler.handle(e1); } viewer.refresh(); viewer.getTable().select((index + 1)); } } public void widgetDefaultSelected(org.eclipse.swt.events.SelectionEvent e) { } }); } if (showMenus) { menu = new org.eclipse.swt.widgets.Menu(viewer.getTable()); menu.addMenuListener(new org.eclipse.swt.events.MenuAdapter() { public void menuShown(org.eclipse.swt.events.MenuEvent e) { viewer.cancelEditing(); } }); itmRemove = new org.eclipse.swt.widgets.MenuItem(menu, org.eclipse.swt.SWT.NONE); itmRemove.setText(org.eclipse.birt.report.designer.nls.Messages.getString("PropertyHandleTableViewer.Menu.Remove")); itmRemove.addSelectionListener(new org.eclipse.swt.events.SelectionAdapter() { public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { removeSelectedItem(); } }); itmRemoveAll = new org.eclipse.swt.widgets.MenuItem(menu, org.eclipse.swt.SWT.NONE); itmRemoveAll.setText(org.eclipse.birt.report.designer.nls.Messages.getString("PropertyHandleTableViewer.Menu.RemoveAll")); itmRemoveAll.addSelectionListener(new org.eclipse.swt.events.SelectionAdapter() { public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { try { org.eclipse.birt.report.model.api.PropertyHandle handle = ((org.eclipse.birt.report.model.api.PropertyHandle) (viewer.getInput())); handle.clearValue(); viewer.refresh(); } catch (org.eclipse.birt.report.model.api.activity.SemanticException e1) { e1.printStackTrace(); } } }); viewer.getTable().setMenu(menu); } if (enableKeyStrokes) { viewer.getTable().addKeyListener(new org.eclipse.swt.events.KeyListener() { public void keyPressed(org.eclipse.swt.events.KeyEvent e) { } public void keyReleased(org.eclipse.swt.events.KeyEvent e) { if ((e.keyCode) == (org.eclipse.swt.SWT.DEL)) { removeSelectedItem(); } } }); } }
protected void processTemplateContent(org.eclipse.birt.report.engine.content.IForeignContent foreignContent) { assert IForeignContent.TEMPLATE_TYPE.equals(foreignContent.getRawType()); if ((foreignContent.getGenerateBy()) instanceof org.eclipse.birt.report.engine.ir.TextItemDesign) { org.eclipse.birt.report.engine.ir.TextItemDesign design = ((org.eclipse.birt.report.engine.ir.TextItemDesign) (foreignContent.getGenerateBy())); java.lang.String text = null; java.util.HashMap rawValues = null; if ((foreignContent.getRawValue()) instanceof java.lang.Object[]) { java.lang.Object[] rawValue = ((java.lang.Object[]) (foreignContent.getRawValue())); assert (rawValue.length) == 2; assert ((rawValue[0]) == null) || ((rawValue[0]) instanceof java.lang.String); if ((rawValue[0]) != null) { text = ((java.lang.String) (rawValue[0])); } if ((rawValue[1]) instanceof java.util.HashMap) { rawValues = ((java.util.HashMap) (rawValue[1])); } } if (text == null) { org.eclipse.birt.report.engine.ir.Expression<java.lang.String> textKeyValue = design.getTextKey(); java.lang.String textKey = (textKeyValue == null) ? null : textKeyValue.getValue(); org.eclipse.birt.report.engine.ir.Expression<java.lang.String> textValue = design.getText(); java.lang.String textContent = (textValue == null) ? null : textValue.getValue(); text = localize(foreignContent, textKey, textContent); } try { org.eclipse.birt.core.template.TextTemplate template = parseTemplate(text); java.lang.String result = executeTemplate(template, rawValues); foreignContent.setRawType(IForeignContent.HTML_TYPE); foreignContent.setRawValue(result); } catch (org.eclipse.birt.core.exception.BirtException ex) { context.addException(design, ex); } } }
private void updateActionTypeItems() { org.eclipse.birt.chart.model.attribute.TriggerCondition condition = org.eclipse.birt.chart.model.attribute.TriggerCondition.getByName(LiteralHelper.triggerConditionSet.getNameByDisplayName(cmbTriggerType.getText())); cmbActionType.setItems(this.triggerMatrix.getSupportedActionsDisplayName(condition)); cmbActionType.add(org.eclipse.birt.chart.ui.extension.i18n.Messages.getString(("TriggerDataComposite.Lbl.None." + (condition.getName()))), 0); }
protected void writeOverridenPropertyValues(org.eclipse.birt.report.model.core.DesignElement obj) { if ((obj.getExtendsElement()) == null) return; writer.conditionalStartElement(DesignSchemaConstants.OVERRIDDEN_VALUES_TAG); java.util.Iterator iter = new org.eclipse.birt.report.model.util.ContentIterator(obj); while (iter.hasNext()) { org.eclipse.birt.report.model.core.DesignElement virtualElement = ((org.eclipse.birt.report.model.core.DesignElement) (iter.next())); if (((!(virtualElement.hasLocalPropertyValues())) && ((virtualElement.getStyle()) == null)) && (org.eclipse.birt.report.model.api.util.StringUtil.isBlank(virtualElement.getName()))) continue; writer.conditionalStartElement(DesignSchemaConstants.REF_ENTRY_TAG); long baseId = virtualElement.getBaseId(); writer.attribute(DesignSchemaConstants.BASE_ID_ATTRIB, new java.lang.Long(baseId).toString()); writer.attribute(DesignSchemaConstants.NAME_ATTRIB, virtualElement.getName()); assert (virtualElement.getExtendsElement()) == null; java.util.List propDefns = virtualElement.getPropertyDefns(); for (int i = 0; i < (propDefns.size()); i++) { org.eclipse.birt.report.model.metadata.PropertyDefn propDefn = ((org.eclipse.birt.report.model.metadata.PropertyDefn) (propDefns.get(i))); if (DesignElement.NAME_PROP.equalsIgnoreCase(propDefn.getName())) continue; boolean cdata = false; if ((propDefn.getTypeCode()) == (org.eclipse.birt.report.model.metadata.PropertyType.SCRIPT_TYPE)) cdata = true; if ((propDefn.getTypeCode()) == (org.eclipse.birt.report.model.metadata.PropertyType.STRUCT_TYPE)) { if (propDefn.isList()) writeStructureList(virtualElement, propDefn.getName()); else writeStructure(virtualElement, propDefn.getName()); } else writeProperty(virtualElement, null, propDefn.getName(), cdata); } writer.endElement(); } writer.endElement(); }
protected java.util.Map getParsedParametersAsStringWithDefaultValue(java.util.Map parsedParameters, javax.servlet.http.HttpServletRequest request, org.eclipse.birt.report.service.api.InputOptions options) throws org.eclipse.birt.report.service.api.ReportServiceException { if (parsedParameters == null) { parsedParameters = new java.util.HashMap(); return parsedParameters; } for (java.util.Iterator iter = parsedParameters.keySet().iterator(); iter.hasNext();) { java.lang.String paramName = iter.next().toString(); java.lang.Object paramValue = parsedParameters.get(paramName); if (((paramValue == null) && (!(org.eclipse.birt.report.utility.ParameterAccessor.isReportParameterExist(request, paramName)))) && (((IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(request.getServletPath())) || ((this.configMap) == null)) || (!(this.configMap.containsKey(paramName))))) { paramValue = this.getParameterDefaultValues(reportDesignHandle, paramName, options); parsedParameters.put(paramName, paramValue); } } return parsedParameters; }
public java.lang.Object[] getElements(java.lang.Object inputElement) { types = new org.eclipse.birt.report.designer.data.ui.dataset.DataSourceType[((java.util.Collection) (inputElement)).size()]; java.util.Iterator iter = ((java.util.Collection) (inputElement)).iterator(); int i = 0; while (iter.hasNext()) { types[i] = ((org.eclipse.birt.report.designer.data.ui.dataset.DataSourceType) (iter.next())); i++; } setPageComplete(false); return types; }
public org.eclipse.swt.widgets.Composite createDataDragSource(org.eclipse.swt.widgets.Composite parent) { cmpStack = new org.eclipse.swt.widgets.Composite(parent, org.eclipse.swt.SWT.NONE); cmpStack.setLayoutData(new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_BOTH)); stackLayout = new org.eclipse.swt.custom.StackLayout(); stackLayout.marginHeight = 0; stackLayout.marginWidth = 0; cmpStack.setLayout(stackLayout); cmpCubeTree = org.eclipse.birt.chart.ui.util.ChartUIUtil.createCompositeWrapper(cmpStack); cmpDataPreview = org.eclipse.birt.chart.ui.util.ChartUIUtil.createCompositeWrapper(cmpStack); org.eclipse.swt.widgets.Label label = new org.eclipse.swt.widgets.Label(cmpCubeTree, org.eclipse.swt.SWT.NONE); { label.setText(org.eclipse.birt.chart.reportitem.ui.i18n.Messages.getString("StandardChartDataSheet.Label.CubeTree")); label.setFont(org.eclipse.jface.resource.JFaceResources.getBannerFont()); } if (!(dataProvider.isInXTabMeasureCell())) { org.eclipse.swt.widgets.Label description = new org.eclipse.swt.widgets.Label(cmpCubeTree, org.eclipse.swt.SWT.WRAP); { org.eclipse.swt.layout.GridData gd = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_HORIZONTAL); description.setLayoutData(gd); description.setText(org.eclipse.birt.chart.reportitem.ui.i18n.Messages.getString("StandardChartDataSheet.Label.DragCube")); } } cubeTreeViewer = new org.eclipse.jface.viewers.TreeViewer(cmpCubeTree, ((((org.eclipse.swt.SWT.SINGLE) | (org.eclipse.swt.SWT.H_SCROLL)) | (org.eclipse.swt.SWT.V_SCROLL)) | (org.eclipse.swt.SWT.BORDER))); cubeTreeViewer.getTree().setLayoutData(new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_BOTH)); ((org.eclipse.swt.layout.GridData) (cubeTreeViewer.getTree().getLayoutData())).heightHint = 120; org.eclipse.birt.report.designer.internal.ui.views.ViewsTreeProvider provider = new org.eclipse.birt.report.designer.internal.ui.views.ViewsTreeProvider(); cubeTreeViewer.setLabelProvider(provider); cubeTreeViewer.setContentProvider(provider); cubeTreeViewer.setInput(getCube()); final org.eclipse.swt.dnd.DragSource dragSource = new org.eclipse.swt.dnd.DragSource(cubeTreeViewer.getTree(), org.eclipse.swt.dnd.DND.DROP_COPY); dragSource.setTransfer(new org.eclipse.swt.dnd.Transfer[]{ org.eclipse.birt.chart.ui.swt.SimpleTextTransfer.getInstance() }); dragSource.addDragListener(new org.eclipse.swt.dnd.DragSourceListener() { private java.lang.String text = null; public void dragFinished(org.eclipse.swt.dnd.DragSourceEvent event) { } public void dragSetData(org.eclipse.swt.dnd.DragSourceEvent event) { event.data = text; } public void dragStart(org.eclipse.swt.dnd.DragSourceEvent event) { text = createCubeExpression(); if ((text) == null) { event.doit = false; } } }); cubeTreeViewer.getTree().addListener(SWT.MouseDown, new org.eclipse.swt.widgets.Listener() { public void handleEvent(org.eclipse.swt.widgets.Event event) { if (((event.button) == 3) && ((event.widget) instanceof org.eclipse.swt.widgets.Tree)) { org.eclipse.swt.widgets.Tree tree = ((org.eclipse.swt.widgets.Tree) (event.widget)); org.eclipse.swt.widgets.TreeItem treeItem = tree.getSelection()[0]; if (((treeItem.getData()) instanceof org.eclipse.birt.report.model.api.olap.LevelHandle) || ((treeItem.getData()) instanceof org.eclipse.birt.report.model.api.olap.MeasureHandle)) { tree.setMenu(createMenuManager(treeItem.getData()).createContextMenu(tree)); tree.getMenu().setVisible(true); } else { tree.setMenu(null); } } } }); label = new org.eclipse.swt.widgets.Label(cmpDataPreview, org.eclipse.swt.SWT.NONE); { label.setText(org.eclipse.birt.chart.reportitem.ui.i18n.Messages.getString("StandardChartDataSheet.Label.DataPreview")); label.setFont(org.eclipse.jface.resource.JFaceResources.getBannerFont()); } org.eclipse.swt.widgets.Label description = new org.eclipse.swt.widgets.Label(cmpDataPreview, org.eclipse.swt.SWT.WRAP); { org.eclipse.swt.layout.GridData gd = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_HORIZONTAL); description.setLayoutData(gd); description.setText(org.eclipse.birt.chart.reportitem.ui.i18n.Messages.getString("StandardChartDataSheet.Label.ToBindADataColumn")); } tablePreview = new org.eclipse.birt.chart.ui.swt.CustomPreviewTable(cmpDataPreview, ((((org.eclipse.swt.SWT.SINGLE) | (org.eclipse.swt.SWT.H_SCROLL)) | (org.eclipse.swt.SWT.V_SCROLL)) | (org.eclipse.swt.SWT.FULL_SELECTION))); { org.eclipse.swt.layout.GridData gridData = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_BOTH); gridData.widthHint = 400; gridData.heightHint = 120; tablePreview.setLayoutData(gridData); tablePreview.setHeaderAlignment(SWT.LEFT); tablePreview.addListener(CustomPreviewTable.MOUSE_RIGHT_CLICK_TYPE, this); } updateDragDataSource(); return cmpStack; }
protected org.eclipse.birt.report.engine.emitter.excel.Data addDataContent(org.eclipse.birt.report.engine.content.IDataContent data) { org.eclipse.birt.report.engine.emitter.excel.HyperlinkDef url = parseHyperLink(data); org.eclipse.birt.report.engine.emitter.excel.BookmarkDef bookmark = getBookmark(data); org.eclipse.birt.report.engine.emitter.excel.Data excelData = null; java.lang.Object generateBy = data.getGenerateBy(); org.eclipse.birt.report.engine.content.IStyle style = data.getComputedStyle(); org.eclipse.birt.report.engine.css.engine.value.DataFormatValue dataformat = style.getDataFormat(); org.eclipse.birt.report.engine.ir.MapDesign map = null; if (generateBy instanceof org.eclipse.birt.report.engine.ir.DataItemDesign) { org.eclipse.birt.report.engine.ir.DataItemDesign design = ((org.eclipse.birt.report.engine.ir.DataItemDesign) (generateBy)); map = design.getMap(); } if (((map != null) && ((map.getRuleCount()) > 0)) && ((data.getLabelText()) != null)) { excelData = engine.addData(data.getLabelText().trim(), style, url, bookmark); } else { java.lang.String locale = null; int type = org.eclipse.birt.report.engine.emitter.excel.ExcelUtil.getType(data.getValue()); if (type == (SheetData.STRING)) { if (dataformat != null) { locale = dataformat.getStringLocale(); } excelData = engine.addData(data.getText(), style, url, bookmark, locale); } else if (type == (Data.NUMBER)) { if (dataformat != null) { locale = dataformat.getStringLocale(); } excelData = engine.addData(data.getValue(), style, url, bookmark, locale); } else { if (dataformat != null) { locale = dataformat.getStringLocale(); } excelData = engine.addDateTime(data, style, url, bookmark, locale); } } return excelData; }
protected org.eclipse.birt.report.designer.ui.lib.explorer.PageRec doCreatePage(org.eclipse.ui.IWorkbenchPart part) { if (part instanceof org.eclipse.birt.report.designer.ui.editors.ReportEditor) { org.eclipse.ui.part.IPageBookViewPage page = new org.eclipse.birt.report.designer.ui.lib.explorer.LibraryExplorerTreeViewPage(); ((org.eclipse.birt.report.designer.ui.lib.explorer.LibraryExplorerTreeViewPage) (page)).setLibraryProvider(new org.eclipse.birt.report.designer.ui.lib.explorer.provider.LibraryProvider()); initPage(page); page.createControl(getPageBook()); return new org.eclipse.birt.report.designer.ui.lib.explorer.PageRec(part, page); } return null; }
public org.eclipse.birt.report.engine.content.IStyle getContentStyle() { if ((body) == null) { if ((generateBy) instanceof org.eclipse.birt.report.engine.ir.MasterPageDesign) { body = report.createCellContent(); body.setInlineStyle(((org.eclipse.birt.report.engine.ir.MasterPageDesign) (generateBy)).getContentStyle()); } } return body.getComputedStyle(); }
private void createExpressionField(org.eclipse.swt.widgets.Composite parent) { org.eclipse.swt.widgets.Composite expressionArea = new org.eclipse.swt.widgets.Composite(parent, org.eclipse.swt.SWT.NONE); expressionArea.setLayout(new org.eclipse.swt.layout.GridLayout(2, false)); expressionArea.setLayoutData(new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_BOTH)); org.eclipse.swt.widgets.Composite composite = new org.eclipse.swt.widgets.Composite(expressionArea, org.eclipse.swt.SWT.BORDER); composite.setLayoutData(new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_BOTH)); composite.setLayout(org.eclipse.birt.report.designer.internal.ui.util.UIUtil.createGridLayoutWithoutMargin()); org.eclipse.jface.text.source.CompositeRuler ruler = new org.eclipse.jface.text.source.CompositeRuler(); ruler.addDecorator(0, new org.eclipse.jface.text.source.LineNumberRulerColumn()); sourceViewer = new org.eclipse.jface.text.source.SourceViewer(composite, ruler, ((org.eclipse.swt.SWT.H_SCROLL) | (org.eclipse.swt.SWT.V_SCROLL))); sourceViewer.configure(new org.eclipse.birt.report.designer.internal.ui.dialogs.js.JSSourceViewerConfiguration()); if ((expression) != null) { org.eclipse.birt.report.designer.internal.ui.dialogs.js.JSEditorInput editorInput = new org.eclipse.birt.report.designer.internal.ui.dialogs.js.JSEditorInput(expression); org.eclipse.birt.report.designer.internal.ui.dialogs.js.JSDocumentProvider documentProvider = new org.eclipse.birt.report.designer.internal.ui.dialogs.js.JSDocumentProvider(); try { documentProvider.connect(editorInput); } catch (org.eclipse.core.runtime.CoreException e) { org.eclipse.birt.report.designer.internal.ui.util.ExceptionHandler.handle(e); } org.eclipse.jface.text.IDocument document = documentProvider.getDocument(editorInput); sourceViewer.setDocument(document); } org.eclipse.swt.layout.GridData gd = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_BOTH); gd.heightHint = 150; sourceViewer.getControl().setLayoutData(gd); if (org.eclipse.core.runtime.Platform.getOS().equals(org.eclipse.core.runtime.Platform.WS_WIN32)) { org.eclipse.swt.graphics.Font font = sourceViewer.getTextWidget().getFont(); org.eclipse.swt.graphics.FontData data = font.getFontData()[0]; org.eclipse.swt.graphics.Font newFont = org.eclipse.birt.report.designer.util.FontManager.getFont(data.getName(), ((data.getHeight()) + 1), data.getStyle()); sourceViewer.getTextWidget().setFont(newFont); } sourceViewer.getTextWidget().addKeyListener(new org.eclipse.swt.events.KeyAdapter() { public void keyPressed(org.eclipse.swt.events.KeyEvent e) { if (isUndoKeyPress(e)) { sourceViewer.doOperation(ITextOperationTarget.UNDO); } else if (isRedoKeyPress(e)) { sourceViewer.doOperation(ITextOperationTarget.REDO); } } private boolean isUndoKeyPress(org.eclipse.swt.events.KeyEvent e) { return (((e.stateMask) & (org.eclipse.swt.SWT.CONTROL)) > 0) && (((e.keyCode) == 'z') || ((e.keyCode) == 'Z')); } private boolean isRedoKeyPress(org.eclipse.swt.events.KeyEvent e) { return (((e.stateMask) & (org.eclipse.swt.SWT.CONTROL)) > 0) && (((e.keyCode) == 'y') || ((e.keyCode) == 'Y')); } }); buttonBar = new org.eclipse.swt.widgets.Composite(expressionArea, org.eclipse.swt.SWT.NONE); buttonBar.setLayout(org.eclipse.birt.report.designer.internal.ui.util.UIUtil.createGridLayoutWithoutMargin()); buttonBar.setLayoutData(new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_VERTICAL)); }
public void newPage(float pageWidth, float pageHeight, java.awt.Color backgroundColor) { (currentPageNum)++; imageInfos.clear(); if (pageWidth > (this.pageWidth)) { this.pageWidth = pageWidth; } if (pageHeight > (this.pageHeight)) { this.pageHeight = pageHeight; } println("--___Actuate_Content_Boundary___"); println((("Content-Location: s" + (currentPageNum)) + "")); println("Content-Transfer-Encoding: quoted-printable"); println("Content-Type: text/html; charset=\"utf-8\""); println(""); println("<html"); println(" xmlns=3D'http://www.w3.org/TR/REC-html40'"); println(" xmlns:o=3D'urn:schemas-microsoft-com:office:office'"); println(" xmlns:p=3D'urn:schemas-microsoft-com:office:powerpoint'"); println(" xmlns:v=3D'urn:schemas-microsoft-com:vml'"); println(">"); println("<head/><body><p:slide>"); println("<meta http-equiv=3D'Content-Type' content=3D'text/html; charset=3Dutf-8'>"); drawBackgroundColor(backgroundColor, 0, 0, pageWidth, pageHeight); }
public void doGet(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.io.IOException, javax.servlet.ServletException { if (!(__authenticate(request, response))) { return; } try { java.lang.String requestType = request.getHeader(ParameterAccessor.HEADER_REQUEST_TYPE); boolean isSoapRequest = ParameterAccessor.HEADER_REQUEST_TYPE_SOAP.equalsIgnoreCase(requestType); org.eclipse.birt.report.session.IViewingSession session = org.eclipse.birt.report.session.ViewingSessionUtil.getSession(request); if (((session == null) && (!isSoapRequest)) && (!(org.eclipse.birt.report.utility.ParameterAccessor.isGetImageOperator(request)))) { if ((org.eclipse.birt.report.session.ViewingSessionUtil.getSessionId(request)) == null) { session = org.eclipse.birt.report.session.ViewingSessionUtil.createSession(request); } else { throw new org.eclipse.birt.report.exception.ViewerException(org.eclipse.birt.report.resource.BirtResources.getMessage(ResourceConstants.GENERAL_ERROR_NO_VIEWING_SESSION)); } } org.eclipse.birt.report.context.IContext context = __getContext(request, response); if ((context.getBean().getException()) != null) { __handleNonSoapException(request, response, context.getBean().getException()); } else if (session != null) { session.lock(); try { if (isSoapRequest) { java.lang.Thread.currentThread().setContextClassLoader(this.getClass().getClassLoader()); super.doPost(request, response); } else { __doGet(context); } } finally { session.unlock(); if (((!(session.isLocked())) && (!(context.getBean().isShowParameterPage()))) && (org.eclipse.birt.report.utility.ParameterAccessor.isServlet(request, IBirtConstants.SERVLET_PATH_DOCUMENT))) { session.invalidate(); } } } } catch (org.eclipse.birt.core.exception.BirtException e) { __handleNonSoapException(request, response, e); } }
public void layout(org.eclipse.draw2d.IFigure parent) { org.eclipse.draw2d.geometry.Rectangle parentBounds = getInitSize(); org.eclipse.birt.report.designer.internal.ui.layout.Result result = getReportBounds(parentBounds); parentBounds = result.reportSize; parent.setBounds(parentBounds); java.util.List children = parent.getChildren(); org.eclipse.draw2d.geometry.Rectangle clientArea = parent.getClientArea(); int y = clientArea.y; int height = clientArea.height; org.eclipse.draw2d.IFigure figure; for (int i = 0; i < (children.size()); i++) { figure = ((org.eclipse.draw2d.IFigure) (children.get(i))); org.eclipse.draw2d.geometry.Rectangle bounds = ((org.eclipse.draw2d.geometry.Rectangle) (getConstraint(figure))); if (bounds == null) { continue; } bounds = convertRectangle(bounds, clientArea); figure.getBounds().width = bounds.width; org.eclipse.draw2d.geometry.Dimension preferredSize = figure.getPreferredSize(); bounds = bounds.getCopy(); if ((bounds.height) <= 0) { bounds.height = java.lang.Math.max(preferredSize.height, org.eclipse.birt.report.designer.internal.ui.layout.MasterPageLayout.MINIMUM_HEIGHT); } else if ((bounds.height) < (org.eclipse.birt.report.designer.internal.ui.layout.MasterPageLayout.MINIMUM_HEIGHT)) { bounds.height = org.eclipse.birt.report.designer.internal.ui.layout.MasterPageLayout.MINIMUM_HEIGHT; } if ((bounds.height) > height) { bounds.height = height; } if ((((bounds.y) + (bounds.height)) > (height + y)) || ((bounds.y) < y)) { bounds.y = (height + y) - (bounds.height); } figure.setBounds(bounds); } org.eclipse.draw2d.geometry.Rectangle rect = new org.eclipse.draw2d.geometry.Rectangle(0, 0, (((parentBounds.x) + (parentBounds.width)) + (result.rightSpace)), (((parentBounds.y) + (parentBounds.height)) + (result.bottomSpace))); setViewProperty(rect, parentBounds); }
public org.eclipse.datatools.connectivity.oda.IResultSet executeQuery() throws org.eclipse.datatools.connectivity.oda.OdaException { org.eclipse.birt.report.data.oda.jdbc.CallStatement.logger.logp(java.util.logging.Level.FINE, org.eclipse.birt.report.data.oda.jdbc.CallStatement.class.getName(), "executeQuery", "CallableStatement.executeQuery( )"); if ((this.cachedResultSet) != null) { org.eclipse.datatools.connectivity.oda.IResultSet ret = this.cachedResultSet; this.cachedResultSet = null; this.isExecuted = false; return ret; } if (!(maxRowsUpToDate)) { try { assertNotNull(callStat); callStat.setMaxRows(maxrows); } catch (java.sql.SQLException e1) { } maxRowsUpToDate = true; } registerOutputParameter(); java.sql.ResultSet rs = null; try { this.callStat.execute(); this.isExecuted = true; rs = this.callStat.getResultSet(); if ((rs == null) && ((callStat.getUpdateCount()) != (-1))) { while (true) { int rowCount = callStat.getUpdateCount(); if (rowCount != (-1)) { if (((callStat.getMoreResults()) == false) && ((callStat.getUpdateCount()) == (-1))) break; continue; } else { rs = callStat.getResultSet(); break; } } } if (rs != null) return new org.eclipse.birt.report.data.oda.jdbc.ResultSet(rs); this.populateOutputParamResultSet(); java.sql.ResultSet resultSet = ((this.outputParameterResultSetsMap.size()) == 0) ? null : this.outputParameterResultSetsMap.values().iterator().next(); if (resultSet != null) return new org.eclipse.birt.report.data.oda.jdbc.ResultSet(resultSet); else return new org.eclipse.birt.report.data.oda.jdbc.SPResultSet(null); } catch (java.sql.SQLException e) { throw new org.eclipse.birt.report.data.oda.jdbc.JDBCException(org.eclipse.birt.report.data.oda.i18n.ResourceConstants.RESULTSET_CANNOT_RETURN, e); } }
public void dispose() { if ((this.library) != null) { this.library.close(); this.library = null; } if ((this.childrenList) != null) { for (java.util.Iterator iterator = this.childrenList.iterator(); iterator.hasNext();) { org.eclipse.birt.report.designer.internal.ui.resourcelocator.ResourceEntry entry = ((org.eclipse.birt.report.designer.internal.ui.resourcelocator.ResourceEntry) (iterator.next())); entry.dispose(); } } }
public java.lang.Object execute(java.lang.Object[] args, org.eclipse.birt.core.script.functionservice.IScriptFunctionContext context) throws org.eclipse.birt.core.exception.BirtException { if (args == null) throw new java.lang.IllegalArgumentException(org.eclipse.birt.core.script.function.i18n.Messages.getString("error.arguement.cannot.empty")); if ((args.length) != (org.eclipse.birt.core.script.function.bre.BirtStr.Function_ToUpper.fixedArgumentNum)) throw new java.lang.IllegalArgumentException(org.eclipse.birt.core.script.function.i18n.Messages.getFormattedString("error.incorrect.number.function.fixedArgument", new java.lang.Object[]{ org.eclipse.birt.core.script.function.bre.BirtStr.Function_ToUpper.fixedArgumentNum, args.length })); if ((args[0]) instanceof java.lang.Object[]) { java.lang.Object[] objArray = ((java.lang.Object[]) (args[0])); java.lang.String[] strArray = new java.lang.String[objArray.length]; for (int i = 0; i < (objArray.length); i++) { if ((objArray[i]) == null) strArray[i] = null; else if ((objArray[i]) instanceof java.lang.String) strArray[i] = ((java.lang.String) (objArray[i])).toUpperCase(); else throw new java.lang.IllegalArgumentException(org.eclipse.birt.core.script.function.i18n.Messages.getString("error.incorrect.type.function.argument")); } return strArray; } else { if ((args[0]) == null) return null; if (!((args[0]) instanceof java.lang.String)) throw new java.lang.IllegalArgumentException(org.eclipse.birt.core.script.function.i18n.Messages.getString("error.incorrect.type.function.argument")); return ((java.lang.String) (args[0])).toUpperCase(); } }
protected void fillMenu(org.eclipse.swt.widgets.Menu menu) { org.eclipse.birt.report.engine.api.ReportEngine engine = new org.eclipse.birt.report.engine.api.ReportEngine(new org.eclipse.birt.report.engine.api.EngineConfig()); java.lang.String[] supportedFormats = engine.getSupportedFormats(); org.eclipse.swt.widgets.MenuItem previewWebViewer = new org.eclipse.swt.widgets.MenuItem(menu, org.eclipse.swt.SWT.PUSH); previewWebViewer.setText(org.eclipse.birt.report.designer.nls.Messages.getString("designer.preview.previewaction.label.webviewer")); previewWebViewer.setImage(previewIcon); previewWebViewer.addSelectionListener(new org.eclipse.swt.events.SelectionAdapter() { public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { preview("html", true); } }); for (int i = 0; i < (supportedFormats.length); i++) { final java.lang.String format = supportedFormats[i]; org.eclipse.swt.widgets.MenuItem previewOption = new org.eclipse.swt.widgets.MenuItem(menu, org.eclipse.swt.SWT.PUSH); previewOption.setText(org.eclipse.birt.report.designer.nls.Messages.getFormattedString("designer.preview.previewaction.label", new java.lang.Object[]{ format.toUpperCase() })); if (format.equals("pdf")) { previewOption.setImage(previewPDFIcon); } else { previewOption.setImage(previewIcon); } previewOption.addSelectionListener(new org.eclipse.swt.events.SelectionAdapter() { public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { preview(format, false); } }); } }
protected boolean checkPageBreak() throws org.eclipse.birt.core.exception.BirtException { boolean ret = false; if ((!(isInInlineStacking)) && (context.isAutoPageBreak())) { int aHeight = getAllocatedHeight(); while (((aHeight + (parent.getAbsoluteBP())) - 3000) > (context.getMaxBP())) { parent.autoPageBreak(); aHeight = getAllocatedHeight(); ret = true; } } return ret; }
public static java.lang.String parse(java.lang.String dateTime) { if (dateTime == null) { return ""; } if ((dateTime.indexOf("Date")) != (-1)) { java.lang.String dateFormat = null; org.eclipse.birt.core.format.DateFormatter dateFormatter = new org.eclipse.birt.core.format.DateFormatter(dateTime); return dateFormatter.getFormatCode(); } java.lang.StringBuffer buffer = new java.lang.StringBuffer(); boolean inQuto = false; for (int count = 0; count < (dateTime.length()); count++) { char tempChar = dateTime.charAt(count); if (inQuto) { if ((tempChar == '\'') && (org.eclipse.birt.report.engine.emitter.excel.ExcelUtil.nextIsQuto(dateTime, count))) { buffer.append(tempChar); count++; } else { if (tempChar == '\'') { inQuto = false; } else { buffer.append(tempChar); } } } else { if (tempChar == '\'') { if (org.eclipse.birt.report.engine.emitter.excel.ExcelUtil.nextIsQuto(dateTime, count)) { buffer.append(tempChar); count++; } else { inQuto = true; } } else { if (tempChar == 'a') { buffer.append("AM/PM"); continue; } if (("zZ,kKFWwGE".indexOf(tempChar)) != (-1)) { continue; } buffer.append(tempChar); } } } return buffer.toString(); }
public org.eclipse.birt.data.engine.odi.IResultIterator execute(org.eclipse.birt.data.engine.odi.IEventHandler eventHandler) throws org.eclipse.birt.data.engine.core.DataException { assert (odaStatement) != null; this.setInputParameterBinding(); if (!(odaStatement.execute())) throw new org.eclipse.birt.data.engine.core.DataException(org.eclipse.birt.data.engine.i18n.ResourceConstants.NO_RESULT_SET); org.eclipse.birt.data.engine.odaconsumer.ResultSet rs = odaStatement.getResultSet(); if ((resultMetadata) == null) { resultMetadata = rs.getMetaData(); if ((resultMetadata) == null) throw new org.eclipse.birt.data.engine.core.DataException(org.eclipse.birt.data.engine.i18n.ResourceConstants.METADATA_NOT_AVAILABLE); } if ((org.eclipse.birt.data.engine.executor.DataSetCacheManager.getInstance().doesSaveToCache()) == false) { if (!(hasOutputParams())) return new org.eclipse.birt.data.engine.executor.transform.CachedResultSet(this, resultMetadata, rs, eventHandler); else { org.eclipse.birt.data.engine.odi.IDataSetPopulator populator = new org.eclipse.birt.data.engine.executor.OdaResultSet(rs); return new org.eclipse.birt.data.engine.executor.transform.CachedResultSet(this, resultMetadata, populator, eventHandler); } } else return new org.eclipse.birt.data.engine.executor.transform.CachedResultSet(this, resultMetadata, new org.eclipse.birt.data.engine.executor.dscache.DataSetResultCache(rs, resultMetadata), eventHandler); }
org.eclipse.birt.report.model.api.DataSetHandle createSelectedDataSet() { org.eclipse.birt.report.model.api.DataSetHandle dataSetHandle = null; try { if (useODAV3) { dataSetHandle = createDataSetODAV3(); } else { dataSetHandle = createDataSetODAV2(); } if (((nameEditor) != null) && (!(nameEditor.isDisposed()))) dataSetHandle.setName(nameEditor.getText()); return dataSetHandle; } catch (org.eclipse.birt.report.model.api.activity.SemanticException e) { org.eclipse.birt.report.designer.internal.ui.util.ExceptionHandler.handle(e); return null; } catch (java.lang.IllegalStateException e) { org.eclipse.birt.report.designer.internal.ui.util.ExceptionHandler.handle(e); return null; } catch (org.eclipse.datatools.connectivity.oda.OdaException e) { org.eclipse.birt.report.designer.internal.ui.util.ExceptionHandler.handle(e); return null; } }
public boolean onBroughtToTop(org.eclipse.birt.report.designer.ui.editors.IReportEditorPage prePage) { if ((getEditorInput()) != (prePage.getEditorInput())) { setInput(prePage.getEditorInput()); } boolean bool = true; if (isDirtyModel()) { doSave(null); bool = false; } if ((prePage.isDirty()) && bool) { prePage.doSave(null); } boolean ret = refresh(); if ((ret == false) && (isMissingParameter())) { editor.setActivePage(prePage.getId()); } return ret; }
protected static int handleValidateTargetCanContainElementHandle(org.eclipse.birt.report.model.api.DesignElementHandle targetHandle, org.eclipse.birt.report.model.api.DesignElementHandle childHandle, boolean validateContainer) { if (targetHandle instanceof org.eclipse.birt.report.model.api.CascadingParameterGroupHandle) { return (childHandle.getContainer()) == targetHandle ? org.eclipse.birt.report.designer.util.DNDUtil.CONTAIN_THIS : org.eclipse.birt.report.designer.util.DNDUtil.CONTAIN_NO; } else if (targetHandle.canContain(org.eclipse.birt.report.designer.util.DEUtil.getDefaultSlotID(targetHandle), childHandle)) { return org.eclipse.birt.report.designer.util.DNDUtil.CONTAIN_THIS; } else if ((targetHandle instanceof org.eclipse.birt.report.model.api.ParameterGroupHandle) && (childHandle instanceof org.eclipse.birt.report.model.api.ParameterGroupHandle)) { return org.eclipse.birt.report.designer.util.DNDUtil.CONTAIN_THIS; } else if ((targetHandle instanceof org.eclipse.birt.report.model.api.ReportDesignHandle) && (childHandle instanceof org.eclipse.birt.report.model.api.ThemeHandle)) { return org.eclipse.birt.report.designer.util.DNDUtil.CONTAIN_THIS; } else if (targetHandle.canContain(org.eclipse.birt.report.designer.util.DEUtil.getDefaultContentName(targetHandle), childHandle)) { return org.eclipse.birt.report.designer.util.DNDUtil.CONTAIN_THIS; } else if (validateContainer) { if ((targetHandle.getContainer()) == null) { return org.eclipse.birt.report.designer.util.DNDUtil.CONTAIN_NO; } if ((targetHandle.getContainerSlotHandle()) == null) { if (!(targetHandle.getContainerPropertyHandle().getDefn().isList())) { return org.eclipse.birt.report.designer.util.DNDUtil.CONTAIN_NO; } } else if (!(targetHandle.getContainer().getDefn().getSlot(targetHandle.getContainerSlotHandle().getSlotID()).isMultipleCardinality())) { return org.eclipse.birt.report.designer.util.DNDUtil.CONTAIN_NO; } if (targetHandle.getClass().equals(childHandle.getClass())) { if (childHandle instanceof org.eclipse.birt.report.model.api.olap.LevelHandle) return org.eclipse.birt.report.designer.util.DNDUtil.CONTAIN_NO; return org.eclipse.birt.report.designer.util.DNDUtil.CONTAIN_PARENT; } if ((targetHandle.getContainerSlotHandle()) != null) { return targetHandle.getContainer().canContain(targetHandle.getContainerSlotHandle().getSlotID(), childHandle) ? org.eclipse.birt.report.designer.util.DNDUtil.CONTAIN_PARENT : org.eclipse.birt.report.designer.util.DNDUtil.CONTAIN_NO; } else if ((targetHandle.getContainerPropertyHandle()) != null) { return targetHandle.getContainer().canContain(targetHandle.getContainerPropertyHandle().getPropertyDefn().getName(), childHandle) ? org.eclipse.birt.report.designer.util.DNDUtil.CONTAIN_PARENT : org.eclipse.birt.report.designer.util.DNDUtil.CONTAIN_NO; } } return org.eclipse.birt.report.designer.util.DNDUtil.CONTAIN_NO; }
@java.lang.Override public boolean canSwitch(org.eclipse.birt.report.item.crosstab.ui.extension.SwitchCellInfo info) { org.eclipse.birt.report.item.crosstab.core.de.AggregationCellHandle cell = info.getAggregationCell(); if (cell != null) { if (((cell.getAggregationOnRow()) == null) && ((cell.getAggregationOnColumn()) == null)) { return false; } } org.eclipse.birt.report.item.crosstab.core.de.CrosstabReportItemHandle xtab = info.getCrosstab(); if (((info.getType()) == (org.eclipse.birt.report.item.crosstab.ui.extension.SwitchCellInfo.GRAND_TOTAL)) || ((info.getType()) == (org.eclipse.birt.report.item.crosstab.ui.extension.SwitchCellInfo.SUB_TOTAL))) { if (((xtab.getDimensionCount(ICrosstabConstants.ROW_AXIS_TYPE)) == 0) || ((xtab.getDimensionCount(ICrosstabConstants.COLUMN_AXIS_TYPE)) == 0)) { return false; } java.lang.Object content = org.eclipse.birt.chart.reportitem.ChartXTabUtil.getFirstContent(cell); if (org.eclipse.birt.chart.reportitem.ChartXTabUtil.isAxisChart(((org.eclipse.birt.report.model.api.DesignElementHandle) (content)))) { return false; } } if (((info.getCrosstab().getCube()) != null) && ((info.getMeasureInfo()) != null)) { if ((info.getMeasureInfo().getMeasureName()) == null) { return false; } java.lang.String dataType = info.getCrosstab().getCube().getMeasure(info.getMeasureInfo().getMeasureName()).getDataType(); return !(DesignChoiceConstants.COLUMN_DATA_TYPE_STRING.equals(dataType)); } return true; }
public boolean isReadOnly() { org.eclipse.birt.report.model.api.metadata.IElementDefn elementDefn = getElementHandle().getDefn(); if ((elementDefn.isPropertyReadOnly(propDefn.getName())) && (!(propDefn.isUserProperty()))) return true; org.eclipse.birt.report.model.core.Module root = ((getElement().getRoot()) == null) ? getModule() : getElement().getRoot(); assert root != null; if (root.isReadOnly()) return true; return false; }
protected void drawBackgroundImage(float x, float y, float width, float height, float iWidth, float iHeight, int repeat, java.lang.String imageUrl, float absPosX, float absPosY) throws java.io.IOException { y = transformY(y); contentByte.saveState(); try { com.lowagie.text.Image img = null; try { img = com.lowagie.text.Image.getInstance(new java.net.URL(imageUrl)); } catch (java.io.IOException e) { if (org.eclipse.birt.report.engine.util.SvgFile.isSvg(imageUrl)) { try { img = com.lowagie.text.Image.getInstance(org.eclipse.birt.report.engine.util.SvgFile.transSvgToArray(imageUrl)); } catch (java.io.IOException ex) { throw ex; } } else { throw e; } } float imageWidth = iWidth; float imageHeight = iHeight; if ((imageHeight == 0) || (imageWidth == 0)) { int resolutionX = img.getDpiX(); int resolutionY = img.getDpiY(); if ((0 == resolutionX) || (0 == resolutionY)) { resolutionX = 96; resolutionY = 96; } imageWidth = ((img.plainWidth()) / resolutionX) * 72; imageHeight = ((img.plainHeight()) / resolutionY) * 72; } if ((org.eclipse.birt.report.engine.nLayout.area.style.BackgroundImageInfo.NO_REPEAT) == repeat) { org.eclipse.birt.report.engine.emitter.pdf.PDFPage.TplValueTriple triple = computeTplHorizontalValPair(absPosX, x, width, imageWidth); float tplOriginX = triple.getTplOrigin(); float tplWidth = triple.getTplSize(); float translationX = triple.getTranslation(); triple = computeTplVerticalValTriple(absPosY, y, height, imageHeight); float tplOrininY = triple.getTplOrigin(); float tplHeight = triple.getTplSize(); float translationY = triple.getTranslation(); com.lowagie.text.pdf.PdfTemplate templateWhole = contentByte.createTemplate(tplWidth, tplHeight); templateWhole.addImage(img, imageWidth, 0, 0, imageHeight, translationX, translationY); contentByte.addTemplate(templateWhole, tplOriginX, tplOrininY); } else if ((org.eclipse.birt.report.engine.nLayout.area.style.BackgroundImageInfo.REPEAT_X) == repeat) { float remainX = width; com.lowagie.text.pdf.PdfTemplate template = null; if (width > imageWidth) { if ((height - absPosY) > imageHeight) { template = contentByte.createTemplate(imageWidth, imageHeight); template.addImage(img, imageWidth, 0, 0, imageHeight, 0, 0); } else { template = contentByte.createTemplate(imageWidth, height); template.addImage(img, imageWidth, 0, 0, imageHeight, 0, ((-imageHeight) + height)); } } while (remainX > 0) { if (remainX < imageWidth) { if ((height - absPosY) > imageHeight) { com.lowagie.text.pdf.PdfTemplate templateX = contentByte.createTemplate(remainX, imageHeight); templateX.addImage(img, imageWidth, 0, 0, imageHeight, 0, 0); contentByte.addTemplate(templateX, ((x + width) - remainX), ((y - absPosY) - imageHeight)); } else { com.lowagie.text.pdf.PdfTemplate templateX = contentByte.createTemplate(remainX, height); templateX.addImage(img, imageWidth, 0, 0, imageHeight, 0, (((-imageHeight) + height) - absPosY)); contentByte.addTemplate(templateX, ((x + width) - remainX), ((y - absPosY) - height)); } remainX = 0; } else { if ((height - absPosY) > imageHeight) contentByte.addTemplate(template, ((x + width) - remainX), ((y - absPosY) - imageHeight)); else contentByte.addTemplate(template, ((x + width) - remainX), ((y - absPosY) - height)); remainX -= imageWidth; } } } else if ((org.eclipse.birt.report.engine.nLayout.area.style.BackgroundImageInfo.REPEAT_Y) == repeat) { float remainY = height; com.lowagie.text.pdf.PdfTemplate template = null; if (height > imageHeight) { template = contentByte.createTemplate(((width - absPosX) > imageWidth ? imageWidth : width - absPosX), imageHeight); template.addImage(img, imageWidth, 0, 0, imageHeight, 0, 0); } while (remainY > 0) { if (remainY < imageHeight) { com.lowagie.text.pdf.PdfTemplate templateY = contentByte.createTemplate(((width - absPosX) > imageWidth ? imageWidth : width - absPosX), remainY); templateY.addImage(img, (width > imageWidth ? imageWidth : width - absPosX), 0, 0, imageHeight, 0, (-(imageHeight - remainY))); contentByte.addTemplate(templateY, (x + absPosX), (y - height)); remainY = 0; } else { contentByte.addTemplate(template, (x + absPosX), (((y - height) + remainY) - imageHeight)); remainY -= imageHeight; } } } else if ((org.eclipse.birt.report.engine.nLayout.area.style.BackgroundImageInfo.REPEAT) == repeat) { float remainX = width; float remainY = height; com.lowagie.text.pdf.PdfTemplate template = null; if ((width >= imageWidth) && (height >= imageHeight)) { template = contentByte.createTemplate(imageWidth, imageHeight); template.addImage(img, imageWidth, 0, 0, imageHeight, 0, 0); } while (remainY > 0) { remainX = width; if (remainY < imageHeight) { while (remainX > 0) { if (remainX < imageWidth) { com.lowagie.text.pdf.PdfTemplate templateXY = contentByte.createTemplate(remainX, remainY); templateXY.addImage(img, imageWidth, 0, 0, imageHeight, 0, ((-imageHeight) + remainY)); contentByte.addTemplate(templateXY, ((x + width) - remainX), (y - height)); remainX = 0; } else { com.lowagie.text.pdf.PdfTemplate templateY = contentByte.createTemplate(imageWidth, remainY); templateY.addImage(img, imageWidth, 0, 0, imageHeight, 0, ((-imageHeight) + remainY)); contentByte.addTemplate(templateY, ((x + width) - remainX), (y - height)); remainX -= imageWidth; } } remainY = 0; } else { while (remainX > 0) { if (remainX < imageWidth) { com.lowagie.text.pdf.PdfTemplate templateX = contentByte.createTemplate(remainX, imageHeight); templateX.addImage(img, imageWidth, 0, 0, imageHeight, 0, 0); contentByte.addTemplate(templateX, ((x + width) - remainX), (((y - height) + remainY) - imageHeight)); remainX = 0; } else { contentByte.addTemplate(template, ((x + width) - remainX), (((y - height) + remainY) - imageHeight)); remainX -= imageWidth; } } remainY -= imageHeight; } } } } catch (java.io.IOException ioe) { org.eclipse.birt.report.engine.emitter.pdf.PDFPage.logger.log(java.util.logging.Level.WARNING, ioe.getMessage(), ioe); } catch (com.lowagie.text.BadElementException bee) { org.eclipse.birt.report.engine.emitter.pdf.PDFPage.logger.log(java.util.logging.Level.WARNING, bee.getMessage(), bee); } catch (com.lowagie.text.DocumentException de) { org.eclipse.birt.report.engine.emitter.pdf.PDFPage.logger.log(java.util.logging.Level.WARNING, de.getMessage(), de); } catch (java.lang.RuntimeException re) { org.eclipse.birt.report.engine.emitter.pdf.PDFPage.logger.log(java.util.logging.Level.WARNING, re.getMessage(), re); } contentByte.restoreState(); }
public PDFPageDevice(java.io.OutputStream output, java.lang.String title, org.eclipse.birt.report.engine.api.script.IReportContext context, org.eclipse.birt.report.engine.content.IReportContent report) { this.context = context; this.report = report; doc = new com.lowagie.text.Document(); org.eclipse.birt.report.engine.emitter.pdf.PDFPage.reset(); try { writer = com.lowagie.text.pdf.PdfWriter.getInstance(doc, new java.io.BufferedOutputStream(output)); java.lang.String creator = (("BIRT Report Engine " + (org.eclipse.birt.report.engine.util.BundleVersionUtil.getBundleVersion("org.eclipse.birt.report.engine"))) + " using iText ") + (org.eclipse.birt.report.engine.util.BundleVersionUtil.getBundleVersion("com.lowagie.itext")); doc.addCreator(creator); if (null != title) doc.addTitle(title); } catch (com.lowagie.text.DocumentException de) { logger.log(java.util.logging.Level.SEVERE, de.getMessage(), de); } }
public void handleEvent(org.eclipse.swt.widgets.Event event) { if (((event.data) == (getDataSheet())) || ((event.data) instanceof org.eclipse.birt.chart.ui.swt.wizard.data.BaseDataDefinitionComponent)) { if ((event.type) == (org.eclipse.birt.chart.ui.swt.interfaces.IChartDataSheet.EVENT_PREVIEW)) { if ((getChartModel()) instanceof org.eclipse.birt.chart.model.ChartWithAxes) { checkDataTypeForChartWithAxes(); } doPreview(); updateApplyButton(); } else if ((event.type) == (org.eclipse.birt.chart.ui.swt.interfaces.IChartDataSheet.EVENT_QUERY)) { getCustomizeUI().refreshBottomBindingArea(); getCustomizeUI().refreshLeftBindingArea(); getCustomizeUI().refreshRightBindingArea(); org.eclipse.birt.chart.ui.swt.DataDefinitionTextManager.getInstance().refreshAll(); } } if ((event.type) == (org.eclipse.birt.chart.ui.swt.interfaces.IChartDataSheet.EVENT_QUERY)) { if (ChartUIConstants.QUERY_CATEGORY.equals(event.data)) { getCustomizeUI().refreshBottomBindingArea(); } else if (ChartUIConstants.QUERY_OPTIONAL.equals(event.data)) { getCustomizeUI().refreshRightBindingArea(); } else if (ChartUIConstants.QUERY_VALUE.equals(event.data)) { getCustomizeUI().refreshLeftBindingArea(); } org.eclipse.birt.chart.ui.swt.DataDefinitionTextManager.getInstance().refreshAll(); } else if ((event.type) == (org.eclipse.swt.SWT.Resize)) { autoSash(); } }
protected void handleSelectionChange(org.eclipse.birt.report.designer.core.util.mediator.request.ReportRequest request) { java.util.List list = request.getSelectionModelList(); if ((((request.getSource()) instanceof org.eclipse.birt.report.designer.internal.lib.views.outline.LibraryOutlinePage) || ((request.getSource()) instanceof org.eclipse.birt.report.designer.internal.ui.editors.schematic.editparts.TableEditPart)) && (!(isInContainer(list)))) { int size = list.size(); java.lang.Object obj = null; if (size != 0) { obj = list.get((size - 1)); org.eclipse.birt.report.designer.internal.lib.commands.SetCurrentEditModelCommand command = new org.eclipse.birt.report.designer.internal.lib.commands.SetCurrentEditModelCommand(obj); command.execute(); return; } } super.handleSelectionChange(request); }
public JavaUtilLoggerImpl(java.lang.String name) { this.logger = java.util.logging.Logger.getLogger(name); if ((org.eclipse.birt.chart.internal.log.JavaUtilLoggerImpl.fileHandler) != null) { if ((org.eclipse.birt.chart.internal.log.JavaUtilLoggerImpl.fileHandler.getLevel().intValue()) < (javaLevel.intValue())) { javaLevel = org.eclipse.birt.chart.internal.log.JavaUtilLoggerImpl.fileHandler.getLevel(); } this.logger.addHandler(org.eclipse.birt.chart.internal.log.JavaUtilLoggerImpl.fileHandler); this.logger.setUseParentHandlers(false); } if ((this.logger.getLevel()) == null) { this.logger.setLevel(javaLevel); } }
public org.eclipse.birt.report.model.api.CachedMetaDataHandle setCachedMetaData(org.eclipse.birt.report.model.api.elements.structures.CachedMetaData metadata) throws org.eclipse.birt.report.model.api.activity.SemanticException { setProperty(SimpleDataSet.CACHED_METADATA_PROP, metadata); if (metadata == null) return null; return ((org.eclipse.birt.report.model.api.CachedMetaDataHandle) (metadata.getHandle(getPropertyHandle(SimpleDataSet.CACHED_METADATA_PROP)))); }
public void startContainer(org.eclipse.birt.report.engine.content.IContent content, boolean isFirst, org.eclipse.birt.report.engine.emitter.IContentEmitter emitter, boolean visible) throws org.eclipse.birt.core.exception.BirtException { switch (content.getContentType()) { case org.eclipse.birt.report.engine.content.IContent.TABLE_CONTENT : (nestCount)++; if ((buffers) == null) { org.eclipse.birt.report.engine.content.ITableContent table = ((org.eclipse.birt.report.engine.content.ITableContent) (content)); boolean hasPageBreak = hasPageBreak(table); if (hasPageBreak) { if ((currentTableIndex) < 0) { org.eclipse.birt.report.engine.layout.html.buffer.INode[] nodeList = currentBuffer.getNodeStack(); pageBreakIndexs = getPageBreakIndex(table); repeatEnd = getRepeatEnd(table); currentBuffer.startContainer(createTable(table, pageBreakIndexs, 0), isFirst, emitter, visible); currentTableIndex = nestCount; buffers = new org.eclipse.birt.report.engine.layout.html.buffer.IPageBuffer[pageBreakIndexs.length]; buffers[0] = currentBuffer; java.lang.String tableId = table.getInstanceID().toUniqueString(); currentBuffer.addTableColumnHint(new org.eclipse.birt.report.engine.presentation.TableColumnHint(tableId, 0, ((pageBreakIndexs[0]) + 1))); for (int i = 1; i < (pageBreakIndexs.length); i++) { buffers[i] = new org.eclipse.birt.report.engine.layout.html.buffer.TableBreakBuffer(null, context); org.eclipse.birt.report.engine.layout.html.buffer.INode[] list = new org.eclipse.birt.report.engine.layout.html.buffer.INode[(nodeList.length) + 1]; org.eclipse.birt.report.engine.content.ITableContent newTable = createTable(table, pageBreakIndexs, i); list[0] = new org.eclipse.birt.report.engine.layout.html.buffer.ContainerBufferNode(newTable, emitter, null, true); for (int j = 0; j < (nodeList.length); j++) { list[(j + 1)] = nodeList[j]; } buffers[i].openPage(list); if ((hasRepeatedColumn) && ((repeatEnd) > (repeatStart))) { buffers[i].addTableColumnHint(new org.eclipse.birt.report.engine.presentation.TableColumnHint(tableId, repeatStart, ((repeatEnd) - (repeatStart)))); } buffers[i].addTableColumnHint(new org.eclipse.birt.report.engine.presentation.TableColumnHint(tableId, ((pageBreakIndexs[(i - 1)]) + 1), ((pageBreakIndexs[i]) - (pageBreakIndexs[(i - 1)])))); } } } else { currentBuffer.startContainer(content, isFirst, emitter, visible); } } else { currentBuffer.startContainer(content, isFirst, emitter, visible); } break; case org.eclipse.birt.report.engine.content.IContent.TABLE_GROUP_CONTENT : case org.eclipse.birt.report.engine.content.IContent.TABLE_BAND_CONTENT : case org.eclipse.birt.report.engine.content.IContent.ROW_CONTENT : if (((currentTableIndex) == (nestCount)) && ((currentTableIndex) > 0)) { currentIndex = 0; currentBuffer = buffers[0]; startContainerInPages(content, isFirst, emitter, visible); if (hasRepeatedColumn) { repeatEvent.clear(); } } else { currentBuffer.startContainer(content, isFirst, emitter, visible); } break; case org.eclipse.birt.report.engine.content.IContent.CELL_CONTENT : if (((currentTableIndex) == (nestCount)) && ((currentTableIndex) > 0)) { if ((hasRepeatedColumn) && (isRepeatedCell(((org.eclipse.birt.report.engine.content.ICellContent) (content))))) { isRepeatStatus = true; } int index = getStartPageIndex(((org.eclipse.birt.report.engine.content.ICellContent) (content))); if (index != (currentIndex)) { for (int i = (currentIndex) + 1; i <= index; i++) { currentBuffer = buffers[i]; repeatCells(emitter); } currentIndex = index; } currentBuffer = buffers[currentIndex]; if (isRepeatCellContent) { if ((currentIndex) >= 1) { org.eclipse.birt.report.engine.content.ICellContent cc = ((org.eclipse.birt.report.engine.content.ICellContent) (content)); int start = cc.getColumn(); if (start > ((pageBreakIndexs[((currentIndex) - 1)]) + 1)) repeatCellContent(emitter); repeatCellContentEvent.clear(); isRepeatCellContent = false; } } if (((org.eclipse.birt.report.engine.content.ICellContent) (content)).repeatContent()) { int colSpan = ((org.eclipse.birt.report.engine.content.ICellContent) (content)).getColSpan(); if (colSpan > 1) { int col = ((org.eclipse.birt.report.engine.content.ICellContent) (content)).getColumn(); if ((col + colSpan) > ((pageBreakIndexs[currentIndex]) + 1)) { isRepeatCellContent = true; } } } } currentBuffer.startContainer(content, isFirst, emitter, visible); break; default : currentBuffer.startContainer(content, isFirst, emitter, visible); break; } if (isRepeatStatus) { repeatEvent.add(new org.eclipse.birt.report.engine.layout.html.buffer.TableBreakBuffer.ContentEvent(content, visible, org.eclipse.birt.report.engine.layout.html.buffer.TableBreakBuffer.ContentEvent.START_CONTAINER_EVENT)); } if (isRepeatCellContent) { repeatCellContentEvent.add(new org.eclipse.birt.report.engine.layout.html.buffer.TableBreakBuffer.ContentEvent(content, visible, org.eclipse.birt.report.engine.layout.html.buffer.TableBreakBuffer.ContentEvent.START_CONTAINER_EVENT)); } }
public org.eclipse.birt.data.engine.api.IBinding adaptBinding(org.eclipse.birt.report.model.api.ComputedColumnHandle handle) throws org.eclipse.birt.report.data.adapter.api.AdapterException { if (handle == null) return null; org.eclipse.birt.data.engine.api.querydefn.Binding result = new org.eclipse.birt.data.engine.api.querydefn.Binding(handle.getName()); if ((handle.getExpression()) != null) result.setExpression(new org.eclipse.birt.data.engine.api.querydefn.ScriptExpression(handle.getExpression())); result.setDataType(org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.adaptModelDataType(handle.getDataType())); result.setAggrFunction(org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.adaptModelAggregationType(handle.getAggregateFunction())); result.setFilter(((handle.getFilterExpression()) == null ? null : new org.eclipse.birt.data.engine.api.querydefn.ScriptExpression(handle.getFilterExpression()))); org.eclipse.birt.report.data.adapter.impl.ModelAdapter.populateArgument(result, handle); populateAggregateOns(result, handle); return result; }
public java.lang.Object visitValue(org.eclipse.birt.core.template.TextTemplate.ValueNode node, java.lang.Object value) { java.lang.String expression = node.getValue(); if (expression != null) { expression = expression.trim(); if (("pageNumber".equals(expression)) || ("totalPage".equals(expression))) { java.lang.Object result = org.eclipse.birt.report.engine.util.ExpressionUtil.evaluate(context, org.eclipse.birt.report.engine.ir.Expression.newScript(expression)); java.lang.String text = formatValue(node, result); buffer.append(text); } else { java.lang.Object result = null; if ((values) != null) { java.lang.String keyExpr = node.getValue(); if (keyExpr != null) { keyExpr = keyExpr.trim(); } result = values.get(keyExpr); } java.lang.String text = formatValue(node, result); buffer.append(text); } } return value; }
private void copyNode(org.w3c.dom.Node srcNode, org.w3c.dom.Node desNode) { assert (srcNode != null) && (desNode != null); for (org.w3c.dom.Node child = srcNode.getFirstChild(); child != null; child = child.getNextSibling()) { if (((child.getNodeType()) == (org.w3c.dom.Node.TEXT_NODE)) || ((child.getNodeType()) == (org.w3c.dom.Node.CDATA_SECTION_NODE))) { org.w3c.dom.Text txtNode = desNode.getOwnerDocument().createTextNode(child.getNodeValue()); desNode.appendChild(txtNode); } else if ((child.getNodeType()) == (org.w3c.dom.Node.ELEMENT_NODE)) { boolean bSupported = false; if (org.eclipse.birt.report.engine.parser.HTMLTextParser.supportedTags.contains(child.getNodeName())) { bSupported = true; } else if (org.eclipse.birt.report.engine.parser.HTMLTextParser.hn.matcher(child.getNodeName()).matches()) { bSupported = true; } if (bSupported) { org.w3c.dom.Element ele = null; ele = desNode.getOwnerDocument().createElement(child.getNodeName()); for (int i = 0; i < (child.getAttributes().getLength()); i++) { org.w3c.dom.Node attr = child.getAttributes().item(i); ele.setAttribute(attr.getNodeName(), attr.getNodeValue()); } desNode.appendChild(ele); if ("value-of".equals(child.getNodeName())) { copyValueOf(child, ele); } else { copyNode(child, ele); } } else { copyNode(child, desNode); } } } }
public void end() { int slidesizex = ((int) (java.lang.Math.ceil(((pageWidth) * 8)))); int slidesizey = ((int) (java.lang.Math.ceil(((pageHeight) * 8)))); println("--___Actuate_Content_Boundary___"); println("Content-Location: presentation"); println("Content-Transfer-Encoding: quoted-printable"); println("Content-Type: text/xml; charset=\"utf-8\""); println(""); println("<xml"); println(" xmlns:o=3D'urn:schemas-microsoft-com:office:office'"); println(" xmlns:p=3D'urn:schemas-microsoft-com:office:powerpoint'"); println(">"); println((((("<p:presentation sizeof=3D'custom' slidesizex=3D'" + slidesizex) + "' slidesizey=3D'") + slidesizey) + "'>")); for (int i = 0; i < (currentPageNum); i++) { println((((("<p:slide id=3D'" + (i + 1)) + "' href=3D's") + (i + 1)) + "'/>")); } println("</p:presentation></xml>"); println(""); println("--___Actuate_Content_Boundary___"); println("Content-Location: file-list"); println("Content-Transfer-Encoding: quoted-printable"); println("Content-Type: text/xml; charset=\"utf-8\""); println("<xml"); println(" xmlns:o=3D'urn:schemas-microsoft-com:office:office'"); println(" xmlns:p=3D'urn:schemas-microsoft-com:office:powerpoint'"); println(">"); println("<o:MainFile href=3D'slide-show'/>"); println("<o:File href=3D'presentation'/>"); println("<o:File href=3D'file-list'/>"); for (int i = 0; i < (currentPageNum); i++) { println((("<o:File href=3D's" + (i + 1)) + "'/>")); if (fileNamesLists.containsKey(new java.lang.Integer((i + 1)))) { java.util.List filenames = ((java.util.List) (fileNamesLists.get(new java.lang.Integer((i + 1))))); for (java.util.Iterator ite = filenames.iterator(); ite.hasNext();) { println((("<o:File href=3D\"" + ((java.lang.String) (ite.next()))) + "\"/>")); } } } println("</xml>"); println(""); println("--___Actuate_Content_Boundary___--"); writer.close(); writer = null; }
private final boolean isValidPrecedingCharacter(int iCh) { return (((iCh == ' ') || (iCh == '\t')) || (iCh == '\r')) || (iCh == '\n'); }
protected org.eclipse.birt.report.service.api.IViewerReportDesignHandle getDesignHandle(javax.servlet.http.HttpServletRequest request) throws java.lang.Exception { org.eclipse.birt.report.service.api.IViewerReportDesignHandle design = null; org.eclipse.birt.report.engine.api.IReportRunnable reportRunnable = null; org.eclipse.birt.report.engine.api.IReportDocument reportDocumentInstance = null; boolean isDocumentExist = org.eclipse.birt.report.utility.ParameterAccessor.isReportParameterExist(request, ParameterAccessor.PARAM_REPORT_DOCUMENT); boolean isReportExist = org.eclipse.birt.report.utility.ParameterAccessor.isReportParameterExist(request, ParameterAccessor.PARAM_REPORT); if (isDocumentExist && (!isReportExist)) { boolean isValidDocument = org.eclipse.birt.report.utility.ParameterAccessor.isValidFilePath(org.eclipse.birt.report.utility.ParameterAccessor.getParameter(request, ParameterAccessor.PARAM_REPORT_DOCUMENT)); if (isValidDocument) { reportDocumentInstance = org.eclipse.birt.report.service.ReportEngineService.getInstance().openReportDocument(this.reportDesignName, this.reportDocumentName, this.moduleOptions); if (reportDocumentInstance != null) { reportRunnable = reportDocumentInstance.getReportRunnable(); } else { throw new org.eclipse.birt.report.exception.ViewerException(org.eclipse.birt.report.resource.ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_FILE_ERROR, new java.lang.String[]{ this.reportDocumentName }); } } else { throw new org.eclipse.birt.report.exception.ViewerException(org.eclipse.birt.report.resource.ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_ACCESS_ERROR, new java.lang.String[]{ this.reportDocumentName }); } } else if (isReportExist) { if (isDocumentExist && (!(org.eclipse.birt.report.utility.ParameterAccessor.isValidFilePath(org.eclipse.birt.report.utility.ParameterAccessor.getParameter(request, ParameterAccessor.PARAM_REPORT_DOCUMENT))))) { throw new org.eclipse.birt.report.exception.ViewerException(org.eclipse.birt.report.resource.ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_ACCESS_ERROR, new java.lang.String[]{ this.reportDocumentName }); } reportDocumentInstance = org.eclipse.birt.report.service.ReportEngineService.getInstance().openReportDocument(this.reportDesignName, this.reportDocumentName, this.moduleOptions); if (reportDocumentInstance != null) { reportRunnable = reportDocumentInstance.getReportRunnable(); } if (reportRunnable == null) { if (!(org.eclipse.birt.report.utility.ParameterAccessor.isValidFilePath(org.eclipse.birt.report.utility.ParameterAccessor.getParameter(request, ParameterAccessor.PARAM_REPORT)))) { throw new org.eclipse.birt.report.exception.ViewerException(org.eclipse.birt.report.resource.ResourceConstants.GENERAL_EXCEPTION_REPORT_ACCESS_ERROR, new java.lang.String[]{ this.reportDesignName }); } try { reportRunnable = org.eclipse.birt.report.utility.BirtUtility.getRunnableFromDesignFile(request, this.reportDesignName, this.moduleOptions); if (reportRunnable == null) { throw new org.eclipse.birt.report.exception.ViewerException(org.eclipse.birt.report.resource.ResourceConstants.GENERAL_EXCEPTION_REPORT_FILE_ERROR, new java.lang.String[]{ this.reportDesignName }); } } catch (org.eclipse.birt.report.engine.api.EngineException e) { this.exception = e; } } } if (reportDocumentInstance != null) { this.documentInUrl = true; this.parameterMap = reportDocumentInstance.getParameterValues(); if ((!(reportDocumentInstance.isComplete())) && isReportExist) this.isDocumentProcessing = true; reportDocumentInstance.close(); } if (reportRunnable != null) { design = new org.eclipse.birt.report.service.BirtViewerReportDesignHandle(org.eclipse.birt.report.service.api.IViewerReportDesignHandle.RPT_RUNNABLE_OBJECT, reportRunnable); } return design; }
public AggrSortDefinition(org.eclipse.birt.data.engine.olap.data.api.DimLevel[] aggrLevels, java.lang.String aggrName, org.eclipse.birt.data.engine.olap.data.api.DimLevel[] axisQualifierLevel, java.lang.Object[] axisQualifierValue, org.eclipse.birt.data.engine.olap.data.api.DimLevel targetLevel, boolean direction) throws org.eclipse.birt.data.engine.core.DataException { java.lang.Object[] params = new java.lang.Object[]{ aggrLevels, aggrName, axisQualifierLevel, axisQualifierValue, targetLevel, new java.lang.Boolean(direction) }; org.eclipse.birt.data.engine.olap.data.impl.aggregation.sort.AggrSortDefinition.logger.entering(org.eclipse.birt.data.engine.olap.data.impl.aggregation.sort.AggrSortDefinition.class.getName(), "AggrSortDefinition", params); checkAxisAgrument(axisQualifierLevel, axisQualifierValue); this.aggrLevels = aggrLevels; this.aggrName = aggrName; this.axisQualifierLevel = axisQualifierLevel; this.axisQualifierValue = axisQualifierValue; this.targetLevel = targetLevel; this.direction = direction; org.eclipse.birt.data.engine.olap.data.impl.aggregation.sort.AggrSortDefinition.logger.exiting(org.eclipse.birt.data.engine.olap.data.impl.aggregation.sort.AggrSortDefinition.class.getName(), "AggrSortDefinition"); }
static boolean isNullOrComments(java.lang.String script) { if (script == null) return true; try { java.lang.String scriptWithoutComments = script.replaceAll("(?:/\\*(?:[^*]|(?:\\*+[^*/]))*\\*+/)|(?://.*)", ""); if ((scriptWithoutComments.trim().length()) == 0) return true; else return false; } catch (java.lang.Throwable e) { return false; } }
final double computeAxisLabelThickness(org.eclipse.birt.chart.device.IDisplayServer xs, org.eclipse.birt.chart.model.component.Label la, int iOrientation) throws org.eclipse.birt.chart.exception.ChartException { if (!(la.isSetVisible())) { throw new org.eclipse.birt.chart.exception.ChartException(org.eclipse.birt.chart.plugin.ChartEnginePlugin.ID, org.eclipse.birt.chart.exception.ChartException.GENERATION, "exception.unset.label.visibility", new java.lang.Object[]{ la.getCaption().getValue() }, org.eclipse.birt.chart.engine.i18n.Messages.getResourceBundle(rtc.getULocale())); } if ((!(la.isVisible())) && (!(bLabelWithinAxes))) { return 0; } java.lang.String sText; org.eclipse.birt.chart.computation.withaxes.AxisTickCoordinates da = getTickCordinates(); if (iOrientation == (VERTICAL)) { double dW; double dMaxW = 0; double dMaxW2 = 0; if (isCategoryScale()) { final org.eclipse.birt.chart.computation.DataSetIterator dsi = getData(); final int iDateTimeUnit = ((getType()) == (org.eclipse.birt.chart.computation.IConstants.DATE_TIME)) ? org.eclipse.birt.chart.util.CDateTime.computeUnit(dsi) : org.eclipse.birt.chart.computation.IConstants.UNDEFINED; dsi.reset(); int i = 0; while (dsi.hasNext()) { la.getCaption().setValue(formatCategoryValue(getType(), dsi.next(), iDateTimeUnit)); dW = computeWidth(xs, la); if ((isAxisLabelStaggered()) && (baTickLabelStaggered[i])) { dMaxW2 = java.lang.Math.max(dW, dMaxW2); } else if (dW > dMaxW) { dMaxW = dW; } i++; } } else if (((getType()) & (LINEAR)) == (LINEAR)) { final org.eclipse.birt.chart.model.data.NumberDataElement nde = org.eclipse.birt.chart.model.data.impl.NumberDataElementImpl.create(0); double dAxisValue = asDouble(getMinimum()).doubleValue(); double dAxisStep = asDouble(getStep()).doubleValue(); com.ibm.icu.text.DecimalFormat df = null; if ((fs) == null) { df = computeDecimalFormat(dAxisValue, dAxisStep); } for (int i = 0; i < (da.size()); i++) { nde.setValue(dAxisValue); try { sText = org.eclipse.birt.chart.computation.ValueFormatter.format(nde, fs, rtc.getULocale(), df); } catch (org.eclipse.birt.chart.exception.ChartException dfex) { org.eclipse.birt.chart.computation.withaxes.AutoScale.logger.log(dfex); sText = org.eclipse.birt.chart.computation.IConstants.NULL_STRING; } la.getCaption().setValue(sText); dW = computeWidth(xs, la); if ((isAxisLabelStaggered()) && (baTickLabelStaggered[i])) { dMaxW2 = java.lang.Math.max(dW, dMaxW2); } else if (dW > dMaxW) { dMaxW = dW; } dAxisValue += dAxisStep; } } else if (((getType()) & (LOGARITHMIC)) == (LOGARITHMIC)) { final org.eclipse.birt.chart.model.data.NumberDataElement nde = org.eclipse.birt.chart.model.data.impl.NumberDataElementImpl.create(0); double dAxisValue = asDouble(getMinimum()).doubleValue(); double dAxisStep = asDouble(getStep()).doubleValue(); com.ibm.icu.text.DecimalFormat df = null; for (int i = 0; i < (da.size()); i++) { if ((fs) == null) { df = computeDecimalFormat(dAxisValue, dAxisStep); } nde.setValue(dAxisValue); try { sText = org.eclipse.birt.chart.computation.ValueFormatter.format(nde, fs, rtc.getULocale(), df); } catch (org.eclipse.birt.chart.exception.ChartException dfex) { org.eclipse.birt.chart.computation.withaxes.AutoScale.logger.log(dfex); sText = org.eclipse.birt.chart.computation.IConstants.NULL_STRING; } la.getCaption().setValue(sText); dW = computeWidth(xs, la); if ((isAxisLabelStaggered()) && (baTickLabelStaggered[i])) { dMaxW2 = java.lang.Math.max(dW, dMaxW2); } else if (dW > dMaxW) { dMaxW = dW; } dAxisValue *= dAxisStep; } } else if (((getType()) & (DATE_TIME)) == (DATE_TIME)) { org.eclipse.birt.chart.util.CDateTime cdtAxisValue = asDateTime(getMinimum()); int iStep = asInteger(getStep()); int iUnit = asInteger(getUnit()); org.eclipse.birt.chart.internal.factory.IDateFormatWrapper sdf = null; if ((fs) == null) { sdf = org.eclipse.birt.chart.internal.factory.DateFormatWrapperFactory.getPreferredDateFormat(iUnit, rtc.getULocale()); } for (int i = 0; i < (da.size()); i++) { try { sText = org.eclipse.birt.chart.computation.ValueFormatter.format(cdtAxisValue, fs, rtc.getULocale(), sdf); } catch (org.eclipse.birt.chart.exception.ChartException dfex) { org.eclipse.birt.chart.computation.withaxes.AutoScale.logger.log(dfex); sText = org.eclipse.birt.chart.computation.IConstants.NULL_STRING; } la.getCaption().setValue(sText); dW = computeWidth(xs, la); if ((isAxisLabelStaggered()) && (baTickLabelStaggered[i])) { dMaxW2 = java.lang.Math.max(dW, dMaxW2); } else if (dW > dMaxW) { dMaxW = dW; } cdtAxisValue = cdtAxisValue.forward(iUnit, iStep); } } return dMaxW + dMaxW2; } else if (iOrientation == (HORIZONTAL)) { double dH; double dMaxH = 0; double dMaxH2 = 0; if (isCategoryScale()) { final org.eclipse.birt.chart.computation.DataSetIterator dsi = getData(); final int iDateTimeUnit = ((getType()) == (org.eclipse.birt.chart.computation.IConstants.DATE_TIME)) ? org.eclipse.birt.chart.util.CDateTime.computeUnit(dsi) : org.eclipse.birt.chart.computation.IConstants.UNDEFINED; dsi.reset(); int i = 0; while (dsi.hasNext()) { la.getCaption().setValue(formatCategoryValue(getType(), dsi.next(), iDateTimeUnit)); dH = computeHeight(xs, la); if ((isAxisLabelStaggered()) && (baTickLabelStaggered[i])) { dMaxH2 = java.lang.Math.max(dH, dMaxH2); } else if (dH > dMaxH) { dMaxH = dH; } i++; } } else if (((getType()) & (LINEAR)) == (LINEAR)) { final org.eclipse.birt.chart.model.data.NumberDataElement nde = org.eclipse.birt.chart.model.data.impl.NumberDataElementImpl.create(0); double dAxisValue = asDouble(getMinimum()).doubleValue(); final double dAxisStep = asDouble(getStep()).doubleValue(); com.ibm.icu.text.DecimalFormat df = null; if ((fs) == null) { df = computeDecimalFormat(dAxisValue, dAxisStep); } for (int i = 0; i < (da.size()); i++) { nde.setValue(dAxisValue); try { sText = org.eclipse.birt.chart.computation.ValueFormatter.format(nde, fs, rtc.getULocale(), df); } catch (org.eclipse.birt.chart.exception.ChartException dfex) { org.eclipse.birt.chart.computation.withaxes.AutoScale.logger.log(dfex); sText = org.eclipse.birt.chart.computation.IConstants.NULL_STRING; } la.getCaption().setValue(sText); dH = computeHeight(xs, la); if ((isAxisLabelStaggered()) && (baTickLabelStaggered[i])) { dMaxH2 = java.lang.Math.max(dH, dMaxH2); } else if (dH > dMaxH) { dMaxH = dH; } dAxisValue += dAxisStep; } } else if (((getType()) & (LOGARITHMIC)) == (LOGARITHMIC)) { final org.eclipse.birt.chart.model.data.NumberDataElement nde = org.eclipse.birt.chart.model.data.impl.NumberDataElementImpl.create(0); double dAxisValue = asDouble(getMinimum()).doubleValue(); final double dAxisStep = asDouble(getStep()).doubleValue(); com.ibm.icu.text.DecimalFormat df = null; for (int i = 0; i < (da.size()); i++) { if ((fs) == null) { df = computeDecimalFormat(dAxisValue, dAxisStep); } nde.setValue(dAxisValue); try { sText = org.eclipse.birt.chart.computation.ValueFormatter.format(nde, fs, rtc.getULocale(), df); } catch (org.eclipse.birt.chart.exception.ChartException dfex) { org.eclipse.birt.chart.computation.withaxes.AutoScale.logger.log(dfex); sText = org.eclipse.birt.chart.computation.IConstants.NULL_STRING; } la.getCaption().setValue(sText); dH = computeHeight(xs, la); if ((isAxisLabelStaggered()) && (baTickLabelStaggered[i])) { dMaxH2 = java.lang.Math.max(dH, dMaxH2); } else if (dH > dMaxH) { dMaxH = dH; } dAxisValue *= dAxisStep; } } else if (((getType()) & (DATE_TIME)) == (DATE_TIME)) { org.eclipse.birt.chart.util.CDateTime cdtAxisValue = asDateTime(getMinimum()); final int iStep = asInteger(getStep()); final int iUnit = asInteger(getUnit()); org.eclipse.birt.chart.internal.factory.IDateFormatWrapper sdf = null; if ((fs) == null) { sdf = org.eclipse.birt.chart.internal.factory.DateFormatWrapperFactory.getPreferredDateFormat(iUnit, rtc.getULocale()); } for (int i = 0; i < (da.size()); i++) { try { sText = org.eclipse.birt.chart.computation.ValueFormatter.format(cdtAxisValue, fs, rtc.getULocale(), sdf); } catch (org.eclipse.birt.chart.exception.ChartException dfex) { org.eclipse.birt.chart.computation.withaxes.AutoScale.logger.log(dfex); sText = org.eclipse.birt.chart.computation.IConstants.NULL_STRING; } la.getCaption().setValue(sText); dH = computeHeight(xs, la); if ((isAxisLabelStaggered()) && (baTickLabelStaggered[i])) { dMaxH2 = java.lang.Math.max(dH, dMaxH2); } else if (dH > dMaxH) { dMaxH = dH; } cdtAxisValue.forward(iUnit, iStep); } } return dMaxH + dMaxH2; } return 0; }
private void initList() { for (java.util.Iterator itor = getModuleHandle().imagesIterator(); itor.hasNext();) { org.eclipse.birt.report.model.api.EmbeddedImageHandle handle = ((org.eclipse.birt.report.model.api.EmbeddedImageHandle) (itor.next())); embeddedImageList.add(handle.getQualifiedName()); } int index = -1; if (DesignChoiceConstants.IMAGE_REF_TYPE_EMBED.equals(inputImage.getSource())) { java.lang.String imageName = inputImage.getImageName(); if (imageName != null) { index = embeddedImageList.indexOf(imageName); } } if (index != (-1)) { embeddedImageList.select(index); preview(); } else { clearPreview(); } updateButtons(); }
public void process(java.lang.String value, org.eclipse.birt.report.engine.layout.pdf.util.StyleProperties sp) { try { int size = java.lang.Integer.parseInt(value); org.eclipse.birt.report.engine.content.IStyle style = sp.getStyle(); if (!(hasProperty(style, IStyle.STYLE_FONT_SIZE))) { style.setFontSize(((org.eclipse.birt.report.engine.layout.pdf.util.PropertiesProcessor.FONT_SIZE[(size + 7)]) + "pt")); } } catch (java.lang.Exception e) { } }
protected final void renderPlane(org.eclipse.birt.chart.device.IPrimitiveRenderer ipr, java.lang.Object oSource, org.eclipse.birt.chart.model.attribute.Location[] loaFront, org.eclipse.birt.chart.model.attribute.Fill f, org.eclipse.birt.chart.model.attribute.LineAttributes lia, org.eclipse.birt.chart.model.attribute.ChartDimension cd, double dSeriesThickness, boolean bDeferred) throws org.eclipse.birt.chart.exception.ChartException { org.eclipse.birt.chart.event.PolygonRenderEvent pre; if ((cd.getValue()) == (org.eclipse.birt.chart.model.attribute.ChartDimension.TWO_DIMENSIONAL)) { pre = ((org.eclipse.birt.chart.event.PolygonRenderEvent) (((org.eclipse.birt.chart.event.EventObjectCache) (ipr)).getEventObject(oSource, org.eclipse.birt.chart.event.PolygonRenderEvent.class))); pre.setPoints(loaFront); pre.setBackground(f); pre.setOutline(lia); ipr.fillPolygon(pre); ipr.drawPolygon(pre); return; } final boolean bSolidColor = f instanceof org.eclipse.birt.chart.model.attribute.ColorDefinition; org.eclipse.birt.chart.model.attribute.Fill fDarker = null; org.eclipse.birt.chart.model.attribute.Fill fBrighter = null; if (((cd.getValue()) == (org.eclipse.birt.chart.model.attribute.ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH)) || ((cd.getValue()) == (org.eclipse.birt.chart.model.attribute.ChartDimension.THREE_DIMENSIONAL))) { fDarker = f; if (fDarker instanceof org.eclipse.birt.chart.model.attribute.ColorDefinition) { fDarker = ((org.eclipse.birt.chart.model.attribute.ColorDefinition) (fDarker)).darker(); } fBrighter = f; if (fBrighter instanceof org.eclipse.birt.chart.model.attribute.ColorDefinition) { fBrighter = ((org.eclipse.birt.chart.model.attribute.ColorDefinition) (fBrighter)).brighter(); } } final int nSides = loaFront.length; final org.eclipse.birt.chart.model.attribute.Location[][] loaa = new org.eclipse.birt.chart.model.attribute.Location[nSides + 1][]; org.eclipse.birt.chart.model.attribute.Location[] loa; double dY; double dSmallestY = 0; for (int j, i = 0; i < nSides; i++) { j = i + 1; if (j >= (loaFront.length)) j = 0; loa = new org.eclipse.birt.chart.model.attribute.Location[4]; loa[0] = org.eclipse.birt.chart.model.attribute.impl.LocationImpl.create(loaFront[i].getX(), loaFront[i].getY()); loa[1] = org.eclipse.birt.chart.model.attribute.impl.LocationImpl.create(loaFront[j].getX(), loaFront[j].getY()); loa[2] = org.eclipse.birt.chart.model.attribute.impl.LocationImpl.create(((loaFront[j].getX()) + dSeriesThickness), ((loaFront[j].getY()) - dSeriesThickness)); loa[3] = org.eclipse.birt.chart.model.attribute.impl.LocationImpl.create(((loaFront[i].getX()) + dSeriesThickness), ((loaFront[i].getY()) - dSeriesThickness)); loaa[i] = loa; } loaa[nSides] = loaFront; double dI; double dJ; org.eclipse.birt.chart.model.attribute.Location[] loaI; org.eclipse.birt.chart.model.attribute.Location[] loaJ; for (int i = 0; i < (nSides - 1); i++) { loaI = loaa[i]; for (int j = i + 1; j < nSides; j++) { loaJ = loaa[j]; dI = org.eclipse.birt.chart.render.BaseRenderer.getY(loaI, IConstants.AVERAGE); dJ = org.eclipse.birt.chart.render.BaseRenderer.getY(loaJ, IConstants.AVERAGE); if (org.eclipse.birt.chart.util.ChartUtil.mathGT(dJ, dI)) { loaa[i] = loaJ; loaa[j] = loaI; loaI = loaJ; } else if (org.eclipse.birt.chart.util.ChartUtil.mathEqual(dJ, dI)) { dI = org.eclipse.birt.chart.render.BaseRenderer.getX(loaI, IConstants.AVERAGE); dJ = org.eclipse.birt.chart.render.BaseRenderer.getX(loaJ, IConstants.AVERAGE); if (org.eclipse.birt.chart.util.ChartUtil.mathGT(dI, dJ)) { loaa[i] = loaJ; loaa[j] = loaI; loaI = loaJ; } } } } int iSmallestYIndex = 0; for (int i = 0; i < nSides; i++) { dY = org.eclipse.birt.chart.render.BaseRenderer.getY(loaa[i], IConstants.AVERAGE); if (i == 0) { dSmallestY = dY; } else if (org.eclipse.birt.chart.util.ChartUtil.mathGT(dSmallestY, dY)) { dSmallestY = dY; iSmallestYIndex = i; } } java.util.ArrayList alModel = new java.util.ArrayList((nSides + 1)); org.eclipse.birt.chart.model.attribute.Fill fP; for (int i = 0; i <= nSides; i++) { pre = ((org.eclipse.birt.chart.event.PolygonRenderEvent) (((org.eclipse.birt.chart.event.EventObjectCache) (ipr)).getEventObject(oSource, org.eclipse.birt.chart.event.PolygonRenderEvent.class))); pre.setOutline(lia); pre.setPoints(loaa[i]); if (i < nSides) { pre.setDepth((-dSeriesThickness)); } else { pre.setDepth(0); } if (i == nSides) { fP = f; } else if (i == iSmallestYIndex) { fP = fBrighter; } else { fP = fDarker; } pre.setBackground(fP); if (bDeferred) { alModel.add(pre.copy()); } else { ipr.fillPolygon(pre); } if (i == nSides) { } else if (i == iSmallestYIndex) { if (!bSolidColor) { pre.setBackground(org.eclipse.birt.chart.render.BaseRenderer.LIGHT_GLASS); } if (bDeferred) { alModel.add(pre.copy()); } else { ipr.fillPolygon(pre); } } else { if (!bSolidColor) { pre.setBackground(org.eclipse.birt.chart.render.BaseRenderer.DARK_GLASS); } if (bDeferred) { alModel.add(pre.copy()); } else { ipr.fillPolygon(pre); } } if (!bDeferred) { ipr.drawPolygon(pre); } } if (!(alModel.isEmpty())) { dc.addModel(new org.eclipse.birt.chart.event.WrappedInstruction(getDeferredCache(), alModel, org.eclipse.birt.chart.event.PrimitiveRenderEvent.FILL)); } }
public java.lang.Object get(java.lang.String name, org.mozilla.javascript.Scriptable start) { if ("_outer".equals(name)) { java.util.LinkedList outRsets = new java.util.LinkedList(); outRsets.addAll(rsets); if (outRsets != null) { outRsets.removeFirst(); } return new org.eclipse.birt.report.engine.data.dte.NativeRowObject(start, outRsets); } java.util.Iterator iter = rsets.iterator(); if ("__rownum".equals(name)) { if (iter.hasNext()) { org.eclipse.birt.report.engine.data.IResultSet rset = ((org.eclipse.birt.report.engine.data.IResultSet) (iter.next())); return new java.lang.Long(rset.getCurrentPosition()); } } else { while (iter.hasNext()) { org.eclipse.birt.report.engine.data.IResultSet rset = ((org.eclipse.birt.report.engine.data.IResultSet) (iter.next())); try { return rset.getValue(name); } catch (org.eclipse.birt.core.exception.BirtException ex) { } } } throw new org.mozilla.javascript.EvaluatorException(("Can't find the column: " + name)); }
private void validateGanttEntryData(java.lang.Object[] obja) throws org.eclipse.birt.chart.exception.ChartException { boolean valid = true; if (obja == null) { valid = false; } else if ((obja.length) != 3) { throw new org.eclipse.birt.chart.exception.ChartException(org.eclipse.birt.chart.plugin.ChartEngineExtensionPlugin.ID, org.eclipse.birt.chart.exception.ChartException.DATA_SET, "exception.dataset.ganttseries", org.eclipse.birt.chart.engine.extension.i18n.Messages.getResourceBundle(getULocale())); } else { for (int i = 0; i < ((obja.length) - 1); i++) { if (((obja[i]) != null) && (!((obja[i]) instanceof org.eclipse.birt.chart.util.CDateTime))) { valid = false; break; } } } if (!valid) { throw new org.eclipse.birt.chart.exception.ChartException(org.eclipse.birt.chart.plugin.ChartEngineExtensionPlugin.ID, org.eclipse.birt.chart.exception.ChartException.VALIDATION, "exception.dataset.invalid.ganttentry", org.eclipse.birt.chart.engine.extension.i18n.Messages.getResourceBundle(getULocale())); } }
@java.lang.Override protected java.awt.Image createImageFromModel(org.eclipse.birt.chart.model.attribute.Fill imageModel) throws org.eclipse.birt.chart.exception.ChartException { java.awt.Image img = super.createImageFromModel(imageModel); if (!(img instanceof org.eclipse.birt.chart.device.svg.SVGImage)) { img = new org.eclipse.birt.chart.device.svg.SVGImage(img, null); } return img; }
private com.lowagie.text.pdf.PdfAction createPdfAction(java.lang.String hyperlink, java.lang.String bookmark, java.lang.String target, int type) { if (((("_top".equalsIgnoreCase(target)) || ("_parent".equalsIgnoreCase(target))) || ("_blank".equalsIgnoreCase(target))) || ("_self".equalsIgnoreCase(target))) { return new com.lowagie.text.pdf.PdfAction(hyperlink); } else { if (type == (org.eclipse.birt.report.engine.content.IHyperlinkAction.ACTION_BOOKMARK)) { return com.lowagie.text.pdf.PdfAction.gotoLocalPage(bookmark, false); } else { return com.lowagie.text.pdf.PdfAction.gotoRemotePage(hyperlink, bookmark, false, false); } } }
java.lang.String makeUniqueStyleName(java.lang.String name) { assert (this) != null; org.eclipse.birt.report.model.api.SlotHandle styles = getStyles(); java.util.Set set = new java.util.HashSet(); for (int i = 0; i < (styles.getCount()); i++) { org.eclipse.birt.report.model.api.StyleHandle style = ((org.eclipse.birt.report.model.api.StyleHandle) (styles.get(i))); set.add(style.getName()); } org.eclipse.birt.report.model.api.PropertyHandle propHandle = getPropertyHandle(IThemeModel.CSSES_PROP); java.util.Iterator iterator = propHandle.iterator(); while (iterator.hasNext()) { org.eclipse.birt.report.model.api.css.CssStyleSheetHandle handle = ((org.eclipse.birt.report.model.api.css.CssStyleSheetHandle) (iterator.next())); set.add(handle.getFileName()); } int index = 0; java.lang.String baseName = name; while (set.contains(name)) { name = baseName + (++index); } return name; }
private boolean validateScalarParameter(org.eclipse.birt.report.model.api.ScalarParameterHandle paramHandle) throws org.eclipse.birt.report.engine.api.impl.ParameterValidationException { java.lang.String paramName = paramHandle.getName(); java.lang.Object paramValue = runValues.get(paramName); java.lang.String type = paramHandle.getDataType(); if (paramValue == null) { if (!(paramHandle.isRequired())) return true; throw new org.eclipse.birt.report.engine.api.impl.ParameterValidationException(org.eclipse.birt.report.engine.i18n.MessageConstants.NULL_PARAMETER_EXCEPTION, new java.lang.String[]{ paramName }); } java.lang.String source = paramHandle.getValidate(); if ((source != null) && ((source.length()) != 0)) { java.lang.Object result = executionContext.evaluate(source); if ((!(result instanceof java.lang.Boolean)) || (!(((java.lang.Boolean) (result)).booleanValue()))) { throw new org.eclipse.birt.report.engine.api.impl.ParameterValidationException(org.eclipse.birt.report.engine.i18n.MessageConstants.NULL_PARAMETER_EXCEPTION, new java.lang.String[]{ paramName, source }); } } java.lang.String paramType = paramHandle.getParamType(); if (DesignChoiceConstants.SCALAR_PARAM_TYPE_MULTI_VALUE.equals(paramType)) { if (paramValue instanceof java.lang.Object[]) { boolean isValid = true; java.lang.Object[] paramValueList = ((java.lang.Object[]) (paramValue)); for (int i = 0; i < (paramValueList.length); i++) { if ((paramValueList[i]) != null) { if (!(validateParameterValueType(paramName, paramValueList[i], type, paramHandle))) { isValid = false; } } } return isValid; } throw new org.eclipse.birt.report.engine.api.impl.ParameterValidationException(org.eclipse.birt.report.engine.i18n.MessageConstants.INVALID_PARAMETER_TYPE_EXCEPTION, new java.lang.String[]{ paramName, "Object[]", "Array" }); } else { return validateParameterValueType(paramName, paramValue, type, paramHandle); } }
public static synchronized void start(java.lang.String webappName, java.lang.String pluginId, org.eclipse.core.runtime.IPath path) throws org.eclipse.core.runtime.CoreException { if (!(org.eclipse.birt.report.viewer.utilities.WebappAccessor.applicationsStarted)) { java.lang.String projectClassPaths = org.eclipse.birt.report.viewer.utilities.WorkspaceClasspathManager.getClassPath(); if (projectClassPaths == null) { projectClassPaths = ""; } java.lang.System.setProperty(org.eclipse.birt.report.viewer.utilities.WebappAccessor.WORKSPACE_CLASSPATH_KEY, projectClassPaths); org.eclipse.core.runtime.IPath webappPath = org.eclipse.birt.report.viewer.utilities.WebappAccessor.getWebappPath(pluginId, path); org.eclipse.help.internal.appserver.IWebappServer server = org.eclipse.birt.report.viewer.utilities.AppServerWrapper.getInstance().getAppServer(); server.start(webappName, webappPath, new org.eclipse.help.internal.appserver.PluginClassLoaderWrapper(pluginId)); org.eclipse.birt.report.viewer.utilities.WebappAccessor.applicationsStarted = true; } }
public static org.eclipse.birt.report.designer.internal.ui.processor.IElementProcessor createProcessor(java.lang.String elementType) { if (ReportDesignConstants.IMAGE_ITEM.equals(elementType)) { return new org.eclipse.birt.report.designer.internal.ui.processor.ImageItemProcessor(); } if ((ReportDesignConstants.GRID_ITEM.equals(elementType)) || (ReportDesignConstants.TABLE_ITEM.equals(elementType))) { return new org.eclipse.birt.report.designer.internal.ui.processor.TableGridProcessor(elementType); } if (ReportDesignConstants.TEXT_DATA_ITEM.equals(elementType)) { return new org.eclipse.birt.report.designer.internal.ui.processor.DynamicTextProcessor(elementType); } else { if ((org.eclipse.birt.report.model.api.DesignEngine.getMetaDataDictionary().getExtension(elementType)) != null) { return new org.eclipse.birt.report.designer.internal.ui.processor.ExtenedElementProcessor(elementType); } } return new org.eclipse.birt.report.designer.internal.ui.processor.DefaultElementProcessor(elementType); }
protected void okPressed() { try { inputParameter.setName(nameEditor.getText()); inputParameter.setPromptText(org.eclipse.birt.report.designer.internal.ui.util.UIUtil.convertToModelString(promptTextEditor.getText(), true)); java.lang.String newControlType = getSelectedControlType(); if (org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.PARAM_CONTROL_COMBO.equals(newControlType)) { newControlType = org.eclipse.birt.report.model.api.elements.DesignChoiceConstants.PARAM_CONTROL_LIST_BOX; inputParameter.setMustMatch(true); } else if (org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.PARAM_CONTROL_LIST.equals(newControlType)) { newControlType = org.eclipse.birt.report.model.api.elements.DesignChoiceConstants.PARAM_CONTROL_LIST_BOX; inputParameter.setMustMatch(false); } else { inputParameter.setProperty(ScalarParameterHandle.MUCH_MATCH_PROP, null); } inputParameter.setControlType(newControlType); if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(getSelectedDataType())) { defaultValue = org.eclipse.birt.report.designer.util.DEUtil.convertToXMLString(org.eclipse.birt.core.data.DataTypeUtil.toDate(defaultValue, ULocale.US)); } inputParameter.setDefaultValue(defaultValue); inputParameter.setDataType(org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.DATA_TYPE_CHOICE_SET.findChoiceByDisplayName(dataTypeChooser.getText()).getName()); org.eclipse.birt.report.model.api.PropertyHandle selectionChioceList = inputParameter.getPropertyHandle(ScalarParameterHandle.SELECTION_LIST_PROP); selectionChioceList.setValue(null); if (isStatic()) { inputParameter.setValueType(DesignChoiceConstants.PARAM_VALUE_TYPE_STATIC); if ((!(DesignChoiceConstants.PARAM_CONTROL_TEXT_BOX.equals(newControlType))) && (!(DesignChoiceConstants.PARAM_CONTROL_CHECK_BOX.equals(newControlType)))) { for (java.util.Iterator iter = choiceList.iterator(); iter.hasNext();) { org.eclipse.birt.report.model.api.elements.structures.SelectionChoice choice = ((org.eclipse.birt.report.model.api.elements.structures.SelectionChoice) (iter.next())); if ((isValidValue(choice.getValue())) == null) { selectionChioceList.addItem(choice); } } } inputParameter.setDataSetName(null); inputParameter.setValueExpr(null); inputParameter.setLabelExpr(null); } else { inputParameter.setValueType(DesignChoiceConstants.PARAM_VALUE_TYPE_DYNAMIC); inputParameter.setDataSetName(dataSetChooser.getText()); inputParameter.setValueExpr(getExpression(columnChooser.getText())); inputParameter.setLabelExpr(getExpression(displayTextChooser.getText())); } inputParameter.setHelpText(org.eclipse.birt.report.designer.internal.ui.util.UIUtil.convertToModelString(helpTextEditor.getText(), false)); inputParameter.setCategory(formatCategroy); inputParameter.setPattern(formatPattern); if (((isStatic()) && ((org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.PARAM_CONTROL_COMBO.equals(getSelectedControlType())) || (DesignChoiceConstants.PARAM_CONTROL_RADIO_BUTTON.equals(getSelectedControlType())))) && (!(containValue(null, defaultValue, org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.COLUMN_VALUE)))) { defaultValue = null; } if (dirtyProperties.containsKey(org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.CHECKBOX_HIDDEN)) { inputParameter.setHidden(getProperty(org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.CHECKBOX_HIDDEN)); } if (dirtyProperties.containsKey(org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.CHECKBOX_ALLOW_NULL)) { inputParameter.setAllowNull(getProperty(org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.CHECKBOX_ALLOW_NULL)); } if (allowBlank.isEnabled()) { if (dirtyProperties.containsKey(org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.CHECKBOX_ALLOW_BLANK)) { inputParameter.setAllowBlank(getProperty(org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.CHECKBOX_ALLOW_BLANK)); } } else { inputParameter.setProperty(ScalarParameterHandle.ALLOW_BLANK_PROP, null); } if (doNotEcho.isEnabled()) { if (dirtyProperties.containsKey(org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.CHECKBOX_DO_NOT_ECHO)) { inputParameter.setConcealValue(getProperty(org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.CHECKBOX_DO_NOT_ECHO)); } } else { inputParameter.setProperty(ScalarParameterHandle.CONCEAL_VALUE_PROP, null); } if (needSort.isEnabled()) { if (dirtyProperties.containsKey(org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.CHECKBOX_SORT)) { inputParameter.setFixedOrder((!(getProperty(org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.CHECKBOX_SORT)))); } } else { inputParameter.setProperty(ScalarParameterHandle.FIXED_ORDER_PROP, null); } if ((!(isStatic())) && (!(org.eclipse.birt.report.model.api.util.StringUtil.isBlank(listLimit.getText())))) { try { inputParameter.setListlimit(java.lang.Integer.parseInt(listLimit.getText())); } catch (java.lang.NumberFormatException ex) { org.eclipse.birt.report.designer.internal.ui.util.ExceptionHandler.openErrorMessageBox(org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.ERROR_TITLE_INVALID_LIST_LIMIT, java.text.MessageFormat.format(org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.ERROR_MSG_INVALID_LIST_LIMIT, new java.lang.Object[]{ java.lang.Integer.toString(java.lang.Integer.MAX_VALUE) })); } } else { inputParameter.setProperty(ScalarParameterHandle.LIST_LIMIT_PROP, null); } } catch (java.lang.Exception e) { org.eclipse.birt.report.designer.internal.ui.util.ExceptionHandler.handle(e); return; } setResult(inputParameter); super.okPressed(); }
public void doSave(java.io.OutputStream outputStream, java.util.Map requestColumnMap) throws org.eclipse.birt.data.engine.core.DataException { assert outputStream != null; java.io.DataOutputStream dos = new java.io.DataOutputStream(outputStream); java.util.Set resultSetNameSet = org.eclipse.birt.data.engine.executor.cache.ResultSetUtil.getRsColumnRequestMap(requestColumnMap); int size = resultSetNameSet.size(); try { org.eclipse.birt.core.util.IOUtil.writeInt(outputStream, size); int writeCount = 0; for (int i = 0; i < (m_fieldCount); i++) { org.eclipse.birt.data.engine.executor.ResultFieldMetadata column = projectedCols[i]; if ((resultSetNameSet.contains(column.getName())) || (resultSetNameSet.contains(column.getAlias()))) { org.eclipse.birt.core.util.IOUtil.writeInt(dos, column.getDriverPosition()); org.eclipse.birt.core.util.IOUtil.writeString(dos, column.getName()); org.eclipse.birt.core.util.IOUtil.writeString(dos, column.getLabel()); org.eclipse.birt.core.util.IOUtil.writeString(dos, column.getAlias()); org.eclipse.birt.core.util.IOUtil.writeString(dos, column.getDataType().getName()); org.eclipse.birt.core.util.IOUtil.writeString(dos, column.getNativeTypeName()); org.eclipse.birt.core.util.IOUtil.writeBool(dos, column.isCustom()); if ((column.getDriverProvidedDataType()) == null) org.eclipse.birt.core.util.IOUtil.writeString(dos, null); else org.eclipse.birt.core.util.IOUtil.writeString(dos, column.getDriverProvidedDataType().getName()); writeCount++; } } if (writeCount != size) throw new org.eclipse.birt.data.engine.core.DataException(org.eclipse.birt.data.engine.i18n.ResourceConstants.RESULT_CLASS_SAVE_ERROR); dos.close(); } catch (java.io.IOException e) { throw new org.eclipse.birt.data.engine.core.DataException(org.eclipse.birt.data.engine.i18n.ResourceConstants.RD_SAVE_ERROR, e, "Result Class"); } }
java.util.Collection resolveDataSetParameters(boolean evaluateValue) throws org.eclipse.birt.data.engine.core.DataException { java.util.List paramDefns = this.dsRT.getParameters(); int nParams = (paramDefns == null) ? 0 : paramDefns.size(); org.eclipse.birt.data.engine.odaconsumer.ParameterHint[] paramHints = new org.eclipse.birt.data.engine.odaconsumer.ParameterHint[nParams]; boolean[] bindingResolved = new boolean[nParams]; for (int i = 0; i < nParams; i++) { org.eclipse.birt.data.engine.api.IParameterDefinition paramDefn = ((org.eclipse.birt.data.engine.api.IParameterDefinition) (paramDefns.get(i))); paramHints[i] = createParameterHint(paramDefn, paramDefn.getDefaultInputValue()); bindingResolved[i] = false; if ((paramDefn.isInputMode()) && ((paramDefn.getName()) != null)) { java.lang.Object paramValue = DataSetRuntime.UNSET_VALUE; try { paramValue = this.dsRT.getInputParameterValue(paramDefn.getName()); } catch (org.eclipse.birt.core.exception.BirtException e) { assert false; throw org.eclipse.birt.data.engine.core.DataException.wrap(e); } if (paramValue != (DataSetRuntime.UNSET_VALUE)) { if ((paramHints[i].getDataType()) == null) { if (paramValue != null) { java.lang.Class clazz = paramValue.getClass(); paramHints[i].setDataType(clazz); } else { paramHints[i].setDataType(java.lang.String.class); } } java.lang.String paramValueStr = this.getParameterValueString(paramHints[i].getDataType(), paramValue); paramHints[i].setDefaultInputValue(paramValueStr); bindingResolved[i] = true; } } } if (evaluateValue) { org.mozilla.javascript.Context cx = null; cx = org.mozilla.javascript.Context.enter(); try { resolveParameterBindings(this.queryDefn.getInputParamBindings(), paramHints, bindingResolved, cx); resolveParameterBindings(this.dsRT.getInputParamBindings(), paramHints, bindingResolved, cx); } finally { if (cx != null) org.mozilla.javascript.Context.exit(); } } return java.util.Arrays.asList(paramHints); }
private java.util.Vector<org.eclipse.birt.chart.model.data.OrthogonalSampleData> getConvertedOrthogonalSampleDataRepresentation(org.eclipse.emf.common.util.EList<org.eclipse.birt.chart.model.data.OrthogonalSampleData> osdList, java.util.List<org.eclipse.birt.chart.model.attribute.AxisType> axisTypes) { java.util.Vector<org.eclipse.birt.chart.model.data.OrthogonalSampleData> vNewOrthogonalSampleData = new java.util.Vector<org.eclipse.birt.chart.model.data.OrthogonalSampleData>(); for (int i = 0; i < (axisTypes.size()); i++) { org.eclipse.birt.chart.model.data.OrthogonalSampleData osd = osdList.get(i); osd.setDataSetRepresentation(org.eclipse.birt.chart.ui.util.ChartUIUtil.getConvertedSampleDataRepresentation(axisTypes.get(i), osd.getDataSetRepresentation(), i)); vNewOrthogonalSampleData.add(osd); } return vNewOrthogonalSampleData; }
private void addStyleProperties() throws org.eclipse.birt.report.model.metadata.MetaDataException { if (!(hasStyle())) return; if (isContainer()) { java.util.List styleProperties = org.eclipse.birt.report.model.metadata.MetaDataDictionary.getInstance().getStyle().getLocalProperties(); for (int i = 0; i < (styleProperties.size()); i++) { org.eclipse.birt.report.model.metadata.PropertyDefn prop = ((org.eclipse.birt.report.model.metadata.PropertyDefn) (styleProperties.get(i))); if (ReportDesignConstants.ROW_ELEMENT.equalsIgnoreCase(name)) if (((IStyleModel.PAGE_BREAK_AFTER_PROP.equalsIgnoreCase(prop.getName())) || (IStyleModel.PAGE_BREAK_BEFORE_PROP.equalsIgnoreCase(prop.getName()))) || (IStyleModel.PAGE_BREAK_INSIDE_PROP.equalsIgnoreCase(prop.getName()))) continue; properties.put(prop.getName(), prop); } } else { if ((stylePropertyNames) == null) return; org.eclipse.birt.report.model.metadata.ElementDefn style = ((org.eclipse.birt.report.model.metadata.ElementDefn) (org.eclipse.birt.report.model.metadata.MetaDataDictionary.getInstance().getStyle())); for (int i = 0; i < (stylePropertyNames.size()); i++) { java.lang.String propName = ((java.lang.String) (stylePropertyNames.get(i))); if ((getProperty(propName)) != null) continue; org.eclipse.birt.report.model.metadata.SystemPropertyDefn prop = ((org.eclipse.birt.report.model.metadata.SystemPropertyDefn) (style.getProperty(propName))); if (prop == null) throw new org.eclipse.birt.report.model.metadata.MetaDataException(new java.lang.String[]{ propName, name }, MetaDataException.DESIGN_EXCEPTION_STYLE_PROP_NOT_FOUND); assert prop.isStyleProperty(); properties.put(prop.getName(), prop); } } }
public boolean isInFactory() { return factoryMode; }
public void enableInteraction(org.eclipse.birt.chart.event.InteractionEvent ie) throws org.eclipse.birt.chart.exception.ChartException { if ((_iun) == null) { org.eclipse.birt.chart.device.svg.SVGRendererImpl.logger.log(ILogger.WARNING, org.eclipse.birt.chart.device.extension.i18n.Messages.getString("exception.missing.component.interaction", getULocale())); return; } org.eclipse.birt.chart.model.data.Trigger[] triggers = ie.getTriggers(); if (triggers == null) { return; } final org.eclipse.birt.chart.event.PrimitiveRenderEvent pre = ie.getHotSpot(); org.w3c.dom.Element elm = null; if (pre instanceof org.eclipse.birt.chart.event.PolygonRenderEvent) { final org.eclipse.birt.chart.model.attribute.Location[] loa = ((org.eclipse.birt.chart.event.PolygonRenderEvent) (pre)).getPoints(); int[][] pa = getCoordinatesAsInts(loa); elm = svggc.createPolygon(pa[0], pa[1], pa[0].length); } else if (pre instanceof org.eclipse.birt.chart.event.OvalRenderEvent) { final org.eclipse.birt.chart.model.attribute.Bounds boEllipse = ((org.eclipse.birt.chart.event.OvalRenderEvent) (pre)).getBounds(); elm = svggc.createOval(boEllipse.getLeft(), boEllipse.getTop(), boEllipse.getWidth(), boEllipse.getHeight()); } else if (pre instanceof org.eclipse.birt.chart.event.RectangleRenderEvent) { final org.eclipse.birt.chart.model.attribute.Bounds boRect = ((org.eclipse.birt.chart.event.RectangleRenderEvent) (pre)).getBounds(); elm = svggc.createRect(boRect.getLeft(), boRect.getTop(), boRect.getWidth(), boRect.getHeight()); } else if (pre instanceof org.eclipse.birt.chart.event.AreaRenderEvent) { org.eclipse.birt.chart.event.AreaRenderEvent are = ((org.eclipse.birt.chart.event.AreaRenderEvent) (pre)); final java.awt.geom.GeneralPath gp = new java.awt.geom.GeneralPath(); org.eclipse.birt.chart.event.PrimitiveRenderEvent subPre; for (int i = 0; i < (are.getElementCount()); i++) { subPre = are.getElement(i); if (subPre instanceof org.eclipse.birt.chart.event.ArcRenderEvent) { final org.eclipse.birt.chart.event.ArcRenderEvent acre = ((org.eclipse.birt.chart.event.ArcRenderEvent) (subPre)); final java.awt.geom.Arc2D.Double a2d = new java.awt.geom.Arc2D.Double(acre.getTopLeft().getX(), acre.getTopLeft().getY(), acre.getWidth(), acre.getHeight(), acre.getStartAngle(), acre.getAngleExtent(), org.eclipse.birt.chart.device.svg.SVGRendererImpl.toSwingArcType(acre.getStyle())); gp.append(a2d, true); } else if (subPre instanceof org.eclipse.birt.chart.event.LineRenderEvent) { final org.eclipse.birt.chart.event.LineRenderEvent lre = ((org.eclipse.birt.chart.event.LineRenderEvent) (subPre)); final java.awt.geom.Line2D.Double l2d = new java.awt.geom.Line2D.Double(lre.getStart().getX(), lre.getStart().getY(), lre.getEnd().getX(), lre.getEnd().getY()); gp.append(l2d, true); } } elm = svggc.createGeneralPath(gp); } else if (pre instanceof org.eclipse.birt.chart.event.ArcRenderEvent) { final org.eclipse.birt.chart.event.ArcRenderEvent are = ((org.eclipse.birt.chart.event.ArcRenderEvent) (pre)); if ((((are.getInnerRadius()) >= 0) && ((are.getOuterRadius()) > 0)) && ((are.getInnerRadius()) < (are.getOuterRadius()))) { java.awt.Shape outerArc = new java.awt.geom.Arc2D.Double(((are.getTopLeft().getX()) + (((are.getWidth()) - (2 * (are.getOuterRadius()))) / 2)), ((are.getTopLeft().getY()) + (((are.getHeight()) - (2 * (are.getOuterRadius()))) / 2)), (2 * (are.getOuterRadius())), (2 * (are.getOuterRadius())), are.getStartAngle(), are.getAngleExtent(), java.awt.geom.Arc2D.PIE); java.awt.Shape innerArc = new java.awt.geom.Arc2D.Double(((are.getTopLeft().getX()) + (((are.getWidth()) - (2 * (are.getInnerRadius()))) / 2)), ((are.getTopLeft().getY()) + (((are.getHeight()) - (2 * (are.getInnerRadius()))) / 2)), (2 * (are.getInnerRadius())), (2 * (are.getInnerRadius())), are.getStartAngle(), are.getAngleExtent(), java.awt.geom.Arc2D.PIE); java.awt.geom.Area fArea = new java.awt.geom.Area(outerArc); fArea.exclusiveOr(new java.awt.geom.Area(innerArc)); elm = svggc.createGeneralPath(fArea); } else { elm = svggc.createGeneralPath(new java.awt.geom.Arc2D.Double(are.getTopLeft().getX(), are.getTopLeft().getY(), are.getWidth(), are.getHeight(), are.getStartAngle(), are.getAngleExtent(), org.eclipse.birt.chart.device.svg.SVGRendererImpl.toSwingArcType(are.getStyle()))); } } if (elm != null) { for (int x = 0; x < (triggers.length); x++) { org.eclipse.birt.chart.model.data.Trigger tg = triggers[x]; final org.eclipse.birt.chart.event.StructureSource src = ((org.eclipse.birt.chart.event.StructureSource) (ie.getSource())); switch (tg.getAction().getType().getValue()) { case org.eclipse.birt.chart.model.attribute.ActionType.SHOW_TOOLTIP : java.lang.String tooltipText = ((org.eclipse.birt.chart.model.attribute.TooltipValue) (tg.getAction().getValue())).getText(); if ((tooltipText != null) && ((tooltipText.trim().length()) > 0)) { org.w3c.dom.Element title = svggc.dom.createElement("title"); title.appendChild(svggc.dom.createTextNode(tooltipText)); elm.appendChild(title); elm.setAttribute("onmouseout", "TM.remove()"); elm.setAttribute("onmousemove", "TM.show(evt)"); } break; case org.eclipse.birt.chart.model.attribute.ActionType.URL_REDIRECT : org.eclipse.birt.chart.model.attribute.URLValue urlValue = ((org.eclipse.birt.chart.model.attribute.URLValue) (tg.getAction().getValue())); if (urlValue.getBaseUrl().startsWith("#")) { org.w3c.dom.Element aLink = ((org.eclipse.birt.chart.device.svg.SVGGraphics2D) (_g2d)).createElement("g"); aLink.setAttribute("onclick", (("top.document.location.hash='" + (urlValue.getBaseUrl())) + "';")); aLink.setAttribute("style", "cursor:pointer"); aLink.appendChild(elm); elm = aLink; } else { org.w3c.dom.Element aLink = ((org.eclipse.birt.chart.device.svg.SVGGraphics2D) (_g2d)).createElement("a"); aLink.setAttribute("xlink:href", urlValue.getBaseUrl()); if ((urlValue.getTarget()) != null) aLink.setAttribute("target", urlValue.getTarget()); aLink.appendChild(elm); elm = aLink; } break; case org.eclipse.birt.chart.model.attribute.ActionType.TOGGLE_VISIBILITY : if ((src.getType()) == (org.eclipse.birt.chart.event.StructureType.SERIES)) { final org.eclipse.birt.chart.model.component.Series seRT = ((org.eclipse.birt.chart.model.component.Series) (src.getSource())); org.eclipse.birt.chart.device.svg.SVGRendererImpl.logger.log(ILogger.INFORMATION, ((org.eclipse.birt.chart.device.extension.i18n.Messages.getString("info.toggle.visibility", getULocale())) + seRT)); org.eclipse.birt.chart.model.component.Series seDT = null; try { seDT = findDesignTimeSeries(seRT); cacheSeriesHotspots.put(elm, seDT); } catch (org.eclipse.birt.chart.exception.ChartException oosx) { org.eclipse.birt.chart.device.svg.SVGRendererImpl.logger.log(oosx); return; } } break; case org.eclipse.birt.chart.model.attribute.ActionType.TOGGLE_DATA_POINT_VISIBILITY : if ((src.getType()) == (org.eclipse.birt.chart.event.StructureType.SERIES)) { final org.eclipse.birt.chart.model.component.Series seRT = ((org.eclipse.birt.chart.model.component.Series) (src.getSource())); org.eclipse.birt.chart.device.svg.SVGRendererImpl.logger.log(ILogger.INFORMATION, ((org.eclipse.birt.chart.device.extension.i18n.Messages.getString("info.toggle.datapoint.visibility", getULocale())) + seRT)); org.eclipse.birt.chart.model.component.Series seDT = null; try { seDT = findDesignTimeSeries(seRT); } catch (org.eclipse.birt.chart.exception.ChartException oosx) { org.eclipse.birt.chart.device.svg.SVGRendererImpl.logger.log(oosx); return; } if (seDT != null) cacheHotspots.put(elm, seDT); } break; case org.eclipse.birt.chart.model.attribute.ActionType.HIGHLIGHT : if ((src.getType()) == (org.eclipse.birt.chart.event.StructureType.SERIES)) { final org.eclipse.birt.chart.model.component.Series seRT = ((org.eclipse.birt.chart.model.component.Series) (src.getSource())); org.eclipse.birt.chart.device.svg.SVGRendererImpl.logger.log(ILogger.INFORMATION, ((org.eclipse.birt.chart.device.extension.i18n.Messages.getString("info.toggle.visibility", getULocale())) + seRT)); java.lang.String scriptEvent = getJsScriptEvent(tg.getCondition().getValue()); if (scriptEvent != null) { org.eclipse.birt.chart.model.component.Series seDT = null; try { seDT = findDesignTimeSeries(seRT); java.util.List components = ((java.util.List) (componentPrimitives.get(seDT))); if (components != null) { java.util.Iterator iter = components.iterator(); java.lang.StringBuffer sb = new java.lang.StringBuffer(); sb.append(seDT.hashCode()); if (iter.hasNext()) sb.append(",new Array("); while (iter.hasNext()) { sb.append("'").append(iter.next()).append("'"); if (iter.hasNext()) sb.append(","); } if ((components.size()) > 0) sb.append(")"); elm.setAttribute(scriptEvent, (("highlight(evt, " + (sb.toString())) + ")")); if ((tg.getCondition().getValue()) == (org.eclipse.birt.chart.model.attribute.TriggerCondition.ONMOUSEOVER)) { elm.setAttribute("onmouseout", "highlight(evt, null, null)"); } setCursor(elm); ((org.eclipse.birt.chart.device.svg.SVGGraphics2D) (_g2d)).addCSSStyle((".class" + (seDT.hashCode())), "visibility", "visible"); } } catch (org.eclipse.birt.chart.exception.ChartException oosx) { org.eclipse.birt.chart.device.svg.SVGRendererImpl.logger.log(oosx); return; } } } break; case org.eclipse.birt.chart.model.attribute.ActionType.INVOKE_SCRIPT : final org.eclipse.birt.chart.event.StructureSource sructSource = ((org.eclipse.birt.chart.event.StructureSource) (ie.getSource())); if (tg.getCondition().equals(TriggerCondition.ACCESSIBILITY_LITERAL)) { org.eclipse.birt.chart.model.attribute.AccessibilityValue accessValue = ((org.eclipse.birt.chart.model.attribute.AccessibilityValue) (tg.getAction().getValue())); if ((accessValue.getText()) != null) { org.w3c.dom.Element title = ((org.eclipse.birt.chart.device.svg.SVGGraphics2D) (_g2d)).createElement("title"); title.appendChild(svggc.dom.createTextNode(accessValue.getText())); elm.appendChild(title); } if ((accessValue.getAccessibility()) != null) { org.w3c.dom.Element description = ((org.eclipse.birt.chart.device.svg.SVGGraphics2D) (_g2d)).createElement("desc"); description.appendChild(svggc.dom.createTextNode(accessValue.getAccessibility())); elm.appendChild(description); } } else { java.lang.String scriptEvent = getJsScriptEvent(tg.getCondition().getValue()); if (scriptEvent != null) { java.lang.String script = ((org.eclipse.birt.chart.model.attribute.ScriptValue) (tg.getAction().getValue())).getScript(); java.lang.String callbackFunction = ((("callback" + (java.lang.Math.abs(script.hashCode()))) + "(evt,") + (sructSource.getSource().hashCode())) + ");"; elm.setAttribute(scriptEvent, callbackFunction); setCursor(elm); if (!(scripts.contains(script))) { ((org.eclipse.birt.chart.device.svg.SVGGraphics2D) (_g2d)).addScript(((((("function callback" + (java.lang.Math.abs(script.hashCode()))) + "(evt,source)") + "{") + script) + "}")); scripts.add(script); } } } break; } } hotspotLayer.appendChild(elm); } }
public static java.lang.String formatDateTime(java.lang.String format, com.ibm.icu.util.ULocale locale) { java.lang.String language = locale.getLanguage(); java.lang.String code = org.eclipse.birt.report.engine.emitter.excel.DateTimeUtil.locale2Code.get(locale); if (code == null) { code = org.eclipse.birt.report.engine.emitter.excel.DateTimeUtil.locale2Code.get(new java.util.Locale(language)); } if (code == null) { return format; } return code + format; }
public void start(org.eclipse.birt.report.engine.content.IReportContent report) { org.eclipse.birt.report.engine.emitter.html.HTMLReportEmitter.logger.log(java.util.logging.Level.FINE, "[HTMLReportEmitter] Start emitter."); this.report = report; writer.open(out, "UTF-8"); if (htmlRtLFlag) { java.lang.String reportStyleName = (report == null) ? null : report.getDesign().getRootStyleName(); if (reportStyleName != null) { org.eclipse.birt.report.engine.content.IStyle style = report.findStyle(reportStyleName); if (null != style) { style.setProperty(IStyle.STYLE_TEXT_ALIGN, IStyle.RIGHT_VALUE); } } } if (null == (layoutPreference)) { if (report != null) { org.eclipse.birt.report.engine.ir.Report reportDesign = report.getDesign(); org.eclipse.birt.report.model.api.ReportDesignHandle designHandle = reportDesign.getReportDesign(); java.lang.String reportLayoutPreference = designHandle.getLayoutPreference(); if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_FIXED_LAYOUT.equals(reportLayoutPreference)) { layoutPreference = org.eclipse.birt.report.engine.api.HTMLRenderOption.LAYOUT_PREFERENCE_FIXED; } else if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_AUTO_LAYOUT.equals(reportLayoutPreference)) { layoutPreference = org.eclipse.birt.report.engine.api.HTMLRenderOption.LAYOUT_PREFERENCE_AUTO; } } } if (enableAgentStyleEngine) { htmlEmitter = new org.eclipse.birt.report.engine.emitter.html.HTMLPerformanceOptimize(this, writer, isEmbeddable, layoutPreference); } else { htmlEmitter = new org.eclipse.birt.report.engine.emitter.html.HTMLVisionOptimize(this, writer, isEmbeddable, layoutPreference); } java.lang.StringBuffer defaultStyleBuffer = new java.lang.StringBuffer(); if (report != null) { java.lang.String reportStyleName = report.getDesign().getRootStyleName(); if (reportStyleName != null) { org.eclipse.birt.report.engine.content.IStyle style = report.findStyle(reportStyleName); htmlEmitter.buildDefaultStyle(defaultStyleBuffer, style); } } if (isEmbeddable) { fixTransparentPNG(); fixRedirect(); writer.openTag(HTMLTags.TAG_DIV); writer.attribute(HTMLTags.ATTR_STYLE, defaultStyleBuffer.toString()); return; } writer.startWriter(); writer.openTag(HTMLTags.TAG_HTML); writer.openTag(HTMLTags.TAG_HEAD); org.eclipse.birt.report.engine.ir.Report reportDesign = null; if (report != null) { reportDesign = report.getDesign(); org.eclipse.birt.report.model.api.ReportDesignHandle designHandle = reportDesign.getReportDesign(); java.lang.String title = designHandle.getStringProperty(IModuleModel.TITLE_PROP); if (title == null) { if ((renderOption) != null) { org.eclipse.birt.report.engine.api.HTMLRenderOption htmlOption = new org.eclipse.birt.report.engine.api.HTMLRenderOption(renderOption); title = htmlOption.getHtmlTitle(); } } if (title != null) { writer.openTag(HTMLTags.TAG_TITLE); writer.text(title); writer.closeTag(HTMLTags.TAG_TITLE); } } writer.openTag(HTMLTags.TAG_META); writer.attribute(HTMLTags.ATTR_HTTP_EQUIV, "Content-Type"); writer.attribute(HTMLTags.ATTR_CONTENT, "text/html; charset=UTF-8"); writer.closeTag(HTMLTags.TAG_META); writer.openTag(HTMLTags.TAG_STYLE); writer.attribute(HTMLTags.ATTR_TYPE, "text/css"); org.eclipse.birt.report.engine.content.IStyle style; java.lang.StringBuffer styleBuffer = new java.lang.StringBuffer(); java.lang.String defaultStyleName = "style_report"; if (report == null) { org.eclipse.birt.report.engine.emitter.html.HTMLReportEmitter.logger.log(java.util.logging.Level.WARNING, "[HTMLReportEmitter] Report object is null."); } else { writer.style(('.' + defaultStyleName), defaultStyleBuffer.toString()); java.util.Map styles = reportDesign.getStyles(); java.util.Iterator iter = styles.entrySet().iterator(); while (iter.hasNext()) { java.util.Map.Entry entry = ((java.util.Map.Entry) (iter.next())); java.lang.String styleName = ((java.lang.String) (entry.getKey())); style = ((org.eclipse.birt.report.engine.content.IStyle) (entry.getValue())); styleBuffer.setLength(0); htmlEmitter.buildStyle(styleBuffer, style); if ((styleBuffer.length()) > 0) { writer.style(('.' + styleName), styleBuffer.toString()); outputtedStyles.add(styleName); } } } writer.closeTag(HTMLTags.TAG_STYLE); fixTransparentPNG(); fixRedirect(); writer.closeTag(HTMLTags.TAG_HEAD); writer.openTag(HTMLTags.TAG_BODY); if ((defaultStyleBuffer.length()) > 0) { writer.attribute(HTMLTags.ATTR_CLASS, defaultStyleName); } if (outputMasterPageContent) { writer.attribute(HTMLTags.ATTR_STYLE, " margin:0px;"); } }
public static java.util.List getReferencedLevels(java.lang.String targetLevel, java.lang.String bindingExpr, java.util.List bindings, java.util.List rowEdgeExprList, java.util.List columnEdgeExprList) throws org.eclipse.birt.report.data.adapter.api.AdapterException { try { java.util.List result = new java.util.ArrayList(); org.eclipse.birt.report.data.adapter.api.DimensionLevel target = org.eclipse.birt.report.data.adapter.api.CubeQueryUtil.getTargetDimLevel(targetLevel); java.lang.String bindingName = org.eclipse.birt.report.data.adapter.api.CubeQueryUtil.getReferencedScriptObject(bindingExpr, "data"); if (bindingName == null) return result; org.eclipse.birt.data.engine.api.IBinding binding = null; for (int i = 0; i < (bindings.size()); i++) { org.eclipse.birt.data.engine.api.IBinding bd = ((org.eclipse.birt.data.engine.api.IBinding) (bindings.get(i))); if (bd.getBindingName().equals(bindingName)) { binding = bd; break; } } if (binding == null) { return result; } java.util.List aggrOns = binding.getAggregatOns(); boolean isMeasure = false; if ((aggrOns.size()) == 0) { isMeasure = (org.eclipse.birt.report.data.adapter.api.CubeQueryUtil.getReferencedScriptObject(binding.getExpression(), "measure")) != null; } int candidateEdge = org.eclipse.birt.report.data.adapter.api.CubeQueryUtil.getAxisQualifierEdgeType(rowEdgeExprList, columnEdgeExprList, target); if (candidateEdge == (-1)) return result; if (isMeasure) { switch (candidateEdge) { case org.eclipse.birt.data.engine.olap.api.query.ICubeQueryDefinition.ROW_EDGE : org.eclipse.birt.report.data.adapter.api.CubeQueryUtil.populateLevels(rowEdgeExprList, result); break; case org.eclipse.birt.data.engine.olap.api.query.ICubeQueryDefinition.COLUMN_EDGE : org.eclipse.birt.report.data.adapter.api.CubeQueryUtil.populateLevels(columnEdgeExprList, result); break; } } else { switch (candidateEdge) { case org.eclipse.birt.data.engine.olap.api.query.ICubeQueryDefinition.ROW_EDGE : org.eclipse.birt.report.data.adapter.api.CubeQueryUtil.populateAxisLevels(aggrOns, rowEdgeExprList, result); break; case org.eclipse.birt.data.engine.olap.api.query.ICubeQueryDefinition.COLUMN_EDGE : org.eclipse.birt.report.data.adapter.api.CubeQueryUtil.populateAxisLevels(aggrOns, columnEdgeExprList, result); break; } } return result; } catch (org.eclipse.birt.data.engine.core.DataException e) { throw new org.eclipse.birt.report.data.adapter.api.AdapterException(e.getLocalizedMessage(), e); } }
protected void addPages() { java.util.List formPageList = org.eclipse.birt.report.designer.internal.ui.extension.EditorContributorManager.getInstance().getEditorContributor(getEditorSite().getId()).formPageList; boolean error = false; java.lang.String fileName = getProvider().getInputPath(getEditorInput()).toOSString(); java.util.List message = org.eclipse.birt.report.model.api.ModuleUtil.checkVersion(fileName); if ((message.size()) > 0) { org.eclipse.birt.report.model.api.IVersionInfo info = ((org.eclipse.birt.report.model.api.IVersionInfo) (message.get(0))); if (!(org.eclipse.jface.dialogs.MessageDialog.openConfirm(org.eclipse.birt.report.designer.internal.ui.util.UIUtil.getDefaultShell(), org.eclipse.birt.report.designer.nls.Messages.getString("MultiPageReportEditor.CheckVersion.Dialog.Title"), info.getLocalizedMessage()))) { for (java.util.Iterator iter = formPageList.iterator(); iter.hasNext();) { org.eclipse.birt.report.designer.internal.ui.extension.FormPageDef pagedef = ((org.eclipse.birt.report.designer.internal.ui.extension.FormPageDef) (iter.next())); if (org.eclipse.birt.report.designer.ui.editors.MultiPageReportEditor.XMLSourcePage_ID.equals(pagedef.id)) { try { addPage(pagedef.createPage(), pagedef.displayName); break; } catch (java.lang.Exception e) { } } } return; } } org.eclipse.birt.report.designer.internal.ui.util.UIUtil.processSessionResourceFolder(getEditorInput(), org.eclipse.birt.report.designer.internal.ui.util.UIUtil.getProjectFromInput(getEditorInput()), null); getProvider().getReportModuleHandle(getEditorInput()); for (java.util.Iterator iter = formPageList.iterator(); iter.hasNext();) { org.eclipse.birt.report.designer.internal.ui.extension.FormPageDef pagedef = ((org.eclipse.birt.report.designer.internal.ui.extension.FormPageDef) (iter.next())); try { addPage(pagedef.createPage(), pagedef.displayName); } catch (java.lang.Exception e) { error = true; } } if (error) { setActivePage(org.eclipse.birt.report.designer.ui.editors.MultiPageReportEditor.XMLSourcePage_ID); } }
public java.lang.Object get(java.lang.String arg0, org.mozilla.javascript.Scriptable scope) { try { if ((this.currentIterator) == null) return null; if (("__rownum".equalsIgnoreCase(arg0)) || ("0".equalsIgnoreCase(arg0))) { return new java.lang.Integer(this.currentIterator.getRowIndex()); } if ("_outer".equalsIgnoreCase(arg0)) { return new org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.JSResultIteratorObject(it.getParent()); } return org.eclipse.birt.core.script.JavascriptEvalUtil.convertToJavascriptValue(this.currentIterator.getValue(arg0), scope); } catch (org.eclipse.birt.core.exception.BirtException e) { return null; } }
private org.eclipse.birt.report.engine.api.IGetParameterDefinitionTask getParameterDefinitionTask(org.eclipse.birt.report.service.api.IViewerReportDesignHandle design, org.eclipse.birt.report.service.api.InputOptions options) throws org.eclipse.birt.report.service.api.ReportServiceException { org.eclipse.birt.report.engine.api.IGetParameterDefinitionTask task; if ((design.getContentType()) == (org.eclipse.birt.report.service.api.IViewerReportDesignHandle.RPT_RUNNABLE_OBJECT)) { org.eclipse.birt.report.engine.api.IReportRunnable runnable = ((org.eclipse.birt.report.engine.api.IReportRunnable) (design.getDesignObject())); task = org.eclipse.birt.report.service.ReportEngineService.getInstance().createGetParameterDefinitionTask(runnable); } else { try { task = getParameterDefinitionTask(design.getFileName(), options); } catch (org.eclipse.birt.report.engine.api.EngineException e) { throw new org.eclipse.birt.report.service.api.ReportServiceException(e.getLocalizedMessage(), e); } } if (task != null) { javax.servlet.http.HttpServletRequest request = ((javax.servlet.http.HttpServletRequest) (options.getOption(InputOptions.OPT_REQUEST))); java.util.HashMap context = new java.util.HashMap(); context.put(EngineConstants.APPCONTEXT_BIRT_VIEWER_HTTPSERVET_REQUEST, request); task.setAppContext(context); } return task; }
public org.eclipse.birt.report.model.api.ReportItemHandle getViewHost() { org.eclipse.birt.report.model.api.DesignElementHandle container = getContainer(); if (!(container instanceof org.eclipse.birt.report.model.api.MultiViewsHandle)) return null; org.eclipse.birt.report.model.api.MultiViewsHandle viewHandle = ((org.eclipse.birt.report.model.api.MultiViewsHandle) (container)); org.eclipse.birt.report.model.api.DesignElementHandle viewHost = viewHandle.getContainer(); return viewHost instanceof org.eclipse.birt.report.model.api.ReportItemHandle ? ((org.eclipse.birt.report.model.api.ReportItemHandle) (viewHost)) : null; }
public static org.eclipse.birt.report.model.elements.ReportItem getCompoundContainer(org.eclipse.birt.report.model.api.core.IDesignElement element) { org.eclipse.birt.report.model.core.DesignElement tmpElement = ((org.eclipse.birt.report.model.core.DesignElement) (element)); int maxLevel = 3; for (int i = 0; i < maxLevel; i++) { if (((tmpElement == null) || (tmpElement instanceof org.eclipse.birt.report.model.elements.TableItem)) || (tmpElement instanceof org.eclipse.birt.report.model.elements.GridItem)) return ((org.eclipse.birt.report.model.elements.ReportItem) (tmpElement)); tmpElement = tmpElement.getContainer(); } return null; }
private org.eclipse.birt.data.engine.api.querydefn.QueryDefinition createQueryDefinition(org.eclipse.birt.report.model.api.DataSetHandle dataSet) { org.eclipse.birt.data.engine.api.querydefn.QueryDefinition queryDefn = new org.eclipse.birt.data.engine.api.querydefn.QueryDefinition(); queryDefn.setDataSetName(dataSet.getQualifiedName()); queryDefn.setAutoBinding(true); return queryDefn; }
protected void repeatHeader() { if ((bandStatus) == (org.eclipse.birt.report.engine.content.IBandContent.BAND_HEADER)) { return; } org.eclipse.birt.report.engine.content.ITableBandContent header = context.getWrappedTableHeader(content.getInstanceID()); if ((header == null) || (!(tableContent.isHeaderRepeat()))) { return; } if (header.getChildren().isEmpty()) { return; } org.eclipse.birt.report.engine.layout.pdf.emitter.TableRegionLayout rLayout = getTableRegionLayout(); rLayout.initialize(header); rLayout.layout(); org.eclipse.birt.report.engine.layout.area.impl.TableArea tableRegion = ((org.eclipse.birt.report.engine.layout.area.impl.TableArea) (header.getExtension(IContent.LAYOUT_EXTENSION))); if ((tableRegion != null) && ((tableRegion.getAllocatedHeight()) < (getCurrentMaxContentHeight()))) { java.util.Iterator iter = tableRegion.getChildren(); org.eclipse.birt.report.engine.layout.pdf.emitter.TableLayout.TableContext tableContext = ((org.eclipse.birt.report.engine.layout.pdf.emitter.TableLayout.TableContext) (contextList.getLast())); while (iter.hasNext()) { org.eclipse.birt.report.engine.layout.area.impl.ContainerArea area = ((org.eclipse.birt.report.engine.layout.area.impl.ContainerArea) (iter.next())); java.util.Iterator rowIter = area.getChildren(); while (rowIter.hasNext()) { org.eclipse.birt.report.engine.layout.area.impl.AbstractArea row = ((org.eclipse.birt.report.engine.layout.area.impl.AbstractArea) (rowIter.next())); if (row instanceof org.eclipse.birt.report.engine.layout.area.impl.RowArea) { tableContext.layout.addRow(((org.eclipse.birt.report.engine.layout.area.impl.RowArea) (row))); } } } iter = tableRegion.getChildren(); while (iter.hasNext()) { org.eclipse.birt.report.engine.layout.area.impl.AbstractArea area = ((org.eclipse.birt.report.engine.layout.area.impl.AbstractArea) (iter.next())); addArea(area); } } content.setExtension(IContent.LAYOUT_EXTENSION, null); }
org.eclipse.birt.data.engine.api.IResultMetaData refreshMetaData(org.eclipse.birt.report.model.api.DataSetHandle dataSetHandle, boolean holdEvent) throws org.eclipse.birt.core.exception.BirtException { org.eclipse.birt.data.engine.api.IResultMetaData rsMeta = null; try { rsMeta = this.getDataSetMetaData(dataSetHandle, false); } catch (org.eclipse.birt.core.exception.BirtException e1) { if (holdEvent || (!(dataSetHandle.canEdit()))) { org.eclipse.birt.report.model.api.util.CompatibilityUtil.updateResultSetinCachedMetaData(dataSetHandle, new java.util.ArrayList()); } else { if ((dataSetHandle.getCachedMetaDataHandle()) != null) dataSetHandle.getCachedMetaDataHandle().getResultSet().clearValue(); else dataSetHandle.setCachedMetaData(org.eclipse.birt.report.model.api.StructureFactory.createCachedMetaData()); } throw e1; } if (needsSetCachedMetaData(dataSetHandle, rsMeta)) { java.util.List columnList = new java.util.ArrayList(); if ((rsMeta != null) && ((rsMeta.getColumnCount()) != 0)) { for (int i = 1; i <= (rsMeta.getColumnCount()); i++) { org.eclipse.birt.report.model.api.elements.structures.ResultSetColumn rsc = org.eclipse.birt.report.model.api.StructureFactory.createResultSetColumn(); rsc.setColumnName(getColumnName(rsMeta, i)); rsc.setDataType(org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.adapterToModelDataType(rsMeta.getColumnType(i))); rsc.setPosition(new java.lang.Integer(i)); columnList.add(rsc); } } if (holdEvent || (!(dataSetHandle.canEdit()))) { org.eclipse.birt.report.model.api.util.CompatibilityUtil.updateResultSetinCachedMetaData(dataSetHandle, columnList); } else { if ((dataSetHandle.getCachedMetaDataHandle()) != null) { java.util.List resultSetColumnHandles = getResultSetColumnHandles(dataSetHandle.getCachedMetaDataHandle()); if ((resultSetColumnHandles.size()) == (columnList.size())) { for (int i = 0; i < (resultSetColumnHandles.size()); i++) { org.eclipse.birt.report.model.api.ResultSetColumnHandle rsh = ((org.eclipse.birt.report.model.api.ResultSetColumnHandle) (resultSetColumnHandles.get(i))); org.eclipse.birt.report.model.api.elements.structures.ResultSetColumn rsc = ((org.eclipse.birt.report.model.api.elements.structures.ResultSetColumn) (columnList.get(i))); if (!(rsh.getColumnName().equals(rsc.getColumnName()))) { rsh.setColumnName(rsc.getColumnName()); } if (!(rsh.getDataType().equals(rsc.getDataType()))) { rsh.setDataType(rsc.getDataType()); } } return rsMeta; } else { dataSetHandle.getCachedMetaDataHandle().getResultSet().clearValue(); } } else { dataSetHandle.setCachedMetaData(org.eclipse.birt.report.model.api.StructureFactory.createCachedMetaData()); } for (int i = 0; i < (columnList.size()); i++) { dataSetHandle.getCachedMetaDataHandle().getResultSet().addItem(((org.eclipse.birt.report.model.api.elements.structures.ResultSetColumn) (columnList.get(i)))); } } } return rsMeta; }
public void setTextIndent(org.eclipse.birt.report.engine.content.ITextContent content) { if ((((currentIP) == 0) && (!(setIndent))) && (content != null)) { org.eclipse.birt.report.engine.content.IStyle contentStyle = content.getComputedStyle(); currentIP = getDimensionValue(contentStyle.getProperty(StyleConstants.STYLE_TEXT_INDENT), maxAvaWidth); setIndent = true; } }
private boolean handleValidateLibrary(java.lang.Object dragObj) { org.eclipse.gef.EditPart targetEditPart = getTargetEditPart(); if (targetEditPart == null) { return true; } if (dragObj != null) { java.lang.Object[] dragObjs; if (dragObj instanceof java.lang.Object[]) { dragObjs = ((java.lang.Object[]) (dragObj)); } else { dragObjs = new java.lang.Object[]{ dragObj }; } if ((dragObjs.length) == 0) { return false; } for (int i = 0; i < (dragObjs.length); i++) { dragObj = dragObjs[i]; if (dragObj instanceof org.eclipse.birt.report.model.api.ReportElementHandle) { if ((((org.eclipse.birt.report.model.api.ReportElementHandle) (dragObj)).getRoot()) instanceof org.eclipse.birt.report.model.api.LibraryHandle) { if (((dragObj instanceof org.eclipse.birt.report.model.api.DataSetHandle) || (dragObj instanceof org.eclipse.birt.report.model.api.ParameterHandle)) && ((getTargetEditPart()) == null)) return true; if ((!(org.eclipse.birt.report.designer.util.DNDUtil.handleValidateTargetCanContain(targetEditPart.getModel(), dragObj))) || (!(org.eclipse.birt.report.designer.util.DNDUtil.handleValidateTargetCanContainMore(targetEditPart.getModel(), 1)))) { return false; } } else { return false; } } else if ((dragObj instanceof org.eclipse.birt.report.model.api.EmbeddedImageHandle) && ((((org.eclipse.birt.report.model.api.EmbeddedImageHandle) (dragObj)).getElementHandle().getRoot()) instanceof org.eclipse.birt.report.model.api.LibraryHandle)) { int canContain = org.eclipse.birt.report.designer.util.DNDUtil.handleValidateTargetCanContain(targetEditPart.getModel(), dragObj, true); return canContain == (org.eclipse.birt.report.designer.util.DNDUtil.CONTAIN_THIS); } else { return false; } } return true; } return false; }
public java.lang.String getResourceFolder(org.eclipse.core.resources.IProject project, java.lang.String parentPath) { java.lang.String resourceFolder = org.eclipse.birt.report.designer.ui.ReportPlugin.getDefault().getResourcePreference(project); if ((resourceFolder == null) || (resourceFolder.equals(""))) { resourceFolder = parentPath; } if (resourceFolder == null) { resourceFolder = ""; } java.lang.String str = resourceFolder; try { org.eclipse.core.variables.IStringVariableManager mgr = org.eclipse.core.variables.VariablesPlugin.getDefault().getStringVariableManager(); str = mgr.performStringSubstitution(resourceFolder); } catch (org.eclipse.core.runtime.CoreException e) { str = resourceFolder; } resourceFolder = str; java.io.File file = new java.io.File(resourceFolder); if (!(file.isAbsolute())) { if ((project != null) && ((project.getLocation()) != null)) { resourceFolder = project.getLocation().append(resourceFolder).toOSString(); } else { if ((resourceFolder != null) && (!(resourceFolder.startsWith(java.io.File.separator)))) { resourceFolder = (java.io.File.separator) + resourceFolder; } resourceFolder = parentPath + resourceFolder; } } return resourceFolder; }
public void drawText(java.lang.String text, float textX, float textY, float width, float height, org.eclipse.birt.report.engine.layout.pdf.font.FontInfo fontInfo, java.awt.Color color, boolean rtl, org.eclipse.birt.report.engine.emitter.ppt.util.PPTUtil.HyperlinkDef link) { com.lowagie.text.pdf.BaseFont baseFont = fontInfo.getBaseFont(); java.lang.String fontName = getFontName(baseFont); println((("<v:shape id=3D\"_x0000_s" + (++(shapeCount))) + "\" type=3D\"#_x0000_t202\"")); println(((((((((" style=3D'position:absolute;left:" + textX) + "pt;top:") + textY) + "pt;width:") + width) + "pt;height:") + height) + "pt;v-text-anchor:bottom-baseline;mso-wrap-style:none;'")); println(" filled=3D'f' stroked=3D'f'>"); println("<v:textbox style=3D'mso-fit-shape-to-text:f;' inset=3D'0.00pt 0.00pt 0.00pt 0.00pt'/>"); println("</v:shape>"); println((("<div v:shape=3D\"_x0000_s" + (shapeCount)) + "\">")); println(((((((((((("<div style=3D'mso-text-indent-alt:" + 0) + ";text-align:left;'>") + "<span style=3D'font-family:") + fontName) + ";font-size:") + (fontInfo.getFontSize())) + "pt;color:#") + (getColorString(color))) + ";'") + (buildI18nAttributes(text, rtl))) + ">")); boolean isItalic = (fontInfo != null) && (((fontInfo.getFontStyle()) & (com.lowagie.text.Font.ITALIC)) != 0); boolean isBold = (fontInfo != null) && (((fontInfo.getFontStyle()) & (com.lowagie.text.Font.BOLD)) != 0); if (isItalic) { print("<i>"); } if (isBold) { print("<b>"); } if (link != null) { java.lang.String hyperlink = link.getLink(); java.lang.String tooltip = link.getTooltip(); if (hyperlink != null) { hyperlink = codeLink(hyperlink); print((("<p:onmouseclick hyperlinktype=3D\"url\" href=3D\"" + hyperlink) + "\"")); if (tooltip != null) { tooltip = codeLink(tooltip); print(((" tips=3D\"" + tooltip) + "\"")); } println((("/><a href=3D\"" + hyperlink) + "/\" target=3D\"_parent\" onclick=3D\"window.event.cancelBubble=3Dtrue;\">")); } } print(getEscapedStr(text)); if (link != null) { print("</a>"); } if (isBold) { print("</b>"); } if (isItalic) { print("</i>"); } println("</span></div>"); println("</div>"); }
private org.eclipse.birt.report.engine.api.IGetParameterDefinitionTask getParameterDefinitionTask(org.eclipse.birt.report.service.api.IViewerReportDesignHandle design, org.eclipse.birt.report.service.api.InputOptions options) throws org.eclipse.birt.report.service.api.ReportServiceException { org.eclipse.birt.report.engine.api.IGetParameterDefinitionTask task; if ((design.getContentType()) == (org.eclipse.birt.report.service.api.IViewerReportDesignHandle.RPT_RUNNABLE_OBJECT)) { org.eclipse.birt.report.engine.api.IReportRunnable runnable = ((org.eclipse.birt.report.engine.api.IReportRunnable) (design.getDesignObject())); task = org.eclipse.birt.report.service.ReportEngineService.getInstance().createGetParameterDefinitionTask(runnable, options); } else { try { task = getParameterDefinitionTask(design.getFileName(), options); } catch (org.eclipse.birt.report.engine.api.EngineException e) { throw new org.eclipse.birt.report.service.api.ReportServiceException(e.getLocalizedMessage(), e.getCause()); } } if (task != null) { javax.servlet.http.HttpServletRequest request = ((javax.servlet.http.HttpServletRequest) (options.getOption(InputOptions.OPT_REQUEST))); java.util.HashMap context = new java.util.HashMap(); context.put(EngineConstants.APPCONTEXT_BIRT_VIEWER_HTTPSERVET_REQUEST, request); org.eclipse.birt.report.utility.ParameterAccessor.pushAppContext(context, request); task.setAppContext(context); } return task; }
public void prepare(org.eclipse.birt.report.engine.ir.Report report, java.util.Map appContext) { org.eclipse.birt.report.model.api.ReportDesignHandle rptHandle = report.getReportDesign(); java.util.List dataSetList = rptHandle.getAllDataSets(); for (int i = 0; i < (dataSetList.size()); i++) { org.eclipse.birt.report.model.api.DataSetHandle dataset = ((org.eclipse.birt.report.model.api.DataSetHandle) (dataSetList.get(i))); if (dataset.clientsIterator().hasNext()) { try { adapter.defineDataSet(dataset, dteSession); } catch (org.eclipse.birt.core.exception.BirtException be) { org.eclipse.birt.report.engine.data.dte.AbstractDataEngine.logger.log(java.util.logging.Level.SEVERE, be.getMessage(), be); context.addException(dataset, be); } } } java.util.List cubeList = rptHandle.getAllCubes(); for (int i = 0; i < (cubeList.size()); i++) { org.eclipse.birt.report.model.api.olap.CubeHandle cube = ((org.eclipse.birt.report.model.api.olap.CubeHandle) (cubeList.get(i))); if (cube.clientsIterator().hasNext()) { try { dteSession.defineCube(cube); } catch (org.eclipse.birt.core.exception.BirtException be) { org.eclipse.birt.report.engine.data.dte.AbstractDataEngine.logger.log(java.util.logging.Level.SEVERE, be.getMessage(), be); context.addException(cube, be); } } } new org.eclipse.birt.report.engine.data.dte.ReportQueryBuilder(report, context, dteSession).build(); doPrepareQuery(report, appContext); }
public static org.eclipse.birt.report.model.elements.Library checkIncludeLibrary(org.eclipse.birt.report.model.core.Module module, java.lang.String namespace, java.net.URL url, org.eclipse.birt.report.model.core.Module outermostModule) throws org.eclipse.birt.report.model.api.command.LibraryException { org.eclipse.birt.report.model.elements.Library foundLib = outermostModule.getLibraryWithNamespace(namespace); if (url != null) { if (foundLib != null) { java.lang.String tmpPath = foundLib.getLocation(); java.lang.String foundPath = url.toExternalForm(); if (!(foundPath.equalsIgnoreCase(tmpPath))) { throw new org.eclipse.birt.report.model.api.command.LibraryException(module, new java.lang.String[]{ namespace }, org.eclipse.birt.report.model.api.command.LibraryException.DESIGN_EXCEPTION_DUPLICATE_LIBRARY_NAMESPACE); } if ((module.getLibraryWithNamespace(namespace, IAccessControl.DIRECTLY_INCLUDED_LEVEL)) != null) { throw new org.eclipse.birt.report.model.api.command.LibraryException(module, new java.lang.String[]{ namespace }, org.eclipse.birt.report.model.api.command.LibraryException.DESIGN_EXCEPTION_DUPLICATE_LIBRARY_NAMESPACE); } } else { foundLib = outermostModule.getLibraryByLocation(url.toExternalForm()); if ((foundLib != null) && (!(namespace.equalsIgnoreCase(foundLib.getNamespace())))) { throw new org.eclipse.birt.report.model.api.command.LibraryException(module, new java.lang.String[]{ namespace }, org.eclipse.birt.report.model.api.command.LibraryException.DESIGN_EXCEPTION_LIBRARY_ALREADY_INCLUDED); } } if ((module.getLibraryByLocation(url.toExternalForm(), IAccessControl.DIRECTLY_INCLUDED_LEVEL)) != null) { throw new org.eclipse.birt.report.model.api.command.LibraryException(module, new java.lang.String[]{ url.toExternalForm() }, org.eclipse.birt.report.model.api.command.LibraryException.DESIGN_EXCEPTION_LIBRARY_ALREADY_INCLUDED); } } if (module instanceof org.eclipse.birt.report.model.elements.Library) { org.eclipse.birt.report.model.elements.Library library = ((org.eclipse.birt.report.model.elements.Library) (module)); if (((url != null) && (library.isRecursiveFile(url.toExternalForm()))) || (library.isRecursiveNamespace(namespace))) { throw new org.eclipse.birt.report.model.api.command.LibraryException(module, new java.lang.String[]{ namespace }, org.eclipse.birt.report.model.api.command.LibraryException.DESIGN_EXCEPTION_LIBRARY_INCLUDED_RECURSIVELY); } } return foundLib; }
private void populateTypesTable() { htTypes.clear(); java.util.Collection cTypes = org.eclipse.birt.chart.ui.swt.wizard.ChartUIExtensionsImpl.instance().getUIChartTypeExtensions(); java.util.Iterator iterTypes = cTypes.iterator(); while (iterTypes.hasNext()) { org.eclipse.birt.chart.ui.swt.interfaces.IChartType type = ((org.eclipse.birt.chart.ui.swt.interfaces.IChartType) (iterTypes.next())); if (((org.eclipse.birt.chart.ui.swt.wizard.ChartWizardContext) (context)).isEnabled(type.getName())) { htTypes.put(type.getName(), type); } } }
protected void okPressed() { try { inputParameter.setName(nameEditor.getText()); inputParameter.setPromptText(org.eclipse.birt.report.designer.internal.ui.util.UIUtil.convertToModelString(promptTextEditor.getText(), true)); java.lang.String newControlType = getSelectedControlType(); if (org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.PARAM_CONTROL_COMBO.equals(newControlType)) { newControlType = org.eclipse.birt.report.model.api.elements.DesignChoiceConstants.PARAM_CONTROL_LIST_BOX; inputParameter.setMustMatch(false); } else if (org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.PARAM_CONTROL_LIST.equals(newControlType)) { newControlType = org.eclipse.birt.report.model.api.elements.DesignChoiceConstants.PARAM_CONTROL_LIST_BOX; inputParameter.setMustMatch(true); } else { inputParameter.setProperty(ScalarParameterHandle.MUCH_MATCH_PROP, null); } inputParameter.setControlType(newControlType); if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(getSelectedDataType())) { defaultValue = org.eclipse.birt.report.designer.util.DEUtil.convertToXMLString(org.eclipse.birt.core.data.DataTypeUtil.toDate(defaultValue, ULocale.US)); } inputParameter.setDefaultValue(defaultValue); inputParameter.setDataType(org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.DATA_TYPE_CHOICE_SET.findChoiceByDisplayName(dataTypeChooser.getText()).getName()); org.eclipse.birt.report.model.api.PropertyHandle selectionChioceList = inputParameter.getPropertyHandle(ScalarParameterHandle.SELECTION_LIST_PROP); selectionChioceList.setValue(null); if (isStatic()) { inputParameter.setValueType(DesignChoiceConstants.PARAM_VALUE_TYPE_STATIC); if ((!(DesignChoiceConstants.PARAM_CONTROL_TEXT_BOX.equals(newControlType))) && (!(DesignChoiceConstants.PARAM_CONTROL_CHECK_BOX.equals(newControlType)))) { for (java.util.Iterator iter = choiceList.iterator(); iter.hasNext();) { org.eclipse.birt.report.model.api.elements.structures.SelectionChoice choice = ((org.eclipse.birt.report.model.api.elements.structures.SelectionChoice) (iter.next())); if ((isValidValue(choice.getValue())) == null) { selectionChioceList.addItem(choice); } } } inputParameter.setDataSetName(null); inputParameter.setValueExpr(null); inputParameter.setLabelExpr(null); } else { inputParameter.setValueType(DesignChoiceConstants.PARAM_VALUE_TYPE_DYNAMIC); inputParameter.setDataSetName(dataSetChooser.getText()); inputParameter.setValueExpr(getExpression(columnChooser.getText())); if (displayTextChooser.getText().equals("<None>")) { inputParameter.setLabelExpr(""); } else { inputParameter.setLabelExpr(getExpression(displayTextChooser.getText())); } } inputParameter.setHelpText(org.eclipse.birt.report.designer.internal.ui.util.UIUtil.convertToModelString(helpTextEditor.getText(), false)); inputParameter.setCategory(formatCategroy); inputParameter.setPattern(formatPattern); if (((isStatic()) && ((org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.PARAM_CONTROL_COMBO.equals(getSelectedControlType())) || (DesignChoiceConstants.PARAM_CONTROL_RADIO_BUTTON.equals(getSelectedControlType())))) && (!(containValue(null, defaultValue, org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.COLUMN_VALUE)))) { defaultValue = null; } if (dirtyProperties.containsKey(org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.CHECKBOX_HIDDEN)) { inputParameter.setHidden(getProperty(org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.CHECKBOX_HIDDEN)); } if (dirtyProperties.containsKey(org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.CHECKBOX_ALLOW_NULL)) { inputParameter.setAllowNull(getProperty(org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.CHECKBOX_ALLOW_NULL)); } if (allowBlank.isEnabled()) { if (dirtyProperties.containsKey(org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.CHECKBOX_ALLOW_BLANK)) { inputParameter.setAllowBlank(getProperty(org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.CHECKBOX_ALLOW_BLANK)); } } else { inputParameter.setProperty(ScalarParameterHandle.ALLOW_BLANK_PROP, null); } if (doNotEcho.isEnabled()) { if (dirtyProperties.containsKey(org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.CHECKBOX_DO_NOT_ECHO)) { inputParameter.setConcealValue(getProperty(org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.CHECKBOX_DO_NOT_ECHO)); } } else { inputParameter.setProperty(ScalarParameterHandle.CONCEAL_VALUE_PROP, null); } if (needSort.isEnabled()) { if (dirtyProperties.containsKey(org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.CHECKBOX_SORT)) { inputParameter.setFixedOrder((!(getProperty(org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.CHECKBOX_SORT)))); } } else { inputParameter.setProperty(ScalarParameterHandle.FIXED_ORDER_PROP, null); } if ((!(isStatic())) && (!(org.eclipse.birt.report.model.api.util.StringUtil.isBlank(listLimit.getText())))) { try { inputParameter.setListlimit(java.lang.Integer.parseInt(listLimit.getText())); } catch (java.lang.NumberFormatException ex) { org.eclipse.birt.report.designer.internal.ui.util.ExceptionHandler.openErrorMessageBox(org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.ERROR_TITLE_INVALID_LIST_LIMIT, java.text.MessageFormat.format(org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.ERROR_MSG_INVALID_LIST_LIMIT, new java.lang.Object[]{ java.lang.Integer.toString(java.lang.Integer.MAX_VALUE) })); } } else { inputParameter.setProperty(ScalarParameterHandle.LIST_LIMIT_PROP, null); } } catch (java.lang.Exception e) { org.eclipse.birt.report.designer.internal.ui.util.ExceptionHandler.handle(e); return; } setResult(inputParameter); super.okPressed(); }
public static java.net.URI getReportDesignPath() { if (((org.eclipse.birt.report.designer.data.ui.util.Utility.getReportModuleHandle()) == null) || ((org.eclipse.birt.report.designer.data.ui.util.Utility.getReportModuleHandle().getSystemId()) == null)) { return null; } try { return new java.net.URI(org.eclipse.birt.report.designer.data.ui.util.Utility.getReportModuleHandle().getSystemId().getPath()); } catch (java.net.URISyntaxException e) { return null; } }
public org.eclipse.birt.report.model.api.VariableElementHandle handle(org.eclipse.birt.report.model.core.Module module) { if ((handle) == null) { org.eclipse.birt.report.model.core.Module root = getRoot(); if ((root != null) && (root != module)) throw new java.lang.IllegalArgumentException("Illgal varialble element handle generation!"); handle = new org.eclipse.birt.report.model.api.VariableElementHandle(module, this); } return handle; }
public boolean canProcessWithWarning() { if (!(isAggregate())) { return true; } try { java.lang.String type = getDataTypeDisplayName(org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.adapterToModelDataType(org.eclipse.birt.report.designer.data.ui.util.DataUtil.getAggregationManager().getAggregation(getFunctionByDisplayName(cmbFunction.getText()).getName()).getDataType())); if (((type != null) && (!(org.eclipse.birt.core.data.DataType.getName(DataType.ANY_TYPE).equals(type)))) && (!(type.equals(cmbType.getText())))) { if (!(canProcessFunctionTypeError(cmbFunction.getText(), cmbType.getText(), type))) { return false; } } org.eclipse.birt.data.engine.api.aggregation.IAggrFunction function = getFunctionByDisplayName(cmbFunction.getText()); if (function != null) { org.eclipse.birt.report.model.api.DataSetHandle dataSetHandle = org.eclipse.birt.report.designer.util.DEUtil.getFirstDataSet(this.bindingHolder); java.util.List<org.eclipse.birt.report.model.api.elements.structures.ResultSetColumn> columnList = null; if (dataSetHandle != null) { org.eclipse.birt.report.model.api.CachedMetaDataHandle meta = dataSetHandle.getCachedMetaDataHandle(); if (meta == null) { org.eclipse.birt.report.designer.data.ui.dataset.DataSetUIUtil.updateColumnCache(dataSetHandle); meta = dataSetHandle.getCachedMetaDataHandle(); } columnList = meta.getResultSet().getListValue(); } java.util.List<org.eclipse.birt.report.model.api.ComputedColumnHandle> bindingList = org.eclipse.birt.report.designer.util.DEUtil.getAllColumnBindingList(this.bindingHolder, true); loop : for (org.eclipse.birt.data.engine.api.aggregation.IParameterDefn param : function.getParameterDefn()) { if (param.isDataField()) { java.lang.String expression = getControlValue(paramsMap.get(param.getName())); if (expression != null) { if (bindingList != null) { java.lang.String bindingName = org.eclipse.birt.core.data.ExpressionUtil.getColumnBindingName(expression); if (bindingName != null) for (org.eclipse.birt.report.model.api.ComputedColumnHandle bindingHandle : bindingList) { if (bindingHandle.getName().equals(bindingName)) { if (!(param.supportDataType(org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.adaptModelDataType(bindingHandle.getDataType())))) { if (!(canProcessParamTypeError(expression, param.getDisplayName()))) { return false; } continue loop; } } } } if (columnList != null) { java.lang.String columnName = org.eclipse.birt.core.data.ExpressionUtil.getColumnName(expression); if (columnName != null) for (org.eclipse.birt.report.model.api.elements.structures.ResultSetColumn column : columnList) { if (column.getColumnName().equals(columnName)) { if (!(param.supportDataType(org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.adaptModelDataType(column.getDataType())))) { if (!(canProcessParamTypeError(expression, param.getDisplayName()))) { return false; } continue loop; } } } } } } } } } catch (org.eclipse.birt.core.exception.BirtException e) { } return true; }
public void initialize() throws org.eclipse.birt.core.exception.BirtException { hasStyle = false; boxStyle = org.eclipse.birt.report.engine.nLayout.area.style.BoxStyle.DEFAULT; localProperties = LocalProperties.DEFAULT; maxAvaWidth = parent.getCurrentMaxContentWidth(); width = maxAvaWidth; if ((parent.content) != null) { if (CSSConstants.CSS_RTL_VALUE.equals(parent.content.getComputedStyle().getDirection())) baseLevel = com.ibm.icu.text.Bidi.DIRECTION_RIGHT_TO_LEFT; } }
protected void okPressed() { try { inputGroup.setName(nameEditor.getText()); java.lang.String bookmark = bookmarkEditor.getText(); if ((bookmark != null) && (!(bookmark.equals("")))) { inputGroup.setBookmark(bookmark); } else { inputGroup.setBookmark(null); } java.lang.String newToc = org.eclipse.birt.report.designer.internal.ui.util.UIUtil.convertToModelString(tocEditor.getText(), true); if ((newToc == null) || (!(newToc.equals(inputGroup.getTocExpression())))) { inputGroup.setTocExpression(newToc); } int index; if ((inputGroup.getTOC()) != null) { index = tocStyleType.getSelectionIndex(); if (index == 0) { inputGroup.getTOC().setStyleName(null); } else { inputGroup.getTOC().setStyleName(tocStyleType.getText()); } } index = keyChooser.getSelectionIndex(); if ((index == (-1)) && ((org.eclipse.birt.report.designer.internal.ui.util.UIUtil.convertToModelString(keyChooser.getText(), true)) != null)) { java.lang.String groupKey = org.eclipse.birt.report.designer.internal.ui.util.UIUtil.convertToModelString(keyChooser.getText(), true); if ((keyChooser.indexOf(groupKey)) != (-1)) { index = keyChooser.indexOf(groupKey); } else { for (int i = 0; i < (columnList.size()); i++) { if (groupKey.equals(org.eclipse.birt.report.designer.util.DEUtil.getExpression(columnList.get(i)))) { index = i; break; } } } } java.lang.String oldKeyExpr = inputGroup.getKeyExpr(); java.lang.String newKeyExpr = getKeyExpression(); inputGroup.setKeyExpr(newKeyExpr); if ((((newKeyExpr != null) && ((newKeyExpr.length()) != 0)) && (!(newKeyExpr.equals(oldKeyExpr)))) && (index != (-1))) { org.eclipse.birt.report.model.api.SlotHandle slotHandle = null; if ((inputGroup) instanceof org.eclipse.birt.report.model.api.ListGroupHandle) { slotHandle = inputGroup.getHeader(); } else if ((inputGroup) instanceof org.eclipse.birt.report.model.api.TableGroupHandle) { if ((inputGroup.getHeader().getCount()) != 0) { org.eclipse.birt.report.model.api.RowHandle rowHandle = ((org.eclipse.birt.report.model.api.RowHandle) (inputGroup.getHeader().get(0))); org.eclipse.birt.report.model.api.CellHandle cellHandle = ((org.eclipse.birt.report.model.api.CellHandle) (rowHandle.getCells().get(0))); slotHandle = cellHandle.getContent(); } } if (slotHandle != null) { if ((slotHandle.getContents().size()) == 0) { org.eclipse.birt.report.model.api.DataItemHandle dataItemHandle = inputGroup.getElementFactory().newDataItem(null); dataItemHandle.setResultSetColumn(((org.eclipse.birt.report.model.api.ComputedColumnHandle) (columnList.get(index))).getName()); slotHandle.add(dataItemHandle); } } } index = intervalType.getSelectionIndex(); inputGroup.setInterval(org.eclipse.birt.report.designer.ui.dialogs.GroupDialog.intervalChoices[index].getName()); if (index != 0) { inputGroup.setIntervalRange(intervalRange.getText()); } else { inputGroup.setProperty(GroupHandle.INTERVAL_RANGE_PROP, null); } if (intervalBaseText.getEnabled()) { inputGroup.setIntervalBase(org.eclipse.birt.report.designer.internal.ui.util.UIUtil.convertToModelString(intervalBaseText.getText(), false)); } else { inputGroup.setIntervalBase(null); } inputGroup.setHideDetail(hideDetail.getSelection()); if (ascending.getSelection()) { inputGroup.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_ASC); } else { inputGroup.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_DESC); } inputGroup.setPageBreakBefore(org.eclipse.birt.report.designer.ui.dialogs.GroupDialog.pagebreakBeforeChoicesAll[pagebreakBeforeCombo.getSelectionIndex()].getName()); inputGroup.setPageBreakAfter(org.eclipse.birt.report.designer.ui.dialogs.GroupDialog.pagebreakAfterChoicesAll[pagebreakAfterCombo.getSelectionIndex()].getName()); inputGroup.setPageBreakInside(org.eclipse.birt.report.designer.ui.dialogs.GroupDialog.pagebreakInsideChoicesAll[pagebreakInsideCombo.getSelectionIndex()].getName()); inputGroup.setRepeatHeader(repeatHeaderButton.getSelection()); } catch (org.eclipse.birt.report.model.api.activity.SemanticException e) { org.eclipse.birt.report.designer.internal.ui.util.ExceptionHandler.handle(e); return; } setResult(inputGroup); super.okPressed(); }
public void enableInteraction(org.eclipse.birt.chart.event.InteractionEvent iev) throws org.eclipse.birt.chart.exception.ChartException { if ((_iun) == null) { org.eclipse.birt.chart.device.swing.SwingRendererImpl.logger.log(ILogger.INFORMATION, org.eclipse.birt.chart.device.extension.i18n.Messages.getString("SwingRendererImpl.exception.missing.component.interaction", getULocale())); return; } final org.eclipse.birt.chart.model.data.Trigger[] tga = iev.getTriggers(); if (tga == null) { return; } org.eclipse.birt.chart.device.swing.ShapedAction sa = getShapedAction(iev); if (sa != null) { registerTriggers(tga, sa); } }
public static boolean handleValidateInsert(java.lang.Object insertObj) { if (insertObj instanceof java.lang.Object[]) { java.lang.Object[] array = ((java.lang.Object[]) (insertObj)); if ((array.length) == 0) { return false; } for (int i = 0; i < (array.length); i++) { if (!(org.eclipse.birt.report.designer.internal.ui.dnd.InsertInLayoutUtil.handleValidateInsert(array[i]))) return false; } return true; } else if (insertObj instanceof org.eclipse.jface.viewers.IStructuredSelection) { return org.eclipse.birt.report.designer.internal.ui.dnd.InsertInLayoutUtil.handleValidateInsert(((org.eclipse.jface.viewers.IStructuredSelection) (insertObj)).toArray()); } return ((insertObj instanceof org.eclipse.birt.report.model.api.DataSetHandle) || (insertObj instanceof org.eclipse.birt.report.designer.core.model.views.data.DataSetItemModel)) || (insertObj instanceof org.eclipse.birt.report.model.api.ScalarParameterHandle); }
public void run() { if (element instanceof org.eclipse.birt.report.model.api.ReportItemHandle) { org.eclipse.ui.IWorkbenchPart part = org.eclipse.ui.PlatformUI.getWorkbench().getActiveWorkbenchWindow().getPartService().getActivePart(); org.eclipse.ui.IEditorPart epart = null; if (part instanceof org.eclipse.birt.report.designer.ui.editors.AbstractMultiPageEditor) { epart = ((org.eclipse.birt.report.designer.ui.editors.AbstractMultiPageEditor) (part)).getActivePageInstance(); } else if (part instanceof org.eclipse.birt.report.designer.internal.ui.editors.IReportEditor) { org.eclipse.ui.IEditorPart activeEditor = ((org.eclipse.birt.report.designer.internal.ui.editors.IReportEditor) (part)).getEditorPart(); if (activeEditor instanceof org.eclipse.birt.report.designer.ui.editors.AbstractMultiPageEditor) { epart = ((org.eclipse.birt.report.designer.ui.editors.AbstractMultiPageEditor) (activeEditor)).getActivePageInstance(); } } if (epart instanceof org.eclipse.birt.report.designer.internal.ui.editors.parts.GraphicalEditorWithFlyoutPalette) { org.eclipse.gef.GraphicalViewer viewer = ((org.eclipse.birt.report.designer.internal.ui.editors.parts.GraphicalEditorWithFlyoutPalette) (epart)).getGraphicalViewer(); java.lang.Object cpart = viewer.getEditPartRegistry().get(element); if (cpart instanceof org.eclipse.gef.EditPart) { viewer.flush(); viewer.select(((org.eclipse.gef.EditPart) (cpart))); } if (edit && (cpart instanceof org.eclipse.birt.report.designer.internal.ui.editors.schematic.editparts.LabelEditPart)) { ((org.eclipse.birt.report.designer.internal.ui.editors.schematic.editparts.LabelEditPart) (cpart)).performDirectEdit(); } else if (edit && (cpart instanceof org.eclipse.birt.report.designer.internal.ui.editors.schematic.editparts.ImageEditPart)) { ((org.eclipse.birt.report.designer.internal.ui.editors.schematic.editparts.ImageEditPart) (cpart)).performDirectEdit(); } else { java.util.List list = new java.util.ArrayList(); list.add(element); org.eclipse.birt.report.designer.core.util.mediator.request.ReportRequest r = new org.eclipse.birt.report.designer.core.util.mediator.request.ReportRequest(); r.setType(ReportRequest.CREATE_ELEMENT); r.setSelectionObject(list); org.eclipse.birt.report.designer.core.model.SessionHandleAdapter.getInstance().getMediator().notifyRequest(r); } } } }
public TextAreaLayout(org.eclipse.birt.report.engine.nLayout.area.impl.ContainerArea parent, org.eclipse.birt.report.engine.nLayout.LayoutContext context, org.eclipse.birt.report.engine.content.IContent content) { parentLM = ((org.eclipse.birt.report.engine.nLayout.area.impl.InlineStackingArea) (parent)); org.eclipse.birt.report.engine.content.ITextContent textContent = ((org.eclipse.birt.report.engine.content.ITextContent) (content)); java.lang.String text = textContent.getText(); if (text != null) { if ((text.length()) == 0) textContent.setText(" "); else transform(textContent); } this.textContent = textContent; comp = new org.eclipse.birt.report.engine.nLayout.area.impl.TextCompositor(textContent, context.getFontManager(), context); org.eclipse.birt.report.engine.nLayout.area.impl.ContainerArea ancestor = parentLM; do { if (null == ancestor) { comp.setNewLineStatus(true); return; } if (!(ancestor.isEmpty())) { comp.setNewLineStatus(false); return; } if (ancestor instanceof org.eclipse.birt.report.engine.nLayout.area.impl.LineArea) { comp.setNewLineStatus(ancestor.isEmpty()); return; } ancestor = ancestor.getParent(); } while (true ); }
private boolean test() { if ((!(org.eclipse.osgi.service.environment.Constants.OS_WIN32.equalsIgnoreCase(org.eclipse.core.runtime.Platform.getOS()))) && (!(org.eclipse.osgi.service.environment.Constants.OS_LINUX.equalsIgnoreCase(org.eclipse.core.runtime.Platform.getOS())))) { return false; } if (!(tested)) { tested = true; org.eclipse.swt.widgets.Shell sh = new org.eclipse.swt.widgets.Shell(); try { new org.eclipse.swt.browser.Browser(sh, org.eclipse.swt.SWT.NONE); available = true; } catch (org.eclipse.swt.SWTError se) { if ((se.code) == (org.eclipse.swt.SWT.ERROR_NO_HANDLES)) { available = false; } } catch (java.lang.Exception e) { } if ((sh != null) && (!(sh.isDisposed()))) sh.dispose(); } return available; }
public static java.lang.Object evaluateExpression(org.eclipse.birt.data.engine.api.IBaseExpression dataExpr, org.eclipse.birt.data.engine.odi.IResultIterator odiResult, org.mozilla.javascript.Scriptable scope) throws org.eclipse.birt.core.exception.BirtException { java.lang.Object exprValue = null; if (dataExpr == null) throw new org.eclipse.birt.data.engine.core.DataException(org.eclipse.birt.data.engine.i18n.ResourceConstants.BAD_DATA_EXPRESSION); java.lang.Object handle = dataExpr.getHandle(); if (handle instanceof org.eclipse.birt.data.engine.expression.CompiledExpression) { org.eclipse.birt.data.engine.expression.CompiledExpression expr = ((org.eclipse.birt.data.engine.expression.CompiledExpression) (handle)); java.lang.Object value = org.eclipse.birt.data.engine.expression.ExprEvaluateUtil.evaluateCompiledExpression(expr, odiResult, scope); try { exprValue = org.eclipse.birt.core.data.DataTypeUtil.convert(value, dataExpr.getDataType()); } catch (org.eclipse.birt.core.exception.BirtException e) { throw org.eclipse.birt.data.engine.core.DataException.wrap(e); } } else if (handle instanceof org.eclipse.birt.data.engine.api.querydefn.ConditionalExpression) { org.eclipse.birt.data.engine.api.querydefn.ConditionalExpression ce = ((org.eclipse.birt.data.engine.api.querydefn.ConditionalExpression) (handle)); java.lang.Object resultExpr = org.eclipse.birt.data.engine.expression.ExprEvaluateUtil.evaluateExpression(ce.getExpression(), odiResult, scope); java.lang.Object resultOp1 = ((ce.getOperand1()) != null) ? org.eclipse.birt.data.engine.expression.ExprEvaluateUtil.evaluateExpression(ce.getOperand1(), odiResult, scope) : null; java.lang.Object resultOp2 = ((ce.getOperand2()) != null) ? org.eclipse.birt.data.engine.expression.ExprEvaluateUtil.evaluateExpression(ce.getOperand2(), odiResult, scope) : null; java.lang.String op1Text = ((ce.getOperand1()) != null) ? ce.getOperand1().getText() : null; java.lang.String op2Text = ((ce.getOperand2()) != null) ? ce.getOperand2().getText() : null; exprValue = org.eclipse.birt.data.engine.script.ScriptEvalUtil.evalConditionalExpr(resultExpr, ce.getOperator(), org.eclipse.birt.data.engine.script.ScriptEvalUtil.newExprInfo(op1Text, resultOp1), org.eclipse.birt.data.engine.script.ScriptEvalUtil.newExprInfo(op2Text, resultOp2)); } else { org.eclipse.birt.data.engine.core.DataException e = new org.eclipse.birt.data.engine.core.DataException(org.eclipse.birt.data.engine.i18n.ResourceConstants.INVALID_EXPR_HANDLE); throw e; } if (exprValue instanceof org.eclipse.birt.data.engine.script.DataExceptionMocker) { throw ((org.eclipse.birt.data.engine.script.DataExceptionMocker) (exprValue)).getCause(); } return exprValue; }
private static java.lang.String createURL(java.lang.String servletName, java.lang.String report, java.lang.String format, boolean inDesigner) { java.lang.String encodedReportName = null; try { encodedReportName = java.net.URLEncoder.encode(report, "utf-8"); } catch (java.io.UnsupportedEncodingException e) { } java.lang.String locale = org.eclipse.birt.report.viewer.ViewerPlugin.getDefault().getPluginPreferences().getString(org.eclipse.birt.report.viewer.utilities.WebViewer.USER_LOCALE); java.lang.String svgFlag = org.eclipse.birt.report.viewer.ViewerPlugin.getDefault().getPluginPreferences().getString(org.eclipse.birt.report.viewer.utilities.WebViewer.SVG_FLAG); boolean bSVGFlag = false; java.lang.String maxrows = org.eclipse.birt.report.viewer.ViewerPlugin.getDefault().getPluginPreferences().getString(org.eclipse.birt.report.viewer.utilities.WebViewer.PREVIEW_MAXROW); if (maxrows == null) maxrows = ""; boolean rtl = false; java.lang.String eclipseCommands = java.lang.System.getProperty("eclipse.commands"); if (eclipseCommands != null) { java.lang.String[] options = eclipseCommands.split("-"); java.lang.String regex = "[\\s]*[dD][iI][rR][\\s]*[rR][tT][lL][\\s]*"; java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(regex); for (int i = 0; i < (options.length); i++) { java.lang.String option = options[i]; if (pattern.matcher(option).matches()) { rtl = true; break; } } } if ("true".equalsIgnoreCase(svgFlag)) { bSVGFlag = true; } java.lang.String masterPageContent = org.eclipse.birt.report.viewer.ViewerPlugin.getDefault().getPluginPreferences().getString(org.eclipse.birt.report.viewer.utilities.WebViewer.MASTER_PAGE_CONTENT); boolean bMasterPageContent = true; if ("false".equalsIgnoreCase(masterPageContent)) { bMasterPageContent = false; } return (((((((((((((((((org.eclipse.birt.report.viewer.utilities.WebViewer.getBaseURL()) + servletName) + "?") + "__report=") + encodedReportName) + "&__format=") + format) + "&__svg=") + (java.lang.String.valueOf(bSVGFlag))) + (org.eclipse.birt.report.viewer.utilities.WebViewer.LocaleTable.containsKey(locale) ? "&__locale=" + (org.eclipse.birt.report.viewer.utilities.WebViewer.LocaleTable.get(locale)) : "")) + "&__designer=") + (java.lang.String.valueOf(inDesigner))) + "&__masterpage=") + (java.lang.String.valueOf(bMasterPageContent))) + "&__rtl=") + (java.lang.String.valueOf(rtl))) + "&__maxrows=") + maxrows; }
public boolean isEnabled() { if ((getSelectedElement()) != null) { return getSelectedElement().canEdit(); } return false; }
protected org.eclipse.swt.widgets.Control createDialogArea(org.eclipse.swt.widgets.Composite parent) { org.eclipse.swt.widgets.Composite composite = new org.eclipse.swt.widgets.Composite(parent, org.eclipse.swt.SWT.NONE); { org.eclipse.swt.layout.GridLayout layout = new org.eclipse.swt.layout.GridLayout(); layout.marginHeight = 0; layout.marginWidth = 0; layout.verticalSpacing = 0; layout.horizontalSpacing = 0; composite.setLayout(layout); composite.setLayoutData(new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_BOTH)); composite.setFont(parent.getFont()); } org.eclipse.swt.widgets.Label lblSeparator = new org.eclipse.swt.widgets.Label(composite, ((org.eclipse.swt.SWT.SEPARATOR) | (org.eclipse.swt.SWT.HORIZONTAL))); lblSeparator.setLayoutData(new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_HORIZONTAL)); cmpTaskContainer = new org.eclipse.swt.custom.CTabFolder(composite, ((org.eclipse.swt.SWT.TOP) | (org.eclipse.swt.SWT.FLAT))); { cmpTaskContainer.setLayoutData(new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_BOTH)); cmpTaskContainer.setTabHeight(25); cmpTaskContainer.addSelectionListener(this); } lblSeparator = new org.eclipse.swt.widgets.Label(composite, ((org.eclipse.swt.SWT.SEPARATOR) | (org.eclipse.swt.SWT.HORIZONTAL))); lblSeparator.setLayoutData(new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_HORIZONTAL)); org.eclipse.swt.layout.FormData layoutData = ((org.eclipse.swt.layout.FormData) (getTitleImageLabel().getParent().getLayoutData())); layoutData.width = iWizardWidthMinimum; return composite; }
private static java.lang.String findParameterExp(java.lang.String script, int fromIndex) { int iStart = script.indexOf(((org.eclipse.birt.core.data.ExpressionUtil.PARAMETER_INDICATOR) + '['), fromIndex); if (iStart < fromIndex) { return null; } int iEnd = script.indexOf(']', iStart); if (iEnd < (iStart + (ExpressionUtil.PARAMETER_INDICATOR.length()))) { return null; } return script.substring(iStart, ((iEnd + 1) + (ExpressionUtil.EXPRESSION_VALUE_SUFFIX.length()))); }
public static <T> T convertType(java.lang.Object tempValue, java.lang.Class<T> type) throws org.eclipse.birt.core.exception.BirtException { T value = null; if ((tempValue == null) || (type.isAssignableFrom(tempValue.getClass()))) { value = ((T) (tempValue)); } else if (type == (org.eclipse.birt.report.engine.ir.DimensionType.class)) { } else { value = ((T) (org.eclipse.birt.core.data.DataTypeUtil.convert(tempValue, type))); } return value; }
private void createExpressionButton(final org.eclipse.swt.widgets.Composite parent, final org.eclipse.swt.widgets.Combo combo) { org.eclipse.swt.widgets.Button expressionButton = new org.eclipse.swt.widgets.Button(parent, org.eclipse.swt.SWT.PUSH); if ((expressionProvider) == null) expressionProvider = new org.eclipse.birt.report.designer.ui.dialogs.BindingExpressionProvider(this.bindingHolder); org.eclipse.birt.report.designer.internal.ui.util.UIUtil.setExpressionButtonImage(expressionButton); expressionButton.addSelectionListener(new org.eclipse.swt.events.SelectionAdapter() { public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { org.eclipse.birt.report.designer.ui.dialogs.ExpressionBuilder expression = new org.eclipse.birt.report.designer.ui.dialogs.ExpressionBuilder(combo.getText()); expression.setExpressionProvier(expressionProvider); if ((expression.open()) == (org.eclipse.jface.window.Window.OK)) { if ((expression.getResult()) != null) combo.setText(expression.getResult()); } } }); if (isRef) { expressionButton.setEnabled(false); } }
public void setParent(org.eclipse.birt.report.engine.extension.IReportItemExecutor parent) { if ((executor) != null) { if ((executor.getParent()) == null) { org.eclipse.birt.report.engine.extension.IReportItemExecutor tmpExecutor = parent; if (!((executor) instanceof org.eclipse.birt.report.engine.executor.ReportItemExecutor)) { if (tmpExecutor instanceof org.eclipse.birt.report.engine.executor.ExtendedItemExecutor) { tmpExecutor = ((org.eclipse.birt.report.engine.executor.ExtendedItemExecutor) (tmpExecutor)).executor; } } executor.setParent(tmpExecutor); } } super.setParent(parent); }
protected void addColumBinding(org.eclipse.birt.data.engine.api.IBaseQueryDefinition transfer, org.eclipse.birt.report.model.api.ComputedColumnHandle columnBinding) throws org.eclipse.birt.core.exception.BirtException { java.lang.String name = columnBinding.getName(); java.lang.String expr = columnBinding.getExpression(); java.lang.String type = columnBinding.getDataType(); java.lang.String displayName = columnBinding.getDisplayName(); int dbType = org.eclipse.birt.report.engine.adapter.ModelDteApiAdapter.toDteDataType(type); org.eclipse.birt.data.engine.api.IBaseExpression dbExpr = new org.eclipse.birt.data.engine.api.querydefn.ScriptExpression(expr, dbType); if ((columnBinding.getAggregateOn()) != null) { dbExpr.setGroupName(columnBinding.getAggregateOn()); } org.eclipse.birt.data.engine.api.IBinding binding = new org.eclipse.birt.data.engine.api.querydefn.Binding(name, dbExpr); binding.setDisplayName(displayName); if ((columnBinding.getAggregateOn()) != null) binding.addAggregateOn(columnBinding.getAggregateOn()); if ((columnBinding.getAggregateFunction()) != null) { binding.setAggrFunction(org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.adaptModelAggregationType(columnBinding.getAggregateFunction())); } java.lang.String filter = columnBinding.getFilterExpression(); if (filter != null) { binding.setFilter(new org.eclipse.birt.data.engine.api.querydefn.ScriptExpression(filter)); } java.util.Iterator arguments = columnBinding.argumentsIterator(); if (arguments != null) { while (arguments.hasNext()) { org.eclipse.birt.report.model.api.AggregationArgumentHandle argumentHandle = ((org.eclipse.birt.report.model.api.AggregationArgumentHandle) (arguments.next())); java.lang.String argument = argumentHandle.getValue(); if (argument != null) { binding.addArgument(new org.eclipse.birt.data.engine.api.querydefn.ScriptExpression(argument)); } } } transfer.addBinding(binding); }
protected org.eclipse.birt.report.engine.emitter.excel.Data addDataContent(org.eclipse.birt.report.engine.content.IDataContent data) { float height = getContentHeight(data); org.eclipse.birt.report.engine.emitter.excel.HyperlinkDef url = parseHyperLink(data); org.eclipse.birt.report.engine.emitter.excel.BookmarkDef bookmark = getBookmark(data); org.eclipse.birt.report.engine.emitter.excel.Data excelData = null; java.lang.Object generateBy = data.getGenerateBy(); org.eclipse.birt.report.engine.content.IStyle style = data.getComputedStyle(); org.eclipse.birt.report.engine.css.engine.value.DataFormatValue dataformat = style.getDataFormat(); org.eclipse.birt.report.engine.ir.MapDesign map = null; if (generateBy instanceof org.eclipse.birt.report.engine.ir.DataItemDesign) { org.eclipse.birt.report.engine.ir.DataItemDesign design = ((org.eclipse.birt.report.engine.ir.DataItemDesign) (generateBy)); map = design.getMap(); } if (((map != null) && ((map.getRuleCount()) > 0)) && ((data.getLabelText()) != null)) { excelData = engine.addData(data.getLabelText().trim(), style, url, bookmark, height); } else { java.lang.String locale = null; int type = org.eclipse.birt.report.engine.emitter.excel.ExcelUtil.getType(data.getValue()); if (type == (SheetData.STRING)) { if (dataformat != null) { locale = dataformat.getStringLocale(); } excelData = engine.addData(data.getText(), style, url, bookmark, locale, height); } else if (type == (Data.NUMBER)) { if (dataformat != null) { locale = dataformat.getNumberLocale(); } excelData = engine.addData(data.getValue(), style, url, bookmark, locale, height); } else { if (dataformat != null) { locale = dataformat.getDateTimeLocale(); } excelData = engine.addDateTime(data, style, url, bookmark, locale, height); } } return excelData; }
private org.eclipse.birt.report.engine.emitter.excel.Data createDateData(java.lang.Object txt, org.eclipse.birt.report.engine.emitter.excel.StyleEntry entry, java.lang.String timeFormat) { timeFormat = org.eclipse.birt.report.engine.emitter.excel.ExcelUtil.parse(timeFormat); if (timeFormat.equals("")) { if (txt instanceof java.sql.Date) { timeFormat = "MMMM dd,yyyy"; } else if (txt instanceof java.sql.Time) { timeFormat = "HH:mm:ss AM/PM"; } else { timeFormat = "MMMM dd,yyyy HH:mm:ss AM/PM"; } } entry.setProperty(StyleConstant.DATE_FORMAT_PROP, timeFormat); entry.setProperty(StyleConstant.DATA_TYPE_PROP, Data.DATE); return new org.eclipse.birt.report.engine.emitter.excel.Data(txt, entry, org.eclipse.birt.report.engine.emitter.excel.Data.DATE); }
public void updateOKButtonStatus(boolean isEnabled) { if ((getOkButton()) != null) getOkButton().setEnabled(isEnabled); }
protected org.eclipse.birt.report.engine.script.internal.JSScriptStatus handleJS(org.mozilla.javascript.Scriptable scope, java.lang.String type, java.lang.String name, java.lang.String method, java.lang.String script) { if ((((script == null) || (type == null)) || (name == null)) || (method == null)) return JSScriptStatus.NO_RUN; if (!((org.eclipse.birt.report.engine.script.internal.DtEScriptExecutor.DATA_SET.equals(type)) || (org.eclipse.birt.report.engine.script.internal.DtEScriptExecutor.DATA_SOURCE.equals(type)))) return JSScriptStatus.NO_RUN; java.lang.Object result = null; try { org.eclipse.birt.data.engine.script.JSMethodRunner jsr = getRunner(scope, type, name); result = jsr.runScript(method, script); } catch (java.lang.Exception e) { log.log(java.util.logging.Level.WARNING, e.getMessage(), e); if ((context) != null) context.addException(new org.eclipse.birt.report.engine.api.EngineException(org.eclipse.birt.report.engine.i18n.MessageConstants.SCRIPT_EVALUATION_ERROR, script, e)); } return new org.eclipse.birt.report.engine.script.internal.JSScriptStatus(true, result); }
private org.eclipse.birt.report.engine.api.HTMLRenderContext createHTMLrenderContext(boolean svgFlag, java.lang.String servletPath) { org.eclipse.birt.report.engine.api.HTMLRenderContext renderContext = new org.eclipse.birt.report.engine.api.HTMLRenderContext(); renderContext.setImageDirectory(imageDirectory); renderContext.setBaseImageURL(((contextPath) + (imageBaseUrl))); if (((servletPath != null) && ((servletPath.length()) > 0)) && (!(servletPath.equalsIgnoreCase(IBirtConstants.SERVLET_PATH_PREVIEW)))) { renderContext.setBaseURL(((this.contextPath) + servletPath)); } else { renderContext.setBaseURL(((this.contextPath) + (org.eclipse.birt.report.IBirtConstants.SERVLET_PATH_FRAMESET))); } renderContext.setImageDirectory(imageDirectory); renderContext.setSupportedImageFormats((svgFlag ? "PNG;GIF;JPG;BMP;SVG" : "PNG;GIF;JPG;BMP")); return renderContext; }
protected org.eclipse.birt.report.service.api.IViewerReportDesignHandle getDesignHandle(javax.servlet.http.HttpServletRequest request) { org.eclipse.birt.report.service.api.IViewerReportDesignHandle design = null; org.eclipse.birt.report.engine.api.IReportRunnable reportRunnable = null; boolean isValidDocument = org.eclipse.birt.report.utility.ParameterAccessor.isValidFilePath(this.reportDocumentName); if (isValidDocument) { org.eclipse.birt.report.engine.api.IReportDocument reportDocumentInstance = org.eclipse.birt.report.service.ReportEngineService.getInstance().openReportDocument(this.reportDesignName, this.reportDocumentName, this.getModuleOptions(request)); if (reportDocumentInstance != null) { reportRunnable = reportDocumentInstance.getReportRunnable(); if ((org.eclipse.birt.report.utility.ParameterAccessor.getParameter(request, ParameterAccessor.PARAM_REPORT_DOCUMENT)) != null) this.documentInUrl = true; if ((IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(request.getServletPath())) || (this.documentInUrl)) { this.parameterMap = reportDocumentInstance.getParameterValues(); } if ((!(reportDocumentInstance.isComplete())) && (org.eclipse.birt.report.utility.ParameterAccessor.isReportParameterExist(request, ParameterAccessor.PARAM_REPORT))) this.isDocumentProcessing = true; reportDocumentInstance.close(); } } if (reportRunnable == null) { if ((org.eclipse.birt.report.utility.ParameterAccessor.isReportParameterExist(request, ParameterAccessor.PARAM_REPORT_DOCUMENT)) && (!(org.eclipse.birt.report.utility.ParameterAccessor.isReportParameterExist(request, ParameterAccessor.PARAM_REPORT)))) { if (isValidDocument) this.exception = new org.eclipse.birt.report.exception.ViewerException(org.eclipse.birt.report.resource.ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_FILE_ERROR, new java.lang.String[]{ this.reportDocumentName }); else this.exception = new org.eclipse.birt.report.exception.ViewerException(org.eclipse.birt.report.resource.ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_ACCESS_ERROR, new java.lang.String[]{ this.reportDocumentName }); return design; } if (!(org.eclipse.birt.report.utility.ParameterAccessor.isValidFilePath(this.reportDesignName))) { this.exception = new org.eclipse.birt.report.exception.ViewerException(org.eclipse.birt.report.resource.ResourceConstants.GENERAL_EXCEPTION_REPORT_ACCESS_ERROR, new java.lang.String[]{ this.reportDesignName }); } else { try { java.io.File file = new java.io.File(this.reportDesignName); if (file.exists()) { reportRunnable = org.eclipse.birt.report.service.ReportEngineService.getInstance().openReportDesign(this.reportDesignName, this.getModuleOptions(request)); } else if (!(org.eclipse.birt.report.utility.ParameterAccessor.isWorkingFolderAccessOnly())) { this.reportDesignName = org.eclipse.birt.report.utility.ParameterAccessor.getParameter(request, ParameterAccessor.PARAM_REPORT); java.io.InputStream is = null; java.net.URL url = null; try { java.lang.String reportPath = this.reportDesignName; if (!(reportPath.startsWith("/"))) reportPath = "/" + reportPath; url = request.getSession().getServletContext().getResource(reportPath); if (url != null) is = url.openStream(); if (is != null) reportRunnable = org.eclipse.birt.report.service.ReportEngineService.getInstance().openReportDesign(url.toString(), is, this.getModuleOptions(request)); } catch (java.lang.Exception e) { } } if (reportRunnable == null) { this.exception = new org.eclipse.birt.report.exception.ViewerException(org.eclipse.birt.report.resource.ResourceConstants.GENERAL_EXCEPTION_REPORT_FILE_ERROR, new java.lang.String[]{ this.reportDesignName }); } } catch (org.eclipse.birt.report.engine.api.EngineException e) { this.exception = e; } } } if (reportRunnable != null) { design = new org.eclipse.birt.report.service.BirtViewerReportDesignHandle(org.eclipse.birt.report.service.api.IViewerReportDesignHandle.RPT_RUNNABLE_OBJECT, reportRunnable); } return design; }
@java.lang.Override protected boolean doAction() throws java.lang.Exception { isDone = false; org.eclipse.birt.report.model.api.ReportDesignHandle designHandle = ((org.eclipse.birt.report.model.api.ReportDesignHandle) (org.eclipse.birt.report.designer.core.model.SessionHandleAdapter.getInstance().getReportDesignHandle())); org.eclipse.birt.report.model.api.VariableElementHandle variable = ((org.eclipse.birt.report.model.api.VariableElementHandle) (org.eclipse.birt.report.designer.internal.ui.processor.ElementProcessorFactory.createProcessor(ReportDesignConstants.VARIABLE_ELEMENT).createElement(null))); org.eclipse.birt.report.designer.ui.dialogs.VariableDialog dialog = new org.eclipse.birt.report.designer.ui.dialogs.VariableDialog(org.eclipse.birt.report.designer.nls.Messages.getString("VariablesNodeProvider.NewActionName"), designHandle, variable); if ((dialog.open()) == (org.eclipse.jface.dialogs.Dialog.OK)) designHandle.getPropertyHandle(IReportDesignModel.PAGE_VARIABLES_PROP).add(variable); isDone = true; createElement = variable; return true; }
public void run(org.eclipse.jface.action.IAction action) { org.eclipse.core.resources.IFile file = getSelectedFile(); if (file != null) { java.lang.String url = file.getLocation().toOSString(); try { org.eclipse.birt.report.model.api.ModuleHandle handle = org.eclipse.birt.report.designer.core.model.SessionHandleAdapter.getInstance().getSessionHandle().openDesign(url); if (!(handle instanceof org.eclipse.birt.report.model.api.ReportDesignHandle)) { action.setEnabled(false); return; } org.eclipse.jface.wizard.WizardDialog dialog = new org.eclipse.jface.wizard.WizardDialog(org.eclipse.birt.report.designer.internal.ui.util.UIUtil.getDefaultShell(), new org.eclipse.birt.report.designer.internal.ui.wizards.PublishTemplateWizard(((org.eclipse.birt.report.model.api.ReportDesignHandle) (handle)))); dialog.setPageSize(500, 250); dialog.open(); handle.close(); } catch (java.lang.Exception e) { org.eclipse.birt.report.designer.internal.ui.util.ExceptionHandler.handle(e); return; } } else { action.setEnabled(false); } }
public void close() { if ((statementMap.size()) > 0) { java.util.Iterator keySet = statementMap.keySet().iterator(); while (keySet.hasNext()) { org.eclipse.birt.data.engine.odaconsumer.PreparedStatement stmt = ((org.eclipse.birt.data.engine.odaconsumer.PreparedStatement) (keySet.next())); try { stmt.close(); } catch (java.lang.Exception e) { org.eclipse.birt.data.engine.executor.DataSource.logger.logp(java.util.logging.Level.FINE, org.eclipse.birt.data.engine.executor.DataSource.className, "close", "Exception at PreparedStatement.close()", e); } } statementMap.clear(); } java.util.Set<org.eclipse.birt.data.engine.executor.DataSource.CacheConnection> it = this.getOdaConnections(false); if ((it.size()) > 1) { org.eclipse.birt.data.engine.executor.DataSource.CacheConnection conn = it.iterator().next(); conn.currentStatements = 0; it.remove(conn); for (org.eclipse.birt.data.engine.executor.DataSource.CacheConnection connections : it) { try { connections.odaConn.close(); } catch (java.lang.Exception e) { org.eclipse.birt.data.engine.executor.DataSource.logger.logp(java.util.logging.Level.FINE, org.eclipse.birt.data.engine.executor.DataSource.className, "close", "Exception at Connection.close()", e); } } it.clear(); it.add(conn); } }
private void generateImageBytes(java.lang.String imageURI) throws java.io.IOException { exportImageHeader(imageURI); org.apache.commons.codec.binary.Base64 base = new org.apache.commons.codec.binary.Base64(); java.net.URL imageURL = null; if ((reportDesign) != null) { imageURL = reportDesign.findResource(imageURI, IResourceLocator.IMAGE); } if (imageURL == null) { return; } if (imageURL.toString().toLowerCase().endsWith(".svg")) { org.apache.batik.transcoder.image.JPEGTranscoder transcoder = new org.apache.batik.transcoder.image.JPEGTranscoder(); transcoder.addTranscodingHint(JPEGTranscoder.KEY_QUALITY, new java.lang.Float(0.8)); org.apache.batik.transcoder.TranscoderInput input = new org.apache.batik.transcoder.TranscoderInput(imageURL.toString()); java.io.ByteArrayOutputStream ostream = new java.io.ByteArrayOutputStream(); org.apache.batik.transcoder.TranscoderOutput output = new org.apache.batik.transcoder.TranscoderOutput(ostream); try { transcoder.transcode(input, output); } catch (org.apache.batik.transcoder.TranscoderException e) { } ostream.flush(); pptOutput.write(base.encode(ostream.toByteArray())); } else { java.io.FileInputStream file = null; try { file = new java.io.FileInputStream(imageURI); } catch (java.io.FileNotFoundException e) { throw e; } byte[] data = null; if (file != null) { try { data = new byte[file.available()]; file.read(data); } catch (java.io.IOException e1) { throw e1; } } pptOutput.write(base.encode(data)); } }
public void run() { if (!(getSourceEditPart().isActive())) { return; } org.eclipse.gef.EditPartViewer viewer = getSourceEditPart().getViewer(); org.eclipse.gef.EditPart parent = getSourceEditPart().getParent(); if (((((activeHelper) == (this)) && (getSourceEditPart().isActive())) && ((viewer.getControl()) != null)) && (!(viewer.getControl().isDisposed()))) { if ((viewer.getSelectedEditParts().size()) == 1) { if ((parent.getAdapter(org.eclipse.birt.report.designer.internal.ui.editors.schematic.editparts.IDelaySelectionDragTracker.class)) != null) { proxy = ((org.eclipse.birt.report.designer.internal.ui.editors.schematic.editparts.IDelaySelectionDragTracker) (parent.getAdapter(org.eclipse.birt.report.designer.internal.ui.editors.schematic.editparts.IDelaySelectionDragTracker.class))); if (viewer instanceof org.eclipse.birt.report.designer.internal.ui.editors.parts.DeferredGraphicalViewer) ((org.eclipse.birt.report.designer.internal.ui.editors.parts.DeferredGraphicalViewer) (viewer)).setSelection(new org.eclipse.jface.viewers.StructuredSelection(proxy.getSourceEditPart()), true); if ((getSourceEditPart()) != (getEditPartUnderMouse())) { org.eclipse.draw2d.IFigure figure = ((org.eclipse.gef.GraphicalEditPart) (getSourceEditPart())).getFigure(); org.eclipse.draw2d.geometry.Rectangle center = figure.getBounds().getCopy(); figure.translateToAbsolute(center); proxy.setStartLocation(center.getCenter()); } else { proxy.setStartLocation(getStartLocation()); } proxy.setState(org.eclipse.birt.report.designer.internal.ui.editors.schematic.tools.STATE_DRAG_IN_PROGRESS); } setFlag(org.eclipse.birt.report.designer.internal.ui.editors.schematic.tools.ReportElementDragTracker.FLAG_DELAY_SELECTION, true); } else { setFlag(org.eclipse.birt.report.designer.internal.ui.editors.schematic.tools.ReportElementDragTracker.FLAG_DELAY_SELECTION, false); } } else { setFlag(org.eclipse.birt.report.designer.internal.ui.editors.schematic.tools.ReportElementDragTracker.FLAG_DELAY_SELECTION, false); } activeHelper = null; }
private void placeComponents() { org.eclipse.swt.layout.GridLayout layout = new org.eclipse.swt.layout.GridLayout(2, false); layout.horizontalSpacing = 0; layout.verticalSpacing = 0; layout.marginWidth = 0; layout.marginHeight = 0; setLayout(layout); cnvMarker = new org.eclipse.swt.widgets.Canvas(this, org.eclipse.swt.SWT.NONE); { org.eclipse.swt.layout.GridData gd = new org.eclipse.swt.layout.GridData(); gd.heightHint = org.eclipse.birt.chart.ui.swt.composites.MarkerEditorComposite.MARKER_BLOCK_HEIGHT; gd.widthHint = org.eclipse.birt.chart.ui.swt.composites.MarkerEditorComposite.MARKER_BLOCK_WIDTH; gd.verticalAlignment = org.eclipse.swt.SWT.CENTER; gd.grabExcessVerticalSpace = true; cnvMarker.setLayoutData(gd); cnvMarker.addMouseListener(this); cnvMarker.setToolTipText(getMarker().getType().getName()); org.eclipse.swt.widgets.Listener listener = new org.eclipse.swt.widgets.Listener() { public void handleEvent(org.eclipse.swt.widgets.Event event) { canvasEvent(event); } }; int[] textEvents = new int[]{ org.eclipse.swt.SWT.KeyDown, org.eclipse.swt.SWT.KeyUp, org.eclipse.swt.SWT.Traverse, org.eclipse.swt.SWT.FocusIn, org.eclipse.swt.SWT.FocusOut, org.eclipse.swt.SWT.Paint }; for (int i = 0; i < (textEvents.length); i++) { cnvMarker.addListener(textEvents[i], listener); } } btnDropDown = new org.eclipse.swt.widgets.Button(this, ((org.eclipse.swt.SWT.ARROW) | (org.eclipse.swt.SWT.DOWN))); { org.eclipse.swt.layout.GridData gd = new org.eclipse.swt.layout.GridData(); gd.heightHint = 20; gd.widthHint = 16; btnDropDown.setLayoutData(gd); btnDropDown.addMouseListener(this); } try { idrSWT = org.eclipse.birt.chart.api.ChartEngine.instance().getRenderer("dv.SWT"); } catch (org.eclipse.birt.chart.exception.ChartException pex) { org.eclipse.birt.core.ui.frameworks.taskwizard.WizardBase.displayException(pex); } addDisposeListener(new org.eclipse.swt.events.DisposeListener() { public void widgetDisposed(org.eclipse.swt.events.DisposeEvent e) { if ((idrSWT) != null) { idrSWT.dispose(); idrSWT = null; } } }); }
private void localizeSelfStyleProperties(org.eclipse.birt.report.model.core.StyledElement target, org.eclipse.birt.report.model.core.StyledElement source, java.util.Set<java.lang.String> notEmptyProperties) { org.eclipse.birt.report.model.core.StyledElement tmpElement = source; while (tmpElement != null) { org.eclipse.birt.report.model.core.Module root = tmpElement.getRoot(); localizePrivateStyleProperties(target, tmpElement, root, notEmptyProperties); org.eclipse.birt.report.model.elements.Style style = ((org.eclipse.birt.report.model.elements.Style) (tmpElement.getStyle(sourceDesign))); if (style != null) { org.eclipse.birt.report.model.core.Module styleRoot = style.getRoot(); if (styleRoot != (sourceDesign)) { localizePrivateStyleProperties(target, style, styleRoot, notEmptyProperties); } else { target.setStyleName(tmpElement.getStyleName()); } } if (tmpElement.isVirtualElement()) tmpElement = ((org.eclipse.birt.report.model.core.StyledElement) (tmpElement.getVirtualParent())); else tmpElement = ((org.eclipse.birt.report.model.core.StyledElement) (tmpElement.getExtendsElement())); } }
public BirtCubeView(org.eclipse.birt.data.engine.olap.impl.query.CubeQueryExecutor queryExecutor, java.util.Map appContext) throws org.eclipse.birt.data.engine.core.DataException { this.executor = queryExecutor; pageEdgeView = createBirtEdgeView(this.getCubeQueryDefinition().getEdge(ICubeQueryDefinition.PAGE_EDGE), ICubeQueryDefinition.PAGE_EDGE); columnEdgeView = createBirtEdgeView(this.getCubeQueryDefinition().getEdge(ICubeQueryDefinition.COLUMN_EDGE), ICubeQueryDefinition.COLUMN_EDGE); rowEdgeView = createBirtEdgeView(this.getCubeQueryDefinition().getEdge(ICubeQueryDefinition.ROW_EDGE), ICubeQueryDefinition.ROW_EDGE); this.executor = queryExecutor; this.appContext = appContext; measureMapping = new java.util.HashMap(); org.eclipse.birt.data.engine.olap.query.view.CalculatedMember[] members = org.eclipse.birt.data.engine.olap.query.view.CubeQueryDefinitionUtil.getCalculatedMembers(this.getCubeQueryDefinition(), queryExecutor.getSession().getSharedScope(), measureMapping); manager = new org.eclipse.birt.data.engine.olap.query.view.MeasureNameManager(members); int startRsId = 0; if ((members.length) > 0) { startRsId = (members[((members.length) - 1)].getRsID()) + 1; } prepareCubeOperations(startRsId); }
protected void init() throws org.eclipse.birt.core.exception.BirtException { if (org.eclipse.birt.report.engine.layout.pdf.util.PropertyUtil.isInlineElement(image)) { root = new org.eclipse.birt.report.engine.nLayout.area.impl.ImageInlineContainer(parent, context, image); } else { root = new org.eclipse.birt.report.engine.nLayout.area.impl.ImageBlockContainer(parent, context, image); } root.initialize(); root.setAllocatedWidth(parent.getMaxAvaWidth()); root.setMaxAvaWidth(root.getContentWidth()); org.eclipse.birt.report.engine.content.Dimension contentDimension = getSpecifiedDimension(image, root.getContentWidth(), true); org.eclipse.birt.report.engine.nLayout.area.impl.ImageArea imageArea = createImageArea(image); int maxHeight = root.getMaxAvaHeight(); int maxWidth = root.getMaxAvaWidth(); int cHeight = contentDimension.getHeight(); int cWidth = contentDimension.getWidth(); int actualHeight = cHeight; int actualWidth = cWidth; if ((cHeight > maxHeight) || (cWidth > maxWidth)) { if (fitToContainer) { float rh = ((float) (maxHeight)) / cHeight; float rw = ((float) (maxWidth)) / cWidth; if (rh > rw) { actualHeight = ((int) ((((float) (cHeight)) * maxWidth) / cWidth)); actualWidth = maxWidth; } else { actualHeight = maxHeight; actualWidth = ((int) ((((float) (cWidth)) * maxHeight) / cHeight)); } imageArea.setWidth(actualWidth); imageArea.setHeight(actualHeight); root.setContentWidth(imageArea.getWidth()); root.setContentHeight(imageArea.getHeight()); } else { imageArea.setWidth(actualWidth); imageArea.setHeight(actualHeight); root.setNeedClip(true); root.setAllocatedHeight(java.lang.Math.min(maxHeight, cHeight)); root.setAllocatedWidth(java.lang.Math.min(maxWidth, cWidth)); } } else { imageArea.setWidth(actualWidth); imageArea.setHeight(actualHeight); root.setContentWidth(imageArea.getWidth()); root.setContentHeight(imageArea.getHeight()); } root.addChild(imageArea); imageArea.setPosition(root.getContentX(), root.getContentY()); processChartLegend(image, imageArea); root.finished = false; }
private void handleNext() { int freeSpace = this.getFreeSpace(); if ((isNew) || ((currentPos) == (chunk.getText().length()))) { if (cg.hasMore()) { chunk = cg.getNext(); if ((chunk) == (org.eclipse.birt.report.engine.layout.pdf.text.Chunk.HARD_LINE_BREAK)) { currentPos = chunk.getText().length(); this.newLine(); vestigeIndex = -1; return; } currentPos = 0; this.wr = new org.eclipse.birt.report.engine.layout.pdf.hyphen.DefaultWordRecognizer(chunk.getText()); } else { return; } } if (isNew) { isNew = false; if (isInline) { org.eclipse.birt.report.engine.layout.area.impl.AbstractArea con = ((org.eclipse.birt.report.engine.layout.area.impl.AbstractArea) (createInlineContainer(content, true, false))); con.setWidth(((leftBorder) + (leftPadding))); con.setHeight(((((((int) ((chunk.getFontInfo().getWordHeight()) * (org.eclipse.birt.report.engine.layout.PDFConstants.LAYOUT_TO_PDF_RATIO))) + (topBorder)) + (topPadding)) + (bottomBorder)) + (bottomPadding))); this.addSpaceHolder(con); leftSpaceHolder = ((leftMargin) + (leftBorder)) + (leftPadding); freeSpace -= leftSpaceHolder; } } java.lang.String str = null; org.eclipse.birt.report.engine.layout.pdf.hyphen.Word currentWord = null; if ((-1) == (vestigeIndex)) { currentWord = wr.getNextWord(); if (null == currentWord) { org.eclipse.birt.report.engine.content.Dimension d = new org.eclipse.birt.report.engine.content.Dimension(0, ((int) ((chunk.getFontInfo().getWordHeight()) * (org.eclipse.birt.report.engine.layout.PDFConstants.LAYOUT_TO_PDF_RATIO)))); org.eclipse.birt.report.engine.layout.area.IArea builtArea = buildArea("", content, chunk.getFontInfo(), d); this.addTextLine(builtArea); return; } str = currentWord.getValue(); areaStartPos = (chunk.getOffset()) + (currentWord.getStart()); } else { str = chunk.getText().substring(vestigeIndex, ((vestigeIndex) + (vestigeLength))); areaStartPos = (chunk.getOffset()) + (vestigeIndex); } int prevAreaWidth = 0; int areaWidth = (((int) ((chunk.getFontInfo().getWordWidth(chunk.getText().substring(currentPos, ((currentPos) + (str.length()))))) * (org.eclipse.birt.report.engine.layout.PDFConstants.LAYOUT_TO_PDF_RATIO))) + ((letterSpacing) * (str.length()))) + (wordSpacing); if (isInline) { if (isAtLast((((chunk.getOffset()) + (currentPos)) + (str.length())))) { rightSpaceHolder = ((rightMargin) + (rightBorder)) + (rightPadding); freeSpace -= rightSpaceHolder; } } while (freeSpace >= areaWidth) { currentPos += str.length(); currentWord = wr.getNextWord(); if (null == currentWord) { str = null; break; } str = currentWord.getValue(); prevAreaWidth = areaWidth; areaWidth += (((int) ((chunk.getFontInfo().getWordWidth(chunk.getText().substring(currentPos, ((currentPos) + (str.length()))))) * (org.eclipse.birt.report.engine.layout.PDFConstants.LAYOUT_TO_PDF_RATIO))) + ((letterSpacing) * (str.length()))) + (wordSpacing); if (isAtLast((((chunk.getOffset()) + (currentPos)) + (str.length())))) { rightSpaceHolder = ((rightMargin) + (rightBorder)) + (rightPadding); freeSpace -= rightSpaceHolder; } } int length = chunk.getText().length(); if ((currentPos) == length) { org.eclipse.birt.report.engine.content.Dimension d = new org.eclipse.birt.report.engine.content.Dimension(areaWidth, ((int) ((chunk.getFontInfo().getWordHeight()) * (org.eclipse.birt.report.engine.layout.PDFConstants.LAYOUT_TO_PDF_RATIO)))); java.lang.String originalText = chunk.getText().substring(((areaStartPos) - (chunk.getOffset())), chunk.getText().length()); org.eclipse.birt.report.engine.layout.area.IArea builtArea = buildArea(getReverseText(originalText), content, chunk.getFontInfo(), d); this.addTextLine(builtArea); vestigeIndex = -1; vestigeLength = 0; return; } if ((maxLineSpace) < ((((chunk.getFontInfo().getWordWidth(str)) * (org.eclipse.birt.report.engine.layout.PDFConstants.LAYOUT_TO_PDF_RATIO)) + ((letterSpacing) * (str.length()))) + (wordSpacing))) { if (0 == (str.length())) { vestigeIndex = -1; vestigeLength = 0; return; } org.eclipse.birt.report.engine.layout.pdf.hyphen.IHyphenationManager hm = new org.eclipse.birt.report.engine.layout.pdf.hyphen.DefaultHyphenationManager(); org.eclipse.birt.report.engine.layout.pdf.hyphen.Hyphenation hyph = hm.getHyphenation(str); int endHyphenIndex = hyphen(0, (freeSpace - prevAreaWidth), hyph, chunk.getFontInfo()); if (endHyphenIndex == 0) { if (nothingSplitted) { str = hyph.getHyphenText(0, (endHyphenIndex + 1)); addByForce = true; nothingSplitted = false; } else { nothingSplitted = true; vestigeIndex = currentPos; vestigeLength = (null == currentWord) ? vestigeLength : currentWord.getLength(); return; } } else { str = hyph.getHyphenText(0, endHyphenIndex); } currentPos += str.length(); vestigeIndex = currentPos; vestigeLength = (null == currentWord) ? (vestigeLength) - (str.length()) : (currentWord.getLength()) - (str.length()); org.eclipse.birt.report.engine.content.Dimension d = null; if (addByForce) { d = new org.eclipse.birt.report.engine.content.Dimension(freeSpace, ((int) ((chunk.getFontInfo().getWordHeight()) * (org.eclipse.birt.report.engine.layout.PDFConstants.LAYOUT_TO_PDF_RATIO)))); addByForce = false; } else { d = new org.eclipse.birt.report.engine.content.Dimension(((prevAreaWidth + ((int) ((chunk.getFontInfo().getWordWidth(str)) * (org.eclipse.birt.report.engine.layout.PDFConstants.LAYOUT_TO_PDF_RATIO)))) + ((letterSpacing) * (str.length()))), ((int) ((chunk.getFontInfo().getWordHeight()) * (org.eclipse.birt.report.engine.layout.PDFConstants.LAYOUT_TO_PDF_RATIO)))); } java.lang.String originalText = chunk.getText().substring(((areaStartPos) - (chunk.getOffset())), vestigeIndex); org.eclipse.birt.report.engine.layout.area.IArea builtArea = buildArea(getReverseText(originalText), content, chunk.getFontInfo(), d); this.addTextLine(builtArea); this.newLine(); return; } else { org.eclipse.birt.report.engine.content.Dimension d = new org.eclipse.birt.report.engine.content.Dimension(prevAreaWidth, ((int) ((chunk.getFontInfo().getWordHeight()) * (org.eclipse.birt.report.engine.layout.PDFConstants.LAYOUT_TO_PDF_RATIO)))); java.lang.String originalText = chunk.getText().substring(((areaStartPos) - (chunk.getOffset())), currentPos); org.eclipse.birt.report.engine.layout.area.IArea builtArea = buildArea(getReverseText(originalText), content, chunk.getFontInfo(), d); this.addTextLine(builtArea); this.newLine(); vestigeIndex = (null == currentWord) ? -1 : currentWord.getStart(); vestigeLength = (null == currentWord) ? 0 : currentWord.getLength(); return; } }
public void buildTextStyle(org.eclipse.birt.report.engine.content.ITextContent text, java.lang.StringBuffer styleBuffer, int display, java.lang.String url) { org.eclipse.birt.report.engine.content.IStyle style = text.getStyle(); handleShrink(display, style, text.getHeight(), text.getWidth(), styleBuffer); buildStyle(text, styleBuffer); java.lang.String value = style.getDisplay(); if (null == value) { styleBuffer.append(" display: block;"); } }
public boolean canProcessWithWarning() { if (!(isAggregate())) { return true; } try { java.lang.String type = getDataTypeDisplayName(org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.adapterToModelDataType(org.eclipse.birt.report.designer.data.ui.util.DataUtil.getAggregationManager().getAggregation(getFunctionByDisplayName(cmbFunction.getText()).getName()).getDataType())); if (((type != null) && (!(type.equals("")))) && (!(type.equals(cmbType.getText())))) { if (!(canProcessFunctionTypeError(cmbFunction.getText(), cmbType.getText(), type))) { return false; } } org.eclipse.birt.data.engine.api.aggregation.IAggrFunction function = getFunctionByDisplayName(cmbFunction.getText()); if (function != null) { org.eclipse.birt.report.model.api.DataSetHandle dataSetHandle = org.eclipse.birt.report.designer.util.DEUtil.getFirstDataSet(this.bindingHolder); java.util.List<org.eclipse.birt.report.model.api.elements.structures.ResultSetColumn> columnList = null; if (dataSetHandle != null) { org.eclipse.birt.report.model.api.CachedMetaDataHandle meta = dataSetHandle.getCachedMetaDataHandle(); if (meta == null) { org.eclipse.birt.report.designer.data.ui.dataset.DataSetUIUtil.updateColumnCache(dataSetHandle); meta = dataSetHandle.getCachedMetaDataHandle(); } columnList = meta.getResultSet().getListValue(); } java.util.List<org.eclipse.birt.report.model.api.ComputedColumnHandle> bindingList = org.eclipse.birt.report.designer.util.DEUtil.getAllColumnBindingList(this.bindingHolder, true); loop : for (org.eclipse.birt.data.engine.api.aggregation.IParameterDefn param : function.getParameterDefn()) { if (param.isDataField()) { java.lang.String expression = getControlValue(paramsMap.get(param.getName())); if (expression != null) { if (bindingList != null) { java.lang.String bindingName = org.eclipse.birt.core.data.ExpressionUtil.getColumnBindingName(expression); if (bindingName != null) for (org.eclipse.birt.report.model.api.ComputedColumnHandle bindingHandle : bindingList) { if (bindingHandle.getName().equals(bindingName)) { if (!(param.supportDataType(org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.adaptModelDataType(bindingHandle.getDataType())))) { if (!(canProcessParamTypeError(expression, param.getDisplayName()))) { return false; } continue loop; } } } } if (columnList != null) { java.lang.String columnName = org.eclipse.birt.core.data.ExpressionUtil.getColumnName(expression); if (columnName != null) for (org.eclipse.birt.report.model.api.elements.structures.ResultSetColumn column : columnList) { if (column.getColumnName().equals(columnName)) { if (!(param.supportDataType(org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.adaptModelDataType(column.getDataType())))) { if (!(canProcessParamTypeError(expression, param.getDisplayName()))) { return false; } continue loop; } } } } } } } } } catch (org.eclipse.birt.core.exception.BirtException e) { } return true; }
private org.eclipse.birt.chart.model.component.Series findCategorySeries(org.eclipse.birt.chart.model.component.Series seDT) { final org.eclipse.birt.chart.model.Chart cmDT = _iun.getDesignTimeModel(); if (cmDT instanceof org.eclipse.birt.chart.model.ChartWithAxes) { return ((org.eclipse.birt.chart.model.component.Series) (((org.eclipse.birt.chart.model.data.SeriesDefinition) (((org.eclipse.birt.chart.model.ChartWithAxes) (cmDT)).getBaseAxes()[0].getSeriesDefinitions().get(0))).getRunTimeSeries().get(0))); } else { return ((org.eclipse.birt.chart.model.component.Series) (((org.eclipse.birt.chart.model.data.SeriesDefinition) (((org.eclipse.birt.chart.model.ChartWithoutAxes) (cmDT)).getSeriesDefinitions().get(0))).getRunTimeSeries().get(0))); } }
private org.eclipse.birt.report.engine.api.PDFRenderOption createPDFRenderOption(java.lang.String servletPath, javax.servlet.http.HttpServletRequest request, int pageOverflow, boolean isDesigner) { java.lang.String baseURL = null; if (!isDesigner) baseURL = org.eclipse.birt.report.utility.ParameterAccessor.getBaseURL(); if (baseURL == null) { if (org.eclipse.birt.report.utility.ParameterAccessor.isOpenAsAttachment(request)) { baseURL = ((((request.getScheme()) + "://") + (request.getServerName())) + ":") + (request.getServerPort()); } else { baseURL = ""; } } baseURL += request.getContextPath(); org.eclipse.birt.report.engine.api.PDFRenderOption renderOption = new org.eclipse.birt.report.engine.api.PDFRenderOption(); if ((servletPath != null) && ((servletPath.length()) > 0)) { renderOption.setBaseURL((baseURL + servletPath)); } else { renderOption.setBaseURL((baseURL + (org.eclipse.birt.report.IBirtConstants.SERVLET_PATH_RUN))); } renderOption.setSupportedImageFormats("PNG;GIF;JPG;BMP"); switch (pageOverflow) { case org.eclipse.birt.report.IBirtConstants.PAGE_OVERFLOW_AUTO : renderOption.setOption(PDFRenderOption.PAGE_OVERFLOW, new java.lang.Integer(org.eclipse.birt.report.engine.api.PDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES)); break; case org.eclipse.birt.report.IBirtConstants.PAGE_OVERFLOW_ACTUAL : renderOption.setOption(PDFRenderOption.PAGE_OVERFLOW, new java.lang.Integer(org.eclipse.birt.report.engine.api.PDFRenderOption.ENLARGE_PAGE_SIZE)); break; case org.eclipse.birt.report.IBirtConstants.PAGE_OVERFLOW_FITTOPAGE : renderOption.setOption(PDFRenderOption.FIT_TO_PAGE, java.lang.Boolean.TRUE); break; default : renderOption.setOption(PDFRenderOption.PAGE_OVERFLOW, new java.lang.Integer(org.eclipse.birt.report.engine.api.PDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES)); } renderOption.setOption(PDFRenderOption.PAGEBREAK_PAGINATION_ONLY, java.lang.Boolean.TRUE); return renderOption; }
protected org.eclipse.birt.report.engine.layout.pdf.font.FontMappingManager createFontMappingManager(java.lang.String format, java.util.Locale locale) { java.lang.String[] configNames = new java.lang.String[19]; int count = 0; java.lang.String osgiName = getOSGIOSName(); java.lang.String osName = getOSName(); java.lang.String language = locale.getLanguage(); java.lang.String country = locale.getCountry(); java.lang.String variant = locale.getVariant(); java.lang.StringBuffer sb = new java.lang.StringBuffer(); configNames[(count++)] = sb.append(org.eclipse.birt.report.engine.layout.pdf.font.FontMappingManagerFactory.CONFIG_NAME).toString(); if (osgiName != null) { configNames[(count++)] = sb.append('_').append(osgiName).toString(); configNames[(count++)] = sb.append('_').append(language).toString(); configNames[(count++)] = sb.append('_').append(country).toString(); configNames[(count++)] = sb.append('_').append(variant).toString(); } if ((osName != null) && (!(osName.equals(osgiName)))) { sb.setLength(0); sb.append(org.eclipse.birt.report.engine.layout.pdf.font.FontMappingManagerFactory.CONFIG_NAME); configNames[(count++)] = sb.append('_').append(osName).toString(); configNames[(count++)] = sb.append('_').append(language).toString(); configNames[(count++)] = sb.append('_').append(country).toString(); configNames[(count++)] = sb.append('_').append(variant).toString(); } sb.setLength(0); configNames[(count++)] = sb.append(org.eclipse.birt.report.engine.layout.pdf.font.FontMappingManagerFactory.CONFIG_NAME).append('_').append(format).toString(); if (osgiName != null) { configNames[(count++)] = sb.append('_').append(osgiName).toString(); configNames[(count++)] = sb.append('_').append(language).toString(); configNames[(count++)] = sb.append('_').append(country).toString(); configNames[(count++)] = sb.append('_').append(variant).toString(); } if ((osName != null) && (!(osName.equals(osgiName)))) { sb.setLength(0); sb.append(org.eclipse.birt.report.engine.layout.pdf.font.FontMappingManagerFactory.CONFIG_NAME).append('_').append(format); configNames[(count++)] = sb.append('_').append(osName).toString(); configNames[(count++)] = sb.append('_').append(language).toString(); configNames[(count++)] = sb.append('_').append(country).toString(); configNames[(count++)] = sb.append('_').append(variant).toString(); } org.eclipse.birt.report.engine.layout.pdf.font.FontMappingManager manager = null; for (int i = 0; i < count; i++) { org.eclipse.birt.report.engine.layout.pdf.font.FontMappingConfig config = loadFontMappingConfig(configNames[i]); if (config != null) { manager = createFontMappingManager(manager, config, locale); } } return manager; }
private void addEventHandling(org.w3c.dom.Element elm, org.eclipse.birt.chart.event.StructureSource src, org.eclipse.birt.chart.model.data.Trigger[] triggers) { if (elm != null) { boolean redirect = false; for (int x = 0; x < (triggers.length); x++) { org.eclipse.birt.chart.model.data.Trigger tg = triggers[x]; if ((tg.getAction().getType().getValue()) == (org.eclipse.birt.chart.model.attribute.ActionType.URL_REDIRECT)) { redirect = true; break; } } if (redirect) { org.w3c.dom.Element aLink = svg_g2d.createElement("a"); org.w3c.dom.Element group = svg_g2d.createElement("g"); group.appendChild(elm); aLink.setAttribute("xlink:href", ""); aLink.appendChild(group); elm = group; hotspotLayer.appendChild(aLink); } else hotspotLayer.appendChild(elm); for (int x = 0; x < (triggers.length); x++) { org.eclipse.birt.chart.model.data.Trigger tg = triggers[x]; java.lang.String scriptEvent = getJsScriptEvent(tg.getCondition().getValue()); if (scriptEvent != null) { switch (tg.getAction().getType().getValue()) { case org.eclipse.birt.chart.model.attribute.ActionType.SHOW_TOOLTIP : java.lang.String tooltipText = ((org.eclipse.birt.chart.model.attribute.TooltipValue) (tg.getAction().getValue())).getText(); if ((tooltipText != null) && ((tooltipText.trim().length()) > 0)) { org.w3c.dom.Element title = svg_g2d.dom.createElement("title"); title.appendChild(svg_g2d.dom.createTextNode(tooltipText)); elm.appendChild(title); if (scriptEvent.equals("onmouseover")) { elm.setAttribute("onmouseout", "TM.remove()"); elm.setAttribute("onmousemove", "TM.show(evt)"); } else elm.setAttribute(scriptEvent, "TM.toggleToolTip(evt)"); } break; case org.eclipse.birt.chart.model.attribute.ActionType.URL_REDIRECT : org.eclipse.birt.chart.model.attribute.URLValue urlValue = ((org.eclipse.birt.chart.model.attribute.URLValue) (tg.getAction().getValue())); if (urlValue.getBaseUrl().startsWith("#")) { elm.setAttribute(scriptEvent, (("top.document.location.hash='" + (urlValue.getBaseUrl())) + "';")); elm.setAttribute("style", "cursor:pointer"); } else { java.lang.String target = urlValue.getTarget(); if (target == null) target = "null"; elm.setAttribute(scriptEvent, (((("redirect('" + target) + "','") + (urlValue.getBaseUrl())) + "')")); } break; case org.eclipse.birt.chart.model.attribute.ActionType.TOGGLE_VISIBILITY : case org.eclipse.birt.chart.model.attribute.ActionType.TOGGLE_DATA_POINT_VISIBILITY : case org.eclipse.birt.chart.model.attribute.ActionType.HIGHLIGHT : addJSCodeOnElement(src, tg, elm, scriptEvent, tg.getAction().getType().getValue()); break; case org.eclipse.birt.chart.model.attribute.ActionType.INVOKE_SCRIPT : if (tg.getCondition().equals(TriggerCondition.ACCESSIBILITY_LITERAL)) { org.eclipse.birt.chart.model.attribute.AccessibilityValue accessValue = ((org.eclipse.birt.chart.model.attribute.AccessibilityValue) (tg.getAction().getValue())); if ((accessValue.getText()) != null) { org.w3c.dom.Element title = svg_g2d.createElement("title"); title.appendChild(svg_g2d.dom.createTextNode(accessValue.getText())); elm.appendChild(title); } if ((accessValue.getAccessibility()) != null) { org.w3c.dom.Element description = svg_g2d.createElement("desc"); description.appendChild(svg_g2d.dom.createTextNode(accessValue.getAccessibility())); elm.appendChild(description); } } else { java.lang.String script = ((org.eclipse.birt.chart.model.attribute.ScriptValue) (tg.getAction().getValue())).getScript(); java.lang.String callbackFunction = ((("callback" + (java.lang.Math.abs(script.hashCode()))) + "(evt,") + (src.getSource().hashCode())) + ");"; elm.setAttribute(scriptEvent, callbackFunction); setCursor(elm); if (!(scripts.contains(script))) { svg_g2d.addScript(((((("function callback" + (java.lang.Math.abs(script.hashCode()))) + "(evt,source)") + "{") + script) + "}")); scripts.add(script); } } break; } } } } }
public PDFLayoutEmitter(org.eclipse.birt.report.engine.emitter.IContentEmitter emitter, org.eclipse.birt.report.engine.api.IRenderOption renderOptions, java.util.Locale locale, long totalPage) { this.emitter = emitter; context = new org.eclipse.birt.report.engine.layout.pdf.emitter.LayoutEngineContext(); if (renderOptions != null) { java.lang.String format = renderOptions.getOutputFormat(); context.setFormat(format); } context.setLocale(locale); factory = new org.eclipse.birt.report.engine.layout.pdf.emitter.LayoutContextFactory(context); context.totalPage = totalPage; if (renderOptions != null) { this.options = renderOptions.getOptions(); } }
public void run() { if ((handle) != null) { org.eclipse.birt.report.designer.internal.ui.command.CommandUtils.setVariable(ICommandParameterNameContants.STYLE_HANDLE_NAME, handle); } org.eclipse.birt.report.designer.internal.ui.command.CommandUtils.setVariable(ICommandParameterNameContants.APPLAY_STYLE_ACTION_STYLE_CHECKED, java.lang.Boolean.valueOf(isChecked())); try { org.eclipse.birt.report.designer.internal.ui.command.CommandUtils.executeCommand("org.eclipse.birt.report.designer.ui.command.applyStyleCommand", null); } catch (java.lang.Exception e) { logger.log(java.util.logging.Level.SEVERE, e.getMessage(), e); } org.eclipse.birt.report.designer.internal.ui.command.CommandUtils.removeVariable(ICommandParameterNameContants.STYLE_HANDLE_NAME); org.eclipse.birt.report.designer.internal.ui.command.CommandUtils.removeVariable(ICommandParameterNameContants.APPLAY_STYLE_ACTION_STYLE_CHECKED); }
public void endListBand(org.eclipse.birt.report.engine.content.IListBandContent listBand) { adjustInline(); wordWriter.endTableCell(context.needEmptyP()); context.endCell(); wordWriter.endTableRow(); }
public void resourceChanged(org.eclipse.birt.report.model.api.ModuleHandle module, org.eclipse.birt.report.model.api.command.ResourceChangeEvent event) { java.lang.String path = event.getChangedResourcePath(); if (path != null) { java.io.File file = new java.io.File(path); java.lang.String resourcePath = org.eclipse.birt.report.designer.ui.ReportPlugin.getDefault().getResourceFolder(); java.io.File resource = new java.io.File(resourcePath); if (((file.exists()) && (resource.exists())) && ((file.toURI().toString().indexOf(resource.toURI().toString())) > (-1))) { if (!(isDisposed())) { refreshRoot(); } } } }
private void updateROMPublicProperties(org.eclipse.datatools.connectivity.oda.design.Properties designProps, org.eclipse.birt.report.model.api.ReportElementHandle sourceHandle) throws org.eclipse.birt.report.model.api.activity.SemanticException { if (designProps == null) return; org.eclipse.emf.common.util.EList publicProps = designProps.getProperties(); for (int i = 0; i < (publicProps.size()); i++) { org.eclipse.datatools.connectivity.oda.design.Property prop = ((org.eclipse.datatools.connectivity.oda.design.Property) (publicProps.get(i))); java.lang.String propName = prop.getName(); java.lang.String propValue = prop.getValue(); org.eclipse.birt.report.model.api.util.PropertyValueValidationUtil.validateProperty(sourceHandle, propName, propValue); sourceHandle.getElement().setProperty(propName, propValue); } }
public boolean evaluate(org.mozilla.javascript.Context cx, org.mozilla.javascript.Scriptable scope) throws org.eclipse.birt.data.engine.core.DataException { if (filterPassController.getForceReset()) { doReset(); filterPassController.setForceReset(false); } if ((N) == (-1)) { java.lang.Object n_object = null; if ((helper) != null) { try { n_object = helper.evaluate(n_expr); } catch (org.eclipse.birt.core.exception.BirtException e1) { throw new org.eclipse.birt.data.engine.core.DataException(e1.getLocalizedMessage()); } } else org.eclipse.birt.data.engine.script.ScriptEvalUtil.evalExpr(n_expr, cx, scope, "Filter", 0); double n_value = -1; try { n_value = org.eclipse.birt.core.data.DataTypeUtil.toDouble(n_object).doubleValue(); } catch (org.eclipse.birt.core.exception.BirtException e) { throw new org.eclipse.birt.data.engine.core.DataException(org.eclipse.birt.data.engine.i18n.ResourceConstants.INVALID_TOP_BOTTOM_ARGUMENT, e); } if (n_percent) { if ((n_value < 0) || (n_value > 100)) throw new org.eclipse.birt.data.engine.core.DataException(org.eclipse.birt.data.engine.i18n.ResourceConstants.INVALID_TOP_BOTTOM_PERCENT_ARGUMENT); N = ((int) (java.lang.Math.round(((n_value / 100) * (filterPassController.getRowCount()))))); } else { if (n_value < 0) throw new org.eclipse.birt.data.engine.core.DataException(org.eclipse.birt.data.engine.i18n.ResourceConstants.INVALID_TOP_BOTTOM_N_ARGUMENT); N = ((int) (n_value)); } if ((N) > (org.eclipse.birt.data.engine.script.NEvaluator.MAX_N_VALUE)) throw new org.eclipse.birt.data.engine.core.DataException(((org.eclipse.birt.data.engine.i18n.ResourceConstants.INVALID_TOP_BOTTOM_N) + (org.eclipse.birt.data.engine.script.NEvaluator.MAX_N_VALUE))); } java.lang.Object value = org.eclipse.birt.data.engine.script.ScriptEvalUtil.evalExpr(op_expr, cx, scope, "Filter", 0); if ((filterPassController.getPassLevel()) == (FilterPassController.FIRST_PASS)) { return doFirstPass(value); } else if ((filterPassController.getPassLevel()) == (FilterPassController.SECOND_PASS)) { return doSecondPass(); } return false; }
public static java.sql.Date toSqlDate(java.lang.Object source) throws org.eclipse.birt.core.exception.BirtException { if (source == null) return null; if (source instanceof java.sql.Date) { return ((java.sql.Date) (source)); } else if (source instanceof java.util.Date) { return org.eclipse.birt.core.data.DataTypeUtil.toSqlDate(((java.util.Date) (source))); } else if (source instanceof java.lang.String) { try { return org.eclipse.birt.core.data.DataTypeUtil.toSqlDate(org.eclipse.birt.core.data.DataTypeUtil.toDate(((java.lang.String) (source)))); } catch (java.lang.Exception e) { try { return java.sql.Date.valueOf(((java.lang.String) (source))); } catch (java.lang.Exception e1) { } } } throw new org.eclipse.birt.core.exception.CoreException(org.eclipse.birt.core.i18n.ResourceConstants.CONVERT_FAILS, new java.lang.Object[]{ source.toString(), "java.sql.Date" }); }
public void drawImage(org.eclipse.birt.chart.event.ImageRenderEvent pre) throws org.eclipse.birt.chart.exception.ChartException { if (((pre.getImage()) == null) || ((pre.getLocation()) == null)) { return; } org.eclipse.swt.graphics.Image img = null; if ((pre.getImage()) instanceof org.eclipse.birt.chart.model.attribute.EmbeddedImage) { try { java.io.ByteArrayInputStream bis = new java.io.ByteArrayInputStream(org.apache.commons.codec.binary.Base64.decodeBase64(((org.eclipse.birt.chart.model.attribute.EmbeddedImage) (pre.getImage())).getData().getBytes())); img = new org.eclipse.swt.graphics.Image(((org.eclipse.birt.chart.device.swt.SwtDisplayServer) (_ids)).getDevice(), bis); } catch (java.lang.Exception ilex) { throw new org.eclipse.birt.chart.exception.ChartException(ChartDeviceSwtActivator.ID, org.eclipse.birt.chart.exception.ChartException.RENDERING, ilex); } } else { try { final java.lang.String sUrl = pre.getImage().getURL(); img = ((org.eclipse.swt.graphics.Image) (_ids.loadImage(org.eclipse.birt.chart.util.SecurityUtil.newURL(sUrl)))); } catch (org.eclipse.birt.chart.exception.ChartException ilex) { org.eclipse.birt.chart.device.swt.SwtRendererImpl.logger.log(new org.eclipse.birt.chart.exception.ChartException(ChartDeviceSwtActivator.ID, org.eclipse.birt.chart.exception.ChartException.RENDERING, ilex)); } catch (java.net.MalformedURLException muex) { throw new org.eclipse.birt.chart.exception.ChartException(ChartDeviceSwtActivator.ID, org.eclipse.birt.chart.exception.ChartException.RENDERING, muex); } } if (img == null) { return; } org.eclipse.birt.chart.model.attribute.Location loc = pre.getLocation(); org.eclipse.birt.chart.model.attribute.Position pos = pre.getPosition(); if (pos == null) { pos = org.eclipse.birt.chart.model.attribute.Position.INSIDE_LITERAL; } final boolean bSizeSet = ((pre.getWidth()) * (pre.getHeight())) > 0; int width = (bSizeSet) ? pre.getWidth() : img.getBounds().width; int height = (bSizeSet) ? pre.getHeight() : img.getBounds().height; int x = ((int) (loc.getX())); int y = ((int) (loc.getY())); switch (pos.getValue()) { case org.eclipse.birt.chart.model.attribute.Position.INSIDE : case org.eclipse.birt.chart.model.attribute.Position.OUTSIDE : x -= width / 2; y -= height / 2; break; case org.eclipse.birt.chart.model.attribute.Position.LEFT : x -= width; y -= height / 2; break; case org.eclipse.birt.chart.model.attribute.Position.RIGHT : y -= height / 2; break; case org.eclipse.birt.chart.model.attribute.Position.ABOVE : x -= width / 2; y -= height; break; case org.eclipse.birt.chart.model.attribute.Position.BELOW : x -= width / 2; break; } org.eclipse.birt.chart.device.swt.R31Enhance.setAlpha(_gc, ((org.eclipse.birt.chart.model.attribute.ColorDefinition) (null))); if (bSizeSet) { _gc.drawImage(img, 0, 0, img.getBounds().width, img.getBounds().height, x, y, pre.getWidth(), pre.getHeight()); } else { _gc.drawImage(img, x, y); } img.dispose(); }
public void run() { try { org.eclipse.swt.widgets.FileDialog dialog; if ((getSelection()) instanceof org.eclipse.birt.report.model.api.ReportDesignHandle) { dialog = new org.eclipse.swt.widgets.FileDialog(org.eclipse.birt.report.designer.internal.ui.util.UIUtil.getDefaultShell(), org.eclipse.swt.SWT.SAVE); } else { dialog = new org.eclipse.swt.widgets.FileDialog(org.eclipse.birt.report.designer.internal.ui.util.UIUtil.getDefaultShell(), org.eclipse.swt.SWT.OPEN); } dialog.setFilterExtensions(new java.lang.String[]{ "*.rptlibrary" }); java.lang.String filename = dialog.open(); pref = org.eclipse.birt.report.designer.ui.ReportPlugin.getDefault().getPreferenceStore().getInt(org.eclipse.birt.report.designer.internal.ui.views.actions.ExportToLibraryAction.PREF_KEY); if (!(filename.endsWith(".rptlibrary"))) { filename += ".rptlibrary"; } if (filename != null) { if ((getSelection()) instanceof org.eclipse.birt.report.model.api.ReportDesignHandle) org.eclipse.birt.report.model.api.util.ElementExportUtil.exportDesign(((org.eclipse.birt.report.model.api.ReportDesignHandle) (getSelection())), filename); else { if ((pref) == (org.eclipse.birt.report.designer.internal.ui.views.actions.ExportToLibraryAction.PREF_PROMPT)) { org.eclipse.jface.dialogs.MessageDialog prefDialog = new org.eclipse.jface.dialogs.MessageDialog(dialog.getParent(), org.eclipse.birt.report.designer.internal.ui.views.actions.ExportToLibraryAction.DIALOG_TITLE, null, org.eclipse.birt.report.designer.internal.ui.views.actions.ExportToLibraryAction.DIALOG_MESSAGE, org.eclipse.jface.dialogs.MessageDialog.INFORMATION, new java.lang.String[]{ org.eclipse.birt.report.designer.internal.ui.views.actions.ExportToLibraryAction.BUTTON_YES, org.eclipse.birt.report.designer.internal.ui.views.actions.ExportToLibraryAction.BUTTON_NO, org.eclipse.birt.report.designer.internal.ui.views.actions.ExportToLibraryAction.BUTTON_CANCEL }, 0) { protected org.eclipse.swt.widgets.Control createCustomArea(org.eclipse.swt.widgets.Composite parent) { org.eclipse.swt.widgets.Composite container = new org.eclipse.swt.widgets.Composite(parent, org.eclipse.swt.SWT.NONE); org.eclipse.swt.layout.GridLayout gridLayout = new org.eclipse.swt.layout.GridLayout(); gridLayout.marginWidth = 20; container.setLayout(gridLayout); org.eclipse.swt.widgets.Button chkbox = new org.eclipse.swt.widgets.Button(container, org.eclipse.swt.SWT.CHECK); chkbox.setText(org.eclipse.birt.report.designer.internal.ui.views.actions.ExportToLibraryAction.REMEMBER_DECISION); chkbox.addSelectionListener(new org.eclipse.swt.events.SelectionListener() { public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { saveDecision = !(saveDecision); } public void widgetDefaultSelected(org.eclipse.swt.events.SelectionEvent e) { saveDecision = false; } }); return super.createCustomArea(parent); } protected void buttonPressed(int buttonId) { switch (buttonId) { case 0 : pref = org.eclipse.birt.report.designer.internal.ui.views.actions.ExportToLibraryAction.PREF_OVERWRITE; break; case 1 : pref = org.eclipse.birt.report.designer.internal.ui.views.actions.ExportToLibraryAction.PREF_NOT_OVERWRITE; break; default : break; } if (saveDecision) { org.eclipse.birt.report.designer.ui.ReportPlugin.getDefault().getPreferenceStore().setValue(org.eclipse.birt.report.designer.internal.ui.views.actions.ExportToLibraryAction.PREF_KEY, pref); } super.buttonPressed(buttonId); } }; if ((prefDialog.open()) == 2) return; } org.eclipse.birt.report.model.api.util.ElementExportUtil.exportElement(((org.eclipse.birt.report.model.api.DesignElementHandle) (getSelection())), filename, ((pref) == (org.eclipse.birt.report.designer.internal.ui.views.actions.ExportToLibraryAction.PREF_OVERWRITE))); } } } catch (java.lang.Exception e) { org.eclipse.birt.report.designer.internal.ui.util.ExceptionHandler.handle(e); } }
private org.eclipse.swt.widgets.Composite initEditorLayout(org.eclipse.swt.widgets.Composite parent) { org.eclipse.swt.widgets.Composite mainPane = new org.eclipse.swt.widgets.Composite(parent, org.eclipse.swt.SWT.NONE); org.eclipse.swt.layout.GridLayout layout = new org.eclipse.swt.layout.GridLayout(); layout.verticalSpacing = 0; mainPane.setLayout(layout); final org.eclipse.swt.widgets.Composite barPane = new org.eclipse.swt.widgets.Composite(mainPane, org.eclipse.swt.SWT.NONE); layout = new org.eclipse.swt.layout.GridLayout(4, false); barPane.setLayout(layout); org.eclipse.swt.layout.GridData gdata = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_HORIZONTAL); barPane.setLayoutData(gdata); cmbExpList = new org.eclipse.swt.widgets.Combo(barPane, org.eclipse.swt.SWT.READ_ONLY); org.eclipse.swt.layout.GridData layoutData = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_HORIZONTAL); cmbExpList.setLayoutData(layoutData); butReset = new org.eclipse.swt.widgets.Button(barPane, org.eclipse.swt.SWT.PUSH); butReset.setText(org.eclipse.birt.report.designer.nls.Messages.getString("JSEditor.Button.Reset")); layoutData = new org.eclipse.swt.layout.GridData(); layoutData.heightHint = 20; layoutData.horizontalIndent = 6; butReset.setLayoutData(layoutData); butReset.addSelectionListener(new org.eclipse.swt.events.SelectionListener() { public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { setEditorText(""); markDirty(); } public void widgetDefaultSelected(org.eclipse.swt.events.SelectionEvent e) { widgetSelected(e); } }); org.eclipse.swt.widgets.Label column = new org.eclipse.swt.widgets.Label(barPane, ((org.eclipse.swt.SWT.SEPARATOR) | (org.eclipse.swt.SWT.VERTICAL))); layoutData = new org.eclipse.swt.layout.GridData(); layoutData.heightHint = 20; layoutData.horizontalIndent = 10; column.setLayoutData(layoutData); ano = new org.eclipse.swt.widgets.Label(barPane, 0); layoutData = new org.eclipse.swt.layout.GridData(((org.eclipse.swt.layout.GridData.FILL_HORIZONTAL) | (org.eclipse.swt.layout.GridData.VERTICAL_ALIGN_CENTER))); ano.setLayoutData(layoutData); final org.eclipse.swt.widgets.Composite sep = new org.eclipse.swt.widgets.Composite(mainPane, 0); layoutData = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_HORIZONTAL); layoutData.heightHint = 1; sep.setLayoutData(layoutData); sep.addPaintListener(new org.eclipse.swt.events.PaintListener() { public void paintControl(org.eclipse.swt.events.PaintEvent e) { org.eclipse.swt.graphics.GC gc = e.gc; org.eclipse.swt.graphics.Rectangle rect = sep.getBounds(); gc.setForeground(ColorConstants.darkGray); gc.drawLine(0, 0, rect.width, 0); } }); org.eclipse.swt.widgets.Composite jsEditorContainer = new org.eclipse.swt.widgets.Composite(mainPane, org.eclipse.swt.SWT.NONE); gdata = new org.eclipse.swt.layout.GridData(((org.eclipse.swt.layout.GridData.FILL_HORIZONTAL) | (org.eclipse.swt.layout.GridData.FILL_VERTICAL))); jsEditorContainer.setLayoutData(gdata); jsEditorContainer.setLayout(new org.eclipse.swt.layout.FillLayout()); return jsEditorContainer; }
public AggregateTable() { org.eclipse.birt.data.engine.impl.aggregation.AggregateTable.logger.entering(org.eclipse.birt.data.engine.impl.aggregation.AggregateTable.class.getName(), "AggregateTable"); this.aggrExprInfoList = new java.util.ArrayList(); org.eclipse.birt.data.engine.impl.aggregation.AggregateTable.logger.exiting(org.eclipse.birt.data.engine.impl.aggregation.AggregateTable.class.getName(), "AggregateTable"); }
private org.eclipse.birt.report.engine.layout.pdf.text.Chunk processLineBreak(org.eclipse.birt.report.engine.layout.pdf.text.Chunk lineBreakChunk) { int returnCharacterCount = lineBreakChunk.getLength(); if (null == (lastFontInfo)) { chunkStartPos = (currentPos) + returnCharacterCount; return org.eclipse.birt.report.engine.layout.pdf.text.Chunk.HARD_LINE_BREAK; } lineBreak = lineBreakChunk; org.eclipse.birt.report.engine.layout.pdf.text.Chunk c = new org.eclipse.birt.report.engine.layout.pdf.text.Chunk(new java.lang.String(chunkText, chunkStartPos, ((currentPos) - (chunkStartPos))), ((baseOffset) + (chunkStartPos)), baseLevel, runLevel, lastFontInfo); currentPos = ((currentPos) + returnCharacterCount) - 1; chunkStartPos = currentPos; return c; }
private void refreshValues() { resultList.clear(); if (columnChooser.isEnabled()) { org.eclipse.birt.report.model.api.ResultSetColumnHandle selectedColumn = null; try { org.eclipse.birt.data.engine.api.querydefn.BaseQueryDefinition query = ((org.eclipse.birt.data.engine.api.querydefn.BaseQueryDefinition) (org.eclipse.birt.report.designer.internal.ui.util.DataUtil.getPreparedQuery(engine, getDataSetHandle()).getReportQueryDefn())); java.lang.String queryExpr = null; for (java.util.Iterator iter = columnList.iterator(); iter.hasNext();) { org.eclipse.birt.report.model.api.ResultSetColumnHandle column = ((org.eclipse.birt.report.model.api.ResultSetColumnHandle) (iter.next())); if (column.getColumnName().equals(columnChooser.getText())) { queryExpr = org.eclipse.birt.report.designer.util.DEUtil.getResultSetColumnExpression(column.getColumnName()); selectedColumn = column; break; } } if (queryExpr == null) { return; } org.eclipse.birt.data.engine.api.querydefn.ScriptExpression expression = new org.eclipse.birt.data.engine.api.querydefn.ScriptExpression(queryExpr); java.lang.String columnBindingName = "_$_COLUMNBINDINGNAME_$_"; query.addResultSetExpression(columnBindingName, expression); org.eclipse.birt.data.engine.api.IPreparedQuery preparedQuery = engine.prepare(((org.eclipse.birt.data.engine.api.IQueryDefinition) (query))); org.eclipse.birt.data.engine.api.IQueryResults results = preparedQuery.execute(null); if (results != null) { org.eclipse.birt.data.engine.api.IResultIterator iter = results.getResultIterator(); if (iter != null) { org.eclipse.birt.core.format.DateFormatter formatter = new org.eclipse.birt.core.format.DateFormatter(org.eclipse.birt.report.designer.internal.ui.dialogs.ImportValueDialog.DATE_TIME_PATTERN, com.ibm.icu.util.ULocale.US); while (iter.next()) { java.lang.String result = null; if (DesignChoiceConstants.COLUMN_DATA_TYPE_DATETIME.equals(selectedColumn.getDataType())) { result = formatter.format(iter.getDate(columnBindingName)); } else { result = iter.getString(columnBindingName); } if ((!(org.eclipse.birt.report.model.api.util.StringUtil.isBlank(result))) && (!(resultList.contains(result)))) { resultList.add(result); } } } results.close(); } } catch (java.lang.Exception e) { org.eclipse.birt.report.designer.internal.ui.util.ExceptionHandler.handle(e); valueList.removeAll(); valueList.deselectAll(); updateButtons(); } filteValues(); } else { valueList.removeAll(); valueList.deselectAll(); updateButtons(); } }
public final org.eclipse.birt.chart.render.ISeriesRenderingHints getSeriesRenderingHints(org.eclipse.birt.chart.model.data.SeriesDefinition sdOrthogonal, org.eclipse.birt.chart.model.component.Series seOrthogonal) throws java.lang.IllegalArgumentException, org.eclipse.birt.chart.exception.ChartException { if ((seOrthogonal == null) || ((seOrthogonal.getClass()) == (org.eclipse.birt.chart.model.component.impl.SeriesImpl.class))) { return null; } org.eclipse.birt.chart.computation.withaxes.OneAxis oaxOrthogonal = findOrthogonalAxis(seOrthogonal); if (oaxOrthogonal == null) { throw new org.eclipse.birt.chart.exception.ChartException(org.eclipse.birt.chart.plugin.ChartEnginePlugin.ID, org.eclipse.birt.chart.exception.ChartException.NOT_FOUND, "exception.axis.series.link.broken", new java.lang.Object[]{ seOrthogonal }, org.eclipse.birt.chart.engine.i18n.Messages.getResourceBundle(rtc.getULocale())); } final org.eclipse.birt.chart.computation.withaxes.OneAxis oaxBase = aax.getPrimaryBase(); final org.eclipse.birt.chart.model.data.SeriesDefinition sdBase = ((org.eclipse.birt.chart.model.data.SeriesDefinition) (oaxBase.getModelAxis().getSeriesDefinitions().get(0))); final org.eclipse.birt.chart.computation.withaxes.AutoScale scBase = oaxBase.getScale(); final org.eclipse.birt.chart.computation.withaxes.AutoScale scOrthogonal = oaxOrthogonal.getScale(); final int iTickCount = scBase.getTickCount(); int iUnitCount = iTickCount; final int iDirection = scBase.getDirection(); final double dUnitSize = ((iDirection == (BACKWARD)) || ((iDirection == (AUTO)) && (aax.areAxesSwapped()))) ? -(scBase.getUnitSize()) : scBase.getUnitSize(); if ((scBase.getType()) == (org.eclipse.birt.chart.computation.IConstants.DATE_TIME)) { } double[] daTickCoordinates = scBase.getTickCordinates(); java.lang.Object oDataBase = null; org.eclipse.birt.chart.computation.DataSetIterator dsiDataBase = scBase.getData(); java.lang.Object oDataOrthogonal; org.eclipse.birt.chart.computation.DataSetIterator dsiDataOrthogonal = getTypedDataSet(seOrthogonal, oaxOrthogonal.getScale().getType()); double dOrthogonalZero = 0; if (((scOrthogonal.getType()) & (NUMERICAL)) == (NUMERICAL)) { dOrthogonalZero = getLocation(scOrthogonal, 0); } else { dOrthogonalZero = scOrthogonal.getStart(); } double dBaseZero = 0; if ((((scBase.getType()) & (NUMERICAL)) == (org.eclipse.birt.chart.computation.IConstants.NUMERICAL)) && (!(oaxBase.isCategoryScale()))) { dBaseZero = getLocation(scBase, 0); } else if (oaxBase.isTickBwtweenCategories()) { dBaseZero = scBase.getStart(); } else { dBaseZero = (scBase.getStart()) + (scBase.getStartShift()); } if (((scBase.getType()) == (TEXT)) || (oaxBase.isCategoryScale())) { iUnitCount--; if (oaxBase.isTickBwtweenCategories()) { iUnitCount--; } } double dX = 0; double dY = 0; double dLength = 0; org.eclipse.birt.chart.model.attribute.Location lo; final int iBaseCount = dsiDataBase.size(); final int iOrthogonalCount = dsiDataOrthogonal.size(); org.eclipse.birt.chart.computation.DataPointHints[] dpa = null; if (iBaseCount != iOrthogonalCount) { logger.log(ILogger.INFORMATION, org.eclipse.birt.chart.engine.i18n.Messages.getString("exception.base.orthogonal.inconsistent.count", new java.lang.Object[]{ new java.lang.Integer(iBaseCount), new java.lang.Integer(iOrthogonalCount) }, rtc.getULocale())); } else { dpa = new org.eclipse.birt.chart.computation.DataPointHints[iBaseCount]; final boolean bScatter = ((oaxBase.getScale().getType()) != (org.eclipse.birt.chart.computation.IConstants.TEXT)) && (!(oaxBase.isCategoryScale())); final org.eclipse.birt.chart.model.attribute.DataPoint dp = seOrthogonal.getDataPoint(); final org.eclipse.emf.common.util.EList el = dp.getComponents(); org.eclipse.birt.chart.model.attribute.DataPointComponent dpc; org.eclipse.birt.chart.model.attribute.DataPointComponentType dpct; org.eclipse.birt.chart.model.attribute.FormatSpecifier fsBase = null; org.eclipse.birt.chart.model.attribute.FormatSpecifier fsOrthogonal = null; org.eclipse.birt.chart.model.attribute.FormatSpecifier fsSeries = null; org.eclipse.birt.chart.model.attribute.FormatSpecifier fsPercentile = null; for (int i = 0; i < (el.size()); i++) { dpc = ((org.eclipse.birt.chart.model.attribute.DataPointComponent) (el.get(i))); dpct = dpc.getType(); if (DataPointComponentType.BASE_VALUE_LITERAL.equals(dpct)) { fsBase = dpc.getFormatSpecifier(); if (fsBase == null) { fsBase = sdBase.getFormatSpecifier(); } } if (DataPointComponentType.ORTHOGONAL_VALUE_LITERAL.equals(dpct)) { fsOrthogonal = dpc.getFormatSpecifier(); if ((fsOrthogonal == null) && ((seOrthogonal.eContainer()) instanceof org.eclipse.birt.chart.model.data.SeriesDefinition)) { fsOrthogonal = ((org.eclipse.birt.chart.model.data.SeriesDefinition) (seOrthogonal.eContainer())).getFormatSpecifier(); } } if (DataPointComponentType.SERIES_VALUE_LITERAL.equals(dpct)) { fsSeries = dpc.getFormatSpecifier(); } if (DataPointComponentType.PERCENTILE_ORTHOGONAL_VALUE_LITERAL.equals(dpct)) { fsPercentile = dpc.getFormatSpecifier(); } } dsiDataBase.reset(); dsiDataOrthogonal.reset(); org.eclipse.birt.chart.computation.UserDataSetHints udsh = new org.eclipse.birt.chart.computation.UserDataSetHints(seOrthogonal.getDataSets()); udsh.reset(); double total = 0; boolean isZeroValue = true; for (int i = 0; i < iOrthogonalCount; i++) { java.lang.Object v = dsiDataOrthogonal.next(); if (v instanceof java.lang.Number) { if ((((java.lang.Number) (v)).doubleValue()) != 0.0) { isZeroValue = false; } total += ((java.lang.Number) (v)).doubleValue(); } else if (v instanceof org.eclipse.birt.chart.model.data.NumberDataElement) { if ((((org.eclipse.birt.chart.model.data.NumberDataElement) (v)).getValue()) != 0.0) { isZeroValue = false; } total += ((org.eclipse.birt.chart.model.data.NumberDataElement) (v)).getValue(); } } dsiDataOrthogonal.reset(); for (int i = 0; i < iBaseCount; i++) { oDataBase = dsiDataBase.next(); oDataOrthogonal = dsiDataOrthogonal.next(); if (!bScatter) { if (aax.areAxesSwapped()) { dY = (daTickCoordinates[0]) + (dUnitSize * i); if (!(oaxBase.isTickBwtweenCategories())) { dY += dUnitSize / 2; } try { dX = getLocation(scOrthogonal, oDataOrthogonal); } catch (java.lang.IllegalArgumentException nvex) { dX = java.lang.Double.NaN; } catch (org.eclipse.birt.chart.exception.ChartException dfex) { dX = dOrthogonalZero; } } else { dX = (daTickCoordinates[0]) + (dUnitSize * i); if (!(oaxBase.isTickBwtweenCategories())) { dX += dUnitSize / 2; } try { dY = getLocation(scOrthogonal, oDataOrthogonal); } catch (java.lang.IllegalArgumentException nvex) { dY = java.lang.Double.NaN; } catch (org.eclipse.birt.chart.exception.ChartException dfex) { dY = dOrthogonalZero; } } } else { try { dX = getLocation(scBase, oDataBase); } catch (java.lang.IllegalArgumentException nvex) { dX = dBaseZero; } catch (org.eclipse.birt.chart.exception.ChartException dfex) { dX = dBaseZero; } try { dY = getLocation(scOrthogonal, oDataOrthogonal); } catch (java.lang.IllegalArgumentException nvex) { dX = java.lang.Double.NaN; } catch (org.eclipse.birt.chart.exception.ChartException dfex) { dY = dOrthogonalZero; } if (aax.areAxesSwapped()) { final double dTemp = dX; dX = dY; dY = dTemp; } } lo = org.eclipse.birt.chart.model.attribute.impl.LocationImpl.create(dX, dY); dLength = 0; for (int j = 0; j < (iTickCount - 1); j++) { if ((dX < (daTickCoordinates[(j + 1)])) && (dX >= (daTickCoordinates[j]))) { dLength = (daTickCoordinates[(j + 1)]) - (daTickCoordinates[j]); } } java.lang.Object percentileValue = null; if (total != 0) { if (oDataOrthogonal instanceof java.lang.Number) { percentileValue = new java.lang.Double(((((java.lang.Number) (oDataOrthogonal)).doubleValue()) / total)); } else if (oDataOrthogonal instanceof org.eclipse.birt.chart.model.data.NumberDataElement) { percentileValue = new java.lang.Double(((((org.eclipse.birt.chart.model.data.NumberDataElement) (oDataOrthogonal)).getValue()) / total)); } } else if (isZeroValue == true) { percentileValue = new java.lang.Double((1.0 / iOrthogonalCount)); } dpa[i] = new org.eclipse.birt.chart.computation.DataPointHints(oDataBase, oDataOrthogonal, seOrthogonal.getSeriesIdentifier(), percentileValue, seOrthogonal.getDataPoint(), fsBase, fsOrthogonal, fsSeries, fsPercentile, i, lo, dLength, rtc); udsh.next(dpa[i]); } } return new org.eclipse.birt.chart.computation.withaxes.SeriesRenderingHints(this, oaxBase.getAxisCoordinate(), scOrthogonal.getStart(), dOrthogonalZero, dSeriesThickness, daTickCoordinates, dpa, scBase, scOrthogonal, ssl, dsiDataBase, dsiDataOrthogonal); }
public void layout(org.eclipse.draw2d.IFigure container) { if (!(isDistroy())) { return; } if (!(isCalculating)) { helper = new org.eclipse.birt.report.designer.internal.ui.editors.schematic.border.TableBorderHelper(owner); helper.updateCellBorderInsets(); } figureInfo.clear(); data = new org.eclipse.birt.report.designer.internal.ui.layout.TableLayout.WorkingData(); data.columnWidths = new org.eclipse.birt.report.designer.internal.ui.layout.TableLayoutData.ColumnData[getColumnCount()]; data.rowHeights = new org.eclipse.birt.report.designer.internal.ui.layout.TableLayoutData.RowData[getRowCount()]; init(data.columnWidths, data.rowHeights); java.util.List children = container.getChildren(); initMinSize(children); initMergeMinsize(children); caleLayoutData(container); if (!(isCalculating)) { layoutTable(container); } resetRowMinSize(data.rowHeights); initRowMinSize(children); initRowMergeMinsize(children); caleRowData(); if (!(isCalculating)) { layoutTable(container); } setConstraint(container, data); needlayout = false; if (isCalculating) { } int containerWidth = getOwner().getFigure().getParent().getClientArea().getSize().width; if (containerWidth < 0) { org.eclipse.swt.widgets.Display.getCurrent().asyncExec(new java.lang.Runnable() { public void run() { if (isNeedRelayout) { getOwner().reLayout(); isNeedRelayout = false; } } }); return; } reselect(); }
public java.util.List getReferableBindings(java.lang.String targetLevel, org.eclipse.birt.data.engine.olap.api.query.ICubeQueryDefinition cubeDefn, boolean isSort) throws org.eclipse.birt.report.data.adapter.api.AdapterException { try { java.util.List bindings = cubeDefn.getBindings(); if (bindings == null) return new java.util.ArrayList(); org.eclipse.birt.data.engine.olap.data.api.DimLevel target = org.eclipse.birt.data.engine.olap.util.OlapExpressionUtil.getTargetDimLevel(targetLevel); java.util.List result = new java.util.ArrayList(); for (int i = 0; i < (bindings.size()); i++) { org.eclipse.birt.data.engine.api.IBinding binding = ((org.eclipse.birt.data.engine.api.IBinding) (bindings.get(i))); java.util.Set refDimLevel = org.eclipse.birt.data.engine.olap.util.OlapExpressionCompiler.getReferencedDimLevel(binding.getExpression(), bindings, isSort); if ((refDimLevel.size()) > 1) continue; if (!(refDimLevel.contains(target))) { java.util.List aggrOns = binding.getAggregatOns(); if ((aggrOns.size()) == 0) { if ((this.getReferencedMeasureName(binding.getExpression())) != null) { if ((this.isLeafLevel(cubeDefn, target)) && ((binding.getAggrFunction()) == null)) { result.add(new org.eclipse.birt.report.data.adapter.impl.CubeQueryUtil.BindingMetaInfo(binding.getBindingName(), org.eclipse.birt.report.data.adapter.api.IBindingMetaInfo.MEASURE_TYPE)); continue; } else if ((binding.getAggrFunction()) != null) { result.add(new org.eclipse.birt.report.data.adapter.impl.CubeQueryUtil.BindingMetaInfo(binding.getBindingName(), org.eclipse.birt.report.data.adapter.api.IBindingMetaInfo.GRAND_TOTAL_TYPE)); continue; } } } for (int j = 0; j < (aggrOns.size()); j++) { org.eclipse.birt.data.engine.olap.data.api.DimLevel dimLevel = org.eclipse.birt.data.engine.olap.util.OlapExpressionUtil.getTargetDimLevel(aggrOns.get(j).toString()); if (dimLevel.equals(target)) { if (j == ((aggrOns.size()) - 1)) { if (fromSameEdge(aggrOns, cubeDefn)) result.add(new org.eclipse.birt.report.data.adapter.impl.CubeQueryUtil.BindingMetaInfo(binding.getBindingName(), org.eclipse.birt.report.data.adapter.api.IBindingMetaInfo.GRAND_TOTAL_TYPE)); else result.add(new org.eclipse.birt.report.data.adapter.impl.CubeQueryUtil.BindingMetaInfo(binding.getBindingName(), org.eclipse.birt.report.data.adapter.api.IBindingMetaInfo.SUB_TOTAL_TYPE)); } else { org.eclipse.birt.data.engine.olap.data.api.DimLevel next = org.eclipse.birt.data.engine.olap.util.OlapExpressionUtil.getTargetDimLevel(aggrOns.get((j + 1)).toString()); if ((getAxisQualifierLevel(next, cubeDefn.getEdge(getAxisQualifierEdgeType(dimLevel, cubeDefn)))) != null) result.add(new org.eclipse.birt.report.data.adapter.impl.CubeQueryUtil.BindingMetaInfo(binding.getBindingName(), org.eclipse.birt.report.data.adapter.api.IBindingMetaInfo.SUB_TOTAL_TYPE)); } break; } } continue; } result.add(new org.eclipse.birt.report.data.adapter.impl.CubeQueryUtil.BindingMetaInfo(binding.getBindingName(), org.eclipse.birt.report.data.adapter.api.IBindingMetaInfo.DIMENSION_TYPE)); } return result; } catch (org.eclipse.birt.data.engine.core.DataException e) { throw new org.eclipse.birt.report.data.adapter.api.AdapterException(e.getLocalizedMessage(), e); } }
protected boolean isHidden() { int startColumn = cellContent.getColumn(); int endColumn = startColumn + (cellContent.getColSpan()); columnWidth = tableLM.getCellWidth(startColumn, endColumn); if (((columnWidth) == 0) || (!(tableLM.isCellVisible(cellContent)))) { return true; } return isHiddenByVisibility(); }
public java.lang.String getNameSpace() { switch (getElementDefn().getNameSpaceID()) { case org.eclipse.birt.report.model.core.RootElement.STYLE_NAME_SPACE : return "Styles"; case org.eclipse.birt.report.model.core.RootElement.DATA_SET_NAME_SPACE : return "Data Sets"; case org.eclipse.birt.report.model.core.RootElement.DATA_SOURCE_NAME_SPACE : return "Data Sources"; case org.eclipse.birt.report.model.core.RootElement.ELEMENT_NAME_SPACE : return "Report Items"; case org.eclipse.birt.report.model.core.RootElement.PARAMETER_NAME_SPACE : return "Parameters"; case org.eclipse.birt.report.model.core.RootElement.PAGE_NAME_SPACE : return "Pages"; default : return "None"; } }
public void sendNotifcations(org.eclipse.birt.report.model.api.activity.ActivityStackEvent event) { if ((listeners) != null) { java.util.List<org.eclipse.birt.report.model.api.activity.ActivityStackListener> tmpList = new java.util.ArrayList<org.eclipse.birt.report.model.api.activity.ActivityStackListener>(); tmpList.addAll(listeners); java.util.Iterator<org.eclipse.birt.report.model.api.activity.ActivityStackListener> iter = tmpList.iterator(); while (iter.hasNext()) { org.eclipse.birt.report.model.api.activity.ActivityStackListener listener = iter.next(); listener.stackChanged(event); } } if ((module) != null) { module.getNameHelper().clear(); } }
public static void configureContextParam(java.util.Map map, org.eclipse.core.resources.IProject project, org.eclipse.ui.dialogs.IOverwriteQuery query, org.eclipse.core.runtime.IProgressMonitor monitor) throws org.eclipse.core.runtime.CoreException { if (monitor.isCanceled()) return; if ((map == null) || (project == null)) { return; } org.eclipse.jst.j2ee.web.componentcore.util.WebArtifactEdit webEdit = org.eclipse.jst.j2ee.web.componentcore.util.WebArtifactEdit.getWebArtifactEditForWrite(project); if (webEdit == null) return; try { org.eclipse.jst.j2ee.webapplication.WebApp webapp = ((org.eclipse.jst.j2ee.webapplication.WebApp) (webEdit.getDeploymentDescriptorRoot())); java.util.Iterator it = map.keySet().iterator(); while (it.hasNext()) { java.lang.String name = org.eclipse.birt.integration.wtp.ui.internal.util.DataUtil.getString(it.next(), false); org.eclipse.birt.integration.wtp.ui.internal.webapplication.ContextParamBean bean = ((org.eclipse.birt.integration.wtp.ui.internal.webapplication.ContextParamBean) (map.get(name))); if (bean == null) continue; java.util.List list = null; if ((webapp.getVersionID()) == 23) { list = webapp.getContexts(); } else { list = webapp.getContextParams(); } int index = org.eclipse.birt.integration.wtp.ui.internal.util.WebArtifactUtil.getContextParamIndexByName(list, name); if (index >= 0) { java.lang.String ret = query.queryOverwrite((("Context-param '" + name) + "'")); if (IOverwriteQuery.NO.equalsIgnoreCase(ret)) { continue; } if (IOverwriteQuery.CANCEL.equalsIgnoreCase(ret)) { monitor.setCanceled(true); return; } list.remove(index); } java.lang.String value = bean.getValue(); java.lang.String description = bean.getDescription(); if ((webapp.getVersionID()) == 23) { org.eclipse.jst.j2ee.webapplication.ContextParam param = WebapplicationFactory.eINSTANCE.createContextParam(); param.setParamName(name); param.setParamValue(value); if (description != null) param.setDescription(description); param.setWebApp(webapp); } else { org.eclipse.jst.j2ee.common.ParamValue param = CommonFactory.eINSTANCE.createParamValue(); param.setName(name); param.setValue(value); if (description != null) { org.eclipse.jst.j2ee.common.Description descriptionObj = CommonFactory.eINSTANCE.createDescription(); descriptionObj.setValue(description); param.getDescriptions().add(descriptionObj); param.setDescription(description); } webapp.getContextParams().add(param); } } webEdit.saveIfNecessary(monitor); } finally { webEdit.dispose(); } }
public boolean findGroup(java.lang.Object[] groupKeyValues) throws org.eclipse.birt.core.exception.BirtException { java.util.List groups = query.getQueryDefn().getGroups(); if ((groupKeyValues.length) > (groups.size())) throw new org.eclipse.birt.data.engine.core.DataException(org.eclipse.birt.data.engine.i18n.ResourceConstants.INCORRECT_GROUP_KEY_VALUES); org.eclipse.birt.data.engine.api.querydefn.GroupDefinition group = null; java.lang.String[] columnNames = new java.lang.String[groupKeyValues.length]; for (int i = 0; i < (columnNames.length); i++) { group = ((org.eclipse.birt.data.engine.api.querydefn.GroupDefinition) (groups.get(i))); columnNames[i] = getGroupKeyColumnName(group); } odiResult.first(0); if ((odiResult.getCurrentResult()) == null) return false; do { for (int i = 0; i < (columnNames.length); i++) { if (groupKeyValuesEqual(groupKeyValues, columnNames, i)) { if (i == ((columnNames.length) - 1)) return true; } else { this.skipToEnd((i + 1)); break; } } } while (odiResult.next() ); return false; }
private void updateButtons() { boolean complete = ((uriEditor.getText()) != null) && ((uriEditor.getText().trim().length()) > 0); java.net.URL url = null; try { url = new java.net.URL(uriEditor.getText().trim()); if ((selectedType) == (org.eclipse.birt.chart.ui.swt.composites.ImageDialog.EMBEDDED_TYPE)) { java.io.File file = new java.io.File(url.getPath()); complete = (file.exists()) && (file.isAbsolute()); } } catch (java.lang.Exception e) { complete = false; } previewButton.setEnabled(complete); getButton(IDialogConstants.OK_ID).setEnabled(complete); browseButton.setVisible(embedded.getSelection()); }
public void outputColumns(int[] width) { writer.openTag("ss:Table"); if (width == null) { return; } for (int i = 0; i < (width.length); i++) { writer.openTag("ss:Column"); writer.attribute("ss:Width", ((width[i]) / 1000)); writer.attribute("ss:AutoFitWidth", 0); writer.closeTag("ss:Column"); } }
private void createDimensionViewHandle(org.eclipse.birt.report.model.api.ExtendedItemHandle handle, org.eclipse.birt.report.model.api.olap.DimensionHandle dimensionHandle, int type) throws org.eclipse.birt.report.model.api.activity.SemanticException { if ((dimensionHandle.getDefaultHierarchy().getLevelCount()) > 0) { org.eclipse.birt.report.model.api.extension.IReportItem reportItem = handle.getReportItem(); org.eclipse.birt.report.item.crosstab.core.de.CrosstabReportItemHandle xtabHandle = ((org.eclipse.birt.report.item.crosstab.core.de.CrosstabReportItemHandle) (reportItem)); org.eclipse.birt.report.item.crosstab.core.de.DimensionViewHandle viewHandle = xtabHandle.insertDimension(dimensionHandle, type, xtabHandle.getDimensionCount(type)); org.eclipse.birt.report.model.api.olap.LevelHandle[] levels = getLevelHandles(dimensionHandle); for (int j = 0; j < (levels.length); j++) { org.eclipse.birt.report.model.api.olap.LevelHandle levelHandle = levels[j]; org.eclipse.birt.report.model.api.DataItemHandle dataHandle = org.eclipse.birt.report.item.crosstab.internal.ui.editors.model.CrosstabAdaptUtil.createColumnBindingAndDataItem(((org.eclipse.birt.report.model.api.ExtendedItemHandle) (xtabHandle.getModelHandle())), levelHandle); org.eclipse.birt.report.item.crosstab.core.de.LevelViewHandle levelViewHandle = viewHandle.insertLevel(levelHandle, j); org.eclipse.birt.report.item.crosstab.core.de.CrosstabCellHandle cellHandle = levelViewHandle.getCell(); cellHandle.addContent(dataHandle); } } }
public static java.lang.String getPattern(java.lang.Object data, java.lang.String val) { if ((val != null) && (data instanceof java.util.Date)) { if ((val.indexOf("kk:mm")) >= 0) { return "Short Time"; } else if (val.startsWith("ahh")) { return "Long Time"; } else if ((!(val.startsWith("ahh"))) && ((val.indexOf("ahh")) >= 0)) { return "General Date"; } return new org.eclipse.birt.core.format.DateFormatter(val).getPattern(); } else if ((val == null) && (data instanceof java.sql.Time)) { return "Long Time"; } else if ((val == null) && (data instanceof java.sql.Date)) { return "yyyy-M-d"; } else if ((val == null) && (data instanceof java.util.Date)) { return "yyyy-M-d HH:ss:mm AM/PM"; } else if ((val != null) && (data instanceof java.lang.Number)) { if ((val.indexOf("E")) >= 0) { return "Scientific"; } return new org.eclipse.birt.core.format.NumberFormatter(val).getPattern(); } else if ((val != null) && (data instanceof java.lang.String)) { return new org.eclipse.birt.core.format.StringFormatter(val).getPattern(); } return null; }
private void synchronize() { org.eclipse.birt.report.engine.emitter.excel.layout.XlsContainer rowContainer = getCurrentContainer(); org.eclipse.birt.report.engine.emitter.excel.layout.ContainerSizeInfo rowSizeInfo = rowContainer.getSizeInfo(); int startCoordinate = rowSizeInfo.getStartCoordinate(); int endCoordinate = rowSizeInfo.getEndCoordinate(); int startColumnIndex = axis.getColumnIndexByCoordinate(startCoordinate); int endColumnIndex = axis.getColumnIndexByCoordinate(endCoordinate); int maxRowIndex = 0; int[] rowIndexes = new int[endColumnIndex - startColumnIndex]; for (int currentColumnIndex = startColumnIndex; currentColumnIndex < endColumnIndex; currentColumnIndex++) { int rowIndex = cache.getMaxRowIndex(currentColumnIndex); rowIndexes[(currentColumnIndex - startColumnIndex)] = rowIndex; maxRowIndex = (maxRowIndex > rowIndex) ? maxRowIndex : rowIndex; } if (maxRowIndex == (rowContainer.getRowIndex())) { maxRowIndex++; } rowContainer.setRowIndex(maxRowIndex); for (int currentColumnIndex = startColumnIndex; currentColumnIndex < endColumnIndex; currentColumnIndex++) { int rowspan = maxRowIndex - (rowIndexes[(currentColumnIndex - startColumnIndex)]); if (rowspan > 0) { org.eclipse.birt.report.engine.emitter.excel.SheetData upstair = cache.getColumnLastData(currentColumnIndex); if ((upstair != null) && (canSpan(upstair, rowContainer))) { org.eclipse.birt.report.engine.emitter.excel.SheetData predata = upstair; int rs = (predata.getRowSpan()) + rowspan; predata.setRowSpan(rs); org.eclipse.birt.report.engine.emitter.excel.SheetData realData = getRealData(predata); org.eclipse.birt.report.engine.emitter.excel.BlankData blankData = new org.eclipse.birt.report.engine.emitter.excel.BlankData(realData); if (!(isInContainer(predata, rowContainer))) { blankData.decreasRowSpanInDesign(); } int rowIndex = predata.getRowIndex(); for (int p = 1; p <= rowspan; p++) { org.eclipse.birt.report.engine.emitter.excel.BlankData blank = new org.eclipse.birt.report.engine.emitter.excel.BlankData(predata); blank.setRowIndex((rowIndex + p)); cache.addData(currentColumnIndex, blank); } } } } }
private org.eclipse.birt.data.engine.api.IResultMetaData getRealMetaData(org.eclipse.birt.report.model.api.DataSetHandle dataSetHandle) throws org.eclipse.birt.core.exception.BirtException { org.eclipse.birt.data.engine.api.querydefn.QueryDefinition query = new org.eclipse.birt.data.engine.api.querydefn.QueryDefinition(); query.setDataSetName(dataSetHandle.getQualifiedName()); query.setMaxRows(1); org.eclipse.birt.data.engine.api.IResultMetaData metaData = org.eclipse.birt.report.data.adapter.impl.MetaDataPopulator.retrieveResultMetaData(dataSetHandle); if (metaData == null) { metaData = new org.eclipse.birt.report.data.adapter.impl.QueryExecutionHelper(dataEngine, modelAdaptor, sessionContext, false).executeQuery(query).getResultMetaData(); if (dataSetHandle.canEdit()) addResultSetColumn(dataSetHandle, metaData); } if (needsUseResultHint(dataSetHandle, metaData)) { metaData = new org.eclipse.birt.report.data.adapter.impl.QueryExecutionHelper(dataEngine, modelAdaptor, sessionContext, true).executeQuery(query).getResultMetaData(); } if (!(dataSetHandle instanceof org.eclipse.birt.report.model.api.ScriptDataSetHandle)) clearUnusedData(dataSetHandle, metaData); return metaData; }
public final java.awt.Stroke getCachedStroke(org.eclipse.birt.chart.model.attribute.LineAttributes lia) { if (lia == null) return null; java.awt.Stroke s = _htLineStyles.get(lia); if (s == null) { java.awt.BasicStroke bs = null; if ((lia.getStyle().getValue()) == (org.eclipse.birt.chart.model.attribute.LineStyle.DASHED)) { float[] faStyle = new float[]{ 6.0F, 4.0F }; bs = new java.awt.BasicStroke(lia.getThickness(), java.awt.BasicStroke.CAP_ROUND, java.awt.BasicStroke.JOIN_ROUND, 0, faStyle, 0); } else if ((lia.getStyle().getValue()) == (org.eclipse.birt.chart.model.attribute.LineStyle.DOTTED)) { float[] faStyle = new float[]{ 1.0F, 4.0F }; bs = new java.awt.BasicStroke(lia.getThickness(), java.awt.BasicStroke.CAP_ROUND, java.awt.BasicStroke.JOIN_ROUND, 0, faStyle, 0); } else if ((lia.getStyle().getValue()) == (org.eclipse.birt.chart.model.attribute.LineStyle.DASH_DOTTED)) { float[] faStyle = new float[]{ 6.0F, 4.0F, 1.0F, 4.0F }; bs = new java.awt.BasicStroke(lia.getThickness(), java.awt.BasicStroke.CAP_ROUND, java.awt.BasicStroke.JOIN_ROUND, 0, faStyle, 0); } else if ((lia.getStyle().getValue()) == (org.eclipse.birt.chart.model.attribute.LineStyle.SOLID)) { bs = new java.awt.BasicStroke(lia.getThickness(), java.awt.BasicStroke.CAP_SQUARE, java.awt.BasicStroke.JOIN_MITER); } if (bs != null) { _htLineStyles.put(lia, bs); } return bs; } return s; }
public java.lang.Object getValue(int fieldIndex) throws org.eclipse.birt.core.exception.BirtException { java.lang.Object value = it.getValue(this.metadata.getFieldName(fieldIndex)); if (value == null) { return this.metadata.getNullValueReplacer(fieldIndex); } return org.eclipse.birt.core.data.DataTypeUtil.convert(this.metadata.getDataProcessor(fieldIndex).process(value), value.getClass()); }
public final void reset() { dValueLastNegative = 0; dValueLast = 0; dLastMaxPosition = java.lang.Double.NaN; dLastMinPosition = java.lang.Double.NaN; }
protected void writeFields(java.io.DataOutputStream out) throws java.io.IOException { if ((type) != (-1)) { org.eclipse.birt.core.util.IOUtil.writeInt(out, org.eclipse.birt.report.engine.content.impl.ActionContent.FIELD_TYPE); org.eclipse.birt.core.util.IOUtil.writeInt(out, type); } if (isDrillThrough()) { if ((drillThrough.getBookmark()) != null) { org.eclipse.birt.core.util.IOUtil.writeInt(out, org.eclipse.birt.report.engine.content.impl.ActionContent.FIELD_BOOKMARK); org.eclipse.birt.core.util.IOUtil.writeString(out, drillThrough.getBookmark()); } } else if ((bookmark) != null) { org.eclipse.birt.core.util.IOUtil.writeInt(out, org.eclipse.birt.report.engine.content.impl.ActionContent.FIELD_BOOKMARK); org.eclipse.birt.core.util.IOUtil.writeString(out, bookmark); } if (isDrillThrough()) { if (isBookmark) { org.eclipse.birt.core.util.IOUtil.writeInt(out, org.eclipse.birt.report.engine.content.impl.ActionContent.FIELD_ISBOOKMARK); org.eclipse.birt.core.util.IOUtil.writeBool(out, drillThrough.isBookmark()); } } else if (isBookmark) { org.eclipse.birt.core.util.IOUtil.writeInt(out, org.eclipse.birt.report.engine.content.impl.ActionContent.FIELD_ISBOOKMARK); org.eclipse.birt.core.util.IOUtil.writeBool(out, isBookmark); } if ((hyperlink) != null) { org.eclipse.birt.core.util.IOUtil.writeInt(out, org.eclipse.birt.report.engine.content.impl.ActionContent.FIELD_HYPERLINK); org.eclipse.birt.core.util.IOUtil.writeString(out, hyperlink); } if ((isDrillThrough()) && ((drillThrough.getReportName()) != null)) { org.eclipse.birt.core.util.IOUtil.writeInt(out, org.eclipse.birt.report.engine.content.impl.ActionContent.FIELD_REPORTNAME); org.eclipse.birt.core.util.IOUtil.writeString(out, drillThrough.getReportName()); } if ((isDrillThrough()) && ((drillThrough.getParameterBindings()) != null)) { org.eclipse.birt.core.util.IOUtil.writeInt(out, org.eclipse.birt.report.engine.content.impl.ActionContent.FIELD_PARAMETERBINDINGS); org.eclipse.birt.core.util.IOUtil.writeMap(out, drillThrough.getParameterBindings()); } if ((isDrillThrough()) && ((drillThrough.getSearchCriteria()) != null)) { org.eclipse.birt.core.util.IOUtil.writeInt(out, org.eclipse.birt.report.engine.content.impl.ActionContent.FIELD_SEARCHCRITERIA); org.eclipse.birt.core.util.IOUtil.writeMap(out, drillThrough.getSearchCriteria()); } if ((isDrillThrough()) && ((drillThrough.getTargetWindow()) != null)) { org.eclipse.birt.core.util.IOUtil.writeInt(out, org.eclipse.birt.report.engine.content.impl.ActionContent.FIELD_TARGET); org.eclipse.birt.core.util.IOUtil.writeString(out, drillThrough.getTargetWindow()); } else if ((target) != null) { org.eclipse.birt.core.util.IOUtil.writeInt(out, org.eclipse.birt.report.engine.content.impl.ActionContent.FIELD_TARGET); org.eclipse.birt.core.util.IOUtil.writeString(out, target); } if ((isDrillThrough()) && ((drillThrough.getFormat()) != null)) { org.eclipse.birt.core.util.IOUtil.writeInt(out, org.eclipse.birt.report.engine.content.impl.ActionContent.FIELD_FORMAT); org.eclipse.birt.core.util.IOUtil.writeString(out, drillThrough.getFormat()); } }
public static boolean containsYOptionalGrouping(org.eclipse.birt.chart.model.Chart chart) { boolean YOG = false; java.util.List<org.eclipse.birt.chart.model.data.SeriesDefinition> sds = org.eclipse.birt.chart.util.ChartUtil.getAllOrthogonalSeriesDefinitions(chart); if ((sds.size()) > 0) { org.eclipse.birt.chart.model.data.SeriesDefinition os = sds.get(0); if ((((os != null) && ((os.getQuery()) != null)) && ((os.getQuery().getDefinition()) != null)) && ((os.getQuery().getDefinition().length()) != 0)) { YOG = true; } } return YOG; }
public void visitReportDesign(org.eclipse.birt.report.model.api.ReportDesignHandle handle) { setupNamedExpressions(handle, report.getNamedExpressions()); org.eclipse.birt.report.model.api.StyleHandle defaultStyle = handle.findStyle("report"); createReportDefaultStyles(defaultStyle); org.eclipse.birt.report.engine.ir.PageSetupDesign pageSetup = new org.eclipse.birt.report.engine.ir.PageSetupDesign(); org.eclipse.birt.report.model.api.SlotHandle pageSlot = handle.getMasterPages(); for (int i = 0; i < (pageSlot.getCount()); i++) { apply(pageSlot.get(i)); if ((currentElement) != null) { pageSetup.addMasterPage(((org.eclipse.birt.report.engine.ir.MasterPageDesign) (currentElement))); } } if ((pageSlot.getCount()) < 1) { org.eclipse.birt.report.engine.ir.MasterPageDesign masterPage = new org.eclipse.birt.report.engine.ir.SimpleMasterPageDesign(); masterPage.setID(generateUniqueID()); masterPage.setName(org.eclipse.birt.report.engine.parser.EngineIRVisitor.DEFAULT_MASTERPAGE_NAME); masterPage.setPageType(DesignChoiceConstants.PAGE_SIZE_US_LETTER); masterPage.setOrientation(DesignChoiceConstants.PAGE_ORIENTATION_AUTO); org.eclipse.birt.report.engine.ir.DimensionType width = new org.eclipse.birt.report.engine.ir.DimensionType(org.eclipse.birt.report.engine.parser.EngineIRVisitor.DEFAULT_MASTERPAGE_WIDTH, org.eclipse.birt.report.engine.ir.DimensionType.UNITS_IN); org.eclipse.birt.report.engine.ir.DimensionType height = new org.eclipse.birt.report.engine.ir.DimensionType(org.eclipse.birt.report.engine.parser.EngineIRVisitor.DEFAULT_MASTERPAGE_HEIGHT, org.eclipse.birt.report.engine.ir.DimensionType.UNITS_IN); masterPage.setPageSize(width, height); org.eclipse.birt.report.engine.ir.DimensionType top = new org.eclipse.birt.report.engine.ir.DimensionType(org.eclipse.birt.report.engine.parser.EngineIRVisitor.DEFAULT_MASTERPAGE_TOP_MARGIN, org.eclipse.birt.report.engine.ir.DimensionType.UNITS_IN); org.eclipse.birt.report.engine.ir.DimensionType left = new org.eclipse.birt.report.engine.ir.DimensionType(org.eclipse.birt.report.engine.parser.EngineIRVisitor.DEFAULT_MASTERPAGE_LEFT_MARGIN, org.eclipse.birt.report.engine.ir.DimensionType.UNITS_IN); org.eclipse.birt.report.engine.ir.DimensionType bottom = new org.eclipse.birt.report.engine.ir.DimensionType(org.eclipse.birt.report.engine.parser.EngineIRVisitor.DEFAULT_MASTERPAGE_BOTTOM_MARGIN, org.eclipse.birt.report.engine.ir.DimensionType.UNITS_IN); org.eclipse.birt.report.engine.ir.DimensionType right = new org.eclipse.birt.report.engine.ir.DimensionType(org.eclipse.birt.report.engine.parser.EngineIRVisitor.DEFAULT_MASTERPAGE_RIGHT_MARGIN, org.eclipse.birt.report.engine.ir.DimensionType.UNITS_IN); masterPage.setMargin(top, left, bottom, right); pageSetup.addMasterPage(masterPage); } report.setPageSetup(pageSetup); org.eclipse.birt.report.model.api.SlotHandle bodySlot = handle.getBody(); for (int i = 0; i < (bodySlot.getCount()); i++) { apply(bodySlot.get(i)); if ((currentElement) != null) { report.addContent(((org.eclipse.birt.report.engine.ir.ReportItemDesign) (currentElement))); } } }
public java.lang.String format(java.util.Date date) { java.lang.StringBuffer str = new java.lang.StringBuffer(); java.text.FieldPosition pos = new java.text.FieldPosition(com.ibm.icu.text.DateFormat.DATE_FIELD); com.ibm.icu.text.DateFormat df = com.ibm.icu.text.DateFormat.getDateInstance(DateFormat.LONG, locale); df.format(date, str, pos); int endIndex; if ((pos.getEndIndex()) >= (str.length())) { endIndex = pos.getEndIndex(); } else { endIndex = (pos.getEndIndex()) + ((str.charAt(pos.getEndIndex())) == ',' ? 2 : 1); } if (endIndex >= (str.length())) { return str.substring(0, pos.getBeginIndex()).trim(); } return (str.substring(0, pos.getBeginIndex())) + (str.substring(endIndex)); }
public boolean onBroughtToTop(org.eclipse.birt.report.designer.ui.editors.IReportEditorPage prePage) { if ((getEditorInput()) != (prePage.getEditorInput())) { setInput(prePage.getEditorInput()); } if ((getStaleType()) == (org.eclipse.birt.report.designer.ui.editors.IPageStaleType.MODEL_RELOAD)) { reloadEditorInput(); doSave(null); } else if ((prePage != (this)) && ((prePage.isDirty()) || ((prePage.getStaleType()) != (org.eclipse.birt.report.designer.ui.editors.IPageStaleType.NONE)))) { org.eclipse.birt.report.model.api.ModuleHandle model = getModel(); if ((model != null) && ((org.eclipse.birt.report.model.api.ModuleUtil.compareReportVersion(org.eclipse.birt.report.model.api.ModuleUtil.getReportVersion(), model.getVersion())) > 0)) { if (!(org.eclipse.jface.dialogs.MessageDialog.openConfirm(org.eclipse.birt.report.designer.internal.ui.util.UIUtil.getDefaultShell(), org.eclipse.birt.report.designer.nls.Messages.getString("MultiPageReportEditor.ConfirmVersion.Dialog.Title"), org.eclipse.birt.report.designer.nls.Messages.getString("MultiPageReportEditor.ConfirmVersion.Dialog.Message")))) { return false; } } prePage.doSave(null); org.eclipse.birt.report.designer.internal.ui.util.UIUtil.doFinishSave(getModel()); prePage.markPageStale(IPageStaleType.NONE); refreshDocument(); markPageStale(IPageStaleType.NONE); } org.eclipse.birt.report.model.api.ModuleHandle model = getModel(); hookModelEventManager(model); org.eclipse.birt.report.designer.core.model.SessionHandleAdapter.getInstance().getMediator(model).addColleague(this); org.eclipse.birt.report.designer.core.util.mediator.ReportMediator mediator = org.eclipse.birt.report.designer.core.model.SessionHandleAdapter.getInstance().getMediator(model); org.eclipse.birt.report.designer.core.util.mediator.request.ReportRequest request = new org.eclipse.birt.report.designer.core.util.mediator.request.ReportRequest(this); java.util.List list = new java.util.ArrayList(mediator.getCurrentState().getSelectionObject()); if (list.isEmpty()) { list.add(new java.lang.Object()); } else { setHighlightLine(model.getLineNo(list.get(0))); } request.setSelectionObject(list); request.setType(ReportRequest.SELECTION); mediator.notifyRequest(request); reportXMLEditor.setFocus(); return true; }
protected java.util.Map getParsedParametersAsString(java.util.Collection parameterList, javax.servlet.http.HttpServletRequest request, org.eclipse.birt.report.service.api.InputOptions options) throws org.eclipse.birt.report.service.api.ReportServiceException { assert parameterList != null; java.util.Map params = new java.util.HashMap(); for (java.util.Iterator iter = parameterList.iterator(); iter.hasNext();) { org.eclipse.birt.report.model.api.ScalarParameterHandle parameter = null; java.lang.Object parameterObj = iter.next(); if (parameterObj instanceof org.eclipse.birt.report.model.api.ScalarParameterHandle) { parameter = ((org.eclipse.birt.report.model.api.ScalarParameterHandle) (parameterObj)); } if (parameter == null) continue; java.lang.String paramName = parameter.getName(); java.lang.String paramValue = getParamValueAsString(request, parameter); if ((paramValue == null) && ((IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(request.getServletPath())) || (((this.configMap) != null) && (!(this.configMap.containsKey(paramName)))))) { paramValue = this.getParameterDefaultValues(reportDesignHandle, paramName, options); } if (paramName != null) params.put(paramName, paramValue); } return params; }
public static int getDataType(java.lang.Class objClass) { if (objClass.equals(java.sql.Timestamp.class)) return org.eclipse.birt.data.engine.olap.data.util.DataType.typeCodes[4]; if (objClass.equals(byte[].class)) return org.eclipse.birt.data.engine.olap.data.util.DataType.typeCodes[6]; for (int i = 0; i < (org.eclipse.birt.data.engine.olap.data.util.DataType.classes.length); i++) { if (org.eclipse.birt.data.engine.olap.data.util.DataType.classes[i].equals(objClass)) { return org.eclipse.birt.data.engine.olap.data.util.DataType.typeCodes[i]; } } return org.eclipse.birt.data.engine.olap.data.util.DataType.UNKNOWN_TYPE; }
public org.eclipse.gef.EditPart createEditPart(org.eclipse.gef.EditPart context, java.lang.Object model) { if (context instanceof org.eclipse.birt.report.item.crosstab.internal.ui.editors.editparts.CrosstabCellEditPart) { if (model instanceof org.eclipse.birt.report.model.api.DataItemHandle) { org.eclipse.birt.report.item.crosstab.internal.ui.editors.model.CrosstabCellAdapter adapter = ((org.eclipse.birt.report.item.crosstab.internal.ui.editors.editparts.CrosstabCellEditPart) (context)).getCrosstabCellAdapter(); java.lang.String position = adapter.getPositionType(); if (((ICrosstabCellAdapterFactory.CELL_FIRST_LEVEL_HANDLE.equals(position)) || (ICrosstabCellAdapterFactory.CELL_MEASURE.equals(position))) && ((adapter.getFirstDataItem()) == model)) { return new org.eclipse.birt.report.item.crosstab.internal.ui.editors.editparts.LevelHandleDataItemEditPart(model); } else if (ICrosstabCellAdapterFactory.CELL_LEVEL_HANDLE.equals(position)) { return new org.eclipse.birt.report.item.crosstab.internal.ui.editors.editparts.LevelHandleDataItemEditPart(model); } else if (ICrosstabCellAdapterFactory.CELL_MEASURE_HEADER.equals(position)) { return new org.eclipse.birt.report.item.crosstab.internal.ui.editors.editparts.MeasureHandleDataItemEditPart(model); } else if (ICrosstabCellAdapterFactory.CELL_MEASURE_AGGREGATION.equals(position)) { return new org.eclipse.birt.report.item.crosstab.internal.ui.editors.editparts.MeasureAggregationEditPart(model); } } } if (model instanceof org.eclipse.birt.report.item.crosstab.internal.ui.editors.model.VirtualCrosstabCellAdapter) { return new org.eclipse.birt.report.item.crosstab.internal.ui.editors.editparts.VirtualCellEditPart(model); } if (model instanceof org.eclipse.birt.report.item.crosstab.internal.ui.editors.model.CrosstabCellAdapter) { if ((ICrosstabCellAdapterFactory.CELL_FIRST_LEVEL_HANDLE.equals(((org.eclipse.birt.report.item.crosstab.internal.ui.editors.model.CrosstabCellAdapter) (model)).getPositionType())) || (ICrosstabCellAdapterFactory.CELL_MEASURE.equals(((org.eclipse.birt.report.item.crosstab.internal.ui.editors.model.CrosstabCellAdapter) (model)).getPositionType()))) { org.eclipse.birt.report.item.crosstab.internal.ui.editors.editparts.CrosstabFirstCellEditPart first = new org.eclipse.birt.report.item.crosstab.internal.ui.editors.editparts.CrosstabFirstCellEditPart(model); first.setManager(createMenuManager(((org.eclipse.birt.report.item.crosstab.internal.ui.editors.model.CrosstabCellAdapter) (model)).getPositionType(), context.getViewer())); return first; } return new org.eclipse.birt.report.item.crosstab.internal.ui.editors.editparts.CrosstabCellEditPart(model); } return null; }
protected void __init(javax.servlet.http.HttpServletRequest request) throws java.lang.Exception { if (org.eclipse.birt.report.utility.ParameterAccessor.isGetImageOperator(request)) { return; } this.category = "BIRT"; this.masterPageContent = org.eclipse.birt.report.utility.ParameterAccessor.isMasterPageContent(request); this.isDesigner = org.eclipse.birt.report.utility.ParameterAccessor.isDesigner(request); this.bookmark = org.eclipse.birt.report.utility.ParameterAccessor.getBookmark(request); this.reportPage = org.eclipse.birt.report.utility.ParameterAccessor.getPage(request); this.reportPageRange = org.eclipse.birt.report.utility.ParameterAccessor.getPageRange(request); if ((IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(request.getServletPath())) || (IBirtConstants.SERVLET_PATH_DOWNLOAD.equalsIgnoreCase(request.getServletPath()))) { this.reportDocumentName = org.eclipse.birt.report.utility.ParameterAccessor.getReportDocument(request, null, true); } else { this.reportDocumentName = org.eclipse.birt.report.utility.ParameterAccessor.getReportDocument(request, null, false); } this.reportDesignName = org.eclipse.birt.report.utility.ParameterAccessor.getReport(request, null); this.format = org.eclipse.birt.report.utility.ParameterAccessor.getFormat(request); this.maxRows = org.eclipse.birt.report.utility.ParameterAccessor.getMaxRows(request); org.eclipse.birt.report.resource.BirtResources.setLocale(org.eclipse.birt.report.utility.ParameterAccessor.getLocale(request)); org.eclipse.birt.report.service.ReportEngineService.getInstance().setMaxRows(this.maxRows); this.requestType = request.getHeader(ParameterAccessor.HEADER_REQUEST_TYPE); processReport(request); this.reportTitle = org.eclipse.birt.report.utility.ParameterAccessor.getTitle(request); this.isShowTitle = org.eclipse.birt.report.utility.ParameterAccessor.isShowTitle(request); this.isShowToolbar = org.eclipse.birt.report.utility.ParameterAccessor.isShowToolbar(request); this.isShowNavigationbar = org.eclipse.birt.report.utility.ParameterAccessor.isShowNavigationbar(request); this.moduleOptions = org.eclipse.birt.report.utility.BirtUtility.getModuleOptions(request); this.reportDesignHandle = getDesignHandle(request); if ((this.reportDesignHandle) == null) return; __initParameters(request); }
public void checkStatus(int type) { org.eclipse.core.runtime.Status status = null; if (type == (PublishLibraryWizard.HAVE_NO_HANDLE)) { status = new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.OK, org.eclipse.birt.report.designer.internal.ui.wizards.WizardLibrarySettingPage.PLUGIN_ID, 0, org.eclipse.birt.report.designer.internal.ui.wizards.WizardLibrarySettingPage.PAGE_DESC2, null); } else { status = new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.OK, org.eclipse.birt.report.designer.internal.ui.wizards.WizardLibrarySettingPage.PLUGIN_ID, 0, org.eclipse.birt.report.designer.internal.ui.wizards.WizardLibrarySettingPage.PAGE_DESC, null); } if ((type == (PublishLibraryWizard.HAVE_NO_HANDLE)) && (org.eclipse.birt.report.designer.internal.ui.wizards.WizardLibrarySettingPage.isTextEmpty(sourceFileText))) { status = new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, org.eclipse.birt.report.designer.internal.ui.wizards.WizardLibrarySettingPage.PLUGIN_ID, 0, org.eclipse.birt.report.designer.nls.Messages.getString("PublishLibraryDialog.Message.SourceFileEmpty"), null); } else if ((type == (PublishLibraryWizard.HAVE_NO_HANDLE)) && ((new java.io.File(sourceFileText.getText()).isDirectory()) || (!(new java.io.File(sourceFileText.getText()).exists())))) { status = new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, org.eclipse.birt.report.designer.internal.ui.wizards.WizardLibrarySettingPage.PLUGIN_ID, 0, org.eclipse.birt.report.designer.nls.Messages.getFormattedString("PublishLibraryDialog.Message.SourceFileNotFound", new java.lang.String[]{ sourceFileText.getText() }), null); } else if (org.eclipse.birt.report.designer.internal.ui.wizards.WizardLibrarySettingPage.isTextEmpty(nameText)) { status = new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, org.eclipse.birt.report.designer.internal.ui.wizards.WizardLibrarySettingPage.PLUGIN_ID, 0, org.eclipse.birt.report.designer.nls.Messages.getString("PublishLibraryDialog.Message.FileNameEmpty"), null); } else if (!(nameText.getText().endsWith(".rptlibrary"))) { status = new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, org.eclipse.birt.report.designer.internal.ui.wizards.WizardLibrarySettingPage.PLUGIN_ID, 0, org.eclipse.birt.report.designer.nls.Messages.getString("PublishLibraryDialog.Message.FileNameError"), null); } else if (org.eclipse.birt.report.designer.internal.ui.wizards.WizardLibrarySettingPage.isTextEmpty(folderText)) { status = new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, org.eclipse.birt.report.designer.internal.ui.wizards.WizardLibrarySettingPage.PLUGIN_ID, 0, org.eclipse.birt.report.designer.nls.Messages.getString("PublishLibraryDialog.Message.FolderEmpty"), null); } pageStatus = status; applyToStatusLine(pageStatus); getWizard().getContainer().updateButtons(); }
protected org.eclipse.birt.report.engine.nLayout.area.impl.SplitResult _split(int height, boolean force) throws org.eclipse.birt.core.exception.BirtException { org.eclipse.birt.report.engine.nLayout.area.impl.RowArea result = null; for (int i = 0; i < (cells.length); i++) { if ((cells[i]) != null) { org.eclipse.birt.report.engine.nLayout.area.impl.SplitResult splitCell = cells[i].split(height, force); org.eclipse.birt.report.engine.nLayout.area.impl.CellArea cell = ((org.eclipse.birt.report.engine.nLayout.area.impl.CellArea) (splitCell.getResult())); if (cell != null) { if (result == null) { result = cloneArea(); } result.addChild(cell); result.setCell(cell); } i = ((cells[i].getColSpan()) + i) - 1; } } if (result != null) { result.updateRow(this); updateRow(); return new org.eclipse.birt.report.engine.nLayout.area.impl.SplitResult(result, SplitResult.SPLIT_SUCCEED_WITH_PART); } else { updateRow(); return SplitResult.SUCCEED_WITH_NULL; } }
private static java.lang.String searchForExternalizedValue(org.eclipse.birt.report.model.core.DesignElement element, java.lang.String propIDName, com.ibm.icu.util.ULocale locale) { while (element != null) { org.eclipse.birt.report.model.core.Module root = element.getRoot(); java.lang.String textKey = ((java.lang.String) (element.getLocalProperty(root, propIDName))); if (!(org.eclipse.birt.report.model.api.util.StringUtil.isBlank(textKey))) { java.lang.String externalizedText = root.getMessage(textKey, locale); return externalizedText; } if ((org.eclipse.birt.report.model.core.DesignElement.NO_BASE_ID) != (element.getBaseId())) { element = element.getVirtualParent(); } else { element = element.getExtendsElement(); } } return null; }
public org.eclipse.datatools.connectivity.oda.IParameterMetaData getParameterMetaData() throws org.eclipse.datatools.connectivity.oda.OdaException { assertNotNull(callStat); if ((this.cachedParameterMetaData) != null) return this.cachedParameterMetaData; int[] positionArray = paramUtil.getParameterPositions(); java.util.List paramMetaList1 = this.getCallableParamMetaData(); java.util.List paramMetaList2 = new java.util.ArrayList(); int containsReturnValue = 0; if ((paramMetaList1.size()) > 0) { if ((((org.eclipse.birt.report.data.oda.jdbc.ParameterDefn) (paramMetaList1.get(0))).getParamInOutType()) == 5) { if (paramUtil.containsReturnValue()) paramMetaList2.add(((org.eclipse.birt.report.data.oda.jdbc.ParameterDefn) (paramMetaList1.get(0)))); containsReturnValue++; } } for (int i = 0; i < (positionArray.length); i++) { int index = positionArray[i]; if ((paramMetaList1.size()) >= (index + containsReturnValue)) paramMetaList2.add(paramMetaList1.get(((index - 1) + containsReturnValue))); else throw new org.eclipse.datatools.connectivity.oda.OdaException(org.eclipse.birt.report.data.oda.i18n.ResourceConstants.PREPARESTATEMENT_PARAMETER_METADATA_CANNOT_GET); } cachedParameterMetaData = new org.eclipse.birt.report.data.oda.jdbc.SPParameterMetaData(paramMetaList2); return cachedParameterMetaData; }
private static double getValidDouble(double dValue) { java.lang.String sValue = org.eclipse.birt.chart.computation.withaxes.AutoScale.dfDoulbeNormalized.format(dValue); double dNewValue = java.lang.Double.valueOf(sValue).doubleValue(); return dNewValue; }
private void localizePropertyValues(org.eclipse.birt.report.model.core.DesignElement element, org.eclipse.birt.report.model.core.DesignElement newElement) { localizeUserPropDefn(element, newElement); org.eclipse.birt.report.model.core.Module root = element.getRoot(); if (element instanceof org.eclipse.birt.report.model.extension.IExtendableElement) org.eclipse.birt.report.model.util.ModelUtil.duplicateExtensionIdentifier(element, newElement, root); java.util.Iterator iter = element.getPropertyDefns().iterator(); while (iter.hasNext()) { org.eclipse.birt.report.model.metadata.ElementPropertyDefn propDefn = ((org.eclipse.birt.report.model.metadata.ElementPropertyDefn) (iter.next())); java.lang.String propName = propDefn.getName(); if (((((IDesignElementModel.EXTENDS_PROP.equals(propName)) || (IDesignElementModel.USER_PROPERTIES_PROP.equals(propName))) || (IModuleModel.THEME_PROP.equals(propName))) || (IModuleModel.LIBRARIES_PROP.equals(propName))) || (IModuleModel.PROPERTY_BINDINGS_PROP.equals(propName))) continue; if (((propDefn.isStyleProperty()) && (!(element instanceof org.eclipse.birt.report.model.elements.Style))) || (IStyledElementModel.STYLE_PROP.equals(propName))) continue; java.lang.Object value = element.getStrategy().getPropertyFromElement(root, element, propDefn); if (value == null) continue; switch (propDefn.getTypeCode()) { case org.eclipse.birt.report.model.api.metadata.IPropertyType.ELEMENT_REF_TYPE : if ((newElement instanceof org.eclipse.birt.report.model.elements.olap.Dimension) && (IDimensionModel.DEFAULT_HIERARCHY_PROP.equals(propName))) { handleDefaultHierarchy(((org.eclipse.birt.report.model.elements.olap.Dimension) (newElement)), ((org.eclipse.birt.report.model.elements.olap.Dimension) (element))); break; } handleElementRefValue(newElement, element, propDefn, ((org.eclipse.birt.report.model.metadata.ElementRefValue) (value))); break; case org.eclipse.birt.report.model.api.metadata.IPropertyType.STRUCT_REF_TYPE : handleStructureRefValue(newElement, propDefn, ((org.eclipse.birt.report.model.metadata.StructRefValue) (value))); break; case org.eclipse.birt.report.model.api.metadata.IPropertyType.LIST_TYPE : if ((propDefn.getSubTypeCode()) == (org.eclipse.birt.report.model.api.metadata.IPropertyType.ELEMENT_REF_TYPE)) { handleElementRefValueList(newElement, propDefn, ((java.util.List) (value))); } else if ((newElement.getLocalProperty(null, propDefn)) == null) newElement.setProperty(propDefn, org.eclipse.birt.report.model.util.ModelUtil.copyValue(propDefn, value)); break; case org.eclipse.birt.report.model.api.metadata.IPropertyType.STRUCT_TYPE : if (((newElement instanceof org.eclipse.birt.report.model.elements.olap.Cube) && (ITabularCubeModel.DIMENSION_CONDITIONS_PROP.equals(propDefn.getName()))) && ((element.getRoot()) == (sourceDesign))) handleDimensionConditions(((org.eclipse.birt.report.model.elements.olap.Cube) (newElement)), ((org.eclipse.birt.report.model.elements.olap.Cube) (element))); else handleStructureValue(newElement, propDefn, value); break; case org.eclipse.birt.report.model.api.metadata.IPropertyType.ELEMENT_TYPE : break; case org.eclipse.birt.report.model.api.metadata.IPropertyType.CONTENT_ELEMENT_TYPE : handleContentElementValue(newElement, propDefn, value); break; default : if ((newElement.getLocalProperty(null, propDefn)) == null) { if (propDefn.isEncryptable()) { java.lang.String encryption = element.getEncryptionID(propDefn); newElement.setEncryptionHelper(propDefn, encryption); value = org.eclipse.birt.report.model.util.ModelUtil.encryptProperty(newElement, propDefn, encryption, value); newElement.setProperty(propDefn, value); } else newElement.setProperty(propDefn, value); } } } }
protected void __handleTextBox() throws java.lang.Exception { javax.servlet.jsp.JspWriter writer = pageContext.getOut(); java.lang.String encParamId = org.eclipse.birt.report.utility.ParameterAccessor.htmlEncode(param.getId()); java.lang.String encParamName = org.eclipse.birt.report.utility.ParameterAccessor.htmlEncode(param.getName()); boolean isNullValue = (param.getValue()) == null; java.lang.String displayTextId = encParamId + "_displayText"; java.lang.String displayTextName = (org.eclipse.birt.report.utility.ParameterAccessor.PREFIX_DISPLAY_TEXT) + encParamName; writer.write("<input type=\"hidden\" "); writer.write(((" id=\"" + displayTextId) + "\" ")); if ((paramDef.isRequired()) || (!isNullValue)) { writer.write(((" name=\"" + displayTextName) + "\" ")); writer.write(((" value=\"" + (org.eclipse.birt.report.utility.ParameterAccessor.htmlEncode(this.displayTextString))) + "\" ")); } writer.write(" >\n"); java.lang.String valueId = encParamId + "_value"; writer.write("<input type=\"hidden\" "); writer.write(((" id=\"" + valueId) + "\" ")); writer.write(((" name=\"" + encParamName) + "\" ")); writer.write(((" value=\"" + (org.eclipse.birt.report.utility.ParameterAccessor.htmlEncode(this.valueString))) + "\" ")); writer.write(" >\n"); java.lang.String isLocaleId = encParamId + "_islocale"; writer.write((((("<input type=\"hidden\" id=\"" + isLocaleId) + "\" value=\"") + encParamName) + "\" >\n")); if ((param.getPattern()) != null) { writer.write((("<input type = \'hidden\' name=\"" + encParamName) + "_format\" \n")); writer.write(((" value=\"" + (org.eclipse.birt.report.utility.ParameterAccessor.htmlEncode(param.getPattern()))) + "\">\n")); } writer.write("\n<script language=\"JavaScript\">\n"); writer.write((("function handleParam" + encParamId) + "( )\n")); writer.write("{\n"); writer.write((("var inputCtl = document.getElementById(\"" + encParamId) + "\");\n")); writer.write((("var valCtl = document.getElementById(\"" + valueId) + "\");\n")); writer.write((("var displayCtl = document.getElementById(\"" + displayTextId) + "\");\n")); writer.write((("var localeCtl = document.getElementById(\"" + isLocaleId) + "\");\n")); writer.write("displayCtl.value=inputCtl.value;\n"); writer.write("valCtl.value=inputCtl.value;\n"); writer.write((("localeCtl.name='" + (org.eclipse.birt.report.utility.ParameterAccessor.PARAM_ISLOCALE)) + "\';\n")); writer.write("}\n"); writer.write("</script>\n"); java.lang.String controlType = (paramDef.concealValue()) ? "PASSWORD" : "TEXT"; if (paramDef.isRequired()) { writer.write((("<input type=\"" + controlType) + "\" ")); writer.write(((" id=\"" + encParamId) + "\" ")); __handleGeneralDefinition(); writer.write(((" value=\"" + (org.eclipse.birt.report.utility.ParameterAccessor.htmlEncode(this.displayTextString))) + "\" ")); writer.write(((" onchange=\"handleParam" + encParamId) + "( )\"")); writer.write(" >\n"); } else { java.lang.String nullValueId = encParamId + "_null"; java.lang.String radioTextValueId = encParamId + "_radio_input"; java.lang.String radioNullValueId = encParamId + "_radio_null"; writer.write("\n<script language=\"JavaScript\">\n"); writer.write((("function switchParam" + encParamId) + "( flag )\n")); writer.write("{\n"); writer.write((("var inputCtl = document.getElementById(\"" + encParamId) + "\");\n")); writer.write((("var displayCtl = document.getElementById(\"" + displayTextId) + "\");\n")); writer.write((("var nullCtl = document.getElementById(\"" + nullValueId) + "\");\n")); writer.write((("var radioTextCtl = document.getElementById(\"" + radioTextValueId) + "\");\n")); writer.write((("var radioNullCtl = document.getElementById(\"" + radioNullValueId) + "\");\n")); writer.write("if( flag ) \n"); writer.write("{\n"); writer.write("\tradioTextCtl.checked=true;\n"); writer.write("\tradioNullCtl.checked=false;\n"); writer.write("\tinputCtl.disabled=false;\n"); writer.write("\tnullCtl.name=\'\';\n"); writer.write(((" displayCtl.name='" + displayTextName) + "\';\n")); writer.write("}\n"); writer.write("else\n"); writer.write("{\n"); writer.write("\tradioTextCtl.checked=false;\n"); writer.write("\tradioNullCtl.checked=true;\n"); writer.write("\tinputCtl.disabled=true;\n"); writer.write(((" nullCtl.name='" + (org.eclipse.birt.report.utility.ParameterAccessor.PARAM_ISNULL)) + "\';\n")); writer.write("\tdisplayCtl.name=\'\';\n"); writer.write("}\n"); writer.write("}\n"); writer.write("</script>\n"); writer.write((((("<input type=\"hidden\" value=\"" + encParamName) + "\" id=\"") + nullValueId) + "\"")); if (isNullValue) writer.write(((" name=\"" + (org.eclipse.birt.report.utility.ParameterAccessor.PARAM_ISNULL)) + "\"")); writer.write(" >\n"); writer.write((("<input type=\"radio\" id=\"" + radioTextValueId) + "\" ")); writer.write(((" onclick=\"switchParam" + encParamId) + "( true )\"")); if (!isNullValue) writer.write(" checked "); writer.write(" >\n"); writer.write((("<input type=\"" + controlType) + "\" ")); writer.write(((" id=\"" + encParamId) + "\" ")); __handleGeneralDefinition(); writer.write(((" value=\"" + (org.eclipse.birt.report.utility.ParameterAccessor.htmlEncode(this.displayTextString))) + "\" ")); writer.write(((" onchange=\"handleParam" + encParamId) + "( )\"")); if (isNullValue) writer.write(" disabled = 'true' "); writer.write(" >\n"); writer.write((("<input type=\"radio\" id=\"" + radioNullValueId) + "\" ")); writer.write(((" onclick=\"switchParam" + encParamId) + "( false )\"")); if (isNullValue) writer.write(" checked "); writer.write(" >"); writer.write((("<label id=\"" + (radioNullValueId + "_label")) + "\"")); writer.write(((" title=\"" + (ITagConstants.NULL_VALUE)) + "\"")); writer.write(((" for=\"" + radioNullValueId) + "\">")); writer.write(ITagConstants.NULL_VALUE); writer.write("</label>"); writer.write("</input>\n"); } }
public CategoryPageGenerator() { if ((factory) == null) { factory = ((org.eclipse.birt.report.designer.ui.views.attributes.providers.ICategoryProviderFactory) (org.eclipse.birt.report.designer.ui.views.ElementAdapterManager.getAdapter(this, org.eclipse.birt.report.designer.ui.views.attributes.providers.ICategoryProviderFactory.class))); if ((factory) == null) { factory = org.eclipse.birt.report.designer.ui.views.attributes.providers.CategoryProviderFactory.getInstance(); } } }
public void addEntry(java.lang.String sText, int iColumn) throws java.lang.IllegalArgumentException { if (iColumn > (cells.length)) { throw new java.lang.IllegalArgumentException(org.eclipse.birt.chart.ui.i18n.Messages.getString("CustomPreviewTable.Exception.InvalidColumnIndexSpecifiedOnly", new java.lang.Object[]{ java.lang.String.valueOf(iColumn), java.lang.String.valueOf(cells.length) })); } if ((sText != null) && ((sText.indexOf('\n')) > (-1))) { sText = sText.replaceAll("\n", " "); } cells[iColumn].add(sText); if ((cells[iColumn].size()) > (iMaxRowIndex)) { iMaxRowIndex = cells[iColumn].size(); updateScrollbars(); } }
protected java.lang.String buildBookmarkAction(org.eclipse.birt.report.engine.api.IAction action, java.lang.Object context) { if ((action == null) || (context == null)) return null; java.lang.String baseURL = null; if (context instanceof org.eclipse.birt.report.engine.api.HTMLRenderContext) { baseURL = ((org.eclipse.birt.report.engine.api.HTMLRenderContext) (context)).getBaseURL(); } if (context instanceof org.eclipse.birt.report.engine.api.PDFRenderContext) { baseURL = ((org.eclipse.birt.report.engine.api.PDFRenderContext) (context)).getBaseURL(); } java.lang.String bookmark = action.getBookmark(); if ((baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_FRAMESET)) > 0) { return ("javascript:catchBookmark('" + bookmark) + "')"; } java.lang.StringBuffer link = new java.lang.StringBuffer(); boolean realBookmark = false; if ((this.document) != null) { long pageNumber = this.document.getPageNumber(action.getBookmark()); realBookmark = (pageNumber == (this.page)) && (!(isEmbeddable)); } try { bookmark = java.net.URLEncoder.encode(bookmark, ParameterAccessor.UTF_8_ENCODE); } catch (java.io.UnsupportedEncodingException e) { } link.append(baseURL); link.append(ParameterAccessor.QUERY_CHAR); if ((document) != null) { link.append(ParameterAccessor.PARAM_REPORT_DOCUMENT); link.append(ParameterAccessor.EQUALS_OPERATOR); java.lang.String documentName = document.getName(); try { documentName = java.net.URLEncoder.encode(documentName, ParameterAccessor.UTF_8_ENCODE); } catch (java.io.UnsupportedEncodingException e) { } link.append(documentName); } else if (((action.getReportName()) != null) && ((action.getReportName().length()) > 0)) { link.append(ParameterAccessor.PARAM_REPORT); link.append(ParameterAccessor.EQUALS_OPERATOR); java.lang.String reportName = action.getReportName(); try { reportName = java.net.URLEncoder.encode(reportName, ParameterAccessor.UTF_8_ENCODE); } catch (java.io.UnsupportedEncodingException e) { } link.append(reportName); } else { return "#" + (action.getActionString()); } if ((locale) != null) { link.append(org.eclipse.birt.report.utility.ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE, locale.toString())); } if (isRtl) { link.append(org.eclipse.birt.report.utility.ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL, java.lang.String.valueOf(isRtl))); } link.append(org.eclipse.birt.report.utility.ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE, java.lang.String.valueOf(this.isMasterPageContent))); if (realBookmark) { link.append("#"); link.append(bookmark); } else { link.append(org.eclipse.birt.report.utility.ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_BOOKMARK, bookmark)); } return link.toString(); }
public void updateQuery(java.lang.String expression) { if (!(isTableSharedBinding())) { setQueryExpression(expression); return; } updateQueryForSharedBinding(expression); java.lang.String regex = "\\Qrow[\"\\E.*\\Q\"]\\E"; if (expression.matches(regex)) { org.eclipse.birt.chart.ui.swt.DataDefinitionTextManager.getInstance().updateControlBackground(getInputControl(), expression); final org.eclipse.swt.widgets.Event e = new org.eclipse.swt.widgets.Event(); e.data = this; e.widget = getInputControl(); e.type = org.eclipse.birt.chart.ui.swt.interfaces.IChartDataSheet.EVENT_QUERY; e.detail = org.eclipse.birt.chart.ui.swt.interfaces.IChartDataSheet.DETAIL_UPDATE_COLOR; org.eclipse.swt.widgets.Display.getCurrent().asyncExec(new java.lang.Runnable() { public void run() { context.getDataSheet().notifyListeners(e); } }); } else { getInputControl().setBackground(null); } }
private org.eclipse.swt.graphics.Image getImage() { org.eclipse.birt.report.designer.internal.ui.editors.schematic.editparts.TableEditPart part = ((org.eclipse.birt.report.designer.internal.ui.editors.schematic.editparts.TableEditPart) (getOwner())); if ((part.getRow(getRowNumber())) == null) { return null; } java.lang.String type = org.eclipse.birt.report.designer.core.model.schematic.HandleAdapterFactory.getInstance().getRowHandleAdapter(part.getRow(getRowNumber())).getType(); if (TableHandleAdapter.TABLE_HEADER.equals(type)) { type = org.eclipse.birt.report.designer.ui.IReportGraphicConstants.ICON_NODE_HEADER; } else if (TableHandleAdapter.TABLE_DETAIL.equals(type)) { type = org.eclipse.birt.report.designer.ui.IReportGraphicConstants.ICON_NODE_DETAILS; } else if (TableHandleAdapter.TABLE_FOOTER.equals(type)) { type = org.eclipse.birt.report.designer.ui.IReportGraphicConstants.ICON_NODE_FOOTER; } else if (TableHandleAdapter.TABLE_GROUP_HEADER.equals(type)) { type = org.eclipse.birt.report.designer.ui.IReportGraphicConstants.ICON_NODE_GROUP_HEADER; } else if (TableHandleAdapter.TABLE_GROUP_FOOTER.equals(type)) { type = org.eclipse.birt.report.designer.ui.IReportGraphicConstants.ICON_NODE_GROUP_FOOTER; } else { return null; } return org.eclipse.birt.report.designer.ui.ReportPlatformUIImages.getImage(type); }
public java.lang.String format(java.util.Date date) { try { if (((formatPattern) == null) || ((formatPattern.length()) == 0)) { if (date instanceof java.sql.Date) { dateFormat = org.eclipse.birt.core.format.com.ibm.icu.text.DateFormat.getDateInstance(org.eclipse.birt.core.format.com.ibm.icu.text.DateFormat, locale); return dateFormat.format(date); } else if (date instanceof java.sql.Time) { dateFormat = org.eclipse.birt.core.format.com.ibm.icu.text.DateFormat.getTimeInstance(org.eclipse.birt.core.format.com.ibm.icu.text.DateFormat, locale); return dateFormat.format(date); } } return dateFormat.format(date); } catch (java.lang.Exception e) { org.eclipse.birt.core.format.DateFormatter.logger.log(java.util.logging.Level.WARNING, e.getMessage(), e); return null; } }
protected org.w3c.dom.Document createSvgDocument() throws java.lang.Exception { javax.xml.parsers.DocumentBuilderFactory factory = javax.xml.parsers.DocumentBuilderFactory.newInstance(); javax.xml.parsers.DocumentBuilder builder; builder = factory.newDocumentBuilder(); org.w3c.dom.DOMImplementation domImpl = builder.getDOMImplementation(); org.w3c.dom.DocumentType dType = domImpl.createDocumentType("svg", org.eclipse.birt.chart.device.svg.SVGRendererImpl.SVG_VERSION, org.eclipse.birt.chart.device.svg.SVGRendererImpl.SVG_DTD); org.w3c.dom.Document svgDocument = domImpl.createDocument(null, "svg", dType); svgDocument.getDocumentElement().setAttribute("xmlns", org.eclipse.birt.chart.device.svg.SVGRendererImpl.XMLNS); svgDocument.getDocumentElement().setAttribute("xmlns:xlink", org.eclipse.birt.chart.device.svg.SVGRendererImpl.XMLNSXINK); return svgDocument; }
@java.lang.Override public void run() { org.eclipse.swt.dnd.FileTransfer fileTransfer = org.eclipse.swt.dnd.FileTransfer.getInstance(); java.lang.String[] fileData = ((java.lang.String[]) (clipboard.getContents(fileTransfer))); if ((fileData != null) && ((fileData.length) > 0)) { java.io.File container; try { container = getSelectedContainer(); } catch (java.io.IOException e) { org.eclipse.birt.report.designer.internal.ui.util.ExceptionHandler.handle(e); return; } if (container == null) { return; } for (java.lang.String filename : fileData) { final java.io.File srcFile = new java.io.File(filename); final java.io.File targetFile = new java.io.File(container, srcFile.getName()); if (targetFile.exists()) { if (!(org.eclipse.jface.dialogs.MessageDialog.openQuestion(getShell(), org.eclipse.birt.report.designer.nls.Messages.getString("PasteResourceAction.Dialog.Title"), org.eclipse.birt.report.designer.nls.Messages.getString("PasteResourceAction.Dialog.Message")))) { return; } } doCopy(srcFile, targetFile); } } }
private void prepareLevels(org.eclipse.birt.data.engine.api.querydefn.QueryDefinition query, java.util.List resultMetaList, java.util.Map levelNameColumnNamePair, org.eclipse.birt.report.model.api.olap.TabularHierarchyHandle hierHandle) { java.util.List levels = hierHandle.getContents(TabularHierarchyHandle.LEVELS_PROP); for (int j = 0; j < (levels.size()); j++) { org.eclipse.birt.report.model.api.olap.TabularLevelHandle level = ((org.eclipse.birt.report.model.api.olap.TabularLevelHandle) (levels.get(j))); org.eclipse.birt.report.data.adapter.impl.DataSetIterator.ColumnMeta temp = new org.eclipse.birt.report.data.adapter.impl.DataSetIterator.ColumnMeta(level.getName()); resultMetaList.add(temp); levelNameColumnNamePair.put(level.getColumnName(), temp); java.util.Iterator it = level.attributesIterator(); while (it.hasNext()) { org.eclipse.birt.report.model.api.LevelAttributeHandle levelAttr = ((org.eclipse.birt.report.model.api.LevelAttributeHandle) (it.next())); org.eclipse.birt.report.data.adapter.impl.DataSetIterator.ColumnMeta meta = new org.eclipse.birt.report.data.adapter.impl.DataSetIterator.ColumnMeta((((level.getName()) + "/") + (levelAttr.getName()))); meta.setDataType(org.eclipse.birt.report.data.adapter.impl.ModelAdapter.adaptModelDataType(levelAttr.getDataType())); query.addResultSetExpression(meta.getName(), new org.eclipse.birt.data.engine.api.querydefn.ScriptExpression(org.eclipse.birt.core.data.ExpressionUtil.createJSDataSetRowExpression(levelAttr.getName()))); resultMetaList.add(meta); } query.addResultSetExpression(level.getName(), new org.eclipse.birt.data.engine.api.querydefn.ScriptExpression(org.eclipse.birt.core.data.ExpressionUtil.createJSDataSetRowExpression(level.getColumnName()))); if (j == ((levels.size()) - 1)) { org.eclipse.birt.data.engine.api.querydefn.GroupDefinition gd = new org.eclipse.birt.data.engine.api.querydefn.GroupDefinition(); gd.setKeyExpression(org.eclipse.birt.core.data.ExpressionUtil.createJSRowExpression(level.getName())); query.addGroup(gd); } } }
public org.eclipse.birt.data.engine.olap.api.query.IBaseCubeQueryDefinition createCubeQuery(org.eclipse.birt.data.engine.api.IDataQueryDefinition parent) throws org.eclipse.birt.core.exception.BirtException { bSingleChart = parent == null; org.eclipse.birt.report.model.api.olap.CubeHandle cubeHandle = handle.getCube(); org.eclipse.birt.data.engine.olap.api.query.ICubeQueryDefinition cubeQuery = null; if (cubeHandle == null) { cubeHandle = org.eclipse.birt.chart.reportitem.ChartXTabUtil.getBindingCube(handle); if (cubeHandle == null) { throw new org.eclipse.birt.chart.exception.ChartException(org.eclipse.birt.chart.reportitem.plugin.ChartReportItemPlugin.ID, org.eclipse.birt.chart.exception.ChartException.NULL_DATASET, org.eclipse.birt.chart.reportitem.i18n.Messages.getString("ChartCubeQueryHelper.Error.MustBindCube")); } if (!(bSingleChart)) { org.eclipse.birt.data.engine.olap.api.query.ISubCubeQueryDefinition subQuery = createSubCubeQuery(); if (subQuery != null) { if ((parent instanceof org.eclipse.birt.data.engine.olap.api.query.ICubeQueryDefinition) && (org.eclipse.birt.chart.reportitem.ChartXTabUtil.isPlotChart(handle))) { addMinMaxBinding(((org.eclipse.birt.data.engine.olap.api.query.ICubeQueryDefinition) (parent))); } return subQuery; } } } cubeQuery = org.eclipse.birt.chart.reportitem.ChartXTabUtil.getCubeElementFactory().createCubeQuery(cubeHandle.getQualifiedName()); initBindings(cubeQuery, cubeHandle); java.util.List<org.eclipse.birt.chart.model.data.SeriesDefinition> sdList = org.eclipse.birt.chart.reportitem.ChartCubeQueryHelper.getAllSeriesDefinitions(cm); for (int i = 0; i < (sdList.size()); i++) { org.eclipse.birt.chart.model.data.SeriesDefinition sd = sdList.get(i); java.util.List<org.eclipse.birt.chart.model.data.Query> queryList = sd.getDesignTimeSeries().getDataDefinition(); for (int j = 0; j < (queryList.size()); j++) { org.eclipse.birt.chart.model.data.Query query = queryList.get(j); bindSeriesQuery(query.getDefinition(), cubeQuery, cubeHandle); } bindSeriesQuery(sd.getQuery().getDefinition(), cubeQuery, cubeHandle); } java.util.Collection<org.eclipse.birt.data.engine.olap.api.query.ILevelDefinition> levelsInOrder = getAllLevelsInHierarchyOrder(cubeHandle, cubeQuery); for (java.util.Iterator<java.lang.String> measureNames = registeredMeasures.keySet().iterator(); measureNames.hasNext();) { org.eclipse.birt.data.engine.api.IBinding binding = registeredBindings.get(measureNames.next()); if ((binding != null) && (binding.getAggregatOns().isEmpty())) { for (java.util.Iterator<org.eclipse.birt.data.engine.olap.api.query.ILevelDefinition> levels = levelsInOrder.iterator(); levels.hasNext();) { org.eclipse.birt.data.engine.olap.api.query.ILevelDefinition level = levels.next(); java.lang.String dimensionName = level.getHierarchy().getDimension().getName(); binding.addAggregateOn(org.eclipse.birt.core.data.ExpressionUtil.createJSDimensionExpression(dimensionName, level.getName())); } } } for (int i = 0; i < (sdList.size()); i++) { org.eclipse.birt.chart.model.data.SeriesDefinition sd = sdList.get(i); addSorting(cubeQuery, cubeHandle, sd, i); } addCubeFilter(cubeQuery); return cubeQuery; }
public org.eclipse.birt.core.format.DateFormatter getDateFormatter(java.lang.String value) { org.eclipse.birt.core.format.DateFormatter fmt = null; if (value != null) { fmt = ((org.eclipse.birt.core.format.DateFormatter) (dateFormatters.get(value))); if (fmt == null) { fmt = new org.eclipse.birt.core.format.DateFormatter(value, com.ibm.icu.util.ULocale.forLocale(locale)); dateFormatters.put(value, fmt); } return fmt; } return new org.eclipse.birt.core.format.DateFormatter(value, com.ibm.icu.util.ULocale.forLocale(locale)); }
protected org.eclipse.birt.report.engine.css.engine.value.Value resolveProperty(int index) { org.eclipse.birt.report.engine.css.engine.CSSStylableElement parent = ((org.eclipse.birt.report.engine.css.engine.CSSStylableElement) (cell.getParent())); org.eclipse.birt.report.engine.content.IStyle pcs = null; if (parent != null) { pcs = parent.getComputedStyle(); } org.eclipse.birt.report.engine.content.IStyle s = cell.getStyle(); org.eclipse.birt.report.engine.css.engine.value.Value sv = (s == null) ? null : ((org.eclipse.birt.report.engine.css.engine.value.Value) (s.getProperty(index))); if ((sv == null) && ((columnStyle) != null)) { if ((engine.isInheritedProperty(index)) == false) { if (isBackgroundProperties(index)) { org.eclipse.birt.report.engine.css.engine.value.Value rowValue = null; if ((rowStyle) != null) { rowValue = ((org.eclipse.birt.report.engine.css.engine.value.Value) (rowStyle.getProperty(index))); } if (rowValue == null) { sv = ((org.eclipse.birt.report.engine.css.engine.value.Value) (columnStyle.getProperty(index))); } } else if (index == (STYLE_VERTICAL_ALIGN)) { if ((rowStyle) != null) { sv = ((org.eclipse.birt.report.engine.css.engine.value.Value) (rowStyle.getProperty(index))); } if (sv == null) { sv = ((org.eclipse.birt.report.engine.css.engine.value.Value) (columnStyle.getProperty(index))); } } else { sv = ((org.eclipse.birt.report.engine.css.engine.value.Value) (columnStyle.getProperty(index))); } } else { sv = ((org.eclipse.birt.report.engine.css.engine.value.Value) (rowStyle.getProperty(index))); if (sv == null) { sv = ((org.eclipse.birt.report.engine.css.engine.value.Value) (columnStyle.getProperty(index))); } } } org.eclipse.birt.report.engine.css.engine.value.Value cv = engine.resolveStyle(elt, index, sv, pcs); return cv; }
private java.lang.String[] getModifiedStyles() { java.lang.String[] styleNamesArray = getAllStyles(); java.util.List<java.lang.String> sytleNames = new java.util.ArrayList<java.lang.String>(); sytleNames.addAll(java.util.Arrays.asList(styleNamesArray)); org.eclipse.birt.report.model.api.ModuleHandle module = org.eclipse.birt.report.designer.core.model.SessionHandleAdapter.getInstance().getReportDesignHandle(); java.util.List<org.eclipse.birt.report.model.api.css.CssStyleSheetHandle> cssList = new java.util.ArrayList<org.eclipse.birt.report.model.api.css.CssStyleSheetHandle>(); if (module instanceof org.eclipse.birt.report.model.api.ReportDesignHandle) { org.eclipse.birt.report.model.api.ReportDesignHandle reportDesign = ((org.eclipse.birt.report.model.api.ReportDesignHandle) (module)); cssList.addAll(reportDesign.getAllCssStyleSheets()); for (int i = 0; i < (cssList.size()); i++) { org.eclipse.birt.report.model.api.css.CssStyleSheetHandle css = cssList.get(i); org.eclipse.birt.report.model.api.IncludedCssStyleSheetHandle inCss = reportDesign.findIncludedCssStyleSheetHandleByFileName(css.getFileName()); if (((inCss != null) && ((inCss.getExternalCssURI()) != null)) && ((inCss.getExternalCssURI().length()) > 0)) { java.lang.String fileName = inCss.getExternalCssURI(); org.eclipse.birt.report.model.api.css.CssStyleSheetHandle uriCss = null; try { uriCss = org.eclipse.birt.report.designer.core.model.SessionHandleAdapter.getInstance().getReportDesignHandle().openCssStyleSheet(fileName); if (uriCss == null) { continue; } } catch (org.eclipse.birt.report.model.api.css.StyleSheetException e) { e.printStackTrace(); continue; } for (java.util.Iterator iter = css.getStyleIterator(); iter.hasNext();) { org.eclipse.birt.report.model.api.SharedStyleHandle styleHandle = ((org.eclipse.birt.report.model.api.SharedStyleHandle) (iter.next())); int index = sytleNames.indexOf(styleHandle.getName()); if ((index >= 0) && ((uriCss.findStyle(styleHandle.getName())) != null)) { styleNamesArray[index] = ((styleHandle.getName()) + " ") + (org.eclipse.birt.report.designer.nls.Messages.getString("CssStyleSheetNodeProvider.Tooltip.URI")); } } } } } else if (module instanceof org.eclipse.birt.report.model.api.LibraryHandle) { org.eclipse.birt.report.model.api.LibraryHandle libary = ((org.eclipse.birt.report.model.api.LibraryHandle) (module)); org.eclipse.birt.report.model.api.ThemeHandle theme = libary.getTheme(); if (theme != null) { cssList.addAll(theme.getAllCssStyleSheets()); for (int i = 0; i < (cssList.size()); i++) { org.eclipse.birt.report.model.api.css.CssStyleSheetHandle css = cssList.get(i); org.eclipse.birt.report.model.api.IncludedCssStyleSheetHandle inCss = theme.findIncludedCssStyleSheetHandleByName(css.getFileName()); if (((inCss != null) && ((inCss.getExternalCssURI()) != null)) && ((inCss.getExternalCssURI().length()) > 0)) { for (java.util.Iterator iter = css.getStyleIterator(); iter.hasNext();) { org.eclipse.birt.report.model.api.SharedStyleHandle styleHandle = ((org.eclipse.birt.report.model.api.SharedStyleHandle) (iter.next())); int index = sytleNames.indexOf(styleHandle.getName()); java.lang.String tooltipURI = org.eclipse.birt.report.designer.nls.Messages.getString("CssStyleSheetNodeProvider.Tooltip.URI"); if (index >= 0) { styleNamesArray[index] = ((styleHandle.getName()) + " ") + tooltipURI; } } } } } } return styleNamesArray; }
private void doEdit(java.lang.Object structureOrHandle) { org.eclipse.birt.report.designer.ui.dialogs.FilterConditionBuilder dlg = new org.eclipse.birt.report.designer.ui.dialogs.FilterConditionBuilder(((org.eclipse.birt.report.designer.data.ui.dataset.DataSetEditor) (getContainer())).getShell(), this.getTitle(structureOrHandle), this.getTitle(structureOrHandle)); dlg.setDataSetHandle(((org.eclipse.birt.report.model.api.DataSetHandle) (getContainer().getModel()))); dlg.setBindingParams(getParamBindingHandleArray()); dlg.setInput(structureOrHandle); if ((dlg.open()) == (org.eclipse.jface.window.Window.OK)) { update(structureOrHandle); } }
protected void doService(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.io.IOException, javax.servlet.ServletException { javax.servlet.ServletOutputStream out = response.getOutputStream(); org.eclipse.birt.report.soapengine.api.GetUpdatedObjectsResponse upResponse = new org.eclipse.birt.report.soapengine.api.GetUpdatedObjectsResponse(); org.eclipse.birt.report.context.IContext context = new org.eclipse.birt.report.context.BirtContext(request, response); org.eclipse.birt.report.soapengine.api.Operation op = null; try { if (IBirtConstants.SERVLET_PATH_DOWNLOAD.equalsIgnoreCase(request.getServletPath())) { org.eclipse.birt.report.service.actionhandler.BirtExtractDataActionHandler extractDataHandler = new org.eclipse.birt.report.service.actionhandler.BirtExtractDataActionHandler(context, op, upResponse); extractDataHandler.execute(); } else if (org.eclipse.birt.report.utility.ParameterAccessor.isGetImageOperator(request)) { org.eclipse.birt.report.service.actionhandler.BirtRenderImageActionHandler renderImageHandler = new org.eclipse.birt.report.service.actionhandler.BirtRenderImageActionHandler(context, op, upResponse); renderImageHandler.execute(); } else if (org.eclipse.birt.report.utility.ParameterAccessor.isGetReportlet(request)) { org.eclipse.birt.report.service.actionhandler.BirtGetReportletActionHandler getReportletHandler = new org.eclipse.birt.report.service.actionhandler.BirtGetReportletActionHandler(context, op, upResponse); getReportletHandler.execute(); } else if (context.getBean().documentInUrl) { org.eclipse.birt.report.service.actionhandler.BirtRenderReportActionHandler runReportHandler = new org.eclipse.birt.report.service.actionhandler.BirtRenderReportActionHandler(context, op, upResponse, out); runReportHandler.execute(); } else { org.eclipse.birt.report.service.actionhandler.BirtRunAndRenderActionHandler runAndRenderHandler = new org.eclipse.birt.report.service.actionhandler.BirtRunAndRenderActionHandler(context, op, upResponse); runAndRenderHandler.execute(); } } catch (java.rmi.RemoteException e) { if (!(org.eclipse.birt.report.utility.ParameterAccessor.isGetImageOperator(request))) { org.apache.axis.AxisFault fault = ((org.apache.axis.AxisFault) (e)); response.setContentType("text/html; charset=utf-8"); java.lang.String message = ((("<html><head><title>" + (org.eclipse.birt.report.resource.BirtResources.getMessage("birt.viewer.title.error"))) + "</title><body><font color=\"red\">") + (org.eclipse.birt.report.utility.ParameterAccessor.htmlEncode(fault.getFaultString()))) + "</font></body></html>"; out.write(message.getBytes()); out.flush(); out.close(); } } }
private org.eclipse.draw2d.geometry.Rectangle getConstraint() { org.eclipse.draw2d.IFigure parent = ((org.eclipse.birt.report.designer.internal.ui.editors.schematic.editparts.MasterPageEditPart) (getParent())).getFigure(); org.eclipse.draw2d.geometry.Rectangle region = parent.getClientArea(); org.eclipse.draw2d.geometry.Rectangle rect = new org.eclipse.draw2d.geometry.Rectangle(); rect.height = -1; rect.width = region.width; org.eclipse.birt.report.model.api.SimpleMasterPageHandle mphandle = ((org.eclipse.birt.report.model.api.SimpleMasterPageHandle) (((org.eclipse.birt.report.designer.internal.ui.editors.schematic.editparts.MasterPageEditPart) (getParent())).getModel())); if ((((org.eclipse.birt.report.model.api.SlotHandle) (getModel())).getSlotID()) == (org.eclipse.birt.report.model.api.SimpleMasterPageHandle.PAGE_HEADER_SLOT)) { if (mphandle.getPropertyHandle(SimpleMasterPageHandle.HEADER_HEIGHT_PROP).isSet()) { org.eclipse.birt.report.model.api.DimensionHandle handle = mphandle.getHeaderHeight(); rect.height = getHeight(handle); } } else { if (mphandle.getPropertyHandle(SimpleMasterPageHandle.FOOTER_HEIGHT_PROP).isSet()) { org.eclipse.birt.report.model.api.DimensionHandle handle = mphandle.getFooterHeight(); rect.height = getHeight(handle); } } if ((((org.eclipse.birt.report.model.api.SlotHandle) (getModel())).getSlotID()) == (org.eclipse.birt.report.model.api.SimpleMasterPageHandle.PAGE_HEADER_SLOT)) { rect.setLocation(0, 0); } else { rect.setLocation((-1), (-1)); } return rect; }
public void setEmitterConfiguration(java.lang.String format, java.lang.Object emitterConfig) { if (emitterConfig instanceof java.util.HashMap) { getEmitterConfigs().put(format, new org.eclipse.birt.report.engine.api.RenderOption(((java.util.HashMap) (emitterConfig)))); } else if (emitterConfig instanceof org.eclipse.birt.report.engine.api.IRenderOption) { getEmitterConfigs().put(format, emitterConfig); } else { throw new java.lang.IllegalArgumentException("the agr1 must be an instance of HashMap or IRenderOption"); } }
private void buildURIEditor(int type) { org.eclipse.swt.widgets.Label uriEditorLabel = new org.eclipse.swt.widgets.Label(inputArea, org.eclipse.swt.SWT.NONE); org.eclipse.swt.layout.GridData labelGd = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_HORIZONTAL); labelGd.horizontalSpan = 2; uriEditorLabel.setLayoutData(labelGd); uriEditorLabel.setText(((java.lang.String) (org.eclipse.birt.report.designer.ui.dialogs.ImageBuilder.uriEditorLabelMap.get(new java.lang.Integer(type))))); uriEditor = new org.eclipse.swt.widgets.Text(inputArea, (((org.eclipse.swt.SWT.SINGLE) | (org.eclipse.swt.SWT.BORDER)) | (org.eclipse.swt.SWT.READ_ONLY))); org.eclipse.swt.layout.GridData textGd = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.HORIZONTAL_ALIGN_BEGINNING); textGd.widthHint = 308; if (type == (org.eclipse.birt.report.designer.ui.dialogs.ImageBuilder.BLOB_TYPE)) { textGd.widthHint = 270; textGd.grabExcessHorizontalSpace = true; } uriEditor.setLayoutData(textGd); uriEditor.addModifyListener(new org.eclipse.swt.events.ModifyListener() { public void modifyText(org.eclipse.swt.events.ModifyEvent e) { updateButtons(); } }); initURIEditor(); }
public boolean onBroughtToTop(org.eclipse.birt.report.designer.ui.editors.IReportEditorPage prePage) { if ((getEditorInput()) != (prePage.getEditorInput())) { setInput(prePage.getEditorInput()); } if ((getStaleType()) == (org.eclipse.birt.report.designer.ui.editors.IPageStaleType.MODEL_RELOAD)) { reloadEditorInput(); doSave(null); } else if ((prePage != (this)) && ((prePage.isDirty()) || ((prePage.getStaleType()) != (org.eclipse.birt.report.designer.ui.editors.IPageStaleType.NONE)))) { org.eclipse.birt.report.model.api.ModuleHandle model = getProvider().getReportModuleHandle(getEditorInput(), false); if ((org.eclipse.birt.report.model.api.ModuleUtil.compareReportVersion(org.eclipse.birt.report.model.api.ModuleUtil.getReportVersion(), model.getVersion())) > 0) { if (!(org.eclipse.jface.dialogs.MessageDialog.openConfirm(org.eclipse.birt.report.designer.internal.ui.util.UIUtil.getDefaultShell(), org.eclipse.birt.report.designer.nls.Messages.getString("MultiPageReportEditor.ConfirmVersion.Dialog.Title"), org.eclipse.birt.report.designer.nls.Messages.getString("MultiPageReportEditor.ConfirmVersion.Dialog.Message")))) { return false; } } prePage.doSave(null); org.eclipse.birt.report.designer.internal.ui.util.UIUtil.doFinishSava(getModel()); prePage.markPageStale(IPageStaleType.NONE); refreshDocument(); markPageStale(IPageStaleType.NONE); } hookModelEventManager(getModel()); org.eclipse.birt.report.designer.core.util.mediator.request.ReportRequest request = new org.eclipse.birt.report.designer.core.util.mediator.request.ReportRequest(this); java.util.List list = new java.util.ArrayList(); request.setSelectionObject(list); request.setType(ReportRequest.SELECTION); org.eclipse.birt.report.designer.core.model.SessionHandleAdapter.getInstance().getMediator(getModel()).notifyRequest(request); reportXMLEditor.setFocus(); return true; }
public static int covertDimensionType(org.eclipse.birt.report.engine.ir.DimensionType value, int parent) { if (DimensionType.UNITS_PERCENTAGE.equals(value.getUnits())) { return ((int) (((value.getMeasure()) / 100) * parent)); } if (DimensionType.UNITS_PX.equalsIgnoreCase(value.getUnits())) { return ((int) ((value.getMeasure()) * (org.eclipse.birt.report.engine.emitter.excel.ExcelUtil.PX_PT))); } if ((DimensionType.UNITS_EM.equalsIgnoreCase(value.getUnits())) || (DimensionType.UNITS_EX.equalsIgnoreCase(value.getUnits()))) { return ((int) (value.getMeasure())) * 12; } else { return ((int) (value.convertTo(DimensionType.UNITS_PT))); } }
private org.eclipse.birt.report.engine.emitter.pdf.PDFEmitter.PDFRender.tplValueTriple computeTplVerticalValTriple(float absPos, float containerBaseAbsPos, float containerSize, float ImageSize) { float tplOrigin = 0.0F; float tplSize = 0.0F; float translation = 0.0F; if (absPos <= 0) { if (((ImageSize + absPos) > 0) && ((ImageSize + absPos) <= containerSize)) { tplOrigin = (containerBaseAbsPos - ImageSize) - absPos; tplSize = ImageSize + absPos; } else if ((ImageSize + absPos) > containerSize) { tplOrigin = containerBaseAbsPos - containerSize; tplSize = containerSize; } else { } translation = 0; } else if (absPos >= containerSize) { } else { if ((ImageSize + absPos) <= containerSize) { tplOrigin = (containerBaseAbsPos - ImageSize) - absPos; tplSize = ImageSize; translation = 0.0F; } else { tplOrigin = containerBaseAbsPos - containerSize; tplSize = containerSize - absPos; translation = (containerSize - absPos) - ImageSize; } } return new org.eclipse.birt.report.engine.emitter.pdf.PDFEmitter.PDFRender.tplValueTriple(tplOrigin, tplSize, translation); }
public void execute(org.eclipse.birt.report.engine.ir.ReportItemDesign item, org.eclipse.birt.report.engine.emitter.IContentEmitter emitter) { org.eclipse.birt.core.util.BirtTimer timer = new org.eclipse.birt.core.util.BirtTimer(); timer.start(); org.eclipse.birt.report.engine.ir.TableItemDesign tableDesign = ((org.eclipse.birt.report.engine.ir.TableItemDesign) (item)); tableInfo = new org.eclipse.birt.report.engine.executor.TableItemExecutor.TABLEINFO(tableDesign); org.eclipse.birt.report.engine.executor.TableItemExecutor.logger.log(java.util.logging.Level.FINEST, "start table item"); org.eclipse.birt.report.engine.content.ITableContent tableContent = report.createTableContent(); assert tableContent instanceof org.eclipse.birt.report.engine.content.impl.TableContent; ((org.eclipse.birt.report.engine.content.impl.TableContent) (tableContent)).setHeaderRepeat(tableDesign.getRepeatHeader()); org.eclipse.birt.report.engine.content.IContent parent = context.getContent(); context.pushContent(tableContent); org.eclipse.birt.report.engine.executor.TableItemExecutor.logger.log(java.util.logging.Level.FINEST, "start get table data"); openResultSet(item); org.eclipse.birt.report.engine.executor.TableItemExecutor.logger.log(java.util.logging.Level.FINEST, "end get table data"); initializeContent(parent, item, tableContent); processStyle(item, tableContent); processVisibility(item, tableContent); processBookmark(item, tableContent); processAction(item, tableContent); for (int i = 0; i < (tableDesign.getColumnCount()); i++) { org.eclipse.birt.report.engine.ir.ColumnDesign columnDesign = tableDesign.getColumn(i); org.eclipse.birt.report.engine.content.impl.Column column = new org.eclipse.birt.report.engine.content.impl.Column(); column.setStyleClass(columnDesign.getStyleName()); column.setWidth(columnDesign.getWidth()); tableContent.addColumn(column); } if (context.isInFactory()) { org.eclipse.birt.report.engine.script.internal.TableScriptExecutor.handleOnCreate(((org.eclipse.birt.report.engine.content.impl.TableContent) (tableContent)), context); } startTOCEntry(tableContent); if (emitter != null) { emitter.startTable(tableContent); } accessQuery(tableDesign, emitter); if (emitter != null) { emitter.endTable(tableContent); } finishTOCEntry(); context.popContent(); closeResultSet(); org.eclipse.birt.report.engine.executor.TableItemExecutor.logger.log(java.util.logging.Level.FINEST, "end table item"); timer.stop(); timer.logTimeTaken(org.eclipse.birt.report.engine.executor.TableItemExecutor.logger, java.util.logging.Level.FINEST, context.getTaskIDString(), "Render table"); }
protected java.util.List getElementHandles() { boolean isEditPart = false; java.util.List selList = null; org.eclipse.core.expressions.IEvaluationContext context = ((org.eclipse.core.expressions.IEvaluationContext) (event.getApplicationContext())); java.lang.Object obj = context.getVariable(ICommandParameterNameContants.SELECTION); if (obj != null) { selList = new java.util.ArrayList(); selList.add(obj); } if ((selList == null) || ((selList.size()) < 1)) { selList = getSelectedObjects(); } for (int i = 0; i < (selList.size()); i++) { if ((selList.get(i)) instanceof org.eclipse.birt.report.designer.internal.ui.editors.schematic.editparts.ReportElementEditPart) { isEditPart = true; } } if (isEditPart) { selList = org.eclipse.birt.report.designer.internal.ui.dnd.InsertInLayoutUtil.editPart2Model(org.eclipse.birt.report.designer.internal.ui.editors.schematic.editparts.TableUtil.filletCellInSelectionEditorpart(getSelection())).toList(); } return selList; }
private void checkValidation(org.eclipse.birt.report.model.core.DesignElement style, java.util.Map<java.lang.String, org.eclipse.birt.report.model.core.DesignElement> styleMap) { java.lang.String styleName = style.getName(); if (!(NameCommand.styleNamePattern.matcher(styleName).matches())) { java.lang.String newName = styleName; newName = newName.replaceAll(org.eclipse.birt.report.model.parser.StylesState.STYLE_NAME_FORBIDDEN_PATTERN, org.eclipse.birt.report.model.parser.StylesState.MIDDLE_LINE); java.lang.String firstChar = newName.substring(0, 1); if (!(org.eclipse.birt.report.model.parser.StylesState.styleNameStartPattern.matcher(firstChar).matches())) { if ((newName.length()) <= 1) newName = org.eclipse.birt.report.model.parser.StylesState.REPLACE_LETTER; else newName = (org.eclipse.birt.report.model.parser.StylesState.REPLACE_LETTER) + (newName.substring(1)); } assert NameCommand.styleNamePattern.matcher(newName).matches(); style.setName(newName); java.util.Map<java.lang.String, java.lang.String> nameMap = ((java.util.Map<java.lang.String, java.lang.String>) (handler.tempValue.get(style.getContainer()))); if (nameMap == null) { nameMap = new java.util.HashMap<java.lang.String, java.lang.String>(); handler.tempValue.put(style.getContainer(), nameMap); } nameMap.put(styleName, newName); if (!(styleMap.containsKey(newName.toLowerCase()))) styleMap.put(newName.toLowerCase(), style); if ((styleMap.get(styleName.toLowerCase())) == style) styleMap.remove(styleName.toLowerCase()); } }
public void drawBidiSettingsButton(org.eclipse.swt.widgets.Composite parent, java.util.Properties props) { initBidiFormats(props); org.eclipse.swt.widgets.Composite content = ((org.eclipse.swt.widgets.Composite) (parent.getChildren()[0])); org.eclipse.swt.layout.GridLayout layout = ((org.eclipse.swt.layout.GridLayout) (content.getLayout())); layout.numColumns = 4; bidiButton = new org.eclipse.swt.widgets.Button(content, org.eclipse.swt.SWT.PUSH); bidiButton.setText(org.eclipse.birt.report.data.oda.jdbc.ui.JdbcPlugin.getResourceString("wizard.label.bidiSettings")); bidiButton.setLayoutData(new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.END)); bidiButton.addSelectionListener(new org.eclipse.swt.events.SelectionAdapter() { public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { doSetAdvancedBidiSettings(); } }); }
public static java.lang.String[] getStyles() { java.util.ArrayList list = new java.util.ArrayList(); list.add(org.eclipse.birt.report.designer.ui.views.attributes.providers.ChoiceSetFactory.CHOICE_NONE); java.util.Iterator iterator = org.eclipse.birt.report.designer.util.DEUtil.getStyles(); if (iterator != null) { while (iterator.hasNext()) { org.eclipse.birt.report.model.api.StyleHandle styleHandle = ((org.eclipse.birt.report.model.api.StyleHandle) (iterator.next())); list.add(styleHandle.getName()); } } return ((java.lang.String[]) (list.toArray(new java.lang.String[0]))); }
private java.lang.String getTooltip(org.eclipse.swt.widgets.TreeItem item) { if (item != null) { java.lang.Object object = item.getData(); if ((object instanceof org.eclipse.birt.report.model.api.DataSourceHandle) || (object instanceof org.eclipse.birt.report.model.api.ParameterGroupHandle)) { return org.eclipse.birt.report.designer.internal.ui.views.data.DataViewTreeViewerPage.LABEL_DOUBLE_CLICK; } java.lang.StringBuffer tooltip = new java.lang.StringBuffer(); boolean canInsert = org.eclipse.birt.report.designer.internal.ui.dnd.InsertInLayoutUtil.handleValidateInsertToLayout(object, org.eclipse.birt.report.designer.internal.ui.util.UIUtil.getCurrentEditPart()); java.lang.String text = ("(" + (item.getText())) + ")"; if (object instanceof org.eclipse.birt.report.model.api.DataSetHandle) { if (canInsert) tooltip.append((((org.eclipse.birt.report.designer.nls.Messages.getString("DataViewTreeViewerPage.tooltip.DragToInsertDataSetColumns")) + text) + "; ")); tooltip.append(org.eclipse.birt.report.designer.internal.ui.views.data.DataViewTreeViewerPage.LABEL_DOUBLE_CLICK); } if ((object instanceof org.eclipse.birt.report.designer.core.model.views.data.DataSetItemModel) || (object instanceof org.eclipse.birt.report.model.api.ResultSetColumnHandle)) { if (canInsert) tooltip.append(((org.eclipse.birt.report.designer.nls.Messages.getString("DataViewTreeViewerPage.tooltip.DragToInsertColumn")) + text)); } else if (((object instanceof org.eclipse.birt.report.model.api.ParameterHandle) || (object instanceof org.eclipse.birt.report.model.api.VariableElementHandle)) || (object instanceof org.eclipse.birt.report.model.api.olap.CubeHandle)) { if (canInsert) tooltip.append(org.eclipse.birt.report.designer.nls.Messages.getString("DataViewTreeViewerPage.tooltip.DragToInsertParameter")); tooltip.append(org.eclipse.birt.report.designer.internal.ui.views.data.DataViewTreeViewerPage.LABEL_DOUBLE_CLICK); } return tooltip.toString(); } return ""; }
public final boolean zoomIn() { if (bStepFixed) { return false; } if (org.eclipse.birt.chart.util.ChartUtil.mathEqual(0, ((java.lang.Number) (oStep)).doubleValue())) { return false; } if (((iType) & (NUMERICAL)) == (NUMERICAL)) { if (((iType) & (LOGARITHMIC)) == (LOGARITHMIC)) { final double dStep = asDouble(oStep).doubleValue(); if (((java.lang.Math.log(dStep)) / (LOG_10)) > 1) { oStep = new java.lang.Double((dStep / 10)); } else { int n = org.eclipse.birt.chart.computation.withaxes.AutoScale.iaLogarithmicDeltas.length; for (int i = n - 1; i >= 0; i--) { if (((int) (dStep)) == (org.eclipse.birt.chart.computation.withaxes.AutoScale.iaLogarithmicDeltas[i])) { if (i > 0) { oStep = new java.lang.Double(org.eclipse.birt.chart.computation.withaxes.AutoScale.iaLogarithmicDeltas[(i - 1)]); return true; } else { return false; } } } return false; } } else if (((iType) & (LINEAR)) == (LINEAR)) { double dStep = asDouble(oStep).doubleValue(); if (bIntegralZoom) { double dPower = (java.lang.Math.log(dStep)) / (LOG_10); dPower = java.lang.Math.floor(dPower); dPower = java.lang.Math.pow(10.0, dPower); dStep /= dPower; dStep = java.lang.Math.round(dStep); int n = org.eclipse.birt.chart.computation.withaxes.AutoScale.iaLinearDeltas.length; for (int i = 0; i < n; i++) { if (((int) (dStep)) == (org.eclipse.birt.chart.computation.withaxes.AutoScale.iaLinearDeltas[i])) { if (i > 0) { dStep = (org.eclipse.birt.chart.computation.withaxes.AutoScale.iaLinearDeltas[(i - 1)]) * dPower; } else { dPower /= 10; dStep = (org.eclipse.birt.chart.computation.withaxes.AutoScale.iaLinearDeltas[(n - 2)]) * dPower; } break; } } oStep = new java.lang.Double(dStep); } else { dStep /= 2; oStep = new java.lang.Double(dStep); } } } else if (((iType) & (DATE_TIME)) == (DATE_TIME)) { int[] ia = null; int iStep = asInteger(oStep); int iUnit = asInteger(oUnit); for (int icu = 0; icu < (org.eclipse.birt.chart.computation.withaxes.AutoScale.iaCalendarUnits.length); icu++) { if (iUnit == (org.eclipse.birt.chart.computation.withaxes.AutoScale.iaCalendarUnits[icu])) { ia = org.eclipse.birt.chart.computation.withaxes.AutoScale.iaCalendarDeltas[icu]; if (ia == null) { iStep--; if (iStep == 0) { oStep = new java.lang.Integer(org.eclipse.birt.chart.computation.withaxes.AutoScale.iaMonthDeltas[((org.eclipse.birt.chart.computation.withaxes.AutoScale.iaMonthDeltas.length) - 1)]); oUnit = new java.lang.Integer(com.ibm.icu.util.Calendar.MONTH); } } else { int i = 0; for (; i < (ia.length); i++) { if ((ia[i]) == iStep) { break; } } if (i == 0) { if (icu == 0) return false; ia = org.eclipse.birt.chart.computation.withaxes.AutoScale.iaCalendarDeltas[(icu - 1)]; i = ia.length; oUnit = new java.lang.Integer(org.eclipse.birt.chart.computation.withaxes.AutoScale.iaCalendarUnits[(icu - 1)]); } oStep = new java.lang.Integer(ia[(i - 1)]); break; } } } } return true; }
private final void updateOverlayScales(org.eclipse.birt.chart.computation.withaxes.AllAxes aax, double dAxisStart, double dAxisEnd, double dBlockStart, double dBlockLength) throws java.lang.IllegalArgumentException, org.eclipse.birt.chart.exception.ChartException { final org.eclipse.birt.chart.model.component.Axis[] axa = ((org.eclipse.birt.chart.model.impl.ChartWithAxesImpl) (cwa)).getPrimaryBaseAxes(); final org.eclipse.birt.chart.model.component.Axis axPrimaryBase = axa[0]; final org.eclipse.birt.chart.model.component.Axis[] axaOrthogonal = ((org.eclipse.birt.chart.model.impl.ChartWithAxesImpl) (cwa)).getOrthogonalAxes(axPrimaryBase, false); org.eclipse.birt.chart.computation.withaxes.IntersectionValue iv; org.eclipse.birt.chart.computation.withaxes.AutoScale sc = null; org.eclipse.birt.chart.computation.withaxes.OneAxis oaxOverlay = null; int iTickStyle; int iAxisType; int j; int iTitleLocation; int iOverlayCount = aax.getOverlayCount(); int iOrientation = aax.getOrientation(); double dStart; double dEnd; double dAxisLabelsThickness; org.eclipse.birt.chart.model.component.Label laAxisTitle; org.eclipse.birt.chart.model.component.Scale scModel; org.eclipse.birt.chart.model.component.Series[] sea = cwa.getSeries(IConstants.ORTHOGONAL); java.util.Map<?, ?> seriesRenderingHints = rtc.getSeriesRenderers(); for (int i = 0; i < iOverlayCount; i++) { j = (iOverlayCount - i) - 1; oaxOverlay = aax.getOverlay(j); iTickStyle = oaxOverlay.getCombinedTickStyle(); iTitleLocation = oaxOverlay.getTitlePosition(); laAxisTitle = oaxOverlay.getTitle(); iAxisType = getAxisType(axaOrthogonal[j]); scModel = axaOrthogonal[j].getScale(); sc = org.eclipse.birt.chart.computation.withaxes.AutoScale.computeScale(ids, oaxOverlay, new org.eclipse.birt.chart.computation.DataSetIterator(getMinMax(axaOrthogonal[j], iAxisType), iAxisType), iAxisType, dAxisStart, dAxisEnd, scModel, axaOrthogonal[j].getFormatSpecifier(), rtc, org.eclipse.birt.chart.computation.withaxes.AUTO, 1, iMarginPercent); oaxOverlay.set(sc); iv = oaxOverlay.getIntersectionValue(); dStart = sc.getStart(); dEnd = sc.getEnd(); sc.computeTicks(ids, oaxOverlay.getLabel(), oaxOverlay.getLabelPosition(), iOrientation, dStart, dEnd, true, null); if (!(sc.isStepFixed())) { final java.lang.Object[] oaMinMax = sc.getMinMax(); while (!(sc.checkFit(ids, oaxOverlay.getLabel(), oaxOverlay.getLabelPosition()))) { if (!(sc.zoomOut())) { break; } sc.updateAxisMinMax(oaMinMax[0], oaMinMax[1]); sc.computeTicks(ids, oaxOverlay.getLabel(), oaxOverlay.getLabelPosition(), iOrientation, dStart, dEnd, true, null); } } dAxisLabelsThickness = sc.computeAxisLabelThickness(ids, oaxOverlay.getLabel(), iOrientation); double[] dDecorationThickness = new double[]{ 0, 0 }; for (int t = 0; t < (sea.length); t++) { org.eclipse.birt.chart.computation.LegendItemRenderingHints lirh = ((org.eclipse.birt.chart.computation.LegendItemRenderingHints) (seriesRenderingHints.get(sea[t]))); if ((lirh != null) && ((lirh.getRenderer()) instanceof org.eclipse.birt.chart.render.AxesRenderer)) { org.eclipse.birt.chart.render.IAxesDecorator iad = ((org.eclipse.birt.chart.render.AxesRenderer) (lirh.getRenderer())).getAxesDecorator(oaxOverlay); if (iad != null) { double[] thickness = iad.computeDecorationThickness(ids, oaxOverlay); if ((thickness[0]) > (dDecorationThickness[0])) { dDecorationThickness[0] = thickness[0]; } if ((thickness[1]) > (dDecorationThickness[1])) { dDecorationThickness[1] = thickness[1]; } } } } double dAxisTitleThickness = 0; sc.resetShifts(); if (iOrientation == (VERTICAL)) { double dX = 0; double dX1 = 0; double dX2 = 0; final boolean bTicksLeft = (iTickStyle & (TICK_LEFT)) == (TICK_LEFT); final boolean bTicksRight = (iTickStyle & (TICK_RIGHT)) == (TICK_RIGHT); final double dAppliedYAxisPlotSpacing = dYAxisPlotSpacing; if (laAxisTitle.isVisible()) { final java.lang.String sPreviousValue = laAxisTitle.getCaption().getValue(); laAxisTitle.getCaption().setValue(rtc.externalizedMessage(sPreviousValue)); double maxHeight = boPlot.getHeight(); double maxWidth = (boPlot.getWidth()) * (AXIS_TITLE_PERCENT); org.eclipse.birt.chart.computation.LabelLimiter lbLimit = new org.eclipse.birt.chart.computation.LabelLimiter(maxWidth, maxHeight, 0); lbLimit.computeWrapping(ids, laAxisTitle); lbLimit = lbLimit.limitLabelSize(ids, laAxisTitle, java.util.EnumSet.of(LabelLimiter.Option.FIX_HEIGHT)); dAxisTitleThickness = lbLimit.getMaxWidth(); putLabelLimiter(oaxOverlay.getModelAxis().getTitle(), lbLimit); laAxisTitle.getCaption().setValue(sPreviousValue); } if (oaxOverlay.getModelAxis().isSetLabelSpan()) { double dFixedLabelThickness = oaxOverlay.getModelAxis().getLabelSpan(); double dWTotal = dBlockLength; if (dFixedLabelThickness < (dWTotal - (2 * (getTickSize())))) { if ((dAxisLabelsThickness + dAxisTitleThickness) > dFixedLabelThickness) { oaxOverlay.setShowLabels(false); } if (dAxisTitleThickness > dFixedLabelThickness) { laAxisTitle.setVisible(false); dAxisTitleThickness = 0; } dAxisLabelsThickness = dFixedLabelThickness; } } if ((iv.getType()) == (org.eclipse.birt.chart.computation.IConstants.MIN)) { dX = dBlockStart; dX -= dAppliedYAxisPlotSpacing; dX1 = dX; dX2 = dX; if (bTicksLeft) { dX1 -= getTickSize(); } if ((oaxOverlay.getLabelPosition()) == (LEFT)) { dX1 -= java.lang.Math.max(dAxisLabelsThickness, dDecorationThickness[0]); dX2 += java.lang.Math.max((bTicksRight ? getTickSize() : 0), dAppliedYAxisPlotSpacing); } else if ((oaxOverlay.getLabelPosition()) == (RIGHT)) { dX1 -= dDecorationThickness[0]; dX2 += java.lang.Math.max(((bTicksRight ? getTickSize() : 0) + dAxisLabelsThickness), dAppliedYAxisPlotSpacing); } if (iTitleLocation == (LEFT)) { dX1 -= dAxisTitleThickness; } else if (iTitleLocation == (RIGHT)) { dX2 += dAxisTitleThickness; } if (dX1 < dBlockStart) { final double dDelta = dBlockStart - dX1; dX1 = dBlockStart; dX += dDelta; dX2 += dDelta; } dBlockStart += dX2 - dX1; } else if ((iv.getType()) == (org.eclipse.birt.chart.computation.IConstants.MAX)) { dX = dBlockStart + dBlockLength; dX += dAppliedYAxisPlotSpacing; dX1 = dX; dX2 = dX; if (bTicksRight) { dX2 += getTickSize(); } if ((oaxOverlay.getLabelPosition()) == (RIGHT)) { dX2 += java.lang.Math.max(dAxisLabelsThickness, dDecorationThickness[1]); dX1 -= java.lang.Math.max((bTicksLeft ? getTickSize() : 0), dAppliedYAxisPlotSpacing); } else if ((oaxOverlay.getLabelPosition()) == (LEFT)) { dX1 -= java.lang.Math.max(((bTicksLeft ? getTickSize() : 0) + dAxisLabelsThickness), dAppliedYAxisPlotSpacing); dX2 += dDecorationThickness[1]; } if (iTitleLocation == (LEFT)) { dX1 -= dAxisTitleThickness; } else if (iTitleLocation == (RIGHT)) { dX2 += dAxisTitleThickness; } if (dX2 > (dBlockStart + dBlockLength)) { final double dDelta = dX2 - (dBlockStart + dBlockLength); dX2 = dBlockStart + dBlockLength; dX -= dDelta; dX1 -= dDelta; } } dBlockLength -= dX2 - dX1; double dDelta = 0; if ((iv.getType()) == (org.eclipse.birt.chart.computation.IConstants.MIN)) { dDelta = -(insCA.getLeft()); } else if ((iv.getType()) == (org.eclipse.birt.chart.computation.IConstants.MAX)) { dDelta = insCA.getRight(); } oaxOverlay.setAxisCoordinate((dX + dDelta)); oaxOverlay.setTitleCoordinate((iTitleLocation == (LEFT) ? (dX1 + dDelta) - 1 : ((dX2 + 1) - dAxisTitleThickness) + dDelta)); } else if (iOrientation == (HORIZONTAL)) { double dY = 0; double dY1 = dY; double dY2 = dY; final boolean bTicksAbove = (iTickStyle & (TICK_ABOVE)) == (TICK_ABOVE); final boolean bTicksBelow = (iTickStyle & (TICK_BELOW)) == (TICK_BELOW); final double dAppliedXAxisPlotSpacing = dXAxisPlotSpacing; if (laAxisTitle.isVisible()) { final java.lang.String sPreviousValue = laAxisTitle.getCaption().getValue(); laAxisTitle.getCaption().setValue(rtc.externalizedMessage(sPreviousValue)); double maxHeight = (boPlot.getHeight()) * (AXIS_TITLE_PERCENT); double maxWidth = boPlot.getWidth(); org.eclipse.birt.chart.model.component.Label laAxisTitleV = aax.getPrimaryOrthogonal().getTitle(); if (laAxisTitleV.isVisible()) { laAxisTitleV = org.eclipse.birt.chart.model.component.impl.LabelImpl.copyInstance(laAxisTitleV); laAxisTitleV.getCaption().setValue(rtc.externalizedMessage(laAxisTitleV.getCaption().getValue())); org.eclipse.birt.chart.computation.LabelLimiter lbLimitV = new org.eclipse.birt.chart.computation.LabelLimiter(((boPlot.getWidth()) * (AXIS_TITLE_PERCENT)), boPlot.getWidth(), 0); lbLimitV.computeWrapping(ids, laAxisTitleV); lbLimitV.limitLabelSize(ids, laAxisTitleV); maxWidth -= lbLimitV.getMaxWidth(); } org.eclipse.birt.chart.computation.LabelLimiter lbLimit = new org.eclipse.birt.chart.computation.LabelLimiter(maxWidth, maxHeight, 0); lbLimit.computeWrapping(ids, laAxisTitle); lbLimit = lbLimit.limitLabelSize(ids, laAxisTitle, java.util.EnumSet.of(LabelLimiter.Option.FIX_WIDTH)); dAxisTitleThickness = lbLimit.getMaxHeight(); putLabelLimiter(oaxOverlay.getModelAxis().getTitle(), lbLimit); laAxisTitle.getCaption().setValue(sPreviousValue); } if (oaxOverlay.getModelAxis().isSetLabelSpan()) { double dFixedLabelThickness = oaxOverlay.getModelAxis().getLabelSpan(); double dWTotal = dBlockLength; if (dFixedLabelThickness < (dWTotal - (2 * (getTickSize())))) { if ((dAxisLabelsThickness + dAxisTitleThickness) > dFixedLabelThickness) { oaxOverlay.setShowLabels(false); } if (dAxisTitleThickness > dFixedLabelThickness) { laAxisTitle.setVisible(false); dAxisTitleThickness = 0; } dAxisLabelsThickness = dFixedLabelThickness; } } if ((iv.getType()) == (org.eclipse.birt.chart.computation.IConstants.MAX)) { dY = dBlockStart; dY -= dAppliedXAxisPlotSpacing; dY1 = dY; dY2 = dY; if (bTicksAbove) { dY1 -= getTickSize(); } if ((oaxOverlay.getLabelPosition()) == (ABOVE)) { dY1 -= java.lang.Math.max(dAxisLabelsThickness, dDecorationThickness[0]); dY2 += java.lang.Math.max((bTicksBelow ? getTickSize() : 0), dAppliedXAxisPlotSpacing); } else if ((oaxOverlay.getLabelPosition()) == (BELOW)) { dY1 -= dDecorationThickness[0]; dY2 += java.lang.Math.max(((bTicksBelow ? getTickSize() : 0) + dAxisLabelsThickness), dAppliedXAxisPlotSpacing); } if (iTitleLocation == (ABOVE)) { dY1 -= dAxisTitleThickness; } else if (iTitleLocation == (BELOW)) { dY2 += dAxisTitleThickness; } if (dY1 < dBlockStart) { final double dDelta = dBlockStart - dY1; dY1 = dBlockStart; dY += dDelta; dY2 += dDelta; } dBlockStart += dY2 - dY1; } else if ((iv.getType()) == (org.eclipse.birt.chart.computation.IConstants.MIN)) { dY = dBlockStart + dBlockLength; dY += dAppliedXAxisPlotSpacing; dY1 = dY; dY2 = dY; if (bTicksBelow) { dY2 += getTickSize(); } if ((oaxOverlay.getLabelPosition()) == (BELOW)) { dY2 += java.lang.Math.max(dAxisLabelsThickness, dDecorationThickness[1]); dY1 -= java.lang.Math.max((bTicksAbove ? getTickSize() : 0), dAppliedXAxisPlotSpacing); } else if ((oaxOverlay.getLabelPosition()) == (ABOVE)) { dY1 -= java.lang.Math.max(((bTicksAbove ? getTickSize() : 0) + dAxisLabelsThickness), dAppliedXAxisPlotSpacing); dY2 += dDecorationThickness[1]; } if (iTitleLocation == (ABOVE)) { dY1 -= dAxisTitleThickness; } else if (iTitleLocation == (BELOW)) { dY2 += dAxisTitleThickness; } if (dY2 > (dBlockStart + dBlockLength)) { final double dDelta = dY2 - (dBlockStart + dBlockLength); dY2 = dBlockStart + dBlockLength; dY -= dDelta; dY1 -= dDelta; } } double dDelta = 0; if ((iv.getType()) == (org.eclipse.birt.chart.computation.IConstants.MAX)) { dDelta = -(insCA.getTop()); } else if ((iv.getType()) == (org.eclipse.birt.chart.computation.IConstants.MIN)) { dDelta = insCA.getBottom(); } oaxOverlay.setAxisCoordinate((dY + dDelta)); oaxOverlay.setTitleCoordinate((iTitleLocation == (ABOVE) ? (dY1 + dDelta) - 1 : ((dY2 + 1) - dAxisTitleThickness) + dDelta)); dBlockLength -= dY2 - dY1; } } aax.setBlockCordinates(dBlockStart, dBlockLength); }
public static java.lang.String getRealPath(javax.servlet.ServletContext context, java.lang.String fileName) { java.lang.String path = context.getRealPath("/"); if (path == null) { java.net.URL url; try { url = context.getResource("/"); path = url.getPath(); } catch (java.net.MalformedURLException e) { e.printStackTrace(); } } if ((path != null) && ((path.length()) > 0)) { if (((path.charAt(((path.length()) - 1))) != '\\') || ((path.charAt(((path.length()) - 1))) != '/')) { path += java.io.File.separator; } } return path + fileName; }
protected java.util.List getModelChildren() { return org.eclipse.birt.report.designer.core.model.schematic.HandleAdapterFactory.getInstance().getReportDesignHandleAdapter(getModel()).getChildren(); }
private void updateCheckBoxArea() { if ((((DesignChoiceConstants.PARAM_CONTROL_TEXT_BOX.equals(getSelectedControlType())) || (org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.PARAM_CONTROL_LIST.equals(getSelectedControlType()))) || (org.eclipse.birt.report.designer.ui.dialogs.ParameterDialog.PARAM_CONTROL_COMBO.equals(getSelectedControlType()))) && (DesignChoiceConstants.PARAM_TYPE_STRING.equals(getSelectedDataType()))) { allowBlank.setEnabled(true); } else { allowBlank.setEnabled(false); } if (DesignChoiceConstants.PARAM_CONTROL_TEXT_BOX.equals(getSelectedControlType())) { doNotEcho.setEnabled(true); } else { doNotEcho.setEnabled(false); } if ((DesignChoiceConstants.PARAM_CONTROL_TEXT_BOX.equals(getSelectedControlType())) || (DesignChoiceConstants.PARAM_CONTROL_CHECK_BOX.equals(getSelectedControlType()))) { needSort.setEnabled(false); } else { needSort.setEnabled(true); } }
public java.lang.Object execute(java.lang.Object[] arguments) throws org.eclipse.birt.core.exception.BirtException { if ((arguments == null) || (((arguments.length) != 2) && ((arguments.length) != 3))) throw new org.eclipse.birt.core.exception.BirtException("org.eclipse.birt.core.script.general", null, ((org.eclipse.birt.core.script.function.i18n.Messages.getString("invalid.number.of.argument")) + "Finance.mirr()")); if ((arguments[0]) instanceof java.lang.Object[]) { java.lang.Object[] array = ((java.lang.Object[]) (arguments[0])); double[] arg = new double[array.length]; for (int i = 0; i < (arg.length); i++) { arg[i] = org.eclipse.birt.core.data.DataTypeUtil.toDouble(array[i]); } return org.eclipse.birt.core.script.function.general.Finance.mirr(arg, org.eclipse.birt.core.data.DataTypeUtil.toDouble(arguments[1]), ((arguments.length) == 3 ? org.eclipse.birt.core.data.DataTypeUtil.toDouble(arguments[2]) : 0)); } else if (arguments[0].getClass().isAssignableFrom(double[].class)) { return org.eclipse.birt.core.script.function.general.Finance.mirr(((double[]) (arguments[0])), org.eclipse.birt.core.data.DataTypeUtil.toDouble(arguments[1]), ((arguments.length) == 3 ? org.eclipse.birt.core.data.DataTypeUtil.toDouble(arguments[2]) : 0)); } throw new org.eclipse.birt.core.exception.BirtException("org.eclipse.birt.core.script.general", null, ((org.eclipse.birt.core.script.function.i18n.Messages.getString("invalid.type.of.argument")) + "Finance.mirr()")); }
protected void parseRenderOptions() throws java.lang.Exception { assert mode.equalsIgnoreCase("Render"); if (results.hasOption('f')) { format = results.getOptionValue('f'); } if (results.hasOption('t')) { htmlType = results.getOptionValue('t'); } if (results.hasOption('o')) { targetFile = results.getOptionValue('o'); } if (results.hasOption('l')) { locale = results.getOptionValue('l'); } if (results.hasOption('e')) { encoding = results.getOptionValue('e'); } if (results.hasOption('p')) { java.lang.String paramPageNumber = results.getOptionValue('p'); try { pageNumber = java.lang.Long.parseLong(paramPageNumber); } catch (java.lang.NumberFormatException nfe) { org.eclipse.birt.report.engine.api.ReportRunner.logger.log(java.util.logging.Level.SEVERE, (("Can not parse parameter(page number) \"" + paramPageNumber) + "\"")); } } parseParameterOptions(); }
private void addAggregateOn(org.eclipse.birt.data.engine.api.querydefn.Binding binding, java.util.List lstAggOn, org.eclipse.birt.data.engine.olap.api.query.ICubeQueryDefinition cubeQuery, org.eclipse.birt.report.model.api.olap.CubeHandle cube) throws org.eclipse.birt.core.exception.BirtException { for (java.util.Iterator iAggs = lstAggOn.iterator(); iAggs.hasNext();) { java.lang.String aggOn = ((java.lang.String) (iAggs.next())); java.lang.String[] levelNames = org.eclipse.birt.report.model.api.util.CubeUtil.splitLevelName(aggOn); java.lang.String dimExpr = org.eclipse.birt.core.data.ExpressionUtil.createJSDimensionExpression(levelNames[0], levelNames[1]); binding.addAggregateOn(dimExpr); if ((cubeQuery != null) && (cube != null)) { bindSeriesQuery(org.eclipse.birt.chart.model.data.impl.QueryImpl.create(dimExpr), cubeQuery, cube); } } }
private com.lowagie.text.pdf.PdfAction createPdfAction(java.lang.String hyperlink, java.lang.String bookmark, java.lang.String target, int type) { if ("_blank".equalsIgnoreCase(target)) { return new com.lowagie.text.pdf.PdfAction(hyperlink); } else { if (type == (org.eclipse.birt.report.engine.content.IHyperlinkAction.ACTION_BOOKMARK)) { return com.lowagie.text.pdf.PdfAction.gotoLocalPage(bookmark, false); } else { if (type == (org.eclipse.birt.report.engine.content.IHyperlinkAction.ACTION_HYPERLINK)) { return com.lowagie.text.pdf.PdfAction.gotoRemotePage(hyperlink, bookmark, false, false); } else { return new com.lowagie.text.pdf.PdfAction(hyperlink); } } } }
public org.eclipse.birt.report.model.api.TextDataHandle newTextData(java.lang.String name) { java.lang.String newName = getNewName(ReportDesignConstants.TEXT_ITEM, name); return factory.newTextData(newName); }
private void addToExtension(org.eclipse.birt.report.engine.nLayout.area.impl.BlockTextArea area) { if ((context.isFixedLayout()) && ((context.getEngineTaskType()) == (org.eclipse.birt.report.engine.api.IEngineTask.TASK_RUN))) { java.util.ArrayList<org.eclipse.birt.report.engine.nLayout.area.impl.BlockTextArea> list = ((java.util.ArrayList<org.eclipse.birt.report.engine.nLayout.area.impl.BlockTextArea>) (content.getExtension(IContent.LAYOUT_EXTENSION))); if (list == null) { list = new java.util.ArrayList<org.eclipse.birt.report.engine.nLayout.area.impl.BlockTextArea>(); content.setExtension(IContent.LAYOUT_EXTENSION, list); } if (area.finished) { if ((list.isEmpty()) || (((list.size()) > 0) && (!(list.get(((list.size()) - 1)).finished)))) { list.add(area); } } else { if (((list.size()) > 0) && (list.get(((list.size()) - 1)).finished)) { list.add(((list.size()) - 1), area); } else { list.add(area); } } } }
public static org.eclipse.birt.report.engine.emitter.excel.StyleEntry createStyleEntry(org.eclipse.birt.report.engine.content.IStyle style) { org.eclipse.birt.report.engine.emitter.excel.StyleEntry entry = new org.eclipse.birt.report.engine.emitter.excel.StyleEntry(); entry.setProperty(StyleConstant.BACKGROUND_COLOR_PROP, org.eclipse.birt.report.engine.emitter.excel.StyleBuilder.convertColor(style.getBackgroundColor())); float width = java.lang.Float.parseFloat(style.getBorderBottomWidth()); if (width > 0) { entry.setProperty(StyleConstant.BORDER_BOTTOM_COLOR_PROP, org.eclipse.birt.report.engine.emitter.excel.StyleBuilder.convertColor(style.getBorderBottomColor())); entry.setProperty(StyleConstant.BORDER_BOTTOM_STYLE_PROP, org.eclipse.birt.report.engine.emitter.excel.StyleBuilder.convertBorderStyle(style.getBorderBottomStyle())); entry.setProperty(StyleConstant.BORDER_BOTTOM_WIDTH_PROP, org.eclipse.birt.report.engine.emitter.excel.StyleBuilder.convertBorderWeight(style.getBorderBottomWidth())); } width = java.lang.Float.parseFloat(style.getBorderTopWidth()); if (width > 0) { entry.setProperty(StyleConstant.BORDER_TOP_COLOR_PROP, org.eclipse.birt.report.engine.emitter.excel.StyleBuilder.convertColor(style.getBorderTopColor())); entry.setProperty(StyleConstant.BORDER_TOP_STYLE_PROP, org.eclipse.birt.report.engine.emitter.excel.StyleBuilder.convertBorderStyle(style.getBorderTopStyle())); entry.setProperty(StyleConstant.BORDER_TOP_WIDTH_PROP, org.eclipse.birt.report.engine.emitter.excel.StyleBuilder.convertBorderWeight(style.getBorderTopWidth())); } width = java.lang.Float.parseFloat(style.getBorderLeftWidth()); if (width > 0) { entry.setProperty(StyleConstant.BORDER_LEFT_COLOR_PROP, org.eclipse.birt.report.engine.emitter.excel.StyleBuilder.convertColor(style.getBorderLeftColor())); entry.setProperty(StyleConstant.BORDER_LEFT_STYLE_PROP, org.eclipse.birt.report.engine.emitter.excel.StyleBuilder.convertBorderStyle(style.getBorderLeftStyle())); entry.setProperty(StyleConstant.BORDER_LEFT_WIDTH_PROP, org.eclipse.birt.report.engine.emitter.excel.StyleBuilder.convertBorderWeight(style.getBorderLeftWidth())); } width = java.lang.Float.parseFloat(style.getBorderRightWidth()); if (width > 0) { entry.setProperty(StyleConstant.BORDER_RIGHT_COLOR_PROP, org.eclipse.birt.report.engine.emitter.excel.StyleBuilder.convertColor(style.getBorderRightColor())); entry.setProperty(StyleConstant.BORDER_RIGHT_STYLE_PROP, org.eclipse.birt.report.engine.emitter.excel.StyleBuilder.convertBorderStyle(style.getBorderRightStyle())); entry.setProperty(StyleConstant.BORDER_RIGHT_WIDTH_PROP, org.eclipse.birt.report.engine.emitter.excel.StyleBuilder.convertBorderWeight(style.getBorderRightWidth())); } entry.setProperty(StyleConstant.COLOR_PROP, org.eclipse.birt.report.engine.emitter.excel.StyleBuilder.convertColor(style.getColor())); entry.setProperty(StyleConstant.FONT_FAMILY_PROP, org.eclipse.birt.report.engine.emitter.excel.ExcelUtil.getValue(style.getFontFamily())); entry.setProperty(StyleConstant.FONT_SIZE_PROP, org.eclipse.birt.report.engine.emitter.excel.StyleBuilder.convertFontSize(style.getFontSize())); entry.setProperty(StyleConstant.FONT_STYLE_PROP, org.eclipse.birt.report.engine.emitter.excel.ExcelUtil.expression(style.getFontStyle(), "italic", new java.lang.String[]{ "0", "1" }, false)); entry.setProperty(StyleConstant.FONT_WEIGHT_PROP, org.eclipse.birt.report.engine.emitter.excel.ExcelUtil.expression(style.getFontWeight(), "bold", new java.lang.String[]{ "0", "1" }, false)); entry.setProperty(StyleConstant.TEXT_LINE_THROUGH_PROP, org.eclipse.birt.report.engine.emitter.excel.ExcelUtil.expression(style.getTextLineThrough(), "line-through", new java.lang.String[]{ "0", "1" }, false)); entry.setProperty(StyleConstant.TEXT_UNDERLINE_PROP, org.eclipse.birt.report.engine.emitter.excel.ExcelUtil.expression(style.getTextUnderline(), "underline", new java.lang.String[]{ "0", "1" }, false)); entry.setProperty(StyleConstant.H_ALIGN_PROP, org.eclipse.birt.report.engine.emitter.excel.StyleBuilder.convertHAlign(style.getTextAlign())); entry.setProperty(StyleConstant.V_ALIGN_PROP, org.eclipse.birt.report.engine.emitter.excel.StyleBuilder.convertVAlign(style.getVerticalAlign())); return entry; }
private void changeOverlaySeriesType() { if (getCurrentChartType().canCombine()) { org.eclipse.birt.chart.ui.util.ChartCacheManager.getInstance().cacheSeriesType(cbSeriesType.getText()); } boolean bException = false; try { org.eclipse.birt.chart.model.component.Axis XAxis = ((org.eclipse.birt.chart.model.component.Axis) (((org.eclipse.birt.chart.model.ChartWithAxes) (chartModel)).getAxes().get(0))); int iSeriesDefinitionIndex = 0 + (((org.eclipse.birt.chart.model.component.Axis) (XAxis.getAssociatedAxes().get(0))).getSeriesDefinitions().size()); int iOverlaySeriesCount = ((org.eclipse.birt.chart.model.component.Axis) (XAxis.getAssociatedAxes().get(1))).getSeriesDefinitions().size(); org.eclipse.birt.chart.ui.swt.wizard.ChartAdapter.beginIgnoreNotifications(); for (int i = 0; i < iOverlaySeriesCount; i++) { org.eclipse.birt.chart.model.component.Series newSeries = ((org.eclipse.birt.chart.model.component.Series) (org.eclipse.emf.ecore.util.EcoreUtil.copy(org.eclipse.birt.chart.ui.swt.wizard.TaskSelectType.htSeriesNames.get(cbSeriesType.getText())))); newSeries.translateFrom(((org.eclipse.birt.chart.model.data.SeriesDefinition) (((org.eclipse.birt.chart.model.component.Axis) (XAxis.getAssociatedAxes().get(1))).getSeriesDefinitions().get(i))).getDesignTimeSeries(), iSeriesDefinitionIndex, chartModel); newSeries.eAdapters().addAll(chartModel.eAdapters()); ((org.eclipse.birt.chart.model.data.SeriesDefinition) (((org.eclipse.birt.chart.model.component.Axis) (XAxis.getAssociatedAxes().get(1))).getSeriesDefinitions().get(i))).getSeries().clear(); ((org.eclipse.birt.chart.model.data.SeriesDefinition) (((org.eclipse.birt.chart.model.component.Axis) (XAxis.getAssociatedAxes().get(1))).getSeriesDefinitions().get(i))).getSeries().add(newSeries); org.eclipse.birt.chart.ui.util.ChartUIUtil.setSeriesName(chartModel); } } catch (java.lang.Exception e) { bException = true; org.eclipse.birt.core.ui.frameworks.taskwizard.WizardBase.showException(e.getLocalizedMessage()); } finally { org.eclipse.birt.chart.ui.swt.wizard.ChartAdapter.endIgnoreNotifications(); } if (!bException) { org.eclipse.birt.core.ui.frameworks.taskwizard.WizardBase.removeException(); } }
protected org.eclipse.swt.widgets.Composite getComponent(org.eclipse.swt.widgets.Composite parent) { org.eclipse.birt.chart.ui.util.ChartUIUtil.bindHelp(parent, ChartHelpContextIds.POPUP_AXIS_GRIDLINES); org.eclipse.swt.layout.GridLayout glContent = new org.eclipse.swt.layout.GridLayout(); glContent.numColumns = 2; glContent.horizontalSpacing = 5; glContent.verticalSpacing = 5; glContent.marginHeight = 7; glContent.marginWidth = 7; org.eclipse.swt.layout.GridLayout glGeneral = new org.eclipse.swt.layout.GridLayout(); glGeneral.numColumns = 10; glGeneral.horizontalSpacing = 5; glGeneral.verticalSpacing = 5; glGeneral.marginHeight = 4; glGeneral.marginWidth = 4; org.eclipse.swt.layout.GridLayout glGapWidth = new org.eclipse.swt.layout.GridLayout(); glGapWidth.numColumns = 8; glGapWidth.horizontalSpacing = 5; glGapWidth.marginHeight = 2; glGapWidth.marginWidth = 2; org.eclipse.swt.layout.FillLayout flMajor = new org.eclipse.swt.layout.FillLayout(); cmpContent = new org.eclipse.swt.widgets.Composite(parent, org.eclipse.swt.SWT.NONE); cmpContent.setLayout(glContent); org.eclipse.swt.widgets.Composite choiceComposite = new org.eclipse.swt.widgets.Composite(cmpContent, org.eclipse.swt.SWT.NONE); org.eclipse.swt.layout.GridData gd = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_HORIZONTAL); gd.horizontalSpan = 2; choiceComposite.setLayoutData(gd); choiceComposite.setLayout(new org.eclipse.swt.layout.GridLayout(3, true)); cbHidden = new org.eclipse.swt.widgets.Button(choiceComposite, org.eclipse.swt.SWT.CHECK); cbHidden.setLayoutData(new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_BOTH)); cbHidden.setText(org.eclipse.birt.chart.ui.extension.i18n.Messages.getString("BaseAxisAttributeSheetImpl.Lbl.HideAxisLine")); cbHidden.setSelection((!(axis.getLineAttributes().isVisible()))); cbHidden.addSelectionListener(this); cbCategory = new org.eclipse.swt.widgets.Button(choiceComposite, org.eclipse.swt.SWT.CHECK); cbCategory.setLayoutData(new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.HORIZONTAL_ALIGN_BEGINNING)); cbCategory.setText(org.eclipse.birt.chart.ui.extension.i18n.Messages.getString("BaseAxisAttributeSheetImpl.Lbl.IsCategoryAxis")); cbCategory.setSelection(axis.isCategoryAxis()); cbCategory.addSelectionListener(this); cbCategory.setEnabled((((!(AxisType.TEXT_LITERAL.equals(axis.getType()))) && (!(BarChart.TYPE_LITERAL.equals(getChart().getType())))) && (!(StockChart.TYPE_LITERAL.equals(getChart().getType()))))); cbCategory.setVisible(((angleType) == (org.eclipse.birt.chart.model.attribute.AngleType.X))); cbTickBetweenCategory = new org.eclipse.swt.widgets.Button(choiceComposite, org.eclipse.swt.SWT.CHECK); cbTickBetweenCategory.setLayoutData(new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.HORIZONTAL_ALIGN_BEGINNING)); cbTickBetweenCategory.setText(org.eclipse.birt.chart.ui.extension.i18n.Messages.getString("BaseAxisAttributeSheetImpl.Lbl.IsTickBetweenCategories")); cbTickBetweenCategory.setSelection(axis.getScale().isTickBetweenCategories()); cbTickBetweenCategory.addSelectionListener(this); cbTickBetweenCategory.setEnabled(axis.isCategoryAxis()); cbTickBetweenCategory.setVisible(((angleType) == (org.eclipse.birt.chart.model.attribute.AngleType.X))); cmpGeneral = new org.eclipse.swt.widgets.Composite(cmpContent, org.eclipse.swt.SWT.NONE); org.eclipse.swt.layout.GridData gdCMPGeneral = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_BOTH); gdCMPGeneral.horizontalSpan = 2; gdCMPGeneral.grabExcessVerticalSpace = false; cmpGeneral.setLayoutData(gdCMPGeneral); cmpGeneral.setLayout(glGeneral); org.eclipse.swt.widgets.Label lblColor = new org.eclipse.swt.widgets.Label(cmpGeneral, org.eclipse.swt.SWT.NONE); org.eclipse.swt.layout.GridData gdLBLColor = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL); lblColor.setLayoutData(gdLBLColor); lblColor.setText(org.eclipse.birt.chart.ui.extension.i18n.Messages.getString("BaseAxisAttributeSheetImpl.Lbl.AxisLineColor")); org.eclipse.birt.chart.model.attribute.ColorDefinition clrCurrent = null; if (axis.eIsSet(ComponentPackage.eINSTANCE.getAxis_LineAttributes())) { clrCurrent = axis.getLineAttributes().getColor(); } fccLine = new org.eclipse.birt.chart.ui.swt.composites.FillChooserComposite(cmpGeneral, org.eclipse.swt.SWT.NONE, getContext(), clrCurrent, false, false); org.eclipse.swt.layout.GridData gdFCCLine = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_BOTH); gdFCCLine.horizontalSpan = 9; gdFCCLine.widthHint = 260; gdFCCLine.heightHint = fccLine.getPreferredSize().y; gdFCCLine.grabExcessVerticalSpace = false; fccLine.setLayoutData(gdFCCLine); fccLine.addListener(this); org.eclipse.swt.widgets.Label lblOrientation = new org.eclipse.swt.widgets.Label(cmpGeneral, org.eclipse.swt.SWT.NONE); org.eclipse.swt.layout.GridData gdLBLOrientation = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL); gdLBLOrientation.widthHint = 90; gdLBLOrientation.grabExcessVerticalSpace = false; lblOrientation.setLayoutData(gdLBLOrientation); lblOrientation.setText(org.eclipse.birt.chart.ui.extension.i18n.Messages.getString("BaseAxisAttributeSheetImpl.Lbl.Orientation")); cmbOrientation = new org.eclipse.swt.widgets.Label(cmpGeneral, org.eclipse.swt.SWT.SINGLE); org.eclipse.swt.layout.GridData gdCMBOrientation = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_HORIZONTAL); gdCMBOrientation.horizontalSpan = 4; gdCMBOrientation.widthHint = 120; cmbOrientation.setLayoutData(gdCMBOrientation); cmbOrientation.setText(LiteralHelper.orientationSet.getDisplayNameByName(getAxisForProcessing().getOrientation().getName())); lblGridCount = new org.eclipse.swt.widgets.Label(cmpGeneral, org.eclipse.swt.SWT.NONE); org.eclipse.swt.layout.GridData gdLBLGridCount = new org.eclipse.swt.layout.GridData(); lblGridCount.setLayoutData(gdLBLGridCount); lblGridCount.setText(org.eclipse.birt.chart.ui.extension.i18n.Messages.getString("BaseAxisDataSheetImpl.Lbl.MinorGridCount")); iscGridCount = new org.eclipse.swt.widgets.Spinner(cmpGeneral, org.eclipse.swt.SWT.BORDER); { gd = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_HORIZONTAL); gd.horizontalSpan = 3; iscGridCount.setLayoutData(gd); iscGridCount.setMinimum(1); iscGridCount.setSelection(getAxisForProcessing().getScale().getMinorGridsPerUnit()); iscGridCount.addSelectionListener(this); } grpMajor = new org.eclipse.swt.widgets.Group(cmpContent, org.eclipse.swt.SWT.NONE); org.eclipse.swt.layout.GridData gdGRPMajor = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_HORIZONTAL); grpMajor.setLayoutData(gdGRPMajor); grpMajor.setText(org.eclipse.birt.chart.ui.extension.i18n.Messages.getString("BaseAxisAttributeSheetImpl.Lbl.MajorGrid")); grpMajor.setLayout(flMajor); gacMajor = new org.eclipse.birt.chart.ui.swt.composites.GridAttributesComposite(grpMajor, org.eclipse.swt.SWT.NONE, getContext(), axis.getMajorGrid(), axis.getOrientation().getValue()); gacMajor.addListener(this); grpMinor = new org.eclipse.swt.widgets.Group(cmpContent, org.eclipse.swt.SWT.NONE); { grpMinor.setLayout(new org.eclipse.swt.layout.FillLayout()); org.eclipse.swt.layout.GridData gdGRPMinor = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_HORIZONTAL); grpMinor.setLayoutData(gdGRPMinor); grpMinor.setText(org.eclipse.birt.chart.ui.extension.i18n.Messages.getString("BaseAxisAttributeSheetImpl.Lbl.MinorGrid")); } gacMinor = new org.eclipse.birt.chart.ui.swt.composites.GridAttributesComposite(grpMinor, org.eclipse.swt.SWT.NONE, getContext(), axis.getMinorGrid(), axis.getOrientation().getValue()); gacMinor.addListener(this); setStateOfMinorGrid(); return cmpContent; }
public java.lang.String getDisplayText(java.lang.Object element) { if (element instanceof java.lang.Object[]) { if (element instanceof org.eclipse.birt.report.designer.ui.dialogs.ExpressionProvider.Operator[]) { if (element == (org.eclipse.birt.report.designer.ui.dialogs.ExpressionProvider.OPERATORS_ASSIGNMENT)) { return org.eclipse.birt.report.designer.ui.dialogs.ExpressionProvider.DISPLAY_TEXT_ASSIGNMENT; } else if (element == (org.eclipse.birt.report.designer.ui.dialogs.ExpressionProvider.OPERATORS_COMPARISON)) { return org.eclipse.birt.report.designer.ui.dialogs.ExpressionProvider.DISPLAY_TEXT_COMPARISON; } else if (element == (org.eclipse.birt.report.designer.ui.dialogs.ExpressionProvider.OPERATORS_COMPUTATIONAL)) { return org.eclipse.birt.report.designer.ui.dialogs.ExpressionProvider.DISPLAY_TEXT_COMPUTATIONAL; } else if (element == (org.eclipse.birt.report.designer.ui.dialogs.ExpressionProvider.OPERATORS_LOGICAL)) { return org.eclipse.birt.report.designer.ui.dialogs.ExpressionProvider.DISPLAY_TEXT_LOGICAL; } } else if (element instanceof org.eclipse.birt.report.model.api.metadata.ILocalizableInfo[]) { org.eclipse.birt.report.model.api.metadata.ILocalizableInfo info = ((org.eclipse.birt.report.model.api.metadata.ILocalizableInfo[]) (element))[1]; java.lang.StringBuffer displayText = new java.lang.StringBuffer(info.getName()); if (info instanceof org.eclipse.birt.report.model.api.metadata.IMethodInfo) { org.eclipse.birt.report.model.api.metadata.IMethodInfo method = ((org.eclipse.birt.report.model.api.metadata.IMethodInfo) (info)); displayText.append("("); displayText.append(") "); displayText.append(method.getReturnType()); } return displayText.toString(); } return org.eclipse.birt.report.designer.ui.dialogs.ExpressionProvider.ALL; } else if (element instanceof java.lang.String) { return ((java.lang.String) (element)); } else if (element instanceof org.eclipse.birt.report.designer.ui.dialogs.ExpressionProvider.Operator) { return ((org.eclipse.birt.report.designer.ui.dialogs.ExpressionProvider.Operator) (element)).symbol; } else if (element instanceof org.eclipse.birt.report.model.api.DesignElementHandle) { return ((org.eclipse.birt.report.model.api.DesignElementHandle) (element)).getQualifiedName(); } else if (element instanceof org.eclipse.birt.report.designer.core.model.views.data.DataSetItemModel) { return ((org.eclipse.birt.report.designer.core.model.views.data.DataSetItemModel) (element)).getDisplayName(); } return element.toString(); }
protected java.lang.Object convertToType(java.lang.Object value, java.lang.String type) { try { if (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equals(type)) { return org.eclipse.birt.core.data.DataTypeUtil.toBoolean(value); } else if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(type)) { return org.eclipse.birt.core.data.DataTypeUtil.toDate(value); } else if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(type)) { return org.eclipse.birt.core.data.DataTypeUtil.toBigDecimal(value); } else if (DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(type)) { return org.eclipse.birt.core.data.DataTypeUtil.toDouble(value); } else if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(type)) { return org.eclipse.birt.core.data.DataTypeUtil.toString(value); } else if (DesignChoiceConstants.PARAM_TYPE_INTEGER.equals(type)) { return org.eclipse.birt.core.data.DataTypeUtil.toInteger(value); } return value; } catch (org.eclipse.birt.core.exception.BirtException e) { org.eclipse.birt.report.engine.api.impl.EngineTask.log.log(java.util.logging.Level.SEVERE, e.getLocalizedMessage(), e); } return null; }
private boolean isInRepeatHeader() { if ((currentRow) == null) return false; org.eclipse.birt.report.engine.content.IContent rowContent = currentRow.getContent(); if (rowContent != null) { org.eclipse.birt.report.engine.content.IElement band = rowContent.getParent(); if ((band != null) && (band instanceof org.eclipse.birt.report.engine.content.IBandContent)) { int type = ((org.eclipse.birt.report.engine.content.IBandContent) (band)).getBandType(); if ((type == (org.eclipse.birt.report.engine.content.IBandContent.BAND_HEADER)) || (type == (org.eclipse.birt.report.engine.content.IBandContent.BAND_GROUP_HEADER))) { org.eclipse.birt.report.engine.ir.RowDesign rowDesign = ((org.eclipse.birt.report.engine.ir.RowDesign) (rowContent.getGenerateBy())); if ((rowDesign == null) || (rowDesign.getRepeatable())) { return true; } } } } return false; }
public FontHandler(org.eclipse.birt.report.engine.content.ITextContent textContent, boolean fontSubstitution, java.lang.String format) { org.eclipse.birt.report.engine.content.IStyle style = textContent.getComputedStyle(); this.fontFamilies = ((org.w3c.dom.css.CSSValueList) (style.getProperty(StyleConstants.STYLE_FONT_FAMILY))); if ((CSSConstants.CSS_OBLIQUE_VALUE.equals(style.getFontStyle())) || (CSSConstants.CSS_ITALIC_VALUE.equals(style.getFontStyle()))) { this.fontStyle |= com.lowagie.text.Font.ITALIC; } if (org.eclipse.birt.report.engine.layout.pdf.util.PropertyUtil.isBoldFont(style.getProperty(StyleConstants.STYLE_FONT_WEIGHT))) { this.fontStyle |= com.lowagie.text.Font.BOLD; } this.fontSize = (org.eclipse.birt.report.engine.layout.pdf.util.PropertyUtil.getDimensionValue(style.getProperty(StyleConstants.STYLE_FONT_SIZE))) / (org.eclipse.birt.report.engine.layout.PDFConstants.LAYOUT_TO_PDF_RATIO); setFormat(format); if (!fontSubstitution) { for (int i = 0; i < (fontFamilies.getLength()); i++) { java.lang.String fontName = fontManager.getLogicalFont(fontFamilies.item(i).getCssText()); bf = fontManager.createFont(fontName, fontStyle); if ((bf) != null) return; } bf = fontManager.createFont(FontMappingManager.DEFAULT_FONT, fontStyle); } }
public void __execute() throws java.lang.Exception { org.eclipse.birt.report.context.ViewerAttributeBean attrBean = ((org.eclipse.birt.report.context.ViewerAttributeBean) (context.getBean())); assert attrBean != null; java.lang.String docName = attrBean.getReportDocumentName(); boolean master = attrBean.isMasterPageContent(); org.eclipse.birt.report.service.api.InputOptions options = new org.eclipse.birt.report.service.api.InputOptions(); options.setOption(InputOptions.OPT_REQUEST, context.getRequest()); options.setOption(InputOptions.OPT_LOCALE, attrBean.getLocale()); options.setOption(InputOptions.OPT_RTL, new java.lang.Boolean(attrBean.isRtl())); options.setOption(InputOptions.OPT_SVG_FLAG, new java.lang.Boolean(org.eclipse.birt.report.utility.ParameterAccessor.getSVGFlag(context.getRequest()))); options.setOption(InputOptions.OPT_FORMAT, attrBean.getFormat()); options.setOption(InputOptions.OPT_IS_MASTER_PAGE_CONTENT, new java.lang.Boolean(master)); options.setOption(InputOptions.OPT_IS_DESIGNER, new java.lang.Boolean(attrBean.isDesigner())); getReportService().renderReport(docName, attrBean.getReportPage(), attrBean.getReportPageRange(), options, os); }
private static boolean in(java.lang.Object target, java.lang.Object[] resultObj) throws org.eclipse.birt.data.engine.core.DataException { if (resultObj == null) return false; for (int i = 0; i < (resultObj.length); i++) { if ((org.eclipse.birt.data.engine.script.ScriptEvalUtil.compare(target, resultObj[i])) == 0) return true; } return false; }
public void copyArea(int srcX, int srcY, int width, int height, int destX, int destY) { if ((handle) == 0) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_GRAPHIC_DISPOSED); if ((width <= 0) || (height <= 0)) return; int deltaX = destX - srcX; int deltaY = destY - srcY; if ((deltaX == 0) && (deltaY == 0)) return; int drawable = data.drawable; if ((data.image) == null) org.eclipse.swt.graphics.OS.gdk_gc_set_exposures(handle, true); org.eclipse.swt.graphics.OS.gdk_draw_drawable(drawable, handle, drawable, srcX, srcY, destX, destY, width, height); if ((data.image) == null) { org.eclipse.swt.graphics.OS.gdk_gc_set_exposures(handle, false); boolean disjoint = ((((destX + width) < srcX) || ((srcX + width) < destX)) || ((destY + height) < srcY)) || ((srcY + height) < destY); org.eclipse.swt.graphics.GdkRectangle rect = new org.eclipse.swt.graphics.GdkRectangle(); if (disjoint) { rect.x = srcX; rect.y = srcY; rect.width = width; rect.height = height; org.eclipse.swt.graphics.OS.gdk_window_invalidate_rect(drawable, rect, false); } else { if (deltaX != 0) { int newX = destX - deltaX; if (deltaX < 0) newX = destX + width; rect.x = newX; rect.y = srcY; rect.width = java.lang.Math.abs(deltaX); rect.height = height; org.eclipse.swt.graphics.OS.gdk_window_invalidate_rect(drawable, rect, false); } if (deltaY != 0) { int newY = destY - deltaY; if (deltaY < 0) newY = destY + height; rect.x = srcX; rect.y = newY; rect.width = width; rect.height = java.lang.Math.abs(deltaY); org.eclipse.swt.graphics.OS.gdk_window_invalidate_rect(drawable, rect, false); } } } }
void setToolTipText(int rootWidget, int tipWidget, java.lang.String string) { if ((OS.GTK_VERSION) >= (org.eclipse.swt.widgets.OS.VERSION(2, 12, 0))) { byte[] buffer = null; if ((string != null) && ((string.length()) > 0)) { char[] chars = fixMnemonic(string, false); buffer = org.eclipse.swt.widgets.Converter.wcsToMbcs(null, chars, true); } org.eclipse.swt.widgets.OS.gtk_widget_set_tooltip_text(rootWidget, null); int eventPtr = 0; int tipWindow = org.eclipse.swt.widgets.OS.GTK_WIDGET_WINDOW(rootWidget); if (tipWindow != 0) { int[] x = new int[1]; int[] y = new int[1]; int window = org.eclipse.swt.widgets.OS.gdk_window_at_pointer(x, y); int[] user_data = new int[1]; if (window != 0) org.eclipse.swt.widgets.OS.gdk_window_get_user_data(window, user_data); if (tipWidget == (user_data[0])) { eventPtr = org.eclipse.swt.widgets.OS.gdk_event_new(OS.GDK_MOTION_NOTIFY); org.eclipse.swt.widgets.GdkEventMotion event = new org.eclipse.swt.widgets.GdkEventMotion(); event.type = OS.GDK_MOTION_NOTIFY; event.window = org.eclipse.swt.widgets.OS.g_object_ref(tipWindow); event.x = x[0]; event.y = y[0]; org.eclipse.swt.widgets.OS.gdk_window_get_origin(window, x, y); event.x_root = (event.x) + (x[0]); event.y_root = (event.y) + (y[0]); org.eclipse.swt.widgets.OS.memmove(eventPtr, event, GdkEventMotion.sizeof); org.eclipse.swt.widgets.OS.gtk_main_do_event(eventPtr); } } org.eclipse.swt.widgets.OS.gtk_widget_set_tooltip_text(rootWidget, buffer); if (eventPtr != 0) { org.eclipse.swt.widgets.OS.gtk_main_do_event(eventPtr); org.eclipse.swt.widgets.OS.gdk_event_free(eventPtr); } } else { byte[] buffer = null; if ((string != null) && ((string.length()) > 0)) { char[] chars = fixMnemonic(string, false); buffer = org.eclipse.swt.widgets.Converter.wcsToMbcs(null, chars, true); } if ((tooltipsHandle) == 0) { tooltipsHandle = org.eclipse.swt.widgets.OS.gtk_tooltips_new(); if ((tooltipsHandle) == 0) error(SWT.ERROR_NO_HANDLES); org.eclipse.swt.widgets.OS.g_object_ref(tooltipsHandle); org.eclipse.swt.widgets.OS.gtk_object_sink(tooltipsHandle); } if ((OS.GTK_VERSION) >= (org.eclipse.swt.widgets.OS.VERSION(2, 2, 1))) { org.eclipse.swt.widgets.OS.gtk_tooltips_force_window(tooltipsHandle); } int tipWindow = org.eclipse.swt.widgets.OS.GTK_TOOLTIPS_TIP_WINDOW(tooltipsHandle); if ((tipWindow != 0) && (tipWindow != (tooltipWindow))) { org.eclipse.swt.widgets.OS.g_signal_connect(tipWindow, OS.size_allocate, display.sizeAllocateProc, shellHandle); tooltipWindow = tipWindow; } boolean set = true; if (tipWindow != 0) { if (((org.eclipse.swt.widgets.OS.GTK_WIDGET_FLAGS(tipWidget)) & ((OS.GTK_REALIZED) | (OS.GTK_VISIBLE))) != 0) { int[] x = new int[1]; int[] y = new int[1]; int window = org.eclipse.swt.widgets.OS.gdk_window_at_pointer(x, y); if (window != 0) { int[] user_data = new int[1]; org.eclipse.swt.widgets.OS.gdk_window_get_user_data(window, user_data); if (tipWidget == (user_data[0])) { set = false; int handler_id = org.eclipse.swt.widgets.OS.g_signal_connect(tipWindow, OS.size_request, display.sizeRequestProc, shellHandle); org.eclipse.swt.widgets.OS.gtk_tooltips_set_tip(tooltipsHandle, tipWidget, buffer, null); org.eclipse.swt.widgets.OS.gtk_widget_hide(tipWindow); int data = org.eclipse.swt.widgets.OS.gtk_tooltips_data_get(tipWidget); org.eclipse.swt.widgets.OS.GTK_TOOLTIPS_SET_ACTIVE(tooltipsHandle, data); org.eclipse.swt.widgets.OS.gtk_tooltips_set_tip(tooltipsHandle, tipWidget, buffer, null); if (handler_id != 0) org.eclipse.swt.widgets.OS.g_signal_handler_disconnect(tipWindow, handler_id); } } } } if (set) org.eclipse.swt.widgets.OS.gtk_tooltips_set_tip(tooltipsHandle, tipWidget, buffer, null); } }
org.eclipse.swt.widgets.LRESULT sendMouseDownEvent(int type, int button, int msg, int wParam, int lParam) { org.eclipse.swt.widgets.LVHITTESTINFO pinfo = new org.eclipse.swt.widgets.LVHITTESTINFO(); pinfo.x = ((short) (lParam & 65535)); pinfo.y = ((short) (lParam >> 16)); org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_HITTEST, 0, pinfo); org.eclipse.swt.widgets.Display display = this.display; display.captureChanged = false; if (!(sendMouseEvent(type, button, handle, msg, wParam, lParam))) { if ((!(display.captureChanged)) && (!(isDisposed()))) { if ((org.eclipse.swt.widgets.OS.GetCapture()) != (handle)) org.eclipse.swt.widgets.OS.SetCapture(handle); } return LRESULT.ZERO; } org.eclipse.swt.widgets.OS.SetFocus(handle); if (((((style) & (SWT.SINGLE)) != 0) || (hooks(SWT.MouseDown))) || (hooks(SWT.MouseUp))) { if ((pinfo.iItem) == (-1)) { if ((!(display.captureChanged)) && (!(isDisposed()))) { if ((org.eclipse.swt.widgets.OS.GetCapture()) != (handle)) org.eclipse.swt.widgets.OS.SetCapture(handle); } return LRESULT.ZERO; } } boolean forceSelect = false; int count = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_GETSELECTEDCOUNT, 0, 0); if ((count == 1) && ((pinfo.iItem) != (-1))) { org.eclipse.swt.widgets.LVITEM lvItem = new org.eclipse.swt.widgets.LVITEM(); lvItem.mask = OS.LVIF_STATE; lvItem.stateMask = OS.LVIS_SELECTED; lvItem.iItem = pinfo.iItem; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_GETITEM, 0, lvItem); if (((lvItem.state) & (OS.LVIS_SELECTED)) != 0) { forceSelect = true; } } boolean dragDetect = (((state) & (DRAG_DETECT)) != 0) && (hooks(SWT.DragDetect)); if (!dragDetect) { int flags = (OS.LVHT_ONITEMICON) | (OS.LVHT_ONITEMLABEL); dragDetect = ((pinfo.iItem) == (-1)) || (((pinfo.flags) & flags) == 0); } ignoreMenuDetect = true; if (!dragDetect) display.runDragDrop = false; int code = callWindowProc(handle, msg, wParam, lParam, forceSelect); if (!dragDetect) display.runDragDrop = true; ignoreMenuDetect = false; if ((dragStarted) || (!dragDetect)) { if ((!(display.captureChanged)) && (!(isDisposed()))) { if ((org.eclipse.swt.widgets.OS.GetCapture()) != (handle)) org.eclipse.swt.widgets.OS.SetCapture(handle); } } else { int flags = (OS.LVHT_ONITEMLABEL) | (OS.LVHT_ONITEMICON); boolean fakeMouseUp = ((pinfo.flags) & flags) != 0; if ((!fakeMouseUp) && (((style) & (SWT.MULTI)) != 0)) { fakeMouseUp = ((pinfo.flags) & (OS.LVHT_ONITEMSTATEICON)) == 0; } if (fakeMouseUp) { sendMouseEvent(SWT.MouseUp, button, handle, msg, wParam, lParam); } } dragStarted = false; return new org.eclipse.swt.widgets.LRESULT(code); }
java.lang.String getProfilePath() { java.lang.String baseDir = java.lang.System.getProperty("user.home"); if (baseDir.equals("?")) { int ptr = org.eclipse.swt.browser.C.getenv(org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, "HOME", true)); if (ptr != 0) { int length = org.eclipse.swt.browser.C.strlen(ptr); byte[] bytes = new byte[length]; org.eclipse.swt.browser.C.memmove(bytes, ptr, length); baseDir = new java.lang.String(org.eclipse.swt.browser.MozillaDelegate.mbcsToWcs(null, bytes)); } } return (((baseDir + (Mozilla.SEPARATOR_OS)) + ".mozilla") + (Mozilla.SEPARATOR_OS)) + "eclipse"; }
void release() { org.eclipse.swt.accessibility.AccessibleFactory.unregisterAccessible(this); if ((accessibleObject) != null) { accessibleObject.release(); accessibleObject = null; } accessibleListeners = null; controlListeners = null; textListeners = null; }
public boolean readAndDispatch() { checkDevice(); if (!(org.eclipse.swt.widgets.Display.fgInitCursorCalled)) { org.eclipse.swt.widgets.OS.InitCursor(); org.eclipse.swt.widgets.Display.fgInitCursorCalled = true; } int[] evt = new int[1]; int rc = org.eclipse.swt.widgets.OS.ReceiveNextEvent(null, OS.kEventDurationNoWait, true, evt); switch (rc) { case OS.kNoErr : int event = evt[0]; if (((org.eclipse.swt.widgets.OS.GetEventClass(event)) == (org.eclipse.swt.widgets.Display.SWT_USER_EVENT)) && ((org.eclipse.swt.widgets.OS.GetEventKind(event)) == 54322)) { org.eclipse.swt.widgets.OS.ReleaseEvent(event); break; } org.eclipse.swt.widgets.OS.SendEventToEventTarget(event, org.eclipse.swt.widgets.OS.GetEventDispatcherTarget()); org.eclipse.swt.widgets.OS.ReleaseEvent(event); runDeferredEvents(); return true; case OS.eventLoopTimedOutErr : break; default : java.lang.System.out.println(("readAndDispatch: error " + rc)); break; } return runAsyncMessages(); }
public CCombo(org.eclipse.swt.custom.Composite parent, int style) { super(parent, (style = org.eclipse.swt.custom.CCombo.checkStyle(style))); int textStyle = SWT.SINGLE; if ((style & (SWT.READ_ONLY)) != 0) textStyle |= SWT.READ_ONLY; if ((style & (SWT.FLAT)) != 0) textStyle |= SWT.FLAT; text = new org.eclipse.swt.custom.Text(this, textStyle); popup = new org.eclipse.swt.custom.Shell(getDisplay(), ((SWT.NO_TRIM) | (SWT.ON_TOP))); int listStyle = (SWT.SINGLE) | (SWT.V_SCROLL); if ((style & (SWT.FLAT)) != 0) listStyle |= SWT.FLAT; if ((style & (SWT.RIGHT_TO_LEFT)) != 0) listStyle |= SWT.RIGHT_TO_LEFT; if ((style & (SWT.LEFT_TO_RIGHT)) != 0) listStyle |= SWT.LEFT_TO_RIGHT; list = new org.eclipse.swt.custom.List(popup, listStyle); int arrowStyle = (SWT.ARROW) | (SWT.DOWN); if ((style & (SWT.FLAT)) != 0) arrowStyle |= SWT.FLAT; arrow = new org.eclipse.swt.custom.Button(this, arrowStyle); org.eclipse.swt.custom.Listener listener = new org.eclipse.swt.custom.Listener() { public void handleEvent(org.eclipse.swt.custom.Event event) { if ((popup) == (event.widget)) { popupEvent(event); return; } if ((text) == (event.widget)) { textEvent(event); return; } if ((list) == (event.widget)) { listEvent(event); return; } if ((arrow) == (event.widget)) { arrowEvent(event); return; } if ((org.eclipse.swt.custom.CCombo.this) == (event.widget)) { comboEvent(event); return; } } }; int[] comboEvents = new int[]{ SWT.Dispose, SWT.Move, SWT.Resize }; for (int i = 0; i < (comboEvents.length); i++) this.addListener(comboEvents[i], listener); int[] popupEvents = new int[]{ SWT.Close, SWT.Paint, SWT.Deactivate }; for (int i = 0; i < (popupEvents.length); i++) popup.addListener(popupEvents[i], listener); int[] textEvents = new int[]{ SWT.KeyDown, SWT.KeyUp, SWT.Modify, SWT.MouseDown, SWT.MouseUp, SWT.Traverse, SWT.FocusIn, SWT.FocusOut }; for (int i = 0; i < (textEvents.length); i++) text.addListener(textEvents[i], listener); int[] listEvents = new int[]{ SWT.MouseUp, SWT.Selection, SWT.Traverse, SWT.KeyDown, SWT.KeyUp, SWT.FocusIn, SWT.FocusOut }; for (int i = 0; i < (listEvents.length); i++) list.addListener(listEvents[i], listener); int[] arrowEvents = new int[]{ SWT.Selection, SWT.FocusIn, SWT.FocusOut }; for (int i = 0; i < (arrowEvents.length); i++) arrow.addListener(arrowEvents[i], listener); initAccessible(); }
void setCheckboxImageList() { if (((style) & (SWT.CHECK)) == 0) return; int count = 5; int flags = 0; if (OS.IsWinCE) { flags |= OS.ILC_COLOR; } else { if (((OS.COMCTL32_MAJOR) >= 6) && (org.eclipse.swt.widgets.OS.IsAppThemed())) { flags |= OS.ILC_COLOR32; } else { int hDC = org.eclipse.swt.widgets.OS.GetDC(handle); int bits = org.eclipse.swt.widgets.OS.GetDeviceCaps(hDC, OS.BITSPIXEL); int planes = org.eclipse.swt.widgets.OS.GetDeviceCaps(hDC, OS.PLANES); org.eclipse.swt.widgets.OS.ReleaseDC(handle, hDC); int depth = bits * planes; switch (depth) { case 4 : flags |= OS.ILC_COLOR4; break; case 8 : flags |= OS.ILC_COLOR8; break; case 16 : flags |= OS.ILC_COLOR16; break; case 24 : flags |= OS.ILC_COLOR24; break; case 32 : flags |= OS.ILC_COLOR32; break; default : flags |= OS.ILC_COLOR; break; } flags |= OS.ILC_MASK; } } if (((style) & (SWT.RIGHT_TO_LEFT)) != 0) flags |= OS.ILC_MIRROR; int height = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETITEMHEIGHT, 0, 0); int width = height; int hStateList = org.eclipse.swt.widgets.OS.ImageList_Create(width, height, flags, count, count); int hDC = org.eclipse.swt.widgets.OS.GetDC(handle); int memDC = org.eclipse.swt.widgets.OS.CreateCompatibleDC(hDC); int hBitmap = org.eclipse.swt.widgets.OS.CreateCompatibleBitmap(hDC, (width * count), height); int hOldBitmap = org.eclipse.swt.widgets.OS.SelectObject(memDC, hBitmap); org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); org.eclipse.swt.widgets.OS.SetRect(rect, 0, 0, (width * count), height); int clrBackground = 0; if (((OS.COMCTL32_MAJOR) >= 6) && (org.eclipse.swt.widgets.OS.IsAppThemed())) { org.eclipse.swt.widgets.Control control = findBackgroundControl(); if (control == null) control = this; clrBackground = control.getBackgroundPixel(); } else { clrBackground = 33554687; } int hBrush = org.eclipse.swt.widgets.OS.CreateSolidBrush(clrBackground); org.eclipse.swt.widgets.OS.FillRect(memDC, rect, hBrush); org.eclipse.swt.widgets.OS.DeleteObject(hBrush); int oldFont = org.eclipse.swt.widgets.OS.SelectObject(hDC, defaultFont()); org.eclipse.swt.widgets.TEXTMETRIC tm = (OS.IsUnicode) ? ((org.eclipse.swt.widgets.TEXTMETRIC) (new org.eclipse.swt.widgets.TEXTMETRICW())) : new org.eclipse.swt.widgets.TEXTMETRICA(); org.eclipse.swt.widgets.OS.GetTextMetrics(hDC, tm); org.eclipse.swt.widgets.OS.SelectObject(hDC, oldFont); int itemWidth = java.lang.Math.min(tm.tmHeight, width); int itemHeight = java.lang.Math.min(tm.tmHeight, height); int left = (width - itemWidth) / 2; int top = ((height - itemHeight) / 2) + 1; org.eclipse.swt.widgets.OS.SetRect(rect, (left + width), top, ((left + width) + itemWidth), (top + itemHeight)); if (((OS.COMCTL32_MAJOR) >= 6) && (org.eclipse.swt.widgets.OS.IsAppThemed())) { int hTheme = org.eclipse.swt.widgets.OS.OpenThemeData(handle, org.eclipse.swt.widgets.BUTTON); org.eclipse.swt.widgets.OS.DrawThemeBackground(hTheme, memDC, OS.BP_CHECKBOX, OS.CBS_UNCHECKEDNORMAL, rect, null); rect.left += width; rect.right += width; org.eclipse.swt.widgets.OS.DrawThemeBackground(hTheme, memDC, OS.BP_CHECKBOX, OS.CBS_CHECKEDNORMAL, rect, null); rect.left += width; rect.right += width; org.eclipse.swt.widgets.OS.DrawThemeBackground(hTheme, memDC, OS.BP_CHECKBOX, OS.CBS_UNCHECKEDNORMAL, rect, null); rect.left += width; rect.right += width; org.eclipse.swt.widgets.OS.DrawThemeBackground(hTheme, memDC, OS.BP_CHECKBOX, OS.CBS_MIXEDNORMAL, rect, null); org.eclipse.swt.widgets.OS.CloseThemeData(hTheme); } else { org.eclipse.swt.widgets.OS.DrawFrameControl(memDC, rect, OS.DFC_BUTTON, ((OS.DFCS_BUTTONCHECK) | (OS.DFCS_FLAT))); rect.left += width; rect.right += width; org.eclipse.swt.widgets.OS.DrawFrameControl(memDC, rect, OS.DFC_BUTTON, (((OS.DFCS_BUTTONCHECK) | (OS.DFCS_CHECKED)) | (OS.DFCS_FLAT))); rect.left += width; rect.right += width; org.eclipse.swt.widgets.OS.DrawFrameControl(memDC, rect, OS.DFC_BUTTON, (((OS.DFCS_BUTTONCHECK) | (OS.DFCS_INACTIVE)) | (OS.DFCS_FLAT))); rect.left += width; rect.right += width; org.eclipse.swt.widgets.OS.DrawFrameControl(memDC, rect, OS.DFC_BUTTON, ((((OS.DFCS_BUTTONCHECK) | (OS.DFCS_CHECKED)) | (OS.DFCS_INACTIVE)) | (OS.DFCS_FLAT))); } org.eclipse.swt.widgets.OS.SelectObject(memDC, hOldBitmap); org.eclipse.swt.widgets.OS.DeleteDC(memDC); org.eclipse.swt.widgets.OS.ReleaseDC(handle, hDC); if (((OS.COMCTL32_MAJOR) >= 6) && (org.eclipse.swt.widgets.OS.IsAppThemed())) { org.eclipse.swt.widgets.OS.ImageList_Add(hStateList, hBitmap, 0); } else { org.eclipse.swt.widgets.OS.ImageList_AddMasked(hStateList, hBitmap, clrBackground); } org.eclipse.swt.widgets.OS.DeleteObject(hBitmap); int hOldStateList = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETIMAGELIST, OS.TVSIL_STATE, 0); org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_SETIMAGELIST, OS.TVSIL_STATE, hStateList); if (hOldStateList != 0) org.eclipse.swt.widgets.OS.ImageList_Destroy(hOldStateList); }
public void widgetSelected(org.eclipse.swt.examples.layoutexample.SelectionEvent e) { final org.eclipse.swt.examples.layoutexample.Shell shell = new org.eclipse.swt.examples.layoutexample.Shell(); shell.setText(org.eclipse.swt.examples.layoutexample.LayoutExample.getResourceString("Generated_Code")); shell.setLayout(new org.eclipse.swt.examples.layoutexample.FillLayout()); final org.eclipse.swt.examples.layoutexample.StyledText text = new org.eclipse.swt.examples.layoutexample.StyledText(shell, ((((SWT.BORDER) | (SWT.MULTI)) | (SWT.V_SCROLL)) | (SWT.H_SCROLL))); java.lang.String layoutCode = generateCode().toString(); if ((layoutCode.length()) == 0) return; text.setText(layoutCode); org.eclipse.swt.examples.layoutexample.Menu bar = new org.eclipse.swt.examples.layoutexample.Menu(shell, SWT.BAR); shell.setMenuBar(bar); org.eclipse.swt.examples.layoutexample.MenuItem editItem = new org.eclipse.swt.examples.layoutexample.MenuItem(bar, SWT.CASCADE); editItem.setText(org.eclipse.swt.examples.layoutexample.LayoutExample.getResourceString("Edit")); org.eclipse.swt.examples.layoutexample.Menu menu = new org.eclipse.swt.examples.layoutexample.Menu(bar); org.eclipse.swt.examples.layoutexample.MenuItem select = new org.eclipse.swt.examples.layoutexample.MenuItem(menu, SWT.PUSH); select.setText(org.eclipse.swt.examples.layoutexample.LayoutExample.getResourceString("Select_All")); select.setAccelerator(((SWT.CTRL) + 'A')); select.addSelectionListener(new org.eclipse.swt.examples.layoutexample.SelectionAdapter() { public void widgetSelected(org.eclipse.swt.examples.layoutexample.SelectionEvent e) { text.selectAll(); } }); org.eclipse.swt.examples.layoutexample.MenuItem copy = new org.eclipse.swt.examples.layoutexample.MenuItem(menu, SWT.PUSH); copy.setText(org.eclipse.swt.examples.layoutexample.LayoutExample.getResourceString("Copy")); copy.setAccelerator(((SWT.CTRL) + 'C')); copy.addSelectionListener(new org.eclipse.swt.examples.layoutexample.SelectionAdapter() { public void widgetSelected(org.eclipse.swt.examples.layoutexample.SelectionEvent e) { text.copy(); } }); org.eclipse.swt.examples.layoutexample.MenuItem exit = new org.eclipse.swt.examples.layoutexample.MenuItem(menu, SWT.PUSH); exit.setText(org.eclipse.swt.examples.layoutexample.LayoutExample.getResourceString("Exit")); exit.addSelectionListener(new org.eclipse.swt.examples.layoutexample.SelectionAdapter() { public void widgetSelected(org.eclipse.swt.examples.layoutexample.SelectionEvent e) { shell.close(); } }); editItem.setMenu(menu); shell.pack(); shell.setSize(400, 500); shell.open(); org.eclipse.swt.examples.layoutexample.Display display = shell.getDisplay(); while (!(shell.isDisposed())) if (!(display.readAndDispatch())) display.sleep(); }
int widgetStyle() { int bits = super.widgetStyle(); if (((style) & (SWT.PASSWORD)) != 0) bits |= OS.ES_PASSWORD; if (((style) & (SWT.CENTER)) != 0) bits |= OS.ES_CENTER; if (((style) & (SWT.RIGHT)) != 0) bits |= OS.ES_RIGHT; if (((style) & (SWT.READ_ONLY)) != 0) bits |= OS.ES_READONLY; if (((style) & (SWT.SINGLE)) != 0) return bits | (OS.ES_AUTOHSCROLL); bits |= ((OS.ES_MULTILINE) | (OS.ES_AUTOHSCROLL)) | (OS.ES_NOHIDESEL); if (((style) & (SWT.WRAP)) != 0) bits &= ~((OS.WS_HSCROLL) | (OS.ES_AUTOHSCROLL)); return bits; }
int _getOffset(int offset, int movement, boolean forward) { checkLayout(); computeRuns(); int length = text.length(); if (!((0 <= offset) && (offset <= length))) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_INVALID_RANGE); if (length == 0) return 0; offset = translateOffset(offset); switch (movement) { case SWT.MOVEMENT_CLUSTER : case SWT.MOVEMENT_CHAR : { if (forward) { offset++; } else { offset--; } return untranslateOffset(offset); } case SWT.MOVEMENT_WORD : { return untranslateOffset(textStorage.nextWordFromIndex(offset, forward)); } case SWT.MOVEMENT_WORD_END : { org.eclipse.swt.graphics.NSRange range = textStorage.doubleClickAtIndex((length == offset ? length - 1 : offset)); return untranslateOffset(((range.location) + (range.length))); } case SWT.MOVEMENT_WORD_START : { org.eclipse.swt.graphics.NSRange range = textStorage.doubleClickAtIndex((length == offset ? length - 1 : offset)); return untranslateOffset(range.location); } default : break; } return -1; }
void createHandle(int index) { state |= (HANDLE) | (THEME_BACKGROUND); fixedHandle = org.eclipse.swt.widgets.OS.g_object_new(display.gtk_fixed_get_type(), 0); if ((fixedHandle) == 0) error(SWT.ERROR_NO_HANDLES); gtk_widget_set_has_window(fixedHandle, true); if (((style) & (SWT.SEPARATOR)) != 0) { if (((style) & (SWT.HORIZONTAL)) != 0) { handle = gtk_separator_new(OS.GTK_ORIENTATION_HORIZONTAL); } else { handle = gtk_separator_new(OS.GTK_ORIENTATION_VERTICAL); } if ((handle) == 0) error(SWT.ERROR_NO_HANDLES); } else { handle = gtk_box_new(OS.GTK_ORIENTATION_HORIZONTAL, false, 0); if ((handle) == 0) error(SWT.ERROR_NO_HANDLES); labelHandle = org.eclipse.swt.widgets.OS.gtk_label_new_with_mnemonic(null); if ((labelHandle) == 0) error(SWT.ERROR_NO_HANDLES); imageHandle = org.eclipse.swt.widgets.OS.gtk_image_new(); if ((imageHandle) == 0) error(SWT.ERROR_NO_HANDLES); org.eclipse.swt.widgets.OS.gtk_container_add(handle, labelHandle); org.eclipse.swt.widgets.OS.gtk_container_add(handle, imageHandle); org.eclipse.swt.widgets.OS.gtk_box_set_child_packing(handle, labelHandle, true, true, 0, OS.GTK_PACK_START); org.eclipse.swt.widgets.OS.gtk_box_set_child_packing(handle, imageHandle, true, true, 0, OS.GTK_PACK_START); } if (((style) & (SWT.BORDER)) != 0) { frameHandle = org.eclipse.swt.widgets.OS.gtk_frame_new(null); if ((frameHandle) == 0) error(SWT.ERROR_NO_HANDLES); org.eclipse.swt.widgets.OS.gtk_container_add(fixedHandle, frameHandle); org.eclipse.swt.widgets.OS.gtk_container_add(frameHandle, handle); org.eclipse.swt.widgets.OS.gtk_frame_set_shadow_type(frameHandle, OS.GTK_SHADOW_ETCHED_IN); } else { org.eclipse.swt.widgets.OS.gtk_container_add(fixedHandle, handle); } if (((style) & (SWT.SEPARATOR)) != 0) return; if (((style) & (SWT.WRAP)) != 0) { org.eclipse.swt.widgets.OS.gtk_label_set_line_wrap(labelHandle, true); if ((OS.GTK_VERSION) >= (org.eclipse.swt.widgets.OS.VERSION(2, 10, 0))) { org.eclipse.swt.widgets.OS.gtk_label_set_line_wrap_mode(labelHandle, OS.PANGO_WRAP_WORD_CHAR); } } setAlignment(); }
public org.eclipse.swt.graphics.Rectangle getBounds() { checkLayout(); org.eclipse.swt.graphics.NSAutoreleasePool pool = null; if (!(org.eclipse.swt.graphics.NSThread.isMainThread())) pool = ((org.eclipse.swt.graphics.NSAutoreleasePool) (new org.eclipse.swt.graphics.NSAutoreleasePool().alloc().init())); try { computeRuns(); org.eclipse.swt.graphics.NSRect rect = layoutManager.usedRectForTextContainer(textContainer); if ((wrapWidth) != (-1)) rect.width = wrapWidth; if ((text.length()) == 0) { org.eclipse.swt.graphics.Font font = ((this.font) != null) ? this.font : device.systemFont; org.eclipse.swt.graphics.NSFont nsFont = font.handle; rect.height = java.lang.Math.max(rect.height, layoutManager.defaultLineHeightForFont(nsFont)); } rect.height = (java.lang.Math.max(rect.height, ((ascent) + (descent)))) + (spacing); return new org.eclipse.swt.graphics.Rectangle(0, 0, ((int) (rect.width)), ((int) (rect.height))); } finally { if (pool != null) pool.release(); } }
public int hashCode() { return ((name.hashCode()) ^ ((getHeight()) << 8)) ^ (style); }
int scrolledHandle() { if ((hwndHeader) == 0) return handle; int count = ((int) (org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0))); return (count == 0) && ((scrollWidth) == 0) ? handle : hwndParent; }
public void moveTo(float x, float y) { if (isDisposed()) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_GRAPHIC_DISPOSED); org.eclipse.swt.graphics.Gdip.GraphicsPath_StartFigure(handle); currentPoint.X = startPoint.X = x; currentPoint.Y = startPoint.Y = y; }
public org.eclipse.swt.widgets.Point computeSize(int wHint, int hHint, boolean changed) { checkWidget(); int width = 100; int height = 21; int[] ptr = new int[1]; if (((style) & (SWT.READ_ONLY)) != 0) { int index = (org.eclipse.swt.internal.carbon.OS.GetControlValue(handle)) - 1; org.eclipse.swt.internal.carbon.OS.CopyMenuItemTextAsCFString(menuHandle, ((short) (index + 1)), ptr); } else { org.eclipse.swt.internal.carbon.OS.GetControlData(handle, ((short) (OS.kHIComboBoxEditTextPart)), OS.kControlEditTextCFStringTag, 4, ptr, null); } if ((ptr[0]) != 0) { org.eclipse.swt.internal.carbon.Point ioBounds = new org.eclipse.swt.internal.carbon.Point(); if ((font) == null) { org.eclipse.swt.internal.carbon.OS.GetThemeTextDimensions(ptr[0], ((short) (OS.kThemeSystemFont)), OS.kThemeStateActive, false, ioBounds, null); } else { int[] currentPort = new int[1]; org.eclipse.swt.internal.carbon.OS.GetPort(currentPort); org.eclipse.swt.internal.carbon.OS.SetPortWindowPort(org.eclipse.swt.internal.carbon.OS.GetControlOwner(handle)); org.eclipse.swt.internal.carbon.OS.TextFont(font.id); org.eclipse.swt.internal.carbon.OS.TextFace(font.style); org.eclipse.swt.internal.carbon.OS.TextSize(font.size); org.eclipse.swt.internal.carbon.OS.GetThemeTextDimensions(ptr[0], ((short) (OS.kThemeCurrentPortFont)), OS.kThemeStateActive, false, ioBounds, null); org.eclipse.swt.internal.carbon.OS.SetPort(currentPort[0]); } width = java.lang.Math.max(width, ioBounds.h); height = java.lang.Math.max(height, ioBounds.v); org.eclipse.swt.internal.carbon.OS.CFRelease(ptr[0]); } org.eclipse.swt.internal.carbon.Rect inset = getInset(); width += (inset.left) + (inset.right); height += (inset.top) + (inset.bottom); if (wHint != (SWT.DEFAULT)) width = wHint; if (hHint != (SWT.DEFAULT)) height = hHint; return new org.eclipse.swt.widgets.Point(width, height); }
public void setVisible(boolean visible) { super.setVisible(visible); if (isDisposed()) return; if (!visible) popup.setVisible(false); }
int filterProc(int xEvent, int gdkEvent, int data2) { int eventType = org.eclipse.swt.widgets.OS.X_EVENT_TYPE(xEvent); if ((eventType != (OS.FocusOut)) && (eventType != (OS.FocusIn))) return 0; org.eclipse.swt.widgets.XFocusChangeEvent xFocusEvent = new org.eclipse.swt.widgets.XFocusChangeEvent(); org.eclipse.swt.widgets.OS.memmove(xFocusEvent, xEvent, XFocusChangeEvent.sizeof); switch (eventType) { case OS.FocusIn : if (((xFocusEvent.mode) == (OS.NotifyNormal)) || ((xFocusEvent.mode) == (OS.NotifyWhileGrabbed))) { if (((xFocusEvent.detail) == (OS.NotifyNonlinear)) || ((xFocusEvent.detail) == (OS.NotifyAncestor))) { if ((tooltipsHandle) != 0) org.eclipse.swt.widgets.OS.gtk_tooltips_enable(tooltipsHandle); display.activeShell = this; display.activePending = false; sendEvent(SWT.Activate); } } break; case OS.FocusOut : if (((xFocusEvent.mode) == (OS.NotifyNormal)) || ((xFocusEvent.mode) == (OS.NotifyWhileGrabbed))) { switch (xFocusEvent.detail) { case OS.NotifyNonlinear : case OS.NotifyNonlinearVirtual : case OS.NotifyVirtual : if ((tooltipsHandle) != 0) org.eclipse.swt.widgets.OS.gtk_tooltips_disable(tooltipsHandle); org.eclipse.swt.widgets.Display display = this.display; sendEvent(SWT.Deactivate); setActiveControl(null); if ((display.activeShell) == (this)) { display.activeShell = null; display.activePending = false; } break; } } break; } return 0; }
public void handleEvent(org.eclipse.swt.browser.Event e) { switch (e.type) { case SWT.Dispose : { if (ignoreDispose) { ignoreDispose = false; break; } ignoreDispose = true; browser.notifyListeners(e.type, e); e.type = SWT.NONE; if (!(frame.isDisposed())) unhookMouseListeners(documents); for (int i = 0; i < (documents.length); i++) { documents[i].dispose(); } documents = null; mouseListener = null; if ((auto) != null) auto.dispose(); auto = null; break; } case SWT.Resize : { frame.setBounds(browser.getClientArea()); break; } case SWT.KeyDown : case SWT.KeyUp : { browser.notifyListeners(e.type, e); break; } } }
void textEvent(org.eclipse.swt.custom.Event event) { switch (event.type) { case SWT.FocusIn : { handleFocus(SWT.FocusIn); break; } case SWT.KeyDown : { if ((event.character) == (SWT.CR)) { dropDown(false); org.eclipse.swt.custom.Event e = new org.eclipse.swt.custom.Event(); e.time = event.time; e.stateMask = event.stateMask; notifyListeners(SWT.DefaultSelection, e); } if (isDisposed()) break; if (((event.keyCode) == (SWT.ARROW_UP)) || ((event.keyCode) == (SWT.ARROW_DOWN))) { event.doit = false; if (((event.stateMask) & (SWT.ALT)) != 0) { boolean dropped = isDropped(); text.selectAll(); if (!dropped) setFocus(); dropDown((!dropped)); break; } int oldIndex = getSelectionIndex(); if ((event.keyCode) == (SWT.ARROW_UP)) { select(java.lang.Math.max((oldIndex - 1), 0)); } else { select(java.lang.Math.min((oldIndex + 1), ((getItemCount()) - 1))); } if (oldIndex != (getSelectionIndex())) { org.eclipse.swt.custom.Event e = new org.eclipse.swt.custom.Event(); e.time = event.time; e.stateMask = event.stateMask; notifyListeners(SWT.Selection, e); } if (isDisposed()) break; } org.eclipse.swt.custom.Event e = new org.eclipse.swt.custom.Event(); e.time = event.time; e.character = event.character; e.keyCode = event.keyCode; e.stateMask = event.stateMask; notifyListeners(SWT.KeyDown, e); break; } case SWT.KeyUp : { org.eclipse.swt.custom.Event e = new org.eclipse.swt.custom.Event(); e.time = event.time; e.character = event.character; e.keyCode = event.keyCode; e.stateMask = event.stateMask; notifyListeners(SWT.KeyUp, e); break; } case SWT.Modify : { list.deselectAll(); org.eclipse.swt.custom.Event e = new org.eclipse.swt.custom.Event(); e.time = event.time; notifyListeners(SWT.Modify, e); break; } case SWT.MouseDown : { if ((event.button) != 1) return; if (text.getEditable()) return; boolean dropped = isDropped(); text.selectAll(); if (!dropped) setFocus(); dropDown((!dropped)); break; } case SWT.MouseUp : { if ((event.button) != 1) return; if (text.getEditable()) return; text.selectAll(); break; } case SWT.Traverse : { switch (event.detail) { case SWT.TRAVERSE_RETURN : case SWT.TRAVERSE_ARROW_PREVIOUS : case SWT.TRAVERSE_ARROW_NEXT : event.doit = false; break; } org.eclipse.swt.custom.Event e = new org.eclipse.swt.custom.Event(); e.time = event.time; e.detail = event.detail; e.doit = event.doit; e.character = event.character; e.keyCode = event.keyCode; notifyListeners(SWT.Traverse, e); event.doit = e.doit; event.detail = e.detail; break; } } }
public void unloadIntoStream(org.eclipse.swt.internal.image.ImageData image, org.eclipse.swt.internal.image.LEDataOutputStream stream) { try { outputStream = stream; unloadIntoByteStream(image); outputStream.flush(); } catch (java.lang.Exception e) { try { outputStream.flush(); } catch (java.lang.Exception f) { } org.eclipse.swt.internal.image.SWT.error(SWT.ERROR_IO, e); } }
int filterProc(int theItem, int infoPtr, int callBackUD, int filterMode) { if (filterMode == (OS.kNavFilteringBrowserList)) { if ((((filterExtensions) != null) && (0 <= (filterIndex))) && ((filterIndex) < (filterExtensions.length))) { org.eclipse.swt.widgets.NavFileOrFolderInfo info = new org.eclipse.swt.widgets.NavFileOrFolderInfo(); org.eclipse.swt.widgets.OS.memmove(info, infoPtr, NavFileOrFolderInfo.sizeof); if (!(info.isFolder)) { org.eclipse.swt.widgets.OS.AECoerceDesc(theItem, OS.typeFSRef, theItem); byte[] fsRef = new byte[80]; if ((org.eclipse.swt.widgets.OS.AEGetDescData(theItem, fsRef, fsRef.length)) == (OS.noErr)) { int url = org.eclipse.swt.widgets.OS.CFURLCreateFromFSRef(OS.kCFAllocatorDefault, fsRef); if (url != 0) { int ext = org.eclipse.swt.widgets.OS.CFURLCopyPathExtension(url); org.eclipse.swt.widgets.OS.CFRelease(url); if (ext != 0) { char[] buffer = new char[org.eclipse.swt.widgets.OS.CFStringGetLength(ext)]; if ((buffer.length) > 0) { org.eclipse.swt.widgets.CFRange range = new org.eclipse.swt.widgets.CFRange(); range.length = buffer.length; org.eclipse.swt.widgets.OS.CFStringGetCharacters(ext, range, buffer); } org.eclipse.swt.widgets.OS.CFRelease(ext); java.lang.String extension = new java.lang.String(buffer); java.lang.String extensions = filterExtensions[filterIndex]; int start = 0; int length = extensions.length(); while (start < length) { int index = extensions.indexOf(org.eclipse.swt.widgets.FileDialog.EXTENSION_SEPARATOR, start); if (index == (-1)) index = length; java.lang.String filter = extensions.substring(start, index).trim(); if ((filter.equals("*")) || (filter.equals("*.*"))) return 1; if (filter.startsWith("*.")) filter = filter.substring(2); if (filter.toLowerCase().equals(extension.toLowerCase())) return 1; start = index + 1; } return 0; } } } return 0; } } } return 1; }
void _setVisible(boolean visible) { if (((style) & ((SWT.BAR) | (SWT.DROP_DOWN))) != 0) return; if (!visible) return; org.eclipse.swt.internal.carbon.Point where = new org.eclipse.swt.internal.carbon.Point(); if (hasLocation) { where.h = ((short) (x)); where.v = ((short) (y)); } else { org.eclipse.swt.internal.carbon.OS.GetGlobalMouse(where); } int timer = 0; org.eclipse.swt.widgets.Display display = this.display; if ((display.pollingTimer) == 0) { int[] id = new int[1]; int eventLoop = org.eclipse.swt.internal.carbon.OS.GetCurrentEventLoop(); org.eclipse.swt.internal.carbon.OS.InstallEventLoopTimer(eventLoop, ((Display.POLLING_TIMEOUT) / 1000.0), ((Display.POLLING_TIMEOUT) / 1000.0), display.pollingProc, 0, id); display.pollingTimer = timer = id[0]; } org.eclipse.swt.internal.carbon.OS.ContextualMenuSelect(handle, where, false, OS.kCMHelpItemRemoveHelp, null, null, null, null, null); if (timer != 0) { org.eclipse.swt.internal.carbon.OS.RemoveEventLoopTimer(timer); display.pollingTimer = 0; } }
void applicationSendEvent(int id, int sel, int event) { org.eclipse.swt.widgets.NSEvent nsEvent = new org.eclipse.swt.widgets.NSEvent(event); org.eclipse.swt.widgets.NSWindow window = nsEvent.window(); int type = ((int) (nsEvent.type())); boolean beep = false; switch (type) { case OS.NSLeftMouseDown : case OS.NSRightMouseDown : case OS.NSOtherMouseDown : beep = true; case OS.NSLeftMouseUp : case OS.NSRightMouseUp : case OS.NSOtherMouseUp : case OS.NSLeftMouseDragged : case OS.NSRightMouseDragged : case OS.NSOtherMouseDragged : case OS.NSMouseMoved : case OS.NSMouseEntered : case OS.NSMouseExited : case OS.NSKeyDown : case OS.NSKeyUp : case OS.NSScrollWheel : if (window != null) { org.eclipse.swt.widgets.Shell shell = ((org.eclipse.swt.widgets.Shell) (getWidget(window.id))); if ((shell != null) && ((shell.getModalShell()) != null)) { if (beep) beep(); return; } } break; } sendEvent = true; if ((((window != null) && (window.isKeyWindow())) && ((nsEvent.type()) == (OS.NSKeyUp))) && (((nsEvent.modifierFlags()) & (OS.NSCommandKeyMask)) != 0)) { window.sendEvent(nsEvent); } else { org.eclipse.swt.widgets.objc_super super_struct = new org.eclipse.swt.widgets.objc_super(); super_struct.receiver = id; super_struct.super_class = org.eclipse.swt.widgets.OS.objc_msgSend(id, OS.sel_superclass); org.eclipse.swt.widgets.OS.objc_msgSendSuper(super_struct, sel, event); } sendEvent = false; }
void setToolTipText(org.eclipse.swt.widgets.Shell shell, java.lang.String newString) { int child = org.eclipse.swt.widgets.OS.gtk_bin_get_child(handle); if (((style) & (SWT.DROP_DOWN)) != 0) { if ((OS.GTK_VERSION) >= (org.eclipse.swt.widgets.OS.VERSION(2, 6, 0))) { int list = org.eclipse.swt.widgets.OS.gtk_container_get_children(child); child = org.eclipse.swt.widgets.OS.g_list_nth_data(list, 0); } if ((arrowHandle) != 0) shell.setToolTipText(arrowHandle, newString); } shell.setToolTipText((child != 0 ? child : handle), newString); }
void updateScrollBar() { if ((hwndParent) != 0) { int columnCount = org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0); if ((columnCount != 0) || ((scrollWidth) != 0)) { org.eclipse.swt.widgets.SCROLLINFO info = new org.eclipse.swt.widgets.SCROLLINFO(); info.cbSize = SCROLLINFO.sizeof; info.fMask = OS.SIF_ALL; int itemCount = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETCOUNT, 0, 0); if (itemCount == 0) { org.eclipse.swt.widgets.OS.GetScrollInfo(hwndParent, OS.SB_VERT, info); info.nPage = (info.nMax) + 1; org.eclipse.swt.widgets.OS.SetScrollInfo(hwndParent, OS.SB_VERT, info, true); } else { org.eclipse.swt.widgets.OS.GetScrollInfo(handle, OS.SB_VERT, info); if ((info.nPage) == 0) info.nPage = (info.nMax) + 1; org.eclipse.swt.widgets.OS.SetScrollInfo(hwndParent, OS.SB_VERT, info, true); } } } }
void decideDestinationWithSuggestedFilename(int download, int filename) { int length = org.eclipse.swt.browser.OS.CFStringGetLength(filename); char[] buffer = new char[length]; org.eclipse.swt.browser.CFRange range = new org.eclipse.swt.browser.CFRange(); range.length = length; org.eclipse.swt.browser.OS.CFStringGetCharacters(filename, range, buffer); java.lang.String name = new java.lang.String(buffer); org.eclipse.swt.browser.FileDialog dialog = new org.eclipse.swt.browser.FileDialog(browser.getShell(), SWT.SAVE); dialog.setText(org.eclipse.swt.browser.SWT.getMessage("SWT_FileDownload")); dialog.setFileName(name); java.lang.String path = dialog.open(); if (path == null) { org.eclipse.swt.browser.Cocoa.objc_msgSend(download, Cocoa.S_release); return; } length = path.length(); char[] chars = new char[length]; path.getChars(0, length, chars, 0); int result = org.eclipse.swt.browser.OS.CFStringCreateWithCharacters(0, chars, length); org.eclipse.swt.browser.Cocoa.objc_msgSend(download, Cocoa.S_setDestinationAllowOverwrite, result, 1); org.eclipse.swt.browser.OS.CFRelease(result); }
void handleTextChanged(org.eclipse.swt.custom.TextChangedEvent event) { int firstLine = content.getLineAtOffset(lastTextChangeStart); resetCache(firstLine, 0); if ((!(isFixedLineHeight())) && ((topIndex) > firstLine)) { topIndex = firstLine; topIndexY = 0; super.redraw(); } else { int lastLine = firstLine + (lastTextChangeNewLineCount); int firstLineTop = getLinePixel(firstLine); int newLastLineBottom = getLinePixel((lastLine + 1)); scrollText(lastLineBottom, newLastLineBottom); super.redraw(0, firstLineTop, clientAreaWidth, (newLastLineBottom - firstLineTop), false); redrawLinesBullet(renderer.redrawLines); } renderer.redrawLines = null; updateSelection(lastTextChangeStart, lastTextChangeReplaceCharCount, lastTextChangeNewCharCount); if (((lastTextChangeReplaceLineCount) > 0) || (wordWrap)) { claimBottomFreeSpace(); } if ((lastTextChangeReplaceCharCount) > 0) { claimRightFreeSpace(); } }
public void setVisible(boolean visible) { checkWidget(); realizeWidget(); if (visible) { org.eclipse.swt.widgets.OS.XtSetMappedWhenManaged(shellHandle, true); if (org.eclipse.swt.widgets.OS.XtIsTopLevelShell(shellHandle)) { org.eclipse.swt.widgets.OS.XtMapWidget(shellHandle); } else { org.eclipse.swt.widgets.OS.XtPopup(shellHandle, OS.XtGrabNone); } do { display.update(); } while (!(isVisible()) ); adjustTrim(); sendEvent(SWT.Show); int mask = ((SWT.PRIMARY_MODAL) | (SWT.APPLICATION_MODAL)) | (SWT.APPLICATION_MODAL); if (((style) & mask) != 0) { org.eclipse.swt.widgets.OS.XUngrabPointer(display.xDisplay, OS.CurrentTime); } } else { org.eclipse.swt.widgets.OS.XtSetMappedWhenManaged(shellHandle, false); if (org.eclipse.swt.widgets.OS.XtIsTopLevelShell(shellHandle)) { org.eclipse.swt.widgets.OS.XtUnmapWidget(shellHandle); } else { org.eclipse.swt.widgets.OS.XtPopdown(shellHandle); } int xDisplay = org.eclipse.swt.widgets.OS.XtDisplay(shellHandle); if (xDisplay == 0) return; int xWindow = org.eclipse.swt.widgets.OS.XtWindow(shellHandle); if (xWindow == 0) return; org.eclipse.swt.widgets.OS.XWithdrawWindow(xDisplay, xWindow, org.eclipse.swt.widgets.OS.XDefaultScreen(xDisplay)); sendEvent(SWT.Hide); } }
void drag(org.eclipse.swt.dnd.Event dragEvent) { org.eclipse.swt.dnd.DNDEvent event = new org.eclipse.swt.dnd.DNDEvent(); event.widget = this; event.x = dragEvent.x; event.y = dragEvent.y; event.time = dragEvent.time; event.doit = true; notifyListeners(DND.DragStart, event); if (((!(event.doit)) || ((transferAgents) == null)) || ((transferAgents.length) == 0)) return; int[] theDrag = new int[1]; if ((org.eclipse.swt.internal.carbon.OS.NewDrag(theDrag)) != (org.eclipse.swt.internal.carbon.OS.noErr)) { event = new org.eclipse.swt.dnd.DNDEvent(); event.widget = this; event.time = ((int) (java.lang.System.currentTimeMillis())); event.doit = false; event.detail = DND.DROP_NONE; notifyListeners(DND.DragEnd, event); return; } org.eclipse.swt.internal.carbon.Point pt = new org.eclipse.swt.internal.carbon.Point(); org.eclipse.swt.internal.carbon.OS.GetGlobalMouse(pt); for (int i = 0; i < (transferAgents.length); i++) { org.eclipse.swt.dnd.Transfer transfer = transferAgents[i]; if (transfer != null) { int[] types = transfer.getTypeIds(); if (transfer instanceof org.eclipse.swt.dnd.FileTransfer) { org.eclipse.swt.dnd.TransferData transferData = new org.eclipse.swt.dnd.TransferData(); transferData.type = types[0]; event = new org.eclipse.swt.dnd.DNDEvent(); event.widget = this; event.time = ((int) (java.lang.System.currentTimeMillis())); event.dataType = transferData; notifyListeners(DND.DragSetData, event); if ((event.data) != null) { for (int j = 0; j < (types.length); j++) { transferData.type = types[j]; transfer.javaToNative(event.data, transferData); if ((transferData.result) == (org.eclipse.swt.internal.carbon.OS.noErr)) { for (int k = 0; k < (transferData.data.length); k++) { byte[] datum = transferData.data[k]; org.eclipse.swt.internal.carbon.OS.AddDragItemFlavor(theDrag[0], (1 + k), types[j], datum, datum.length, 0); } } } } } else { for (int j = 0; j < (types.length); j++) { org.eclipse.swt.internal.carbon.OS.AddDragItemFlavor(theDrag[0], 1, types[j], null, 0, 0); } } } } org.eclipse.swt.internal.carbon.OS.SetDragSendProc(theDrag[0], org.eclipse.swt.dnd.DragSource.DragSendDataProc.getAddress(), control.handle); int theRegion = 0; org.eclipse.swt.dnd.Image newImage = null; try { theRegion = org.eclipse.swt.internal.carbon.OS.NewRgn(); org.eclipse.swt.internal.carbon.OS.SetRectRgn(theRegion, ((short) (pt.h)), ((short) (pt.v)), ((short) ((pt.h) + 20)), ((short) ((pt.v) + 20))); int operations = opToOsOp(getStyle()); org.eclipse.swt.internal.carbon.OS.SetDragAllowableActions(theDrag[0], operations, true); org.eclipse.swt.internal.carbon.OS.SetDragAllowableActions(theDrag[0], operations, false); org.eclipse.swt.dnd.Image image = event.image; if (image != null) { org.eclipse.swt.internal.carbon.CGPoint imageOffsetPt = new org.eclipse.swt.internal.carbon.CGPoint(); imageOffsetPt.x = 0; imageOffsetPt.y = 0; if ((org.eclipse.swt.internal.carbon.OS.CGImageGetAlphaInfo(image.handle)) == (org.eclipse.swt.internal.carbon.OS.kCGImageAlphaNoneSkipFirst)) { org.eclipse.swt.dnd.ImageData data = image.getImageData(); data.alpha = 255; newImage = new org.eclipse.swt.dnd.Image(image.getDevice(), data); image = newImage; } org.eclipse.swt.internal.carbon.OS.SetDragImageWithCGImage(theDrag[0], image.handle, imageOffsetPt, 0); } org.eclipse.swt.internal.carbon.EventRecord theEvent = new org.eclipse.swt.internal.carbon.EventRecord(); theEvent.message = org.eclipse.swt.internal.carbon.OS.kEventMouseMoved; theEvent.modifiers = ((short) (org.eclipse.swt.internal.carbon.OS.GetCurrentEventKeyModifiers())); theEvent.what = ((short) (org.eclipse.swt.internal.carbon.OS.osEvt)); theEvent.where_h = pt.h; theEvent.where_v = pt.v; int result = org.eclipse.swt.internal.carbon.OS.TrackDrag(theDrag[0], theEvent, theRegion); int operation = DND.DROP_NONE; if (result == (org.eclipse.swt.internal.carbon.OS.noErr)) { int[] outAction = new int[1]; org.eclipse.swt.internal.carbon.OS.GetDragDropAction(theDrag[0], outAction); operation = osOpToOp(outAction[0]); } event = new org.eclipse.swt.dnd.DNDEvent(); event.widget = this; event.time = ((int) (java.lang.System.currentTimeMillis())); event.doit = result == (org.eclipse.swt.internal.carbon.OS.noErr); event.detail = operation; notifyListeners(DND.DragEnd, event); } finally { if (theRegion != 0) org.eclipse.swt.internal.carbon.OS.DisposeRgn(theRegion); if (newImage != null) newImage.dispose(); } org.eclipse.swt.internal.carbon.OS.DisposeDrag(theDrag[0]); }
public void add(java.lang.String string, int index) { checkWidget(); if (string == null) error(SWT.ERROR_NULL_ARGUMENT); int count = getItemCount(); if ((0 > index) || (index > count)) error(SWT.ERROR_INVALID_RANGE); char[] buffer = new char[string.length()]; string.getChars(0, buffer.length, buffer, 0); int ptr = org.eclipse.swt.internal.carbon.OS.CFStringCreateWithCharacters(OS.kCFAllocatorDefault, buffer, buffer.length); if (ptr == 0) error(SWT.ERROR_ITEM_NOT_ADDED); int result; int selectionIndex = -1; if (((style) & (SWT.READ_ONLY)) != 0) { selectionIndex = (org.eclipse.swt.internal.carbon.OS.GetControlValue(handle)) - 1; result = org.eclipse.swt.internal.carbon.OS.InsertMenuItemTextWithCFString(menuHandle, ptr, ((short) (index)), 0, 0); if (string.startsWith("-")) { org.eclipse.swt.internal.carbon.OS.ChangeMenuItemAttributes(menuHandle, ((short) (index + 1)), 0, OS.kMenuItemAttrSeparator); } } else { result = org.eclipse.swt.internal.carbon.OS.HIComboBoxInsertTextItemAtIndex(handle, index, ptr); } org.eclipse.swt.internal.carbon.OS.CFRelease(ptr); if (result != (org.eclipse.swt.internal.carbon.OS.noErr)) error(SWT.ERROR_ITEM_NOT_ADDED); if (selectionIndex >= index) org.eclipse.swt.internal.carbon.OS.SetControl32BitValue(handle, (selectionIndex + 2)); }
int createWindowSubclass(int baseClass, java.lang.String newClass) { int cls = org.eclipse.swt.widgets.OS.objc_lookUpClass(newClass); if (cls != 0) return cls; cls = org.eclipse.swt.widgets.OS.objc_allocateClassPair(baseClass, newClass, 0); int proc3 = org.eclipse.swt.widgets.Display.windowCallback3.getAddress(); int proc2 = org.eclipse.swt.widgets.Display.windowCallback2.getAddress(); int proc4 = org.eclipse.swt.widgets.Display.windowCallback4.getAddress(); int view_stringForToolTip_point_userDataProc = org.eclipse.swt.widgets.OS.CALLBACK_view_stringForToolTip_point_userData_(proc4); int accessibilityHitTestProc = org.eclipse.swt.widgets.OS.CALLBACK_accessibilityHitTest_(proc3); org.eclipse.swt.widgets.OS.class_addIvar(cls, org.eclipse.swt.widgets.Display.SWT_OBJECT, org.eclipse.swt.widgets.Display.size, ((byte) (org.eclipse.swt.widgets.Display.align)), org.eclipse.swt.widgets.Display.types); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_sendEvent_, proc3, "@:@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_helpRequested_, proc3, "@:@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_canBecomeKeyWindow, proc2, "@:"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_becomeKeyWindow, proc2, "@:"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_makeFirstResponder_, proc3, "@:@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_noResponderFor_, proc3, "@:@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_view_stringForToolTip_point_userData_, view_stringForToolTip_point_userDataProc, "@:@i{NSPoint}@"); addAccessibilityMethods(cls, proc2, proc3, proc4, accessibilityHitTestProc); org.eclipse.swt.widgets.OS.objc_registerClassPair(cls); return cls; }
static void loadAdditionalLibraries(java.lang.String mozillaPath) { if (Mozilla.IsPre_4) return; java.lang.String libName = "libswt-xulrunner-fix.so"; java.io.File libsDir = new java.io.File((((((org.eclipse.swt.browser.MozillaDelegate.getProfilePath()) + "/libs/") + (org.eclipse.swt.browser.Mozilla.OS())) + '/') + (org.eclipse.swt.browser.Mozilla.Arch()))); java.io.File file = new java.io.File(libsDir, libName); if (!(file.exists())) { java.io.InputStream is = org.eclipse.swt.browser.Library.class.getResourceAsStream(('/' + libName)); if (is != null) { if (!(libsDir.exists())) { libsDir.mkdirs(); } int read; byte[] buffer = new byte[4096]; try { java.io.FileOutputStream os = new java.io.FileOutputStream(file); while ((read = is.read(buffer)) != (-1)) { os.write(buffer, 0, read); } os.close(); is.close(); } catch (java.io.FileNotFoundException e) { } catch (java.io.IOException e) { } } } if (file.exists()) { byte[] bytes = org.eclipse.swt.browser.Converter.wcsToMbcs(null, file.getAbsolutePath(), true); org.eclipse.swt.browser.OS.dlopen(bytes, ((OS.RTLD_NOW) | (OS.RTLD_GLOBAL))); } }
static int checkStyle(int style) { if (OS.USE_CAIRO) { style |= SWT.SMOOTH; } return checkBits(style, SWT.HORIZONTAL, SWT.VERTICAL, 0, 0, 0, 0); }
void onDispose() { inDispose = true; hideToolTip(); if (((showMenu) != null) && (!(showMenu.isDisposed()))) { showMenu.dispose(); showMenu = null; } int length = items.length; for (int i = 0; i < length; i++) { if ((items[i]) != null) { items[i].dispose(); } } selectionGradientColors = null; selectionGradientPercents = null; selectionBgImage = null; selectionBackground = null; selectionForeground = null; }
void doMouseLocationChange(int x, int y, boolean select) { int line = getLineIndex(y); updateCaretDirection = true; if (blockSelection) { x = java.lang.Math.max(leftMargin, java.lang.Math.min(x, ((clientAreaWidth) - (rightMargin)))); y = java.lang.Math.max(topMargin, java.lang.Math.min(y, ((clientAreaHeight) - (bottomMargin)))); if ((doubleClickEnabled) && ((clickCount) > 1)) { boolean wordSelect = ((clickCount) & 1) == 0; if (wordSelect) { org.eclipse.swt.custom.Point left = getPointAtOffset(doubleClickSelection.x); int[] trailing = new int[1]; int offset = getOffsetAtPoint(x, y, trailing, true); if (offset != (-1)) { if (x > (left.x)) { offset = getWordNext((offset + (trailing[0])), SWT.MOVEMENT_WORD_END); setBlockSelectionOffset(doubleClickSelection.x, offset, true); } else { offset = getWordPrevious((offset + (trailing[0])), SWT.MOVEMENT_WORD_START); setBlockSelectionOffset(doubleClickSelection.y, offset, true); } } else { if (x > (left.x)) { setBlockSelectionLocation(left.x, left.y, x, y, true); } else { org.eclipse.swt.custom.Point right = getPointAtOffset(doubleClickSelection.y); setBlockSelectionLocation(right.x, right.y, x, y, true); } } } else { setBlockSelectionLocation(blockXLocation, y, true); } return; } else { if (!select) clearBlockSelection(true, false); int[] trailing = new int[1]; int offset = getOffsetAtPoint(x, y, trailing, true); if (offset != (-1)) { if (select) { setBlockSelectionOffset((offset + (trailing[0])), true); return; } } else { setBlockSelectionLocation(x, y, true); return; } } } if ((line < 0) || ((isSingleLine()) && (line > 0))) { return; } int oldCaretAlignment = caretAlignment; int newCaretOffset = getOffsetAtPoint(x, y); if ((doubleClickEnabled) && ((clickCount) > 1)) { newCaretOffset = doMouseWordSelect(x, newCaretOffset, line); } int newCaretLine = content.getLineAtOffset(newCaretOffset); if (((0 <= y) && (y < (clientAreaHeight))) && ((((0 <= x) && (x < (clientAreaWidth))) || (wordWrap)) || (newCaretLine != (content.getLineAtOffset(caretOffset))))) { if ((newCaretOffset != (caretOffset)) || ((caretAlignment) != oldCaretAlignment)) { caretOffset = newCaretOffset; if (select) doMouseSelection(); showCaret(); } } if (!select) { caretOffset = newCaretOffset; clearSelection(true); } }
int accessibilityActionNames(int id, int sel) { int returnValue = super.accessibilityActionNames(id, sel); if (handleIsAccessible(id)) { if ((accessible) != null) { org.eclipse.swt.widgets.NSArray baseArray = accessible.internal_accessibilityActionNames(ACC.CHILDID_SELF); if (baseArray != null) returnValue = baseArray.id; } if ((hooks(SWT.MenuDetect)) || (((menu) != null) && (!(menu.isDisposed())))) { org.eclipse.swt.widgets.NSArray baseArray = new org.eclipse.swt.widgets.NSArray(returnValue); org.eclipse.swt.widgets.NSMutableArray ourNames = org.eclipse.swt.widgets.NSMutableArray.arrayWithCapacity(((baseArray.count()) + 1)); ourNames.addObjectsFromArray(baseArray); ourNames.addObject(OS.NSAccessibilityShowMenuAction); returnValue = ourNames.id; } } return returnValue; }
org.eclipse.swt.widgets.LRESULT wmNotifyToolTip(org.eclipse.swt.widgets.NMHDR hdr, int wParam, int lParam) { if (OS.IsWinCE) return null; switch (hdr.code) { case OS.NM_CUSTOMDRAW : { if ((toolTipText) != null) break; if (isCustomToolTip()) { org.eclipse.swt.widgets.NMTTCUSTOMDRAW nmcd = new org.eclipse.swt.widgets.NMTTCUSTOMDRAW(); org.eclipse.swt.widgets.OS.MoveMemory(nmcd, lParam, NMTTCUSTOMDRAW.sizeof); return wmNotifyToolTip(nmcd, lParam); } break; } case OS.TTN_GETDISPINFOA : case OS.TTN_GETDISPINFOW : case OS.TTN_SHOW : { org.eclipse.swt.widgets.LRESULT result = super.wmNotify(hdr, wParam, lParam); if (result != null) return result; if ((hdr.code) != (OS.TTN_SHOW)) tipRequested = true; int code = callWindowProc(handle, OS.WM_NOTIFY, wParam, lParam); if ((hdr.code) != (OS.TTN_SHOW)) tipRequested = false; if ((toolTipText) != null) break; if (isCustomToolTip()) { org.eclipse.swt.widgets.LVHITTESTINFO pinfo = new org.eclipse.swt.widgets.LVHITTESTINFO(); int pos = org.eclipse.swt.widgets.OS.GetMessagePos(); org.eclipse.swt.widgets.POINT pt = new org.eclipse.swt.widgets.POINT(); org.eclipse.swt.widgets.OS.POINTSTOPOINT(pt, pos); org.eclipse.swt.widgets.OS.ScreenToClient(handle, pt); pinfo.x = pt.x; pinfo.y = pt.y; if ((org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_SUBITEMHITTEST, 0, pinfo)) >= 0) { org.eclipse.swt.widgets.TableItem item = _getItem(pinfo.iItem); int hDC = org.eclipse.swt.widgets.OS.GetDC(handle); int oldFont = 0; int newFont = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.WM_GETFONT, 0, 0); if (newFont != 0) oldFont = org.eclipse.swt.widgets.OS.SelectObject(hDC, newFont); int hFont = item.fontHandle(pinfo.iSubItem); if (hFont != (-1)) hFont = org.eclipse.swt.widgets.OS.SelectObject(hDC, hFont); org.eclipse.swt.widgets.Event event = sendMeasureItemEvent(item, pinfo.iItem, pinfo.iSubItem, hDC); if ((!(isDisposed())) && (!(item.isDisposed()))) { org.eclipse.swt.widgets.RECT itemRect = new org.eclipse.swt.widgets.RECT(); org.eclipse.swt.widgets.OS.SetRect(itemRect, event.x, event.y, ((event.x) + (event.width)), ((event.y) + (event.height))); if ((hdr.code) == (OS.TTN_SHOW)) { org.eclipse.swt.widgets.RECT toolRect = toolTipRect(itemRect); org.eclipse.swt.widgets.OS.MapWindowPoints(handle, 0, toolRect, 2); int hwndToolTip = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_GETTOOLTIPS, 0, 0); int flags = (OS.SWP_NOACTIVATE) | (OS.SWP_NOZORDER); int width = (toolRect.right) - (toolRect.left); int height = (toolRect.bottom) - (toolRect.top); SetWindowPos(hwndToolTip, 0, toolRect.left, toolRect.top, width, height, flags); } else { org.eclipse.swt.widgets.NMTTDISPINFO lpnmtdi = null; if ((hdr.code) == (OS.TTN_GETDISPINFOA)) { lpnmtdi = new org.eclipse.swt.widgets.NMTTDISPINFOA(); org.eclipse.swt.widgets.OS.MoveMemory(((org.eclipse.swt.widgets.NMTTDISPINFOA) (lpnmtdi)), lParam, NMTTDISPINFOA.sizeof); if ((lpnmtdi.lpszText) != 0) { org.eclipse.swt.widgets.OS.MoveMemory(lpnmtdi.lpszText, new byte[1], 1); org.eclipse.swt.widgets.OS.MoveMemory(lParam, ((org.eclipse.swt.widgets.NMTTDISPINFOA) (lpnmtdi)), NMTTDISPINFOA.sizeof); } } else { lpnmtdi = new org.eclipse.swt.widgets.NMTTDISPINFOW(); org.eclipse.swt.widgets.OS.MoveMemory(((org.eclipse.swt.widgets.NMTTDISPINFOW) (lpnmtdi)), lParam, NMTTDISPINFOW.sizeof); if ((lpnmtdi.lpszText) != 0) { org.eclipse.swt.widgets.OS.MoveMemory(lpnmtdi.lpszText, new char[1], 2); org.eclipse.swt.widgets.OS.MoveMemory(lParam, ((org.eclipse.swt.widgets.NMTTDISPINFOW) (lpnmtdi)), NMTTDISPINFOW.sizeof); } } org.eclipse.swt.widgets.RECT cellRect = item.getBounds(pinfo.iItem, pinfo.iSubItem, true, true, true, true, hDC); org.eclipse.swt.widgets.RECT clientRect = new org.eclipse.swt.widgets.RECT(); org.eclipse.swt.widgets.OS.GetClientRect(handle, clientRect); if (((itemRect.right) > (cellRect.right)) || ((itemRect.right) > (clientRect.right))) { java.lang.String string = " "; if (string != null) { org.eclipse.swt.widgets.Shell shell = getShell(); char[] chars = new char[(string.length()) + 1]; string.getChars(0, string.length(), chars, 0); if ((hdr.code) == (OS.TTN_GETDISPINFOA)) { byte[] bytes = new byte[(chars.length) * 2]; org.eclipse.swt.widgets.OS.WideCharToMultiByte(getCodePage(), 0, chars, chars.length, bytes, bytes.length, null, null); shell.setToolTipText(lpnmtdi, bytes); org.eclipse.swt.widgets.OS.MoveMemory(lParam, ((org.eclipse.swt.widgets.NMTTDISPINFOA) (lpnmtdi)), NMTTDISPINFOA.sizeof); } else { shell.setToolTipText(lpnmtdi, chars); org.eclipse.swt.widgets.OS.MoveMemory(lParam, ((org.eclipse.swt.widgets.NMTTDISPINFOW) (lpnmtdi)), NMTTDISPINFOW.sizeof); } } } } } if (hFont != (-1)) hFont = org.eclipse.swt.widgets.OS.SelectObject(hDC, hFont); if (newFont != 0) org.eclipse.swt.widgets.OS.SelectObject(hDC, oldFont); org.eclipse.swt.widgets.OS.ReleaseDC(handle, hDC); } } return new org.eclipse.swt.widgets.LRESULT(code); } } return null; }
public boolean open() { checkWidget(); if ((rectangles) == null) return false; boolean cancelled = false; tracking = true; org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); org.eclipse.swt.widgets.MSG msg = new org.eclipse.swt.widgets.MSG(); int hwndTransparent = 0; org.eclipse.swt.widgets.Callback newProc = null; boolean mouseDown = (org.eclipse.swt.widgets.OS.GetKeyState(OS.VK_LBUTTON)) < 0; if (!mouseDown) { int width = org.eclipse.swt.widgets.OS.GetSystemMetrics(OS.SM_CXSCREEN); int height = org.eclipse.swt.widgets.OS.GetSystemMetrics(OS.SM_CYSCREEN); hwndTransparent = org.eclipse.swt.widgets.OS.CreateWindowEx(OS.WS_EX_TRANSPARENT, display.windowClass, null, ((OS.WS_POPUP) | (OS.WS_VISIBLE)), 0, 0, width, height, 0, 0, org.eclipse.swt.widgets.OS.GetModuleHandle(null), null); final int oldProc = org.eclipse.swt.widgets.OS.GetWindowLong(hwndTransparent, OS.GWL_WNDPROC); java.lang.Object windowProc = new java.lang.Object() { public int windowProc(int hwnd, int msg, int wParam, int lParam) { switch (msg) { case OS.WM_NCHITTEST : if (inEvent) return OS.HTTRANSPARENT; break; case OS.WM_SETCURSOR : if ((clientCursor) != 0) { org.eclipse.swt.widgets.OS.SetCursor(clientCursor); return 1; } if ((resizeCursor) != 0) { org.eclipse.swt.widgets.OS.SetCursor(resizeCursor); return 1; } } return org.eclipse.swt.widgets.OS.CallWindowProc(oldProc, hwnd, msg, wParam, lParam); } }; newProc = new org.eclipse.swt.widgets.Callback(windowProc, "windowProc", 4); org.eclipse.swt.widgets.OS.SetWindowLong(hwndTransparent, OS.GWL_WNDPROC, newProc.getAddress()); } drawRectangles(rectangles); org.eclipse.swt.widgets.Point cursorPos; if (mouseDown) { org.eclipse.swt.widgets.POINT pt = new org.eclipse.swt.widgets.POINT(); org.eclipse.swt.widgets.OS.GetCursorPos(pt); cursorPos = new org.eclipse.swt.widgets.Point(pt.x, pt.y); } else { if (((style) & (SWT.RESIZE)) != 0) { cursorPos = adjustResizeCursor(); } else { cursorPos = adjustMoveCursor(); } } int oldX = cursorPos.x; int oldY = cursorPos.y; while ((tracking) && (!cancelled)) { if (((parent) != null) && (parent.isDisposed())) break; org.eclipse.swt.widgets.OS.GetMessage(msg, 0, 0, 0); int message = msg.message; switch (message) { case OS.WM_LBUTTONUP : case OS.WM_MOUSEMOVE : int newPos = org.eclipse.swt.widgets.OS.GetMessagePos(); int newX = ((short) (newPos & 65535)); int newY = ((short) (newPos >> 16)); if ((newX != oldX) || (newY != oldY)) { drawRectangles(rectangles); event.x = newX; event.y = newY; if (((style) & (SWT.RESIZE)) != 0) { resizeRectangles((newX - oldX), (newY - oldY)); cursorPos = adjustResizeCursor(); newX = cursorPos.x; newY = cursorPos.y; inEvent = true; sendEvent(SWT.Resize, event); } else { moveRectangles((newX - oldX), (newY - oldY)); inEvent = true; sendEvent(SWT.Move, event); } inEvent = false; if (isDisposed()) return false; drawRectangles(rectangles); oldX = newX; oldY = newY; } tracking = (msg.message) != (OS.WM_LBUTTONUP); break; case OS.WM_SYSKEYDOWN : cancelled = true; tracking = false; break; case OS.WM_KEYDOWN : int stepSize = ((org.eclipse.swt.widgets.OS.GetKeyState(OS.VK_CONTROL)) < 0) ? org.eclipse.swt.widgets.Tracker.STEPSIZE_SMALL : org.eclipse.swt.widgets.Tracker.STEPSIZE_LARGE; int xChange = 0; int yChange = 0; switch (msg.wParam) { case OS.VK_ESCAPE : cancelled = true; tracking = false; break; case OS.VK_RETURN : tracking = false; break; case OS.VK_LEFT : xChange = -stepSize; break; case OS.VK_RIGHT : xChange = stepSize; break; case OS.VK_UP : yChange = -stepSize; break; case OS.VK_DOWN : yChange = stepSize; break; } if ((xChange != 0) || (yChange != 0)) { drawRectangles(rectangles); newX = oldX + xChange; newY = oldY + yChange; event.x = newX; event.y = newY; if (((style) & (SWT.RESIZE)) != 0) { resizeRectangles(xChange, yChange); cursorPos = adjustResizeCursor(); inEvent = true; sendEvent(SWT.Resize, event); } else { moveRectangles(xChange, yChange); cursorPos = adjustMoveCursor(); inEvent = true; sendEvent(SWT.Move, event); } inEvent = false; if (isDisposed()) return false; drawRectangles(rectangles); oldX = cursorPos.x; oldY = cursorPos.y; } break; } if ((tracking) && (!cancelled)) { if (((OS.WM_KEYFIRST) <= message) && (message <= (OS.WM_KEYLAST))) continue; if (((OS.WM_MOUSEFIRST) <= message) && (message <= (OS.WM_MOUSELAST))) continue; } org.eclipse.swt.widgets.OS.DispatchMessage(msg); } drawRectangles(rectangles); if (hwndTransparent != 0) { org.eclipse.swt.widgets.OS.DestroyWindow(hwndTransparent); } if (newProc != null) { newProc.dispose(); } if ((resizeCursor) != 0) { org.eclipse.swt.widgets.OS.DestroyCursor(resizeCursor); } tracking = false; return !cancelled; }
public int getHeaderHeight() { checkWidget(); if ((OS.GTK_VERSION) >= (org.eclipse.swt.widgets.OS.VERSION(2, 4, 0))) { return (org.eclipse.swt.widgets.OS.GTK_WIDGET_HEIGHT(handle)) - (expanded ? height : 0); } return java.lang.Math.max(parent.getBandHeight(), imageHeight); }
public void setVisible(boolean visible) { super.setVisible(visible); if (isDisposed()) return; if (((popup) == null) || (popup.isDisposed())) return; if (!visible) popup.setVisible(false); }
void shape(final int hdc, final org.eclipse.swt.graphics.TextLayout.StyleItem run) { int[] buffer = new int[1]; char[] chars = new char[run.length]; segmentsText.getChars(run.start, ((run.start) + (run.length)), chars, 0); int maxGlyphs = (((chars.length) * 3) / 2) + 16; int hHeap = org.eclipse.swt.graphics.OS.GetProcessHeap(); run.glyphs = org.eclipse.swt.graphics.OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, (maxGlyphs * 2)); run.clusters = org.eclipse.swt.graphics.OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, (maxGlyphs * 2)); run.visAttrs = org.eclipse.swt.graphics.OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, (maxGlyphs * (org.eclipse.swt.graphics.TextLayout.SCRIPT_VISATTR_SIZEOF))); run.psc = org.eclipse.swt.graphics.OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, 4); if (!(shape(hdc, run, chars, buffer, maxGlyphs))) { if ((mLangFontLink2) != 0) { int[] dwCodePages = new int[1]; int[] cchCodePages = new int[1]; org.eclipse.swt.graphics.OS.VtblCall(4, mLangFontLink2, chars, chars.length, 0, dwCodePages, cchCodePages); int[] hNewFont = new int[1]; if ((org.eclipse.swt.graphics.OS.VtblCall(10, mLangFontLink2, hdc, dwCodePages[0], chars[0], hNewFont)) == (OS.S_OK)) { int hFont = org.eclipse.swt.graphics.OS.SelectObject(hdc, hNewFont[0]); if (shape(hdc, run, chars, buffer, maxGlyphs)) { run.fallbackFont = hNewFont[0]; org.eclipse.swt.graphics.OS.SelectObject(hdc, hFont); } else { org.eclipse.swt.graphics.OS.VtblCall(8, mLangFontLink2, hNewFont[0]); org.eclipse.swt.graphics.OS.SelectObject(hdc, hFont); org.eclipse.swt.graphics.OS.ScriptShape(hdc, run.psc, chars, chars.length, maxGlyphs, run.analysis, run.glyphs, run.clusters, run.visAttrs, buffer); run.glyphCount = buffer[0]; } } } } int[] abc = new int[3]; run.advances = org.eclipse.swt.graphics.OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, ((run.glyphCount) * 4)); run.goffsets = org.eclipse.swt.graphics.OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, ((run.glyphCount) * (org.eclipse.swt.graphics.TextLayout.GOFFSET_SIZEOF))); org.eclipse.swt.graphics.OS.ScriptPlace(hdc, run.psc, run.glyphs, run.glyphCount, run.visAttrs, run.analysis, run.advances, run.goffsets, abc); run.width = ((abc[0]) + (abc[1])) + (abc[2]); org.eclipse.swt.graphics.TEXTMETRIC lptm = (OS.IsUnicode) ? ((org.eclipse.swt.graphics.TEXTMETRIC) (new org.eclipse.swt.graphics.TEXTMETRICW())) : new org.eclipse.swt.graphics.TEXTMETRICA(); org.eclipse.swt.graphics.OS.GetTextMetrics(hdc, lptm); run.ascent = lptm.tmAscent; run.descent = lptm.tmDescent; }
public void setTopPixel(int pixel) { checkWidget(); int lineCount = logicalContent.getLineCount(); int height = getClientArea().height; int maxTopPixel = java.lang.Math.max(0, ((lineCount * (getVerticalIncrement())) - height)); if ((getCharCount()) == 0) { return; } if (pixel < 0) { pixel = 0; } else if (pixel > maxTopPixel) { pixel = maxTopPixel; } setVerticalScrollOffset(pixel, true); }
void createHandle() { org.eclipse.swt.widgets.NSView widget = ((org.eclipse.swt.widgets.NSView) (new org.eclipse.swt.widgets.SWTView().alloc())); widget.init(); org.eclipse.swt.widgets.NSStepper buttonWidget = ((org.eclipse.swt.widgets.NSStepper) (new org.eclipse.swt.widgets.SWTStepper().alloc())); buttonWidget.init(); buttonWidget.setValueWraps((((style) & (SWT.WRAP)) != 0)); buttonWidget.setTarget(buttonWidget); buttonWidget.setAction(OS.sel_sendSelection); buttonWidget.setMaxValue(100); org.eclipse.swt.widgets.NSTextField textWidget = ((org.eclipse.swt.widgets.NSTextField) (new org.eclipse.swt.widgets.SWTTextField().alloc())); textWidget.init(); textWidget.setEditable((((style) & (SWT.READ_ONLY)) == 0)); if (((style) & (SWT.BORDER)) == 0) { textWidget.setFocusRingType(OS.NSFocusRingTypeNone); textWidget.setBordered(false); } textFormatter = ((org.eclipse.swt.widgets.NSNumberFormatter) (new org.eclipse.swt.widgets.NSNumberFormatter().alloc())); textFormatter.init(); widget.addSubview(textWidget); widget.addSubview(buttonWidget); buttonView = buttonWidget; textView = textWidget; view = widget; setSelection(0, false, true, false); }
java.lang.String openChooserDialog() { byte[] titleBytes = org.eclipse.swt.widgets.Converter.wcsToMbcs(null, title, true); int action = (((style) & (SWT.SAVE)) != 0) ? OS.GTK_FILE_CHOOSER_ACTION_SAVE : OS.GTK_FILE_CHOOSER_ACTION_OPEN; long shellHandle = parent.topHandle(); org.eclipse.swt.widgets.Display display = ((parent) != null) ? parent.getDisplay() : org.eclipse.swt.widgets.Display.getCurrent(); if ((display.getDismissalAlignment()) == (SWT.RIGHT)) { handle = org.eclipse.swt.widgets.OS.gtk_file_chooser_dialog_new(titleBytes, shellHandle, action, org.eclipse.swt.widgets.OS.GTK_STOCK_CANCEL(), OS.GTK_RESPONSE_CANCEL, org.eclipse.swt.widgets.OS.GTK_STOCK_OK(), OS.GTK_RESPONSE_OK, 0); } else { handle = org.eclipse.swt.widgets.OS.gtk_file_chooser_dialog_new(titleBytes, shellHandle, action, org.eclipse.swt.widgets.OS.GTK_STOCK_OK(), OS.GTK_RESPONSE_OK, org.eclipse.swt.widgets.OS.GTK_STOCK_CANCEL(), OS.GTK_RESPONSE_CANCEL, 0); } if ((handle) == 0) error(SWT.ERROR_NO_HANDLES); org.eclipse.swt.widgets.OS.gtk_window_set_modal(handle, true); if ((OS.GTK_VERSION) >= (org.eclipse.swt.widgets.OS.VERSION(2, 10, 0))) { long group = org.eclipse.swt.widgets.OS.gtk_window_get_group(0); org.eclipse.swt.widgets.OS.gtk_window_group_add_window(group, handle); } long pixbufs = org.eclipse.swt.widgets.OS.gtk_window_get_icon_list(shellHandle); if (pixbufs != 0) { org.eclipse.swt.widgets.OS.gtk_window_set_icon_list(handle, pixbufs); org.eclipse.swt.widgets.OS.g_list_free(pixbufs); } if (uriMode) { org.eclipse.swt.widgets.OS.gtk_file_chooser_set_local_only(handle, false); } presetChooserDialog(); display.addIdleProc(); java.lang.String answer = null; org.eclipse.swt.widgets.Dialog oldModal = null; if (org.eclipse.swt.widgets.OS.gtk_window_get_modal(handle)) { oldModal = display.getModalDialog(); display.setModalDialog(this); } int signalId = 0; long hookId = 0; if (((style) & (SWT.RIGHT_TO_LEFT)) != 0) { signalId = org.eclipse.swt.widgets.OS.g_signal_lookup(OS.map, org.eclipse.swt.widgets.OS.GTK_TYPE_WIDGET()); hookId = org.eclipse.swt.widgets.OS.g_signal_add_emission_hook(signalId, 0, display.emissionProc, handle, 0); } int response = org.eclipse.swt.widgets.OS.gtk_dialog_run(handle); org.eclipse.swt.widgets.OS.gdk_threads_leave(); if (((style) & (SWT.RIGHT_TO_LEFT)) != 0) { org.eclipse.swt.widgets.OS.g_signal_remove_emission_hook(signalId, hookId); } if (org.eclipse.swt.widgets.OS.gtk_window_get_modal(handle)) { display.setModalDialog(oldModal); } if (response == (OS.GTK_RESPONSE_OK)) { answer = computeResultChooserDialog(); } display.removeIdleProc(); org.eclipse.swt.widgets.OS.gtk_widget_destroy(handle); return answer; }
static org.eclipse.swt.program.NSURL getURL(java.lang.String fileName) { org.eclipse.swt.program.NSString unescapedStr; java.lang.String lowercaseName = fileName.toLowerCase(); if (((lowercaseName.startsWith(org.eclipse.swt.program.Program.PREFIX_HTTP)) || (lowercaseName.startsWith(org.eclipse.swt.program.Program.PREFIX_HTTPS))) || (lowercaseName.startsWith(org.eclipse.swt.program.Program.PREFIX_FILE))) { unescapedStr = org.eclipse.swt.program.NSString.stringWith("%#"); } else { unescapedStr = org.eclipse.swt.program.NSString.stringWith("%"); } org.eclipse.swt.program.NSString fullPath = org.eclipse.swt.program.NSString.stringWith(fileName); if (org.eclipse.swt.program.NSFileManager.defaultManager().fileExistsAtPath(fullPath)) { fullPath = org.eclipse.swt.program.NSURL.fileURLWithPath(fullPath).absoluteString(); } int ptr = org.eclipse.swt.program.OS.CFURLCreateStringByAddingPercentEscapes(0, fullPath.id, unescapedStr.id, 0, OS.kCFStringEncodingUTF8); org.eclipse.swt.program.NSString escapedString = new org.eclipse.swt.program.NSString(ptr); org.eclipse.swt.program.NSURL url = org.eclipse.swt.program.NSURL.URLWithString(escapedString); org.eclipse.swt.program.OS.CFRelease(ptr); return url; }
void shape(final int hdc, final org.eclipse.swt.graphics.TextLayout.StyleItem run) { int[] buffer = new int[1]; char[] chars = new char[run.length]; segmentsText.getChars(run.start, ((run.start) + (run.length)), chars, 0); int maxGlyphs = (((chars.length) * 3) / 2) + 16; int hHeap = org.eclipse.swt.graphics.OS.GetProcessHeap(); run.glyphs = org.eclipse.swt.graphics.OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, (maxGlyphs * 2)); run.clusters = org.eclipse.swt.graphics.OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, (maxGlyphs * 2)); run.visAttrs = org.eclipse.swt.graphics.OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, (maxGlyphs * (org.eclipse.swt.graphics.TextLayout.SCRIPT_VISATTR_SIZEOF))); run.psc = org.eclipse.swt.graphics.OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, 4); if (!(shape(hdc, run, chars, buffer, maxGlyphs))) { if ((mLangFontLink2) != 0) { int[] dwCodePages = new int[1]; int[] cchCodePages = new int[1]; org.eclipse.swt.graphics.OS.VtblCall(4, mLangFontLink2, chars, chars.length, 0, dwCodePages, cchCodePages); int[] hNewFont = new int[1]; if ((org.eclipse.swt.graphics.OS.VtblCall(10, mLangFontLink2, hdc, dwCodePages[0], chars[0], hNewFont)) == (OS.S_OK)) { int hFont = org.eclipse.swt.graphics.OS.SelectObject(hdc, hNewFont[0]); if (shape(hdc, run, chars, buffer, maxGlyphs)) { run.fallbackFont = hNewFont[0]; } else { org.eclipse.swt.graphics.OS.VtblCall(8, mLangFontLink2, hNewFont[0]); org.eclipse.swt.graphics.OS.SelectObject(hdc, hFont); org.eclipse.swt.graphics.OS.ScriptShape(hdc, run.psc, chars, chars.length, maxGlyphs, run.analysis, run.glyphs, run.clusters, run.visAttrs, buffer); run.glyphCount = buffer[0]; } } } } int[] abc = new int[3]; run.advances = org.eclipse.swt.graphics.OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, ((run.glyphCount) * 4)); run.goffsets = org.eclipse.swt.graphics.OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, ((run.glyphCount) * (org.eclipse.swt.graphics.TextLayout.GOFFSET_SIZEOF))); org.eclipse.swt.graphics.OS.ScriptPlace(hdc, run.psc, run.glyphs, run.glyphCount, run.visAttrs, run.analysis, run.advances, run.goffsets, abc); if (((run.style) != null) && ((run.style.metrics) != null)) { org.eclipse.swt.graphics.GlyphMetrics metrics = run.style.metrics; run.width = (metrics.width) * (java.lang.Math.max(1, run.glyphCount)); run.ascent = metrics.ascent; run.descent = metrics.descent; run.leading = 0; } else { run.width = ((abc[0]) + (abc[1])) + (abc[2]); org.eclipse.swt.graphics.TEXTMETRIC lptm = (OS.IsUnicode) ? ((org.eclipse.swt.graphics.TEXTMETRIC) (new org.eclipse.swt.graphics.TEXTMETRICW())) : new org.eclipse.swt.graphics.TEXTMETRICA(); org.eclipse.swt.graphics.OS.GetTextMetrics(hdc, lptm); run.ascent = lptm.tmAscent; run.descent = lptm.tmDescent; run.leading = lptm.tmInternalLeading; } if ((run.style) != null) { run.ascent += run.style.rise; run.descent -= +(run.style.rise); } }
int windowProc(int hwnd, int msg, int wParam, int lParam) { if ((handle) == 0) return 0; if (hwnd != (handle)) { switch (msg) { case OS.WM_CAPTURECHANGED : { if ((OS.COMCTL32_MAJOR) < 6) { if (lParam != 0) { int hwndHeader = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_GETHEADER, 0, 0); if (lParam != hwndHeader) org.eclipse.swt.widgets.OS.InvalidateRect(hwndHeader, null, true); } } break; } case OS.WM_MOUSELEAVE : { if ((OS.COMCTL32_MAJOR) >= 6) updateHeaderToolTips(); updateHeaderToolTips(); break; } case OS.WM_NOTIFY : { org.eclipse.swt.widgets.NMHDR hdr = new org.eclipse.swt.widgets.NMHDR(); org.eclipse.swt.widgets.OS.MoveMemory(hdr, lParam, NMHDR.sizeof); switch (hdr.code) { case OS.TTN_SHOW : case OS.TTN_POP : case OS.TTN_GETDISPINFOA : case OS.TTN_GETDISPINFOW : return org.eclipse.swt.widgets.OS.SendMessage(handle, msg, wParam, lParam); } break; } case OS.WM_SETCURSOR : { if (wParam == hwnd) { int hitTest = ((short) (org.eclipse.swt.widgets.OS.LOWORD(lParam))); if (hitTest == (OS.HTCLIENT)) { org.eclipse.swt.widgets.HDHITTESTINFO pinfo = new org.eclipse.swt.widgets.HDHITTESTINFO(); int pos = org.eclipse.swt.widgets.OS.GetMessagePos(); org.eclipse.swt.widgets.POINT pt = new org.eclipse.swt.widgets.POINT(); org.eclipse.swt.widgets.OS.POINTSTOPOINT(pt, pos); org.eclipse.swt.widgets.OS.ScreenToClient(hwnd, pt); pinfo.x = pt.x; pinfo.y = pt.y; int hwndHeader = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_GETHEADER, 0, 0); int index = ((int) (org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_HITTEST, 0, pinfo))); if (((0 <= index) && (index < (columnCount))) && (!(columns[index].resizable))) { if (((pinfo.flags) & ((OS.HHT_ONDIVIDER) | (OS.HHT_ONDIVOPEN))) != 0) { org.eclipse.swt.widgets.OS.SetCursor(org.eclipse.swt.widgets.OS.LoadCursor(0, OS.IDC_ARROW)); return 1; } } } } break; } } return callWindowProc(hwnd, msg, wParam, lParam); } if (msg == (Display.DI_GETDRAGIMAGE)) { if (((((!(OS.IsWinCE)) && ((OS.WIN32_VERSION) >= (org.eclipse.swt.widgets.OS.VERSION(6, 0)))) || (((style) & (SWT.VIRTUAL)) != 0)) || (hooks(SWT.EraseItem))) || (hooks(SWT.PaintItem))) { int topIndex = ((int) (org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_GETTOPINDEX, 0, 0))); int selection = ((int) (org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_GETNEXTITEM, (topIndex - 1), OS.LVNI_SELECTED))); if (selection == (-1)) return 0; org.eclipse.swt.widgets.POINT mousePos = new org.eclipse.swt.widgets.POINT(); org.eclipse.swt.widgets.OS.POINTSTOPOINT(mousePos, org.eclipse.swt.widgets.OS.GetMessagePos()); org.eclipse.swt.widgets.OS.MapWindowPoints(0, handle, mousePos, 1); org.eclipse.swt.widgets.RECT clientRect = new org.eclipse.swt.widgets.RECT(); org.eclipse.swt.widgets.OS.GetClientRect(handle, clientRect); org.eclipse.swt.widgets.TableItem item = _getItem(selection); org.eclipse.swt.widgets.RECT rect = item.getBounds(selection, 0, true, true, true); if (((style) & (SWT.FULL_SELECTION)) != 0) { int width = org.eclipse.swt.widgets.Table.DRAG_IMAGE_SIZE; rect.left = java.lang.Math.max(clientRect.left, ((mousePos.x) - (width / 2))); if ((clientRect.right) > ((rect.left) + width)) { rect.right = (rect.left) + width; } else { rect.right = clientRect.right; rect.left = java.lang.Math.max(clientRect.left, ((rect.right) - width)); } } int hRgn = org.eclipse.swt.widgets.OS.CreateRectRgn(rect.left, rect.top, rect.right, rect.bottom); while ((selection = ((int) (org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_GETNEXTITEM, selection, OS.LVNI_SELECTED)))) != (-1)) { if (((rect.bottom) - (rect.top)) > (org.eclipse.swt.widgets.Table.DRAG_IMAGE_SIZE)) break; if ((rect.bottom) > (clientRect.bottom)) break; org.eclipse.swt.widgets.RECT itemRect = item.getBounds(selection, 0, true, true, true); int rectRgn = org.eclipse.swt.widgets.OS.CreateRectRgn(rect.left, itemRect.top, rect.right, itemRect.bottom); org.eclipse.swt.widgets.OS.CombineRgn(hRgn, hRgn, rectRgn, OS.RGN_OR); org.eclipse.swt.widgets.OS.DeleteObject(rectRgn); rect.bottom = itemRect.bottom; } org.eclipse.swt.widgets.OS.GetRgnBox(hRgn, rect); int hdc = org.eclipse.swt.widgets.OS.GetDC(handle); int memHdc = org.eclipse.swt.widgets.OS.CreateCompatibleDC(hdc); org.eclipse.swt.widgets.BITMAPINFOHEADER bmiHeader = new org.eclipse.swt.widgets.BITMAPINFOHEADER(); bmiHeader.biSize = BITMAPINFOHEADER.sizeof; bmiHeader.biWidth = (rect.right) - (rect.left); bmiHeader.biHeight = -((rect.bottom) - (rect.top)); bmiHeader.biPlanes = 1; bmiHeader.biBitCount = 32; bmiHeader.biCompression = OS.BI_RGB; byte[] bmi = new byte[BITMAPINFOHEADER.sizeof]; org.eclipse.swt.widgets.OS.MoveMemory(bmi, bmiHeader, BITMAPINFOHEADER.sizeof); int[] pBits = new int[1]; int memDib = org.eclipse.swt.widgets.OS.CreateDIBSection(0, bmi, OS.DIB_RGB_COLORS, pBits, 0, 0); if (memDib == 0) org.eclipse.swt.widgets.SWT.error(SWT.ERROR_NO_HANDLES); int oldMemBitmap = org.eclipse.swt.widgets.OS.SelectObject(memHdc, memDib); int colorKey = 253; org.eclipse.swt.widgets.POINT pt = new org.eclipse.swt.widgets.POINT(); org.eclipse.swt.widgets.OS.SetWindowOrgEx(memHdc, rect.left, rect.top, pt); org.eclipse.swt.widgets.OS.FillRect(memHdc, rect, findBrush(colorKey, OS.BS_SOLID)); org.eclipse.swt.widgets.OS.OffsetRgn(hRgn, (-(rect.left)), (-(rect.top))); org.eclipse.swt.widgets.OS.SelectClipRgn(memHdc, hRgn); org.eclipse.swt.widgets.OS.PrintWindow(handle, memHdc, 0); org.eclipse.swt.widgets.OS.SetWindowOrgEx(memHdc, pt.x, pt.y, null); org.eclipse.swt.widgets.OS.SelectObject(memHdc, oldMemBitmap); org.eclipse.swt.widgets.OS.DeleteDC(memHdc); org.eclipse.swt.widgets.OS.ReleaseDC(0, hdc); org.eclipse.swt.widgets.OS.DeleteObject(hRgn); org.eclipse.swt.widgets.SHDRAGIMAGE shdi = new org.eclipse.swt.widgets.SHDRAGIMAGE(); shdi.hbmpDragImage = memDib; shdi.crColorKey = colorKey; shdi.sizeDragImage.cx = bmiHeader.biWidth; shdi.sizeDragImage.cy = -(bmiHeader.biHeight); shdi.ptOffset.x = (mousePos.x) - (rect.left); shdi.ptOffset.y = (mousePos.y) - (rect.top); if (((style) & (SWT.MIRRORED)) != 0) { shdi.ptOffset.x = (shdi.sizeDragImage.cx) - (shdi.ptOffset.x); } org.eclipse.swt.widgets.OS.MoveMemory(lParam, shdi, SHDRAGIMAGE.sizeof); return 1; } } return super.windowProc(hwnd, msg, wParam, lParam); }
int kEventMouseDown(int nextHandler, int theEvent, int userData) { int result = super.kEventMouseDown(nextHandler, theEvent, userData); if (result == (org.eclipse.swt.internal.carbon.OS.noErr)) return result; display.grabControl = null; display.runDeferredEvents(); org.eclipse.swt.internal.carbon.Rect rect = new org.eclipse.swt.internal.carbon.Rect(); org.eclipse.swt.internal.carbon.OS.GetControlBounds(handle, rect); int startX = rect.left; int startY = rect.top; int width = (rect.right) - (rect.left); int height = (rect.bottom) - (rect.top); if (!(org.eclipse.swt.internal.carbon.OS.HIVIEW)) { org.eclipse.swt.internal.carbon.OS.GetControlBounds(parent.handle, rect); startX -= rect.left; startY -= rect.top; } org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); event.x = startX; event.y = startY; event.width = width; event.height = height; sendEvent(SWT.Selection, event); if (isDisposed()) return result; if (!(event.doit)) return result; int offsetX; int offsetY; int window = org.eclipse.swt.internal.carbon.OS.GetControlOwner(handle); if (org.eclipse.swt.internal.carbon.OS.HIVIEW) { org.eclipse.swt.internal.carbon.CGPoint pt = new org.eclipse.swt.internal.carbon.CGPoint(); org.eclipse.swt.internal.carbon.OS.GetEventParameter(theEvent, OS.kEventParamWindowMouseLocation, OS.typeHIPoint, null, CGPoint.sizeof, null, pt); org.eclipse.swt.internal.carbon.OS.HIViewConvertPoint(pt, 0, handle); offsetX = ((int) (pt.x)); offsetY = ((int) (pt.y)); } else { int sizeof = org.eclipse.swt.internal.carbon.Point.sizeof; org.eclipse.swt.internal.carbon.Point pt = new org.eclipse.swt.internal.carbon.Point(); org.eclipse.swt.internal.carbon.OS.GetEventParameter(theEvent, OS.kEventParamMouseLocation, OS.typeQDPoint, null, sizeof, null, pt); org.eclipse.swt.internal.carbon.OS.GetWindowBounds(window, ((short) (OS.kWindowContentRgn)), rect); offsetX = (pt.h) - (rect.left); offsetY = (pt.v) - (rect.top); org.eclipse.swt.internal.carbon.OS.GetControlBounds(handle, rect); offsetX -= rect.left; offsetY -= rect.top; } int port = (org.eclipse.swt.internal.carbon.OS.HIVIEW) ? -1 : org.eclipse.swt.internal.carbon.OS.GetWindowPort(window); int[] outModifiers = new int[1]; short[] outResult = new short[1]; org.eclipse.swt.internal.carbon.CGPoint pt = new org.eclipse.swt.internal.carbon.CGPoint(); org.eclipse.swt.internal.carbon.Point outPt = new org.eclipse.swt.internal.carbon.Point(); while ((outResult[0]) != (org.eclipse.swt.internal.carbon.OS.kMouseTrackingMouseUp)) { org.eclipse.swt.internal.carbon.OS.TrackMouseLocationWithOptions(port, 0, OS.kEventDurationForever, outPt, outModifiers, outResult); switch (outResult[0]) { case org.eclipse.swt.internal.carbon.OS.kMouseTrackingMouseDown : case org.eclipse.swt.internal.carbon.OS.kMouseTrackingMouseUp : case org.eclipse.swt.internal.carbon.OS.kMouseTrackingMouseDragged : { int x; int y; if (org.eclipse.swt.internal.carbon.OS.HIVIEW) { org.eclipse.swt.internal.carbon.OS.GetWindowBounds(window, ((short) (OS.kWindowStructureRgn)), rect); pt.x = (outPt.h) - (rect.left); pt.y = (outPt.v) - (rect.top); org.eclipse.swt.internal.carbon.OS.HIViewConvertPoint(pt, 0, parent.handle); x = ((int) (pt.x)); y = ((int) (pt.y)); } else { org.eclipse.swt.internal.carbon.OS.GetControlBounds(parent.handle, rect); x = (outPt.h) - (rect.left); y = (outPt.v) - (rect.top); } int newX = startX; int newY = startY; if (((style) & (SWT.VERTICAL)) != 0) { int clientWidth = (rect.right) - (rect.left); newX = java.lang.Math.min(java.lang.Math.max(0, (x - offsetX)), (clientWidth - width)); } else { int clientHeight = (rect.bottom) - (rect.top); newY = java.lang.Math.min(java.lang.Math.max(0, (y - offsetY)), (clientHeight - height)); } event = new org.eclipse.swt.widgets.Event(); event.x = newX; event.y = newY; event.width = width; event.height = height; sendEvent(SWT.Selection, event); if (isDisposed()) return result; if (event.doit) { setBounds(event.x, event.y, width, height); if (isDisposed()) return result; if (!(org.eclipse.swt.internal.carbon.OS.HIVIEW)) parent.update(true); } if ((outResult[0]) == (org.eclipse.swt.internal.carbon.OS.kMouseTrackingMouseUp)) { org.eclipse.swt.internal.carbon.OS.GetControlBounds(handle, rect); short[] button = new short[1]; org.eclipse.swt.internal.carbon.OS.GetEventParameter(theEvent, OS.kEventParamMouseButton, OS.typeMouseButton, null, 2, null, button); int chord = org.eclipse.swt.internal.carbon.OS.GetCurrentEventButtonState(); int modifiers = org.eclipse.swt.internal.carbon.OS.GetCurrentEventKeyModifiers(); sendMouseEvent(SWT.MouseUp, button[0], true, chord, ((short) (x - (rect.left))), ((short) (y - (rect.top))), modifiers); } break; } default : outResult[0] = org.eclipse.swt.internal.carbon.OS.kMouseTrackingMouseUp; break; } } return org.eclipse.swt.internal.carbon.OS.noErr; }
public void draw(org.eclipse.swt.graphics.GC gc, int x, int y, int selectionStart, int selectionEnd, org.eclipse.swt.graphics.Color selectionForeground, org.eclipse.swt.graphics.Color selectionBackground, int flags) { checkLayout(); if (gc == null) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NULL_ARGUMENT); if (gc.isDisposed()) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_INVALID_ARGUMENT); if ((selectionForeground != null) && (selectionForeground.isDisposed())) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_INVALID_ARGUMENT); if ((selectionBackground != null) && (selectionBackground.isDisposed())) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_INVALID_ARGUMENT); org.eclipse.swt.graphics.NSAutoreleasePool pool = gc.checkGC((((GC.CLIPPING) | (GC.TRANSFORM)) | (GC.FOREGROUND))); try { computeRuns(); int length = translateOffset(text.length()); if ((length == 0) && (flags == 0)) return; gc.handle.saveGraphicsState(); org.eclipse.swt.graphics.NSPoint pt = new org.eclipse.swt.graphics.NSPoint(); pt.x = x; pt.y = y; org.eclipse.swt.graphics.NSRange range = new org.eclipse.swt.graphics.NSRange(); int numberOfGlyphs = layoutManager.numberOfGlyphs(); if (numberOfGlyphs > 0) { range.location = 0; range.length = numberOfGlyphs; layoutManager.drawBackgroundForGlyphRange(range, pt); } boolean hasSelection = ((selectionStart <= selectionEnd) && (selectionStart != (-1))) && (selectionEnd != (-1)); if (hasSelection || ((flags & (SWT.LAST_LINE_SELECTION)) != 0)) { if (selectionBackground == null) selectionBackground = device.getSystemColor(SWT.COLOR_LIST_SELECTION); org.eclipse.swt.graphics.NSColor selectionColor = org.eclipse.swt.graphics.NSColor.colorWithDeviceRed(selectionBackground.handle[0], selectionBackground.handle[1], selectionBackground.handle[2], selectionBackground.handle[3]); org.eclipse.swt.graphics.NSBezierPath path = org.eclipse.swt.graphics.NSBezierPath.bezierPath(); org.eclipse.swt.graphics.NSRect rect = new org.eclipse.swt.graphics.NSRect(); if (hasSelection) { int pRectCount = org.eclipse.swt.graphics.OS.malloc(C.PTR_SIZEOF); range.location = translateOffset(selectionStart); range.length = translateOffset(((selectionEnd - selectionStart) + 1)); int pArray = layoutManager.rectArrayForCharacterRange(range, range, textContainer, pRectCount); int[] rectCount = new int[1]; org.eclipse.swt.graphics.OS.memmove(rectCount, pRectCount, C.PTR_SIZEOF); org.eclipse.swt.graphics.OS.free(pRectCount); for (int k = 0; k < (rectCount[0]); k++ , pArray += NSRect.sizeof) { org.eclipse.swt.graphics.OS.memmove(rect, pArray, NSRect.sizeof); rect.x += pt.x; rect.y += pt.y; path.appendBezierPathWithRect(rect); } } if ((flags & (SWT.LAST_LINE_SELECTION)) != 0) { org.eclipse.swt.graphics.NSRect bounds = lineBounds[((lineBounds.length) - 1)]; rect.x = ((pt.x) + (bounds.x)) + (bounds.width); rect.y = y + (bounds.y); rect.width = ((flags & (SWT.FULL_SELECTION)) != 0) ? 2147483647 : (bounds.height) / 3; rect.height = bounds.height; path.appendBezierPathWithRect(rect); } selectionColor.setFill(); path.fill(); } if (numberOfGlyphs > 0) { range.location = 0; range.length = numberOfGlyphs; float[] fg = gc.data.foreground; boolean defaultFg = ((((fg[0]) == 0) && ((fg[1]) == 0)) && ((fg[2]) == 0)) && ((fg[3]) == 1); if (!defaultFg) { for (int i = 0; i < ((styles.length) - 1); i++) { org.eclipse.swt.graphics.TextLayout.StyleItem run = styles[i]; if (((run.style) != null) && ((run.style.foreground) != null)) continue; if ((((run.style) != null) && (run.style.underline)) && ((run.style.underlineStyle) == (SWT.UNDERLINE_LINK))) continue; range.location = (length != 0) ? translateOffset(run.start) : 0; range.length = (translateOffset(styles[(i + 1)].start)) - (range.location); layoutManager.addTemporaryAttribute(OS.NSForegroundColorAttributeName, gc.data.fg, range); } } range.location = 0; range.length = numberOfGlyphs; layoutManager.drawGlyphsForGlyphRange(range, pt); if (!defaultFg) { range.location = 0; range.length = length; layoutManager.removeTemporaryAttribute(OS.NSForegroundColorAttributeName, range); } org.eclipse.swt.graphics.NSPoint point = new org.eclipse.swt.graphics.NSPoint(); for (int j = 0; j < (styles.length); j++) { org.eclipse.swt.graphics.TextLayout.StyleItem run = styles[j]; org.eclipse.swt.graphics.TextStyle style = run.style; if (style == null) continue; boolean drawUnderline = (style.underline) && (!(isUnderlineSupported(style))); drawUnderline = drawUnderline && (((j + 1) == (styles.length)) || (!(style.isAdherentUnderline(styles[(j + 1)].style)))); boolean drawBorder = (style.borderStyle) != (SWT.NONE); drawBorder = drawBorder && (((j + 1) == (styles.length)) || (!(style.isAdherentBorder(styles[(j + 1)].style)))); if ((!drawUnderline) && (!drawBorder)) continue; int end = ((j + 1) < (styles.length)) ? translateOffset(((styles[(j + 1)].start) - 1)) : length; for (int i = 0; i < ((lineOffsets.length) - 1); i++) { int lineStart = untranslateOffset(lineOffsets[i]); int lineEnd = untranslateOffset(((lineOffsets[(i + 1)]) - 1)); if (drawUnderline) { int start = run.start; for (int k = j; (k > 0) && (style.isAdherentUnderline(styles[(k - 1)].style)); k--) { start = styles[(k - 1)].start; } start = translateOffset(start); if (!((start > lineEnd) || (end < lineStart))) { range.location = java.lang.Math.max(lineStart, start); range.length = ((java.lang.Math.min(lineEnd, end)) + 1) - (range.location); if ((range.length) > 0) { int pRectCount = org.eclipse.swt.graphics.OS.malloc(C.PTR_SIZEOF); int pArray = layoutManager.rectArrayForCharacterRange(range, range, textContainer, pRectCount); int[] rectCount = new int[1]; org.eclipse.swt.graphics.OS.memmove(rectCount, pRectCount, C.PTR_SIZEOF); org.eclipse.swt.graphics.OS.free(pRectCount); org.eclipse.swt.graphics.NSRect rect = new org.eclipse.swt.graphics.NSRect(); gc.handle.saveGraphicsState(); float baseline = layoutManager.typesetter().baselineOffsetInLayoutManager(layoutManager, lineStart); float[] color = null; if ((style.underlineColor) != null) color = style.underlineColor.handle; if ((color == null) && ((style.foreground) != null)) color = style.foreground.handle; if (color != null) { org.eclipse.swt.graphics.NSColor.colorWithDeviceRed(color[0], color[1], color[2], color[3]).setStroke(); } for (int k = 0; k < (rectCount[0]); k++ , pArray += NSRect.sizeof) { org.eclipse.swt.graphics.OS.memmove(rect, pArray, NSRect.sizeof); float underlineX = (pt.x) + (rect.x); float underlineY = (((pt.y) + (rect.y)) + (rect.height)) - baseline; org.eclipse.swt.graphics.NSBezierPath path = org.eclipse.swt.graphics.NSBezierPath.bezierPath(); switch (style.underlineStyle) { case SWT.UNDERLINE_ERROR : { path.setLineWidth(2.0F); path.setLineCapStyle(OS.NSRoundLineCapStyle); path.setLineJoinStyle(OS.NSRoundLineJoinStyle); path.setLineDash(new float[]{ 1, 3.0F }, 2, 0); point.x = underlineX; point.y = underlineY + 0.5F; path.moveToPoint(point); point.x = underlineX + (rect.width); point.y = underlineY + 0.5F; path.lineToPoint(point); break; } case SWT.UNDERLINE_SQUIGGLE : { gc.handle.setShouldAntialias(false); path.setLineWidth(1.0F); path.setLineCapStyle(OS.NSButtLineCapStyle); path.setLineJoinStyle(OS.NSMiterLineJoinStyle); float lineBottom = ((pt.y) + (rect.y)) + (rect.height); float squigglyThickness = 1; float squigglyHeight = 2 * squigglyThickness; float squigglyY = java.lang.Math.min((underlineY - (squigglyHeight / 2)), ((lineBottom - squigglyHeight) - 1)); float[] points = computePolyline(((int) (underlineX)), ((int) (squigglyY)), ((int) (underlineX + (rect.width))), ((int) (squigglyY + squigglyHeight))); point.x = (points[0]) + 0.5F; point.y = (points[1]) + 0.5F; path.moveToPoint(point); for (int p = 2; p < (points.length); p += 2) { point.x = (points[p]) + 0.5F; point.y = (points[(p + 1)]) + 0.5F; path.lineToPoint(point); } break; } } path.stroke(); } gc.handle.restoreGraphicsState(); } } } if (drawBorder) { int start = run.start; for (int k = j; (k > 0) && (style.isAdherentBorder(styles[(k - 1)].style)); k--) { start = styles[(k - 1)].start; } start = translateOffset(start); if (!((start > lineEnd) || (end < lineStart))) { range.location = java.lang.Math.max(lineStart, start); range.length = ((java.lang.Math.min(lineEnd, end)) + 1) - (range.location); if ((range.length) > 0) { int pRectCount = org.eclipse.swt.graphics.OS.malloc(C.PTR_SIZEOF); int pArray = layoutManager.rectArrayForCharacterRange(range, range, textContainer, pRectCount); int[] rectCount = new int[1]; org.eclipse.swt.graphics.OS.memmove(rectCount, pRectCount, C.PTR_SIZEOF); org.eclipse.swt.graphics.OS.free(pRectCount); org.eclipse.swt.graphics.NSRect rect = new org.eclipse.swt.graphics.NSRect(); gc.handle.saveGraphicsState(); float[] color = null; if ((style.borderColor) != null) color = style.borderColor.handle; if ((color == null) && ((style.foreground) != null)) color = style.foreground.handle; if (color != null) { org.eclipse.swt.graphics.NSColor.colorWithDeviceRed(color[0], color[1], color[2], color[3]).setStroke(); } int width = 1; float[] dashes = null; switch (style.borderStyle) { case SWT.BORDER_SOLID : break; case SWT.BORDER_DASH : dashes = (width != 0) ? GC.LINE_DASH : GC.LINE_DASH_ZERO; break; case SWT.BORDER_DOT : dashes = (width != 0) ? GC.LINE_DOT : GC.LINE_DOT_ZERO; break; } float[] lengths = null; if (dashes != null) { lengths = new float[dashes.length]; for (int k = 0; k < (lengths.length); k++) { lengths[k] = (width == 0) ? dashes[k] : (dashes[k]) * width; } } for (int k = 0; k < (rectCount[0]); k++ , pArray += NSRect.sizeof) { org.eclipse.swt.graphics.OS.memmove(rect, pArray, NSRect.sizeof); rect.x += (pt.x) + 0.5F; rect.y += (pt.y) + 0.5F; rect.width -= 0.5F; rect.height -= 0.5F; org.eclipse.swt.graphics.NSBezierPath path = org.eclipse.swt.graphics.NSBezierPath.bezierPath(); path.setLineDash(lengths, (lengths != null ? lengths.length : 0), 0); path.appendBezierPathWithRect(rect); path.stroke(); } gc.handle.restoreGraphicsState(); } } } } } } gc.handle.restoreGraphicsState(); } finally { gc.uncheckGC(pool); } }
void destroyItem(org.eclipse.swt.widgets.TableItem item) { int index = 0; while (index < (itemCount)) { if ((items[index]) == item) break; index++; } if (index == (itemCount)) return; int selection = org.eclipse.swt.widgets.OS.gtk_tree_view_get_selection(handle); org.eclipse.swt.widgets.OS.g_signal_handlers_block_matched(selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, org.eclipse.swt.widgets.CHANGED); org.eclipse.swt.widgets.OS.gtk_list_store_remove(modelHandle, item.handle); org.eclipse.swt.widgets.OS.g_signal_handlers_unblock_matched(selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, org.eclipse.swt.widgets.CHANGED); java.lang.System.arraycopy(items, (index + 1), items, index, ((--(itemCount)) - index)); items[itemCount] = null; if ((itemCount) == 0) resetCustomDraw(); }
boolean setItemLocation() { boolean changed = false; if ((items.length) == 0) return false; org.eclipse.swt.custom.Point size = getSize(); int y = (onBottom) ? java.lang.Math.max(borderBottom, (((size.y) - (borderBottom)) - (tabHeight))) : borderTop; if (single) { int defaultX = (getDisplay().getBounds().width) + 10; for (int i = 0; i < (items.length); i++) { org.eclipse.swt.custom.CTabItem item = items[i]; if (i == (selectedIndex)) { firstIndex = selectedIndex; int oldX = item.x; int oldY = item.y; item.x = borderLeft; item.y = y; item.showing = true; if ((showClose) || (item.showClose)) { item.closeRect.x = (borderLeft) + (CTabItem.LEFT_MARGIN); item.closeRect.y = (onBottom) ? (((size.y) - (borderBottom)) - (tabHeight)) + (((tabHeight) - (org.eclipse.swt.custom.CTabFolder.BUTTON_SIZE)) / 2) : (borderTop) + (((tabHeight) - (org.eclipse.swt.custom.CTabFolder.BUTTON_SIZE)) / 2); } if (((item.x) != oldX) || ((item.y) != oldY)) changed = true; } else { item.x = defaultX; item.showing = false; } } } else { int rightItemEdge = getRightItemEdge(); int maxWidth = rightItemEdge - (borderLeft); int width = 0; for (int i = 0; i < (priority.length); i++) { org.eclipse.swt.custom.CTabItem item = items[priority[i]]; if (width > maxWidth) { item.showing = false; } else { width += item.width; item.showing = (i == 0) || (width <= maxWidth); if ((!(simple)) && ((priority[i]) == (selectedIndex))) width += (curveWidth) - (2 * (curveIndent)); } } int x = 0; int defaultX = (getDisplay().getBounds().width) + 10; firstIndex = (items.length) - 1; for (int i = 0; i < (items.length); i++) { org.eclipse.swt.custom.CTabItem item = items[i]; if (!(item.showing)) { if ((item.x) != defaultX) changed = true; item.x = defaultX; } else { firstIndex = java.lang.Math.min(firstIndex, i); if (((item.x) != x) || ((item.y) != y)) changed = true; item.x = x; item.y = y; if (i == (selectedIndex)) { int edge = java.lang.Math.min(((item.x) + (item.width)), rightItemEdge); item.closeRect.x = (edge - (CTabItem.RIGHT_MARGIN)) - (org.eclipse.swt.custom.CTabFolder.BUTTON_SIZE); } else { item.closeRect.x = (((item.x) + (item.width)) - (CTabItem.RIGHT_MARGIN)) - (org.eclipse.swt.custom.CTabFolder.BUTTON_SIZE); } item.closeRect.y = (onBottom) ? (((size.y) - (borderBottom)) - (tabHeight)) + (((tabHeight) - (org.eclipse.swt.custom.CTabFolder.BUTTON_SIZE)) / 2) : (borderTop) + (((tabHeight) - (org.eclipse.swt.custom.CTabFolder.BUTTON_SIZE)) / 2); x = x + (item.width); if ((!(simple)) && (i == (selectedIndex))) x += (curveWidth) - (2 * (curveIndent)); } } } return changed; }
public void handleEvent(org.eclipse.swt.browser.OleEvent event) { if ((auto) != null) { switch (event.type) { case org.eclipse.swt.browser.IE.BeforeNavigate2 : { org.eclipse.swt.browser.Variant varResult = event.arguments[1]; java.lang.String url = varResult.getString(); if ((uncRedirect) != null) { if ((uncRedirect.equals(url)) || ((uncRedirect.startsWith(url)) && ((uncRedirect.indexOf('\\', 2)) == (url.length())))) { org.eclipse.swt.browser.Variant cancel = event.arguments[6]; if (cancel != null) { int pCancel = cancel.getByRef(); org.eclipse.swt.browser.COM.MoveMemory(pCancel, new short[]{ COM.VARIANT_FALSE }, 2); } break; } else { uncRedirect = null; } } if (((url.indexOf(":/")) == (-1)) && ((url.indexOf(":\\")) != (-1))) { url = (org.eclipse.swt.browser.IE.PROTOCOL_FILE) + (url.replace('\\', '/')); } org.eclipse.swt.browser.LocationEvent newEvent = new org.eclipse.swt.browser.LocationEvent(browser); newEvent.display = browser.getDisplay(); newEvent.widget = browser; newEvent.location = url; newEvent.doit = true; for (int i = 0; i < (locationListeners.length); i++) { locationListeners[i].changing(newEvent); } boolean doit = (newEvent.doit) && (!(browser.isDisposed())); org.eclipse.swt.browser.Variant cancel = event.arguments[6]; if (cancel != null) { int pCancel = cancel.getByRef(); org.eclipse.swt.browser.COM.MoveMemory(pCancel, new short[]{ doit ? COM.VARIANT_FALSE : COM.VARIANT_TRUE }, 2); } if (doit) { lastNavigateURL = url; varResult = event.arguments[0]; org.eclipse.swt.browser.IDispatch dispatch = varResult.getDispatch(); org.eclipse.swt.browser.Variant variant = new org.eclipse.swt.browser.Variant(auto); org.eclipse.swt.browser.IDispatch top = variant.getDispatch(); boolean isTop = (top.getAddress()) == (dispatch.getAddress()); if (isTop) { unhookDOMListeners(documents); for (int i = 0; i < (documents.length); i++) { documents[i].dispose(); } documents = new org.eclipse.swt.browser.OleAutomation[0]; } } break; } case org.eclipse.swt.browser.IE.CommandStateChange : { boolean enabled = false; org.eclipse.swt.browser.Variant varResult = event.arguments[0]; int command = varResult.getInt(); varResult = event.arguments[1]; enabled = varResult.getBoolean(); switch (command) { case org.eclipse.swt.browser.IE.CSC_NAVIGATEBACK : back = enabled; break; case org.eclipse.swt.browser.IE.CSC_NAVIGATEFORWARD : forward = enabled; break; } break; } case org.eclipse.swt.browser.IE.DocumentComplete : { org.eclipse.swt.browser.Variant varResult = event.arguments[0]; org.eclipse.swt.browser.IDispatch dispatch = varResult.getDispatch(); varResult = event.arguments[1]; java.lang.String url = varResult.getString(); if (((url.indexOf(":/")) == (-1)) && ((url.indexOf(":\\")) != (-1))) { url = (org.eclipse.swt.browser.IE.PROTOCOL_FILE) + (url.replace('\\', '/')); } if (((html) != null) && (url.equals(org.eclipse.swt.browser.IE.ABOUT_BLANK))) { if (delaySetText) { delaySetText = false; browser.getDisplay().asyncExec(new java.lang.Runnable() { public void run() { if ((browser.isDisposed()) || ((html) == null)) return; setHTML(html); html = null; } }); } else { setHTML(html); html = null; } } else { org.eclipse.swt.browser.Variant variant = new org.eclipse.swt.browser.Variant(auto); org.eclipse.swt.browser.IDispatch top = variant.getDispatch(); org.eclipse.swt.browser.LocationEvent locationEvent = new org.eclipse.swt.browser.LocationEvent(browser); locationEvent.display = browser.getDisplay(); locationEvent.widget = browser; locationEvent.location = url; locationEvent.top = (top.getAddress()) == (dispatch.getAddress()); for (int i = 0; i < (locationListeners.length); i++) { locationListeners[i].changed(locationEvent); } if (browser.isDisposed()) return; if (((globalDispatch) != 0) && ((dispatch.getAddress()) == (globalDispatch))) { globalDispatch = 0; org.eclipse.swt.browser.IE ie = ((org.eclipse.swt.browser.IE) (browser.webBrowser)); if (ie.installFunctionsOnDocumentComplete) { ie.installFunctionsOnDocumentComplete = false; java.util.Enumeration elements = functions.elements(); while (elements.hasMoreElements()) { org.eclipse.swt.browser.BrowserFunction function = ((org.eclipse.swt.browser.BrowserFunction) (elements.nextElement())); execute(function.functionString); } } org.eclipse.swt.browser.ProgressEvent progressEvent = new org.eclipse.swt.browser.ProgressEvent(browser); progressEvent.display = browser.getDisplay(); progressEvent.widget = browser; for (int i = 0; i < (progressListeners.length); i++) { progressListeners[i].completed(progressEvent); } } } break; } case org.eclipse.swt.browser.IE.NavigateComplete2 : { org.eclipse.swt.browser.Variant varResult = event.arguments[1]; java.lang.String url = varResult.getString(); if ((uncRedirect) != null) { if (uncRedirect.equals(url)) { uncRedirect = null; break; } if (uncRedirect.startsWith(url)) { navigate(uncRedirect, null, null, true); break; } uncRedirect = null; } varResult = event.arguments[0]; org.eclipse.swt.browser.IDispatch dispatch = varResult.getDispatch(); if ((globalDispatch) == 0) globalDispatch = dispatch.getAddress(); org.eclipse.swt.browser.OleAutomation webBrowser = varResult.getAutomation(); org.eclipse.swt.browser.Variant variant = new org.eclipse.swt.browser.Variant(auto); org.eclipse.swt.browser.IDispatch top = variant.getDispatch(); boolean isTop = (top.getAddress()) == (dispatch.getAddress()); if (isTop) { java.util.Enumeration elements = functions.elements(); while (elements.hasMoreElements()) { org.eclipse.swt.browser.BrowserFunction function = ((org.eclipse.swt.browser.BrowserFunction) (elements.nextElement())); execute(function.functionString); } } hookDOMListeners(webBrowser, isTop); webBrowser.dispose(); break; } case org.eclipse.swt.browser.IE.NavigateError : { if ((uncRedirect) != null) { uncRedirect = null; break; } org.eclipse.swt.browser.Variant varResult = event.arguments[1]; final java.lang.String url = varResult.getString(); if (url.startsWith("\\\\")) { varResult = event.arguments[3]; int statusCode = varResult.getInt(); if (statusCode == (org.eclipse.swt.browser.IE.INET_E_RESOURCE_NOT_FOUND)) { int index = url.indexOf('\\', 2); if (index != (-1)) { final java.lang.String host = url.substring(0, index); org.eclipse.swt.browser.Variant cancel = event.arguments[4]; if (cancel != null) { int pCancel = cancel.getByRef(); org.eclipse.swt.browser.COM.MoveMemory(pCancel, new short[]{ COM.VARIANT_TRUE }, 2); } browser.getDisplay().asyncExec(new java.lang.Runnable() { public void run() { if (browser.isDisposed()) return; if (url.endsWith("\\")) { uncRedirect = url.substring(0, ((url.length()) - 1)); } else { uncRedirect = url; } navigate(host, null, null, true); } }); } } } break; } case org.eclipse.swt.browser.IE.NewWindow2 : { org.eclipse.swt.browser.Variant cancel = event.arguments[1]; int pCancel = cancel.getByRef(); org.eclipse.swt.browser.WindowEvent newEvent = new org.eclipse.swt.browser.WindowEvent(browser); newEvent.display = browser.getDisplay(); newEvent.widget = browser; newEvent.required = false; for (int i = 0; i < (openWindowListeners.length); i++) { openWindowListeners[i].open(newEvent); } org.eclipse.swt.browser.IE browser = null; if (((newEvent.browser) != null) && ((newEvent.browser.webBrowser) instanceof org.eclipse.swt.browser.IE)) { browser = ((org.eclipse.swt.browser.IE) (newEvent.browser.webBrowser)); } boolean doit = (browser != null) && (!(browser.browser.isDisposed())); if (doit) { browser.installFunctionsOnDocumentComplete = true; org.eclipse.swt.browser.Variant variant = new org.eclipse.swt.browser.Variant(browser.auto); org.eclipse.swt.browser.IDispatch iDispatch = variant.getDispatch(); org.eclipse.swt.browser.Variant ppDisp = event.arguments[0]; int byref = ppDisp.getByRef(); if (byref != 0) org.eclipse.swt.browser.COM.MoveMemory(byref, new int[]{ iDispatch.getAddress() }, OS.PTR_SIZEOF); } if (newEvent.required) { org.eclipse.swt.browser.COM.MoveMemory(pCancel, new short[]{ doit ? COM.VARIANT_FALSE : COM.VARIANT_TRUE }, 2); } break; } case org.eclipse.swt.browser.IE.OnMenuBar : { org.eclipse.swt.browser.Variant arg0 = event.arguments[0]; menuBar = arg0.getBoolean(); break; } case org.eclipse.swt.browser.IE.OnStatusBar : { org.eclipse.swt.browser.Variant arg0 = event.arguments[0]; statusBar = arg0.getBoolean(); break; } case org.eclipse.swt.browser.IE.OnToolBar : { org.eclipse.swt.browser.Variant arg0 = event.arguments[0]; toolBar = arg0.getBoolean(); if (!(toolBar)) { addressBar = false; menuBar = false; } break; } case org.eclipse.swt.browser.IE.OnVisible : { org.eclipse.swt.browser.Variant arg1 = event.arguments[0]; boolean visible = arg1.getBoolean(); org.eclipse.swt.browser.WindowEvent newEvent = new org.eclipse.swt.browser.WindowEvent(browser); newEvent.display = browser.getDisplay(); newEvent.widget = browser; if (visible) { if (addressBar) { int[] rgdispid = auto.getIDsOfNames(new java.lang.String[]{ "AddressBar" }); org.eclipse.swt.browser.Variant pVarResult = auto.getProperty(rgdispid[0]); if (pVarResult != null) { if ((pVarResult.getType()) == (OLE.VT_BOOL)) { addressBar = pVarResult.getBoolean(); } pVarResult.dispose(); } } newEvent.addressBar = addressBar; newEvent.menuBar = menuBar; newEvent.statusBar = statusBar; newEvent.toolBar = toolBar; newEvent.location = location; newEvent.size = size; for (int i = 0; i < (visibilityWindowListeners.length); i++) { visibilityWindowListeners[i].show(newEvent); } location = null; size = null; } else { for (int i = 0; i < (visibilityWindowListeners.length); i++) { visibilityWindowListeners[i].hide(newEvent); } } break; } case org.eclipse.swt.browser.IE.ProgressChange : { org.eclipse.swt.browser.Variant arg1 = event.arguments[0]; int nProgress = ((arg1.getType()) != (OLE.VT_I4)) ? 0 : arg1.getInt(); org.eclipse.swt.browser.Variant arg2 = event.arguments[1]; int nProgressMax = ((arg2.getType()) != (OLE.VT_I4)) ? 0 : arg2.getInt(); org.eclipse.swt.browser.ProgressEvent newEvent = new org.eclipse.swt.browser.ProgressEvent(browser); newEvent.display = browser.getDisplay(); newEvent.widget = browser; newEvent.current = nProgress; newEvent.total = nProgressMax; if (nProgress != (-1)) { for (int i = 0; i < (progressListeners.length); i++) { progressListeners[i].changed(newEvent); } } break; } case org.eclipse.swt.browser.IE.StatusTextChange : { org.eclipse.swt.browser.Variant arg1 = event.arguments[0]; if ((arg1.getType()) == (OLE.VT_BSTR)) { java.lang.String text = arg1.getString(); org.eclipse.swt.browser.StatusTextEvent newEvent = new org.eclipse.swt.browser.StatusTextEvent(browser); newEvent.display = browser.getDisplay(); newEvent.widget = browser; newEvent.text = text; for (int i = 0; i < (statusTextListeners.length); i++) { statusTextListeners[i].changed(newEvent); } } break; } case org.eclipse.swt.browser.IE.TitleChange : { org.eclipse.swt.browser.Variant arg1 = event.arguments[0]; if ((arg1.getType()) == (OLE.VT_BSTR)) { java.lang.String title = arg1.getString(); org.eclipse.swt.browser.TitleEvent newEvent = new org.eclipse.swt.browser.TitleEvent(browser); newEvent.display = browser.getDisplay(); newEvent.widget = browser; newEvent.title = title; for (int i = 0; i < (titleListeners.length); i++) { titleListeners[i].changed(newEvent); } } break; } case org.eclipse.swt.browser.IE.WindowClosing : { browser.getDisplay().asyncExec(new java.lang.Runnable() { public void run() { if (browser.isDisposed()) return; org.eclipse.swt.browser.WindowEvent newEvent = new org.eclipse.swt.browser.WindowEvent(browser); newEvent.display = browser.getDisplay(); newEvent.widget = browser; for (int i = 0; i < (closeWindowListeners.length); i++) { closeWindowListeners[i].close(newEvent); } browser.dispose(); } }); org.eclipse.swt.browser.Variant cancel = event.arguments[1]; int pCancel = cancel.getByRef(); org.eclipse.swt.browser.Variant arg1 = event.arguments[0]; boolean isChildWindow = arg1.getBoolean(); org.eclipse.swt.browser.COM.MoveMemory(pCancel, new short[]{ isChildWindow ? COM.VARIANT_FALSE : COM.VARIANT_TRUE }, 2); break; } case org.eclipse.swt.browser.IE.WindowSetHeight : { if ((size) == null) size = new org.eclipse.swt.browser.Point(0, 0); org.eclipse.swt.browser.Variant arg1 = event.arguments[0]; size.y = arg1.getInt(); break; } case org.eclipse.swt.browser.IE.WindowSetLeft : { if ((location) == null) location = new org.eclipse.swt.browser.Point(0, 0); org.eclipse.swt.browser.Variant arg1 = event.arguments[0]; location.x = arg1.getInt(); break; } case org.eclipse.swt.browser.IE.WindowSetTop : { if ((location) == null) location = new org.eclipse.swt.browser.Point(0, 0); org.eclipse.swt.browser.Variant arg1 = event.arguments[0]; location.y = arg1.getInt(); break; } case org.eclipse.swt.browser.IE.WindowSetWidth : { if ((size) == null) size = new org.eclipse.swt.browser.Point(0, 0); org.eclipse.swt.browser.Variant arg1 = event.arguments[0]; size.x = arg1.getInt(); break; } } } org.eclipse.swt.browser.Variant[] arguments = event.arguments; for (int i = 0; i < (arguments.length); i++) arguments[i].dispose(); }
void showItem(org.eclipse.swt.widgets.TreeItem item, boolean scroll) { org.eclipse.swt.widgets.TreeItem parentItem = item.parentItem; if ((parentItem != null) && (!(parentItem.expanded))) { showItem(parentItem, false); parentItem.setExpanded(true); } if (scroll) { org.eclipse.swt.widgets.NSOutlineView outlineView = ((org.eclipse.swt.widgets.NSOutlineView) (view)); outlineView.scrollRowToVisible(outlineView.rowForItem(item.handle)); } }
public void draw(org.eclipse.swt.graphics.GC gc, int x, int y, int selectionStart, int selectionEnd, org.eclipse.swt.graphics.Color selectionForeground, org.eclipse.swt.graphics.Color selectionBackground) { checkLayout(); computeRuns(gc); if (gc == null) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NULL_ARGUMENT); if (gc.isDisposed()) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_INVALID_ARGUMENT); if ((selectionForeground != null) && (selectionForeground.isDisposed())) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_INVALID_ARGUMENT); if ((selectionBackground != null) && (selectionBackground.isDisposed())) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_INVALID_ARGUMENT); int length = text.length(); if (length == 0) return; int hdc = gc.handle; boolean hasSelection = ((selectionStart <= selectionEnd) && (selectionStart != (-1))) && (selectionEnd != (-1)); if (hasSelection) { selectionStart = java.lang.Math.min(java.lang.Math.max(0, selectionStart), (length - 1)); selectionEnd = java.lang.Math.min(java.lang.Math.max(0, selectionEnd), (length - 1)); if (selectionForeground == null) selectionForeground = device.getSystemColor(SWT.COLOR_LIST_SELECTION_TEXT); if (selectionBackground == null) selectionBackground = device.getSystemColor(SWT.COLOR_LIST_SELECTION); selectionStart = translateOffset(selectionStart); selectionEnd = translateOffset(selectionEnd); } int foreground = org.eclipse.swt.graphics.OS.GetTextColor(hdc); int state = org.eclipse.swt.graphics.OS.SaveDC(hdc); org.eclipse.swt.graphics.RECT rect = new org.eclipse.swt.graphics.RECT(); int selBrush = 0; int selPen = 0; if (hasSelection) { selBrush = org.eclipse.swt.graphics.OS.CreateSolidBrush(selectionBackground.handle); selPen = org.eclipse.swt.graphics.OS.CreatePen(OS.BS_SOLID, 1, selectionForeground.handle); } int rop2 = 0; if (OS.IsWinCE) { rop2 = org.eclipse.swt.graphics.OS.SetROP2(hdc, OS.R2_COPYPEN); org.eclipse.swt.graphics.OS.SetROP2(hdc, rop2); } else { rop2 = org.eclipse.swt.graphics.OS.GetROP2(hdc); } int dwRop = (rop2 == (OS.R2_XORPEN)) ? OS.PATINVERT : OS.PATCOPY; org.eclipse.swt.graphics.OS.SetBkMode(hdc, OS.TRANSPARENT); org.eclipse.swt.graphics.Rectangle clip = gc.getClipping(); for (int line = 0; line < (runs.length); line++) { int drawX = x; int drawY = y + (lineY[line]); if ((wrapWidth) != (-1)) { switch (alignment) { case SWT.CENTER : drawX += ((wrapWidth) - (lineWidth[line])) / 2; break; case SWT.RIGHT : drawX += (wrapWidth) - (lineWidth[line]); break; } } if (drawX > ((clip.x) + (clip.width))) continue; if ((drawX + (lineWidth[line])) < (clip.x)) continue; org.eclipse.swt.graphics.TextLayout.StyleItem[] lineRuns = runs[line]; int baseline = java.lang.Math.max(0, this.ascent); for (int i = 0; i < (lineRuns.length); i++) { baseline = java.lang.Math.max(baseline, lineRuns[i].ascent); } int lineHeight = (lineY[(line + 1)]) - (lineY[line]); int alignmentX = drawX; for (int i = 0; i < (lineRuns.length); i++) { org.eclipse.swt.graphics.TextLayout.StyleItem run = lineRuns[i]; if ((run.length) == 0) continue; if (drawX > ((clip.x) + (clip.width))) break; if ((drawX + (run.width)) >= (clip.x)) { if ((!(run.lineBreak)) || (run.softBreak)) { int end = ((run.start) + (run.length)) - 1; boolean fullSelection = (hasSelection && (selectionStart <= (run.start))) && (selectionEnd >= end); if (fullSelection) { org.eclipse.swt.graphics.OS.SelectObject(hdc, selBrush); org.eclipse.swt.graphics.OS.PatBlt(hdc, drawX, drawY, run.width, lineHeight, dwRop); } else { if (((run.style) != null) && ((run.style.background) != null)) { int bg = run.style.background.handle; int drawRunY = drawY + (baseline - (run.ascent)); int hBrush = org.eclipse.swt.graphics.OS.CreateSolidBrush(bg); int oldBrush = org.eclipse.swt.graphics.OS.SelectObject(hdc, hBrush); org.eclipse.swt.graphics.OS.PatBlt(hdc, drawX, drawRunY, run.width, ((run.ascent) + (run.descent)), dwRop); org.eclipse.swt.graphics.OS.SelectObject(hdc, oldBrush); org.eclipse.swt.graphics.OS.DeleteObject(hBrush); } boolean partialSelection = hasSelection && (!((selectionStart > end) || ((run.start) > selectionEnd))); if (partialSelection) { org.eclipse.swt.graphics.OS.SelectObject(hdc, selBrush); int selStart = (java.lang.Math.max(selectionStart, run.start)) - (run.start); int selEnd = (java.lang.Math.min(selectionEnd, end)) - (run.start); int cChars = run.length; int gGlyphs = run.glyphCount; int[] piX = new int[1]; org.eclipse.swt.graphics.OS.ScriptCPtoX(selStart, false, cChars, gGlyphs, run.clusters, run.visAttrs, run.advances, run.analysis, piX); int runX = (((orientation) & (SWT.RIGHT_TO_LEFT)) != 0) ? (run.width) - (piX[0]) : piX[0]; rect.left = drawX + runX; rect.top = drawY; org.eclipse.swt.graphics.OS.ScriptCPtoX(selEnd, true, cChars, gGlyphs, run.clusters, run.visAttrs, run.advances, run.analysis, piX); runX = (((orientation) & (SWT.RIGHT_TO_LEFT)) != 0) ? (run.width) - (piX[0]) : piX[0]; rect.right = drawX + runX; rect.bottom = drawY + lineHeight; org.eclipse.swt.graphics.OS.PatBlt(hdc, rect.left, rect.top, ((rect.right) - (rect.left)), ((rect.bottom) - (rect.top)), dwRop); } } } } drawX += run.width; } drawX = alignmentX; for (int i = 0; i < (lineRuns.length); i++) { org.eclipse.swt.graphics.TextLayout.StyleItem run = lineRuns[i]; if ((run.length) == 0) continue; if (drawX > ((clip.x) + (clip.width))) break; if ((drawX + (run.width)) >= (clip.x)) { if ((!(run.tab)) && ((!(run.lineBreak)) || (run.softBreak))) { int end = ((run.start) + (run.length)) - 1; int fg = foreground; boolean fullSelection = (hasSelection && (selectionStart <= (run.start))) && (selectionEnd >= end); if (fullSelection) { fg = selectionForeground.handle; } else { if (((run.style) != null) && ((run.style.foreground) != null)) fg = run.style.foreground.handle; } org.eclipse.swt.graphics.OS.SetTextColor(hdc, fg); org.eclipse.swt.graphics.OS.SelectObject(hdc, getItemFont(run)); int drawRunY = drawY + (baseline - (run.ascent)); org.eclipse.swt.graphics.OS.ScriptTextOut(hdc, run.psc, drawX, drawRunY, 0, null, run.analysis, 0, 0, run.glyphs, run.glyphCount, run.advances, null, run.goffsets); if (((run.style) != null) && ((run.style.underline) || (run.style.strikeout))) { int newPen = (hasSelection && (fg == (selectionForeground.handle))) ? selPen : org.eclipse.swt.graphics.OS.CreatePen(OS.BS_SOLID, 1, fg); int oldPen = org.eclipse.swt.graphics.OS.SelectObject(hdc, newPen); if (run.style.underline) { int underlineY = (drawY + baseline) + 1; org.eclipse.swt.graphics.OS.MoveToEx(hdc, drawX, underlineY, 0); org.eclipse.swt.graphics.OS.LineTo(hdc, (drawX + (run.width)), underlineY); } if (run.style.strikeout) { int strikeoutY = (drawRunY + (run.leading)) + ((run.ascent) / 2); org.eclipse.swt.graphics.OS.MoveToEx(hdc, drawX, strikeoutY, 0); org.eclipse.swt.graphics.OS.LineTo(hdc, (drawX + (run.width)), strikeoutY); } org.eclipse.swt.graphics.OS.SelectObject(hdc, oldPen); if ((!hasSelection) || (fg != (selectionForeground.handle))) org.eclipse.swt.graphics.OS.DeleteObject(newPen); } boolean partialSelection = hasSelection && (!((selectionStart > end) || ((run.start) > selectionEnd))); if (((!fullSelection) && partialSelection) && (fg != (selectionForeground.handle))) { org.eclipse.swt.graphics.OS.SetTextColor(hdc, selectionForeground.handle); int selStart = (java.lang.Math.max(selectionStart, run.start)) - (run.start); int selEnd = (java.lang.Math.min(selectionEnd, end)) - (run.start); int cChars = run.length; int gGlyphs = run.glyphCount; int[] piX = new int[1]; org.eclipse.swt.graphics.OS.ScriptCPtoX(selStart, false, cChars, gGlyphs, run.clusters, run.visAttrs, run.advances, run.analysis, piX); int runX = (((orientation) & (SWT.RIGHT_TO_LEFT)) != 0) ? (run.width) - (piX[0]) : piX[0]; rect.left = drawX + runX; rect.top = drawY; org.eclipse.swt.graphics.OS.ScriptCPtoX(selEnd, true, cChars, gGlyphs, run.clusters, run.visAttrs, run.advances, run.analysis, piX); runX = (((orientation) & (SWT.RIGHT_TO_LEFT)) != 0) ? (run.width) - (piX[0]) : piX[0]; rect.right = drawX + runX; rect.bottom = drawY + lineHeight; org.eclipse.swt.graphics.OS.ScriptTextOut(hdc, run.psc, drawX, drawRunY, OS.ETO_CLIPPED, rect, run.analysis, 0, 0, run.glyphs, run.glyphCount, run.advances, null, run.goffsets); if (((run.style) != null) && ((run.style.underline) || (run.style.strikeout))) { int oldPen = org.eclipse.swt.graphics.OS.SelectObject(hdc, selPen); if (run.style.underline) { int underlineY = (drawY + baseline) + 1; org.eclipse.swt.graphics.OS.MoveToEx(hdc, rect.left, underlineY, 0); org.eclipse.swt.graphics.OS.LineTo(hdc, rect.right, underlineY); } if (run.style.strikeout) { int strikeoutY = (drawRunY + (run.leading)) + ((run.ascent) / 2); org.eclipse.swt.graphics.OS.MoveToEx(hdc, rect.left, strikeoutY, 0); org.eclipse.swt.graphics.OS.LineTo(hdc, rect.right, strikeoutY); } org.eclipse.swt.graphics.OS.SelectObject(hdc, oldPen); } } } } drawX += run.width; } } org.eclipse.swt.graphics.OS.RestoreDC(hdc, state); if (selBrush != 0) org.eclipse.swt.graphics.OS.DeleteObject(selBrush); if (selPen != 0) org.eclipse.swt.graphics.OS.DeleteObject(selPen); }
public java.lang.Object getContents(org.eclipse.swt.dnd.Transfer transfer) { checkWidget(); if (transfer == null) org.eclipse.swt.dnd.DND.error(SWT.ERROR_NULL_ARGUMENT); int[] ppv = new int[1]; int retryCount = 0; int result = org.eclipse.swt.dnd.COM.OleGetClipboard(ppv); while ((result != (COM.S_OK)) && ((retryCount++) < 10)) { try { java.lang.Thread.sleep(50); } catch (java.lang.Throwable t) { } org.eclipse.swt.dnd.MSG msg = new org.eclipse.swt.dnd.MSG(); org.eclipse.swt.dnd.COM.PeekMessage(msg, 0, 0, 0, ((OS.PM_NOREMOVE) | (OS.PM_NOYIELD))); result = org.eclipse.swt.dnd.COM.OleGetClipboard(ppv); } if (result != (COM.S_OK)) return null; org.eclipse.swt.dnd.IDataObject dataObject = new org.eclipse.swt.dnd.IDataObject(ppv[0]); try { org.eclipse.swt.dnd.TransferData[] allowed = transfer.getSupportedTypes(); for (int i = 0; i < (allowed.length); i++) { if ((dataObject.QueryGetData(allowed[i].formatetc)) == (COM.S_OK)) { org.eclipse.swt.dnd.TransferData data = allowed[i]; data.pIDataObject = ppv[0]; return transfer.nativeToJava(data); } } } finally { dataObject.Release(); } return null; }
void setCGClipping() { data.updateClip = false; if ((data.control) == 0) { if (((data.window) != 0) && (!(org.eclipse.swt.graphics.OS.IsWindowVisible(data.window)))) org.eclipse.swt.graphics.OS.ShowWindow(data.window); org.eclipse.swt.graphics.OS.CGContextScaleCTM(handle, 1, (-1)); if ((data.clipRgn) != 0) { org.eclipse.swt.graphics.OS.ClipCGContextToRegion(handle, new org.eclipse.swt.graphics.Rect(), data.clipRgn); } else { int rgn = org.eclipse.swt.graphics.OS.NewRgn(); org.eclipse.swt.graphics.OS.SetRectRgn(rgn, ((short) (-32768)), ((short) (-32768)), ((short) (32767)), ((short) (32767))); org.eclipse.swt.graphics.OS.ClipCGContextToRegion(handle, new org.eclipse.swt.graphics.Rect(), rgn); org.eclipse.swt.graphics.OS.DisposeRgn(rgn); } org.eclipse.swt.graphics.OS.CGContextScaleCTM(handle, 1, (-1)); return; } int port = data.port; int window = org.eclipse.swt.graphics.OS.GetControlOwner(data.control); if (port == 0) { port = org.eclipse.swt.graphics.OS.GetWindowPort(window); } org.eclipse.swt.graphics.Rect portRect = data.portRect; org.eclipse.swt.graphics.Rect rect = data.controlRect; org.eclipse.swt.graphics.OS.CGContextTranslateCTM(handle, (-(rect.left)), (((portRect.bottom) - (portRect.top)) - (rect.top))); org.eclipse.swt.graphics.OS.CGContextScaleCTM(handle, 1, (-1)); org.eclipse.swt.graphics.OS.GetPortBounds(port, portRect); org.eclipse.swt.graphics.OS.GetControlBounds(data.control, rect); boolean isPaint = (OS.HIVIEW) && ((data.paintEvent) != 0); if (isPaint) { rect.right += rect.left; rect.bottom += rect.top; rect.left = rect.top = 0; } else { if (OS.HIVIEW) { int[] contentView = new int[1]; org.eclipse.swt.graphics.OS.HIViewFindByID(org.eclipse.swt.graphics.OS.HIViewGetRoot(window), org.eclipse.swt.graphics.OS.kHIViewWindowContentID(), contentView); org.eclipse.swt.graphics.CGPoint pt = new org.eclipse.swt.graphics.CGPoint(); org.eclipse.swt.graphics.OS.HIViewConvertPoint(pt, org.eclipse.swt.graphics.OS.HIViewGetSuperview(data.control), contentView[0]); rect.left += ((int) (pt.x)); rect.top += ((int) (pt.y)); rect.right += ((int) (pt.x)); rect.bottom += ((int) (pt.y)); } } if ((data.clipRgn) != 0) { int rgn = org.eclipse.swt.graphics.OS.NewRgn(); org.eclipse.swt.graphics.OS.CopyRgn(data.clipRgn, rgn); org.eclipse.swt.graphics.OS.OffsetRgn(rgn, rect.left, rect.top); org.eclipse.swt.graphics.OS.SectRgn(data.visibleRgn, rgn, rgn); org.eclipse.swt.graphics.OS.ClipCGContextToRegion(handle, portRect, rgn); org.eclipse.swt.graphics.OS.DisposeRgn(rgn); } else { org.eclipse.swt.graphics.OS.ClipCGContextToRegion(handle, portRect, data.visibleRgn); } org.eclipse.swt.graphics.OS.CGContextScaleCTM(handle, 1, (-1)); org.eclipse.swt.graphics.OS.CGContextTranslateCTM(handle, rect.left, ((-((portRect.bottom) - (portRect.top))) + (rect.top))); }
void handleTraverse(org.eclipse.swt.custom.Event event) { int style = getStyle(); boolean ignoreTab = (((style & (SWT.MULTI)) != 0) && (!(editable))) || (isSingleLine()); if ((((event.detail) == (SWT.TRAVERSE_TAB_NEXT)) || ((event.detail) == (SWT.TRAVERSE_RETURN))) && ignoreTab) { event.doit = true; } }
void initClasses() { if ((org.eclipse.swt.widgets.OS.objc_lookUpClass("SWTView")) != 0) return; java.lang.Class clazz = getClass(); org.eclipse.swt.widgets.Display.dialogCallback3 = new org.eclipse.swt.widgets.Callback(clazz, "dialogProc", 3); int dialogProc3 = org.eclipse.swt.widgets.Display.dialogCallback3.getAddress(); if (dialogProc3 == 0) error(SWT.ERROR_NO_MORE_CALLBACKS); org.eclipse.swt.widgets.Display.dialogCallback4 = new org.eclipse.swt.widgets.Callback(clazz, "dialogProc", 4); int dialogProc4 = org.eclipse.swt.widgets.Display.dialogCallback4.getAddress(); if (dialogProc4 == 0) error(SWT.ERROR_NO_MORE_CALLBACKS); org.eclipse.swt.widgets.Display.dialogCallback5 = new org.eclipse.swt.widgets.Callback(clazz, "dialogProc", 5); int dialogProc5 = org.eclipse.swt.widgets.Display.dialogCallback5.getAddress(); if (dialogProc5 == 0) error(SWT.ERROR_NO_MORE_CALLBACKS); org.eclipse.swt.widgets.Display.windowCallback3 = new org.eclipse.swt.widgets.Callback(clazz, "windowProc", 3); int proc3 = org.eclipse.swt.widgets.Display.windowCallback3.getAddress(); if (proc3 == 0) error(SWT.ERROR_NO_MORE_CALLBACKS); org.eclipse.swt.widgets.Display.windowCallback2 = new org.eclipse.swt.widgets.Callback(clazz, "windowProc", 2); int proc2 = org.eclipse.swt.widgets.Display.windowCallback2.getAddress(); if (proc2 == 0) error(SWT.ERROR_NO_MORE_CALLBACKS); org.eclipse.swt.widgets.Display.windowCallback4 = new org.eclipse.swt.widgets.Callback(clazz, "windowProc", 4); int proc4 = org.eclipse.swt.widgets.Display.windowCallback4.getAddress(); if (proc4 == 0) error(SWT.ERROR_NO_MORE_CALLBACKS); org.eclipse.swt.widgets.Display.windowCallback5 = new org.eclipse.swt.widgets.Callback(clazz, "windowProc", 5); int proc5 = org.eclipse.swt.widgets.Display.windowCallback5.getAddress(); if (proc5 == 0) error(SWT.ERROR_NO_MORE_CALLBACKS); org.eclipse.swt.widgets.Display.windowCallback6 = new org.eclipse.swt.widgets.Callback(clazz, "windowProc", 6); int proc6 = org.eclipse.swt.widgets.Display.windowCallback6.getAddress(); if (proc6 == 0) error(SWT.ERROR_NO_MORE_CALLBACKS); org.eclipse.swt.widgets.Display.fieldEditorCallback3 = new org.eclipse.swt.widgets.Callback(clazz, "fieldEditorProc", 3); int fieldEditorProc3 = org.eclipse.swt.widgets.Display.fieldEditorCallback3.getAddress(); if (fieldEditorProc3 == 0) error(SWT.ERROR_NO_MORE_CALLBACKS); org.eclipse.swt.widgets.Display.fieldEditorCallback4 = new org.eclipse.swt.widgets.Callback(clazz, "fieldEditorProc", 4); int fieldEditorProc4 = org.eclipse.swt.widgets.Display.fieldEditorCallback4.getAddress(); if (fieldEditorProc4 == 0) error(SWT.ERROR_NO_MORE_CALLBACKS); int isFlippedProc = org.eclipse.swt.widgets.OS.isFlipped_CALLBACK(); int drawRectProc = org.eclipse.swt.widgets.OS.CALLBACK_drawRect_(proc3); int drawInteriorWithFrameInViewProc = org.eclipse.swt.widgets.OS.CALLBACK_drawInteriorWithFrame_inView_(proc4); int drawWithExpansionFrameProc = org.eclipse.swt.widgets.OS.CALLBACK_drawWithExpansionFrame_inView_(proc4); int imageRectForBoundsProc = org.eclipse.swt.widgets.OS.CALLBACK_imageRectForBounds_(proc3); int titleRectForBoundsProc = org.eclipse.swt.widgets.OS.CALLBACK_titleRectForBounds_(proc3); int hitTestForEvent_inRect_ofViewProc = org.eclipse.swt.widgets.OS.CALLBACK_hitTestForEvent_inRect_ofView_(proc5); int cellSizeProc = org.eclipse.swt.widgets.OS.CALLBACK_cellSize(proc2); int drawImageWithFrameInViewProc = org.eclipse.swt.widgets.OS.CALLBACK_drawImage_withFrame_inView_(proc5); int setFrameOriginProc = org.eclipse.swt.widgets.OS.CALLBACK_setFrameOrigin_(proc3); int setFrameSizeProc = org.eclipse.swt.widgets.OS.CALLBACK_setFrameSize_(proc3); int hitTestProc = org.eclipse.swt.widgets.OS.CALLBACK_hitTest_(proc3); int markedRangeProc = org.eclipse.swt.widgets.OS.CALLBACK_markedRange(proc2); int selectedRangeProc = org.eclipse.swt.widgets.OS.CALLBACK_selectedRange(proc2); int highlightSelectionInClipRectProc = org.eclipse.swt.widgets.OS.CALLBACK_highlightSelectionInClipRect_(proc3); int setMarkedText_selectedRangeProc = org.eclipse.swt.widgets.OS.CALLBACK_setMarkedText_selectedRange_(proc4); int attributedSubstringFromRangeProc = org.eclipse.swt.widgets.OS.CALLBACK_attributedSubstringFromRange_(proc3); int characterIndexForPointProc = org.eclipse.swt.widgets.OS.CALLBACK_characterIndexForPoint_(proc3); int firstRectForCharacterRangeProc = org.eclipse.swt.widgets.OS.CALLBACK_firstRectForCharacterRange_(proc3); int textWillChangeSelectionProc = org.eclipse.swt.widgets.OS.CALLBACK_textView_willChangeSelectionFromCharacterRange_toCharacterRange_(proc5); int accessibilityHitTestProc = org.eclipse.swt.widgets.OS.CALLBACK_accessibilityHitTest_(proc3); int shouldChangeTextInRange_replacementString_Proc = org.eclipse.swt.widgets.OS.CALLBACK_shouldChangeTextInRange_replacementString_(fieldEditorProc4); int shouldChangeTextInRange_replacementString_fieldEditorProc = shouldChangeTextInRange_replacementString_Proc; int view_stringForToolTip_point_userDataProc = org.eclipse.swt.widgets.OS.CALLBACK_view_stringForToolTip_point_userData_(proc6); int canDragRowsWithIndexes_atPoint_Proc = org.eclipse.swt.widgets.OS.CALLBACK_canDragRowsWithIndexes_atPoint_(proc4); int setNeedsDisplayInRectProc = org.eclipse.swt.widgets.OS.CALLBACK_setNeedsDisplayInRect_(proc3); int expansionFrameWithFrameProc = org.eclipse.swt.widgets.OS.CALLBACK_expansionFrameWithFrame_inView_(proc4); byte[] types = new byte[]{ '*', '\u0000' }; int size = C.PTR_SIZEOF; int align = ((C.PTR_SIZEOF) == 4) ? 2 : 3; java.lang.String className; int cls; className = "SWTBox"; cls = org.eclipse.swt.widgets.OS.objc_allocateClassPair(OS.class_NSBox, className, 0); org.eclipse.swt.widgets.OS.class_addIvar(cls, org.eclipse.swt.widgets.Display.SWT_OBJECT, size, ((byte) (align)), types); addEventMethods(cls, proc2, proc3, drawRectProc, hitTestProc, setNeedsDisplayInRectProc); addFrameMethods(cls, setFrameOriginProc, setFrameSizeProc); addAccessibilityMethods(cls, proc2, proc3, proc4, accessibilityHitTestProc); org.eclipse.swt.widgets.OS.objc_registerClassPair(cls); className = "SWTButton"; cls = org.eclipse.swt.widgets.OS.objc_allocateClassPair(OS.class_NSButton, className, 0); org.eclipse.swt.widgets.OS.class_addIvar(cls, org.eclipse.swt.widgets.Display.SWT_OBJECT, size, ((byte) (align)), types); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_sendSelection, proc2, "@:"); addEventMethods(cls, proc2, proc3, drawRectProc, hitTestProc, setNeedsDisplayInRectProc); addFrameMethods(cls, setFrameOriginProc, setFrameSizeProc); org.eclipse.swt.widgets.OS.objc_registerClassPair(cls); cls = registerCellSubclass(org.eclipse.swt.widgets.NSButton.cellClass(), size, align, types); addAccessibilityMethods(cls, proc2, proc3, proc4, accessibilityHitTestProc); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_nextState, proc2, "@:"); org.eclipse.swt.widgets.NSButton.setCellClass(cls); className = "SWTButtonCell"; cls = org.eclipse.swt.widgets.OS.objc_allocateClassPair(OS.class_NSButtonCell, className, 0); org.eclipse.swt.widgets.OS.class_addIvar(cls, org.eclipse.swt.widgets.Display.SWT_OBJECT, size, ((byte) (align)), types); addAccessibilityMethods(cls, proc2, proc3, proc4, accessibilityHitTestProc); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_drawImage_withFrame_inView_, drawImageWithFrameInViewProc, "@:@{NSFrame}@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_cellSize, cellSizeProc, "@:"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_drawInteriorWithFrame_inView_, drawInteriorWithFrameInViewProc, "@:{NSRect}@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_titleRectForBounds_, titleRectForBoundsProc, "@:{NSRect}"); org.eclipse.swt.widgets.OS.objc_registerClassPair(cls); className = "SWTCanvasView"; cls = org.eclipse.swt.widgets.OS.objc_allocateClassPair(OS.class_NSView, className, 0); org.eclipse.swt.widgets.OS.class_addIvar(cls, org.eclipse.swt.widgets.Display.SWT_OBJECT, size, ((byte) (align)), types); org.eclipse.swt.widgets.OS.class_addProtocol(cls, org.eclipse.swt.widgets.OS.objc_getProtocol("NSTextInput")); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_hasMarkedText, proc2, "@:"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_markedRange, markedRangeProc, "@:"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_selectedRange, selectedRangeProc, "@:"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_setMarkedText_selectedRange_, setMarkedText_selectedRangeProc, "@:@{NSRange}"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_unmarkText, proc2, "@:"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_validAttributesForMarkedText, proc2, "@:"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_attributedSubstringFromRange_, attributedSubstringFromRangeProc, "@:{NSRange}"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_insertText_, proc3, "@:@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_characterIndexForPoint_, characterIndexForPointProc, "@:{NSPoint}"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_firstRectForCharacterRange_, firstRectForCharacterRangeProc, "@:{NSRange}"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_doCommandBySelector_, proc3, "@::"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_canBecomeKeyView, proc2, "@:"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_isFlipped, isFlippedProc, "@:"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_acceptsFirstResponder, proc2, "@:"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_isOpaque, proc2, "@:"); addEventMethods(cls, proc2, proc3, drawRectProc, hitTestProc, setNeedsDisplayInRectProc); addFrameMethods(cls, setFrameOriginProc, setFrameSizeProc); addAccessibilityMethods(cls, proc2, proc3, proc4, accessibilityHitTestProc); org.eclipse.swt.widgets.OS.objc_registerClassPair(cls); className = "SWTComboBox"; cls = org.eclipse.swt.widgets.OS.objc_allocateClassPair(OS.class_NSComboBox, className, 0); org.eclipse.swt.widgets.OS.class_addIvar(cls, org.eclipse.swt.widgets.Display.SWT_OBJECT, size, ((byte) (align)), types); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_sendSelection, proc2, "@:"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_textDidChange_, proc3, "@:@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_textViewDidChangeSelection_, proc3, "@:@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_textView_willChangeSelectionFromCharacterRange_toCharacterRange_, textWillChangeSelectionProc, "@:@{NSRange}{NSRange}"); addEventMethods(cls, proc2, proc3, drawRectProc, hitTestProc, setNeedsDisplayInRectProc); addFrameMethods(cls, setFrameOriginProc, setFrameSizeProc); addAccessibilityMethods(cls, proc2, proc3, proc4, accessibilityHitTestProc); org.eclipse.swt.widgets.OS.objc_registerClassPair(cls); cls = registerCellSubclass(org.eclipse.swt.widgets.NSComboBox.cellClass(), size, align, types); addAccessibilityMethods(cls, proc2, proc3, proc4, accessibilityHitTestProc); org.eclipse.swt.widgets.NSComboBox.setCellClass(cls); className = "SWTDatePicker"; cls = org.eclipse.swt.widgets.OS.objc_allocateClassPair(OS.class_NSDatePicker, className, 0); org.eclipse.swt.widgets.OS.class_addIvar(cls, org.eclipse.swt.widgets.Display.SWT_OBJECT, size, ((byte) (align)), types); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_isFlipped, proc2, "@:"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_sendSelection, proc2, "@:"); addEventMethods(cls, proc2, proc3, drawRectProc, hitTestProc, setNeedsDisplayInRectProc); addFrameMethods(cls, setFrameOriginProc, setFrameSizeProc); addAccessibilityMethods(cls, proc2, proc3, proc4, accessibilityHitTestProc); org.eclipse.swt.widgets.OS.objc_registerClassPair(cls); className = "SWTEditorView"; cls = org.eclipse.swt.widgets.OS.objc_allocateClassPair(OS.class_NSTextView, className, 0); addEventMethods(cls, 0, fieldEditorProc3, 0, 0, 0); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_insertText_, fieldEditorProc3, "@:@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_doCommandBySelector_, fieldEditorProc3, "@::"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_shouldChangeTextInRange_replacementString_, shouldChangeTextInRange_replacementString_fieldEditorProc, "@:{NSRange}@"); org.eclipse.swt.widgets.OS.objc_registerClassPair(cls); className = "SWTImageView"; cls = org.eclipse.swt.widgets.OS.objc_allocateClassPair(OS.class_NSImageView, className, 0); org.eclipse.swt.widgets.OS.class_addIvar(cls, org.eclipse.swt.widgets.Display.SWT_OBJECT, size, ((byte) (align)), types); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_isFlipped, isFlippedProc, "@:"); addEventMethods(cls, proc2, proc3, drawRectProc, hitTestProc, setNeedsDisplayInRectProc); addFrameMethods(cls, setFrameOriginProc, setFrameSizeProc); addAccessibilityMethods(cls, proc2, proc3, proc4, accessibilityHitTestProc); org.eclipse.swt.widgets.OS.objc_registerClassPair(cls); cls = registerCellSubclass(org.eclipse.swt.widgets.NSImageView.cellClass(), size, align, types); addAccessibilityMethods(cls, proc2, proc3, proc4, accessibilityHitTestProc); org.eclipse.swt.widgets.NSImageView.setCellClass(cls); className = "SWTImageTextCell"; cls = org.eclipse.swt.widgets.OS.objc_allocateClassPair(OS.class_NSTextFieldCell, className, 0); org.eclipse.swt.widgets.OS.class_addIvar(cls, org.eclipse.swt.widgets.Display.SWT_OBJECT, size, ((byte) (align)), types); org.eclipse.swt.widgets.OS.class_addIvar(cls, org.eclipse.swt.widgets.Display.SWT_IMAGE, size, ((byte) (align)), types); org.eclipse.swt.widgets.OS.class_addIvar(cls, org.eclipse.swt.widgets.Display.SWT_ROW, size, ((byte) (align)), types); org.eclipse.swt.widgets.OS.class_addIvar(cls, org.eclipse.swt.widgets.Display.SWT_COLUMN, size, ((byte) (align)), types); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_drawInteriorWithFrame_inView_, drawInteriorWithFrameInViewProc, "@:{NSRect}@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_drawWithExpansionFrame_inView_, drawWithExpansionFrameProc, "@:{NSRect}@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_imageRectForBounds_, imageRectForBoundsProc, "@:{NSRect}"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_titleRectForBounds_, titleRectForBoundsProc, "@:{NSRect}"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_hitTestForEvent_inRect_ofView_, hitTestForEvent_inRect_ofViewProc, "@:@{NSRect}@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_cellSize, cellSizeProc, "@:"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_image, proc2, "@:"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_setImage_, proc3, "@:@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_expansionFrameWithFrame_inView_, expansionFrameWithFrameProc, "@:{NSRect}@"); org.eclipse.swt.widgets.OS.objc_registerClassPair(cls); className = "SWTMenu"; cls = org.eclipse.swt.widgets.OS.objc_allocateClassPair(OS.class_NSMenu, className, 0); org.eclipse.swt.widgets.OS.class_addIvar(cls, org.eclipse.swt.widgets.Display.SWT_OBJECT, size, ((byte) (align)), types); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_menuWillOpen_, proc3, "@:@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_menuDidClose_, proc3, "@:@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_menu_willHighlightItem_, proc4, "@:@@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_menuNeedsUpdate_, proc3, "@:@"); org.eclipse.swt.widgets.OS.objc_registerClassPair(cls); className = "SWTMenuItem"; cls = org.eclipse.swt.widgets.OS.objc_allocateClassPair(OS.class_NSMenuItem, className, 0); org.eclipse.swt.widgets.OS.class_addIvar(cls, org.eclipse.swt.widgets.Display.SWT_OBJECT, size, ((byte) (align)), types); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_sendSelection, proc2, "@:"); org.eclipse.swt.widgets.OS.objc_registerClassPair(cls); className = "SWTOpenGLView"; cls = org.eclipse.swt.widgets.OS.objc_allocateClassPair(OS.class_NSOpenGLView, className, 0); org.eclipse.swt.widgets.OS.class_addIvar(cls, org.eclipse.swt.widgets.Display.SWT_OBJECT, size, ((byte) (align)), types); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_isOpaque, proc2, "@:"); addEventMethods(cls, proc2, proc3, drawRectProc, hitTestProc, setNeedsDisplayInRectProc); addFrameMethods(cls, setFrameOriginProc, setFrameSizeProc); addAccessibilityMethods(cls, proc2, proc3, proc4, accessibilityHitTestProc); org.eclipse.swt.widgets.OS.objc_registerClassPair(cls); className = "SWTOutlineView"; cls = org.eclipse.swt.widgets.OS.objc_allocateClassPair(OS.class_NSOutlineView, className, 0); org.eclipse.swt.widgets.OS.class_addIvar(cls, org.eclipse.swt.widgets.Display.SWT_OBJECT, size, ((byte) (align)), types); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_highlightSelectionInClipRect_, highlightSelectionInClipRectProc, "@:{NSRect}"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_sendDoubleSelection, proc2, "@:"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_outlineViewSelectionDidChange_, proc3, "@:@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_outlineView_child_ofItem_, proc5, "@:@i@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_outlineView_isItemExpandable_, proc4, "@:@@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_outlineView_numberOfChildrenOfItem_, proc4, "@:@@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_outlineView_objectValueForTableColumn_byItem_, proc5, "@:@@@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_outlineView_willDisplayCell_forTableColumn_item_, proc6, "@:@@@@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_outlineView_setObjectValue_forTableColumn_byItem_, proc6, "@:@@@@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_outlineViewColumnDidMove_, proc3, "@:@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_outlineViewColumnDidResize_, proc3, "@:@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_outlineView_didClickTableColumn_, proc4, "@:@@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_canDragRowsWithIndexes_atPoint_, canDragRowsWithIndexes_atPoint_Proc, "@:@{NSPoint=ff}"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_outlineView_writeItems_toPasteboard_, proc5, "@:@@@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_expandItem_expandChildren_, proc4, "@:@Z"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_collapseItem_collapseChildren_, proc4, "@:@Z"); addEventMethods(cls, proc2, proc3, drawRectProc, hitTestProc, setNeedsDisplayInRectProc); addFrameMethods(cls, setFrameOriginProc, setFrameSizeProc); addAccessibilityMethods(cls, proc2, proc3, proc4, accessibilityHitTestProc); org.eclipse.swt.widgets.OS.objc_registerClassPair(cls); className = "SWTPanelDelegate"; cls = org.eclipse.swt.widgets.OS.objc_allocateClassPair(OS.class_NSObject, className, 0); org.eclipse.swt.widgets.OS.class_addIvar(cls, org.eclipse.swt.widgets.Display.SWT_OBJECT, size, ((byte) (align)), types); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_windowWillClose_, dialogProc3, "@:@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_changeColor_, dialogProc3, "@:@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_changeFont_, dialogProc3, "@:@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_sendSelection_, dialogProc3, "@:@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_panel_shouldShowFilename_, dialogProc4, "@:@@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_panelDidEnd_returnCode_contextInfo_, dialogProc5, "@:@i@"); org.eclipse.swt.widgets.OS.objc_registerClassPair(cls); className = "SWTPopUpButton"; cls = org.eclipse.swt.widgets.OS.objc_allocateClassPair(OS.class_NSPopUpButton, className, 0); org.eclipse.swt.widgets.OS.class_addIvar(cls, org.eclipse.swt.widgets.Display.SWT_OBJECT, size, ((byte) (align)), types); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_sendSelection, proc2, "@:"); addEventMethods(cls, proc2, proc3, drawRectProc, hitTestProc, setNeedsDisplayInRectProc); addFrameMethods(cls, setFrameOriginProc, setFrameSizeProc); addAccessibilityMethods(cls, proc2, proc3, proc4, accessibilityHitTestProc); org.eclipse.swt.widgets.OS.objc_registerClassPair(cls); cls = registerCellSubclass(org.eclipse.swt.widgets.NSPopUpButton.cellClass(), size, align, types); addAccessibilityMethods(cls, proc2, proc3, proc4, accessibilityHitTestProc); org.eclipse.swt.widgets.NSPopUpButton.setCellClass(cls); className = "SWTProgressIndicator"; cls = org.eclipse.swt.widgets.OS.objc_allocateClassPair(OS.class_NSProgressIndicator, className, 0); org.eclipse.swt.widgets.OS.class_addIvar(cls, org.eclipse.swt.widgets.Display.SWT_OBJECT, size, ((byte) (align)), types); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_viewDidMoveToWindow, proc2, "@:"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel__drawThemeProgressArea_, proc3, "@:c"); addEventMethods(cls, proc2, proc3, drawRectProc, hitTestProc, setNeedsDisplayInRectProc); addFrameMethods(cls, setFrameOriginProc, setFrameSizeProc); addAccessibilityMethods(cls, proc2, proc3, proc4, accessibilityHitTestProc); org.eclipse.swt.widgets.OS.objc_registerClassPair(cls); className = "SWTScroller"; cls = org.eclipse.swt.widgets.OS.objc_allocateClassPair(OS.class_NSScroller, className, 0); org.eclipse.swt.widgets.OS.class_addIvar(cls, org.eclipse.swt.widgets.Display.SWT_OBJECT, size, ((byte) (align)), types); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_sendSelection, proc2, "@:"); addEventMethods(cls, proc2, proc3, drawRectProc, hitTestProc, setNeedsDisplayInRectProc); addFrameMethods(cls, setFrameOriginProc, setFrameSizeProc); addAccessibilityMethods(cls, proc2, proc3, proc4, accessibilityHitTestProc); org.eclipse.swt.widgets.OS.objc_registerClassPair(cls); className = "SWTScrollView"; cls = org.eclipse.swt.widgets.OS.objc_allocateClassPair(OS.class_NSScrollView, className, 0); org.eclipse.swt.widgets.OS.class_addIvar(cls, org.eclipse.swt.widgets.Display.SWT_OBJECT, size, ((byte) (align)), types); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_sendVerticalSelection, proc2, "@:"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_sendHorizontalSelection, proc2, "@:"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_pageDown_, proc3, "@:@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_pageUp_, proc3, "@:@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_reflectScrolledClipView_, proc3, "@:@"); addEventMethods(cls, proc2, proc3, drawRectProc, hitTestProc, setNeedsDisplayInRectProc); addFrameMethods(cls, setFrameOriginProc, setFrameSizeProc); addAccessibilityMethods(cls, proc2, proc3, proc4, accessibilityHitTestProc); org.eclipse.swt.widgets.OS.objc_registerClassPair(cls); className = "SWTSearchField"; cls = org.eclipse.swt.widgets.OS.objc_allocateClassPair(OS.class_NSSearchField, className, 0); org.eclipse.swt.widgets.OS.class_addIvar(cls, org.eclipse.swt.widgets.Display.SWT_OBJECT, size, ((byte) (align)), types); addEventMethods(cls, proc2, proc3, drawRectProc, hitTestProc, setNeedsDisplayInRectProc); addFrameMethods(cls, setFrameOriginProc, setFrameSizeProc); addAccessibilityMethods(cls, proc2, proc3, proc4, accessibilityHitTestProc); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_textDidChange_, proc3, "@:@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_textViewDidChangeSelection_, proc3, "@:@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_textView_willChangeSelectionFromCharacterRange_toCharacterRange_, textWillChangeSelectionProc, "@:@{NSRange}{NSRange}"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_sendSearchSelection, proc2, "@:"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_sendCancelSelection, proc2, "@:"); org.eclipse.swt.widgets.OS.objc_registerClassPair(cls); cls = registerCellSubclass(org.eclipse.swt.widgets.NSSearchField.cellClass(), size, align, types); addAccessibilityMethods(cls, proc2, proc3, proc4, accessibilityHitTestProc); org.eclipse.swt.widgets.NSSearchField.setCellClass(cls); className = "SWTSecureTextField"; cls = org.eclipse.swt.widgets.OS.objc_allocateClassPair(OS.class_NSSecureTextField, className, 0); org.eclipse.swt.widgets.OS.class_addIvar(cls, org.eclipse.swt.widgets.Display.SWT_OBJECT, size, ((byte) (align)), types); addEventMethods(cls, proc2, proc3, drawRectProc, hitTestProc, setNeedsDisplayInRectProc); addFrameMethods(cls, setFrameOriginProc, setFrameSizeProc); addAccessibilityMethods(cls, proc2, proc3, proc4, accessibilityHitTestProc); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_textDidChange_, proc3, "@:@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_textViewDidChangeSelection_, proc3, "@:@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_textView_willChangeSelectionFromCharacterRange_toCharacterRange_, textWillChangeSelectionProc, "@:@{NSRange}{NSRange}"); org.eclipse.swt.widgets.OS.objc_registerClassPair(cls); className = "SWTSlider"; cls = org.eclipse.swt.widgets.OS.objc_allocateClassPair(OS.class_NSSlider, className, 0); org.eclipse.swt.widgets.OS.class_addIvar(cls, org.eclipse.swt.widgets.Display.SWT_OBJECT, size, ((byte) (align)), types); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_sendSelection, proc2, "@:"); addEventMethods(cls, proc2, proc3, drawRectProc, hitTestProc, setNeedsDisplayInRectProc); addFrameMethods(cls, setFrameOriginProc, setFrameSizeProc); addAccessibilityMethods(cls, proc2, proc3, proc4, accessibilityHitTestProc); org.eclipse.swt.widgets.OS.objc_registerClassPair(cls); cls = registerCellSubclass(org.eclipse.swt.widgets.NSSlider.cellClass(), size, align, types); addAccessibilityMethods(cls, proc2, proc3, proc4, accessibilityHitTestProc); org.eclipse.swt.widgets.NSSlider.setCellClass(cls); className = "SWTStepper"; cls = org.eclipse.swt.widgets.OS.objc_allocateClassPair(OS.class_NSStepper, className, 0); org.eclipse.swt.widgets.OS.class_addIvar(cls, org.eclipse.swt.widgets.Display.SWT_OBJECT, size, ((byte) (align)), types); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_sendSelection, proc2, "@:"); addEventMethods(cls, proc2, proc3, drawRectProc, hitTestProc, setNeedsDisplayInRectProc); addFrameMethods(cls, setFrameOriginProc, setFrameSizeProc); addAccessibilityMethods(cls, proc2, proc3, proc4, accessibilityHitTestProc); org.eclipse.swt.widgets.OS.objc_registerClassPair(cls); cls = registerCellSubclass(org.eclipse.swt.widgets.NSStepper.cellClass(), size, align, types); addAccessibilityMethods(cls, proc2, proc3, proc4, accessibilityHitTestProc); org.eclipse.swt.widgets.NSStepper.setCellClass(cls); className = "SWTTableHeaderCell"; cls = org.eclipse.swt.widgets.OS.objc_allocateClassPair(OS.class_NSTableHeaderCell, className, 0); org.eclipse.swt.widgets.OS.class_addIvar(cls, org.eclipse.swt.widgets.Display.SWT_OBJECT, size, ((byte) (align)), types); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_drawInteriorWithFrame_inView_, drawInteriorWithFrameInViewProc, "@:{NSRect}@"); org.eclipse.swt.widgets.OS.objc_registerClassPair(cls); className = "SWTTableHeaderView"; cls = org.eclipse.swt.widgets.OS.objc_allocateClassPair(OS.class_NSTableHeaderView, className, 0); org.eclipse.swt.widgets.OS.class_addIvar(cls, org.eclipse.swt.widgets.Display.SWT_OBJECT, size, ((byte) (align)), types); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_mouseDown_, proc3, "@:@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_resetCursorRects, proc2, "@:"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_updateTrackingAreas, proc2, "@:"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_menuForEvent_, proc3, "@:@"); org.eclipse.swt.widgets.OS.objc_registerClassPair(cls); className = "SWTTableView"; cls = org.eclipse.swt.widgets.OS.objc_allocateClassPair(OS.class_NSTableView, className, 0); org.eclipse.swt.widgets.OS.class_addIvar(cls, org.eclipse.swt.widgets.Display.SWT_OBJECT, size, ((byte) (align)), types); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_highlightSelectionInClipRect_, highlightSelectionInClipRectProc, "@:{NSRect}"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_sendDoubleSelection, proc2, "@:"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_numberOfRowsInTableView_, proc3, "@:@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_tableView_objectValueForTableColumn_row_, proc5, "@:@:@:@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_tableView_shouldEditTableColumn_row_, proc5, "@:@:@:@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_tableViewSelectionDidChange_, proc3, "@:@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_tableView_willDisplayCell_forTableColumn_row_, proc6, "@:@@@i"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_tableView_setObjectValue_forTableColumn_row_, proc6, "@:@@@i"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_tableViewColumnDidMove_, proc3, "@:@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_tableViewColumnDidResize_, proc3, "@:@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_tableView_didClickTableColumn_, proc4, "@:@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_canDragRowsWithIndexes_atPoint_, canDragRowsWithIndexes_atPoint_Proc, "@:@{NSPoint=ff}"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_tableView_writeRowsWithIndexes_toPasteboard_, proc5, "@:@@@"); addEventMethods(cls, proc2, proc3, drawRectProc, hitTestProc, setNeedsDisplayInRectProc); addFrameMethods(cls, setFrameOriginProc, setFrameSizeProc); addAccessibilityMethods(cls, proc2, proc3, proc4, accessibilityHitTestProc); org.eclipse.swt.widgets.OS.objc_registerClassPair(cls); className = "SWTTabView"; cls = org.eclipse.swt.widgets.OS.objc_allocateClassPair(OS.class_NSTabView, className, 0); org.eclipse.swt.widgets.OS.class_addIvar(cls, org.eclipse.swt.widgets.Display.SWT_OBJECT, size, ((byte) (align)), types); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_tabView_willSelectTabViewItem_, proc4, "@:@@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_tabView_didSelectTabViewItem_, proc4, "@:@@"); addEventMethods(cls, proc2, proc3, drawRectProc, hitTestProc, setNeedsDisplayInRectProc); addFrameMethods(cls, setFrameOriginProc, setFrameSizeProc); addAccessibilityMethods(cls, proc2, proc3, proc4, accessibilityHitTestProc); org.eclipse.swt.widgets.OS.objc_registerClassPair(cls); className = "SWTTextView"; cls = org.eclipse.swt.widgets.OS.objc_allocateClassPair(OS.class_NSTextView, className, 0); org.eclipse.swt.widgets.OS.class_addIvar(cls, org.eclipse.swt.widgets.Display.SWT_OBJECT, size, ((byte) (align)), types); addEventMethods(cls, proc2, proc3, drawRectProc, hitTestProc, setNeedsDisplayInRectProc); addFrameMethods(cls, setFrameOriginProc, setFrameSizeProc); addAccessibilityMethods(cls, proc2, proc3, proc4, accessibilityHitTestProc); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_insertText_, proc3, "@:@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_doCommandBySelector_, proc3, "@::"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_textDidChange_, proc3, "@:@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_textView_clickedOnLink_atIndex_, proc5, "@:@@@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_dragSelectionWithEvent_offset_slideBack_, proc5, "@:@@@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_shouldChangeTextInRange_replacementString_, shouldChangeTextInRange_replacementString_Proc, "@:{NSRange}@"); org.eclipse.swt.widgets.OS.objc_registerClassPair(cls); className = "SWTTextField"; cls = org.eclipse.swt.widgets.OS.objc_allocateClassPair(OS.class_NSTextField, className, 0); org.eclipse.swt.widgets.OS.class_addIvar(cls, org.eclipse.swt.widgets.Display.SWT_OBJECT, size, ((byte) (align)), types); addEventMethods(cls, proc2, proc3, drawRectProc, hitTestProc, setNeedsDisplayInRectProc); addFrameMethods(cls, setFrameOriginProc, setFrameSizeProc); addAccessibilityMethods(cls, proc2, proc3, proc4, accessibilityHitTestProc); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_acceptsFirstResponder, proc2, "@:"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_textDidChange_, proc3, "@:@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_textDidEndEditing_, proc3, "@:@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_textViewDidChangeSelection_, proc3, "@:@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_textView_willChangeSelectionFromCharacterRange_toCharacterRange_, textWillChangeSelectionProc, "@:@{NSRange}{NSRange}"); org.eclipse.swt.widgets.OS.objc_registerClassPair(cls); cls = registerCellSubclass(org.eclipse.swt.widgets.NSTextField.cellClass(), size, align, types); addAccessibilityMethods(cls, proc2, proc3, proc4, accessibilityHitTestProc); org.eclipse.swt.widgets.NSTextField.setCellClass(cls); className = "SWTTreeItem"; cls = org.eclipse.swt.widgets.OS.objc_allocateClassPair(OS.class_NSObject, className, 0); org.eclipse.swt.widgets.OS.class_addIvar(cls, org.eclipse.swt.widgets.Display.SWT_OBJECT, size, ((byte) (align)), types); org.eclipse.swt.widgets.OS.objc_registerClassPair(cls); className = "SWTView"; cls = org.eclipse.swt.widgets.OS.objc_allocateClassPair(OS.class_NSView, className, 0); org.eclipse.swt.widgets.OS.class_addIvar(cls, org.eclipse.swt.widgets.Display.SWT_OBJECT, size, ((byte) (align)), types); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_canBecomeKeyView, proc2, "@:"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_isFlipped, isFlippedProc, "@:"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_acceptsFirstResponder, proc2, "@:"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_isOpaque, proc2, "@:"); addEventMethods(cls, proc2, proc3, drawRectProc, hitTestProc, setNeedsDisplayInRectProc); addFrameMethods(cls, setFrameOriginProc, setFrameSizeProc); addAccessibilityMethods(cls, proc2, proc3, proc4, accessibilityHitTestProc); org.eclipse.swt.widgets.OS.objc_registerClassPair(cls); className = "SWTWindow"; cls = org.eclipse.swt.widgets.OS.objc_allocateClassPair(OS.class_NSWindow, className, 0); org.eclipse.swt.widgets.OS.class_addIvar(cls, org.eclipse.swt.widgets.Display.SWT_OBJECT, size, ((byte) (align)), types); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_sendEvent_, proc3, "@:@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_helpRequested_, proc3, "@:@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_canBecomeKeyWindow, proc2, "@:"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_becomeKeyWindow, proc2, "@:"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_makeFirstResponder_, proc3, "@:@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_noResponderFor_, proc3, "@:@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_view_stringForToolTip_point_userData_, view_stringForToolTip_point_userDataProc, "@:@i{NSPoint}@"); addAccessibilityMethods(cls, proc2, proc3, proc4, accessibilityHitTestProc); org.eclipse.swt.widgets.OS.objc_registerClassPair(cls); className = "SWTWindowDelegate"; cls = org.eclipse.swt.widgets.OS.objc_allocateClassPair(OS.class_NSObject, className, 0); org.eclipse.swt.widgets.OS.class_addIvar(cls, org.eclipse.swt.widgets.Display.SWT_OBJECT, size, ((byte) (align)), types); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_windowDidResize_, proc3, "@:@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_windowDidMove_, proc3, "@:@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_windowShouldClose_, proc3, "@:@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_windowWillClose_, proc3, "@:@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_windowDidResignKey_, proc3, "@:@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_windowDidBecomeKey_, proc3, "@:@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_timerProc_, proc3, "@:@"); org.eclipse.swt.widgets.OS.class_addMethod(cls, OS.sel_systemSettingsChanged_, proc3, "@:@"); org.eclipse.swt.widgets.OS.objc_registerClassPair(cls); }
int CreateChromeWindow(int parent, int chromeFlags, int _retval) { if (parent == 0) return XPCOM.NS_ERROR_NOT_IMPLEMENTED; org.eclipse.swt.browser.nsIWebBrowserChrome browserChromeParent = new org.eclipse.swt.browser.nsIWebBrowserChrome(parent); int[] aWebBrowser = new int[1]; int rc = browserChromeParent.GetWebBrowser(aWebBrowser); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Browser.error(rc); if ((aWebBrowser[0]) == 0) org.eclipse.swt.browser.Browser.error(XPCOM.NS_ERROR_NO_INTERFACE); org.eclipse.swt.browser.nsIWebBrowser webBrowser = new org.eclipse.swt.browser.nsIWebBrowser(aWebBrowser[0]); int[] result = new int[1]; rc = webBrowser.QueryInterface(nsIBaseWindow.NS_IBASEWINDOW_IID, result); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Browser.error(rc); if ((result[0]) == 0) org.eclipse.swt.browser.Browser.error(XPCOM.NS_ERROR_NO_INTERFACE); webBrowser.Release(); org.eclipse.swt.browser.nsIBaseWindow baseWindow = new org.eclipse.swt.browser.nsIBaseWindow(result[0]); result[0] = 0; int[] aParentNativeWindow = new int[1]; rc = baseWindow.GetParentNativeWindow(aParentNativeWindow); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Browser.error(rc); if ((aParentNativeWindow[0]) == 0) org.eclipse.swt.browser.Browser.error(XPCOM.NS_ERROR_NO_INTERFACE); baseWindow.Release(); org.eclipse.swt.browser.Display display = org.eclipse.swt.browser.Display.getCurrent(); org.eclipse.swt.browser.Browser src = ((org.eclipse.swt.browser.Browser) (display.findWidget(aParentNativeWindow[0]))); org.eclipse.swt.browser.Browser browser; boolean doit = false; if ((chromeFlags & (nsIWebBrowserChrome.CHROME_MODAL)) != 0) { org.eclipse.swt.browser.Shell shell = new org.eclipse.swt.browser.Shell(src.getShell(), ((SWT.DIALOG_TRIM) | (SWT.APPLICATION_MODAL))); shell.setLayout(new org.eclipse.swt.browser.FillLayout()); browser = new org.eclipse.swt.browser.Browser(shell, SWT.NONE); browser.addVisibilityWindowListener(new org.eclipse.swt.browser.VisibilityWindowListener() { public void hide(org.eclipse.swt.browser.WindowEvent event) { } public void show(org.eclipse.swt.browser.WindowEvent event) { org.eclipse.swt.browser.Browser browser = ((org.eclipse.swt.browser.Browser) (event.widget)); org.eclipse.swt.browser.Shell shell = browser.getShell(); if ((event.location) != null) shell.setLocation(event.location); if ((event.size) != null) { org.eclipse.swt.browser.Point size = event.size; shell.setSize(shell.computeSize(size.x, size.y)); } shell.open(); } }); browser.addCloseWindowListener(new org.eclipse.swt.browser.CloseWindowListener() { public void close(org.eclipse.swt.browser.WindowEvent event) { org.eclipse.swt.browser.Browser browser = ((org.eclipse.swt.browser.Browser) (event.widget)); org.eclipse.swt.browser.Shell shell = browser.getShell(); shell.close(); } }); doit = true; } else { org.eclipse.swt.browser.WindowEvent event = new org.eclipse.swt.browser.WindowEvent(src); event.display = display; event.widget = src; for (int i = 0; i < (src.openWindowListeners.length); i++) src.openWindowListeners[i].open(event); browser = event.browser; doit = (browser != null) && (!(browser.isDisposed())); } if (doit) { int address = browser.webBrowserChrome.getAddress(); org.eclipse.swt.browser.nsIWebBrowserChrome webBrowserChrome = new org.eclipse.swt.browser.nsIWebBrowserChrome(address); webBrowserChrome.AddRef(); org.eclipse.swt.browser.XPCOM.memmove(_retval, new int[]{ address }, 4); } return doit ? XPCOM.NS_OK : XPCOM.NS_ERROR_NOT_IMPLEMENTED; }
void setBounds(int x, int y, int width, int height, boolean move, boolean resize) { if ((window) == null) return; if (fullScreen) setFullScreen(false); int screenHeight = ((int) (display.getPrimaryFrame().height)); org.eclipse.swt.widgets.NSRect frame = window.frame(); if (!move) { x = ((int) (frame.x)); y = screenHeight - ((int) ((frame.y) + (frame.height))); } if (!resize) { width = ((int) (frame.width)); height = ((int) (frame.height)); } frame.x = x; frame.y = screenHeight - ((int) (y + height)); frame.width = width; frame.height = height; window.setFrame(frame, false); }
void drawWidget(int control, int damageRgn, int visibleRgn, int theEvent) { org.eclipse.swt.widgets.GCData data = new org.eclipse.swt.widgets.GCData(); data.paintEvent = theEvent; data.visibleRgn = visibleRgn; org.eclipse.swt.widgets.GC gc = org.eclipse.swt.widgets.GC.carbon_new(this, data); int selStart = selection.x; int selEnd = selection.y; if (selStart > selEnd) { selStart = selection.y; selEnd = selection.x; } selStart = selEnd = -1; layout.draw(gc, 0, 0, selStart, selEnd, null, null); gc.dispose(); super.drawWidget(control, damageRgn, visibleRgn, theEvent); }
void createHandle() { super.createHandle(); state &= ~(CANVAS); if ((COMCTL32_MAJOR) < 6) { int bits = org.eclipse.swt.widgets.OS.GetWindowLong(handle, OS.GWL_STYLE); bits &= ~(OS.TBSTYLE_TRANSPARENT); org.eclipse.swt.widgets.OS.SetWindowLong(handle, OS.GWL_STYLE, bits); } int hFont = org.eclipse.swt.widgets.OS.GetStockObject(OS.SYSTEM_FONT); org.eclipse.swt.widgets.OS.SendMessage(handle, OS.WM_SETFONT, hFont, 0); org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TB_BUTTONSTRUCTSIZE, TBBUTTON.sizeof, 0); org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TB_SETBITMAPSIZE, 0, 0); org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TB_SETBUTTONSIZE, 0, 0); org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TB_SETEXTENDEDSTYLE, 0, OS.TBSTYLE_EX_DRAWDDARROWS); }
void drawBackground(int control, int context) { fillBackground(control, context, null); if (((!(hasFocus())) || (!(drawFocusRing()))) || ((focusIndex) == (-1))) return; int[] outMetric = new int[1]; org.eclipse.swt.internal.carbon.OS.GetThemeMetric(OS.kThemeMetricFocusRectOutset, outMetric); (outMetric[0])--; org.eclipse.swt.internal.carbon.Rect r = new org.eclipse.swt.internal.carbon.Rect(); org.eclipse.swt.widgets.Rectangle[] rects = getRectangles(focusIndex); for (int i = 0; i < (rects.length); i++) { org.eclipse.swt.widgets.Rectangle rect = rects[i]; r.left = ((short) ((rect.x) + (outMetric[0]))); r.top = ((short) ((rect.y) + (outMetric[0]))); r.right = ((short) (((r.left) + (rect.width)) - ((outMetric[0]) * 2))); r.bottom = ((short) (((r.top) + (rect.height)) - ((outMetric[0]) * 2))); org.eclipse.swt.internal.carbon.OS.DrawThemeFocusRect(r, true); } }
int OnStateChange(int aWebProgress, int aRequest, int aStateFlags, int aStatus) { if (((registerFunctionsOnState) != 0) && ((aStateFlags & (registerFunctionsOnState)) == (registerFunctionsOnState))) { registerFunctionsOnState = 0; java.util.Enumeration elements = functions.elements(); while (elements.hasMoreElements()) { org.eclipse.swt.browser.BrowserFunction function = ((org.eclipse.swt.browser.BrowserFunction) (elements.nextElement())); if (!(function.isEvaluate)) { execute(function.functionString); } } } if ((updateLastNavigateUrl) && (aStateFlags == ((nsIWebProgressListener.STATE_IS_REQUEST) | (nsIWebProgressListener.STATE_START)))) { org.eclipse.swt.browser.nsIRequest request = new org.eclipse.swt.browser.nsIRequest(aRequest); int name = org.eclipse.swt.browser.XPCOM.nsEmbedCString_new(); int rc = request.GetName(name); if (rc == (XPCOM.NS_OK)) { int length = org.eclipse.swt.browser.XPCOM.nsEmbedCString_Length(name); int buffer = org.eclipse.swt.browser.XPCOM.nsEmbedCString_get(name); byte[] bytes = new byte[length]; org.eclipse.swt.browser.XPCOM.memmove(bytes, buffer, length); java.lang.String value = new java.lang.String(bytes); if ((value.indexOf(":/")) != (-1)) lastNavigateURL = value; } org.eclipse.swt.browser.XPCOM.nsEmbedCString_delete(name); } if ((aStateFlags & (nsIWebProgressListener.STATE_IS_DOCUMENT)) == 0) return XPCOM.NS_OK; if ((aStateFlags & (nsIWebProgressListener.STATE_START)) != 0) { int[] result = new int[1]; if (isRetrievingBadCert) { isRetrievingBadCert = false; org.eclipse.swt.browser.nsIRequest request = new org.eclipse.swt.browser.nsIRequest(aRequest); int rc = request.QueryInterface(nsIChannel.NS_ICHANNEL_IID, result); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); if ((result[0]) == 0) org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); org.eclipse.swt.browser.nsIChannel channel = new org.eclipse.swt.browser.nsIChannel(result[0]); result[0] = 0; rc = channel.SetNotificationCallbacks(interfaceRequestor.getAddress()); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); channel.Release(); return XPCOM.NS_OK; } if ((request) == 0) request = aRequest; registerFunctionsOnState = (nsIWebProgressListener.STATE_IS_REQUEST) | (nsIWebProgressListener.STATE_START); org.eclipse.swt.browser.nsIWebProgress progress = new org.eclipse.swt.browser.nsIWebProgress(aWebProgress); int rc = progress.GetDOMWindow(result); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); if ((result[0]) == 0) org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); unhookedDOMWindows.addElement(new org.eclipse.swt.browser.LONG(result[0])); } else if ((aStateFlags & (nsIWebProgressListener.STATE_REDIRECTING)) != 0) { if ((request) == aRequest) request = 0; registerFunctionsOnState = nsIWebProgressListener.STATE_TRANSFERRING; updateLastNavigateUrl = true; } else if ((aStateFlags & (nsIWebProgressListener.STATE_STOP)) != 0) { int[] result = new int[1]; org.eclipse.swt.browser.nsIWebProgress progress = new org.eclipse.swt.browser.nsIWebProgress(aWebProgress); int rc = progress.GetDOMWindow(result); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); if ((result[0]) == 0) org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); org.eclipse.swt.browser.nsIDOMWindow domWindow = new org.eclipse.swt.browser.nsIDOMWindow(result[0]); org.eclipse.swt.browser.LONG ptrObject = new org.eclipse.swt.browser.LONG(result[0]); result[0] = 0; int index = unhookedDOMWindows.indexOf(ptrObject); if (index != (-1)) { rc = webBrowser.GetContentDOMWindow(result); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); if ((result[0]) == 0) org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_ERROR_NO_INTERFACE); boolean isTop = (result[0]) == (domWindow.getAddress()); new org.eclipse.swt.browser.nsISupports(result[0]).Release(); result[0] = 0; rc = domWindow.QueryInterface(nsIDOMEventTarget.NS_IDOMEVENTTARGET_IID, result); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); if ((result[0]) == 0) org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_ERROR_NO_INTERFACE); org.eclipse.swt.browser.nsIDOMEventTarget target = new org.eclipse.swt.browser.nsIDOMEventTarget(result[0]); result[0] = 0; hookDOMListeners(target, isTop); target.Release(); unhookedDOMWindows.remove(ptrObject); new org.eclipse.swt.browser.nsISupports(ptrObject.value).Release(); } boolean deferCompleted = false; if ((htmlBytes) != null) { org.eclipse.swt.browser.nsIRequest req = new org.eclipse.swt.browser.nsIRequest(aRequest); int name = org.eclipse.swt.browser.XPCOM.nsEmbedCString_new(); rc = req.GetName(name); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); int length = org.eclipse.swt.browser.XPCOM.nsEmbedCString_Length(name); int buffer = org.eclipse.swt.browser.XPCOM.nsEmbedCString_get(name); byte[] dest = new byte[length]; org.eclipse.swt.browser.XPCOM.memmove(dest, buffer, length); java.lang.String url = new java.lang.String(dest); org.eclipse.swt.browser.XPCOM.nsEmbedCString_delete(name); if (url.startsWith(org.eclipse.swt.browser.Mozilla.ABOUT_BLANK)) { unhookDOMListeners(); rc = org.eclipse.swt.browser.XPCOM.NS_GetServiceManager(result); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); if ((result[0]) == 0) org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); org.eclipse.swt.browser.nsIServiceManager serviceManager = new org.eclipse.swt.browser.nsIServiceManager(result[0]); result[0] = 0; rc = serviceManager.GetService(XPCOM.NS_IOSERVICE_CID, nsIIOService.NS_IIOSERVICE_IID, result); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); if ((result[0]) == 0) org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); serviceManager.Release(); org.eclipse.swt.browser.nsIIOService ioService = new org.eclipse.swt.browser.nsIIOService(result[0]); result[0] = 0; byte[] aString; if (untrustedText) { aString = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.ABOUT_BLANK, false); } else { aString = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.URI_FILEROOT, false); } int aSpec = org.eclipse.swt.browser.XPCOM.nsEmbedCString_new(aString, aString.length); rc = ioService.NewURI(aSpec, null, 0, result); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); if ((result[0]) == 0) org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); org.eclipse.swt.browser.XPCOM.nsEmbedCString_delete(aSpec); ioService.Release(); org.eclipse.swt.browser.nsIURI uri = new org.eclipse.swt.browser.nsIURI(result[0]); result[0] = 0; rc = webBrowser.QueryInterface(nsIWebBrowserStream.NS_IWEBBROWSERSTREAM_IID, result); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); if ((result[0]) == 0) org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); org.eclipse.swt.browser.nsIWebBrowserStream stream = new org.eclipse.swt.browser.nsIWebBrowserStream(result[0]); result[0] = 0; byte[] contentTypeBuffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, "text/html", false); int aContentType = org.eclipse.swt.browser.XPCOM.nsEmbedCString_new(contentTypeBuffer, contentTypeBuffer.length); rc = stream.OpenStream(uri.getAddress(), aContentType); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); java.util.Enumeration elements = functions.elements(); while (elements.hasMoreElements()) { org.eclipse.swt.browser.BrowserFunction function = ((org.eclipse.swt.browser.BrowserFunction) (elements.nextElement())); if (!(function.isEvaluate)) { execute(function.functionString); } } registerFunctionsOnState = (nsIWebProgressListener.STATE_IS_REQUEST) | (nsIWebProgressListener.STATE_START); int ptr = org.eclipse.swt.browser.C.malloc(htmlBytes.length); org.eclipse.swt.browser.XPCOM.memmove(ptr, htmlBytes, htmlBytes.length); int pageSize = 8192; int pageCount = ((htmlBytes.length) / pageSize) + 1; int current = ptr; for (int i = 0; i < pageCount; i++) { length = (i == (pageCount - 1)) ? (htmlBytes.length) % pageSize : pageSize; if (length > 0) { rc = stream.AppendToStream(current, length); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); } current += pageSize; } rc = stream.CloseStream(); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); org.eclipse.swt.browser.C.free(ptr); org.eclipse.swt.browser.XPCOM.nsEmbedCString_delete(aContentType); stream.Release(); uri.Release(); htmlBytes = null; deferCompleted = true; rc = webBrowser.GetContentDOMWindow(result); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); if ((result[0]) == 0) org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_ERROR_NO_INTERFACE); boolean isTop = (result[0]) == (domWindow.getAddress()); new org.eclipse.swt.browser.nsISupports(result[0]).Release(); result[0] = 0; rc = domWindow.QueryInterface(nsIDOMEventTarget.NS_IDOMEVENTTARGET_IID, result); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); if ((result[0]) == 0) org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_ERROR_NO_INTERFACE); org.eclipse.swt.browser.nsIDOMEventTarget target = new org.eclipse.swt.browser.nsIDOMEventTarget(result[0]); result[0] = 0; hookDOMListeners(target, isTop); target.Release(); } else { registerFunctionsOnState = 0; } } domWindow.Release(); if (((request) == aRequest) || ((request) == 0)) { request = 0; org.eclipse.swt.browser.StatusTextEvent event = new org.eclipse.swt.browser.StatusTextEvent(browser); event.display = browser.getDisplay(); event.widget = browser; event.text = ""; for (int i = 0; i < (statusTextListeners.length); i++) { statusTextListeners[i].changed(event); } final org.eclipse.swt.browser.Display display = browser.getDisplay(); final org.eclipse.swt.browser.ProgressEvent event2 = new org.eclipse.swt.browser.ProgressEvent(browser); event2.display = display; event2.widget = browser; java.lang.Runnable runnable = new java.lang.Runnable() { public void run() { if (browser.isDisposed()) return; for (int i = 0; i < (progressListeners.length); i++) { progressListeners[i].completed(event2); } } }; if (deferCompleted) { display.asyncExec(runnable); } else { display.syncExec(runnable); } } } else if ((aStateFlags & (nsIWebProgressListener.STATE_TRANSFERRING)) != 0) { if (updateLastNavigateUrl) { updateLastNavigateUrl = false; int[] result = new int[1]; org.eclipse.swt.browser.nsIRequest request = new org.eclipse.swt.browser.nsIRequest(aRequest); int rc = request.QueryInterface(nsIChannel.NS_ICHANNEL_IID, result); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); if ((result[0]) == 0) org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); org.eclipse.swt.browser.nsIChannel channel = new org.eclipse.swt.browser.nsIChannel(result[0]); result[0] = 0; rc = channel.GetURI(result); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); if ((result[0]) == 0) org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_ERROR_NULL_POINTER); channel.Release(); org.eclipse.swt.browser.nsIURI uri = new org.eclipse.swt.browser.nsIURI(result[0]); result[0] = 0; int aSpec = org.eclipse.swt.browser.XPCOM.nsEmbedCString_new(); rc = uri.GetSpec(aSpec); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); int length = org.eclipse.swt.browser.XPCOM.nsEmbedCString_Length(aSpec); int buffer = org.eclipse.swt.browser.XPCOM.nsEmbedCString_get(aSpec); byte[] bytes = new byte[length]; org.eclipse.swt.browser.XPCOM.memmove(bytes, buffer, length); lastNavigateURL = new java.lang.String(bytes); org.eclipse.swt.browser.XPCOM.nsEmbedCString_delete(aSpec); uri.Release(); } int[] result = new int[1]; org.eclipse.swt.browser.nsIWebProgress progress = new org.eclipse.swt.browser.nsIWebProgress(aWebProgress); int rc = progress.GetDOMWindow(result); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); if ((result[0]) == 0) org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); org.eclipse.swt.browser.nsIDOMWindow domWindow = new org.eclipse.swt.browser.nsIDOMWindow(result[0]); org.eclipse.swt.browser.LONG ptrObject = new org.eclipse.swt.browser.LONG(result[0]); result[0] = 0; int index = unhookedDOMWindows.indexOf(ptrObject); if (index != (-1)) { rc = webBrowser.GetContentDOMWindow(result); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); if ((result[0]) == 0) org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_ERROR_NO_INTERFACE); boolean isTop = (result[0]) == (domWindow.getAddress()); new org.eclipse.swt.browser.nsISupports(result[0]).Release(); result[0] = 0; rc = domWindow.QueryInterface(nsIDOMEventTarget.NS_IDOMEVENTTARGET_IID, result); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); if ((result[0]) == 0) org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_ERROR_NO_INTERFACE); org.eclipse.swt.browser.nsIDOMEventTarget target = new org.eclipse.swt.browser.nsIDOMEventTarget(result[0]); result[0] = 0; hookDOMListeners(target, isTop); target.Release(); unhookedDOMWindows.remove(ptrObject); new org.eclipse.swt.browser.nsISupports(ptrObject.value).Release(); } domWindow.Release(); } return XPCOM.NS_OK; }
public org.eclipse.swt.widgets.Point computeSize(int wHint, int hHint, boolean changed) { checkWidget(); int width = 0; int height = 0; if (wHint == (SWT.DEFAULT)) { if (((style) & (SWT.H_SCROLL)) != 0) { width = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.CB_GETHORIZONTALEXTENT, 0, 0); } else { int newFont; int oldFont = 0; int hDC = org.eclipse.swt.widgets.OS.GetDC(handle); newFont = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.WM_GETFONT, 0, 0); if (newFont != 0) oldFont = org.eclipse.swt.widgets.OS.SelectObject(hDC, newFont); int count = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.CB_GETCOUNT, 0, 0); org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); int flags = (OS.DT_CALCRECT) | (OS.DT_NOPREFIX); if (((style) & (SWT.READ_ONLY)) == 0) flags |= OS.DT_EDITCONTROL; int length = org.eclipse.swt.widgets.OS.GetWindowTextLength(handle); int cp = getCodePage(); org.eclipse.swt.widgets.TCHAR buffer = new org.eclipse.swt.widgets.TCHAR(cp, (length + 1)); org.eclipse.swt.widgets.OS.GetWindowText(handle, buffer, (length + 1)); org.eclipse.swt.widgets.OS.DrawText(hDC, buffer, length, rect, flags); width = java.lang.Math.max(width, ((rect.right) - (rect.left))); for (int i = 0; i < count; i++) { length = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.CB_GETLBTEXTLEN, i, 0); if (length != (OS.CB_ERR)) { if ((length + 1) > (buffer.length())) buffer = new org.eclipse.swt.widgets.TCHAR(cp, (length + 1)); int result = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.CB_GETLBTEXT, i, buffer); if (result != (OS.CB_ERR)) { org.eclipse.swt.widgets.OS.DrawText(hDC, buffer, length, rect, flags); width = java.lang.Math.max(width, ((rect.right) - (rect.left))); } } } if (newFont != 0) org.eclipse.swt.widgets.OS.SelectObject(hDC, oldFont); org.eclipse.swt.widgets.OS.ReleaseDC(handle, hDC); } } if (hHint == (SWT.DEFAULT)) { if (((style) & (SWT.SIMPLE)) != 0) { int count = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.CB_GETCOUNT, 0, 0); int itemHeight = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.CB_GETITEMHEIGHT, 0, 0); height = count * itemHeight; } } if (width == 0) width = DEFAULT_WIDTH; if (height == 0) height = DEFAULT_HEIGHT; if (wHint != (SWT.DEFAULT)) width = wHint; if (hHint != (SWT.DEFAULT)) height = hHint; if (((style) & (SWT.READ_ONLY)) != 0) { width += 8; } else { int hwndText = org.eclipse.swt.widgets.OS.GetDlgItem(handle, org.eclipse.swt.widgets.Combo.CBID_EDIT); if (hwndText != 0) { int margins = org.eclipse.swt.widgets.OS.SendMessage(hwndText, OS.EM_GETMARGINS, 0, 0); int marginWidth = (margins & 65535) + ((margins >> 16) & 65535); width += marginWidth + 3; } } org.eclipse.swt.widgets.COMBOBOXINFO pcbi = new org.eclipse.swt.widgets.COMBOBOXINFO(); pcbi.cbSize = COMBOBOXINFO.sizeof; if (((((style) & (SWT.SIMPLE)) == 0) && (!(OS.IsWinCE))) && (org.eclipse.swt.widgets.OS.GetComboBoxInfo(handle, pcbi))) { width += (pcbi.itemLeft) + ((pcbi.buttonRight) - (pcbi.buttonLeft)); height = ((pcbi.buttonBottom) - (pcbi.buttonTop)) + ((pcbi.buttonTop) * 2); } else { int border = org.eclipse.swt.widgets.OS.GetSystemMetrics(OS.SM_CXEDGE); width += (org.eclipse.swt.widgets.OS.GetSystemMetrics(OS.SM_CXVSCROLL)) + (border * 2); int textHeight = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.CB_GETITEMHEIGHT, (-1), 0); if (((style) & (SWT.DROP_DOWN)) != 0) { height = textHeight + 6; } else { height += textHeight + 10; } } if ((((style) & (SWT.SIMPLE)) != 0) && (((style) & (SWT.H_SCROLL)) != 0)) { height += org.eclipse.swt.widgets.OS.GetSystemMetrics(OS.SM_CYHSCROLL); } return new org.eclipse.swt.widgets.Point(width, height); }
void popupEvent(org.eclipse.swt.custom.Event event) { switch (event.type) { case SWT.Paint : org.eclipse.swt.custom.Rectangle listRect = list.getBounds(); org.eclipse.swt.custom.Color black = getDisplay().getSystemColor(SWT.COLOR_BLACK); event.gc.setForeground(black); event.gc.drawRectangle(0, 0, ((listRect.width) + 1), ((listRect.height) + 1)); break; case SWT.Close : event.doit = false; dropDown(false); break; case SWT.Deactivate : if (!("carbon".equals(org.eclipse.swt.custom.SWT.getPlatform()))) { org.eclipse.swt.custom.Point point = arrow.toControl(getDisplay().getCursorLocation()); org.eclipse.swt.custom.Point size = arrow.getSize(); org.eclipse.swt.custom.Rectangle rect = new org.eclipse.swt.custom.Rectangle(0, 0, size.x, size.y); if (!(rect.contains(point))) dropDown(false); } else { dropDown(false); } break; } }
int foregroundIdleProc(int code, int wParam, int lParam) { if (code >= 0) { if ((runMessages) && ((getMessageCount()) != 0)) { if (runMessagesInIdle) { if (runMessagesInMessageProc) { org.eclipse.swt.widgets.OS.PostMessage(hwndMessage, org.eclipse.swt.widgets.Display.SWT_RUNASYNC, 0, 0); } else { runAsyncMessages(false); } } org.eclipse.swt.widgets.MSG msg = new org.eclipse.swt.widgets.MSG(); int flags = (((OS.PM_NOREMOVE) | (OS.PM_NOYIELD)) | (OS.PM_QS_INPUT)) | (OS.PM_QS_POSTMESSAGE); if (!(org.eclipse.swt.widgets.OS.PeekMessage(msg, 0, 0, 0, flags))) wakeThread(); } } return org.eclipse.swt.widgets.OS.CallNextHookEx(idleHook, ((int) (code)), wParam, lParam); }
public org.eclipse.swt.widgets.Shell getActiveShell() { checkDevice(); int theWindow = org.eclipse.swt.internal.carbon.OS.FrontWindow(); if (theWindow == 0) return null; if (!(org.eclipse.swt.internal.carbon.OS.IsWindowActive(theWindow))) return null; int[] theControl = new int[1]; org.eclipse.swt.internal.carbon.OS.GetRootControl(theWindow, theControl); org.eclipse.swt.widgets.Widget widget = getWidget(theControl[0]); if (widget instanceof org.eclipse.swt.widgets.Shell) return ((org.eclipse.swt.widgets.Shell) (widget)); return null; }
public void paint(org.eclipse.swt.examples.graphics.GC gc, int width, int height) { if (!(example.checkAdvancedGraphics())) return; org.eclipse.swt.examples.graphics.Device device = gc.getDevice(); if (((ovalColorGB) != null) && ((ovalColorGB.getBgColor1()) != null)) gc.setBackground(ovalColorGB.getBgColor1()); gc.setAntialias(aliasValues[aliasCombo.getSelectionIndex()]); org.eclipse.swt.examples.graphics.Path path = new org.eclipse.swt.examples.graphics.Path(device); for (int i = 0; i < 75; i++) { path.addArc((((2 * width) / 3) - (25 * i)), ((height / 3) - (10 * i)), (50 + (50 * i)), (30 + (20 * i)), 0, 360); } gc.fillPath(path); path.dispose(); }
boolean updateToolTip(int x, int y, org.eclipse.swt.custom.Label label) { org.eclipse.swt.custom.CTabItem item = getItem(new org.eclipse.swt.custom.Point(x, y)); if (item == null) return false; java.lang.String tooltip = item.getToolTipText(); if (tooltip == null) return false; if (tooltip.equals(label.getText())) return true; org.eclipse.swt.custom.Shell tip = label.getShell(); label.setText(tooltip); org.eclipse.swt.custom.Point labelSize = label.computeSize(SWT.DEFAULT, SWT.DEFAULT); labelSize.x += 2; labelSize.y += 2; label.setSize(labelSize); tip.pack(); org.eclipse.swt.custom.Rectangle area = tip.getClientArea(); label.setSize(area.width, area.height); org.eclipse.swt.custom.Point cursorLocation = getDisplay().getCursorLocation(); int cursorHeight = 21; org.eclipse.swt.custom.Point size = tip.getSize(); org.eclipse.swt.custom.Rectangle rect = tip.getMonitor().getBounds(); org.eclipse.swt.custom.Point pt = new org.eclipse.swt.custom.Point(cursorLocation.x, (((cursorLocation.y) + cursorHeight) + 2)); pt.x = java.lang.Math.max(pt.x, rect.x); if (((pt.x) + (size.x)) > ((rect.x) + (rect.width))) pt.x = ((rect.x) + (rect.width)) - (size.x); if (((pt.y) + (size.y)) > ((rect.y) + (rect.height))) { pt.y = ((cursorLocation.y) - 2) - (size.y); } tip.setLocation(pt); return true; }
org.eclipse.swt.widgets.LRESULT wmNotifyChild(int wParam, int lParam) { org.eclipse.swt.widgets.NMHDR hdr = new org.eclipse.swt.widgets.NMHDR(); org.eclipse.swt.widgets.OS.MoveMemory(hdr, lParam, NMHDR.sizeof); switch (hdr.code) { case OS.TVN_GETDISPINFOA : case OS.TVN_GETDISPINFOW : { org.eclipse.swt.widgets.NMTVDISPINFO lptvdi = new org.eclipse.swt.widgets.NMTVDISPINFO(); org.eclipse.swt.widgets.OS.MoveMemory(lptvdi, lParam, NMTVDISPINFO.sizeof); if ((items) == null) break; org.eclipse.swt.widgets.TreeItem item = items[lptvdi.lParam]; if (item == null) break; if (((lptvdi.mask) & (OS.TVIF_TEXT)) != 0) { java.lang.String string = item.text; org.eclipse.swt.widgets.TCHAR buffer = new org.eclipse.swt.widgets.TCHAR(getCodePage(), string, false); int byteCount = (java.lang.Math.min(buffer.length(), ((lptvdi.cchTextMax) - 1))) * (TCHAR.sizeof); org.eclipse.swt.widgets.OS.MoveMemory(lptvdi.pszText, buffer, byteCount); org.eclipse.swt.widgets.OS.MoveMemory(((lptvdi.pszText) + byteCount), new byte[TCHAR.sizeof], TCHAR.sizeof); lptvdi.cchTextMax = java.lang.Math.min(lptvdi.cchTextMax, ((string.length()) + 1)); } if (((lptvdi.mask) & ((OS.TVIF_IMAGE) | (OS.TVIF_SELECTEDIMAGE))) != 0) { org.eclipse.swt.widgets.Image image = item.image; lptvdi.iImage = OS.I_IMAGENONE; if (image != null) { lptvdi.iImage = lptvdi.iSelectedImage = imageIndex(image); } } org.eclipse.swt.widgets.OS.MoveMemory(lParam, lptvdi, NMTVDISPINFO.sizeof); break; } case OS.NM_CUSTOMDRAW : { if (!(customDraw)) break; org.eclipse.swt.widgets.NMTVCUSTOMDRAW nmcd = new org.eclipse.swt.widgets.NMTVCUSTOMDRAW(); org.eclipse.swt.widgets.OS.MoveMemory(nmcd, lParam, NMTVCUSTOMDRAW.sizeof); switch (nmcd.dwDrawStage) { case OS.CDDS_PREPAINT : { return new org.eclipse.swt.widgets.LRESULT(((OS.CDRF_NOTIFYITEMDRAW) | (OS.CDRF_NOTIFYPOSTPAINT))); } case OS.CDDS_POSTPAINT : { if (linesVisible) { int hDC = nmcd.hdc; if ((hwndHeader) != 0) { int x = 0; org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); org.eclipse.swt.widgets.HDITEM hdItem = new org.eclipse.swt.widgets.HDITEM(); hdItem.mask = OS.HDI_WIDTH; int count = org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0); for (int i = 0; i < count; i++) { org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEM, i, hdItem); org.eclipse.swt.widgets.OS.SetRect(rect, x, nmcd.top, (x + (hdItem.cxy)), nmcd.bottom); org.eclipse.swt.widgets.OS.DrawEdge(hDC, rect, OS.BDR_SUNKENINNER, OS.BF_RIGHT); x += hdItem.cxy; } } org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); int hItem = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETNEXTITEM, OS.TVGN_LASTVISIBLE, 0); rect.left = hItem; if ((org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETITEMRECT, 0, rect)) != 0) { int height = (rect.bottom) - (rect.top); while ((rect.bottom) < (nmcd.bottom)) { int top = (rect.top) + height; org.eclipse.swt.widgets.OS.SetRect(rect, rect.left, top, rect.right, (top + height)); org.eclipse.swt.widgets.OS.DrawEdge(hDC, rect, OS.BDR_SUNKENINNER, OS.BF_BOTTOM); } } } return new org.eclipse.swt.widgets.LRESULT(OS.CDRF_DODEFAULT); } case OS.CDDS_ITEMPREPAINT : { org.eclipse.swt.widgets.TreeItem item = items[nmcd.lItemlParam]; if (item == null) break; if (((nmcd.left) >= (nmcd.right)) || ((nmcd.top) >= (nmcd.bottom))) { break; } int hDC = nmcd.hdc; org.eclipse.swt.widgets.OS.SaveDC(hDC); if (linesVisible) { org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); org.eclipse.swt.widgets.OS.SetRect(rect, nmcd.left, nmcd.top, nmcd.right, nmcd.bottom); org.eclipse.swt.widgets.OS.DrawEdge(hDC, rect, OS.BDR_SUNKENINNER, OS.BF_BOTTOM); } if (!(printClient)) { if ((hwndHeader) != 0) { int count = org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0); if (count != 0) { org.eclipse.swt.widgets.HDITEM hdItem = new org.eclipse.swt.widgets.HDITEM(); hdItem.mask = OS.HDI_WIDTH; org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEM, 0, hdItem); int hRgn = org.eclipse.swt.widgets.OS.CreateRectRgn(nmcd.left, nmcd.top, ((nmcd.left) + (hdItem.cxy)), nmcd.bottom); org.eclipse.swt.widgets.OS.SelectClipRgn(hDC, hRgn); org.eclipse.swt.widgets.OS.DeleteObject(hRgn); } } } if ((((item.font) == (-1)) && ((item.foreground) == (-1))) && ((item.background) == (-1))) { if ((((item.cellForeground) == null) && ((item.cellBackground) == null)) && ((item.cellFont) == null)) { return new org.eclipse.swt.widgets.LRESULT(((OS.CDRF_DODEFAULT) | (OS.CDRF_NOTIFYPOSTPAINT))); } } org.eclipse.swt.widgets.TVITEM tvItem = new org.eclipse.swt.widgets.TVITEM(); tvItem.mask = OS.TVIF_STATE; tvItem.hItem = item.handle; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETITEM, 0, tvItem); int hFont = ((item.cellFont) != null) ? item.cellFont[0] : item.font; if (hFont != (-1)) org.eclipse.swt.widgets.OS.SelectObject(hDC, hFont); if (((tvItem.state) & ((OS.TVIS_SELECTED) | (OS.TVIS_DROPHILITED))) == 0) { if (org.eclipse.swt.widgets.OS.IsWindowEnabled(handle)) { int clrText = ((item.cellForeground) != null) ? item.cellForeground[0] : item.foreground; nmcd.clrText = (clrText == (-1)) ? getForegroundPixel() : clrText; int clrTextBk = ((item.cellBackground) != null) ? item.cellBackground[0] : item.background; nmcd.clrTextBk = (clrTextBk == (-1)) ? getBackgroundPixel() : clrTextBk; org.eclipse.swt.widgets.OS.MoveMemory(lParam, nmcd, NMTVCUSTOMDRAW.sizeof); } } return new org.eclipse.swt.widgets.LRESULT(((OS.CDRF_NEWFONT) | (OS.CDRF_NOTIFYPOSTPAINT))); } case OS.CDDS_ITEMPOSTPAINT : { org.eclipse.swt.widgets.TreeItem item = items[nmcd.lItemlParam]; if (item == null) break; if (((nmcd.left) >= (nmcd.right)) || ((nmcd.top) >= (nmcd.bottom))) { break; } int hDC = nmcd.hdc; org.eclipse.swt.widgets.OS.RestoreDC(hDC, (-1)); org.eclipse.swt.widgets.OS.SetBkMode(hDC, OS.TRANSPARENT); if (org.eclipse.swt.widgets.OS.IsWindowEnabled(handle)) { org.eclipse.swt.widgets.OS.SetTextColor(hDC, getForegroundPixel()); } if ((hwndHeader) != 0) { org.eclipse.swt.widgets.GCData data = new org.eclipse.swt.widgets.GCData(); data.device = display; org.eclipse.swt.widgets.GC gc = org.eclipse.swt.widgets.GC.win32_new(hDC, data); int x = 0; org.eclipse.swt.widgets.Point size = null; org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); org.eclipse.swt.widgets.HDITEM hdItem = new org.eclipse.swt.widgets.HDITEM(); hdItem.mask = OS.HDI_WIDTH; int count = org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0); for (int i = 0; i < count; i++) { org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEM, i, hdItem); if (i > 0) { org.eclipse.swt.widgets.OS.SetRect(rect, x, nmcd.top, (x + (hdItem.cxy)), ((nmcd.bottom) - (org.eclipse.swt.widgets.Tree.GRID_WIDTH))); if (printClient) { int clrBackground = (org.eclipse.swt.widgets.OS.IsWindowEnabled(handle)) ? getBackgroundPixel() : org.eclipse.swt.widgets.OS.GetSysColor(OS.COLOR_BTNFACE); drawBackground(hDC, clrBackground, rect); } if (org.eclipse.swt.widgets.OS.IsWindowEnabled(handle)) { int clrTextBk = ((item.cellBackground) != null) ? item.cellBackground[i] : item.background; if (clrTextBk != (-1)) drawBackground(hDC, clrTextBk, rect); } org.eclipse.swt.widgets.Image image = ((item.images) != null) ? item.images[i] : null; if (image != null) { org.eclipse.swt.widgets.Rectangle bounds = image.getBounds(); if (size == null) size = getImageSize(); gc.drawImage(image, 0, 0, bounds.width, bounds.height, rect.left, rect.top, size.x, size.y); org.eclipse.swt.widgets.OS.SetRect(rect, (((rect.left) + (size.x)) + (org.eclipse.swt.widgets.Tree.INSET)), rect.top, ((rect.right) - (org.eclipse.swt.widgets.Tree.INSET)), rect.bottom); } else { org.eclipse.swt.widgets.OS.SetRect(rect, ((rect.left) + (org.eclipse.swt.widgets.Tree.INSET)), rect.top, ((rect.right) - (org.eclipse.swt.widgets.Tree.INSET)), rect.bottom); } if ((rect.left) < (rect.right)) { if (((item.strings) != null) && ((item.strings[i]) != null)) { int hFont = ((item.cellFont) != null) ? item.cellFont[i] : item.font; hFont = (hFont != (-1)) ? org.eclipse.swt.widgets.OS.SelectObject(hDC, hFont) : -1; int clrText = -1; if (org.eclipse.swt.widgets.OS.IsWindowEnabled(handle)) { clrText = ((item.cellForeground) != null) ? item.cellForeground[i] : item.foreground; clrText = (clrText != (-1)) ? org.eclipse.swt.widgets.OS.SetTextColor(hDC, clrText) : -1; } int flags = (((OS.DT_NOPREFIX) | (OS.DT_SINGLELINE)) | (OS.DT_VCENTER)) | (OS.DT_ENDELLIPSIS); org.eclipse.swt.widgets.TreeColumn column = columns[i]; if (((column.style) & (SWT.LEFT)) != 0) flags |= OS.DT_LEFT; if (((column.style) & (SWT.CENTER)) != 0) flags |= OS.DT_CENTER; if (((column.style) & (SWT.RIGHT)) != 0) flags |= OS.DT_RIGHT; org.eclipse.swt.widgets.TCHAR buffer = new org.eclipse.swt.widgets.TCHAR(getCodePage(), item.strings[i], false); org.eclipse.swt.widgets.OS.DrawText(hDC, buffer, buffer.length(), rect, flags); if (hFont != (-1)) org.eclipse.swt.widgets.OS.SelectObject(hDC, hFont); if (clrText != (-1)) org.eclipse.swt.widgets.OS.SetTextColor(hDC, clrText); } } } x += hdItem.cxy; } gc.dispose(); } if (linesVisible) { org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); if (printClient) { if ((hwndHeader) != 0) { int count = org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0); if ((count != 0) && (printClient)) { org.eclipse.swt.widgets.HDITEM hdItem = new org.eclipse.swt.widgets.HDITEM(); hdItem.mask = OS.HDI_WIDTH; org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEM, 0, hdItem); org.eclipse.swt.widgets.OS.SetRect(rect, ((nmcd.left) + (hdItem.cxy)), nmcd.top, nmcd.right, nmcd.bottom); org.eclipse.swt.widgets.OS.DrawEdge(hDC, rect, OS.BDR_SUNKENINNER, OS.BF_BOTTOM); } } } if ((OS.COMCTL32_MAJOR) < 6) { org.eclipse.swt.widgets.OS.SetRect(rect, nmcd.left, nmcd.top, nmcd.right, nmcd.bottom); } else { rect.left = item.handle; if ((org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETITEMRECT, 1, rect)) != 0) { int hItem = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETNEXTITEM, OS.TVGN_CARET, 0); if ((hItem == (item.handle)) || ((OS.COMCTL32_MAJOR) < 6)) { org.eclipse.swt.widgets.OS.SetRect(rect, rect.right, nmcd.top, nmcd.right, nmcd.bottom); } else { org.eclipse.swt.widgets.TVITEM tvItem = new org.eclipse.swt.widgets.TVITEM(); tvItem.mask = OS.TVIF_STATE; tvItem.hItem = item.handle; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETITEM, 0, tvItem); if (((tvItem.state) & (OS.TVIS_SELECTED)) != 0) { org.eclipse.swt.widgets.OS.SetRect(rect, rect.right, nmcd.top, nmcd.right, nmcd.bottom); } else { org.eclipse.swt.widgets.OS.SetRect(rect, rect.left, nmcd.top, nmcd.right, nmcd.bottom); } } } else { rect.left = 0; } } org.eclipse.swt.widgets.OS.DrawEdge(hDC, rect, OS.BDR_SUNKENINNER, OS.BF_BOTTOM); } return new org.eclipse.swt.widgets.LRESULT(OS.CDRF_DODEFAULT); } } break; } case OS.NM_DBLCLK : { if (!(ignoreSelect)) { int pos = org.eclipse.swt.widgets.OS.GetMessagePos(); org.eclipse.swt.widgets.POINT pt = new org.eclipse.swt.widgets.POINT(); pt.x = ((short) (pos & 65535)); pt.y = ((short) (pos >> 16)); org.eclipse.swt.widgets.OS.ScreenToClient(handle, pt); org.eclipse.swt.widgets.TVHITTESTINFO lpht = new org.eclipse.swt.widgets.TVHITTESTINFO(); lpht.x = pt.x; lpht.y = pt.y; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_HITTEST, 0, lpht); if (((lpht.flags) & (OS.TVHT_ONITEM)) == 0) break; org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); int hItem = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETNEXTITEM, OS.TVGN_CARET, 0); if (hItem != 0) { org.eclipse.swt.widgets.TVITEM tvItem = new org.eclipse.swt.widgets.TVITEM(); tvItem.hItem = hItem; tvItem.mask = OS.TVIF_PARAM; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETITEM, 0, tvItem); event.item = items[tvItem.lParam]; } postEvent(SWT.DefaultSelection, event); } if (hooks(SWT.DefaultSelection)) return LRESULT.ONE; break; } case OS.TVN_SELCHANGEDA : case OS.TVN_SELCHANGEDW : { if (((style) & (SWT.MULTI)) != 0) { if (lockSelection) { if (oldSelected) { org.eclipse.swt.widgets.TVITEM tvItem = new org.eclipse.swt.widgets.TVITEM(); int offset = (NMHDR.sizeof) + 4; org.eclipse.swt.widgets.OS.MoveMemory(tvItem, (lParam + offset), TVITEM.sizeof); tvItem.mask = OS.TVIF_STATE; tvItem.stateMask = OS.TVIS_SELECTED; tvItem.state = OS.TVIS_SELECTED; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_SETITEM, 0, tvItem); } if ((!(newSelected)) && (ignoreSelect)) { org.eclipse.swt.widgets.TVITEM tvItem = new org.eclipse.swt.widgets.TVITEM(); int offset = ((NMHDR.sizeof) + 4) + (TVITEM.sizeof); org.eclipse.swt.widgets.OS.MoveMemory(tvItem, (lParam + offset), TVITEM.sizeof); tvItem.mask = OS.TVIF_STATE; tvItem.stateMask = OS.TVIS_SELECTED; tvItem.state = 0; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_SETITEM, 0, tvItem); } } } if (!(ignoreSelect)) { org.eclipse.swt.widgets.TVITEM tvItem = new org.eclipse.swt.widgets.TVITEM(); int offset = ((NMHDR.sizeof) + 4) + (TVITEM.sizeof); org.eclipse.swt.widgets.OS.MoveMemory(tvItem, (lParam + offset), TVITEM.sizeof); hAnchor = tvItem.hItem; org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); event.item = items[tvItem.lParam]; postEvent(SWT.Selection, event); } updateScrollBar(); break; } case OS.TVN_SELCHANGINGA : case OS.TVN_SELCHANGINGW : { if (((style) & (SWT.MULTI)) != 0) { if (lockSelection) { org.eclipse.swt.widgets.TVITEM tvItem = new org.eclipse.swt.widgets.TVITEM(); int offset1 = (NMHDR.sizeof) + 4; org.eclipse.swt.widgets.OS.MoveMemory(tvItem, (lParam + offset1), TVITEM.sizeof); oldSelected = ((tvItem.state) & (OS.TVIS_SELECTED)) != 0; int offset2 = ((NMHDR.sizeof) + 4) + (TVITEM.sizeof); org.eclipse.swt.widgets.OS.MoveMemory(tvItem, (lParam + offset2), TVITEM.sizeof); newSelected = ((tvItem.state) & (OS.TVIS_SELECTED)) != 0; } } if ((!(ignoreSelect)) && (!(ignoreDeselect))) { hAnchor = 0; if (((style) & (SWT.MULTI)) != 0) deselectAll(); } break; } case OS.TVN_ITEMEXPANDEDA : case OS.TVN_ITEMEXPANDEDW : { updateScrollBar(); break; } case OS.TVN_ITEMEXPANDINGA : case OS.TVN_ITEMEXPANDINGW : { if (!(ignoreExpand)) { org.eclipse.swt.widgets.TVITEM tvItem = new org.eclipse.swt.widgets.TVITEM(); int offset = ((NMHDR.sizeof) + 4) + (TVITEM.sizeof); org.eclipse.swt.widgets.OS.MoveMemory(tvItem, (lParam + offset), TVITEM.sizeof); if ((items) == null) break; org.eclipse.swt.widgets.TreeItem item = items[tvItem.lParam]; if (item == null) break; org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); event.item = item; int[] action = new int[1]; org.eclipse.swt.widgets.OS.MoveMemory(action, (lParam + (NMHDR.sizeof)), 4); switch (action[0]) { case OS.TVE_EXPAND : if (((tvItem.state) & (OS.TVIS_EXPANDED)) == 0) { sendEvent(SWT.Expand, event); if (isDisposed()) return LRESULT.ZERO; } break; case OS.TVE_COLLAPSE : sendEvent(SWT.Collapse, event); if (isDisposed()) return LRESULT.ZERO; break; } } break; } case OS.TVN_BEGINDRAGA : case OS.TVN_BEGINDRAGW : case OS.TVN_BEGINRDRAGA : case OS.TVN_BEGINRDRAGW : { org.eclipse.swt.widgets.TVITEM tvItem = new org.eclipse.swt.widgets.TVITEM(); int offset = ((NMHDR.sizeof) + 4) + (TVITEM.sizeof); org.eclipse.swt.widgets.OS.MoveMemory(tvItem, (lParam + offset), TVITEM.sizeof); if (((tvItem.hItem) != 0) && (((tvItem.state) & (OS.TVIS_SELECTED)) == 0)) { ignoreSelect = ignoreDeselect = true; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_SELECTITEM, OS.TVGN_CARET, tvItem.hItem); ignoreSelect = ignoreDeselect = false; } dragStarted = true; break; } case OS.NM_RECOGNIZEGESTURE : { if (OS.IsPPC) { boolean hasMenu = ((menu) != null) && (!(menu.isDisposed())); if ((!hasMenu) && (!(hooks(SWT.MenuDetect)))) return LRESULT.ONE; } break; } case OS.GN_CONTEXTMENU : { if (OS.IsPPC) { boolean hasMenu = ((menu) != null) && (!(menu.isDisposed())); if (hasMenu || (hooks(SWT.MenuDetect))) { org.eclipse.swt.widgets.NMRGINFO nmrg = new org.eclipse.swt.widgets.NMRGINFO(); org.eclipse.swt.widgets.OS.MoveMemory(nmrg, lParam, NMRGINFO.sizeof); showMenu(menu, nmrg.x, nmrg.y); gestureCompleted = true; return LRESULT.ONE; } } break; } } return super.wmNotifyChild(wParam, lParam); }
boolean setBounds(int x, int y, int width, int height, boolean move, boolean resize) { if (getMaximized()) { org.eclipse.swt.widgets.Rectangle rect = getBounds(); boolean sameOrigin = (!move) || (((rect.x) == x) && ((rect.y) == y)); boolean sameExtent = (!resize) || (((rect.width) == width) && ((rect.height) == height)); if (sameOrigin && sameExtent) return false; } if (resize) { int[] argList = new int[]{ OS.XmNminWidth, 0, OS.XmNminHeight, 0 }; org.eclipse.swt.widgets.OS.XtGetValues(shellHandle, argList, ((argList.length) / 2)); width = java.lang.Math.max(1, java.lang.Math.max(argList[1], (width - (trimWidth())))); height = java.lang.Math.max(1, java.lang.Math.max(argList[3], (height - (trimHeight())))); updateResizable(width, height); } if (move && resize) { org.eclipse.swt.widgets.OS.XtConfigureWidget(shellHandle, x, y, width, height, 0); } else { if (move) org.eclipse.swt.widgets.OS.XtMoveWidget(shellHandle, x, y); if (resize) org.eclipse.swt.widgets.OS.XtResizeWidget(shellHandle, width, height, 0); } if ((redrawWindow) != 0) { int xDisplay = org.eclipse.swt.widgets.OS.XtDisplay(handle); org.eclipse.swt.widgets.OS.XResizeWindow(xDisplay, redrawWindow, width, height); } if (move && (((oldX) != x) || ((oldY) != y))) { moved = true; oldX = x + (trimLeft()); oldY = y + (trimTop()); sendEvent(SWT.Move); if (isDisposed()) return false; } if (resize && ((width != (oldWidth)) || (height != (oldHeight)))) { resized = true; oldWidth = width; oldHeight = height; sendEvent(SWT.Resize); if (isDisposed()) return false; if ((layout) != null) { markLayout(false, false); updateLayout(false); } } return move || resize; }
static int getMsgProc(int code, int wParam, int lParam) { org.eclipse.swt.ole.win32.Display display = org.eclipse.swt.ole.win32.Display.getCurrent(); if (display == null) return 0; org.eclipse.swt.ole.win32.LONG hHook = ((org.eclipse.swt.ole.win32.LONG) (display.getData(org.eclipse.swt.ole.win32.OleFrame.HHOOK))); if (hHook == null) return 0; if ((code < 0) || ((wParam & (OS.PM_REMOVE)) == 0)) { return org.eclipse.swt.ole.win32.OS.CallNextHookEx(hHook.value, ((int) (code)), wParam, lParam); } org.eclipse.swt.ole.win32.MSG msg = ((org.eclipse.swt.ole.win32.MSG) (display.getData(org.eclipse.swt.ole.win32.OleFrame.HHOOKMSG))); org.eclipse.swt.ole.win32.OS.MoveMemory(msg, lParam, MSG.sizeof); int message = msg.message; if (((OS.WM_KEYFIRST) <= message) && (message <= (OS.WM_KEYLAST))) { if (display != null) { org.eclipse.swt.ole.win32.Widget widget = null; int hwnd = msg.hwnd; while (hwnd != 0) { widget = display.findWidget(hwnd); if (widget != null) break; hwnd = org.eclipse.swt.ole.win32.OS.GetParent(hwnd); } if ((widget != null) && (widget instanceof org.eclipse.swt.ole.win32.OleClientSite)) { org.eclipse.swt.ole.win32.OleClientSite site = ((org.eclipse.swt.ole.win32.OleClientSite) (widget)); if ((site.handle) == hwnd) { boolean consumed = false; int thread = org.eclipse.swt.ole.win32.OS.GetWindowThreadProcessId(msg.hwnd, null); org.eclipse.swt.ole.win32.GUITHREADINFO lpgui = new org.eclipse.swt.ole.win32.GUITHREADINFO(); lpgui.cbSize = GUITHREADINFO.sizeof; boolean rc = org.eclipse.swt.ole.win32.OS.GetGUIThreadInfo(thread, lpgui); int mask = (((OS.GUI_INMENUMODE) | (OS.GUI_INMOVESIZE)) | (OS.GUI_POPUPMENUMODE)) | (OS.GUI_SYSTEMMENUMODE); if ((!rc) || (((lpgui.flags) & mask) == 0)) { org.eclipse.swt.ole.win32.OleFrame frame = site.frame; frame.setData(org.eclipse.swt.ole.win32.OleFrame.CONSUME_KEY, null); display.setData(org.eclipse.swt.ole.win32.OleFrame.ACCEL_KEY_HIT, java.lang.Boolean.TRUE); consumed = frame.translateOleAccelerator(msg); if (display.isDisposed()) return 0; display.setData(org.eclipse.swt.ole.win32.OleFrame.ACCEL_KEY_HIT, java.lang.Boolean.FALSE); if (frame.isDisposed()) return 0; java.lang.String value = ((java.lang.String) (frame.getData(org.eclipse.swt.ole.win32.OleFrame.CONSUME_KEY))); if (value != null) consumed = value.equals("true"); frame.setData(org.eclipse.swt.ole.win32.OleFrame.CONSUME_KEY, null); } boolean accentKey = false; switch (msg.message) { case OS.WM_KEYDOWN : case OS.WM_SYSKEYDOWN : { if (!(OS.IsWinCE)) { switch (((int) (msg.wParam))) { case OS.VK_SHIFT : case OS.VK_MENU : case OS.VK_CONTROL : case OS.VK_CAPITAL : case OS.VK_NUMLOCK : case OS.VK_SCROLL : break; default : { int mapKey = org.eclipse.swt.ole.win32.OS.MapVirtualKey(((int) (msg.wParam)), 2); if (mapKey != 0) { accentKey = (mapKey & (OS.IsWinNT ? -2147483648 : 32768)) != 0; if (!accentKey) { for (int i = 0; i < (org.eclipse.swt.ole.win32.OleFrame.ACCENTS.length); i++) { int value = org.eclipse.swt.ole.win32.OS.VkKeyScan(org.eclipse.swt.ole.win32.OleFrame.ACCENTS[i]); if ((value != (-1)) && ((value & 255) == (msg.wParam))) { int state = value >> 8; if (((((org.eclipse.swt.ole.win32.OS.GetKeyState(OS.VK_SHIFT)) < 0) == ((state & 1) != 0)) && (((org.eclipse.swt.ole.win32.OS.GetKeyState(OS.VK_CONTROL)) < 0) == ((state & 2) != 0))) && (((org.eclipse.swt.ole.win32.OS.GetKeyState(OS.VK_MENU)) < 0) == ((state & 4) != 0))) { if ((state & 7) != 0) accentKey = true; break; } } } } } break; } } } break; } } if (((!consumed) && (!accentKey)) && (!(org.eclipse.swt.ole.win32.OleFrame.ignoreNextKey))) { int hwndOld = msg.hwnd; msg.hwnd = site.handle; consumed = (org.eclipse.swt.ole.win32.OS.DispatchMessage(msg)) == 1; msg.hwnd = hwndOld; } switch (msg.message) { case OS.WM_KEYDOWN : case OS.WM_SYSKEYDOWN : { switch (((int) (msg.wParam))) { case OS.VK_SHIFT : case OS.VK_MENU : case OS.VK_CONTROL : case OS.VK_CAPITAL : case OS.VK_NUMLOCK : case OS.VK_SCROLL : break; default : { org.eclipse.swt.ole.win32.OleFrame.ignoreNextKey = accentKey; break; } } } } if (consumed) { msg.message = OS.WM_NULL; msg.wParam = msg.lParam = 0; org.eclipse.swt.ole.win32.OS.MoveMemory(lParam, msg, MSG.sizeof); return 0; } } } } } return org.eclipse.swt.ole.win32.OS.CallNextHookEx(hHook.value, ((int) (code)), wParam, lParam); }
public void paintControl(org.eclipse.swt.snippets.PaintEvent e) { org.eclipse.swt.snippets.GC gc = e.gc; gc.setAdvanced(true); if (!(gc.getAdvanced())) { gc.drawText("Advanced graphics not supported", 30, 30, true); return; } int x = 30; int y = 30; gc.drawImage(image, x, y); x += (rect.width) + 30; org.eclipse.swt.snippets.Transform transform = new org.eclipse.swt.snippets.Transform(display); transform.setElements((-1), 0, 0, 1, 0, 0); gc.setTransform(transform); gc.drawImage(image, (((-1) * x) - (rect.width)), y); x = 30; y += (rect.height) + 30; transform.setElements(1, 0, 0, (-1), 0, 0); gc.setTransform(transform); gc.drawImage(image, x, (((-1) * y) - (rect.height))); x += (rect.width) + 30; transform.setElements((-1), 0, 0, (-1), 0, 0); gc.setTransform(transform); gc.drawImage(image, (((-1) * x) - (rect.width)), (((-1) * y) - (rect.height))); x = 30; y += (rect.height) + 30; transform.setElements(1, 0, (-1), 1, 0, 0); gc.setTransform(transform); gc.drawImage(image, 300, y); transform.setElements(1, (-1), 0, 1, 0, 0); gc.setTransform(transform); gc.drawImage(image, 150, 475); float cos45 = ((float) (java.lang.Math.cos(45))); float sin45 = ((float) (java.lang.Math.sin(45))); transform.setElements(cos45, sin45, (-sin45), cos45, 0, 0); gc.setTransform(transform); gc.drawImage(image, 350, 100); transform.dispose(); }
void redrawSelection(org.eclipse.swt.widgets.SelectableItem item) { if (item.isDisposed()) return; int redrawPosition = getVisibleRedrawY(item); if (redrawPosition != (-1)) { item.redrawSelection(redrawPosition); } }
void handleTextChanging(org.eclipse.swt.custom.TextChangingEvent event) { if ((event.replaceCharCount) < 0) { event.start += event.replaceCharCount; event.replaceCharCount *= -1; } lastTextChangeStart = event.start; lastTextChangeNewLineCount = event.newLineCount; lastTextChangeNewCharCount = event.newCharCount; lastTextChangeReplaceLineCount = event.replaceLineCount; lastTextChangeReplaceCharCount = event.replaceCharCount; int lineIndex = content.getLineAtOffset(event.start); int srcY = getLinePixel(((lineIndex + (event.replaceLineCount)) + 1)); int destY = (getLinePixel((lineIndex + 1))) + ((event.newLineCount) * (renderer.getLineHeight())); lastLineBottom = destY; if ((srcY < 0) && (destY < 0)) { lastLineBottom += srcY - destY; verticalScrollOffset += destY - srcY; calculateTopIndex((destY - srcY)); setScrollBars(true); } else { scrollText(srcY, destY); } sendAccessibleTextChanged(lastTextChangeStart, 0, lastTextChangeReplaceCharCount); renderer.textChanging(event); int newEndOfText = ((content.getCharCount()) - (event.replaceCharCount)) + (event.newCharCount); if ((caretOffset) > newEndOfText) setCaretOffset(newEndOfText, SWT.DEFAULT); }
void computeRuns(org.eclipse.swt.graphics.GC gc) { if ((runs) != null) return; int hDC = (gc != null) ? gc.handle : device.internal_new_GC(null); int srcHdc = org.eclipse.swt.graphics.OS.CreateCompatibleDC(hDC); allRuns = itemize(); for (int i = 0; i < ((allRuns.length) - 1); i++) { org.eclipse.swt.graphics.TextLayout.StyleItem run = allRuns[i]; org.eclipse.swt.graphics.OS.SelectObject(srcHdc, getItemFont(run)); shape(srcHdc, run); } org.eclipse.swt.graphics.SCRIPT_LOGATTR logAttr = new org.eclipse.swt.graphics.SCRIPT_LOGATTR(); org.eclipse.swt.graphics.SCRIPT_PROPERTIES properties = new org.eclipse.swt.graphics.SCRIPT_PROPERTIES(); int lineWidth = indent; int lineStart = 0; int lineCount = 1; for (int i = 0; i < ((allRuns.length) - 1); i++) { org.eclipse.swt.graphics.TextLayout.StyleItem run = allRuns[i]; if (((tabs) != null) && (run.tab)) { int tabsLength = tabs.length; int j; for (j = 0; j < tabsLength; j++) { if ((tabs[j]) > lineWidth) { run.width = (tabs[j]) - lineWidth; break; } } if (j == tabsLength) { int tabX = tabs[(tabsLength - 1)]; int lastTabWidth = (tabsLength > 1) ? (tabs[(tabsLength - 1)]) - (tabs[(tabsLength - 2)]) : tabs[0]; if (lastTabWidth > 0) { while (tabX <= lineWidth) tabX += lastTabWidth; run.width = tabX - lineWidth; } } int length = run.length; if (length > 1) { int stop = (j + length) - 1; if (stop < tabsLength) { run.width += (tabs[stop]) - (tabs[j]); } else { if (j < tabsLength) { run.width += (tabs[(tabsLength - 1)]) - (tabs[j]); length -= (tabsLength - 1) - j; } int lastTabWidth = (tabsLength > 1) ? (tabs[(tabsLength - 1)]) - (tabs[(tabsLength - 2)]) : tabs[0]; run.width += lastTabWidth * (length - 1); } } } if (((((wrapWidth) != (-1)) && ((lineWidth + (run.width)) > (wrapWidth))) && (!(run.tab))) && (!(run.lineBreak))) { int start = 0; int[] piDx = new int[run.length]; if (((run.style) != null) && ((run.style.metrics) != null)) { piDx[0] = run.width; } else { org.eclipse.swt.graphics.OS.ScriptGetLogicalWidths(run.analysis, run.length, run.glyphCount, run.advances, run.clusters, run.visAttrs, piDx); } int width = 0; int maxWidth = (wrapWidth) - lineWidth; while ((width + (piDx[start])) < maxWidth) { width += piDx[(start++)]; } int firstStart = start; int firstIndice = i; while (i >= lineStart) { breakRun(run); while (start >= 0) { org.eclipse.swt.graphics.OS.MoveMemory(logAttr, ((run.psla) + (start * (SCRIPT_LOGATTR.sizeof))), SCRIPT_LOGATTR.sizeof); if ((logAttr.fSoftBreak) || (logAttr.fWhiteSpace)) break; start--; } if (((start == 0) && (i != lineStart)) && (!(run.tab))) { if ((logAttr.fSoftBreak) && (!(logAttr.fWhiteSpace))) { org.eclipse.swt.graphics.OS.MoveMemory(properties, device.scripts[run.analysis.eScript], SCRIPT_PROPERTIES.sizeof); int langID = properties.langid; org.eclipse.swt.graphics.TextLayout.StyleItem pRun = allRuns[(i - 1)]; org.eclipse.swt.graphics.OS.MoveMemory(properties, device.scripts[pRun.analysis.eScript], SCRIPT_PROPERTIES.sizeof); if ((((properties.langid) == langID) || (langID == (OS.LANG_NEUTRAL))) || ((properties.langid) == (OS.LANG_NEUTRAL))) { breakRun(pRun); org.eclipse.swt.graphics.OS.MoveMemory(logAttr, ((pRun.psla) + (((pRun.length) - 1) * (SCRIPT_LOGATTR.sizeof))), SCRIPT_LOGATTR.sizeof); if (!(logAttr.fWhiteSpace)) start = -1; } } } if ((start >= 0) || (i == lineStart)) break; run = allRuns[(--i)]; start = (run.length) - 1; } if (((start == 0) && (i != lineStart)) && (!(run.tab))) { run = allRuns[(--i)]; } else if ((start <= 0) && (i == lineStart)) { if ((lineWidth == (wrapWidth)) && (firstIndice > 0)) { i = firstIndice - 1; run = allRuns[i]; start = run.length; } else { i = firstIndice; run = allRuns[i]; start = java.lang.Math.max(1, firstStart); } } breakRun(run); while (start < (run.length)) { org.eclipse.swt.graphics.OS.MoveMemory(logAttr, ((run.psla) + (start * (SCRIPT_LOGATTR.sizeof))), SCRIPT_LOGATTR.sizeof); if (!(logAttr.fWhiteSpace)) break; start++; } if ((0 < start) && (start < (run.length))) { org.eclipse.swt.graphics.TextLayout.StyleItem newRun = new org.eclipse.swt.graphics.TextLayout.StyleItem(); newRun.start = (run.start) + start; newRun.length = (run.length) - start; newRun.style = run.style; newRun.analysis = cloneScriptAnalysis(run.analysis); run.free(); run.length = start; org.eclipse.swt.graphics.OS.SelectObject(srcHdc, getItemFont(run)); run.analysis.fNoGlyphIndex = false; shape(srcHdc, run); org.eclipse.swt.graphics.OS.SelectObject(srcHdc, getItemFont(newRun)); newRun.analysis.fNoGlyphIndex = false; shape(srcHdc, newRun); org.eclipse.swt.graphics.TextLayout.StyleItem[] newAllRuns = new org.eclipse.swt.graphics.TextLayout.StyleItem[(allRuns.length) + 1]; java.lang.System.arraycopy(allRuns, 0, newAllRuns, 0, (i + 1)); java.lang.System.arraycopy(allRuns, (i + 1), newAllRuns, (i + 2), (((allRuns.length) - i) - 1)); allRuns = newAllRuns; allRuns[(i + 1)] = newRun; } if (i != ((allRuns.length) - 2)) { run.softBreak = run.lineBreak = true; } } lineWidth += run.width; if (run.lineBreak) { lineStart = i + 1; lineWidth = (run.softBreak) ? wrapIndent : indent; lineCount++; } } lineWidth = 0; runs = new org.eclipse.swt.graphics.TextLayout.StyleItem[lineCount][]; lineOffset = new int[lineCount + 1]; lineY = new int[lineCount + 1]; this.lineWidth = new int[lineCount]; int lineRunCount = 0; int line = 0; int ascent = java.lang.Math.max(0, this.ascent); int descent = java.lang.Math.max(0, this.descent); org.eclipse.swt.graphics.TextLayout.StyleItem[] lineRuns = new org.eclipse.swt.graphics.TextLayout.StyleItem[allRuns.length]; for (int i = 0; i < (allRuns.length); i++) { org.eclipse.swt.graphics.TextLayout.StyleItem run = allRuns[i]; lineRuns[(lineRunCount++)] = run; lineWidth += run.width; ascent = java.lang.Math.max(ascent, run.ascent); descent = java.lang.Math.max(descent, run.descent); if ((run.lineBreak) || (i == ((allRuns.length) - 1))) { if ((lineRunCount == 1) && ((i == ((allRuns.length) - 1)) || (!(run.softBreak)))) { org.eclipse.swt.graphics.TEXTMETRIC lptm = (OS.IsUnicode) ? ((org.eclipse.swt.graphics.TEXTMETRIC) (new org.eclipse.swt.graphics.TEXTMETRICW())) : new org.eclipse.swt.graphics.TEXTMETRICA(); org.eclipse.swt.graphics.OS.SelectObject(srcHdc, getItemFont(run)); org.eclipse.swt.graphics.OS.GetTextMetrics(srcHdc, lptm); run.ascent = lptm.tmAscent; run.descent = lptm.tmDescent; ascent = java.lang.Math.max(ascent, run.ascent); descent = java.lang.Math.max(descent, run.descent); } runs[line] = new org.eclipse.swt.graphics.TextLayout.StyleItem[lineRunCount]; java.lang.System.arraycopy(lineRuns, 0, runs[line], 0, lineRunCount); if ((((justify) && ((wrapWidth) != (-1))) && (run.softBreak)) && (lineWidth > 0)) { int lineIndent = wrapIndent; if (line == 0) { lineIndent = indent; } else { org.eclipse.swt.graphics.TextLayout.StyleItem[] previousLine = runs[(line - 1)]; org.eclipse.swt.graphics.TextLayout.StyleItem previousRun = previousLine[((previousLine.length) - 1)]; if ((previousRun.lineBreak) && (!(previousRun.softBreak))) { lineIndent = indent; } } lineWidth += lineIndent; int hHeap = org.eclipse.swt.graphics.OS.GetProcessHeap(); int newLineWidth = 0; for (int j = 0; j < (runs[line].length); j++) { org.eclipse.swt.graphics.TextLayout.StyleItem item = runs[line][j]; int iDx = ((item.width) * (wrapWidth)) / lineWidth; if (iDx != (item.width)) { item.justify = org.eclipse.swt.graphics.OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, ((item.glyphCount) * 4)); if ((item.justify) == 0) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NO_HANDLES); org.eclipse.swt.graphics.OS.ScriptJustify(item.visAttrs, item.advances, item.glyphCount, (iDx - (item.width)), 2, item.justify); item.width = iDx; } newLineWidth += item.width; } lineWidth = newLineWidth; } this.lineWidth[line] = lineWidth; org.eclipse.swt.graphics.TextLayout.StyleItem lastRun = runs[line][(lineRunCount - 1)]; int lastOffset = (lastRun.start) + (lastRun.length); runs[line] = reorder(runs[line], (i == ((allRuns.length) - 1))); lastRun = runs[line][(lineRunCount - 1)]; if ((run.softBreak) && (run != lastRun)) { run.softBreak = run.lineBreak = false; lastRun.softBreak = lastRun.lineBreak = true; } lineWidth = getLineIndent(line); for (int j = 0; j < (runs[line].length); j++) { runs[line][j].x = lineWidth; lineWidth += runs[line][j].width; } line++; lineY[line] = (((lineY[(line - 1)]) + ascent) + descent) + (lineSpacing); lineOffset[line] = lastOffset; lineRunCount = lineWidth = 0; ascent = java.lang.Math.max(0, this.ascent); descent = java.lang.Math.max(0, this.descent); } } if (srcHdc != 0) org.eclipse.swt.graphics.OS.DeleteDC(srcHdc); if (gc == null) device.internal_dispose_GC(hDC, null); }
org.eclipse.swt.widgets.LRESULT wmNotifyChild(int wParam, int lParam) { org.eclipse.swt.widgets.NMHDR hdr = new org.eclipse.swt.widgets.NMHDR(); org.eclipse.swt.widgets.OS.MoveMemory(hdr, lParam, NMHDR.sizeof); switch (hdr.code) { case OS.TVN_GETDISPINFOA : case OS.TVN_GETDISPINFOW : { org.eclipse.swt.widgets.NMTVDISPINFO lptvdi = new org.eclipse.swt.widgets.NMTVDISPINFO(); org.eclipse.swt.widgets.OS.MoveMemory(lptvdi, lParam, NMTVDISPINFO.sizeof); if ((items) == null) break; org.eclipse.swt.widgets.TreeItem item = items[lptvdi.lParam]; if (item == null) break; if (item.isDisposed()) break; if (!(item.cached)) { if (((style) & (SWT.VIRTUAL)) != 0) { if (((drawCount) == 0) && (org.eclipse.swt.widgets.OS.IsWindowVisible(handle))) { org.eclipse.swt.widgets.RECT itemRect = new org.eclipse.swt.widgets.RECT(); itemRect.left = lptvdi.hItem; if ((org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETITEMRECT, 0, itemRect)) != 0) { org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); org.eclipse.swt.widgets.OS.GetClientRect(handle, rect); if (org.eclipse.swt.widgets.OS.IntersectRect(rect, rect, itemRect)) { if (!(checkData(item, false))) break; } } } } else { item.cached = true; } } int index = 0; if ((hwndHeader) != 0) { index = org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_ORDERTOINDEX, 0, 0); } if (((lptvdi.mask) & (OS.TVIF_TEXT)) != 0) { java.lang.String string = null; if (index == 0) { string = item.text; } else { java.lang.String[] strings = item.strings; if (strings != null) string = strings[index]; } if (string != null) { org.eclipse.swt.widgets.TCHAR buffer = new org.eclipse.swt.widgets.TCHAR(getCodePage(), string, false); int byteCount = (java.lang.Math.min(buffer.length(), ((lptvdi.cchTextMax) - 1))) * (TCHAR.sizeof); org.eclipse.swt.widgets.OS.MoveMemory(lptvdi.pszText, buffer, byteCount); org.eclipse.swt.widgets.OS.MoveMemory(((lptvdi.pszText) + byteCount), new byte[TCHAR.sizeof], TCHAR.sizeof); lptvdi.cchTextMax = java.lang.Math.min(lptvdi.cchTextMax, ((string.length()) + 1)); } } if (((lptvdi.mask) & ((OS.TVIF_IMAGE) | (OS.TVIF_SELECTEDIMAGE))) != 0) { org.eclipse.swt.widgets.Image image = null; if (index == 0) { image = item.image; } else { org.eclipse.swt.widgets.Image[] images = item.images; if (images != null) image = images[index]; } lptvdi.iImage = lptvdi.iSelectedImage = OS.I_IMAGENONE; if (image != null) { lptvdi.iImage = lptvdi.iSelectedImage = imageIndex(image, index); } } org.eclipse.swt.widgets.OS.MoveMemory(lParam, lptvdi, NMTVDISPINFO.sizeof); break; } case OS.NM_CUSTOMDRAW : { if (!(customDraw)) break; if ((hdr.hwndFrom) == (hwndHeader)) break; org.eclipse.swt.widgets.NMTVCUSTOMDRAW nmcd = new org.eclipse.swt.widgets.NMTVCUSTOMDRAW(); org.eclipse.swt.widgets.OS.MoveMemory(nmcd, lParam, NMTVCUSTOMDRAW.sizeof); switch (nmcd.dwDrawStage) { case OS.CDDS_PREPAINT : { return new org.eclipse.swt.widgets.LRESULT(((OS.CDRF_NOTIFYITEMDRAW) | (OS.CDRF_NOTIFYPOSTPAINT))); } case OS.CDDS_POSTPAINT : { if (linesVisible) { int hDC = nmcd.hdc; if ((hwndHeader) != 0) { int x = 0; org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); org.eclipse.swt.widgets.HDITEM hdItem = new org.eclipse.swt.widgets.HDITEM(); hdItem.mask = OS.HDI_WIDTH; int count = org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0); for (int i = 0; i < count; i++) { int index = org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_ORDERTOINDEX, i, 0); org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEM, index, hdItem); org.eclipse.swt.widgets.OS.SetRect(rect, x, nmcd.top, (x + (hdItem.cxy)), nmcd.bottom); org.eclipse.swt.widgets.OS.DrawEdge(hDC, rect, OS.BDR_SUNKENINNER, OS.BF_RIGHT); x += hdItem.cxy; } } int height = 0; org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); int hItem = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETNEXTITEM, OS.TVGN_LASTVISIBLE, 0); if (hItem != 0) { rect.left = hItem; if ((org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETITEMRECT, 0, rect)) != 0) { height = (rect.bottom) - (rect.top); } } if (height == 0) { height = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETITEMHEIGHT, 0, 0); org.eclipse.swt.widgets.OS.GetClientRect(handle, rect); org.eclipse.swt.widgets.OS.SetRect(rect, rect.left, rect.top, rect.right, ((rect.top) + height)); org.eclipse.swt.widgets.OS.DrawEdge(hDC, rect, OS.BDR_SUNKENINNER, OS.BF_BOTTOM); } while ((rect.bottom) < (nmcd.bottom)) { int top = (rect.top) + height; org.eclipse.swt.widgets.OS.SetRect(rect, rect.left, top, rect.right, (top + height)); org.eclipse.swt.widgets.OS.DrawEdge(hDC, rect, OS.BDR_SUNKENINNER, OS.BF_BOTTOM); } } return new org.eclipse.swt.widgets.LRESULT(OS.CDRF_DODEFAULT); } case OS.CDDS_ITEMPREPAINT : { org.eclipse.swt.widgets.TreeItem item = items[nmcd.lItemlParam]; if (item == null) break; if (((nmcd.left) >= (nmcd.right)) || ((nmcd.top) >= (nmcd.bottom))) { break; } int hDC = nmcd.hdc; org.eclipse.swt.widgets.OS.SaveDC(hDC); if (linesVisible) { org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); org.eclipse.swt.widgets.OS.SetRect(rect, nmcd.left, nmcd.top, nmcd.right, nmcd.bottom); org.eclipse.swt.widgets.OS.DrawEdge(hDC, rect, OS.BDR_SUNKENINNER, OS.BF_BOTTOM); } if ((!(printClient)) && (((style) & (SWT.FULL_SELECTION)) == 0)) { if ((hwndHeader) != 0) { int count = org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0); if (count != 0) { org.eclipse.swt.widgets.HDITEM hdItem = new org.eclipse.swt.widgets.HDITEM(); hdItem.mask = OS.HDI_WIDTH; int index = org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_ORDERTOINDEX, 0, 0); org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEM, index, hdItem); int hRgn = org.eclipse.swt.widgets.OS.CreateRectRgn(nmcd.left, nmcd.top, ((nmcd.left) + (hdItem.cxy)), nmcd.bottom); org.eclipse.swt.widgets.OS.SelectClipRgn(hDC, hRgn); org.eclipse.swt.widgets.OS.DeleteObject(hRgn); } } } if ((((item.font) == (-1)) && ((item.foreground) == (-1))) && ((item.background) == (-1))) { if ((((item.cellForeground) == null) && ((item.cellBackground) == null)) && ((item.cellFont) == null)) { return new org.eclipse.swt.widgets.LRESULT(((OS.CDRF_DODEFAULT) | (OS.CDRF_NOTIFYPOSTPAINT))); } } int hFont = ((item.cellFont) != null) ? item.cellFont[0] : -1; if (hFont == (-1)) hFont = item.font; if (hFont != (-1)) org.eclipse.swt.widgets.OS.SelectObject(hDC, hFont); if (org.eclipse.swt.widgets.OS.IsWindowEnabled(handle)) { boolean useColor = true; org.eclipse.swt.widgets.TVITEM tvItem = new org.eclipse.swt.widgets.TVITEM(); tvItem.mask = OS.TVIF_STATE; tvItem.hItem = item.handle; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETITEM, 0, tvItem); if (((tvItem.state) & ((OS.TVIS_SELECTED) | (OS.TVIS_DROPHILITED))) != 0) { useColor = false; if ((handle) == (org.eclipse.swt.widgets.OS.GetFocus())) { if ((org.eclipse.swt.widgets.OS.GetTextColor(hDC)) != (org.eclipse.swt.widgets.OS.GetSysColor(OS.COLOR_HIGHLIGHTTEXT))) { useColor = true; } else { if ((org.eclipse.swt.widgets.OS.GetBkColor(hDC)) != (org.eclipse.swt.widgets.OS.GetSysColor(OS.COLOR_HIGHLIGHT))) { useColor = true; } } } } if (useColor) { int clrText = ((item.cellForeground) != null) ? item.cellForeground[0] : -1; if (clrText == (-1)) clrText = item.foreground; nmcd.clrText = (clrText == (-1)) ? getForegroundPixel() : clrText; int clrTextBk = ((item.cellBackground) != null) ? item.cellBackground[0] : -1; if (clrTextBk == (-1)) clrTextBk = item.background; nmcd.clrTextBk = (clrTextBk == (-1)) ? getBackgroundPixel() : clrTextBk; org.eclipse.swt.widgets.OS.MoveMemory(lParam, nmcd, NMTVCUSTOMDRAW.sizeof); } } return new org.eclipse.swt.widgets.LRESULT(((OS.CDRF_NEWFONT) | (OS.CDRF_NOTIFYPOSTPAINT))); } case OS.CDDS_ITEMPOSTPAINT : { org.eclipse.swt.widgets.TreeItem item = items[nmcd.lItemlParam]; if (item == null) break; if (((nmcd.left) >= (nmcd.right)) || ((nmcd.top) >= (nmcd.bottom))) { break; } int hDC = nmcd.hdc; org.eclipse.swt.widgets.OS.RestoreDC(hDC, (-1)); boolean useColor = org.eclipse.swt.widgets.OS.IsWindowEnabled(handle); if (useColor) { if (((style) & (SWT.FULL_SELECTION)) != 0) { org.eclipse.swt.widgets.TVITEM tvItem = new org.eclipse.swt.widgets.TVITEM(); tvItem.mask = OS.TVIF_STATE; tvItem.hItem = item.handle; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETITEM, 0, tvItem); if (((tvItem.state) & (OS.TVIS_SELECTED)) != 0) { useColor = false; if ((handle) == (org.eclipse.swt.widgets.OS.GetFocus())) { if ((org.eclipse.swt.widgets.OS.GetTextColor(hDC)) != (org.eclipse.swt.widgets.OS.GetSysColor(OS.COLOR_HIGHLIGHTTEXT))) { useColor = true; } else { if ((org.eclipse.swt.widgets.OS.GetBkColor(hDC)) != (org.eclipse.swt.widgets.OS.GetSysColor(OS.COLOR_HIGHLIGHT))) { useColor = true; } } } } else { if ((org.eclipse.swt.widgets.OS.GetTextColor(hDC)) == (org.eclipse.swt.widgets.OS.GetSysColor(OS.COLOR_HIGHLIGHTTEXT))) { if ((org.eclipse.swt.widgets.OS.GetBkColor(hDC)) == (org.eclipse.swt.widgets.OS.GetSysColor(OS.COLOR_HIGHLIGHT))) { useColor = false; } } } } else { org.eclipse.swt.widgets.OS.SetTextColor(hDC, getForegroundPixel()); org.eclipse.swt.widgets.OS.SetBkColor(hDC, getBackgroundPixel()); } } if ((hwndHeader) != 0) { org.eclipse.swt.widgets.GCData data = new org.eclipse.swt.widgets.GCData(); data.device = display; org.eclipse.swt.widgets.GC gc = org.eclipse.swt.widgets.GC.win32_new(hDC, data); int x = 0; int gridWidth = (linesVisible) ? org.eclipse.swt.widgets.Tree.GRID_WIDTH : 0; org.eclipse.swt.widgets.Point size = null; org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); org.eclipse.swt.widgets.HDITEM hdItem = new org.eclipse.swt.widgets.HDITEM(); hdItem.mask = OS.HDI_WIDTH; int count = org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0); for (int i = 0; i < count; i++) { int index = org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_ORDERTOINDEX, i, 0); org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEM, index, hdItem); if (i > 0) { int clrTextBk = -1; org.eclipse.swt.widgets.OS.SetRect(rect, x, nmcd.top, (x + (hdItem.cxy)), ((nmcd.bottom) - gridWidth)); if (useColor) { clrTextBk = ((item.cellBackground) != null) ? item.cellBackground[index] : -1; if (clrTextBk == (-1)) clrTextBk = item.background; } if (clrTextBk == (-1)) { if ((printClient) || (((style) & (SWT.FULL_SELECTION)) != 0)) { clrTextBk = org.eclipse.swt.widgets.OS.GetBkColor(hDC); } } if (clrTextBk != (-1)) drawBackground(hDC, clrTextBk, rect); org.eclipse.swt.widgets.Image image = null; if (index == 0) { image = item.image; } else { org.eclipse.swt.widgets.Image[] images = item.images; if (images != null) image = images[index]; } if (image != null) { org.eclipse.swt.widgets.Rectangle bounds = image.getBounds(); if (size == null) size = getImageSize(); gc.drawImage(image, 0, 0, bounds.width, bounds.height, rect.left, rect.top, size.x, size.y); org.eclipse.swt.widgets.OS.SetRect(rect, (((rect.left) + (size.x)) + (org.eclipse.swt.widgets.Tree.INSET)), rect.top, ((rect.right) - (org.eclipse.swt.widgets.Tree.INSET)), rect.bottom); } else { org.eclipse.swt.widgets.OS.SetRect(rect, ((rect.left) + (org.eclipse.swt.widgets.Tree.INSET)), rect.top, ((rect.right) - (org.eclipse.swt.widgets.Tree.INSET)), rect.bottom); } if ((rect.left) < (rect.right)) { java.lang.String string = null; if (index == 0) { string = item.text; } else { java.lang.String[] strings = item.strings; if (strings != null) string = strings[index]; } if (string != null) { int hFont = ((item.cellFont) != null) ? item.cellFont[index] : -1; if (hFont == (-1)) hFont = item.font; hFont = (hFont != (-1)) ? org.eclipse.swt.widgets.OS.SelectObject(hDC, hFont) : -1; int clrText = -1; if (useColor) { clrText = ((item.cellForeground) != null) ? item.cellForeground[index] : -1; if (clrText == (-1)) clrText = item.foreground; clrText = (clrText != (-1)) ? org.eclipse.swt.widgets.OS.SetTextColor(hDC, clrText) : -1; } int oldMode = (clrTextBk != (-1)) ? org.eclipse.swt.widgets.OS.SetBkMode(hDC, OS.TRANSPARENT) : -1; int flags = (((OS.DT_NOPREFIX) | (OS.DT_SINGLELINE)) | (OS.DT_VCENTER)) | (OS.DT_ENDELLIPSIS); org.eclipse.swt.widgets.TreeColumn column = columns[index]; if (((column.style) & (SWT.LEFT)) != 0) flags |= OS.DT_LEFT; if (((column.style) & (SWT.CENTER)) != 0) flags |= OS.DT_CENTER; if (((column.style) & (SWT.RIGHT)) != 0) flags |= OS.DT_RIGHT; org.eclipse.swt.widgets.TCHAR buffer = new org.eclipse.swt.widgets.TCHAR(getCodePage(), string, false); org.eclipse.swt.widgets.OS.DrawText(hDC, buffer, buffer.length(), rect, flags); if (hFont != (-1)) org.eclipse.swt.widgets.OS.SelectObject(hDC, hFont); if (clrText != (-1)) org.eclipse.swt.widgets.OS.SetTextColor(hDC, clrText); if (oldMode != (-1)) org.eclipse.swt.widgets.OS.SetBkMode(hDC, oldMode); } } } x += hdItem.cxy; } if (count > 0) { if ((printClient) || (((style) & (SWT.FULL_SELECTION)) != 0)) { org.eclipse.swt.widgets.OS.SetRect(rect, x, nmcd.top, nmcd.right, ((nmcd.bottom) - gridWidth)); drawBackground(hDC, org.eclipse.swt.widgets.OS.GetBkColor(hDC), rect); } } gc.dispose(); } if (linesVisible) { if ((printClient) && (((style) & (SWT.FULL_SELECTION)) == 0)) { if ((hwndHeader) != 0) { int count = org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0); if ((count != 0) && (printClient)) { org.eclipse.swt.widgets.HDITEM hdItem = new org.eclipse.swt.widgets.HDITEM(); hdItem.mask = OS.HDI_WIDTH; org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEM, 0, hdItem); org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); org.eclipse.swt.widgets.OS.SetRect(rect, ((nmcd.left) + (hdItem.cxy)), nmcd.top, nmcd.right, nmcd.bottom); org.eclipse.swt.widgets.OS.DrawEdge(hDC, rect, OS.BDR_SUNKENINNER, OS.BF_BOTTOM); } } } org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); if (((OS.COMCTL32_MAJOR) < 6) || (((style) & (SWT.FULL_SELECTION)) != 0)) { org.eclipse.swt.widgets.OS.SetRect(rect, nmcd.left, nmcd.top, nmcd.right, nmcd.bottom); } else { rect.left = item.handle; if ((org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETITEMRECT, 1, rect)) != 0) { int hItem = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETNEXTITEM, OS.TVGN_CARET, 0); if (hItem == (item.handle)) { org.eclipse.swt.widgets.OS.SetRect(rect, rect.right, nmcd.top, nmcd.right, nmcd.bottom); } else { org.eclipse.swt.widgets.TVITEM tvItem = new org.eclipse.swt.widgets.TVITEM(); tvItem.mask = OS.TVIF_STATE; tvItem.hItem = item.handle; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETITEM, 0, tvItem); if (((tvItem.state) & (OS.TVIS_SELECTED)) != 0) { org.eclipse.swt.widgets.OS.SetRect(rect, rect.right, nmcd.top, nmcd.right, nmcd.bottom); } else { org.eclipse.swt.widgets.OS.SetRect(rect, rect.left, nmcd.top, nmcd.right, nmcd.bottom); } } } else { rect.left = 0; } } org.eclipse.swt.widgets.OS.DrawEdge(hDC, rect, OS.BDR_SUNKENINNER, OS.BF_BOTTOM); } return new org.eclipse.swt.widgets.LRESULT(OS.CDRF_DODEFAULT); } } break; } case OS.NM_DBLCLK : { if (hooks(SWT.DefaultSelection)) return LRESULT.ONE; break; } case OS.TVN_SELCHANGEDA : case OS.TVN_SELCHANGEDW : { if (((style) & (SWT.MULTI)) != 0) { if (lockSelection) { if (oldSelected) { org.eclipse.swt.widgets.TVITEM tvItem = new org.eclipse.swt.widgets.TVITEM(); int offset = (NMHDR.sizeof) + 4; org.eclipse.swt.widgets.OS.MoveMemory(tvItem, (lParam + offset), TVITEM.sizeof); tvItem.mask = OS.TVIF_STATE; tvItem.stateMask = OS.TVIS_SELECTED; tvItem.state = OS.TVIS_SELECTED; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_SETITEM, 0, tvItem); } if ((!(newSelected)) && (ignoreSelect)) { org.eclipse.swt.widgets.TVITEM tvItem = new org.eclipse.swt.widgets.TVITEM(); int offset = ((NMHDR.sizeof) + 4) + (TVITEM.sizeof); org.eclipse.swt.widgets.OS.MoveMemory(tvItem, (lParam + offset), TVITEM.sizeof); tvItem.mask = OS.TVIF_STATE; tvItem.stateMask = OS.TVIS_SELECTED; tvItem.state = 0; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_SETITEM, 0, tvItem); } } } if (!(ignoreSelect)) { org.eclipse.swt.widgets.TVITEM tvItem = new org.eclipse.swt.widgets.TVITEM(); int offset = ((NMHDR.sizeof) + 4) + (TVITEM.sizeof); org.eclipse.swt.widgets.OS.MoveMemory(tvItem, (lParam + offset), TVITEM.sizeof); hAnchor = tvItem.hItem; org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); event.item = items[tvItem.lParam]; postEvent(SWT.Selection, event); } updateScrollBar(); break; } case OS.TVN_SELCHANGINGA : case OS.TVN_SELCHANGINGW : { if (((style) & (SWT.MULTI)) != 0) { if (lockSelection) { org.eclipse.swt.widgets.TVITEM tvItem = new org.eclipse.swt.widgets.TVITEM(); int offset1 = (NMHDR.sizeof) + 4; org.eclipse.swt.widgets.OS.MoveMemory(tvItem, (lParam + offset1), TVITEM.sizeof); oldSelected = ((tvItem.state) & (OS.TVIS_SELECTED)) != 0; int offset2 = ((NMHDR.sizeof) + 4) + (TVITEM.sizeof); org.eclipse.swt.widgets.OS.MoveMemory(tvItem, (lParam + offset2), TVITEM.sizeof); newSelected = ((tvItem.state) & (OS.TVIS_SELECTED)) != 0; } } if ((!(ignoreSelect)) && (!(ignoreDeselect))) { hAnchor = 0; if (((style) & (SWT.MULTI)) != 0) deselectAll(); } break; } case OS.TVN_ITEMEXPANDEDA : case OS.TVN_ITEMEXPANDEDW : { if ((hInsert) != 0) { org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_SETINSERTMARK, (insertAfter ? 1 : 0), hInsert); } updateScrollBar(); break; } case OS.TVN_ITEMEXPANDINGA : case OS.TVN_ITEMEXPANDINGW : { if ((hInsert) != 0) { org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_SETINSERTMARK, 0, 0); } if (!(ignoreExpand)) { org.eclipse.swt.widgets.TVITEM tvItem = new org.eclipse.swt.widgets.TVITEM(); int offset = ((NMHDR.sizeof) + 4) + (TVITEM.sizeof); org.eclipse.swt.widgets.OS.MoveMemory(tvItem, (lParam + offset), TVITEM.sizeof); if ((items) == null) break; org.eclipse.swt.widgets.TreeItem item = items[tvItem.lParam]; if (item == null) break; org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); event.item = item; int[] action = new int[1]; org.eclipse.swt.widgets.OS.MoveMemory(action, (lParam + (NMHDR.sizeof)), 4); switch (action[0]) { case OS.TVE_EXPAND : if (((tvItem.state) & (OS.TVIS_EXPANDED)) == 0) { sendEvent(SWT.Expand, event); if (isDisposed()) return LRESULT.ZERO; } break; case OS.TVE_COLLAPSE : sendEvent(SWT.Collapse, event); if (isDisposed()) return LRESULT.ZERO; break; } } break; } case OS.TVN_BEGINDRAGA : case OS.TVN_BEGINDRAGW : case OS.TVN_BEGINRDRAGA : case OS.TVN_BEGINRDRAGW : { org.eclipse.swt.widgets.TVITEM tvItem = new org.eclipse.swt.widgets.TVITEM(); int offset = ((NMHDR.sizeof) + 4) + (TVITEM.sizeof); org.eclipse.swt.widgets.OS.MoveMemory(tvItem, (lParam + offset), TVITEM.sizeof); if (((tvItem.hItem) != 0) && (((tvItem.state) & (OS.TVIS_SELECTED)) == 0)) { ignoreSelect = ignoreDeselect = true; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_SELECTITEM, OS.TVGN_CARET, tvItem.hItem); ignoreSelect = ignoreDeselect = false; } dragStarted = true; break; } case OS.NM_RECOGNIZEGESTURE : { if (OS.IsPPC) { boolean hasMenu = ((menu) != null) && (!(menu.isDisposed())); if ((!hasMenu) && (!(hooks(SWT.MenuDetect)))) return LRESULT.ONE; } break; } case OS.GN_CONTEXTMENU : { if (OS.IsPPC) { boolean hasMenu = ((menu) != null) && (!(menu.isDisposed())); if (hasMenu || (hooks(SWT.MenuDetect))) { org.eclipse.swt.widgets.NMRGINFO nmrg = new org.eclipse.swt.widgets.NMRGINFO(); org.eclipse.swt.widgets.OS.MoveMemory(nmrg, lParam, NMRGINFO.sizeof); showMenu(nmrg.x, nmrg.y); gestureCompleted = true; return LRESULT.ONE; } } break; } } return super.wmNotifyChild(wParam, lParam); }
public org.eclipse.swt.custom.Rectangle getTextBounds(int start, int end) { checkWidget(); int contentLength = getCharCount(); if (((((start < 0) || (start >= contentLength)) || (end < 0)) || (end >= contentLength)) || (start > end)) { org.eclipse.swt.custom.SWT.error(SWT.ERROR_INVALID_RANGE); } int lineStart = content.getLineAtOffset(start); int lineEnd = content.getLineAtOffset(end); org.eclipse.swt.custom.Rectangle rect; int y = getLinePixel(lineStart); int height = 0; int left = 2147483647; int right = 0; for (int i = lineStart; i <= lineEnd; i++) { int lineOffset = content.getOffsetAtLine(i); org.eclipse.swt.custom.TextLayout layout = renderer.getTextLayout(i); if ((layout.getText().length()) > 0) { if ((i == lineStart) && (i == lineEnd)) { rect = layout.getBounds((start - lineOffset), (end - lineOffset)); } else if (i == lineStart) { java.lang.String line = content.getLine(i); rect = layout.getBounds((start - lineOffset), line.length()); } else if (i == lineEnd) { rect = layout.getBounds(0, (end - lineOffset)); } else { rect = layout.getBounds(); } left = java.lang.Math.min(left, rect.x); right = java.lang.Math.max(right, ((rect.x) + (rect.width))); height += rect.height; } else { height += renderer.getLineHeight(); } renderer.disposeTextLayout(layout); } rect = new org.eclipse.swt.custom.Rectangle(left, y, (right - left), height); rect.x += (leftMargin) - (horizontalScrollOffset); return rect; }
void updateModal() { if (org.eclipse.swt.widgets.OS.GTK_IS_PLUG(shellHandle)) return; int group = 0; boolean isModalShell = false; if ((display.getModalDialog()) == null) { org.eclipse.swt.widgets.Shell modal = getModalShell(); int mask = ((SWT.PRIMARY_MODAL) | (SWT.APPLICATION_MODAL)) | (SWT.SYSTEM_MODAL); org.eclipse.swt.widgets.Composite shell = null; if (modal == null) { if (((style) & mask) != 0) { shell = this; isModalShell = org.eclipse.swt.widgets.OS.gtk_window_get_modal(shellHandle); if (isModalShell) org.eclipse.swt.widgets.OS.gtk_window_set_modal(shellHandle, false); } } else { shell = modal; } org.eclipse.swt.widgets.Composite topModalShell = shell; while (shell != null) { if (((shell.style) & mask) == 0) { group = shell.getShell().group; break; } topModalShell = shell; shell = shell.parent; } if ((group == 0) && (topModalShell != null)) group = topModalShell.getShell().group; } if (((OS.GTK_VERSION) >= (org.eclipse.swt.widgets.OS.VERSION(2, 10, 0))) && (group == 0)) { group = org.eclipse.swt.widgets.OS.gtk_window_get_group(0); } if (group != 0) { org.eclipse.swt.widgets.OS.gtk_window_group_add_window(group, shellHandle); if (isModalShell) org.eclipse.swt.widgets.OS.gtk_window_set_modal(shellHandle, true); } else { if ((modalGroup) != 0) { org.eclipse.swt.widgets.OS.gtk_window_group_remove_window(modalGroup, shellHandle); } } if ((OS.GTK_VERSION) < (org.eclipse.swt.widgets.OS.VERSION(2, 4, 0))) { fixModal(group, modalGroup); } modalGroup = group; }
void destroyItem(org.eclipse.swt.widgets.TreeItem item) { if ((((org.eclipse.swt.widgets.OS.gtk_major_version()) == 2) && ((org.eclipse.swt.widgets.OS.gtk_minor_version()) == 0)) && ((org.eclipse.swt.widgets.OS.gtk_micro_version()) < 6)) { org.eclipse.swt.widgets.TreeItem[] roots = getItems(0); for (int i = 0; i < (roots.length); i++) { if (item == (roots[i])) { item.setExpanded(false); break; } } } int[] index = new int[1]; releaseItems(item.getItems(), index); releaseItem(item, index); org.eclipse.swt.widgets.OS.gtk_tree_store_remove(modelHandle, item.handle); }
@java.lang.Override long gtk_scroll_event(long widget, long eventPtr) { org.eclipse.swt.widgets.GdkEventScroll gdkEvent = new org.eclipse.swt.widgets.GdkEventScroll(); org.eclipse.swt.widgets.OS.memmove(gdkEvent, eventPtr, GdkEventScroll.sizeof); switch (gdkEvent.direction) { case OS.GDK_SCROLL_UP : return sendMouseEvent(SWT.MouseWheel, 0, 3, SWT.SCROLL_LINE, true, gdkEvent.time, gdkEvent.x_root, gdkEvent.y_root, false, gdkEvent.state) ? 0 : 1; case OS.GDK_SCROLL_DOWN : return sendMouseEvent(SWT.MouseWheel, 0, (-3), SWT.SCROLL_LINE, true, gdkEvent.time, gdkEvent.x_root, gdkEvent.y_root, false, gdkEvent.state) ? 0 : 1; case OS.GDK_SCROLL_LEFT : return sendMouseEvent(SWT.MouseHorizontalWheel, 0, 3, 0, true, gdkEvent.time, gdkEvent.x_root, gdkEvent.y_root, false, gdkEvent.state) ? 0 : 1; case OS.GDK_SCROLL_RIGHT : return sendMouseEvent(SWT.MouseHorizontalWheel, 0, (-3), 0, true, gdkEvent.time, gdkEvent.x_root, gdkEvent.y_root, false, gdkEvent.state) ? 0 : 1; case OS.GDK_SCROLL_SMOOTH : long result = 0; double[] delta_x = new double[1]; double[] delta_y = new double[1]; if (org.eclipse.swt.widgets.OS.gdk_event_get_scroll_deltas(eventPtr, delta_x, delta_y)) { if ((delta_x[0]) != 0) { result = (sendMouseEvent(SWT.MouseHorizontalWheel, 0, ((int) (3 * (delta_x[0]))), 0, true, gdkEvent.time, gdkEvent.x_root, gdkEvent.y_root, false, gdkEvent.state)) ? 0 : 1; } if ((delta_y[0]) != 0) { result = (sendMouseEvent(SWT.MouseWheel, 0, ((int) (3 * (delta_y[0]))), SWT.SCROLL_LINE, true, gdkEvent.time, gdkEvent.x_root, gdkEvent.y_root, false, gdkEvent.state)) ? 0 : 1; } } return result; } return 0; }
int kEventUnicodeKeyPressed(int nextHandler, int theEvent, int userData) { int result = super.kEventUnicodeKeyPressed(nextHandler, theEvent, userData); if (result == (org.eclipse.swt.internal.carbon.OS.noErr)) return result; int[] keyboardEvent = new int[1]; org.eclipse.swt.internal.carbon.OS.GetEventParameter(theEvent, OS.kEventParamTextInputSendKeyboardEvent, OS.typeEventRef, null, ((keyboardEvent.length) * 4), null, keyboardEvent); int[] keyCode = new int[1]; org.eclipse.swt.internal.carbon.OS.GetEventParameter(keyboardEvent[0], OS.kEventParamKeyCode, OS.typeUInt32, null, ((keyCode.length) * 4), null, keyCode); if ((((hooks(SWT.Verify)) || (filters(SWT.Verify))) || (hooks(SWT.Modify))) || (filters(SWT.Modify))) { int[] modifiers = new int[1]; org.eclipse.swt.internal.carbon.OS.GetEventParameter(keyboardEvent[0], OS.kEventParamKeyModifiers, OS.typeUInt32, null, 4, null, modifiers); if ((modifiers[0]) == (org.eclipse.swt.internal.carbon.OS.cmdKey)) { switch (keyCode[0]) { case 7 : cut(); return org.eclipse.swt.internal.carbon.OS.noErr; case 9 : paste(); return org.eclipse.swt.internal.carbon.OS.noErr; } } } switch (keyCode[0]) { case 76 : case 36 : { postEvent(SWT.DefaultSelection); break; } } result = org.eclipse.swt.internal.carbon.OS.CallNextEventHandler(nextHandler, theEvent); lastText = getText(); return result; }
public void setItems(java.lang.String[] items) { checkWidget(); if (items == null) error(SWT.ERROR_NULL_ARGUMENT); for (int i = 0; i < (items.length); i++) { if ((items[i]) == null) error(SWT.ERROR_INVALID_ARGUMENT); } lockText = ignoreSelect = true; org.eclipse.swt.widgets.OS.gtk_list_clear_items(listHandle, 0, (-1)); int font = getFontDescription(); org.eclipse.swt.widgets.GdkColor color = getForegroundColor(); int direction = org.eclipse.swt.widgets.OS.gtk_widget_get_direction(handle); int i = 0; while (i < (items.length)) { java.lang.String string = items[i]; byte[] buffer = org.eclipse.swt.widgets.Converter.wcsToMbcs(null, string, true); int item = org.eclipse.swt.widgets.OS.gtk_list_item_new_with_label(buffer); int label = org.eclipse.swt.widgets.OS.gtk_bin_get_child(item); org.eclipse.swt.widgets.OS.gtk_widget_modify_fg(label, OS.GTK_STATE_NORMAL, color); org.eclipse.swt.widgets.OS.gtk_widget_modify_font(label, font); org.eclipse.swt.widgets.OS.gtk_widget_set_direction(label, direction); org.eclipse.swt.widgets.OS.gtk_container_add(listHandle, item); org.eclipse.swt.widgets.OS.gtk_widget_show(item); i++; } this.items = new java.lang.String[items.length]; java.lang.System.arraycopy(items, 0, this.items, 0, i); lockText = ignoreSelect = false; org.eclipse.swt.widgets.OS.gtk_entry_set_text(entryHandle, new byte[0]); }
org.eclipse.swt.widgets.LRESULT CDDS_SUBITEMPREPAINT(org.eclipse.swt.widgets.NMLVCUSTOMDRAW nmcd, int wParam, int lParam) { int hDC = nmcd.hdc; if ((((explorerTheme) && (!(ignoreCustomDraw))) && (hooks(SWT.EraseItem))) && ((nmcd.left) != (nmcd.right))) { org.eclipse.swt.widgets.OS.RestoreDC(hDC, (-1)); } org.eclipse.swt.widgets.TableItem item = _getItem(((int) (nmcd.dwItemSpec))); if ((item == null) || (item.isDisposed())) return null; int hFont = item.fontHandle(nmcd.iSubItem); if (hFont != (-1)) org.eclipse.swt.widgets.OS.SelectObject(hDC, hFont); if ((ignoreCustomDraw) || ((nmcd.left) == (nmcd.right))) { return new org.eclipse.swt.widgets.LRESULT((hFont == (-1) ? OS.CDRF_DODEFAULT : OS.CDRF_NEWFONT)); } int code = OS.CDRF_DODEFAULT; selectionForeground = -1; ignoreDrawForeground = ignoreDrawSelection = ignoreDrawFocus = ignoreDrawBackground = false; if (org.eclipse.swt.widgets.OS.IsWindowVisible(handle)) { org.eclipse.swt.widgets.Event measureEvent = null; if (hooks(SWT.MeasureItem)) { measureEvent = sendMeasureItemEvent(item, ((int) (nmcd.dwItemSpec)), nmcd.iSubItem, nmcd.hdc); if ((isDisposed()) || (item.isDisposed())) return null; } if (hooks(SWT.EraseItem)) { sendEraseItemEvent(item, nmcd, lParam, measureEvent); if ((isDisposed()) || (item.isDisposed())) return null; code |= OS.CDRF_NOTIFYPOSTPAINT; } if ((ignoreDrawForeground) || (hooks(SWT.PaintItem))) code |= OS.CDRF_NOTIFYPOSTPAINT; } int clrText = ((item.cellForeground) != null) ? item.cellForeground[nmcd.iSubItem] : -1; if (clrText == (-1)) clrText = item.foreground; int clrTextBk = ((item.cellBackground) != null) ? item.cellBackground[nmcd.iSubItem] : -1; if (clrTextBk == (-1)) clrTextBk = item.background; if ((selectionForeground) != (-1)) clrText = selectionForeground; if ((org.eclipse.swt.widgets.OS.IsWindowVisible(handle)) && (org.eclipse.swt.widgets.OS.IsWindowEnabled(handle))) { if (((!(explorerTheme)) && (!(ignoreDrawSelection))) && (((style) & (SWT.FULL_SELECTION)) != 0)) { int bits = ((int) (org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_GETEXTENDEDLISTVIEWSTYLE, 0, 0))); if ((bits & (OS.LVS_EX_FULLROWSELECT)) == 0) { org.eclipse.swt.widgets.LVITEM lvItem = new org.eclipse.swt.widgets.LVITEM(); lvItem.mask = OS.LVIF_STATE; lvItem.stateMask = OS.LVIS_SELECTED; lvItem.iItem = ((int) (nmcd.dwItemSpec)); int result = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_GETITEM, 0, lvItem); if ((result != 0) && (((lvItem.state) & (OS.LVIS_SELECTED)) != 0)) { int clrSelection = -1; if ((nmcd.iSubItem) == 0) { if (((org.eclipse.swt.widgets.OS.GetFocus()) == (handle)) || (display.getHighContrast())) { clrSelection = org.eclipse.swt.widgets.OS.GetSysColor(OS.COLOR_HIGHLIGHT); } else { if (((style) & (SWT.HIDE_SELECTION)) == 0) { clrSelection = org.eclipse.swt.widgets.OS.GetSysColor(OS.COLOR_3DFACE); } } } else { if (((org.eclipse.swt.widgets.OS.GetFocus()) == (handle)) || (display.getHighContrast())) { clrText = org.eclipse.swt.widgets.OS.GetSysColor(OS.COLOR_HIGHLIGHTTEXT); clrTextBk = clrSelection = org.eclipse.swt.widgets.OS.GetSysColor(OS.COLOR_HIGHLIGHT); } else { if (((style) & (SWT.HIDE_SELECTION)) == 0) { clrTextBk = clrSelection = org.eclipse.swt.widgets.OS.GetSysColor(OS.COLOR_3DFACE); } } } if (clrSelection != (-1)) { org.eclipse.swt.widgets.RECT rect = item.getBounds(((int) (nmcd.dwItemSpec)), nmcd.iSubItem, true, ((nmcd.iSubItem) != 0), true, false, hDC); fillBackground(hDC, clrSelection, rect); } } } } } if (!(ignoreDrawForeground)) { boolean hasAttributes = true; if (((hFont == (-1)) && (clrText == (-1))) && (clrTextBk == (-1))) { if ((((item.cellForeground) == null) && ((item.cellBackground) == null)) && ((item.cellFont) == null)) { int hwndHeader = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_GETHEADER, 0, 0); int count = ((int) (org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0))); if (count == 1) hasAttributes = false; } } if (hasAttributes) { if (hFont == (-1)) hFont = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.WM_GETFONT, 0, 0); org.eclipse.swt.widgets.OS.SelectObject(hDC, hFont); if (org.eclipse.swt.widgets.OS.IsWindowEnabled(handle)) { nmcd.clrText = (clrText == (-1)) ? getForegroundPixel() : clrText; if (clrTextBk == (-1)) { nmcd.clrTextBk = OS.CLR_NONE; if ((selectionForeground) == (-1)) { org.eclipse.swt.widgets.Control control = findBackgroundControl(); if (control == null) control = this; if ((control.backgroundImage) == null) { if (((int) (org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_GETBKCOLOR, 0, 0))) != (OS.CLR_NONE)) { nmcd.clrTextBk = control.getBackgroundPixel(); } } } } else { nmcd.clrTextBk = ((selectionForeground) != (-1)) ? OS.CLR_NONE : clrTextBk; } org.eclipse.swt.widgets.OS.MoveMemory(lParam, nmcd, NMLVCUSTOMDRAW.sizeof); } code |= OS.CDRF_NEWFONT; } } if (org.eclipse.swt.widgets.OS.IsWindowEnabled(handle)) { if (clrTextBk != (-1)) { int oldColumn = ((int) (org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_GETSELECTEDCOLUMN, 0, 0))); if ((oldColumn != (-1)) && (oldColumn == (nmcd.iSubItem))) { int result = 0; int rgn = 0; if ((!(OS.IsWinCE)) && ((OS.WIN32_VERSION) >= (org.eclipse.swt.widgets.OS.VERSION(6, 0)))) { rgn = org.eclipse.swt.widgets.OS.CreateRectRgn(0, 0, 0, 0); result = org.eclipse.swt.widgets.OS.GetUpdateRgn(handle, rgn, true); } org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_SETSELECTEDCOLUMN, (-1), 0); if ((!(OS.IsWinCE)) && ((OS.WIN32_VERSION) >= (org.eclipse.swt.widgets.OS.VERSION(6, 0)))) { org.eclipse.swt.widgets.OS.ValidateRect(handle, null); if (result != (OS.NULLREGION)) org.eclipse.swt.widgets.OS.InvalidateRgn(handle, rgn, true); org.eclipse.swt.widgets.OS.DeleteObject(rgn); } code |= OS.CDRF_NOTIFYPOSTPAINT; } } } else { nmcd.clrText = org.eclipse.swt.widgets.OS.GetSysColor(OS.COLOR_GRAYTEXT); if ((findImageControl()) != null) { nmcd.clrTextBk = OS.CLR_NONE; } else { nmcd.clrTextBk = org.eclipse.swt.widgets.OS.GetSysColor(OS.COLOR_3DFACE); } nmcd.uItemState &= ~(OS.CDIS_SELECTED); org.eclipse.swt.widgets.OS.MoveMemory(lParam, nmcd, NMLVCUSTOMDRAW.sizeof); code |= OS.CDRF_NEWFONT; } return new org.eclipse.swt.widgets.LRESULT(code); }
public void redraw() { checkWidget(); int paintHandle = paintHandle(); int width = org.eclipse.swt.widgets.OS.GTK_WIDGET_WIDTH(paintHandle); int height = org.eclipse.swt.widgets.OS.GTK_WIDGET_HEIGHT(paintHandle); redrawWidget(0, 0, width, height, true); }
int kEventMouseDown(int nextHandler, int theEvent, int userData) { int result = super.kEventMouseDown(nextHandler, theEvent, userData); if (result == (org.eclipse.swt.internal.carbon.OS.noErr)) return result; org.eclipse.swt.internal.carbon.Rect rect = new org.eclipse.swt.internal.carbon.Rect(); org.eclipse.swt.internal.carbon.OS.GetControlBounds(handle, rect); int startX = rect.left; int startY = rect.top; int width = (rect.right) - (rect.left); int height = (rect.bottom) - (rect.top); org.eclipse.swt.internal.carbon.OS.GetControlBounds(parent.handle, rect); org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); event.x = startX -= rect.left; event.y = startY -= rect.top; event.width = width; event.height = height; sendEvent(SWT.Selection, event); if (isDisposed()) return result; if (!(event.doit)) return result; int sizeof = org.eclipse.swt.internal.carbon.Point.sizeof; org.eclipse.swt.internal.carbon.Point pt = new org.eclipse.swt.internal.carbon.Point(); org.eclipse.swt.internal.carbon.OS.GetEventParameter(theEvent, OS.kEventParamMouseLocation, OS.typeQDPoint, null, sizeof, null, pt); int window = org.eclipse.swt.internal.carbon.OS.GetControlOwner(handle); org.eclipse.swt.internal.carbon.OS.GetWindowBounds(window, ((short) (OS.kWindowContentRgn)), rect); int offsetX = (pt.h) - (rect.left); int offsetY = (pt.v) - (rect.top); org.eclipse.swt.internal.carbon.OS.GetControlBounds(handle, rect); offsetX -= rect.left; offsetY -= rect.top; int port = org.eclipse.swt.internal.carbon.OS.GetWindowPort(window); int[] outModifiers = new int[1]; short[] outResult = new short[1]; org.eclipse.swt.internal.carbon.Point outPt = new org.eclipse.swt.internal.carbon.Point(); while ((outResult[0]) != (org.eclipse.swt.internal.carbon.OS.kMouseTrackingMouseUp)) { org.eclipse.swt.internal.carbon.OS.TrackMouseLocationWithOptions(port, 0, OS.kEventDurationForever, outPt, outModifiers, outResult); switch (outResult[0]) { case org.eclipse.swt.internal.carbon.OS.kMouseTrackingMouseDown : case org.eclipse.swt.internal.carbon.OS.kMouseTrackingMouseUp : case org.eclipse.swt.internal.carbon.OS.kMouseTrackingMouseDragged : { org.eclipse.swt.internal.carbon.OS.GetControlBounds(parent.handle, rect); int x = (outPt.h) - (rect.left); int y = (outPt.v) - (rect.top); int newX = startX; int newY = startY; if (((style) & (SWT.VERTICAL)) != 0) { int clientWidth = (rect.right) - (rect.left); newX = java.lang.Math.min(java.lang.Math.max(0, (x - offsetX)), (clientWidth - width)); } else { int clientHeight = (rect.bottom) - (rect.top); newY = java.lang.Math.min(java.lang.Math.max(0, (y - offsetY)), (clientHeight - height)); } event = new org.eclipse.swt.widgets.Event(); event.x = newX; event.y = newY; event.width = width; event.height = height; sendEvent(SWT.Selection, event); if (isDisposed()) return result; if (event.doit) { setBounds(event.x, event.y, width, height); if (isDisposed()) return result; parent.update(true); } break; } default : outResult[0] = org.eclipse.swt.internal.carbon.OS.kMouseTrackingMouseUp; break; } } return result; }
int TranslateAccelerator(int lpMsg, int pguidCmdGroup, int nCmdID) { org.eclipse.swt.browser.Menu menubar = getShell().getMenuBar(); if (((menubar != null) && (!(menubar.isDisposed()))) && (menubar.isEnabled())) { org.eclipse.swt.browser.Shell shell = menubar.getShell(); int hwnd = shell.handle; int hAccel = org.eclipse.swt.browser.OS.SendMessage(hwnd, ((OS.WM_APP) + 1), 0, 0); if (hAccel != 0) { org.eclipse.swt.browser.MSG msg = new org.eclipse.swt.browser.MSG(); org.eclipse.swt.browser.OS.MoveMemory(msg, lpMsg, MSG.sizeof); if ((org.eclipse.swt.browser.OS.TranslateAccelerator(hwnd, hAccel, msg)) != 0) return COM.S_OK; } } int result = COM.S_FALSE; org.eclipse.swt.browser.MSG msg = new org.eclipse.swt.browser.MSG(); org.eclipse.swt.browser.OS.MoveMemory(msg, lpMsg, MSG.sizeof); if ((msg.message) == (OS.WM_KEYDOWN)) { switch (((int) (msg.wParam))) { case OS.VK_F5 : org.eclipse.swt.browser.OleAutomation auto = new org.eclipse.swt.browser.OleAutomation(this); int[] rgdispid = auto.getIDsOfNames(new java.lang.String[]{ "LocationURL" }); org.eclipse.swt.browser.Variant pVarResult = auto.getProperty(rgdispid[0]); auto.dispose(); if (pVarResult != null) { if ((pVarResult.getType()) == (OLE.VT_BSTR)) { java.lang.String url = pVarResult.getString(); if (url.equals(IE.ABOUT_BLANK)) result = COM.S_OK; } pVarResult.dispose(); } break; case OS.VK_TAB : break; case OS.VK_RETURN : break; case OS.VK_N : if ((((org.eclipse.swt.browser.OS.GetKeyState(OS.VK_CONTROL)) < 0) && ((org.eclipse.swt.browser.OS.GetKeyState(OS.VK_MENU)) >= 0)) && ((org.eclipse.swt.browser.OS.GetKeyState(OS.VK_SHIFT)) >= 0)) { frame.setData(org.eclipse.swt.browser.WebSite.CONSUME_KEY, "false"); result = COM.S_OK; break; } default : org.eclipse.swt.browser.OS.TranslateMessage(msg); frame.setData(org.eclipse.swt.browser.WebSite.CONSUME_KEY, "true"); break; } } switch (msg.message) { case OS.WM_KEYDOWN : case OS.WM_KEYUP : { if (!(OS.IsWinCE)) { boolean isAccent = false; switch (((int) (msg.wParam))) { case OS.VK_SHIFT : case OS.VK_MENU : case OS.VK_CONTROL : case OS.VK_CAPITAL : case OS.VK_NUMLOCK : case OS.VK_SCROLL : break; default : { int mapKey = org.eclipse.swt.browser.OS.MapVirtualKey(((int) (msg.wParam)), 2); if (mapKey != 0) { isAccent = (mapKey & (OS.IsWinNT ? -2147483648 : 32768)) != 0; if (!isAccent) { for (int i = 0; i < (org.eclipse.swt.browser.WebSite.ACCENTS.length); i++) { int value = org.eclipse.swt.browser.OS.VkKeyScan(org.eclipse.swt.browser.WebSite.ACCENTS[i]); if ((value != (-1)) && ((value & 255) == (msg.wParam))) { int state = value >> 8; if (((((org.eclipse.swt.browser.OS.GetKeyState(OS.VK_SHIFT)) < 0) == ((state & 1) != 0)) && (((org.eclipse.swt.browser.OS.GetKeyState(OS.VK_CONTROL)) < 0) == ((state & 2) != 0))) && (((org.eclipse.swt.browser.OS.GetKeyState(OS.VK_MENU)) < 0) == ((state & 4) != 0))) { if ((state & 7) != 0) isAccent = true; break; } } } } } break; } } if (isAccent) result = COM.S_OK; } } } return result; }
void createHandle() { if (((style) & (SWT.SEPARATOR)) != 0) { handle = org.eclipse.swt.widgets.OS.gcnew_Separator(); if ((handle) == 0) error(SWT.ERROR_NO_HANDLES); return; } int bits = (((SWT.RADIO) | (SWT.CHECK)) | (SWT.PUSH)) | (SWT.DROP_DOWN); switch ((style) & bits) { case SWT.RADIO : handle = org.eclipse.swt.widgets.OS.gcnew_RadioButton(); if ((handle) == 0) error(SWT.ERROR_NO_HANDLES); break; case SWT.CHECK : handle = org.eclipse.swt.widgets.OS.gcnew_CheckBox(); if ((handle) == 0) error(SWT.ERROR_NO_HANDLES); break; case SWT.DROP_DOWN : handle = org.eclipse.swt.widgets.OS.gcnew_Button(); if ((handle) == 0) error(SWT.ERROR_NO_HANDLES); break; case SWT.PUSH : default : handle = org.eclipse.swt.widgets.OS.gcnew_Button(); if ((handle) == 0) error(SWT.ERROR_NO_HANDLES); break; } org.eclipse.swt.widgets.OS.ToolBar_SetOverflowMode(handle, OS.OverflowMode_Never); imageHandle = org.eclipse.swt.widgets.OS.gcnew_Image(); if ((imageHandle) == 0) error(SWT.ERROR_NO_HANDLES); org.eclipse.swt.widgets.OS.Image_Stretch(imageHandle, OS.Stretch_None); org.eclipse.swt.widgets.OS.UIElement_Visibility(imageHandle, OS.Visibility_Collapsed); textHandle = org.eclipse.swt.widgets.OS.gcnew_AccessText(); if ((textHandle) == 0) error(SWT.ERROR_NO_HANDLES); org.eclipse.swt.widgets.OS.FrameworkElement_VerticalAlignment(textHandle, OS.VerticalAlignment_Center); org.eclipse.swt.widgets.OS.FrameworkElement_HorizontalAlignment(textHandle, OS.HorizontalAlignment_Center); int panel = org.eclipse.swt.widgets.OS.gcnew_StackPanel(); if (panel == 0) error(SWT.ERROR_NO_HANDLES); int orientation = (((parent.style) & (SWT.RIGHT)) != 0) ? OS.Orientation_Horizontal : OS.Orientation_Vertical; org.eclipse.swt.widgets.OS.StackPanel_Orientation(panel, orientation); int thickness = org.eclipse.swt.widgets.OS.gcnew_Thickness(1, 1, 1, 1); if (thickness == 0) error(SWT.ERROR_NO_HANDLES); org.eclipse.swt.widgets.OS.FrameworkElement_Margin(panel, thickness); org.eclipse.swt.widgets.OS.GCHandle_Free(thickness); int children = org.eclipse.swt.widgets.OS.Panel_Children(panel); org.eclipse.swt.widgets.OS.UIElementCollection_Add(children, imageHandle); org.eclipse.swt.widgets.OS.UIElementCollection_Add(children, textHandle); if (((style) & (SWT.DROP_DOWN)) != 0) { arrowHandle = createArrow(); if (((parent.style) & (SWT.RIGHT)) != 0) { org.eclipse.swt.widgets.OS.UIElementCollection_Add(children, arrowHandle); } else { int newPanel = org.eclipse.swt.widgets.OS.gcnew_StackPanel(); org.eclipse.swt.widgets.OS.StackPanel_Orientation(newPanel, OS.Orientation_Horizontal); int horizontalChildren = org.eclipse.swt.widgets.OS.Panel_Children(newPanel); org.eclipse.swt.widgets.OS.UIElementCollection_Add(horizontalChildren, panel); org.eclipse.swt.widgets.OS.UIElementCollection_Add(horizontalChildren, arrowHandle); org.eclipse.swt.widgets.OS.GCHandle_Free(horizontalChildren); org.eclipse.swt.widgets.OS.GCHandle_Free(panel); panel = newPanel; } } org.eclipse.swt.widgets.OS.ContentControl_Content(handle, panel); org.eclipse.swt.widgets.OS.GCHandle_Free(children); org.eclipse.swt.widgets.OS.GCHandle_Free(panel); int margin = org.eclipse.swt.widgets.OS.gcnew_Thickness(0, 0, 0, 0); org.eclipse.swt.widgets.OS.Control_Padding(handle, margin); org.eclipse.swt.widgets.OS.GCHandle_Free(margin); }
void removeColumn(org.eclipse.swt.widgets.TableColumn column) { int index = column.getIndex(); int columnWidth = column.getWidth(); int columnCount; if ((isRemovingAll()) == true) { getColumnVector().removeElementAt(index); } else { getColumnVector().removeElementAt(index); columnCount = getColumnCount(); if (columnCount > 0) { removeColumnData(column); removeColumnVisual(column); } else { redraw(); getHeader().redraw(); } if (index < columnCount) { reindexColumns(index); } if (columnCount == 0) { org.eclipse.swt.widgets.TableColumn defaultColumn = getDefaultColumn(); defaultColumn.pack(); setColumnPosition(defaultColumn); } setContentWidth(((getContentWidth()) - columnWidth)); claimRightFreeSpace(); } }
void createHandle(int index) { state |= HANDLE; if (((style) & ((SWT.PUSH) | (SWT.TOGGLE))) == 0) state |= THEME_BACKGROUND; int bits = ((((SWT.ARROW) | (SWT.TOGGLE)) | (SWT.CHECK)) | (SWT.RADIO)) | (SWT.PUSH); fixedHandle = org.eclipse.swt.widgets.OS.g_object_new(display.gtk_fixed_get_type(), 0); if ((fixedHandle) == 0) error(SWT.ERROR_NO_HANDLES); org.eclipse.swt.widgets.OS.gtk_fixed_set_has_window(fixedHandle, true); switch ((style) & bits) { case SWT.ARROW : int arrow_type = OS.GTK_ARROW_UP; if (((style) & (SWT.UP)) != 0) arrow_type = OS.GTK_ARROW_UP; if (((style) & (SWT.DOWN)) != 0) arrow_type = OS.GTK_ARROW_DOWN; if (((style) & (SWT.LEFT)) != 0) arrow_type = OS.GTK_ARROW_LEFT; if (((style) & (SWT.RIGHT)) != 0) arrow_type = OS.GTK_ARROW_RIGHT; handle = org.eclipse.swt.widgets.OS.gtk_button_new(); if ((handle) == 0) error(SWT.ERROR_NO_HANDLES); arrowHandle = org.eclipse.swt.widgets.OS.gtk_arrow_new(arrow_type, OS.GTK_SHADOW_OUT); if ((arrowHandle) == 0) error(SWT.ERROR_NO_HANDLES); break; case SWT.TOGGLE : handle = org.eclipse.swt.widgets.OS.gtk_toggle_button_new(); if ((handle) == 0) error(SWT.ERROR_NO_HANDLES); break; case SWT.CHECK : handle = org.eclipse.swt.widgets.OS.gtk_check_button_new(); if ((handle) == 0) error(SWT.ERROR_NO_HANDLES); break; case SWT.RADIO : groupHandle = org.eclipse.swt.widgets.OS.gtk_radio_button_new(0); if ((groupHandle) == 0) error(SWT.ERROR_NO_HANDLES); org.eclipse.swt.widgets.OS.g_object_ref(groupHandle); org.eclipse.swt.widgets.OS.gtk_object_sink(groupHandle); handle = org.eclipse.swt.widgets.OS.gtk_radio_button_new(org.eclipse.swt.widgets.OS.gtk_radio_button_get_group(groupHandle)); if ((handle) == 0) error(SWT.ERROR_NO_HANDLES); break; case SWT.PUSH : default : handle = org.eclipse.swt.widgets.OS.gtk_button_new(); if ((handle) == 0) error(SWT.ERROR_NO_HANDLES); org.eclipse.swt.widgets.OS.GTK_WIDGET_SET_FLAGS(handle, OS.GTK_CAN_DEFAULT); break; } if (((style) & (SWT.ARROW)) != 0) { org.eclipse.swt.widgets.OS.gtk_container_add(handle, arrowHandle); } else { boxHandle = org.eclipse.swt.widgets.OS.gtk_hbox_new(false, 4); if ((boxHandle) == 0) error(SWT.ERROR_NO_HANDLES); labelHandle = org.eclipse.swt.widgets.OS.gtk_label_new_with_mnemonic(null); if ((labelHandle) == 0) error(SWT.ERROR_NO_HANDLES); imageHandle = org.eclipse.swt.widgets.OS.gtk_image_new(); if ((imageHandle) == 0) error(SWT.ERROR_NO_HANDLES); org.eclipse.swt.widgets.OS.gtk_container_add(handle, boxHandle); org.eclipse.swt.widgets.OS.gtk_container_add(boxHandle, imageHandle); org.eclipse.swt.widgets.OS.gtk_container_add(boxHandle, labelHandle); } org.eclipse.swt.widgets.OS.gtk_container_add(fixedHandle, handle); if (((style) & (SWT.ARROW)) != 0) return; _setAlignment(((style) & (((SWT.LEFT) | (SWT.CENTER)) | (SWT.RIGHT)))); }
void createHandle(int index) { state |= HANDLE; if (((style) & (SWT.SEPARATOR)) == 0) { boxHandle = (((parent.style) & (SWT.RIGHT)) != 0) ? org.eclipse.swt.widgets.OS.gtk_hbox_new(false, 0) : org.eclipse.swt.widgets.OS.gtk_vbox_new(false, 0); if ((boxHandle) == 0) error(SWT.ERROR_NO_HANDLES); labelHandle = org.eclipse.swt.widgets.OS.gtk_label_new_with_mnemonic(null); if ((labelHandle) == 0) error(SWT.ERROR_NO_HANDLES); imageHandle = org.eclipse.swt.widgets.OS.gtk_image_new(); if ((imageHandle) == 0) error(SWT.ERROR_NO_HANDLES); org.eclipse.swt.widgets.OS.gtk_container_add(boxHandle, imageHandle); org.eclipse.swt.widgets.OS.gtk_container_add(boxHandle, labelHandle); if (((parent.style) & (SWT.VERTICAL)) != 0) { org.eclipse.swt.widgets.OS.gtk_box_set_child_packing(boxHandle, imageHandle, false, false, 0, 0); org.eclipse.swt.widgets.OS.gtk_box_set_child_packing(boxHandle, labelHandle, false, false, 2, 0); } } int bits = ((((SWT.SEPARATOR) | (SWT.RADIO)) | (SWT.CHECK)) | (SWT.PUSH)) | (SWT.DROP_DOWN); switch ((style) & bits) { case SWT.SEPARATOR : handle = org.eclipse.swt.widgets.OS.gtk_hbox_new(false, 0); if ((handle) == 0) error(SWT.ERROR_NO_HANDLES); boolean isVertical = ((parent.style) & (SWT.VERTICAL)) != 0; separatorHandle = (isVertical) ? org.eclipse.swt.widgets.OS.gtk_hseparator_new() : org.eclipse.swt.widgets.OS.gtk_vseparator_new(); if ((separatorHandle) == 0) error(SWT.ERROR_NO_HANDLES); org.eclipse.swt.widgets.OS.gtk_widget_set_size_request(separatorHandle, (isVertical ? 15 : 6), (isVertical ? 6 : 15)); org.eclipse.swt.widgets.OS.gtk_widget_set_size_request(handle, (isVertical ? 15 : 6), (isVertical ? 6 : 15)); org.eclipse.swt.widgets.OS.gtk_container_add(handle, separatorHandle); break; case SWT.DROP_DOWN : handle = org.eclipse.swt.widgets.OS.gtk_button_new(); if ((handle) == 0) error(SWT.ERROR_NO_HANDLES); arrowBoxHandle = org.eclipse.swt.widgets.OS.gtk_hbox_new(false, 0); if ((arrowBoxHandle) == 0) error(SWT.ERROR_NO_HANDLES); arrowHandle = org.eclipse.swt.widgets.OS.gtk_arrow_new(OS.GTK_ARROW_DOWN, OS.GTK_SHADOW_NONE); if ((arrowHandle) == 0) error(SWT.ERROR_NO_HANDLES); org.eclipse.swt.widgets.OS.gtk_widget_set_size_request(arrowHandle, 8, 6); org.eclipse.swt.widgets.OS.gtk_container_add(handle, arrowBoxHandle); org.eclipse.swt.widgets.OS.gtk_container_add(arrowBoxHandle, boxHandle); org.eclipse.swt.widgets.OS.gtk_container_add(arrowBoxHandle, arrowHandle); break; case SWT.RADIO : case SWT.CHECK : handle = org.eclipse.swt.widgets.OS.gtk_toggle_button_new(); if ((handle) == 0) error(SWT.ERROR_NO_HANDLES); org.eclipse.swt.widgets.OS.gtk_toggle_button_set_mode(handle, false); org.eclipse.swt.widgets.OS.gtk_container_add(handle, boxHandle); break; case SWT.PUSH : default : handle = org.eclipse.swt.widgets.OS.gtk_button_new(); if ((handle) == 0) error(SWT.ERROR_NO_HANDLES); org.eclipse.swt.widgets.OS.gtk_container_add(handle, boxHandle); break; } if (((style) & (SWT.SEPARATOR)) == 0) { int[] relief = new int[1]; org.eclipse.swt.widgets.OS.gtk_widget_style_get(parent.handle, OS.button_relief, relief, 0); org.eclipse.swt.widgets.OS.gtk_button_set_relief(handle, relief[0]); } org.eclipse.swt.widgets.OS.GTK_WIDGET_UNSET_FLAGS(handle, OS.GTK_CAN_FOCUS); if (((parent.state) & (FOREGROUND)) != 0) { setForegroundColor(parent.getForegroundColor()); } if (((parent.state) & (FONT)) != 0) { setFontDescription(parent.getFontDescription()); } }
public int doVerb(int verb) { if ((state) == (org.eclipse.swt.ole.win32.OleClientSite.STATE_NONE)) { if ((org.eclipse.swt.ole.win32.COM.OleRun(objIUnknown.getAddress())) == (OLE.S_OK)) state = org.eclipse.swt.ole.win32.OleClientSite.STATE_RUNNING; } if (((state) == (org.eclipse.swt.ole.win32.OleClientSite.STATE_NONE)) || (isStatic)) return COM.E_FAIL; int result = objIOleObject.DoVerb(verb, null, iOleClientSite.getAddress(), 0, handle, null); if (((state) != (org.eclipse.swt.ole.win32.OleClientSite.STATE_RUNNING)) && (inInit)) { updateStorage(); inInit = false; } return result; }
public void setText(java.lang.String string) { checkWidget(); if (string == null) error(SWT.ERROR_NULL_ARGUMENT); if (string.equals(text)) return; text = string; layout.setText(parse(string)); focusIndex = ((offsets.length) > 0) ? 0 : -1; selection.x = selection.y = -1; boolean enabled = ((state) & (DISABLED)) == 0; org.eclipse.swt.widgets.TextStyle linkStyle = new org.eclipse.swt.widgets.TextStyle(null, (enabled ? linkColor : disabledColor), null); linkStyle.underline = true; for (int i = 0; i < (offsets.length); i++) { org.eclipse.swt.widgets.Point point = offsets[i]; layout.setStyle(linkStyle, point.x, point.y); } org.eclipse.swt.widgets.TextStyle mnemonicStyle = new org.eclipse.swt.widgets.TextStyle(null, null, null); mnemonicStyle.underline = true; for (int i = 0; i < (mnemonics.length); i++) { int mnemonic = mnemonics[i]; if (mnemonic != (-1)) { layout.setStyle(mnemonicStyle, mnemonic, mnemonic); } } redraw(); }
org.eclipse.swt.widgets.LRESULT wmNotifyChild(org.eclipse.swt.widgets.NMHDR hdr, int wParam, int lParam) { switch (hdr.code) { case OS.LVN_ODFINDITEMA : case OS.LVN_ODFINDITEMW : { if (((style) & (SWT.VIRTUAL)) != 0) return new org.eclipse.swt.widgets.LRESULT((-1)); break; } case OS.LVN_ODSTATECHANGED : { if (((style) & (SWT.VIRTUAL)) != 0) { if (!(ignoreSelect)) { org.eclipse.swt.widgets.NMLVODSTATECHANGE lpStateChange = new org.eclipse.swt.widgets.NMLVODSTATECHANGE(); org.eclipse.swt.widgets.OS.MoveMemory(lpStateChange, lParam, NMLVODSTATECHANGE.sizeof); boolean oldSelected = ((lpStateChange.uOldState) & (OS.LVIS_SELECTED)) != 0; boolean newSelected = ((lpStateChange.uNewState) & (OS.LVIS_SELECTED)) != 0; if (oldSelected != newSelected) wasSelected = true; } } break; } case OS.LVN_GETDISPINFOA : case OS.LVN_GETDISPINFOW : { org.eclipse.swt.widgets.NMLVDISPINFO plvfi = new org.eclipse.swt.widgets.NMLVDISPINFO(); org.eclipse.swt.widgets.OS.MoveMemory(plvfi, lParam, NMLVDISPINFO.sizeof); boolean[] visible = display.columnVisible; if ((visible != null) && (!(visible[plvfi.iSubItem]))) { break; } org.eclipse.swt.widgets.TableItem item = _getItem(plvfi.iItem); if (item == null) break; if ((((style) & (SWT.VIRTUAL)) != 0) && (!(item.cached))) { if (ignoreShrink) { org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_REDRAWITEMS, plvfi.iItem, plvfi.iItem); break; } } if (!(item.cached)) { if (((style) & (SWT.VIRTUAL)) != 0) { lastIndexOf = plvfi.iItem; if (!(checkData(item, lastIndexOf, false))) break; org.eclipse.swt.widgets.TableItem newItem = (fixScrollWidth) ? null : item; if (setScrollWidth(newItem, true)) { org.eclipse.swt.widgets.OS.InvalidateRect(handle, null, true); } } item.cached = true; } if (((plvfi.mask) & (OS.LVIF_TEXT)) != 0) { java.lang.String string = null; if ((plvfi.iSubItem) == 0) { string = item.text; } else { java.lang.String[] strings = item.strings; if (strings != null) string = strings[plvfi.iSubItem]; } if (string != null) { int length = java.lang.Math.min(string.length(), ((plvfi.cchTextMax) - 1)); if (((!(tipRequested)) && ((plvfi.iSubItem) == 0)) && (length == 0)) { string = " "; length = 1; } char[] buffer = display.tableBuffer; if ((buffer == null) || ((plvfi.cchTextMax) > (buffer.length))) { buffer = display.tableBuffer = new char[plvfi.cchTextMax]; } string.getChars(0, length, buffer, 0); buffer[(length++)] = 0; if (OS.IsUnicode) { org.eclipse.swt.widgets.OS.MoveMemory(plvfi.pszText, buffer, (length * 2)); } else { org.eclipse.swt.widgets.OS.WideCharToMultiByte(getCodePage(), 0, buffer, length, plvfi.pszText, plvfi.cchTextMax, null, null); org.eclipse.swt.widgets.OS.MoveMemory((((plvfi.pszText) + (plvfi.cchTextMax)) - 1), new byte[1], 1); } } } boolean move = false; if (((plvfi.mask) & (OS.LVIF_IMAGE)) != 0) { org.eclipse.swt.widgets.Image image = null; if ((plvfi.iSubItem) == 0) { image = item.image; } else { org.eclipse.swt.widgets.Image[] images = item.images; if (images != null) image = images[plvfi.iSubItem]; } if (image != null) { plvfi.iImage = imageIndex(image, plvfi.iSubItem); move = true; } } if (((plvfi.mask) & (OS.LVIF_STATE)) != 0) { if ((plvfi.iSubItem) == 0) { int state = 1; if (item.checked) state++; if (item.grayed) state += 2; plvfi.state = state << 12; plvfi.stateMask = OS.LVIS_STATEIMAGEMASK; move = true; } } if (((plvfi.mask) & (OS.LVIF_INDENT)) != 0) { if ((plvfi.iSubItem) == 0) { plvfi.iIndent = item.imageIndent; move = true; } } if (move) org.eclipse.swt.widgets.OS.MoveMemory(lParam, plvfi, NMLVDISPINFO.sizeof); break; } case OS.NM_CUSTOMDRAW : { int hwndHeader = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_GETHEADER, 0, 0); if ((hdr.hwndFrom) == hwndHeader) break; if ((!(customDraw)) && ((findImageControl()) == null)) { if (org.eclipse.swt.widgets.OS.IsWindowEnabled(handle)) { if ((!(explorerTheme)) || ((columnCount) != 0)) break; } } org.eclipse.swt.widgets.NMLVCUSTOMDRAW nmcd = new org.eclipse.swt.widgets.NMLVCUSTOMDRAW(); org.eclipse.swt.widgets.OS.MoveMemory(nmcd, lParam, NMLVCUSTOMDRAW.sizeof); switch (nmcd.dwDrawStage) { case OS.CDDS_PREPAINT : return CDDS_PREPAINT(nmcd, wParam, lParam); case OS.CDDS_ITEMPREPAINT : return CDDS_ITEMPREPAINT(nmcd, wParam, lParam); case OS.CDDS_ITEMPOSTPAINT : return CDDS_ITEMPOSTPAINT(nmcd, wParam, lParam); case OS.CDDS_SUBITEMPREPAINT : return CDDS_SUBITEMPREPAINT(nmcd, wParam, lParam); case OS.CDDS_SUBITEMPOSTPAINT : return CDDS_SUBITEMPOSTPAINT(nmcd, wParam, lParam); case OS.CDDS_POSTPAINT : return CDDS_POSTPAINT(nmcd, wParam, lParam); } break; } case OS.LVN_MARQUEEBEGIN : { if (((style) & (SWT.SINGLE)) != 0) return LRESULT.ONE; if ((hooks(SWT.MouseDown)) || (hooks(SWT.MouseUp))) { return LRESULT.ONE; } if (((style) & (SWT.RIGHT_TO_LEFT)) != 0) { if ((findImageControl()) != null) return LRESULT.ONE; } break; } case OS.LVN_BEGINDRAG : case OS.LVN_BEGINRDRAG : { if ((org.eclipse.swt.widgets.OS.GetKeyState(OS.VK_LBUTTON)) >= 0) break; dragStarted = true; if ((hdr.code) == (OS.LVN_BEGINDRAG)) { int pos = org.eclipse.swt.widgets.OS.GetMessagePos(); org.eclipse.swt.widgets.POINT pt = new org.eclipse.swt.widgets.POINT(); org.eclipse.swt.widgets.OS.POINTSTOPOINT(pt, pos); org.eclipse.swt.widgets.OS.ScreenToClient(handle, pt); sendDragEvent(1, pt.x, pt.y); } break; } case OS.LVN_COLUMNCLICK : { org.eclipse.swt.widgets.NMLISTVIEW pnmlv = new org.eclipse.swt.widgets.NMLISTVIEW(); org.eclipse.swt.widgets.OS.MoveMemory(pnmlv, lParam, NMLISTVIEW.sizeof); org.eclipse.swt.widgets.TableColumn column = columns[pnmlv.iSubItem]; if (column != null) { column.postEvent(SWT.Selection); } break; } case OS.LVN_ITEMACTIVATE : { if (ignoreActivate) break; org.eclipse.swt.widgets.NMLISTVIEW pnmlv = new org.eclipse.swt.widgets.NMLISTVIEW(); org.eclipse.swt.widgets.OS.MoveMemory(pnmlv, lParam, NMLISTVIEW.sizeof); if ((pnmlv.iItem) != (-1)) { org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); event.item = _getItem(pnmlv.iItem); postEvent(SWT.DefaultSelection, event); } break; } case OS.LVN_ITEMCHANGED : { if (fullRowSelect) { fullRowSelect = false; org.eclipse.swt.widgets.OS.DefWindowProc(handle, OS.WM_SETREDRAW, 1, 0); org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_SETEXTENDEDLISTVIEWSTYLE, OS.LVS_EX_FULLROWSELECT, 0); } if (!(ignoreSelect)) { org.eclipse.swt.widgets.NMLISTVIEW pnmlv = new org.eclipse.swt.widgets.NMLISTVIEW(); org.eclipse.swt.widgets.OS.MoveMemory(pnmlv, lParam, NMLISTVIEW.sizeof); if (((pnmlv.uChanged) & (OS.LVIF_STATE)) != 0) { if ((pnmlv.iItem) == (-1)) { wasSelected = true; } else { boolean oldSelected = ((pnmlv.uOldState) & (OS.LVIS_SELECTED)) != 0; boolean newSelected = ((pnmlv.uNewState) & (OS.LVIS_SELECTED)) != 0; if (oldSelected != newSelected) wasSelected = true; } } } if ((hooks(SWT.EraseItem)) || (hooks(SWT.PaintItem))) { int hwndHeader = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_GETHEADER, 0, 0); int count = ((int) (org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0))); if (count != 0) { forceResize(); org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); org.eclipse.swt.widgets.OS.GetClientRect(handle, rect); org.eclipse.swt.widgets.NMLISTVIEW pnmlv = new org.eclipse.swt.widgets.NMLISTVIEW(); org.eclipse.swt.widgets.OS.MoveMemory(pnmlv, lParam, NMLISTVIEW.sizeof); if ((pnmlv.iItem) != (-1)) { org.eclipse.swt.widgets.RECT itemRect = new org.eclipse.swt.widgets.RECT(); itemRect.left = OS.LVIR_BOUNDS; ignoreCustomDraw = true; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_GETITEMRECT, pnmlv.iItem, itemRect); ignoreCustomDraw = false; org.eclipse.swt.widgets.RECT headerRect = new org.eclipse.swt.widgets.RECT(); int index = ((int) (org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_ORDERTOINDEX, (count - 1), 0))); org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEMRECT, index, headerRect); org.eclipse.swt.widgets.OS.MapWindowPoints(hwndHeader, handle, headerRect, 2); rect.left = headerRect.right; rect.top = itemRect.top; rect.bottom = itemRect.bottom; org.eclipse.swt.widgets.OS.InvalidateRect(handle, rect, true); } } } break; } case OS.NM_RECOGNIZEGESTURE : if (OS.IsPPC) { boolean hasMenu = ((menu) != null) && (!(menu.isDisposed())); if ((!hasMenu) && (!(hooks(SWT.MenuDetect)))) return LRESULT.ONE; } break; case OS.GN_CONTEXTMENU : if (OS.IsPPC) { boolean hasMenu = ((menu) != null) && (!(menu.isDisposed())); if (hasMenu || (hooks(SWT.MenuDetect))) { org.eclipse.swt.widgets.NMRGINFO nmrg = new org.eclipse.swt.widgets.NMRGINFO(); org.eclipse.swt.widgets.OS.MoveMemory(nmrg, lParam, NMRGINFO.sizeof); showMenu(nmrg.x, nmrg.y); return LRESULT.ONE; } } break; } return super.wmNotifyChild(hdr, wParam, lParam); }
void drawInteriorWithFrame_inView(int id, int sel, org.eclipse.swt.widgets.NSRect rect, int view) { boolean hooksErase = hooks(SWT.EraseItem); boolean hooksPaint = hooks(SWT.PaintItem); boolean hooksMeasure = hooks(SWT.MeasureItem); org.eclipse.swt.widgets.NSTextFieldCell cell = new org.eclipse.swt.widgets.NSTextFieldCell(id); org.eclipse.swt.widgets.NSTableView widget = ((org.eclipse.swt.widgets.NSTableView) (this.view)); int[] outValue = new int[1]; org.eclipse.swt.widgets.OS.object_getInstanceVariable(id, Display.SWT_ROW, outValue); int rowIndex = outValue[0]; org.eclipse.swt.widgets.TableItem item = _getItem(((int) (rowIndex))); org.eclipse.swt.widgets.OS.object_getInstanceVariable(id, Display.SWT_COLUMN, outValue); int tableColumn = outValue[0]; int nsColumnIndex = widget.tableColumns().indexOfObjectIdenticalTo(new org.eclipse.swt.widgets.id(tableColumn)); int columnIndex = 0; for (int i = 0; i < (columnCount); i++) { if ((columns[i].nsColumn.id) == tableColumn) { columnIndex = i; break; } } org.eclipse.swt.widgets.Color background = ((item.cellBackground) != null) ? item.cellBackground[columnIndex] : null; if (background == null) background = item.background; boolean drawBackground = background != null; boolean drawForeground = true; boolean isSelected = cell.isHighlighted(); boolean drawSelection = isSelected; boolean hasFocus = hasFocus(); org.eclipse.swt.widgets.Color selectionBackground = null; org.eclipse.swt.widgets.Color selectionForeground = null; if (isSelected && (hooksErase || hooksPaint)) { selectionForeground = org.eclipse.swt.widgets.Color.cocoa_new(display, (hasFocus ? display.alternateSelectedControlTextColor : display.selectedControlTextColor)); selectionBackground = org.eclipse.swt.widgets.Color.cocoa_new(display, (hasFocus ? display.alternateSelectedControlColor : display.secondarySelectedControlColor)); } org.eclipse.swt.widgets.NSSize contentSize = super.cellSize(id, OS.sel_cellSize); org.eclipse.swt.widgets.NSImage image = cell.image(); if (image != null) contentSize.width += (imageBounds.width) + (org.eclipse.swt.widgets.Table.IMAGE_GAP); int contentWidth = ((int) (java.lang.Math.ceil(contentSize.width))); org.eclipse.swt.widgets.NSSize spacing = widget.intercellSpacing(); int itemHeight = ((int) (java.lang.Math.ceil(((widget.rowHeight()) + (spacing.height))))); org.eclipse.swt.widgets.NSRect cellRect = widget.rectOfColumn(nsColumnIndex); cellRect.y = rect.y; cellRect.height = (rect.height) + (spacing.height); if ((columnCount) == 0) { org.eclipse.swt.widgets.NSRect rowRect = widget.rectOfRow(rowIndex); cellRect.width = rowRect.width; } float offsetX = 0; float offsetY = 0; if (hooksPaint || hooksErase) { org.eclipse.swt.widgets.NSRect frameCell = widget.frameOfCellAtColumn(nsColumnIndex, rowIndex); offsetX = (rect.x) - (frameCell.x); offsetY = (rect.y) - (frameCell.y); if (drawExpansion) { offsetX -= 0.5F; offsetY -= 0.5F; } } int itemX = ((int) ((rect.x) - offsetX)); int itemY = ((int) ((rect.y) - offsetY)); org.eclipse.swt.widgets.NSGraphicsContext context = org.eclipse.swt.widgets.NSGraphicsContext.currentContext(); if (hooksMeasure) { sendMeasureItem(item, columnIndex, contentSize, isSelected); } org.eclipse.swt.widgets.Color userForeground = null; if (hooksErase) { context.saveGraphicsState(); org.eclipse.swt.widgets.NSAffineTransform transform = org.eclipse.swt.widgets.NSAffineTransform.transform(); transform.translateXBy(offsetX, offsetY); transform.concat(); org.eclipse.swt.widgets.GCData data = new org.eclipse.swt.widgets.GCData(); data.paintRect = cellRect; org.eclipse.swt.widgets.GC gc = org.eclipse.swt.widgets.GC.cocoa_new(this, data); gc.setFont(item.getFont(columnIndex)); org.eclipse.swt.widgets.Color fg; if (isSelected && ((((style) & (SWT.HIDE_SELECTION)) == 0) || hasFocus)) { fg = selectionForeground; gc.setBackground(selectionBackground); } else { fg = item.getForeground(columnIndex); gc.setBackground(item.getBackground(columnIndex)); } gc.setForeground(fg); if (!(drawExpansion)) { gc.setClipping(((int) ((cellRect.x) - offsetX)), ((int) ((cellRect.y) - offsetY)), ((int) (cellRect.width)), ((int) (cellRect.height))); } org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); event.item = item; event.gc = gc; event.index = columnIndex; event.detail = SWT.FOREGROUND; if (drawBackground) event.detail |= SWT.BACKGROUND; if (isSelected && ((((style) & (SWT.HIDE_SELECTION)) == 0) || hasFocus)) event.detail |= SWT.SELECTED; event.x = ((int) (cellRect.x)); event.y = ((int) (cellRect.y)); event.width = ((int) (cellRect.width)); event.height = ((int) (cellRect.height)); sendEvent(SWT.EraseItem, event); gc.dispose(); if (!(event.doit)) { drawForeground = drawBackground = drawSelection = false; } else { drawBackground = drawBackground && (((event.detail) & (SWT.BACKGROUND)) != 0); drawForeground = ((event.detail) & (SWT.FOREGROUND)) != 0; drawSelection = drawSelection && (((event.detail) & (SWT.SELECTED)) != 0); } if ((!drawSelection) && isSelected) { userForeground = org.eclipse.swt.widgets.Color.cocoa_new(display, fg.handle); } context.restoreGraphicsState(); if (isDisposed()) return; if (item.isDisposed()) return; if (drawSelection) { cellRect.height -= spacing.height; callSuper(widget.id, OS.sel_highlightSelectionInClipRect_, cellRect); cellRect.height += spacing.height; } } else { if ((isSelected && (((style) & (SWT.HIDE_SELECTION)) != 0)) && (!hasFocus)) { userForeground = item.getForeground(columnIndex); } } if (drawBackground && (!drawSelection)) { context.saveGraphicsState(); float[] colorRGB = background.handle; org.eclipse.swt.widgets.NSColor color = org.eclipse.swt.widgets.NSColor.colorWithCalibratedRed(colorRGB[0], colorRGB[1], colorRGB[2], 1.0F); color.setFill(); org.eclipse.swt.widgets.NSBezierPath.fillRect(cellRect); context.restoreGraphicsState(); } if (drawForeground) { if (((!(drawExpansion)) || hooksMeasure) && (image != null)) { org.eclipse.swt.widgets.NSRect destRect = new org.eclipse.swt.widgets.NSRect(); destRect.x = (rect.x) + (org.eclipse.swt.widgets.Table.IMAGE_GAP); destRect.y = (rect.y) + ((float) (java.lang.Math.ceil((((rect.height) - (imageBounds.height)) / 2)))); destRect.width = imageBounds.width; destRect.height = imageBounds.height; context.saveGraphicsState(); org.eclipse.swt.widgets.NSBezierPath.bezierPathWithRect(rect).addClip(); org.eclipse.swt.widgets.NSAffineTransform transform = org.eclipse.swt.widgets.NSAffineTransform.transform(); transform.scaleXBy(1, (-1)); transform.translateXBy(0, (-((destRect.height) + (2 * (destRect.y))))); transform.concat(); image.drawInRect(destRect, new org.eclipse.swt.widgets.NSRect(), OS.NSCompositeSourceOver, 1); context.restoreGraphicsState(); int imageWidth = (imageBounds.width) + (org.eclipse.swt.widgets.Table.IMAGE_GAP); rect.x += imageWidth; rect.width -= imageWidth; } cell.setHighlighted(false); boolean callSuper = false; if (userForeground != null) { float[] color = userForeground.handle; if (((((color[0]) == 0) && ((color[1]) == 0)) && ((color[2]) == 0)) && ((color[3]) == 1)) { org.eclipse.swt.widgets.NSMutableAttributedString newStr = new org.eclipse.swt.widgets.NSMutableAttributedString(cell.attributedStringValue().mutableCopy()); org.eclipse.swt.widgets.NSRange range = new org.eclipse.swt.widgets.NSRange(); range.length = newStr.length(); newStr.removeAttribute(OS.NSForegroundColorAttributeName, range); int alignment = ((columnCount) == 0) ? SWT.LEFT : (columns[columnIndex].style) & (((SWT.LEFT) | (SWT.CENTER)) | (SWT.RIGHT)); org.eclipse.swt.widgets.NSSize size = newStr.size(); org.eclipse.swt.widgets.NSRect newRect = new org.eclipse.swt.widgets.NSRect(); newRect.x = (rect.x) + (org.eclipse.swt.widgets.Table.TEXT_GAP); newRect.y = rect.y; newRect.width = (rect.width) - (org.eclipse.swt.widgets.Table.TEXT_GAP); switch (alignment) { case SWT.CENTER : newRect.width -= ((org.eclipse.swt.widgets.Table.TEXT_GAP) / 2.0F) + 1; break; case SWT.RIGHT : { if ((rect.width) > (size.width)) newRect.width -= org.eclipse.swt.widgets.Table.TEXT_GAP; break; } } newRect.height = rect.height; if ((newRect.height) > (size.height)) { newRect.y += ((newRect.height) - (size.height)) / 2; newRect.height = size.height; } newStr.drawInRect(newRect); newStr.release(); } else { org.eclipse.swt.widgets.NSColor nsColor = org.eclipse.swt.widgets.NSColor.colorWithCalibratedRed(color[0], color[1], color[2], color[3]); cell.setTextColor(nsColor); callSuper = true; } } else { callSuper = true; } if (callSuper) { org.eclipse.swt.widgets.NSAttributedString attrStr = cell.attributedStringValue(); org.eclipse.swt.widgets.NSSize size = attrStr.size(); if ((rect.height) > (size.height)) { rect.y += ((rect.height) - (size.height)) / 2; rect.height = size.height; } super.drawInteriorWithFrame_inView(id, sel, rect, view); } } if (hooksPaint) { context.saveGraphicsState(); org.eclipse.swt.widgets.NSAffineTransform transform = org.eclipse.swt.widgets.NSAffineTransform.transform(); transform.translateXBy(offsetX, offsetY); transform.concat(); org.eclipse.swt.widgets.GCData data = new org.eclipse.swt.widgets.GCData(); data.paintRect = cellRect; org.eclipse.swt.widgets.GC gc = org.eclipse.swt.widgets.GC.cocoa_new(this, data); gc.setFont(item.getFont(columnIndex)); if (drawSelection) { gc.setForeground(selectionForeground); gc.setBackground(selectionBackground); } else { gc.setForeground((userForeground != null ? userForeground : item.getForeground(columnIndex))); gc.setBackground(item.getBackground(columnIndex)); } if (!(drawExpansion)) { gc.setClipping(((int) ((cellRect.x) - offsetX)), ((int) ((cellRect.y) - offsetY)), ((int) (cellRect.width)), ((int) (cellRect.height))); } org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); event.item = item; event.gc = gc; event.index = columnIndex; if (drawForeground) event.detail |= SWT.FOREGROUND; if (drawBackground) event.detail |= SWT.BACKGROUND; if (isSelected) event.detail |= SWT.SELECTED; event.x = itemX; event.y = itemY; event.width = contentWidth; event.height = itemHeight; sendEvent(SWT.PaintItem, event); gc.dispose(); context.restoreGraphicsState(); } }
void handleMouseEvent(org.eclipse.swt.browser.OleEvent e) { if (((e.arguments) == null) || ((e.arguments.length) == 0)) return; org.eclipse.swt.browser.Variant arg = e.arguments[0]; org.eclipse.swt.browser.OleAutomation event = arg.getAutomation(); int[] rgdispid = event.getIDsOfNames(new java.lang.String[]{ org.eclipse.swt.browser.IE.PROPERTY_TYPE }); int dispIdMember = rgdispid[0]; org.eclipse.swt.browser.Variant pVarResult = event.getProperty(dispIdMember); java.lang.String eventType = pVarResult.getString(); pVarResult.dispose(); if (eventType.equals(org.eclipse.swt.browser.IE.EVENT_MOUSEOVER)) { rgdispid = event.getIDsOfNames(new java.lang.String[]{ org.eclipse.swt.browser.IE.PROPERTY_FROMELEMENT }); dispIdMember = rgdispid[0]; pVarResult = event.getProperty(dispIdMember); boolean isInternal = (pVarResult.getType()) != (COM.VT_EMPTY); pVarResult.dispose(); if (isInternal) { event.dispose(); return; } } if (eventType.equals(org.eclipse.swt.browser.IE.EVENT_MOUSEOUT)) { rgdispid = event.getIDsOfNames(new java.lang.String[]{ org.eclipse.swt.browser.IE.PROPERTY_TOELEMENT }); dispIdMember = rgdispid[0]; pVarResult = event.getProperty(dispIdMember); boolean isInternal = (pVarResult.getType()) != (COM.VT_EMPTY); pVarResult.dispose(); if (isInternal) { event.dispose(); return; } } int x; int y; int mask = 0; org.eclipse.swt.browser.Event newEvent = new org.eclipse.swt.browser.Event(); newEvent.widget = browser; rgdispid = event.getIDsOfNames(new java.lang.String[]{ org.eclipse.swt.browser.IE.PROPERTY_CLIENTX }); dispIdMember = rgdispid[0]; pVarResult = event.getProperty(dispIdMember); x = pVarResult.getInt(); newEvent.x = x; pVarResult.dispose(); rgdispid = event.getIDsOfNames(new java.lang.String[]{ org.eclipse.swt.browser.IE.PROPERTY_CLIENTY }); dispIdMember = rgdispid[0]; pVarResult = event.getProperty(dispIdMember); y = pVarResult.getInt(); newEvent.y = y; pVarResult.dispose(); rgdispid = event.getIDsOfNames(new java.lang.String[]{ org.eclipse.swt.browser.IE.PROPERTY_CTRLKEY }); dispIdMember = rgdispid[0]; pVarResult = event.getProperty(dispIdMember); if (pVarResult.getBoolean()) mask |= SWT.CTRL; pVarResult.dispose(); rgdispid = event.getIDsOfNames(new java.lang.String[]{ org.eclipse.swt.browser.IE.PROPERTY_ALTKEY }); dispIdMember = rgdispid[0]; pVarResult = event.getProperty(dispIdMember); if (pVarResult.getBoolean()) mask |= SWT.ALT; pVarResult.dispose(); rgdispid = event.getIDsOfNames(new java.lang.String[]{ org.eclipse.swt.browser.IE.PROPERTY_SHIFTKEY }); dispIdMember = rgdispid[0]; pVarResult = event.getProperty(dispIdMember); if (pVarResult.getBoolean()) mask |= SWT.SHIFT; pVarResult.dispose(); newEvent.stateMask = mask; rgdispid = event.getIDsOfNames(new java.lang.String[]{ org.eclipse.swt.browser.IE.PROPERTY_BUTTON }); dispIdMember = rgdispid[0]; pVarResult = event.getProperty(dispIdMember); int button = pVarResult.getInt(); pVarResult.dispose(); switch (button) { case 1 : button = 1; break; case 2 : button = 3; break; case 4 : button = 2; break; } if (eventType.equals(org.eclipse.swt.browser.IE.EVENT_MOUSEDOWN)) { newEvent.type = SWT.MouseDown; newEvent.button = button; newEvent.count = 1; } else if ((eventType.equals(org.eclipse.swt.browser.IE.EVENT_MOUSEUP)) || (eventType.equals(org.eclipse.swt.browser.IE.EVENT_DRAGEND))) { newEvent.type = SWT.MouseUp; newEvent.button = (button != 0) ? button : 1; newEvent.count = 1; switch (newEvent.button) { case 1 : newEvent.stateMask |= SWT.BUTTON1; break; case 2 : newEvent.stateMask |= SWT.BUTTON2; break; case 3 : newEvent.stateMask |= SWT.BUTTON3; break; case 4 : newEvent.stateMask |= SWT.BUTTON4; break; case 5 : newEvent.stateMask |= SWT.BUTTON5; break; } } else if (eventType.equals(org.eclipse.swt.browser.IE.EVENT_MOUSEWHEEL)) { newEvent.type = SWT.MouseWheel; rgdispid = event.getIDsOfNames(new java.lang.String[]{ org.eclipse.swt.browser.IE.PROPERTY_WHEELDELTA }); dispIdMember = rgdispid[0]; pVarResult = event.getProperty(dispIdMember); newEvent.count = ((pVarResult.getInt()) / 120) * 3; pVarResult.dispose(); } else if (eventType.equals(org.eclipse.swt.browser.IE.EVENT_MOUSEMOVE)) { if (((newEvent.x) == (lastMouseMoveX)) && ((newEvent.y) == (lastMouseMoveY))) return; newEvent.type = SWT.MouseMove; lastMouseMoveX = newEvent.x; lastMouseMoveY = newEvent.y; } else if (eventType.equals(org.eclipse.swt.browser.IE.EVENT_MOUSEOVER)) { newEvent.type = SWT.MouseEnter; } else if (eventType.equals(org.eclipse.swt.browser.IE.EVENT_MOUSEOUT)) { newEvent.type = SWT.MouseExit; } else if (eventType.equals(org.eclipse.swt.browser.IE.EVENT_DRAGSTART)) { newEvent.type = SWT.DragDetect; newEvent.button = 1; newEvent.stateMask |= SWT.BUTTON1; } event.dispose(); browser.notifyListeners(newEvent.type, newEvent); if (eventType.equals(org.eclipse.swt.browser.IE.EVENT_DOUBLECLICK)) { newEvent = new org.eclipse.swt.browser.Event(); newEvent.widget = browser; newEvent.type = SWT.MouseDoubleClick; newEvent.x = x; newEvent.y = y; newEvent.stateMask = mask; newEvent.type = SWT.MouseDoubleClick; newEvent.button = 1; newEvent.count = 2; browser.notifyListeners(newEvent.type, newEvent); } }
int gtk_key_press_event(int widget, int event) { if (!(hasFocus())) return 0; int imHandle = imHandle(); if (imHandle != 0) { if (org.eclipse.swt.widgets.OS.gtk_im_context_filter_keypress(imHandle, event)) return 1; if (isDisposed()) return 0; } org.eclipse.swt.widgets.GdkEventKey gdkEvent = new org.eclipse.swt.widgets.GdkEventKey(); org.eclipse.swt.widgets.OS.memmove(gdkEvent, event, GdkEventKey.sizeof); if (translateMnemonic(gdkEvent.keyval, gdkEvent)) return 1; if (translateTraversal(gdkEvent)) return 1; if (isDisposed()) return 0; return sendKeyEvent(SWT.KeyDown, gdkEvent) ? 0 : 1; }
static int atkObject_get_role(int atkObject) { if (org.eclipse.swt.accessibility.AccessibleObject.DEBUG) java.lang.System.out.println(("-->atkObject_get_role: " + atkObject)); org.eclipse.swt.accessibility.AccessibleObject object = org.eclipse.swt.accessibility.AccessibleObject.getAccessibleObject(atkObject); if (object == null) return 0; if ((object.getAccessibleListeners().length) != 0) { org.eclipse.swt.accessibility.AccessibleControlListener[] listeners = object.getControlListeners(); org.eclipse.swt.accessibility.AccessibleControlEvent event = new org.eclipse.swt.accessibility.AccessibleControlEvent(object); event.childID = object.id; event.detail = -1; for (int i = 0; i < (listeners.length); i++) { listeners[i].getRole(event); } if ((event.detail) != (-1)) { switch (event.detail) { case ACC.ROLE_CHECKBUTTON : return ATK.ATK_ROLE_CHECK_BOX; case ACC.ROLE_CLIENT_AREA : return ATK.ATK_ROLE_DRAWING_AREA; case ACC.ROLE_COMBOBOX : return ATK.ATK_ROLE_COMBO_BOX; case ACC.ROLE_DIALOG : return ATK.ATK_ROLE_DIALOG; case ACC.ROLE_LABEL : return ATK.ATK_ROLE_LABEL; case ACC.ROLE_LINK : return ATK.ATK_ROLE_TEXT; case ACC.ROLE_LIST : return ATK.ATK_ROLE_LIST; case ACC.ROLE_LISTITEM : return ATK.ATK_ROLE_LIST_ITEM; case ACC.ROLE_MENU : return ATK.ATK_ROLE_MENU; case ACC.ROLE_MENUBAR : return ATK.ATK_ROLE_MENU_BAR; case ACC.ROLE_MENUITEM : return ATK.ATK_ROLE_MENU_ITEM; case ACC.ROLE_PROGRESSBAR : return ATK.ATK_ROLE_PROGRESS_BAR; case ACC.ROLE_PUSHBUTTON : return ATK.ATK_ROLE_PUSH_BUTTON; case ACC.ROLE_SCROLLBAR : return ATK.ATK_ROLE_SCROLL_BAR; case ACC.ROLE_SEPARATOR : return ATK.ATK_ROLE_SEPARATOR; case ACC.ROLE_SLIDER : return ATK.ATK_ROLE_SLIDER; case ACC.ROLE_TABLE : return ATK.ATK_ROLE_TABLE; case ACC.ROLE_TABLECELL : return ATK.ATK_ROLE_TABLE_CELL; case ACC.ROLE_TABLECOLUMNHEADER : return ATK.ATK_ROLE_TABLE_COLUMN_HEADER; case ACC.ROLE_TABLEROWHEADER : return ATK.ATK_ROLE_TABLE_ROW_HEADER; case ACC.ROLE_TABFOLDER : return ATK.ATK_ROLE_PAGE_TAB_LIST; case ACC.ROLE_TABITEM : return ATK.ATK_ROLE_PAGE_TAB; case ACC.ROLE_TEXT : return ATK.ATK_ROLE_TEXT; case ACC.ROLE_TOOLBAR : return ATK.ATK_ROLE_TOOL_BAR; case ACC.ROLE_TOOLTIP : return ATK.ATK_ROLE_TOOL_TIP; case ACC.ROLE_TREE : return ATK.ATK_ROLE_TREE; case ACC.ROLE_TREEITEM : return ATK.ATK_ROLE_LIST_ITEM; case ACC.ROLE_RADIOBUTTON : return ATK.ATK_ROLE_RADIO_BUTTON; case ACC.ROLE_WINDOW : return ATK.ATK_ROLE_WINDOW; } } } int superType = org.eclipse.swt.accessibility.ATK.g_type_class_peek(object.parentType); org.eclipse.swt.accessibility.AtkObjectClass objectClass = new org.eclipse.swt.accessibility.AtkObjectClass(); org.eclipse.swt.accessibility.ATK.memmove(objectClass, superType); if ((objectClass.get_role) == 0) return 0; return org.eclipse.swt.accessibility.ATK.call(objectClass.get_role, object.handle); }
int kEventControlSetFocusPart(int nextHandler, int theEvent, int userData) { int result = super.kEventControlSetFocusPart(nextHandler, theEvent, userData); if (result == (OS.noErr)) { if (!(isDisposed())) { org.eclipse.swt.widgets.Shell shell = parent.getShell(); short[] part = new short[1]; org.eclipse.swt.widgets.OS.GetEventParameter(theEvent, OS.kEventParamControlPart, OS.typeControlPartCode, null, 2, null, part); if ((part[0]) != (OS.kControlFocusNoPart)) { if ((caret) != null) caret.setFocus(); org.eclipse.swt.widgets.OS.ActivateTSMDocument(shell.imHandle); } else { if ((caret) != null) caret.killFocus(); org.eclipse.swt.widgets.OS.DeactivateTSMDocument(shell.imHandle); } } } return result; }
public void getChildAtPoint(org.eclipse.swt.custom.AccessibleControlEvent e) { org.eclipse.swt.custom.Point testPoint = toControl(e.x, e.y); int childID = ACC.CHILDID_NONE; for (int i = 0; i < (items.length); i++) { if (items[i].getBounds().contains(testPoint)) { childID = i; break; } } if (childID == (ACC.CHILDID_NONE)) { if ((showChevron) && (chevronRect.contains(testPoint))) { childID = (items.length) + (org.eclipse.swt.custom.CTabFolder.CHEVRON_CHILD_ID); } else if ((showMin) && (minRect.contains(testPoint))) { childID = (items.length) + (org.eclipse.swt.custom.CTabFolder.MINIMIZE_CHILD_ID); } else if ((showMax) && (maxRect.contains(testPoint))) { childID = (items.length) + (org.eclipse.swt.custom.CTabFolder.MAXIMIZE_CHILD_ID); } else { org.eclipse.swt.custom.Rectangle location = getBounds(); location.x = location.y = 0; location.height = (location.height) - (getClientArea().height); if (location.contains(testPoint)) { childID = ACC.CHILDID_SELF; } } } e.childID = childID; }
void click() { ignoreMouse = true; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.BM_CLICK, 0, 0); ignoreMouse = false; }
public void setSize(int width, int height) { checkWidget(); int newWidth = java.lang.Math.max(width, org.eclipse.swt.widgets.CoolItem.MINIMUM_WIDTH); itemBounds.width = requestedWidth = newWidth; if ((preferredWidth) == (-1)) preferredWidth = newWidth; itemBounds.height = height; if ((control) != null) { int controlWidth = (newWidth - (org.eclipse.swt.widgets.CoolItem.MINIMUM_WIDTH)) - (org.eclipse.swt.widgets.CoolItem.MARGIN_WIDTH); if (width < (preferredWidth)) { controlWidth -= ((org.eclipse.swt.widgets.CoolItem.CHEVRON_IMAGE_WIDTH) + (CHEVRON_HORIZONTAL_TRIM)) + (org.eclipse.swt.widgets.CoolItem.CHEVRON_LEFT_MARGIN); } int controlHeight = height - (2 * (org.eclipse.swt.widgets.CoolItem.MARGIN_HEIGHT)); control.setSize(controlWidth, controlHeight); } parent.relayout(); updateChevron(); }
void presetChooserDialog() { if (((style) & ((SWT.SAVE) | (SWT.MULTI))) == (SWT.MULTI)) { org.eclipse.swt.widgets.OS.gtk_file_chooser_set_select_multiple(handle, true); } if ((filterPath) == null) filterPath = ""; if ((fileName) == null) fileName = ""; if (((style) & (SWT.SAVE)) != 0) { if ((filterPath.length()) > 0) { if (uriMode) { byte[] buffer = org.eclipse.swt.widgets.Converter.wcsToMbcs(null, filterPath, true); org.eclipse.swt.widgets.OS.gtk_file_chooser_set_current_folder_uri(handle, buffer); } else { byte[] buffer = org.eclipse.swt.widgets.Converter.wcsToMbcs(null, ((org.eclipse.swt.widgets.FileDialog.SEPARATOR) + (filterPath)), true); int ptr = org.eclipse.swt.widgets.OS.realpath(buffer, null); org.eclipse.swt.widgets.OS.gtk_file_chooser_set_current_folder(handle, ptr); org.eclipse.swt.widgets.OS.g_free(ptr); } } if ((fileName.length()) > 0) { byte[] buffer = org.eclipse.swt.widgets.Converter.wcsToMbcs(null, fileName, true); org.eclipse.swt.widgets.OS.gtk_file_chooser_set_current_name(handle, buffer); } } else { java.lang.StringBuffer stringBuffer = new java.lang.StringBuffer(); if ((filterPath.length()) > 0) { if (!(uriMode)) { stringBuffer.append(org.eclipse.swt.widgets.FileDialog.SEPARATOR); } stringBuffer.append(filterPath); stringBuffer.append(org.eclipse.swt.widgets.FileDialog.SEPARATOR); } if ((fileName.length()) > 0) { stringBuffer.append(fileName); } byte[] buffer = org.eclipse.swt.widgets.Converter.wcsToMbcs(null, stringBuffer.toString(), true); if (uriMode) { org.eclipse.swt.widgets.OS.gtk_file_chooser_set_uri(handle, buffer); } else { int ptr = org.eclipse.swt.widgets.OS.realpath(buffer, null); if (ptr != 0) { if ((fileName.length()) > 0) { org.eclipse.swt.widgets.OS.gtk_file_chooser_set_filename(handle, ptr); } else { org.eclipse.swt.widgets.OS.gtk_file_chooser_set_current_folder(handle, ptr); } org.eclipse.swt.widgets.OS.g_free(ptr); } } } if (((style) & (SWT.SAVE)) != 0) { if ((OS.GTK_VERSION) >= (org.eclipse.swt.widgets.OS.VERSION(2, 8, 0))) { org.eclipse.swt.widgets.OS.gtk_file_chooser_set_do_overwrite_confirmation(handle, overwrite); } } if ((filterNames) == null) filterNames = new java.lang.String[0]; if ((filterExtensions) == null) filterExtensions = new java.lang.String[0]; int initialFilter = 0; for (int i = 0; i < (filterExtensions.length); i++) { if ((filterExtensions[i]) != null) { int filter = org.eclipse.swt.widgets.OS.gtk_file_filter_new(); if (((filterNames.length) > i) && ((filterNames[i]) != null)) { byte[] name = org.eclipse.swt.widgets.Converter.wcsToMbcs(null, filterNames[i], true); org.eclipse.swt.widgets.OS.gtk_file_filter_set_name(filter, name); } else { byte[] name = org.eclipse.swt.widgets.Converter.wcsToMbcs(null, filterExtensions[i], true); org.eclipse.swt.widgets.OS.gtk_file_filter_set_name(filter, name); } int start = 0; int index = filterExtensions[i].indexOf(org.eclipse.swt.widgets.FileDialog.EXTENSION_SEPARATOR); while (index != (-1)) { java.lang.String current = filterExtensions[i].substring(start, index); byte[] filterString = org.eclipse.swt.widgets.Converter.wcsToMbcs(null, current, true); org.eclipse.swt.widgets.OS.gtk_file_filter_add_pattern(filter, filterString); start = index + 1; index = filterExtensions[i].indexOf(org.eclipse.swt.widgets.FileDialog.EXTENSION_SEPARATOR, start); } java.lang.String current = filterExtensions[i].substring(start); byte[] filterString = org.eclipse.swt.widgets.Converter.wcsToMbcs(null, current, true); org.eclipse.swt.widgets.OS.gtk_file_filter_add_pattern(filter, filterString); org.eclipse.swt.widgets.OS.gtk_file_chooser_add_filter(handle, filter); if (i == (filterIndex)) { initialFilter = filter; } } } if (initialFilter != 0) { org.eclipse.swt.widgets.OS.gtk_file_chooser_set_filter(handle, initialFilter); } fullPath = null; fileNames = new java.lang.String[0]; }
public void run() { if ((Library.JAVA_VERSION) < (org.eclipse.swt.awt.Library.JAVA_VERSION(1, 4, 0))) { frame.dispatchEvent(new java.awt.event.WindowEvent(frame, java.awt.event.WindowEvent.WINDOW_ACTIVATED)); frame.dispatchEvent(new java.awt.event.FocusEvent(frame, java.awt.event.FocusEvent.FOCUS_GAINED)); } else { frame.dispatchEvent(new java.awt.event.WindowEvent(frame, java.awt.event.WindowEvent.WINDOW_ACTIVATED)); frame.dispatchEvent(new java.awt.event.WindowEvent(frame, java.awt.event.WindowEvent.WINDOW_GAINED_FOCUS)); } }
org.eclipse.swt.widgets.LRESULT WM_KEYDOWN(int wParam, int lParam) { org.eclipse.swt.widgets.LRESULT result = super.WM_KEYDOWN(wParam, lParam); if (result != null) return result; if ((focusItem) == null) return result; switch (((int) (wParam))) { case OS.VK_SPACE : case OS.VK_RETURN : org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); event.item = focusItem; sendEvent((focusItem.expanded ? SWT.Collapse : SWT.Expand), event); focusItem.expanded = !(focusItem.expanded); showItem(focusItem); return LRESULT.ZERO; case OS.VK_UP : { int focusIndex = indexOf(focusItem); if (focusIndex > 0) { focusItem.redraw(true); focusItem = items[(focusIndex - 1)]; focusItem.redraw(true); showFocus(true); return LRESULT.ZERO; } break; } case OS.VK_DOWN : { int focusIndex = indexOf(focusItem); if (focusIndex < ((itemCount) - 1)) { focusItem.redraw(true); focusItem = items[(focusIndex + 1)]; focusItem.redraw(true); showFocus(false); return LRESULT.ZERO; } break; } } return result; }
void onDispose() { if ((control) == null) return; org.eclipse.swt.dnd.COM.RevokeDragDrop(control.handle); if ((controlListener) != null) control.removeListener(SWT.Dispose, controlListener); controlListener = null; control.setData(DND.DROP_TARGET_KEY, null); transferAgents = null; control = null; org.eclipse.swt.dnd.COM.CoLockObjectExternal(iDropTarget.getAddress(), false, true); this.Release(); if ((iDataObject) != null) { iDataObject.Release(); } iDataObject = null; org.eclipse.swt.dnd.COM.CoFreeUnusedLibraries(); }
void setBackgroundPixel(int newPixel) { if ((findImageControl()) != null) return; if (newPixel == (-1)) newPixel = defaultBackground(); int oldPixel = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_GETBKCOLOR, 0, 0); if (oldPixel != newPixel) { if (oldPixel != (OS.CLR_NONE)) { org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_SETBKCOLOR, 0, newPixel); org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_SETTEXTBKCOLOR, 0, newPixel); if (((style) & (SWT.CHECK)) != 0) fixCheckboxImageListColor(true); } org.eclipse.swt.widgets.OS.InvalidateRect(handle, null, true); } }
static org.eclipse.swt.dnd.DropTarget FindDropTarget(int theWindow, int theDrag) { org.eclipse.swt.dnd.Display display = org.eclipse.swt.dnd.Display.findDisplay(java.lang.Thread.currentThread()); if ((display == null) || (display.isDisposed())) return null; org.eclipse.swt.dnd.Point mouse = new org.eclipse.swt.dnd.Point(); org.eclipse.swt.dnd.OS.GetDragMouse(theDrag, mouse, null); int[] theRoot = new int[1]; org.eclipse.swt.dnd.OS.GetRootControl(theWindow, theRoot); int[] theControl = new int[1]; org.eclipse.swt.dnd.Rect rect = new org.eclipse.swt.dnd.Rect(); org.eclipse.swt.dnd.OS.GetWindowBounds(theWindow, ((short) (OS.kWindowStructureRgn)), rect); org.eclipse.swt.dnd.CGPoint inPoint = new org.eclipse.swt.dnd.CGPoint(); inPoint.x = (mouse.h) - (rect.left); inPoint.y = (mouse.v) - (rect.top); int[] event = new int[1]; org.eclipse.swt.dnd.OS.CreateEvent(0, OS.kEventClassMouse, OS.kEventMouseDown, 0.0, 0, event); org.eclipse.swt.dnd.OS.SetEventParameter(event[0], OS.kEventParamWindowMouseLocation, OS.typeHIPoint, CGPoint.sizeof, inPoint); org.eclipse.swt.dnd.OS.HIViewGetViewForMouseEvent(theRoot[0], event[0], theControl); org.eclipse.swt.dnd.OS.ReleaseEvent(event[0]); if (!(org.eclipse.swt.dnd.OS.IsControlEnabled(theControl[0]))) return null; org.eclipse.swt.dnd.DropTarget dropTarget = null; do { org.eclipse.swt.dnd.Widget widget = display.findWidget(theControl[0]); if (widget != null) { dropTarget = ((org.eclipse.swt.dnd.DropTarget) (widget.getData(DND.DROP_TARGET_KEY))); if (dropTarget != null) break; } org.eclipse.swt.dnd.OS.GetSuperControl(theControl[0], theControl); } while ((theControl[0]) != 0 ); return dropTarget; }
public void setText(java.lang.String string) { checkWidget(); if (string == null) error(SWT.ERROR_NULL_ARGUMENT); byte[] buffer = org.eclipse.swt.widgets.Converter.wcsToMbcs(getCodePage(), string, true); boolean warnings = display.getWarnings(); display.setWarnings(false); org.eclipse.swt.widgets.OS.XmTextSetString(handle, buffer); org.eclipse.swt.widgets.OS.XmTextSetInsertionPosition(handle, 0); display.setWarnings(warnings); if ((OS.IsLinux) && (((style) & (SWT.MULTI)) != 0)) sendEvent(SWT.Modify); }
public void removeAll() { checkWidget(); parent.setItemCount(this, 0); }
org.eclipse.swt.widgets.LRESULT wmNotifyChild(int wParam, int lParam) { org.eclipse.swt.widgets.NMHDR hdr = new org.eclipse.swt.widgets.NMHDR(); org.eclipse.swt.widgets.OS.MoveMemory(hdr, lParam, NMHDR.sizeof); switch (hdr.code) { case OS.RBN_HEIGHTCHANGE : if (!(ignoreResize)) { org.eclipse.swt.widgets.Point size = getSize(); int border = getBorderWidth(); int height = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.RB_GETBARHEIGHT, 0, 0); setSize(size.x, (height + (border * 2))); } break; case OS.RBN_CHEVRONPUSHED : org.eclipse.swt.widgets.NMREBARCHEVRON lpnm = new org.eclipse.swt.widgets.NMREBARCHEVRON(); org.eclipse.swt.widgets.OS.MoveMemory(lpnm, lParam, NMREBARCHEVRON.sizeof); org.eclipse.swt.widgets.CoolItem child = items[lpnm.wID]; if (child != null) { org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); event.detail = SWT.ARROW; event.x = lpnm.left; event.y = lpnm.bottom; child.postEvent(SWT.Selection, event); } break; case OS.NM_CUSTOMDRAW : if (((COMCTL32_MAJOR) < 6) || ((background) == (-1))) break; org.eclipse.swt.widgets.NMCUSTOMDRAW nmcd = new org.eclipse.swt.widgets.NMCUSTOMDRAW(); org.eclipse.swt.widgets.OS.MoveMemory(nmcd, lParam, NMCUSTOMDRAW.sizeof); switch (nmcd.dwDrawStage) { case OS.CDDS_PREERASE : return new org.eclipse.swt.widgets.LRESULT(OS.CDRF_NOTIFYPOSTERASE); case OS.CDDS_POSTERASE : drawBackground(nmcd.hdc); break; } break; } return super.wmNotifyChild(wParam, lParam); }
void setScrollWidth(int width) { if (((hwndHeader) == 0) || ((hwndParent) == 0)) return; int left = 0; org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); org.eclipse.swt.widgets.SCROLLINFO info = new org.eclipse.swt.widgets.SCROLLINFO(); info.cbSize = SCROLLINFO.sizeof; info.fMask = (OS.SIF_RANGE) | (OS.SIF_PAGE); if (width == 0) { org.eclipse.swt.widgets.OS.GetScrollInfo(hwndParent, OS.SB_HORZ, info); info.nPage = (info.nMax) + 1; org.eclipse.swt.widgets.OS.SetScrollInfo(hwndParent, OS.SB_HORZ, info, true); org.eclipse.swt.widgets.OS.GetScrollInfo(hwndParent, OS.SB_VERT, info); info.nPage = (info.nMax) + 1; org.eclipse.swt.widgets.OS.SetScrollInfo(hwndParent, OS.SB_VERT, info, true); } else { org.eclipse.swt.widgets.OS.GetClientRect(hwndParent, rect); org.eclipse.swt.widgets.OS.GetScrollInfo(hwndParent, OS.SB_HORZ, info); info.nMax = width; info.nPage = ((rect.right) - (rect.left)) + 1; org.eclipse.swt.widgets.OS.SetScrollInfo(hwndParent, OS.SB_HORZ, info, true); info.fMask = OS.SIF_POS; org.eclipse.swt.widgets.OS.GetScrollInfo(hwndParent, OS.SB_HORZ, info); left = info.nPos; } if ((horizontalBar) != null) { horizontalBar.setIncrement(3); horizontalBar.setPageIncrement(info.nPage); } org.eclipse.swt.widgets.OS.GetClientRect(hwndParent, rect); int hHeap = org.eclipse.swt.widgets.OS.GetProcessHeap(); org.eclipse.swt.widgets.HDLAYOUT playout = new org.eclipse.swt.widgets.HDLAYOUT(); playout.prc = org.eclipse.swt.widgets.OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, RECT.sizeof); playout.pwpos = org.eclipse.swt.widgets.OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, WINDOWPOS.sizeof); org.eclipse.swt.widgets.OS.MoveMemory(playout.prc, rect, RECT.sizeof); org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_LAYOUT, 0, playout); org.eclipse.swt.widgets.WINDOWPOS pos = new org.eclipse.swt.widgets.WINDOWPOS(); org.eclipse.swt.widgets.OS.MoveMemory(pos, playout.pwpos, WINDOWPOS.sizeof); if ((playout.prc) != 0) org.eclipse.swt.widgets.OS.HeapFree(hHeap, 0, playout.prc); if ((playout.pwpos) != 0) org.eclipse.swt.widgets.OS.HeapFree(hHeap, 0, playout.pwpos); SetWindowPos(hwndHeader, OS.HWND_TOP, ((pos.x) - left), pos.y, ((pos.cx) + left), pos.cy, OS.SWP_NOACTIVATE); int w = (pos.cx) + (width == 0 ? 0 : org.eclipse.swt.widgets.OS.GetSystemMetrics(OS.SM_CXVSCROLL)); int h = ((rect.bottom) - (rect.top)) - (pos.cy); boolean oldIgnore = ignoreResize; ignoreResize = true; SetWindowPos(handle, 0, ((pos.x) - left), ((pos.y) + (pos.cy)), (w + left), h, ((OS.SWP_NOACTIVATE) | (OS.SWP_NOZORDER))); ignoreResize = oldIgnore; }
protected void create(org.eclipse.swt.printing.DeviceData deviceData) { data = ((org.eclipse.swt.printing.PrinterData) (deviceData)); org.eclipse.swt.printing.TCHAR driver = new org.eclipse.swt.printing.TCHAR(0, data.driver, true); org.eclipse.swt.printing.TCHAR device = new org.eclipse.swt.printing.TCHAR(0, data.name, true); int lpInitData = 0; byte[] devmodeData = data.otherData; int hHeap = org.eclipse.swt.printing.OS.GetProcessHeap(); if ((devmodeData != null) && ((devmodeData.length) != 0)) { lpInitData = org.eclipse.swt.printing.OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, devmodeData.length); org.eclipse.swt.printing.OS.MoveMemory(lpInitData, devmodeData, devmodeData.length); } else { org.eclipse.swt.printing.PRINTDLG pd = new org.eclipse.swt.printing.PRINTDLG(); pd.lStructSize = PRINTDLG.sizeof; pd.Flags = OS.PD_RETURNDEFAULT; if (!(org.eclipse.swt.printing.OS.PrintDlg(pd))) org.eclipse.swt.printing.SWT.error(SWT.ERROR_NO_HANDLES); if ((pd.hDevMode) != 0) { int hGlobal = pd.hDevMode; int ptr = org.eclipse.swt.printing.OS.GlobalLock(hGlobal); int size = org.eclipse.swt.printing.OS.GlobalSize(hGlobal); lpInitData = org.eclipse.swt.printing.OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, size); org.eclipse.swt.printing.OS.MoveMemory(lpInitData, ptr, size); org.eclipse.swt.printing.OS.GlobalUnlock(hGlobal); org.eclipse.swt.printing.OS.GlobalFree(pd.hDevMode); } if ((pd.hDevNames) != 0) org.eclipse.swt.printing.OS.GlobalFree(pd.hDevNames); } org.eclipse.swt.printing.DEVMODE devmode = (OS.IsUnicode) ? ((org.eclipse.swt.printing.DEVMODE) (new org.eclipse.swt.printing.DEVMODEW())) : new org.eclipse.swt.printing.DEVMODEA(); org.eclipse.swt.printing.OS.MoveMemory(devmode, lpInitData, DEVMODE.sizeof); devmode.dmFields |= OS.DM_ORIENTATION; devmode.dmOrientation = ((data.orientation) == (PrinterData.LANDSCAPE)) ? OS.DMORIENT_LANDSCAPE : OS.DMORIENT_PORTRAIT; if ((data.copyCount) != 1) { devmode.dmFields |= OS.DM_COPIES; devmode.dmCopies = ((short) (data.copyCount)); } if ((data.collate) != false) { devmode.dmFields |= OS.DM_COLLATE; devmode.dmCollate = OS.DMCOLLATE_TRUE; } if ((data.duplex) != (SWT.DEFAULT)) { devmode.dmFields |= OS.DM_DUPLEX; switch (data.duplex) { case PrinterData.DUPLEX_SHORT_EDGE : devmode.dmDuplex = OS.DMDUP_HORIZONTAL; break; case PrinterData.DUPLEX_LONG_EDGE : devmode.dmDuplex = OS.DMDUP_VERTICAL; break; default : devmode.dmDuplex = OS.DMDUP_SIMPLEX; } } org.eclipse.swt.printing.OS.MoveMemory(lpInitData, devmode, DEVMODE.sizeof); handle = org.eclipse.swt.printing.OS.CreateDC(driver, device, 0, lpInitData); if (lpInitData != 0) org.eclipse.swt.printing.OS.HeapFree(hHeap, 0, lpInitData); if ((handle) == 0) org.eclipse.swt.printing.SWT.error(SWT.ERROR_NO_HANDLES); }
public void open() { checkWidget(); bringToTop(false); setVisible(true); if (isDisposed()) return; if (active) { if ((!(restoreFocus())) && (!(traverseGroup(true)))) setFocus(); } }
public void createButtonSelected(org.eclipse.swt.examples.controlexample.SelectionEvent event) { if ((shellCount) >= (shells.length)) { org.eclipse.swt.examples.controlexample.Shell[] newShells = new org.eclipse.swt.examples.controlexample.Shell[(shells.length) + 4]; java.lang.System.arraycopy(shells, 0, newShells, 0, shells.length); shells = newShells; } int style = SWT.NONE; if (noTrimButton.getSelection()) style |= SWT.NO_TRIM; if (closeButton.getSelection()) style |= SWT.CLOSE; if (titleButton.getSelection()) style |= SWT.TITLE; if (minButton.getSelection()) style |= SWT.MIN; if (maxButton.getSelection()) style |= SWT.MAX; if (borderButton.getSelection()) style |= SWT.BORDER; if (resizeButton.getSelection()) style |= SWT.RESIZE; if (onTopButton.getSelection()) style |= SWT.ON_TOP; if (toolButton.getSelection()) style |= SWT.TOOL; if (modelessButton.getSelection()) style |= SWT.MODELESS; if (primaryModalButton.getSelection()) style |= SWT.PRIMARY_MODAL; if (applicationModalButton.getSelection()) style |= SWT.APPLICATION_MODAL; if (systemModalButton.getSelection()) style |= SWT.SYSTEM_MODAL; if (noParentButton.getSelection()) { shells[shellCount] = new org.eclipse.swt.examples.controlexample.Shell(style); } else { shells[shellCount] = new org.eclipse.swt.examples.controlexample.Shell(shell, style); } final org.eclipse.swt.examples.controlexample.Shell currentShell = shells[shellCount]; org.eclipse.swt.examples.controlexample.Button button = new org.eclipse.swt.examples.controlexample.Button(currentShell, SWT.PUSH); button.setBounds(20, 20, 120, 30); button.setText(org.eclipse.swt.examples.controlexample.ControlExample.getResourceString("Button")); org.eclipse.swt.examples.controlexample.Button close = new org.eclipse.swt.examples.controlexample.Button(currentShell, SWT.PUSH); close.setBounds(160, 20, 120, 30); close.setText(org.eclipse.swt.examples.controlexample.ControlExample.getResourceString("Close")); close.addListener(SWT.Selection, new org.eclipse.swt.examples.controlexample.Listener() { public void handleEvent(org.eclipse.swt.examples.controlexample.Event event) { currentShell.dispose(); } }); currentShell.setSize(300, 100); currentShell.setText(((org.eclipse.swt.examples.controlexample.ControlExample.getResourceString("Title")) + (shellCount))); if (imageButton.getSelection()) currentShell.setImage(instance.images[ControlExample.ciTarget]); if (backgroundImageButton.getSelection()) currentShell.setBackgroundImage(instance.images[ControlExample.ciBackground]); hookListeners(currentShell); currentShell.open(); (shellCount)++; }
boolean dragDetect(int x, int y, boolean filter, boolean[] consume) { boolean quit = false; boolean dragging = false; while (!quit) { int eventPtr = 0; long timeout = (java.lang.System.currentTimeMillis()) + 500; while ((java.lang.System.currentTimeMillis()) < timeout) { eventPtr = org.eclipse.swt.widgets.OS.gdk_event_get(); if (eventPtr != 0) { break; } else { try { java.lang.Thread.sleep(50); } catch (java.lang.Exception ex) { } } } if (eventPtr == 0) return false; switch (org.eclipse.swt.widgets.OS.GDK_EVENT_TYPE(eventPtr)) { case OS.GDK_MOTION_NOTIFY : { org.eclipse.swt.widgets.GdkEventMotion gdkMotionEvent = new org.eclipse.swt.widgets.GdkEventMotion(); org.eclipse.swt.widgets.OS.memmove(gdkMotionEvent, eventPtr, GdkEventMotion.sizeof); if (((gdkMotionEvent.state) & (OS.GDK_BUTTON1_MASK)) != 0) { if (org.eclipse.swt.widgets.OS.gtk_drag_check_threshold(handle, x, y, ((int) (gdkMotionEvent.x)), ((int) (gdkMotionEvent.y)))) { dragging = true; quit = true; } } else { quit = true; } int[] newX = new int[1]; int[] newY = new int[1]; org.eclipse.swt.widgets.OS.gdk_window_get_pointer(gdkMotionEvent.window, newX, newY, null); break; } case OS.GDK_KEY_PRESS : case OS.GDK_KEY_RELEASE : { org.eclipse.swt.widgets.GdkEventKey gdkEvent = new org.eclipse.swt.widgets.GdkEventKey(); org.eclipse.swt.widgets.OS.memmove(gdkEvent, eventPtr, GdkEventKey.sizeof); if ((gdkEvent.keyval) == (OS.GDK_Escape)) quit = true; break; } case OS.GDK_BUTTON_RELEASE : case OS.GDK_BUTTON_PRESS : case OS.GDK_2BUTTON_PRESS : case OS.GDK_3BUTTON_PRESS : { org.eclipse.swt.widgets.OS.gdk_event_put(eventPtr); quit = true; break; } default : org.eclipse.swt.widgets.OS.gtk_main_do_event(eventPtr); } org.eclipse.swt.widgets.OS.gdk_event_free(eventPtr); } return dragging; }
public boolean setUrl(java.lang.String url) { checkWidget(); if (url == null) org.eclipse.swt.browser.SWT.error(SWT.ERROR_NULL_ARGUMENT); java.lang.StringBuffer buffer = new java.lang.StringBuffer(); if ((url.indexOf('/')) == 0) buffer.append("file://"); else if ((url.indexOf(':')) == (-1)) buffer.append("http://"); for (int i = 0; i < (url.length()); i++) { char c = url.charAt(i); if (c == ' ') buffer.append("%20"); else buffer.append(c); } int length = buffer.length(); char[] chars = new char[length]; buffer.getChars(0, length, chars, 0); int sHandle = org.eclipse.swt.browser.OS.CFStringCreateWithCharacters(0, chars, length); int inURL = org.eclipse.swt.browser.WebKit.objc_msgSend(WebKit.C_NSURL, WebKit.S_URLWithString, sHandle); org.eclipse.swt.browser.OS.CFRelease(sHandle); int request = org.eclipse.swt.browser.WebKit.objc_msgSend(WebKit.C_NSURLRequest, WebKit.S_requestWithURL, inURL); int webView = org.eclipse.swt.browser.WebKit.HIWebViewGetWebView(webViewHandle); int mainFrame = org.eclipse.swt.browser.WebKit.objc_msgSend(webView, WebKit.S_mainFrame); org.eclipse.swt.browser.WebKit.objc_msgSend(mainFrame, WebKit.S_loadRequest, request); return true; }
public void pack() { checkWidget(); int width = 0; if ((buttonHandle) != 0) { org.eclipse.swt.widgets.GtkRequisition requisition = new org.eclipse.swt.widgets.GtkRequisition(); org.eclipse.swt.widgets.OS.gtk_widget_size_request(buttonHandle, requisition); width = requisition.width; } if (((parent.style) & (SWT.VIRTUAL)) != 0) { } else { int iter = org.eclipse.swt.widgets.OS.g_malloc(org.eclipse.swt.widgets.OS.GtkTreeIter_sizeof()); if (org.eclipse.swt.widgets.OS.gtk_tree_model_get_iter_first(parent.modelHandle, iter)) { int renderers = org.eclipse.swt.widgets.OS.gtk_tree_view_column_get_cell_renderers(handle); do { width = java.lang.Math.max(width, parent.calculateWidth(handle, iter, renderers)); } while (org.eclipse.swt.widgets.OS.gtk_tree_model_iter_next(parent.modelHandle, iter) ); if (renderers != 0) org.eclipse.swt.widgets.OS.g_list_free(renderers); } org.eclipse.swt.widgets.OS.g_free(iter); } setWidth(width); }
public void selectAll() { checkWidget(); if (((style) & (SWT.SINGLE)) != 0) return; org.eclipse.swt.widgets.TreeItem[] items = getAllItems(); selectedItems = new org.eclipse.swt.widgets.TreeItem[items.length]; java.lang.System.arraycopy(items, 0, selectedItems, 0, items.length); redraw(); }
org.eclipse.swt.widgets.LRESULT CDDS_POSTPAINT(org.eclipse.swt.widgets.NMTVCUSTOMDRAW nmcd, int wParam, int lParam) { if (ignoreCustomDraw) return null; if (org.eclipse.swt.widgets.OS.IsWindowVisible(handle)) { if (((OS.COMCTL32_MAJOR) >= 6) && (org.eclipse.swt.widgets.OS.IsAppThemed())) { if (((sortColumn) != null) && ((sortDirection) != (SWT.NONE))) { if ((findImageControl()) == null) { int index = indexOf(sortColumn); if (index != (-1)) { int top = nmcd.top; int hItem = 0; if ((!(OS.IsWinCE)) && ((OS.WIN32_VERSION) >= (org.eclipse.swt.widgets.OS.VERSION(6, 0)))) { hItem = getBottomItem(); } else { hItem = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETNEXTITEM, OS.TVGN_LASTVISIBLE, 0); } if (hItem != 0) { org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); rect.left = hItem; if ((org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETITEMRECT, 0, rect)) != 0) { top = rect.bottom; } } org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); org.eclipse.swt.widgets.OS.SetRect(rect, nmcd.left, top, nmcd.right, nmcd.bottom); org.eclipse.swt.widgets.RECT headerRect = new org.eclipse.swt.widgets.RECT(); org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEMRECT, index, headerRect); rect.left = headerRect.left; rect.right = headerRect.right; fillBackground(nmcd.hdc, getSortColumnPixel(), rect); } } } } if (linesVisible) { int hDC = nmcd.hdc; if ((hwndHeader) != 0) { int x = 0; org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); org.eclipse.swt.widgets.HDITEM hdItem = new org.eclipse.swt.widgets.HDITEM(); hdItem.mask = OS.HDI_WIDTH; int count = org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0); for (int i = 0; i < count; i++) { int index = org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_ORDERTOINDEX, i, 0); org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEM, index, hdItem); org.eclipse.swt.widgets.OS.SetRect(rect, x, nmcd.top, (x + (hdItem.cxy)), nmcd.bottom); org.eclipse.swt.widgets.OS.DrawEdge(hDC, rect, OS.BDR_SUNKENINNER, OS.BF_RIGHT); x += hdItem.cxy; } } int height = 0; org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); int hItem = 0; if ((!(OS.IsWinCE)) && ((OS.WIN32_VERSION) >= (org.eclipse.swt.widgets.OS.VERSION(6, 0)))) { hItem = getBottomItem(); } else { hItem = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETNEXTITEM, OS.TVGN_LASTVISIBLE, 0); } if (hItem != 0) { rect.left = hItem; if ((org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETITEMRECT, 0, rect)) != 0) { height = (rect.bottom) - (rect.top); } } if (height == 0) { height = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETITEMHEIGHT, 0, 0); org.eclipse.swt.widgets.OS.GetClientRect(handle, rect); org.eclipse.swt.widgets.OS.SetRect(rect, rect.left, rect.top, rect.right, ((rect.top) + height)); org.eclipse.swt.widgets.OS.DrawEdge(hDC, rect, OS.BDR_SUNKENINNER, OS.BF_BOTTOM); } while ((rect.bottom) < (nmcd.bottom)) { int top = (rect.top) + height; org.eclipse.swt.widgets.OS.SetRect(rect, rect.left, top, rect.right, (top + height)); org.eclipse.swt.widgets.OS.DrawEdge(hDC, rect, OS.BDR_SUNKENINNER, OS.BF_BOTTOM); } } } return new org.eclipse.swt.widgets.LRESULT(OS.CDRF_DODEFAULT); }
int kEventControlTrack(int nextHandler, int theEvent, int userData) { org.eclipse.swt.widgets.Display display = this.display; display.runDeferredEvents(); if (isDisposed()) return org.eclipse.swt.internal.carbon.OS.noErr; display.lastState = org.eclipse.swt.internal.carbon.OS.GetCurrentEventButtonState(); display.lastModifiers = org.eclipse.swt.internal.carbon.OS.GetCurrentEventKeyModifiers(); display.grabControl = this; int result = super.kEventControlTrack(nextHandler, theEvent, userData); display.grabControl = null; if (isDisposed()) return org.eclipse.swt.internal.carbon.OS.noErr; sendTrackEvents(); return result; }
public java.lang.String open() { java.lang.String directoryPath = null; org.eclipse.swt.widgets.NSOpenPanel panel = org.eclipse.swt.widgets.NSOpenPanel.openPanel(); org.eclipse.swt.widgets.OS.objc_msgSend(panel.id, OS.sel_setShowsHiddenFiles_, true); panel.setCanCreateDirectories(true); panel.setAllowsMultipleSelection((((style) & (SWT.MULTI)) != 0)); panel.setTitle(org.eclipse.swt.widgets.NSString.stringWith(((title) != null ? title : ""))); panel.setMessage(org.eclipse.swt.widgets.NSString.stringWith(((message) != null ? message : ""))); panel.setCanChooseFiles(false); panel.setCanChooseDirectories(true); org.eclipse.swt.widgets.NSApplication application = org.eclipse.swt.widgets.NSApplication.sharedApplication(); if (((parent) != null) && (((style) & (SWT.SHEET)) != 0)) { application.beginSheet(panel, parent.window, null, 0, 0); } org.eclipse.swt.widgets.NSString dir = ((filterPath) != null) ? org.eclipse.swt.widgets.NSString.stringWith(filterPath) : null; int response = panel.runModalForDirectory(dir, null); if (((parent) != null) && (((style) & (SWT.SHEET)) != 0)) { application.endSheet(panel, 0); } if (response == (OS.NSFileHandlingPanelOKButton)) { org.eclipse.swt.widgets.NSString filename = panel.filename(); directoryPath = filterPath = filename.getString(); } return directoryPath; }
void setZOrder(org.eclipse.swt.widgets.Control control, boolean above) { org.eclipse.swt.widgets.NSView otherView = (control == null) ? null : control.topView(); view.retain(); view.removeFromSuperview(); parent.contentView().addSubview_positioned_relativeTo_(view, (above ? OS.NSWindowAbove : OS.NSWindowBelow), otherView); view.release(); }
public void handleEvent(org.eclipse.swt.custom.Event event) { switch (event.type) { case SWT.Dispose : onDispose(); break; case SWT.DragDetect : onDragDetect(event); break; case SWT.FocusIn : onFocus(event); break; case SWT.FocusOut : onFocus(event); break; case SWT.MouseDoubleClick : onMouseDoubleClick(event); break; case SWT.MouseDown : onMouse(event); break; case SWT.MouseExit : onMouse(event); break; case SWT.MouseHover : onMouseHover(event); break; case SWT.MouseMove : onMouse(event); break; case SWT.MouseUp : onMouse(event); break; case SWT.Paint : onPaint(event); break; case SWT.Resize : onResize(); break; case SWT.Traverse : onTraverse(event); break; } }
org.eclipse.swt.graphics.RECT drawRunTextGDIP(int graphics, org.eclipse.swt.graphics.TextLayout.StyleItem run, org.eclipse.swt.graphics.RECT rect, int gdipFont, int baseline, int color, int selectionColor, int selectionStart, int selectionEnd, int alpha) { int end = ((run.start) + (run.length)) - 1; boolean hasSelection = ((selectionStart <= selectionEnd) && (selectionStart != (-1))) && (selectionEnd != (-1)); boolean fullSelection = (hasSelection && (selectionStart <= (run.start))) && (selectionEnd >= end); boolean partialSelection = (hasSelection && (!fullSelection)) && (!((selectionStart > end) || ((run.start) > selectionEnd))); int drawY = (rect.top) + baseline; if (((run.style) != null) && ((run.style.rise) != 0)) drawY -= run.style.rise; int drawX = rect.left; int brush = color; if (fullSelection) { brush = selectionColor; } else { if (((run.style) != null) && ((run.style.foreground) != null)) { brush = createGdipBrush(run.style.foreground, alpha); } } int gstate = 0; org.eclipse.swt.graphics.Rect gdipRect = null; if (partialSelection) { gdipRect = new org.eclipse.swt.graphics.Rect(); getPartialSelection(run, selectionStart, selectionEnd, rect); gdipRect.X = rect.left; gdipRect.Y = rect.top; gdipRect.Width = (rect.right) - (rect.left); gdipRect.Height = (rect.bottom) - (rect.top); gstate = org.eclipse.swt.graphics.Gdip.Graphics_Save(graphics); org.eclipse.swt.graphics.Gdip.Graphics_SetClip(graphics, gdipRect, Gdip.CombineModeExclude); } int gstateMirrored = 0; boolean isMirrored = ((orientation) & (SWT.RIGHT_TO_LEFT)) != 0; if (isMirrored) { switch (org.eclipse.swt.graphics.Gdip.Brush_GetType(brush)) { case Gdip.BrushTypeLinearGradient : org.eclipse.swt.graphics.Gdip.LinearGradientBrush_ScaleTransform(brush, (-1), 1, Gdip.MatrixOrderPrepend); org.eclipse.swt.graphics.Gdip.LinearGradientBrush_TranslateTransform(brush, (((-2) * drawX) - (run.width)), 0, Gdip.MatrixOrderPrepend); break; case Gdip.BrushTypeTextureFill : org.eclipse.swt.graphics.Gdip.TextureBrush_ScaleTransform(brush, (-1), 1, Gdip.MatrixOrderPrepend); org.eclipse.swt.graphics.Gdip.TextureBrush_TranslateTransform(brush, (((-2) * drawX) - (run.width)), 0, Gdip.MatrixOrderPrepend); break; } gstateMirrored = org.eclipse.swt.graphics.Gdip.Graphics_Save(graphics); org.eclipse.swt.graphics.Gdip.Graphics_ScaleTransform(graphics, (-1), 1, Gdip.MatrixOrderPrepend); org.eclipse.swt.graphics.Gdip.Graphics_TranslateTransform(graphics, (((-2) * drawX) - (run.width)), 0, Gdip.MatrixOrderPrepend); } int[] advances = new int[run.glyphCount]; float[] points = new float[(run.glyphCount) * 2]; org.eclipse.swt.graphics.OS.memmove(advances, ((run.justify) != 0 ? run.justify : run.advances), ((run.glyphCount) * 4)); int glyphX = drawX; for (int h = 0, j = 0; h < (advances.length); h++) { points[(j++)] = glyphX; points[(j++)] = drawY; glyphX += advances[h]; } org.eclipse.swt.graphics.Gdip.Graphics_DrawDriverString(graphics, run.glyphs, run.glyphCount, gdipFont, brush, points, 0, 0); if (partialSelection) { if (isMirrored) { org.eclipse.swt.graphics.Gdip.Graphics_Restore(graphics, gstateMirrored); } org.eclipse.swt.graphics.Gdip.Graphics_Restore(graphics, gstate); gstate = org.eclipse.swt.graphics.Gdip.Graphics_Save(graphics); org.eclipse.swt.graphics.Gdip.Graphics_SetClip(graphics, gdipRect, Gdip.CombineModeIntersect); if (isMirrored) { gstateMirrored = org.eclipse.swt.graphics.Gdip.Graphics_Save(graphics); org.eclipse.swt.graphics.Gdip.Graphics_ScaleTransform(graphics, (-1), 1, Gdip.MatrixOrderPrepend); org.eclipse.swt.graphics.Gdip.Graphics_TranslateTransform(graphics, (((-2) * drawX) - (run.width)), 0, Gdip.MatrixOrderPrepend); } org.eclipse.swt.graphics.Gdip.Graphics_DrawDriverString(graphics, run.glyphs, run.glyphCount, gdipFont, selectionColor, points, 0, 0); org.eclipse.swt.graphics.Gdip.Graphics_Restore(graphics, gstate); } if (isMirrored) { switch (org.eclipse.swt.graphics.Gdip.Brush_GetType(brush)) { case Gdip.BrushTypeLinearGradient : org.eclipse.swt.graphics.Gdip.LinearGradientBrush_ResetTransform(brush); break; case Gdip.BrushTypeTextureFill : org.eclipse.swt.graphics.Gdip.TextureBrush_ResetTransform(brush); break; } org.eclipse.swt.graphics.Gdip.Graphics_Restore(graphics, gstateMirrored); } if ((brush != selectionColor) && (brush != color)) org.eclipse.swt.graphics.Gdip.SolidBrush_delete(brush); return fullSelection || partialSelection ? rect : null; }
int kEventTextInputUnicodeForKeyEvent(int nextHandler, int theEvent, int userData) { int[] keyboardEvent = new int[1]; org.eclipse.swt.internal.carbon.OS.GetEventParameter(theEvent, OS.kEventParamTextInputSendKeyboardEvent, OS.typeEventRef, null, ((keyboardEvent.length) * 4), null, keyboardEvent); int[] keyCode = new int[1]; org.eclipse.swt.internal.carbon.OS.GetEventParameter(keyboardEvent[0], OS.kEventParamKeyCode, OS.typeUInt32, null, ((keyCode.length) * 4), null, keyCode); boolean[] consume = new boolean[1]; if (translateTraversal(keyCode[0], keyboardEvent[0], consume)) return org.eclipse.swt.internal.carbon.OS.noErr; if (isDisposed()) return org.eclipse.swt.internal.carbon.OS.noErr; if ((keyCode[0]) == 114) { org.eclipse.swt.widgets.Control control = this; while (control != null) { if (control.hooks(SWT.Help)) { control.postEvent(SWT.Help); break; } control = control.parent; } } int result = kEventUnicodeKeyPressed(nextHandler, theEvent, userData); if ((result == (org.eclipse.swt.internal.carbon.OS.noErr)) || (consume[0])) return org.eclipse.swt.internal.carbon.OS.noErr; if ((!(isDisposed())) && (!(hasFocus()))) { org.eclipse.swt.internal.carbon.OS.SendEventToEventTarget(theEvent, org.eclipse.swt.internal.carbon.OS.GetControlEventTarget(handle)); return org.eclipse.swt.internal.carbon.OS.noErr; } return result; }
public void setMinimized(boolean minimized) { checkWidget(); if (OS.IsWinCE) return; swFlags = (minimized) ? OS.SW_SHOWMINNOACTIVE : OS.SW_RESTORE; if (!(org.eclipse.swt.widgets.OS.IsWindowVisible(handle))) return; if (minimized == (org.eclipse.swt.widgets.OS.IsIconic(handle))) return; int flags = swFlags; if ((flags == (OS.SW_SHOWMINNOACTIVE)) && ((handle) == (org.eclipse.swt.widgets.OS.GetActiveWindow()))) { flags = OS.SW_MINIMIZE; } org.eclipse.swt.widgets.OS.ShowWindow(handle, flags); org.eclipse.swt.widgets.OS.UpdateWindow(handle); }
void destroyItem(org.eclipse.swt.widgets.TableColumn column) { int index = 0; while (index < (columnCount)) { if ((columns[index]) == column) break; index++; } int oldColumn = ((int) (org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_GETSELECTEDCOLUMN, 0, 0))); if (oldColumn == index) { org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_SETSELECTEDCOLUMN, (-1), 0); } else { if (oldColumn > index) { org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_SETSELECTEDCOLUMN, (oldColumn - 1), 0); } } int orderIndex = 0; int[] oldOrder = new int[columnCount]; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_GETCOLUMNORDERARRAY, columnCount, oldOrder); while (orderIndex < (columnCount)) { if ((oldOrder[orderIndex]) == index) break; orderIndex++; } ignoreColumnResize = true; boolean first = false; if (index == 0) { first = true; setRedraw(false); if ((columnCount) > 1) { index = 1; int cchTextMax = 1024; int hHeap = org.eclipse.swt.widgets.OS.GetProcessHeap(); int byteCount = cchTextMax * (TCHAR.sizeof); int pszText = org.eclipse.swt.widgets.OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, byteCount); org.eclipse.swt.widgets.LVCOLUMN lvColumn = new org.eclipse.swt.widgets.LVCOLUMN(); lvColumn.mask = (((OS.LVCF_TEXT) | (OS.LVCF_IMAGE)) | (OS.LVCF_WIDTH)) | (OS.LVCF_FMT); lvColumn.pszText = pszText; lvColumn.cchTextMax = cchTextMax; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_GETCOLUMN, 1, lvColumn); lvColumn.fmt &= ~((OS.LVCFMT_CENTER) | (OS.LVCFMT_RIGHT)); lvColumn.fmt |= OS.LVCFMT_LEFT; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_SETCOLUMN, 0, lvColumn); if (pszText != 0) org.eclipse.swt.widgets.OS.HeapFree(hHeap, 0, pszText); } else { int hHeap = org.eclipse.swt.widgets.OS.GetProcessHeap(); int pszText = org.eclipse.swt.widgets.OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, TCHAR.sizeof); org.eclipse.swt.widgets.LVCOLUMN lvColumn = new org.eclipse.swt.widgets.LVCOLUMN(); lvColumn.mask = (((OS.LVCF_TEXT) | (OS.LVCF_IMAGE)) | (OS.LVCF_WIDTH)) | (OS.LVCF_FMT); lvColumn.pszText = pszText; lvColumn.iImage = OS.I_IMAGENONE; lvColumn.fmt = OS.LVCFMT_LEFT; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_SETCOLUMN, 0, lvColumn); if (pszText != 0) org.eclipse.swt.widgets.OS.HeapFree(hHeap, 0, pszText); if ((OS.COMCTL32_MAJOR) >= 6) { org.eclipse.swt.widgets.HDITEM hdItem = new org.eclipse.swt.widgets.HDITEM(); hdItem.mask = OS.HDI_FORMAT; hdItem.fmt = OS.HDF_LEFT; int hwndHeader = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_GETHEADER, 0, 0); org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_SETITEM, index, hdItem); } } setRedraw(true); if (((style) & (SWT.VIRTUAL)) == 0) { org.eclipse.swt.widgets.LVITEM lvItem = new org.eclipse.swt.widgets.LVITEM(); lvItem.mask = (OS.LVIF_TEXT) | (OS.LVIF_IMAGE); lvItem.pszText = OS.LPSTR_TEXTCALLBACK; lvItem.iImage = OS.I_IMAGECALLBACK; int itemCount = ((int) (org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_GETITEMCOUNT, 0, 0))); for (int i = 0; i < itemCount; i++) { lvItem.iItem = i; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_SETITEM, 0, lvItem); } } } if ((columnCount) > 1) { if ((org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_DELETECOLUMN, index, 0)) == 0) { error(SWT.ERROR_ITEM_NOT_REMOVED); } } if (first) index = 0; java.lang.System.arraycopy(columns, (index + 1), columns, index, ((--(columnCount)) - index)); columns[columnCount] = null; int itemCount = ((int) (org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_GETITEMCOUNT, 0, 0))); for (int i = 0; i < itemCount; i++) { org.eclipse.swt.widgets.TableItem item = items[i]; if (item != null) { if ((columnCount) == 0) { item.strings = null; item.images = null; item.cellBackground = null; item.cellForeground = null; item.cellFont = null; } else { if ((item.strings) != null) { java.lang.String[] strings = item.strings; if (index == 0) { item.text = ((strings[1]) != null) ? strings[1] : ""; } java.lang.String[] temp = new java.lang.String[columnCount]; java.lang.System.arraycopy(strings, 0, temp, 0, index); java.lang.System.arraycopy(strings, (index + 1), temp, index, ((columnCount) - index)); item.strings = temp; } else { if (index == 0) item.text = ""; } if ((item.images) != null) { org.eclipse.swt.widgets.Image[] images = item.images; if (index == 0) item.image = images[1]; org.eclipse.swt.widgets.Image[] temp = new org.eclipse.swt.widgets.Image[columnCount]; java.lang.System.arraycopy(images, 0, temp, 0, index); java.lang.System.arraycopy(images, (index + 1), temp, index, ((columnCount) - index)); item.images = temp; } else { if (index == 0) item.image = null; } if ((item.cellBackground) != null) { int[] cellBackground = item.cellBackground; int[] temp = new int[columnCount]; java.lang.System.arraycopy(cellBackground, 0, temp, 0, index); java.lang.System.arraycopy(cellBackground, (index + 1), temp, index, ((columnCount) - index)); item.cellBackground = temp; } if ((item.cellForeground) != null) { int[] cellForeground = item.cellForeground; int[] temp = new int[columnCount]; java.lang.System.arraycopy(cellForeground, 0, temp, 0, index); java.lang.System.arraycopy(cellForeground, (index + 1), temp, index, ((columnCount) - index)); item.cellForeground = temp; } if ((item.cellFont) != null) { org.eclipse.swt.widgets.Font[] cellFont = item.cellFont; org.eclipse.swt.widgets.Font[] temp = new org.eclipse.swt.widgets.Font[columnCount]; java.lang.System.arraycopy(cellFont, 0, temp, 0, index); java.lang.System.arraycopy(cellFont, (index + 1), temp, index, ((columnCount) - index)); item.cellFont = temp; } } } } if ((columnCount) == 0) setScrollWidth(null, true); updateMoveable(); ignoreColumnResize = false; if ((columnCount) != 0) { int count = 0; int oldIndex = oldOrder[orderIndex]; int[] newOrder = new int[columnCount]; for (int i = 0; i < (oldOrder.length); i++) { if ((oldOrder[i]) != oldIndex) { int newIndex = ((oldOrder[i]) <= oldIndex) ? oldOrder[i] : (oldOrder[i]) - 1; newOrder[(count++)] = newIndex; } } org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_GETCOLUMNORDERARRAY, columnCount, oldOrder); int j = 0; while (j < (newOrder.length)) { if ((oldOrder[j]) != (newOrder[j])) break; j++; } if (j != (newOrder.length)) { org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_SETCOLUMNORDERARRAY, newOrder.length, newOrder); org.eclipse.swt.widgets.OS.InvalidateRect(handle, null, true); } org.eclipse.swt.widgets.TableColumn[] newColumns = new org.eclipse.swt.widgets.TableColumn[(columnCount) - orderIndex]; for (int i = orderIndex; i < (newOrder.length); i++) { newColumns[(i - orderIndex)] = columns[newOrder[i]]; newColumns[(i - orderIndex)].updateToolTip(newOrder[i]); } for (int i = 0; i < (newColumns.length); i++) { if (!(newColumns[i].isDisposed())) { newColumns[i].sendEvent(SWT.Move); } } } if ((headerToolTipHandle) != 0) { org.eclipse.swt.widgets.TOOLINFO lpti = new org.eclipse.swt.widgets.TOOLINFO(); lpti.cbSize = TOOLINFO.sizeof; lpti.uId = column.id; lpti.hwnd = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_GETHEADER, 0, 0); org.eclipse.swt.widgets.OS.SendMessage(headerToolTipHandle, OS.TTM_DELTOOL, 0, lpti); } }
void _setVisible(boolean visible) { if (visible == (gtk_widget_get_mapped(handle))) return; if (visible) { sendEvent(SWT.Show); if ((getItemCount()) != 0) { if ((OS.GTK_VERSION) >= (org.eclipse.swt.widgets.OS.VERSION(2, 8, 0))) { if (((parent._getShell().style) & (SWT.ON_TOP)) != 0) { org.eclipse.swt.widgets.OS.gtk_menu_shell_set_take_focus(handle, false); } } long address = (hasLocation) ? display.menuPositionProc : 0; hasLocation = false; long data = 0; if ((OS.GTK_VERSION) >= (org.eclipse.swt.widgets.OS.VERSION(2, 10, 0))) { org.eclipse.swt.widgets.TrayItem item = display.currentTrayItem; if ((item != null) && (!(item.isDisposed()))) { data = item.handle; address = org.eclipse.swt.widgets.OS.gtk_status_icon_position_menu_func(); } } org.eclipse.swt.widgets.OS.gtk_menu_popup(handle, 0, 0, address, data, 0, display.getLastEventTime()); } else { sendEvent(SWT.Hide); } } else { org.eclipse.swt.widgets.OS.gtk_menu_popdown(handle); } }
int setBounds(int x, int y, int width, int height, boolean move, boolean resize) { if ((OS.GTK_VERSION) >= (org.eclipse.swt.widgets.OS.VERSION(2, 4, 0))) { return super.setBounds(x, y, width, height, move, resize); } int newHeight = (resize) ? getTextHeight() : height; return super.setBounds(x, y, width, newHeight, move, resize); }
static void loadAdditionalLibraries(java.lang.String mozillaPath, boolean isGlued) { java.lang.String libName = null; if (!isGlued) { if ((org.eclipse.swt.browser.MozillaDelegate.IsXULRunner24) == null) { org.eclipse.swt.browser.MozillaDelegate.IsXULRunner24 = (new java.io.File(mozillaPath, org.eclipse.swt.browser.MozillaDelegate.LIB_XPCOM).exists()) ? java.lang.Boolean.FALSE : java.lang.Boolean.TRUE; } if (org.eclipse.swt.browser.MozillaDelegate.IsXULRunner24.booleanValue()) { libName = org.eclipse.swt.browser.MozillaDelegate.LIB_FIX_XULRUNNER24; } } else { if (nsISupports.IsXULRunner10) { libName = org.eclipse.swt.browser.MozillaDelegate.LIB_FIX_XULRUNNER10; } } if (libName == null) return; java.io.File libsDir = new java.io.File((((((org.eclipse.swt.browser.MozillaDelegate.getProfilePath()) + "/libs/") + (org.eclipse.swt.browser.Mozilla.OS())) + '/') + (org.eclipse.swt.browser.Mozilla.Arch()))); java.io.File file = new java.io.File(libsDir, libName); if (!(file.exists())) { java.io.InputStream is = org.eclipse.swt.browser.Library.class.getResourceAsStream(('/' + libName)); if (is != null) { if (!(libsDir.exists())) { libsDir.mkdirs(); } int read; byte[] buffer = new byte[4096]; try { java.io.FileOutputStream os = new java.io.FileOutputStream(file); while ((read = is.read(buffer)) != (-1)) { os.write(buffer, 0, read); } os.close(); is.close(); } catch (java.io.FileNotFoundException e) { } catch (java.io.IOException e) { } } } if (file.exists()) { byte[] bytes = org.eclipse.swt.browser.Converter.wcsToMbcs(null, file.getAbsolutePath(), true); org.eclipse.swt.browser.OS.dlopen(bytes, ((OS.RTLD_NOW) | (OS.RTLD_GLOBAL))); } }
public void run() { if ((isDisposed()) || ((html) == null)) return; int charCount = html.length(); char[] chars = new char[charCount]; html.getChars(0, charCount, chars, 0); html = null; int byteCount = org.eclipse.swt.browser.OS.WideCharToMultiByte(OS.CP_UTF8, 0, chars, charCount, null, 0, null, null); byte[] UTF8BOM = new byte[]{ ((byte) (239)), ((byte) (187)), ((byte) (191)) }; int hGlobal = org.eclipse.swt.browser.OS.GlobalAlloc(OS.GMEM_FIXED, ((UTF8BOM.length) + byteCount)); if (hGlobal != 0) { org.eclipse.swt.browser.OS.MoveMemory(hGlobal, UTF8BOM, UTF8BOM.length); org.eclipse.swt.browser.OS.WideCharToMultiByte(OS.CP_UTF8, 0, chars, charCount, (hGlobal + (UTF8BOM.length)), byteCount, null, null); int[] ppstm = new int[1]; if ((org.eclipse.swt.browser.OS.CreateStreamOnHGlobal(hGlobal, true, ppstm)) == (OS.S_OK)) { int[] rgdispid = auto.getIDsOfNames(new java.lang.String[]{ "Document" }); org.eclipse.swt.browser.Variant pVarResult = auto.getProperty(rgdispid[0]); org.eclipse.swt.browser.IDispatch dispatchDocument = pVarResult.getDispatch(); int[] ppvObject = new int[1]; int result = dispatchDocument.QueryInterface(COM.IIDIPersistStreamInit, ppvObject); if (result == (OS.S_OK)) { org.eclipse.swt.browser.IPersistStreamInit persistStreamInit = new org.eclipse.swt.browser.IPersistStreamInit(ppvObject[0]); if ((persistStreamInit.InitNew()) == (OS.S_OK)) { persistStreamInit.Load(ppstm[0]); } persistStreamInit.Release(); } pVarResult.dispose(); org.eclipse.swt.browser.IUnknown stream = new org.eclipse.swt.browser.IUnknown(ppstm[0]); stream.Release(); } else { org.eclipse.swt.browser.OS.GlobalFree(hGlobal); } } }
java.io.File[] getRoots() { if ((java.lang.System.getProperty("os.name").indexOf("Windows")) != (-1)) { java.util.Vector list = new java.util.Vector(); list.add(new java.io.File(org.eclipse.swt.examples.fileviewer.FileViewer.DRIVE_A)); list.add(new java.io.File(org.eclipse.swt.examples.fileviewer.FileViewer.DRIVE_B)); for (char i = 'c'; i <= 'z'; ++i) { java.io.File drive = new java.io.File(((i + ":") + (java.io.File.separator))); if ((drive.isDirectory()) && (drive.exists())) { list.add(drive); if ((initial) && (i == 'c')) { currentDirectory = drive; initial = false; } } } java.io.File[] roots = ((java.io.File[]) (list.toArray(new java.io.File[list.size()]))); org.eclipse.swt.examples.fileviewer.FileViewer.sortFiles(roots); return roots; } else { java.io.File root = new java.io.File(java.io.File.separator); if (initial) { currentDirectory = root; initial = false; } return new java.io.File[]{ root }; } }
org.eclipse.swt.widgets.LRESULT WM_LBUTTONDOWN(int wParam, int lParam) { org.eclipse.swt.widgets.TVHITTESTINFO lpht = new org.eclipse.swt.widgets.TVHITTESTINFO(); lpht.x = org.eclipse.swt.widgets.OS.GET_X_LPARAM(lParam); lpht.y = org.eclipse.swt.widgets.OS.GET_Y_LPARAM(lParam); org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_HITTEST, 0, lpht); if (((lpht.hItem) == 0) || (((lpht.flags) & (OS.TVHT_ONITEMBUTTON)) != 0)) { org.eclipse.swt.widgets.Display display = this.display; display.captureChanged = false; if (!(sendMouseEvent(SWT.MouseDown, 1, handle, OS.WM_LBUTTONDOWN, wParam, lParam))) { if ((!(display.captureChanged)) && (!(isDisposed()))) { if ((org.eclipse.swt.widgets.OS.GetCapture()) != (handle)) org.eclipse.swt.widgets.OS.SetCapture(handle); } return LRESULT.ZERO; } boolean fixSelection = false; boolean deselected = false; int hOldSelection = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETNEXTITEM, OS.TVGN_CARET, 0); if (((lpht.hItem) != 0) && (((style) & (SWT.MULTI)) != 0)) { if (hOldSelection != 0) { org.eclipse.swt.widgets.TVITEM tvItem = new org.eclipse.swt.widgets.TVITEM(); tvItem.mask = (OS.TVIF_HANDLE) | (OS.TVIF_STATE); tvItem.hItem = lpht.hItem; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETITEM, 0, tvItem); if (((tvItem.state) & (OS.TVIS_EXPANDED)) != 0) { fixSelection = true; tvItem.stateMask = OS.TVIS_SELECTED; int hNext = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETNEXTITEM, OS.TVGN_NEXTVISIBLE, lpht.hItem); while (hNext != 0) { if (hNext == (hAnchor)) hAnchor = 0; tvItem.hItem = hNext; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETITEM, 0, tvItem); if (((tvItem.state) & (OS.TVIS_SELECTED)) != 0) deselected = true; tvItem.state = 0; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_SETITEM, 0, tvItem); int hItem = hNext = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETNEXTITEM, OS.TVGN_NEXTVISIBLE, hNext); while ((hItem != 0) && (hItem != (lpht.hItem))) { hItem = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETNEXTITEM, OS.TVGN_PARENT, hItem); } if (hItem == 0) break; } } } } dragStarted = gestureCompleted = false; if (fixSelection) ignoreDeselect = ignoreSelect = lockSelection = true; int code = callWindowProc(handle, OS.WM_LBUTTONDOWN, wParam, lParam); if (fixSelection) ignoreDeselect = ignoreSelect = lockSelection = false; int hNewSelection = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETNEXTITEM, OS.TVGN_CARET, 0); if (hOldSelection != hNewSelection) hAnchor = hNewSelection; if (dragStarted) { if ((!(display.captureChanged)) && (!(isDisposed()))) { if ((org.eclipse.swt.widgets.OS.GetCapture()) != (handle)) org.eclipse.swt.widgets.OS.SetCapture(handle); } } if (((lpht.flags) & (OS.TVHT_ONITEMBUTTON)) != 0) { int bits = org.eclipse.swt.widgets.OS.GetWindowLong(handle, OS.GWL_STYLE); if ((bits & (OS.TVS_FULLROWSELECT)) == 0) { if ((org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETIMAGELIST, OS.TVSIL_NORMAL, 0)) == 0) { int hItem = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETNEXTITEM, OS.TVGN_CARET, 0); if (hItem != 0) { org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); if (org.eclipse.swt.widgets.OS.TreeView_GetItemRect(handle, hItem, rect, false)) { org.eclipse.swt.widgets.OS.InvalidateRect(handle, rect, true); } } } } } if (deselected) { org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); event.item = _getItem(lpht.hItem); postEvent(SWT.Selection, event); } return new org.eclipse.swt.widgets.LRESULT(code); } if (((style) & (SWT.CHECK)) != 0) { if (((lpht.flags) & (OS.TVHT_ONITEMSTATEICON)) != 0) { org.eclipse.swt.widgets.Display display = this.display; display.captureChanged = false; if (!(sendMouseEvent(SWT.MouseDown, 1, handle, OS.WM_LBUTTONDOWN, wParam, lParam))) { if ((!(display.captureChanged)) && (!(isDisposed()))) { if ((org.eclipse.swt.widgets.OS.GetCapture()) != (handle)) org.eclipse.swt.widgets.OS.SetCapture(handle); } return LRESULT.ZERO; } if ((!(display.captureChanged)) && (!(isDisposed()))) { if ((org.eclipse.swt.widgets.OS.GetCapture()) != (handle)) org.eclipse.swt.widgets.OS.SetCapture(handle); } org.eclipse.swt.widgets.OS.SetFocus(handle); org.eclipse.swt.widgets.TVITEM tvItem = new org.eclipse.swt.widgets.TVITEM(); tvItem.hItem = lpht.hItem; tvItem.mask = ((OS.TVIF_HANDLE) | (OS.TVIF_PARAM)) | (OS.TVIF_STATE); tvItem.stateMask = OS.TVIS_STATEIMAGEMASK; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETITEM, 0, tvItem); int state = (tvItem.state) >> 12; if ((state & 1) != 0) { state++; } else { --state; } tvItem.state = state << 12; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_SETITEM, 0, tvItem); if (!(OS.IsWinCE)) { int id = tvItem.hItem; if ((OS.COMCTL32_MAJOR) >= 6) { id = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_MAPHTREEITEMTOACCID, tvItem.hItem, 0); } org.eclipse.swt.widgets.OS.NotifyWinEvent(OS.EVENT_OBJECT_FOCUS, handle, OS.OBJID_CLIENT, ((int) (id))); } org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); event.item = _getItem(tvItem.hItem, ((int) (tvItem.lParam))); event.detail = SWT.CHECK; postEvent(SWT.Selection, event); return LRESULT.ZERO; } } boolean selected = false; boolean fakeSelection = false; if ((lpht.hItem) != 0) { if (((style) & (SWT.FULL_SELECTION)) != 0) { int bits = org.eclipse.swt.widgets.OS.GetWindowLong(handle, OS.GWL_STYLE); if ((bits & (OS.TVS_FULLROWSELECT)) == 0) fakeSelection = true; } else { if (hooks(SWT.MeasureItem)) { selected = hitTestSelection(lpht.hItem, lpht.x, lpht.y); if (selected) { if (((lpht.flags) & (OS.TVHT_ONITEM)) == 0) fakeSelection = true; } } } } if ((!selected) && (((style) & (SWT.FULL_SELECTION)) == 0)) { if (((lpht.flags) & (OS.TVHT_ONITEM)) == 0) { org.eclipse.swt.widgets.Display display = this.display; display.captureChanged = false; if (!(sendMouseEvent(SWT.MouseDown, 1, handle, OS.WM_LBUTTONDOWN, wParam, lParam))) { if ((!(display.captureChanged)) && (!(isDisposed()))) { if ((org.eclipse.swt.widgets.OS.GetCapture()) != (handle)) org.eclipse.swt.widgets.OS.SetCapture(handle); } return LRESULT.ZERO; } int code = callWindowProc(handle, OS.WM_LBUTTONDOWN, wParam, lParam); if ((!(display.captureChanged)) && (!(isDisposed()))) { if ((org.eclipse.swt.widgets.OS.GetCapture()) != (handle)) org.eclipse.swt.widgets.OS.SetCapture(handle); } return new org.eclipse.swt.widgets.LRESULT(code); } } org.eclipse.swt.widgets.TVITEM tvItem = new org.eclipse.swt.widgets.TVITEM(); tvItem.mask = (OS.TVIF_HANDLE) | (OS.TVIF_STATE); tvItem.stateMask = OS.TVIS_SELECTED; boolean hittestSelected = false; if (((style) & (SWT.MULTI)) != 0) { tvItem.hItem = lpht.hItem; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETITEM, 0, tvItem); hittestSelected = ((tvItem.state) & (OS.TVIS_SELECTED)) != 0; } int hOldItem = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETNEXTITEM, OS.TVGN_CARET, 0); if (((style) & (SWT.MULTI)) != 0) { tvItem.hItem = hOldItem; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETITEM, 0, tvItem); if (hittestSelected || ((wParam & (OS.MK_CONTROL)) != 0)) { int uiState = ((int) (org.eclipse.swt.widgets.OS.SendMessage(handle, OS.WM_QUERYUISTATE, 0, 0))); if ((uiState & (OS.UISF_HIDEFOCUS)) != 0) { org.eclipse.swt.widgets.OS.SendMessage(handle, OS.WM_CHANGEUISTATE, OS.UIS_INITIALIZE, 0); } org.eclipse.swt.widgets.OS.UpdateWindow(handle); org.eclipse.swt.widgets.OS.DefWindowProc(handle, OS.WM_SETREDRAW, 0, 0); } else { deselectAll(); } } org.eclipse.swt.widgets.Display display = this.display; display.captureChanged = false; if (!(sendMouseEvent(SWT.MouseDown, 1, handle, OS.WM_LBUTTONDOWN, wParam, lParam))) { if ((!(display.captureChanged)) && (!(isDisposed()))) { if ((org.eclipse.swt.widgets.OS.GetCapture()) != (handle)) org.eclipse.swt.widgets.OS.SetCapture(handle); } return LRESULT.ZERO; } hSelect = lpht.hItem; dragStarted = gestureCompleted = false; ignoreDeselect = ignoreSelect = true; int code = callWindowProc(handle, OS.WM_LBUTTONDOWN, wParam, lParam); int hNewItem = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETNEXTITEM, OS.TVGN_CARET, 0); if (fakeSelection) { if ((hOldItem == 0) || ((hNewItem == hOldItem) && ((lpht.hItem) != hOldItem))) { org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_SELECTITEM, OS.TVGN_CARET, lpht.hItem); hNewItem = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETNEXTITEM, OS.TVGN_CARET, 0); } if (((!(dragStarted)) && (((state) & (DRAG_DETECT)) != 0)) && (hooks(SWT.DragDetect))) { dragStarted = dragDetect(handle, lpht.x, lpht.y, false, null, null); } } ignoreDeselect = ignoreSelect = false; hSelect = 0; if (dragStarted) { if ((!(display.captureChanged)) && (!(isDisposed()))) { if ((org.eclipse.swt.widgets.OS.GetCapture()) != (handle)) org.eclipse.swt.widgets.OS.SetCapture(handle); } } if (((style) & (SWT.SINGLE)) != 0) { if (hOldItem == hNewItem) { tvItem.mask = (OS.TVIF_HANDLE) | (OS.TVIF_STATE); tvItem.state = OS.TVIS_SELECTED; tvItem.stateMask = OS.TVIS_SELECTED; tvItem.hItem = hNewItem; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_SETITEM, 0, tvItem); } } if (((style) & (SWT.MULTI)) != 0) { if (hittestSelected || ((wParam & (OS.MK_CONTROL)) != 0)) { if ((hOldItem == hNewItem) && (hOldItem == (lpht.hItem))) { if ((wParam & (OS.MK_CONTROL)) != 0) { tvItem.state ^= OS.TVIS_SELECTED; if (dragStarted) tvItem.state = OS.TVIS_SELECTED; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_SETITEM, 0, tvItem); } } else { if (((tvItem.state) & (OS.TVIS_SELECTED)) != 0) { tvItem.state = OS.TVIS_SELECTED; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_SETITEM, 0, tvItem); } if (((wParam & (OS.MK_CONTROL)) != 0) && (!(dragStarted))) { if (hittestSelected) { tvItem.state = 0; tvItem.hItem = lpht.hItem; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_SETITEM, 0, tvItem); } } } org.eclipse.swt.widgets.RECT rect1 = new org.eclipse.swt.widgets.RECT(); org.eclipse.swt.widgets.RECT rect2 = new org.eclipse.swt.widgets.RECT(); boolean fItemRect = ((style) & (SWT.FULL_SELECTION)) == 0; if ((hooks(SWT.EraseItem)) || (hooks(SWT.PaintItem))) fItemRect = false; if ((!(OS.IsWinCE)) && ((OS.WIN32_VERSION) >= (org.eclipse.swt.widgets.OS.VERSION(6, 0)))) fItemRect = false; org.eclipse.swt.widgets.OS.TreeView_GetItemRect(handle, hOldItem, rect1, fItemRect); org.eclipse.swt.widgets.OS.TreeView_GetItemRect(handle, hNewItem, rect2, fItemRect); org.eclipse.swt.widgets.OS.DefWindowProc(handle, OS.WM_SETREDRAW, 1, 0); org.eclipse.swt.widgets.OS.InvalidateRect(handle, rect1, true); org.eclipse.swt.widgets.OS.InvalidateRect(handle, rect2, true); org.eclipse.swt.widgets.OS.UpdateWindow(handle); } if ((wParam & (OS.MK_CONTROL)) == 0) { if ((!hittestSelected) || (!(dragStarted))) { tvItem.state = 0; int oldProc = org.eclipse.swt.widgets.OS.GetWindowLongPtr(handle, OS.GWLP_WNDPROC); org.eclipse.swt.widgets.OS.SetWindowLongPtr(handle, OS.GWLP_WNDPROC, org.eclipse.swt.widgets.Tree.TreeProc); if (((style) & (SWT.VIRTUAL)) != 0) { int hItem = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETNEXTITEM, OS.TVGN_ROOT, 0); deselect(hItem, tvItem, hNewItem); } else { for (int i = 0; i < (items.length); i++) { org.eclipse.swt.widgets.TreeItem item = items[i]; if ((item != null) && ((item.handle) != hNewItem)) { tvItem.hItem = item.handle; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_SETITEM, 0, tvItem); } } } tvItem.hItem = hNewItem; tvItem.state = OS.TVIS_SELECTED; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_SETITEM, 0, tvItem); org.eclipse.swt.widgets.OS.SetWindowLongPtr(handle, OS.GWLP_WNDPROC, oldProc); if ((wParam & (OS.MK_SHIFT)) != 0) { org.eclipse.swt.widgets.RECT rect1 = new org.eclipse.swt.widgets.RECT(); if ((hAnchor) == 0) hAnchor = hNewItem; if (org.eclipse.swt.widgets.OS.TreeView_GetItemRect(handle, hAnchor, rect1, false)) { org.eclipse.swt.widgets.RECT rect2 = new org.eclipse.swt.widgets.RECT(); if (org.eclipse.swt.widgets.OS.TreeView_GetItemRect(handle, hNewItem, rect2, false)) { int flags = ((rect1.top) < (rect2.top)) ? OS.TVGN_NEXTVISIBLE : OS.TVGN_PREVIOUSVISIBLE; tvItem.state = OS.TVIS_SELECTED; int hItem = tvItem.hItem = hAnchor; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_SETITEM, 0, tvItem); while (hItem != hNewItem) { tvItem.hItem = hItem; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_SETITEM, 0, tvItem); hItem = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETNEXTITEM, flags, hItem); } } } } } } } if ((wParam & (OS.MK_SHIFT)) == 0) hAnchor = hNewItem; if (!(gestureCompleted)) { tvItem.hItem = hNewItem; tvItem.mask = (OS.TVIF_HANDLE) | (OS.TVIF_PARAM); org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETITEM, 0, tvItem); org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); event.item = _getItem(tvItem.hItem, ((int) (tvItem.lParam))); postEvent(SWT.Selection, event); } gestureCompleted = false; if (dragStarted) { sendDragEvent(1, org.eclipse.swt.widgets.OS.GET_X_LPARAM(lParam), org.eclipse.swt.widgets.OS.GET_Y_LPARAM(lParam)); } else { int bits = org.eclipse.swt.widgets.OS.GetWindowLong(handle, OS.GWL_STYLE); if ((bits & (OS.TVS_DISABLEDRAGDROP)) == 0) { sendMouseEvent(SWT.MouseUp, 1, handle, OS.WM_LBUTTONUP, wParam, lParam); } } dragStarted = false; return new org.eclipse.swt.widgets.LRESULT(code); }
int gtk_key_press_event(int widget, int event) { int result = super.gtk_key_press_event(widget, event); if (result != 0) return result; if ((((state) & (CANVAS)) != 0) && ((socketHandle) == 0)) { org.eclipse.swt.widgets.GdkEventKey keyEvent = new org.eclipse.swt.widgets.GdkEventKey(); org.eclipse.swt.widgets.OS.memmove(keyEvent, event, GdkEventKey.sizeof); int key = keyEvent.keyval; switch (key) { case OS.GDK_Return : case OS.GDK_KP_Enter : return 1; } } return result; }
org.eclipse.swt.widgets.LRESULT CDDS_POSTPAINT(org.eclipse.swt.widgets.NMTVCUSTOMDRAW nmcd, int wParam, int lParam) { if (ignoreCustomDraw) return null; if (org.eclipse.swt.widgets.OS.IsWindowVisible(handle)) { if (((OS.COMCTL32_MAJOR) >= 6) && (org.eclipse.swt.widgets.OS.IsAppThemed())) { if (((sortColumn) != null) && ((sortDirection) != (SWT.NONE))) { if ((findImageControl()) == null) { int index = indexOf(sortColumn); if (index != (-1)) { int top = nmcd.top; int hItem = 0; if ((!(OS.IsWinCE)) && ((OS.WIN32_VERSION) >= (org.eclipse.swt.widgets.OS.VERSION(6, 0)))) { hItem = getBottomItem(); } else { hItem = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETNEXTITEM, OS.TVGN_LASTVISIBLE, 0); } if (hItem != 0) { org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); if (org.eclipse.swt.widgets.OS.TreeView_GetItemRect(handle, hItem, rect, false)) { top = rect.bottom; } } org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); org.eclipse.swt.widgets.OS.SetRect(rect, nmcd.left, top, nmcd.right, nmcd.bottom); org.eclipse.swt.widgets.RECT headerRect = new org.eclipse.swt.widgets.RECT(); org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEMRECT, index, headerRect); rect.left = headerRect.left; rect.right = headerRect.right; fillBackground(nmcd.hdc, getSortColumnPixel(), rect); } } } } if (linesVisible) { int hDC = nmcd.hdc; if ((hwndHeader) != 0) { int x = 0; org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); org.eclipse.swt.widgets.HDITEM hdItem = new org.eclipse.swt.widgets.HDITEM(); hdItem.mask = OS.HDI_WIDTH; for (int i = 0; i < (columnCount); i++) { int index = ((int) (org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_ORDERTOINDEX, i, 0))); org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEM, index, hdItem); org.eclipse.swt.widgets.OS.SetRect(rect, x, nmcd.top, (x + (hdItem.cxy)), nmcd.bottom); org.eclipse.swt.widgets.OS.DrawEdge(hDC, rect, OS.BDR_SUNKENINNER, OS.BF_RIGHT); x += hdItem.cxy; } } int height = 0; org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); int hItem = 0; if ((!(OS.IsWinCE)) && ((OS.WIN32_VERSION) >= (org.eclipse.swt.widgets.OS.VERSION(6, 0)))) { hItem = getBottomItem(); } else { hItem = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETNEXTITEM, OS.TVGN_LASTVISIBLE, 0); } if (hItem != 0) { if (org.eclipse.swt.widgets.OS.TreeView_GetItemRect(handle, hItem, rect, false)) { height = (rect.bottom) - (rect.top); } } if (height == 0) { height = ((int) (org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETITEMHEIGHT, 0, 0))); org.eclipse.swt.widgets.OS.GetClientRect(handle, rect); org.eclipse.swt.widgets.OS.SetRect(rect, rect.left, rect.top, rect.right, ((rect.top) + height)); org.eclipse.swt.widgets.OS.DrawEdge(hDC, rect, OS.BDR_SUNKENINNER, OS.BF_BOTTOM); } if (height != 0) { while ((rect.bottom) < (nmcd.bottom)) { int top = (rect.top) + height; org.eclipse.swt.widgets.OS.SetRect(rect, rect.left, top, rect.right, (top + height)); org.eclipse.swt.widgets.OS.DrawEdge(hDC, rect, OS.BDR_SUNKENINNER, OS.BF_BOTTOM); } } } } return new org.eclipse.swt.widgets.LRESULT(OS.CDRF_DODEFAULT); }
public boolean isDirty() { int[] address = new int[1]; if ((objIOleObject.QueryInterface(COM.IIDIPersistFile, address)) != (COM.S_OK)) return true; org.eclipse.swt.ole.win32.IPersistStorage permStorage = new org.eclipse.swt.ole.win32.IPersistStorage(address[0]); int result = permStorage.IsDirty(); permStorage.Release(); if (result == (COM.S_FALSE)) return false; return true; }
public int getLineHeight() { checkWidget(); org.eclipse.swt.widgets.Font font = ((this.font) != null) ? this.font : defaultFont(); if (((style) & (SWT.SINGLE)) != 0) { org.eclipse.swt.widgets.NSDictionary dict = org.eclipse.swt.widgets.NSDictionary.dictionaryWithObject(font.handle, OS.NSFontAttributeName); org.eclipse.swt.widgets.NSString str = org.eclipse.swt.widgets.NSString.stringWith(" "); org.eclipse.swt.widgets.NSAttributedString attribStr = ((org.eclipse.swt.widgets.NSAttributedString) (new org.eclipse.swt.widgets.NSAttributedString().alloc())).initWithString(str, dict); dict.release(); org.eclipse.swt.widgets.NSSize size = attribStr.size(); attribStr.release(); return ((int) (size.height)); } else { org.eclipse.swt.widgets.NSTextView widget = ((org.eclipse.swt.widgets.NSTextView) (view)); return ((int) (java.lang.Math.ceil(widget.layoutManager().defaultLineHeightForFont(font.handle)))); } }
org.eclipse.swt.widgets.LRESULT WM_SYSCOMMAND(long wParam, long lParam) { org.eclipse.swt.widgets.LRESULT result = super.WM_SYSCOMMAND(wParam, lParam); if (result != null) return result; if (OS.IsWinNT) { int cmd = ((int) (wParam)) & 65520; switch (cmd) { case OS.SC_MINIMIZE : org.eclipse.swt.widgets.Shell[] shells = display.getShells(); int count = 0; for (int i = 0; i < (shells.length); i++) { org.eclipse.swt.widgets.Shell shell = shells[i]; if (((shell != null) && (shell.getVisible())) && (!(shell.getMinimized()))) { count++; } } if (count > 1) break; long memory = java.lang.Runtime.getRuntime().totalMemory(); if (memory >= ((32 * 1024) * 1024)) { org.eclipse.swt.widgets.OS.ShowWindow(handle, OS.SW_SHOWMINIMIZED); return LRESULT.ZERO; } } } return result; }
public Cursor(org.eclipse.swt.graphics.Device device, int style) { if (device == null) device = org.eclipse.swt.graphics.Device.getDevice(); if (device == null) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NULL_ARGUMENT); this.device = device; int shape = 0; switch (style) { case SWT.CURSOR_ARROW : shape = OS.GDK_LEFT_PTR; break; case SWT.CURSOR_WAIT : shape = OS.GDK_WATCH; break; case SWT.CURSOR_CROSS : shape = OS.GDK_CROSS; break; case SWT.CURSOR_APPSTARTING : if (!(OS.IsLinux)) shape = OS.GDK_LEFT_PTR; break; case SWT.CURSOR_HAND : shape = OS.GDK_HAND1; break; case SWT.CURSOR_HELP : shape = OS.GDK_QUESTION_ARROW; break; case SWT.CURSOR_SIZEALL : shape = OS.GDK_FLEUR; break; case SWT.CURSOR_SIZENESW : shape = OS.GDK_SIZING; break; case SWT.CURSOR_SIZENS : shape = OS.GDK_DOUBLE_ARROW; break; case SWT.CURSOR_SIZENWSE : shape = OS.GDK_SIZING; break; case SWT.CURSOR_SIZEWE : shape = OS.GDK_SB_H_DOUBLE_ARROW; break; case SWT.CURSOR_SIZEN : shape = OS.GDK_TOP_SIDE; break; case SWT.CURSOR_SIZES : shape = OS.GDK_BOTTOM_SIDE; break; case SWT.CURSOR_SIZEE : shape = OS.GDK_RIGHT_SIDE; break; case SWT.CURSOR_SIZEW : shape = OS.GDK_LEFT_SIDE; break; case SWT.CURSOR_SIZENE : shape = OS.GDK_TOP_RIGHT_CORNER; break; case SWT.CURSOR_SIZESE : shape = OS.GDK_BOTTOM_RIGHT_CORNER; break; case SWT.CURSOR_SIZESW : shape = OS.GDK_BOTTOM_LEFT_CORNER; break; case SWT.CURSOR_SIZENW : shape = OS.GDK_TOP_LEFT_CORNER; break; case SWT.CURSOR_UPARROW : shape = OS.GDK_SB_UP_ARROW; break; case SWT.CURSOR_IBEAM : shape = OS.GDK_XTERM; break; case SWT.CURSOR_NO : shape = OS.GDK_X_CURSOR; break; default : org.eclipse.swt.graphics.SWT.error(SWT.ERROR_INVALID_ARGUMENT); } if ((shape == 0) && (style == (SWT.CURSOR_APPSTARTING))) { handle = createCursor(org.eclipse.swt.graphics.Cursor.APPSTARTING_SRC, org.eclipse.swt.graphics.Cursor.APPSTARTING_MASK, 32, 32, 2, 2, false); } else { handle = org.eclipse.swt.graphics.OS.gdk_cursor_new(shape); } if ((handle) == 0) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NO_HANDLES); if (device.tracking) device.new_Object(this); }
void _setVisible(boolean visible) { if (((style) & ((SWT.BAR) | (SWT.DROP_DOWN))) != 0) return; if (visible) { org.eclipse.swt.widgets.Shell shell = getShell(); org.eclipse.swt.widgets.NSWindow window = shell.window; org.eclipse.swt.widgets.NSPoint location = null; if (hasLocation) { org.eclipse.swt.widgets.NSView topView = window.contentView(); org.eclipse.swt.widgets.Point shellCoord = display.map(null, shell, new org.eclipse.swt.widgets.Point(x, y)); location = new org.eclipse.swt.widgets.NSPoint(); location.x = shellCoord.x; location.y = (topView.frame().height) - (shellCoord.y); } else { location = window.mouseLocationOutsideOfEventStream(); } org.eclipse.swt.widgets.NSEvent nsEvent = org.eclipse.swt.widgets.NSEvent.otherEventWithType(OS.NSApplicationDefined, location, 0, 0.0, window.windowNumber(), window.graphicsContext(), ((short) (0)), 0, 0); org.eclipse.swt.widgets.NSMenu.static_popUpContextMenu_withEvent_forView_(nsMenu, nsEvent, shell.view); } else { nsMenu.cancelTracking(); } }
public void getTextAttributes(org.eclipse.swt.custom.AccessibleTextAttributeEvent e) { org.eclipse.swt.custom.StyledText st = this; int contentLength = st.getCharCount(); if ((!(isListening(org.eclipse.swt.custom.StyledText.LineGetStyle))) && ((st.renderer.styleCount) == 0)) { e.start = 0; e.end = contentLength; e.textStyle = new org.eclipse.swt.custom.TextStyle(st.getFont(), st.foreground, st.background); return; } int offset = java.lang.Math.max(0, java.lang.Math.min(e.offset, (contentLength - 1))); int lineIndex = st.getLineAtOffset(offset); int lineOffset = st.getOffsetAtLine(lineIndex); int lineLength = st.getContent().getLine(lineIndex).length(); int lineCount = st.getLineCount(); offset = offset - lineOffset; if (offset >= lineLength) { e.start = lineOffset + lineLength; if ((lineIndex + 1) < lineCount) { e.end = st.getOffsetAtLine((lineIndex + 1)); } else { e.end = contentLength; } return; } org.eclipse.swt.custom.TextLayout layout = st.renderer.getTextLayout(lineIndex); e.textStyle = layout.getStyle(offset); if ((e.textStyle) == null) { e.textStyle = new org.eclipse.swt.custom.TextStyle(st.getFont(), st.foreground, st.background); } else { if ((((e.textStyle.foreground) == null) || ((e.textStyle.background) == null)) || ((e.textStyle.font) == null)) { org.eclipse.swt.custom.TextStyle textStyle = new org.eclipse.swt.custom.TextStyle(e.textStyle); if ((textStyle.foreground) == null) textStyle.foreground = st.foreground; if ((textStyle.background) == null) textStyle.background = st.background; if ((textStyle.font) == null) textStyle.font = st.getFont(); e.textStyle = textStyle; } } int[] ranges = layout.getRanges(); st.renderer.disposeTextLayout(layout); int index = 0; int end = 0; while (index < (ranges.length)) { int styleStart = ranges[(index++)]; int styleEnd = ranges[(index++)]; if ((styleStart <= offset) && (offset <= styleEnd)) { e.start = lineOffset + styleStart; e.end = (lineOffset + styleEnd) + 1; return; } if (styleStart > offset) { e.start = lineOffset + end; e.end = lineOffset + styleStart; return; } end = styleEnd + 1; } if (index == (ranges.length)) { e.start = lineOffset + end; if ((lineIndex + 1) < lineCount) { e.end = st.getOffsetAtLine((lineIndex + 1)); } else { e.end = contentLength; } } }
void setBackgroundPixel(int pixel) { super.setBackgroundPixel(pixel); if ((formHandle) != 0) { int[] argList1 = new int[]{ OS.XmNforeground, 0, OS.XmNhighlightColor, 0 }; org.eclipse.swt.widgets.OS.XtGetValues(formHandle, argList1, ((argList1.length) / 2)); org.eclipse.swt.widgets.OS.XmChangeColor(formHandle, pixel); org.eclipse.swt.widgets.OS.XtSetValues(formHandle, argList1, ((argList1.length) / 2)); } int[] argList2 = new int[]{ OS.XmNlabelType, 0 }; org.eclipse.swt.widgets.OS.XtGetValues(handle, argList2, ((argList2.length) / 2)); if ((argList2[1]) == (OS.XmPIXMAP)) setBitmap(image); }
org.eclipse.swt.graphics.TextLayout.StyleItem[] itemize() { segmentsText = getSegmentsText(); int length = segmentsText.length(); org.eclipse.swt.graphics.SCRIPT_CONTROL scriptControl = new org.eclipse.swt.graphics.SCRIPT_CONTROL(); org.eclipse.swt.graphics.SCRIPT_STATE scriptState = new org.eclipse.swt.graphics.SCRIPT_STATE(); final int MAX_ITEM = length + 1; if (((orientation) & (SWT.RIGHT_TO_LEFT)) != 0) { scriptState.uBidiLevel = 1; scriptState.fArabicNumContext = true; org.eclipse.swt.graphics.SCRIPT_DIGITSUBSTITUTE psds = new org.eclipse.swt.graphics.SCRIPT_DIGITSUBSTITUTE(); org.eclipse.swt.graphics.OS.ScriptRecordDigitSubstitution(OS.LOCALE_USER_DEFAULT, psds); org.eclipse.swt.graphics.OS.ScriptApplyDigitSubstitution(psds, scriptControl, scriptState); } int hHeap = org.eclipse.swt.graphics.OS.GetProcessHeap(); int pItems = org.eclipse.swt.graphics.OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, (MAX_ITEM * (SCRIPT_ITEM.sizeof))); int[] pcItems = new int[1]; char[] chars = new char[length]; segmentsText.getChars(0, length, chars, 0); org.eclipse.swt.graphics.OS.ScriptItemize(chars, length, MAX_ITEM, scriptControl, scriptState, pItems, pcItems); org.eclipse.swt.graphics.TextLayout.StyleItem[] runs = merge(pItems, pcItems[0]); org.eclipse.swt.graphics.OS.HeapFree(hHeap, 0, pItems); return runs; }
static org.eclipse.swt.program.Program gnome_getProgram(org.eclipse.swt.program.Display display, java.lang.String mimeType) { org.eclipse.swt.program.Program program = null; byte[] mimeTypeBuffer = org.eclipse.swt.program.Converter.wcsToMbcs(null, mimeType, true); int ptr = org.eclipse.swt.program.GNOME.gnome_vfs_mime_get_default_application(mimeTypeBuffer); if (ptr != 0) { program = new org.eclipse.swt.program.Program(); program.display = display; program.name = mimeType; org.eclipse.swt.program.GnomeVFSMimeApplication application = new org.eclipse.swt.program.GnomeVFSMimeApplication(); org.eclipse.swt.program.GNOME.memmove(application, ptr, GnomeVFSMimeApplication.sizeof); if ((application.command) != 0) { int length = org.eclipse.swt.program.OS.strlen(application.command); if (length > 0) { byte[] buffer = new byte[length]; org.eclipse.swt.program.OS.memmove(buffer, application.command, length); program.command = new java.lang.String(org.eclipse.swt.program.Converter.mbcsToWcs(null, buffer)); } } program.gnomeExpectUri = (application.expects_uris) == (GNOME.GNOME_VFS_MIME_APPLICATION_ARGUMENT_TYPE_URIS); int length = org.eclipse.swt.program.OS.strlen(application.id); byte[] buffer = new byte[length + 1]; org.eclipse.swt.program.OS.memmove(buffer, application.id, length); org.eclipse.swt.program.LONG gnomeIconTheme = ((org.eclipse.swt.program.LONG) (display.getData(org.eclipse.swt.program.Program.ICON_THEME_DATA))); int icon_name = org.eclipse.swt.program.GNOME.gnome_icon_lookup(gnomeIconTheme.value, 0, null, buffer, 0, mimeTypeBuffer, GNOME.GNOME_ICON_LOOKUP_FLAGS_NONE, null); int path = 0; if (icon_name != 0) path = org.eclipse.swt.program.GNOME.gnome_icon_theme_lookup_icon(gnomeIconTheme.value, icon_name, org.eclipse.swt.program.Program.PREFERRED_ICON_SIZE, null, null); if (path != 0) { length = org.eclipse.swt.program.OS.strlen(path); if (length > 0) { buffer = new byte[length]; org.eclipse.swt.program.OS.memmove(buffer, path, length); program.iconPath = new java.lang.String(org.eclipse.swt.program.Converter.mbcsToWcs(null, buffer)); } org.eclipse.swt.program.OS.g_free(path); } if (icon_name != 0) org.eclipse.swt.program.OS.g_free(icon_name); org.eclipse.swt.program.GNOME.gnome_vfs_mime_application_free(ptr); } return (program != null) && ((program.command) != null) ? program : null; }
int OnStartURIOpen(int aURI, int retval) { if ((awaitingNavigate) || ((locationListeners.length) == 0)) { org.eclipse.swt.browser.XPCOM.memmove(retval, new int[]{ 0 }, 4); return XPCOM.NS_OK; } org.eclipse.swt.browser.nsIURI location = new org.eclipse.swt.browser.nsIURI(aURI); int aSpec = org.eclipse.swt.browser.XPCOM.nsEmbedCString_new(); location.GetSpec(aSpec); int length = org.eclipse.swt.browser.XPCOM.nsEmbedCString_Length(aSpec); int buffer = org.eclipse.swt.browser.XPCOM.nsEmbedCString_get(aSpec); buffer = org.eclipse.swt.browser.XPCOM.nsEmbedCString_get(aSpec); byte[] dest = new byte[length]; org.eclipse.swt.browser.XPCOM.memmove(dest, buffer, length); org.eclipse.swt.browser.XPCOM.nsEmbedCString_delete(aSpec); java.lang.String value = new java.lang.String(dest); boolean doit = true; if ((request) == 0) { if (!(value.startsWith(org.eclipse.swt.browser.Mozilla.PREFIX_JAVASCRIPT))) { org.eclipse.swt.browser.LocationEvent event = new org.eclipse.swt.browser.LocationEvent(browser); event.display = browser.getDisplay(); event.widget = browser; event.location = value; if (event.location.equals(org.eclipse.swt.browser.Mozilla.URI_FROMMEMORY)) event.location = org.eclipse.swt.browser.Mozilla.ABOUT_BLANK; event.doit = doit; for (int i = 0; i < (locationListeners.length); i++) { locationListeners[i].changing(event); } doit = (event.doit) && (!(browser.isDisposed())); } } org.eclipse.swt.browser.XPCOM.memmove(retval, new int[]{ doit ? 0 : 1 }, 4); return XPCOM.NS_OK; }
int filterProc(int xEvent, int gdkEvent, int data2) { int eventType = org.eclipse.swt.widgets.OS.X_EVENT_TYPE(xEvent); if ((eventType != (OS.FocusOut)) && (eventType != (OS.FocusIn))) return 0; org.eclipse.swt.widgets.XFocusChangeEvent xFocusEvent = new org.eclipse.swt.widgets.XFocusChangeEvent(); org.eclipse.swt.widgets.OS.memmove(xFocusEvent, xEvent, XFocusChangeEvent.sizeof); switch (eventType) { case OS.FocusIn : if (((xFocusEvent.mode) == (OS.NotifyNormal)) || ((xFocusEvent.mode) == (OS.NotifyWhileGrabbed))) { switch (xFocusEvent.detail) { case OS.NotifyNonlinear : case OS.NotifyNonlinearVirtual : case OS.NotifyAncestor : if ((tooltipsHandle) != 0) org.eclipse.swt.widgets.OS.gtk_tooltips_enable(tooltipsHandle); display.activeShell = this; display.activePending = false; sendEvent(SWT.Activate); if (isDisposed()) return 0; if (isCustomResize()) { org.eclipse.swt.widgets.OS.gdk_window_invalidate_rect(org.eclipse.swt.widgets.OS.GTK_WIDGET_WINDOW(shellHandle), null, false); } break; } } break; case OS.FocusOut : if (((xFocusEvent.mode) == (OS.NotifyNormal)) || ((xFocusEvent.mode) == (OS.NotifyWhileGrabbed))) { switch (xFocusEvent.detail) { case OS.NotifyNonlinear : case OS.NotifyNonlinearVirtual : case OS.NotifyVirtual : if ((tooltipsHandle) != 0) org.eclipse.swt.widgets.OS.gtk_tooltips_disable(tooltipsHandle); org.eclipse.swt.widgets.Display display = this.display; sendEvent(SWT.Deactivate); setActiveControl(null); if ((display.activeShell) == (this)) { display.activeShell = null; display.activePending = false; } if (isDisposed()) return 0; if (isCustomResize()) { org.eclipse.swt.widgets.OS.gdk_window_invalidate_rect(org.eclipse.swt.widgets.OS.GTK_WIDGET_WINDOW(shellHandle), null, false); } break; } } break; } return 0; }
org.eclipse.swt.widgets.LRESULT wmChar(int hwnd, int wParam, int lParam) { if (ignoreCharacter) return null; org.eclipse.swt.widgets.LRESULT result = super.wmChar(hwnd, wParam, lParam); if (result != null) return result; switch (wParam) { case SWT.TAB : return LRESULT.ZERO; case SWT.CR : postEvent(SWT.DefaultSelection); case SWT.ESC : if ((org.eclipse.swt.widgets.OS.SendMessage(handle, OS.CB_GETDROPPEDSTATE, 0, 0)) == 0) { return LRESULT.ZERO; } } return result; }
void setItemCount(int count, int hParent, int hItem) { boolean redraw = false; if ((org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETCOUNT, 0, 0)) == 0) { redraw = ((drawCount) == 0) && (org.eclipse.swt.widgets.OS.IsWindowVisible(handle)); if (redraw) org.eclipse.swt.widgets.OS.SendMessage(handle, OS.WM_SETREDRAW, 0, 0); } int itemCount = 0; while ((hItem != 0) && (itemCount < count)) { hItem = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETNEXTITEM, OS.TVGN_NEXT, hItem); itemCount++; } if (hItem != 0) { org.eclipse.swt.widgets.TVITEM tvItem = new org.eclipse.swt.widgets.TVITEM(); tvItem.mask = (OS.TVIF_HANDLE) | (OS.TVIF_PARAM); hItem = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETNEXTITEM, OS.TVGN_PREVIOUS, hItem); tvItem.hItem = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETNEXTITEM, OS.TVGN_NEXT, hItem); while ((tvItem.hItem) != 0) { org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETITEM, 0, tvItem); org.eclipse.swt.widgets.TreeItem item = ((tvItem.lParam) != (-1)) ? items[tvItem.lParam] : null; if ((item != null) && (!(item.isDisposed()))) { item.dispose(); } else { releaseItem(tvItem.hItem, tvItem, false); destroyItem(null, tvItem.hItem); } tvItem.hItem = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETNEXTITEM, OS.TVGN_NEXT, hItem); } } if (((style) & (SWT.VIRTUAL)) != 0) { for (int i = itemCount; i < count; i++) { createItem(null, hParent, OS.TVI_LAST, 0); } } else { shrink = true; int extra = java.lang.Math.max(4, (((count + 3) / 4) * 4)); org.eclipse.swt.widgets.TreeItem[] newItems = new org.eclipse.swt.widgets.TreeItem[(items.length) + extra]; java.lang.System.arraycopy(items, 0, newItems, 0, items.length); items = newItems; for (int i = itemCount; i < count; i++) { new org.eclipse.swt.widgets.TreeItem(this, SWT.NONE, hParent, OS.TVI_LAST, 0); } } if (redraw) { org.eclipse.swt.widgets.OS.SendMessage(handle, OS.WM_SETREDRAW, 1, 0); org.eclipse.swt.widgets.OS.InvalidateRect(handle, null, true); } }
protected void layout(org.eclipse.swt.custom.Composite composite, boolean flushCache) { org.eclipse.swt.custom.ViewForm form = ((org.eclipse.swt.custom.ViewForm) (composite)); org.eclipse.swt.custom.Control left = form.topLeft; org.eclipse.swt.custom.Control center = form.topCenter; org.eclipse.swt.custom.Control right = form.topRight; org.eclipse.swt.custom.Control content = form.content; org.eclipse.swt.custom.Rectangle rect = composite.getClientArea(); org.eclipse.swt.custom.Point leftSize = new org.eclipse.swt.custom.Point(0, 0); if ((left != null) && (!(left.isDisposed()))) { leftSize = computeChildSize(left, SWT.DEFAULT, SWT.DEFAULT, flushCache); } org.eclipse.swt.custom.Point centerSize = new org.eclipse.swt.custom.Point(0, 0); if ((center != null) && (!(center.isDisposed()))) { centerSize = computeChildSize(center, SWT.DEFAULT, SWT.DEFAULT, flushCache); } org.eclipse.swt.custom.Point rightSize = new org.eclipse.swt.custom.Point(0, 0); if ((right != null) && (!(right.isDisposed()))) { rightSize = computeChildSize(right, SWT.DEFAULT, SWT.DEFAULT, flushCache); } int minTopWidth = ((((leftSize.x) + (centerSize.x)) + (rightSize.x)) + (2 * (form.marginWidth))) + (2 * (form.highlight)); int count = -1; if ((leftSize.x) > 0) count++; if ((centerSize.x) > 0) count++; if ((rightSize.x) > 0) count++; if (count > 0) minTopWidth += count * (form.horizontalSpacing); int x = (((rect.x) + (rect.width)) - (form.marginWidth)) - (form.highlight); int y = ((rect.y) + (form.marginHeight)) + (form.highlight); boolean top = false; if ((form.separateTopCenter) || (minTopWidth > (rect.width))) { int topHeight = java.lang.Math.max(rightSize.y, leftSize.y); if ((right != null) && (!(right.isDisposed()))) { top = true; x -= rightSize.x; right.setBounds(x, y, rightSize.x, topHeight); x -= form.horizontalSpacing; } if ((left != null) && (!(left.isDisposed()))) { top = true; int trim = computeTrim(left); int leftW = (((x - (rect.x)) - (form.marginWidth)) - (form.highlight)) - trim; leftSize = computeChildSize(left, leftW, SWT.DEFAULT, false); left.setBounds((((rect.x) + (form.marginWidth)) + (form.highlight)), y, leftSize.x, topHeight); } if (top) y += topHeight + (form.verticalSpacing); if ((center != null) && (!(center.isDisposed()))) { top = true; int trim = computeTrim(center); int w = (((rect.width) - (2 * (form.marginWidth))) - (2 * (form.highlight))) - trim; centerSize = computeChildSize(center, w, SWT.DEFAULT, false); center.setBounds((((((rect.x) + (rect.width)) - (form.marginWidth)) - (form.highlight)) - (centerSize.x)), y, centerSize.x, centerSize.y); y += (centerSize.y) + (form.verticalSpacing); } } else { int topHeight = java.lang.Math.max(rightSize.y, java.lang.Math.max(centerSize.y, leftSize.y)); if ((right != null) && (!(right.isDisposed()))) { top = true; x -= rightSize.x; right.setBounds(x, y, rightSize.x, topHeight); x -= form.horizontalSpacing; } if ((center != null) && (!(center.isDisposed()))) { top = true; x -= centerSize.x; center.setBounds(x, y, centerSize.x, topHeight); x -= form.horizontalSpacing; } if ((left != null) && (!(left.isDisposed()))) { top = true; org.eclipse.swt.custom.Rectangle trim = (left instanceof org.eclipse.swt.custom.Composite) ? ((org.eclipse.swt.custom.Composite) (left)).computeTrim(0, 0, 0, 0) : new org.eclipse.swt.custom.Rectangle(0, 0, 0, 0); int w = (((x - (rect.x)) - (form.marginWidth)) - (form.highlight)) - (trim.width); int h = topHeight - (trim.height); leftSize = computeChildSize(left, w, h, false); left.setBounds((((rect.x) + (form.marginWidth)) + (form.highlight)), y, leftSize.x, topHeight); } if (top) y += topHeight + (form.verticalSpacing); } int oldSeperator = form.separator; form.separator = -1; if ((content != null) && (!(content.isDisposed()))) { if (((left != null) || (right != null)) || (center != null)) { form.separator = y; y++; } content.setBounds((((rect.x) + (form.marginWidth)) + (form.highlight)), y, (((rect.width) - (2 * (form.marginWidth))) - (2 * (form.highlight))), (((((rect.y) + (rect.height)) - y) - (form.marginHeight)) - (form.highlight))); } if (oldSeperator != (form.separator)) { int t; int b; if (oldSeperator == (-1)) { t = form.separator; b = (form.separator) + 1; } else if ((form.separator) == (-1)) { t = oldSeperator; b = oldSeperator + 1; } else { t = java.lang.Math.min(form.separator, oldSeperator); b = java.lang.Math.max(form.separator, oldSeperator); } form.redraw(form.borderLeft, t, (((form.getSize().x) - (form.borderLeft)) - (form.borderRight)), (b - t), false); } }
void unhookDOMListeners() { int[] result = new int[1]; int rc = webBrowser.GetContentDOMWindow(result); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); if ((result[0]) == 0) org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_ERROR_NO_INTERFACE); org.eclipse.swt.browser.nsIDOMWindow window = new org.eclipse.swt.browser.nsIDOMWindow(result[0]); result[0] = 0; rc = window.QueryInterface(nsIDOMEventTarget.NS_IDOMEVENTTARGET_IID, result); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); if ((result[0]) == 0) org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_ERROR_NO_INTERFACE); org.eclipse.swt.browser.nsIDOMEventTarget target = new org.eclipse.swt.browser.nsIDOMEventTarget(result[0]); result[0] = 0; unhookDOMListeners(target); target.Release(); rc = window.GetFrames(result); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); if ((result[0]) == 0) org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_ERROR_NO_INTERFACE); org.eclipse.swt.browser.nsIDOMWindowCollection frames = new org.eclipse.swt.browser.nsIDOMWindowCollection(result[0]); result[0] = 0; int[] frameCount = new int[1]; rc = frames.GetLength(frameCount); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); int count = frameCount[0]; if (count > 0) { for (int i = 0; i < count; i++) { rc = frames.Item(i, result); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); if ((result[0]) == 0) org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_ERROR_NO_INTERFACE); org.eclipse.swt.browser.nsIDOMWindow frame = new org.eclipse.swt.browser.nsIDOMWindow(result[0]); result[0] = 0; rc = frame.QueryInterface(nsIDOMEventTarget.NS_IDOMEVENTTARGET_IID, result); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); if ((result[0]) == 0) org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_ERROR_NO_INTERFACE); target = new org.eclipse.swt.browser.nsIDOMEventTarget(result[0]); result[0] = 0; unhookDOMListeners(target); target.Release(); frame.Release(); } } frames.Release(); window.Release(); }
void createHandle() { state |= HIDDEN; if (((window) == null) && ((view) == null)) { int styleMask = OS.NSBorderlessWindowMask; if (((style) & ((SWT.TOOL) | (SWT.SHEET))) != 0) { window = ((org.eclipse.swt.widgets.NSWindow) (new org.eclipse.swt.widgets.SWTPanel().alloc())); if (((style) & (SWT.SHEET)) != 0) { styleMask |= OS.NSDocModalWindowMask; } else { styleMask |= (OS.NSUtilityWindowMask) | (OS.NSNonactivatingPanelMask); } } else { window = ((org.eclipse.swt.widgets.NSWindow) (new org.eclipse.swt.widgets.SWTWindow().alloc())); } if (((style) & (SWT.NO_TRIM)) == 0) { if (((style) & (SWT.TITLE)) != 0) styleMask |= OS.NSTitledWindowMask; if (((style) & (SWT.CLOSE)) != 0) styleMask |= OS.NSClosableWindowMask; if (((style) & (SWT.MIN)) != 0) styleMask |= OS.NSMiniaturizableWindowMask; if (((style) & (SWT.MAX)) != 0) styleMask |= OS.NSResizableWindowMask; if (((style) & (SWT.RESIZE)) != 0) styleMask |= OS.NSResizableWindowMask; } org.eclipse.swt.widgets.NSScreen screen = null; org.eclipse.swt.widgets.NSScreen primaryScreen = new org.eclipse.swt.widgets.NSScreen(org.eclipse.swt.widgets.NSScreen.screens().objectAtIndex(0)); if ((parent) != null) screen = parentWindow().screen(); if (screen == null) screen = primaryScreen; window = window.initWithContentRect(new org.eclipse.swt.widgets.NSRect(), styleMask, OS.NSBackingStoreBuffered, (((style) & (SWT.ON_TOP)) != 0), screen); if ((((style) & (((SWT.NO_TRIM) | (SWT.BORDER)) | (SWT.SHELL_TRIM))) == 0) || (((style) & ((SWT.TOOL) | (SWT.SHEET))) != 0)) { window.setHasShadow(true); } if (((style) & (SWT.TOOL)) != 0) { ((org.eclipse.swt.widgets.NSPanel) (window)).setFloatingPanel(false); ((org.eclipse.swt.widgets.NSPanel) (window)).setHidesOnDeactivate(false); ((org.eclipse.swt.widgets.NSPanel) (window)).setBecomesKeyOnlyIfNeeded(false); } window.setReleasedWhenClosed(true); if (((style) & (SWT.NO_TRIM)) == 0) { org.eclipse.swt.widgets.NSSize size = window.minSize(); size.width = org.eclipse.swt.widgets.NSWindow.minFrameWidthWithTitle(org.eclipse.swt.widgets.NSString.string(), styleMask); window.setMinSize(size); } if (fixResize()) { if (window.respondsToSelector(OS.sel_setMovable_)) { org.eclipse.swt.widgets.OS.objc_msgSend(window.id, OS.sel_setMovable_, 0); } } display.cascadeWindow(window, screen); org.eclipse.swt.widgets.NSRect screenFrame = screen.frame(); double width = ((screenFrame.width) * 5) / 8; double height = ((screenFrame.height) * 5) / 8; org.eclipse.swt.widgets.NSRect frame = window.frame(); org.eclipse.swt.widgets.NSRect primaryFrame = primaryScreen.frame(); frame.y = (primaryFrame.height) - (((primaryFrame.height) - ((frame.y) + (frame.height))) + height); frame.width = width; frame.height = height; window.setFrame(frame, false); if (((style) & (SWT.ON_TOP)) != 0) { window.setLevel(OS.NSStatusWindowLevel); } super.createHandle(); topView().setHidden(true); } else { state &= ~(HIDDEN); if ((window) != null) { view = window.contentView(); if ((view) == null) { super.createHandle(); } else { view.retain(); } } else { org.eclipse.swt.widgets.NSView parentView = view; super.createHandle(); parentView.addSubview(topView()); } style |= SWT.NO_BACKGROUND; } windowDelegate = ((org.eclipse.swt.widgets.SWTWindowDelegate) (new org.eclipse.swt.widgets.SWTWindowDelegate().alloc().init())); if ((window) == null) { org.eclipse.swt.widgets.NSWindow hostWindow = view.window(); attachObserversToWindow(hostWindow); } else { int behavior = 0; if ((parent) != null) behavior |= OS.NSWindowCollectionBehaviorMoveToActiveSpace; if ((OS.VERSION) >= 4208) { if ((parent) == null) { if (((style) & (SWT.TOOL)) != 0) { behavior = OS.NSWindowCollectionBehaviorFullScreenAuxiliary; } else { behavior = OS.NSWindowCollectionBehaviorFullScreenPrimary; } } } if (behavior != 0) window.setCollectionBehavior(behavior); window.setAcceptsMouseMovedEvents(true); window.setDelegate(windowDelegate); } if ((OS.VERSION) < 4192) { if ((window) != null) window.windowRef(); } org.eclipse.swt.widgets.NSWindow fieldEditorWindow = window; if (fieldEditorWindow == null) fieldEditorWindow = view.window(); org.eclipse.swt.widgets.id id = fieldEditorWindow.fieldEditor(true, null); if (id != null) { org.eclipse.swt.widgets.OS.object_setClass(id.id, org.eclipse.swt.widgets.OS.objc_getClass("SWTEditorView")); new org.eclipse.swt.widgets.NSTextView(id).setAllowsUndo(true); } }
public boolean readAndDispatch() { checkDevice(); boolean events = false; events |= runSettings(); events |= runTimers(); events |= runPopups(); int[] outEvent = new int[1]; int status = org.eclipse.swt.internal.carbon.OS.ReceiveNextEvent(0, null, OS.kEventDurationNoWait, true, outEvent); if (status == (org.eclipse.swt.internal.carbon.OS.noErr)) { events = true; org.eclipse.swt.internal.carbon.OS.SendEventToEventTarget(outEvent[0], org.eclipse.swt.internal.carbon.OS.GetEventDispatcherTarget()); org.eclipse.swt.internal.carbon.OS.ReleaseEvent(outEvent[0]); if (((focusCombo) != null) && (!(focusCombo.isDisposed()))) { focusCombo.checkSelection(); } } events |= runPaint(); if (events) { runEnterExit(); runDeferredEvents(); return true; } return (isDisposed()) || (runAsyncMessages(false)); }
public int open() { int alertType = OS.kAlertPlainAlert; if (((style) & (SWT.ICON_ERROR)) != 0) alertType = OS.kAlertStopAlert; if (((style) & (SWT.ICON_INFORMATION)) != 0) alertType = OS.kAlertNoteAlert; if (((style) & (SWT.ICON_QUESTION)) != 0) alertType = OS.kAlertNoteAlert; if (((style) & (SWT.ICON_WARNING)) != 0) alertType = OS.kAlertCautionAlert; if (((style) & (SWT.ICON_WORKING)) != 0) alertType = OS.kAlertNoteAlert; int error = 0; int explanation = 0; java.lang.String errorString = title; java.lang.String explanationString = message; if (errorString != null) { char[] buffer = new char[errorString.length()]; errorString.getChars(0, buffer.length, buffer, 0); error = org.eclipse.swt.widgets.OS.CFStringCreateWithCharacters(OS.kCFAllocatorDefault, buffer, buffer.length); } if (explanationString != null) { char[] buffer = new char[explanationString.length()]; explanationString.getChars(0, buffer.length, buffer, 0); explanation = org.eclipse.swt.widgets.OS.CFStringCreateWithCharacters(OS.kCFAllocatorDefault, buffer, buffer.length); } org.eclipse.swt.widgets.AlertStdCFStringAlertParamRec param = new org.eclipse.swt.widgets.AlertStdCFStringAlertParamRec(); param.version = OS.kStdCFStringAlertVersionOne; param.position = ((short) (OS.kWindowAlertPositionParentWindowScreen)); int defaultStr = 0; int cancelStr = 0; int otherStr = 0; int mask = ((((((SWT.YES) | (SWT.NO)) | (SWT.OK)) | (SWT.CANCEL)) | (SWT.ABORT)) | (SWT.RETRY)) | (SWT.IGNORE); int bits = (style) & mask; switch (bits) { case SWT.OK : param.defaultButton = ((short) (OS.kAlertStdAlertOKButton)); param.defaultText = OS.kAlertDefaultOKText; break; case SWT.CANCEL : param.defaultButton = ((short) (OS.kAlertStdAlertOKButton)); param.defaultText = defaultStr = createCFString("SWT_Cancel"); break; case (SWT.OK) | (SWT.CANCEL) : param.defaultButton = ((short) (OS.kAlertStdAlertOKButton)); param.defaultText = OS.kAlertDefaultOKText; param.cancelButton = ((short) (OS.kAlertStdAlertCancelButton)); param.cancelText = OS.kAlertDefaultCancelText; break; case SWT.YES : param.defaultButton = ((short) (OS.kAlertStdAlertOKButton)); param.defaultText = defaultStr = createCFString("SWT_Yes"); break; case SWT.NO : param.cancelButton = ((short) (OS.kAlertStdAlertOKButton)); param.cancelText = defaultStr = createCFString("SWT_No"); break; case (SWT.YES) | (SWT.NO) : param.defaultButton = ((short) (OS.kAlertStdAlertOKButton)); param.defaultText = defaultStr = createCFString("SWT_Yes"); param.cancelButton = ((short) (OS.kAlertStdAlertCancelButton)); param.cancelText = cancelStr = createCFString("SWT_No"); break; case ((SWT.YES) | (SWT.NO)) | (SWT.CANCEL) : param.defaultButton = ((short) (OS.kAlertStdAlertOKButton)); param.defaultText = defaultStr = createCFString("SWT_Yes"); param.otherText = cancelStr = createCFString("SWT_No"); param.cancelButton = ((short) (OS.kAlertStdAlertCancelButton)); param.cancelText = OS.kAlertDefaultCancelText; break; case (SWT.RETRY) | (SWT.CANCEL) : param.defaultButton = ((short) (OS.kAlertStdAlertOKButton)); param.defaultText = defaultStr = createCFString("SWT_Retry"); param.cancelButton = ((short) (OS.kAlertStdAlertCancelButton)); param.cancelText = OS.kAlertDefaultCancelText; break; case ((SWT.ABORT) | (SWT.RETRY)) | (SWT.IGNORE) : param.defaultButton = ((short) (OS.kAlertStdAlertOKButton)); param.defaultText = defaultStr = createCFString("SWT_Abort"); param.otherText = cancelStr = createCFString("SWT_Retry"); param.cancelButton = ((short) (OS.kAlertStdAlertCancelButton)); param.cancelText = otherStr = createCFString("SWT_Ignore"); break; } int[] dialogRef = new int[1]; org.eclipse.swt.widgets.OS.CreateStandardAlert(((short) (alertType)), error, explanation, param, dialogRef); if (error != 0) org.eclipse.swt.widgets.OS.CFRelease(error); if (explanation != 0) org.eclipse.swt.widgets.OS.CFRelease(explanation); if (defaultStr != 0) org.eclipse.swt.widgets.OS.CFRelease(defaultStr); if (cancelStr != 0) org.eclipse.swt.widgets.OS.CFRelease(cancelStr); if (otherStr != 0) org.eclipse.swt.widgets.OS.CFRelease(otherStr); if ((dialogRef[0]) != 0) { if (((style) & (SWT.SYSTEM_MODAL)) != 0) { org.eclipse.swt.widgets.OS.SetFrontProcessWithOptions(new int[]{ 0, OS.kCurrentProcess }, OS.kSetFrontProcessFrontWindowOnly); } org.eclipse.swt.widgets.Display display = ((parent) != null) ? parent.getDisplay() : org.eclipse.swt.widgets.Display.getCurrent(); org.eclipse.swt.widgets.Shell[] shells = display.getShells(); for (int i = 0; i < (shells.length); i++) { org.eclipse.swt.widgets.Shell shell = shells[i]; if (((((shell.style) & (SWT.ON_TOP)) != 0) && (!(shell.isDisposed()))) && (shell.isVisible())) { org.eclipse.swt.widgets.OS.SetWindowGroup(shell.shellHandle, org.eclipse.swt.widgets.OS.GetWindowGroupOfClass(OS.kFloatingWindowClass)); } else { shells[i] = null; } } display.setModalDialog(this); short[] outItemHit = new short[1]; org.eclipse.swt.widgets.OS.RunStandardAlert(dialogRef[0], 0, outItemHit); display.setModalDialog(null); for (int i = 0; i < (shells.length); i++) { org.eclipse.swt.widgets.Shell shell = shells[i]; if ((shell != null) && (!(shell.isDisposed()))) { org.eclipse.swt.widgets.OS.SetWindowGroup(shell.shellHandle, shell.getParentGroup()); } } if ((outItemHit[0]) != 0) { switch (bits) { case SWT.OK : return SWT.OK; case SWT.CANCEL : return SWT.CANCEL; case (SWT.OK) | (SWT.CANCEL) : if ((outItemHit[0]) == (OS.kAlertStdAlertOKButton)) return SWT.OK; return SWT.CANCEL; case SWT.YES : return SWT.YES; case SWT.NO : return SWT.NO; case (SWT.YES) | (SWT.NO) : if ((outItemHit[0]) == (OS.kAlertStdAlertOKButton)) return SWT.YES; return SWT.NO; case ((SWT.YES) | (SWT.NO)) | (SWT.CANCEL) : if ((outItemHit[0]) == (OS.kAlertStdAlertOKButton)) return SWT.YES; if ((outItemHit[0]) == (OS.kAlertStdAlertOtherButton)) return SWT.NO; return SWT.CANCEL; case (SWT.RETRY) | (SWT.CANCEL) : if ((outItemHit[0]) == (OS.kAlertStdAlertOKButton)) return SWT.RETRY; return SWT.CANCEL; case ((SWT.ABORT) | (SWT.RETRY)) | (SWT.IGNORE) : if ((outItemHit[0]) == (OS.kAlertStdAlertOKButton)) return SWT.ABORT; if ((outItemHit[0]) == (OS.kAlertStdAlertOtherButton)) return SWT.RETRY; return SWT.IGNORE; } } } return SWT.CANCEL; }
void handleMouseDown(org.eclipse.swt.custom.Event event) { forceFocus(); if ((dragDetect) && (checkDragDetect(event))) return; if ((event.button) == 2) { java.lang.String text = ((java.lang.String) (getClipboardContent(DND.SELECTION_CLIPBOARD))); if ((text != null) && ((text.length()) > 0)) { doMouseLocationChange(event.x, event.y, false); org.eclipse.swt.custom.Event e = new org.eclipse.swt.custom.Event(); e.start = selection.x; e.end = selection.y; e.text = getModelDelimitedText(text); sendKeyEvent(e); } } if (((event.button) != 1) || ((org.eclipse.swt.custom.StyledText.IS_CARBON) && (((event.stateMask) & (SWT.MOD4)) != 0))) { return; } clickCount = event.count; if ((clickCount) == 1) { boolean select = ((event.stateMask) & (SWT.MOD2)) != 0; doMouseLocationChange(event.x, event.y, select); } else { if (doubleClickEnabled) { clearSelection(false); int offset = getOffsetAtPoint(event.x, event.y); int lineIndex = content.getLineAtOffset(offset); int lineOffset = content.getOffsetAtLine(lineIndex); int lineEnd = content.getCharCount(); if ((lineIndex + 1) < (content.getLineCount())) { lineEnd = content.getOffsetAtLine((lineIndex + 1)); } int start; int end; if (((clickCount) & 1) == 0) { start = java.lang.Math.max(lineOffset, getWordPrevious(offset, SWT.MOVEMENT_WORD_START)); end = java.lang.Math.min(lineEnd, getWordNext(start, SWT.MOVEMENT_WORD_END)); } else { start = lineOffset; end = lineEnd; } selection.x = selection.y = start; selectionAnchor = -1; caretOffset = end; showCaret(); doMouseSelection(); doubleClickSelection = new org.eclipse.swt.custom.Point(selection.x, selection.y); } } }
void clearCustomWidths(org.eclipse.swt.widgets.TreeItem item) { item.customWidth = -1; for (int i = 0; i < (item.itemCount); i++) { clearCustomWidths(items[i]); } }
public void setVisible(boolean visible) { checkWidget(); realizeWidget(); if (visible) { sendEvent(SWT.Show); if (isDisposed()) return; org.eclipse.swt.widgets.OS.XtSetMappedWhenManaged(shellHandle, true); if (org.eclipse.swt.widgets.OS.XtIsTopLevelShell(shellHandle)) { org.eclipse.swt.widgets.OS.XtMapWidget(shellHandle); } else { org.eclipse.swt.widgets.OS.XtPopup(shellHandle, OS.XtGrabNone); } boolean iconic = false; org.eclipse.swt.widgets.Shell shell = ((parent) != null) ? parent.getShell() : null; do { display.update(); if (isDisposed()) return; iconic = (minimized) || ((shell != null) && (shell.minimized)); } while ((!(isVisible())) && (!iconic) ); if (!iconic) adjustTrim(); int mask = ((SWT.PRIMARY_MODAL) | (SWT.APPLICATION_MODAL)) | (SWT.APPLICATION_MODAL); if (((style) & mask) != 0) { org.eclipse.swt.widgets.OS.XUngrabPointer(display.xDisplay, OS.CurrentTime); } opened = true; if (!(moved)) { moved = true; org.eclipse.swt.widgets.Point location = getLocation(); oldX = (location.x) + (trimLeft()); oldY = (location.x) + (trimTop()); sendEvent(SWT.Move); if (isDisposed()) return; } if (!(resized)) { resized = true; org.eclipse.swt.widgets.Point size = getSize(); oldWidth = (size.x) - (trimWidth()); oldHeight = (size.y) - (trimHeight()); sendEvent(SWT.Resize); if (isDisposed()) return; if ((layout) != null) { markLayout(false, false); updateLayout(false); } } } else { if ((parent) != null) { org.eclipse.swt.widgets.Shell activeShell = display.getActiveShell(); if (activeShell == (this)) { org.eclipse.swt.widgets.Shell shell = parent.getShell(); shell.bringToTop(false); } } org.eclipse.swt.widgets.OS.XtSetMappedWhenManaged(shellHandle, false); if (org.eclipse.swt.widgets.OS.XtIsTopLevelShell(shellHandle)) { org.eclipse.swt.widgets.OS.XtUnmapWidget(shellHandle); } else { org.eclipse.swt.widgets.OS.XtPopdown(shellHandle); } int xDisplay = org.eclipse.swt.widgets.OS.XtDisplay(shellHandle); if (xDisplay == 0) return; int xWindow = org.eclipse.swt.widgets.OS.XtWindow(shellHandle); if (xWindow == 0) return; org.eclipse.swt.widgets.OS.XWithdrawWindow(xDisplay, xWindow, org.eclipse.swt.widgets.OS.XDefaultScreen(xDisplay)); sendEvent(SWT.Hide); } }
public void setImage(org.eclipse.swt.widgets.Image image) { super.setImage(image); parent.getHeader().setHeaderHeight(); }
public org.eclipse.swt.widgets.Point computeSize(int wHint, int hHint, boolean changed) { checkWidget(); org.eclipse.swt.internal.carbon.TXNLongRect oTextRect = new org.eclipse.swt.internal.carbon.TXNLongRect(); org.eclipse.swt.internal.carbon.OS.TXNGetRectBounds(txnObject, null, null, oTextRect); int width = (oTextRect.right) - (oTextRect.left); int height = (oTextRect.bottom) - (oTextRect.top); if (width <= 0) width = DEFAULT_WIDTH; if (height <= 0) height = DEFAULT_HEIGHT; if (wHint != (SWT.DEFAULT)) width = wHint; if (hHint != (SWT.DEFAULT)) height = hHint; org.eclipse.swt.widgets.Rectangle trim = computeTrim(0, 0, width, height); width = trim.width; height = trim.height; return new org.eclipse.swt.widgets.Point(width, height); }
boolean sendMouseEvent(org.eclipse.swt.widgets.NSEvent nsEvent, int type, boolean send) { org.eclipse.swt.widgets.NSInputManager manager = org.eclipse.swt.widgets.NSInputManager.currentInputManager(); if ((manager != null) && (manager.wantsToHandleMouseEvents())) { if (manager.handleMouseEvent(nsEvent)) { return true; } } org.eclipse.swt.widgets.Shell shell = null; org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); switch (type) { case SWT.MouseDown : shell = getShell(); case SWT.MouseUp : case SWT.MouseDoubleClick : int button = ((int) (nsEvent.buttonNumber())); switch (button) { case 0 : event.button = 1; break; case 1 : event.button = 3; break; case 2 : event.button = 2; break; case 3 : event.button = 4; break; case 4 : event.button = 5; break; } break; case SWT.MouseWheel : event.detail = SWT.SCROLL_LINE; float delta = nsEvent.deltaY(); event.count = (delta > 0) ? java.lang.Math.max(1, ((int) (delta))) : java.lang.Math.min((-1), ((int) (delta))); break; } if ((event.button) != 0) event.count = ((int) (nsEvent.clickCount())); org.eclipse.swt.widgets.NSPoint windowPoint; if ((nsEvent == null) || ((nsEvent.type()) == (OS.NSMouseMoved))) { windowPoint = view.window().convertScreenToBase(org.eclipse.swt.widgets.NSEvent.mouseLocation()); } else { windowPoint = nsEvent.locationInWindow(); } org.eclipse.swt.widgets.NSPoint point = view.convertPoint_fromView_(windowPoint, null); event.x = ((int) (point.x)); event.y = ((int) (point.y)); setInputState(event, nsEvent, type); if (send) { sendEvent(type, event); if (isDisposed()) return false; } else { postEvent(type, event); } if (shell != null) shell.setActiveControl(this); return event.doit; }
void handleResize(org.eclipse.swt.custom.Event event) { int oldHeight = clientAreaHeight; int oldWidth = clientAreaWidth; org.eclipse.swt.custom.Rectangle clientArea = getClientArea(); clientAreaHeight = clientArea.height; clientAreaWidth = clientArea.width; if (oldWidth != (clientAreaWidth)) { if ((rightMargin) > 0) { int x = (oldWidth < (clientAreaWidth) ? oldWidth : clientAreaWidth) - (rightMargin); super.redraw(x, 0, rightMargin, oldHeight, false); } } if (oldHeight != (clientAreaHeight)) { if ((bottomMargin) > 0) { int y = (oldHeight < (clientAreaHeight) ? oldHeight : clientAreaHeight) - (bottomMargin); super.redraw(0, y, oldWidth, bottomMargin, false); } } if (wordWrap) { if (oldWidth != (clientAreaWidth)) { renderer.reset(0, content.getLineCount()); verticalScrollOffset = -1; renderer.calculateIdle(); super.redraw(); } if (oldHeight != (clientAreaHeight)) { if (oldHeight == 0) topIndexY = 0; setScrollBars(true); } setCaretLocation(); } else { renderer.calculateClientArea(); setScrollBars(true); claimRightFreeSpace(); } claimBottomFreeSpace(); }
public boolean sleep() { checkDevice(); if ((getMessageCount()) != 0) return true; if ((loopCounter) == 0) { pool.release(); pool = ((org.eclipse.swt.widgets.NSAutoreleasePool) (new org.eclipse.swt.widgets.NSAutoreleasePool().alloc().init())); } try { allowTimers = runAsyncMessages = false; org.eclipse.swt.widgets.NSRunLoop.currentRunLoop().runMode(OS.NSDefaultRunLoopMode, org.eclipse.swt.widgets.NSDate.distantFuture()); allowTimers = runAsyncMessages = true; } catch (java.lang.Exception e) { e.printStackTrace(); } return true; }
boolean isOpaque(int id, int sel) { if (((state) & (CANVAS)) != 0) { if (id == (view.id)) { return ((((region) == null) && ((background) != null)) && ((background[3]) == 1)) && (!(isObscured())); } } return super.isOpaque(id, sel); }
void setBackgroundTransparent(boolean transparent) { int oldPixel = ((int) (org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_GETBKCOLOR, 0, 0))); if (transparent) { if (oldPixel != (OS.CLR_NONE)) { org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_SETBKCOLOR, 0, OS.CLR_NONE); org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_SETTEXTBKCOLOR, 0, OS.CLR_NONE); org.eclipse.swt.widgets.OS.InvalidateRect(handle, null, true); if ((!(explorerTheme)) && (((style) & (SWT.FULL_SELECTION)) != 0)) { int bits = OS.LVS_EX_FULLROWSELECT; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_SETEXTENDEDLISTVIEWSTYLE, bits, 0); } if (((sortDirection) & ((SWT.UP) | (SWT.DOWN))) != 0) { if (((sortColumn) != null) && (!(sortColumn.isDisposed()))) { org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_SETSELECTEDCOLUMN, (-1), 0); org.eclipse.swt.widgets.OS.InvalidateRect(handle, null, true); } } } } else { if (oldPixel == (OS.CLR_NONE)) { org.eclipse.swt.widgets.Control control = findBackgroundControl(); if (control == null) control = this; if ((control.backgroundImage) == null) { int newPixel = control.getBackgroundPixel(); org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_SETBKCOLOR, 0, newPixel); org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_SETTEXTBKCOLOR, 0, newPixel); if (((style) & (SWT.CHECK)) != 0) fixCheckboxImageListColor(true); org.eclipse.swt.widgets.OS.InvalidateRect(handle, null, true); } if ((!(explorerTheme)) && (((style) & (SWT.FULL_SELECTION)) != 0)) { if ((!(hooks(SWT.EraseItem))) && (!(hooks(SWT.PaintItem)))) { int bits = OS.LVS_EX_FULLROWSELECT; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_SETEXTENDEDLISTVIEWSTYLE, bits, bits); } } if (((sortDirection) & ((SWT.UP) | (SWT.DOWN))) != 0) { if (((sortColumn) != null) && (!(sortColumn.isDisposed()))) { int column = indexOf(sortColumn); if (column != (-1)) { org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_SETSELECTEDCOLUMN, column, 0); org.eclipse.swt.widgets.OS.InvalidateRect(handle, null, true); } } } } } }
public Cursor(org.eclipse.swt.graphics.Device device, org.eclipse.swt.graphics.ImageData source, org.eclipse.swt.graphics.ImageData mask, int hotspotX, int hotspotY) { if (device == null) device = org.eclipse.swt.graphics.Device.getDevice(); if (device == null) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NULL_ARGUMENT); this.device = device; if (source == null) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NULL_ARGUMENT); if (mask == null) { if (!((source.getTransparencyType()) == (SWT.TRANSPARENCY_MASK))) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NULL_ARGUMENT); mask = source.getTransparencyMask(); } if (((mask.width) != (source.width)) || ((mask.height) != (source.height))) { org.eclipse.swt.graphics.SWT.error(SWT.ERROR_INVALID_ARGUMENT); } if ((mask.depth) != 1) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_INVALID_ARGUMENT); if ((source.depth) != 1) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_INVALID_ARGUMENT); if ((((hotspotX >= (source.width)) || (hotspotX < 0)) || (hotspotY >= (source.height))) || (hotspotY < 0)) { org.eclipse.swt.graphics.SWT.error(SWT.ERROR_INVALID_ARGUMENT); } byte[] sourceData = new byte[source.data.length]; byte[] maskData = new byte[mask.data.length]; if ((source.scanlinePad) != 1) { int bytesPerLine = ((source.width) + 7) / 8; byte[] newSourceData = new byte[bytesPerLine * (source.height)]; org.eclipse.swt.graphics.ImageData newSource = new org.eclipse.swt.graphics.ImageData(source.width, source.height, 1, source.palette, 1, newSourceData); int[] sourcePixels = new int[source.width]; for (int y = 0; y < (source.height); y++) { source.getPixels(0, y, source.width, sourcePixels, 0); newSource.setPixels(0, y, newSource.width, sourcePixels, 0); } source = newSource; } byte[] data = source.data; for (int i = 0; i < (data.length); i++) { byte s = data[i]; sourceData[i] = ((byte) (((((((((s & 128) >> 7) | ((s & 64) >> 5)) | ((s & 32) >> 3)) | ((s & 16) >> 1)) | ((s & 8) << 1)) | ((s & 4) << 3)) | ((s & 2) << 5)) | ((s & 1) << 7))); sourceData[i] = ((byte) (~(sourceData[i]))); } if ((mask.scanlinePad) != 1) { int bytesPerLine = ((mask.width) + 7) / 8; byte[] newMaskData = new byte[bytesPerLine * (mask.height)]; org.eclipse.swt.graphics.ImageData newMask = new org.eclipse.swt.graphics.ImageData(mask.width, mask.height, 1, mask.palette, 1, newMaskData); int[] maskPixels = new int[mask.width]; for (int y = 0; y < (mask.height); y++) { mask.getPixels(0, y, mask.width, maskPixels, 0); newMask.setPixels(0, y, newMask.width, maskPixels, 0); } mask = newMask; } data = mask.data; for (int i = 0; i < (data.length); i++) { byte s = data[i]; maskData[i] = ((byte) (((((((((s & 128) >> 7) | ((s & 64) >> 5)) | ((s & 32) >> 3)) | ((s & 16) >> 1)) | ((s & 8) << 1)) | ((s & 4) << 3)) | ((s & 2) << 5)) | ((s & 1) << 7))); maskData[i] = ((byte) (~(maskData[i]))); } int sourcePixmap = org.eclipse.swt.graphics.OS.gdk_bitmap_create_from_data(0, sourceData, source.width, source.height); if (sourcePixmap == 0) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NO_HANDLES); int maskPixmap = org.eclipse.swt.graphics.OS.gdk_bitmap_create_from_data(0, maskData, source.width, source.height); if (maskPixmap == 0) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NO_HANDLES); org.eclipse.swt.graphics.GdkColor foreground = new org.eclipse.swt.graphics.GdkColor(); foreground.red = 0; foreground.green = 0; foreground.blue = 0; org.eclipse.swt.graphics.GdkColor background = new org.eclipse.swt.graphics.GdkColor(); background.red = ((short) (65535)); background.green = ((short) (65535)); background.blue = ((short) (65535)); handle = org.eclipse.swt.graphics.OS.gdk_cursor_new_from_pixmap(maskPixmap, sourcePixmap, foreground, background, hotspotX, hotspotY); org.eclipse.swt.graphics.OS.g_object_unref(sourcePixmap); org.eclipse.swt.graphics.OS.g_object_unref(maskPixmap); if ((handle) == 0) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NO_HANDLES); if (device.tracking) device.new_Object(this); }
protected org.eclipse.swt.layout.Point computeSize(org.eclipse.swt.layout.Composite composite, int wHint, int hHint, boolean flushCache) { org.eclipse.swt.layout.Point extent; if ((type) == (SWT.HORIZONTAL)) { extent = layoutHorizontal(composite, false, ((wHint != (SWT.DEFAULT)) && (wrap)), wHint, flushCache); } else { extent = layoutVertical(composite, false, ((hHint != (SWT.DEFAULT)) && (wrap)), wHint, flushCache); } if (wHint != (SWT.DEFAULT)) extent.x = wHint; if (hHint != (SWT.DEFAULT)) extent.y = hHint; return extent; }
void createHandle(int index) { state |= (HANDLE) | (CANVAS); if ((handle) == 0) { int type = OS.GTK_WINDOW_TOPLEVEL; if (((style) & (SWT.ON_TOP)) != 0) type = OS.GTK_WINDOW_POPUP; shellHandle = org.eclipse.swt.widgets.OS.gtk_window_new(type); } else { shellHandle = org.eclipse.swt.widgets.OS.gtk_plug_new(handle); } if ((shellHandle) == 0) org.eclipse.swt.widgets.SWT.error(SWT.ERROR_NO_HANDLES); if ((parent) != null) { org.eclipse.swt.widgets.OS.gtk_window_set_transient_for(shellHandle, parent.topHandle()); org.eclipse.swt.widgets.OS.gtk_window_set_destroy_with_parent(shellHandle, true); int orientations = (SWT.LEFT_TO_RIGHT) | (SWT.RIGHT_TO_LEFT); if (!((((style) & (~orientations)) == (SWT.NONE)) || (((style) & ((SWT.NO_TRIM) | (SWT.ON_TOP))) != 0))) { org.eclipse.swt.widgets.OS.gtk_window_set_type_hint(shellHandle, OS.GDK_WINDOW_TYPE_HINT_DIALOG); } } if (((style) & (SWT.RESIZE)) != 0) { org.eclipse.swt.widgets.OS.gtk_widget_set_size_request(shellHandle, 0, 0); org.eclipse.swt.widgets.OS.gtk_window_set_resizable(shellHandle, true); } else { org.eclipse.swt.widgets.OS.gtk_window_set_resizable(shellHandle, false); } createHandle(index, shellHandle, true); org.eclipse.swt.widgets.OS.gtk_widget_realize(shellHandle); int window = org.eclipse.swt.widgets.OS.GTK_WIDGET_WINDOW(shellHandle); int decorations = 0; if (((style) & (SWT.NO_TRIM)) == 0) { if (((style) & (SWT.MIN)) != 0) decorations |= OS.GDK_DECOR_MINIMIZE; if (((style) & (SWT.MAX)) != 0) decorations |= OS.GDK_DECOR_MAXIMIZE; if (((style) & (SWT.RESIZE)) != 0) decorations |= OS.GDK_DECOR_RESIZEH; if (((style) & (SWT.BORDER)) != 0) decorations |= OS.GDK_DECOR_BORDER; if (((style) & (SWT.MENU)) != 0) decorations |= OS.GDK_DECOR_MENU; if (((style) & (SWT.TITLE)) != 0) decorations |= OS.GDK_DECOR_TITLE; if (((style) & (SWT.RESIZE)) != 0) decorations |= OS.GDK_DECOR_BORDER; } org.eclipse.swt.widgets.OS.gdk_window_set_decorations(window, decorations); org.eclipse.swt.widgets.OS.gtk_window_set_title(shellHandle, new byte[1]); if (((style) & (SWT.ON_TOP)) != 0) { org.eclipse.swt.widgets.OS.gdk_window_set_override_redirect(window, true); } if (((style) & (((SWT.NO_TRIM) | (SWT.BORDER)) | (SWT.RESIZE))) == 0) { org.eclipse.swt.widgets.OS.gtk_container_set_border_width(shellHandle, 1); org.eclipse.swt.widgets.GdkColor color = new org.eclipse.swt.widgets.GdkColor(); org.eclipse.swt.widgets.OS.gtk_style_get_black(org.eclipse.swt.widgets.OS.gtk_widget_get_style(shellHandle), color); org.eclipse.swt.widgets.OS.gtk_widget_modify_bg(shellHandle, OS.GTK_STATE_NORMAL, color); } int bits = ((SWT.PRIMARY_MODAL) | (SWT.APPLICATION_MODAL)) | (SWT.SYSTEM_MODAL); boolean modal = ((style) & bits) != 0; if (((style) & (SWT.ON_TOP)) == 0) modal |= ((parent) != null) && (((parent.style) & bits) != 0); org.eclipse.swt.widgets.OS.gtk_window_set_modal(shellHandle, modal); }
boolean forceFocus(int focusHandle) { org.eclipse.swt.widgets.OS.gtk_widget_realize(focusHandle); org.eclipse.swt.widgets.OS.gtk_widget_grab_focus(focusHandle); org.eclipse.swt.widgets.Shell shell = getShell(); int shellHandle = shell.shellHandle; int handle = org.eclipse.swt.widgets.OS.gtk_window_get_focus(shellHandle); while (handle != 0) { if (handle == focusHandle) return true; org.eclipse.swt.widgets.Widget widget = display.getWidget(handle); if ((widget != null) && (widget instanceof org.eclipse.swt.widgets.Control)) { return widget == (this); } handle = org.eclipse.swt.widgets.OS.gtk_widget_get_parent(handle); } return false; }
org.eclipse.swt.widgets.LRESULT WM_SIZE(int wParam, int lParam) { if (ignoreResize) return null; if ((hooks(SWT.EraseItem)) || (hooks(SWT.PaintItem))) { org.eclipse.swt.widgets.OS.InvalidateRect(handle, null, true); } if ((resizeCount) != 0) { wasResized = true; return null; } return super.WM_SIZE(wParam, lParam); }
public java.lang.String getLocale() { java.lang.StringBuffer buffer = new java.lang.StringBuffer(); char sep = '_'; if ((this.lang) != null) { buffer.append(this.lang); buffer.append(sep); } if ((this.country) != null) { buffer.append(this.country); buffer.append(sep); } if ((this.variant) != null) { buffer.append(this.variant); } java.lang.String result = buffer.toString(); int length = result.length(); if ((result.charAt((length - 1))) == sep) { result = result.substring(0, (length - 1)); } return result; }
int widgetExtStyle() { int bits = (super.widgetExtStyle()) & (~(OS.WS_EX_MDICHILD)); if (!(OS.IsWinCE)) { if ((parent) == null) { if ((((style) & (SWT.NO_TRIM)) != 0) || (((style) & (SWT.TITLE)) == 0)) { bits |= OS.WS_EX_TOOLWINDOW; } } } if ((parent) != null) { if (OS.IsWin95) return bits; if ((((OS.WIN32_MAJOR) << 16) | (OS.WIN32_MINOR)) < ((4 << 16) | 10)) { return bits; } } if (((style) & (SWT.ON_TOP)) != 0) bits |= OS.WS_EX_TOPMOST; return bits; }
void setTableEmpty() { if ((imageList) != null) { int hImageList = org.eclipse.swt.widgets.OS.ImageList_Create(1, 1, 0, 0, 0); org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_SETIMAGELIST, OS.LVSIL_SMALL, hImageList); org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_SETIMAGELIST, OS.LVSIL_SMALL, 0); if ((headerImageList) != null) { int hHeaderImageList = headerImageList.getHandle(); int hwndHeader = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_GETHEADER, 0, 0); org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_SETIMAGELIST, 0, hHeaderImageList); } org.eclipse.swt.widgets.OS.ImageList_Destroy(hImageList); display.releaseImageList(imageList); imageList = null; if ((itemHeight) != (-1)) setItemHeight(false); } if (((style) & (SWT.VIRTUAL)) == 0) { if (((!(hooks(SWT.MeasureItem))) && (!(hooks(SWT.EraseItem)))) && (!(hooks(SWT.PaintItem)))) { customDraw = false; } } items = new org.eclipse.swt.widgets.TableItem[4]; ignoreItemHeight = false; int hwndHeader = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_GETHEADER, 0, 0); int count = org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0); if ((count == 1) && ((columns[0]) == null)) { org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_SETCOLUMNWIDTH, 0, 0); setScrollWidth(null, false); } }
public void setItemCount(int count) { checkWidget(); count = java.lang.Math.max(0, count); int itemCount = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_GETITEMCOUNT, 0, 0); if (count == itemCount) return; setDeferResize(true); boolean isVirtual = ((style) & (SWT.VIRTUAL)) != 0; if (!isVirtual) setRedraw(false); int index = count; while (index < itemCount) { org.eclipse.swt.widgets.TableItem item = items[index]; if ((item != null) && (!(item.isDisposed()))) item.release(false); if (!isVirtual) { ignoreSelect = ignoreShrink = true; int code = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_DELETEITEM, count, 0); ignoreSelect = ignoreShrink = false; if (code == 0) break; } index++; } if (index < itemCount) error(SWT.ERROR_ITEM_NOT_REMOVED); int length = java.lang.Math.max(4, (((count + 3) / 4) * 4)); org.eclipse.swt.widgets.TableItem[] newItems = new org.eclipse.swt.widgets.TableItem[length]; java.lang.System.arraycopy(items, 0, newItems, 0, java.lang.Math.min(count, itemCount)); items = newItems; if (isVirtual) { int flags = (OS.LVSICF_NOINVALIDATEALL) | (OS.LVSICF_NOSCROLL); org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_SETITEMCOUNT, count, flags); if ((count == 0) && (itemCount != 0)) { org.eclipse.swt.widgets.OS.InvalidateRect(handle, null, true); } } else { for (int i = itemCount; i < count; i++) { items[i] = new org.eclipse.swt.widgets.TableItem(this, SWT.NONE, i, true); } } if (!isVirtual) setRedraw(true); if (itemCount == 0) setScrollWidth(null, false); setDeferResize(false); }
java.lang.Object convertToJava(int ctx, int value) { int type = org.eclipse.swt.browser.WebKitGTK.JSValueGetType(ctx, value); switch (type) { case WebKitGTK.kJSTypeBoolean : { int result = ((int) (org.eclipse.swt.browser.WebKitGTK.JSValueToNumber(ctx, value, null))); return new java.lang.Boolean((result != 0)); } case WebKitGTK.kJSTypeNumber : { double result = org.eclipse.swt.browser.WebKitGTK.JSValueToNumber(ctx, value, null); return new java.lang.Double(result); } case WebKitGTK.kJSTypeString : { int string = org.eclipse.swt.browser.WebKitGTK.JSValueToStringCopy(ctx, value, null); if (string == 0) return ""; int length = org.eclipse.swt.browser.WebKitGTK.JSStringGetMaximumUTF8CStringSize(string); byte[] bytes = new byte[((int) (length))]; length = org.eclipse.swt.browser.WebKitGTK.JSStringGetUTF8CString(string, bytes, length); org.eclipse.swt.browser.WebKitGTK.JSStringRelease(string); try { return new java.lang.String(bytes, 0, (((int) (length)) - 1), org.eclipse.swt.browser.WebKit.CHARSET_UTF8); } catch (java.io.UnsupportedEncodingException e) { return new java.lang.String(org.eclipse.swt.browser.Converter.mbcsToWcs(null, bytes)); } } case WebKitGTK.kJSTypeNull : case WebKitGTK.kJSTypeUndefined : return null; case WebKitGTK.kJSTypeObject : { byte[] bytes = null; try { bytes = ((org.eclipse.swt.browser.WebKit.PROPERTY_LENGTH) + '\u0000').getBytes(org.eclipse.swt.browser.WebKit.CHARSET_UTF8); } catch (java.io.UnsupportedEncodingException e) { bytes = org.eclipse.swt.browser.Converter.wcsToMbcs(null, org.eclipse.swt.browser.WebKit.PROPERTY_LENGTH, true); } int propertyName = org.eclipse.swt.browser.WebKitGTK.JSStringCreateWithUTF8CString(bytes); int valuePtr = org.eclipse.swt.browser.WebKitGTK.JSObjectGetProperty(ctx, value, propertyName, null); org.eclipse.swt.browser.WebKitGTK.JSStringRelease(propertyName); type = org.eclipse.swt.browser.WebKitGTK.JSValueGetType(ctx, valuePtr); if (type == (WebKitGTK.kJSTypeNumber)) { int length = ((int) (org.eclipse.swt.browser.WebKitGTK.JSValueToNumber(ctx, valuePtr, null))); java.lang.Object[] result = new java.lang.Object[length]; for (int i = 0; i < length; i++) { int current = org.eclipse.swt.browser.WebKitGTK.JSObjectGetPropertyAtIndex(ctx, value, i, null); if (current != 0) { result[i] = convertToJava(ctx, current); } } return result; } } } org.eclipse.swt.browser.SWT.error(SWT.ERROR_INVALID_ARGUMENT); return null; }
java.lang.String computeResultChooserDialog() { fullPath = null; if (((style) & (SWT.MULTI)) != 0) { int list = 0; if (uriMode) { list = org.eclipse.swt.widgets.OS.gtk_file_chooser_get_uris(handle); } else { list = org.eclipse.swt.widgets.OS.gtk_file_chooser_get_filenames(handle); } int listLength = org.eclipse.swt.widgets.OS.g_slist_length(list); fileNames = new java.lang.String[listLength]; int current = list; int writePos = 0; for (int i = 0; i < listLength; i++) { int name = org.eclipse.swt.widgets.OS.g_slist_data(current); int utf8Ptr = 0; if (uriMode) { utf8Ptr = name; } else { utf8Ptr = org.eclipse.swt.widgets.OS.g_filename_to_utf8(name, (-1), null, null, null); org.eclipse.swt.widgets.OS.g_free(name); } if (utf8Ptr != 0) { int[] items_written = new int[1]; int utf16Ptr = org.eclipse.swt.widgets.OS.g_utf8_to_utf16(utf8Ptr, (-1), null, items_written, null); org.eclipse.swt.widgets.OS.g_free(utf8Ptr); if (utf16Ptr != 0) { int clength = ((int) (items_written[0])); char[] chars = new char[clength]; org.eclipse.swt.widgets.OS.memmove(chars, utf16Ptr, (clength * 2)); org.eclipse.swt.widgets.OS.g_free(utf16Ptr); fullPath = new java.lang.String(chars); fileNames[(writePos++)] = fullPath.substring(((fullPath.lastIndexOf(org.eclipse.swt.widgets.FileDialog.SEPARATOR)) + 1)); } } current = org.eclipse.swt.widgets.OS.g_slist_next(current); } if ((writePos != 0) && (writePos != listLength)) { java.lang.String[] validFileNames = new java.lang.String[writePos]; java.lang.System.arraycopy(fileNames, 0, validFileNames, 0, writePos); fileNames = validFileNames; } org.eclipse.swt.widgets.OS.g_slist_free(list); } else { int utf8Ptr = 0; if (uriMode) { utf8Ptr = org.eclipse.swt.widgets.OS.gtk_file_chooser_get_uri(handle); } else { int path = org.eclipse.swt.widgets.OS.gtk_file_chooser_get_filename(handle); if (path != 0) { utf8Ptr = org.eclipse.swt.widgets.OS.g_filename_to_utf8(path, (-1), null, null, null); org.eclipse.swt.widgets.OS.g_free(path); } } if (utf8Ptr != 0) { int[] items_written = new int[1]; int utf16Ptr = org.eclipse.swt.widgets.OS.g_utf8_to_utf16(utf8Ptr, (-1), null, items_written, null); org.eclipse.swt.widgets.OS.g_free(utf8Ptr); if (utf16Ptr != 0) { int clength = ((int) (items_written[0])); char[] chars = new char[clength]; org.eclipse.swt.widgets.OS.memmove(chars, utf16Ptr, (clength * 2)); org.eclipse.swt.widgets.OS.g_free(utf16Ptr); fullPath = new java.lang.String(chars); fileNames = new java.lang.String[1]; fileNames[0] = fullPath.substring(((fullPath.lastIndexOf(org.eclipse.swt.widgets.FileDialog.SEPARATOR)) + 1)); } } } filterIndex = -1; int filter = org.eclipse.swt.widgets.OS.gtk_file_chooser_get_filter(handle); if (filter != 0) { int filterNamePtr = org.eclipse.swt.widgets.OS.gtk_file_filter_get_name(filter); if (filterNamePtr != 0) { int length = org.eclipse.swt.widgets.OS.strlen(filterNamePtr); byte[] buffer = new byte[length]; org.eclipse.swt.widgets.OS.memmove(buffer, filterNamePtr, length); java.lang.String filterName = new java.lang.String(org.eclipse.swt.widgets.Converter.mbcsToWcs(null, buffer)); for (int i = 0; i < (filterExtensions.length); i++) { if ((filterNames.length) > 0) { if (filterNames[i].equals(filterName)) { filterIndex = i; break; } } else { if (filterExtensions[i].equals(filterName)) { filterIndex = i; break; } } } } } if ((fullPath) != null) { int separatorIndex = fullPath.lastIndexOf(org.eclipse.swt.widgets.FileDialog.SEPARATOR); fileName = fullPath.substring((separatorIndex + 1)); filterPath = fullPath.substring(0, separatorIndex); int fileExtensionIndex = fileName.indexOf(org.eclipse.swt.widgets.FileDialog.FILE_EXTENSION_SEPARATOR); if (((((style) & (SWT.SAVE)) != 0) && (fileExtensionIndex == (-1))) && ((filterIndex) != (-1))) { if ((filterExtensions.length) > (filterIndex)) { java.lang.String selection = filterExtensions[filterIndex]; int length = selection.length(); int index = selection.indexOf(org.eclipse.swt.widgets.FileDialog.EXTENSION_SEPARATOR); if (index == (-1)) index = length; java.lang.String extension = selection.substring(0, index).trim(); if ((!(extension.equals("*"))) && (!(extension.equals("*.*")))) { if (extension.startsWith("*.")) extension = extension.substring(1); fullPath = (fullPath) + extension; } } } } return fullPath; }
StyledTextRenderer(org.eclipse.swt.custom.Device device, org.eclipse.swt.custom.Font regularFont, boolean isBidi, int leftMargin) { org.eclipse.swt.custom.FontData[] fontDatas = regularFont.getFontData(); for (int i = 0; i < (fontDatas.length); i++) { fontDatas[i].setStyle(((fontDatas[i].getStyle()) | (SWT.BOLD))); } boldFont = new org.eclipse.swt.custom.Font(device, fontDatas); this.device = device; this.regularFont = regularFont; this.isBidi = isBidi; this.leftMargin = leftMargin; }
java.lang.Object convertToJava(int value) { if ((org.eclipse.swt.browser.Cocoa.objc_msgSend(value, Cocoa.S_isKindOfClass, Cocoa.C_NSString)) != 0) { int length = org.eclipse.swt.browser.Cocoa.objc_msgSend(value, Cocoa.S_length); char[] buffer = new char[length]; org.eclipse.swt.browser.Cocoa.objc_msgSend(value, Cocoa.S_getCharacters_, buffer); return new java.lang.String(buffer); } if ((org.eclipse.swt.browser.Cocoa.objc_msgSend(value, Cocoa.S_isKindOfClass, Cocoa.C_NSNumber)) != 0) { int ptr = org.eclipse.swt.browser.Cocoa.objc_msgSend(value, Cocoa.S_objCType); byte[] type = new byte[1]; org.eclipse.swt.browser.OS.memmove(type, ptr, 1); if (((type[0]) == 'c') || ((type[0]) == 'B')) { int result = org.eclipse.swt.browser.Cocoa.objc_msgSend(value, Cocoa.S_boolValue); return new java.lang.Boolean((result != 0)); } if (("islqISLQfd".indexOf(type[0])) != (-1)) { double result = org.eclipse.swt.browser.Cocoa.objc_msgSend_fpret(value, Cocoa.S_doubleValue); return new java.lang.Double(result); } } if ((org.eclipse.swt.browser.Cocoa.objc_msgSend(value, Cocoa.S_isKindOfClass, Cocoa.C_WebScriptObject)) != 0) { java.lang.String string = "length"; char[] chars = new char[string.length()]; string.getChars(0, chars.length, chars, 0); int str = org.eclipse.swt.browser.OS.CFStringCreateWithCharacters(0, chars, chars.length); int numberValue = org.eclipse.swt.browser.Cocoa.objc_msgSend(value, Cocoa.S_valueForKey, str); org.eclipse.swt.browser.OS.CFRelease(str); int length = org.eclipse.swt.browser.Cocoa.objc_msgSend(numberValue, Cocoa.S_intValue); java.lang.Object[] arguments = new java.lang.Object[length]; for (int i = 0; i < length; i++) { int current = org.eclipse.swt.browser.Cocoa.objc_msgSend(value, Cocoa.S_webScriptValueAtIndex, i); if (current != 0) { arguments[i] = convertToJava(current); } } return arguments; } if ((org.eclipse.swt.browser.Cocoa.objc_msgSend(value, Cocoa.S_isKindOfClass, Cocoa.C_WebUndefined)) != 0) { return null; } org.eclipse.swt.browser.SWT.error(SWT.ERROR_INVALID_ARGUMENT); return null; }
boolean sendMouseEvent(org.eclipse.swt.widgets.NSEvent nsEvent, int type, boolean send) { boolean handleMouseDown = true; if (nsEvent != null) { long nsType = nsEvent.type(); handleMouseDown = (nsType == (OS.NSLeftMouseDown)) || (nsType == (OS.NSLeftMouseUp)); } if (handleMouseDown) { if (type == (SWT.MouseDown)) { mouseIsDown = true; } else if ((type == (SWT.MouseUp)) || (type == (SWT.DragDetect))) { mouseIsDown = false; if (rowsChanged) { rowsChanged = false; ((org.eclipse.swt.widgets.NSTableView) (view)).noteNumberOfRowsChanged(); } } } return super.sendMouseEvent(nsEvent, type, send); }
boolean mouseEvent(int id, int sel, int theEvent, int type) { if (!(display.sendEvent)) return true; display.sendEvent = false; if (!(isEventView(id))) return true; boolean dragging = false; boolean[] consume = null; org.eclipse.swt.widgets.NSEvent nsEvent = new org.eclipse.swt.widgets.NSEvent(theEvent); int nsType = ((int) (nsEvent.type())); org.eclipse.swt.widgets.NSInputManager manager = org.eclipse.swt.widgets.NSInputManager.currentInputManager(); if ((manager != null) && (manager.wantsToHandleMouseEvents())) { if (manager.handleMouseEvent(nsEvent)) { return true; } } boolean runEnterExit = false; org.eclipse.swt.widgets.Control runEnterExitControl = null; switch (nsType) { case OS.NSLeftMouseDown : if (((((nsEvent.clickCount()) == 1) && (((nsEvent.modifierFlags()) & (OS.NSControlKeyMask)) == 0)) && (((state) & (DRAG_DETECT)) != 0)) && (hooks(SWT.DragDetect))) { consume = new boolean[1]; org.eclipse.swt.widgets.NSPoint location = view.convertPoint_fromView_(nsEvent.locationInWindow(), null); if (!(view.isFlipped())) { location.y = (view.bounds().height) - (location.y); } dragging = dragDetect(((int) (location.x)), ((int) (location.y)), false, consume); } break; case OS.NSLeftMouseDragged : case OS.NSRightMouseDragged : case OS.NSOtherMouseDragged : runEnterExit = true; runEnterExitControl = this; break; case OS.NSLeftMouseUp : case OS.NSRightMouseUp : case OS.NSOtherMouseUp : if ((display.clickCount) == 2) { sendMouseEvent(nsEvent, SWT.MouseDoubleClick, false); } runEnterExit = true; runEnterExitControl = display.findControl(true); break; } sendMouseEvent(nsEvent, type, false); if (dragging) sendMouseEvent(nsEvent, SWT.DragDetect, false); if (runEnterExit) display.checkEnterExit(runEnterExitControl, nsEvent, false); if ((consume != null) && (consume[0])) return false; return true; }
org.eclipse.swt.widgets.LRESULT wmNotify(org.eclipse.swt.widgets.NMHDR hdr, int wParam, int lParam) { if (((hdr.hwndFrom) == (itemToolTipHandle)) && ((hwndHeader) != 0)) { if (!(OS.IsWinCE)) { switch (hdr.code) { case OS.TTN_POP : { if (display.isXMouseActive()) { org.eclipse.swt.widgets.Shell shell = getShell(); shell.lockToolTipControl = null; } break; } case OS.TTN_SHOW : { if (display.isXMouseActive()) { org.eclipse.swt.widgets.Shell shell = getShell(); shell.lockToolTipControl = this; } int pos = org.eclipse.swt.widgets.OS.GetMessagePos(); org.eclipse.swt.widgets.POINT pt = new org.eclipse.swt.widgets.POINT(); pt.x = ((short) (pos & 65535)); pt.y = ((short) (pos >> 16)); org.eclipse.swt.widgets.OS.ScreenToClient(handle, pt); org.eclipse.swt.widgets.TVHITTESTINFO lpht = new org.eclipse.swt.widgets.TVHITTESTINFO(); lpht.x = pt.x; lpht.y = pt.y; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_HITTEST, 0, lpht); if ((lpht.hItem) != 0) { int hDC = org.eclipse.swt.widgets.OS.GetDC(handle); int oldFont = 0; int newFont = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.WM_GETFONT, 0, 0); if (newFont != 0) oldFont = org.eclipse.swt.widgets.OS.SelectObject(hDC, newFont); org.eclipse.swt.widgets.LRESULT result = null; org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); org.eclipse.swt.widgets.OS.GetClientRect(hwndParent, rect); org.eclipse.swt.widgets.OS.MapWindowPoints(hwndParent, handle, rect, 2); org.eclipse.swt.widgets.TreeItem item = _getItem(lpht.hItem); int index = 0; int count = java.lang.Math.max(1, org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0)); int[] order = new int[count]; org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETORDERARRAY, count, order); while (index < count) { int hFont = ((item.cellFont) != null) ? item.cellFont[order[index]] : -1; if (hFont == (-1)) hFont = item.font; if (hFont != (-1)) hFont = org.eclipse.swt.widgets.OS.SelectObject(hDC, hFont); org.eclipse.swt.widgets.RECT cellRect = item.getBounds(order[index], true, false, true, false, true, hDC); if (hFont != (-1)) org.eclipse.swt.widgets.OS.SelectObject(hDC, hFont); if ((cellRect.left) > (rect.right)) break; cellRect.right = java.lang.Math.min(cellRect.right, rect.right); if (org.eclipse.swt.widgets.OS.PtInRect(cellRect, pt)) { org.eclipse.swt.widgets.RECT textRect = item.getBounds(order[index], true, false, false, false, false, hDC); if ((textRect.right) > (cellRect.right)) { org.eclipse.swt.widgets.OS.MapWindowPoints(handle, 0, textRect, 2); int flags = ((OS.SWP_NOACTIVATE) | (OS.SWP_NOSIZE)) | (OS.SWP_NOZORDER); SetWindowPos(itemToolTipHandle, 0, textRect.left, textRect.top, 0, 0, flags); result = LRESULT.ONE; } break; } index++; } if (newFont != 0) org.eclipse.swt.widgets.OS.SelectObject(hDC, oldFont); org.eclipse.swt.widgets.OS.ReleaseDC(handle, hDC); if (result != null) return result; } } } } } if ((hdr.hwndFrom) == (hwndHeader)) { switch (hdr.code) { case OS.HDN_BEGINTRACKW : case OS.HDN_BEGINTRACKA : case OS.HDN_DIVIDERDBLCLICKW : case OS.HDN_DIVIDERDBLCLICKA : { org.eclipse.swt.widgets.NMHEADER phdn = new org.eclipse.swt.widgets.NMHEADER(); org.eclipse.swt.widgets.OS.MoveMemory(phdn, lParam, NMHEADER.sizeof); org.eclipse.swt.widgets.TreeColumn column = columns[phdn.iItem]; if ((column != null) && (!(column.getResizable()))) { return LRESULT.ONE; } ignoreColumnMove = true; switch (hdr.code) { case OS.HDN_DIVIDERDBLCLICKW : case OS.HDN_DIVIDERDBLCLICKA : if (column != null) column.pack(); } break; } case OS.NM_RELEASEDCAPTURE : { if (!(ignoreColumnMove)) { int count = org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0); for (int i = 0; i < count; i++) { org.eclipse.swt.widgets.TreeColumn column = columns[i]; column.updateToolTip(i); } updateImageList(); } ignoreColumnMove = false; break; } case OS.HDN_BEGINDRAG : { if (ignoreColumnMove) return LRESULT.ONE; org.eclipse.swt.widgets.NMHEADER phdn = new org.eclipse.swt.widgets.NMHEADER(); org.eclipse.swt.widgets.OS.MoveMemory(phdn, lParam, NMHEADER.sizeof); if ((phdn.iItem) != (-1)) { org.eclipse.swt.widgets.TreeColumn column = columns[phdn.iItem]; if ((column != null) && (!(column.getMoveable()))) { ignoreColumnMove = true; return LRESULT.ONE; } } break; } case OS.HDN_ENDDRAG : { org.eclipse.swt.widgets.NMHEADER phdn = new org.eclipse.swt.widgets.NMHEADER(); org.eclipse.swt.widgets.OS.MoveMemory(phdn, lParam, NMHEADER.sizeof); if (((phdn.iItem) != (-1)) && ((phdn.pitem) != 0)) { org.eclipse.swt.widgets.HDITEM pitem = new org.eclipse.swt.widgets.HDITEM(); org.eclipse.swt.widgets.OS.MoveMemory(pitem, phdn.pitem, HDITEM.sizeof); if ((((pitem.mask) & (OS.HDI_ORDER)) != 0) && ((pitem.iOrder) != (-1))) { int count = org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0); int[] order = new int[count]; org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETORDERARRAY, count, order); int index = 0; while (index < (order.length)) { if ((order[index]) == (phdn.iItem)) break; index++; } if (index == (order.length)) index = 0; if (index == (pitem.iOrder)) break; int start = java.lang.Math.min(index, pitem.iOrder); int end = java.lang.Math.max(index, pitem.iOrder); org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); org.eclipse.swt.widgets.RECT headerRect = new org.eclipse.swt.widgets.RECT(); org.eclipse.swt.widgets.OS.GetClientRect(handle, rect); org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEMRECT, order[start], headerRect); rect.left = java.lang.Math.max(rect.left, headerRect.left); org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEMRECT, order[end], headerRect); rect.right = java.lang.Math.min(rect.right, headerRect.right); org.eclipse.swt.widgets.OS.InvalidateRect(handle, rect, true); ignoreColumnMove = false; for (int i = start; i <= end; i++) { org.eclipse.swt.widgets.TreeColumn column = columns[order[i]]; if (!(column.isDisposed())) { column.postEvent(SWT.Move); } } } } break; } case OS.HDN_ITEMCHANGINGW : case OS.HDN_ITEMCHANGINGA : { org.eclipse.swt.widgets.NMHEADER phdn = new org.eclipse.swt.widgets.NMHEADER(); org.eclipse.swt.widgets.OS.MoveMemory(phdn, lParam, NMHEADER.sizeof); if ((phdn.pitem) != 0) { org.eclipse.swt.widgets.HDITEM newItem = new org.eclipse.swt.widgets.HDITEM(); org.eclipse.swt.widgets.OS.MoveMemory(newItem, phdn.pitem, HDITEM.sizeof); if (((newItem.mask) & (OS.HDI_WIDTH)) != 0) { org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); org.eclipse.swt.widgets.OS.GetClientRect(handle, rect); org.eclipse.swt.widgets.RECT headerRect = new org.eclipse.swt.widgets.RECT(); int count = org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0); int index = org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_ORDERTOINDEX, (count - 1), 0); org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEMRECT, index, headerRect); rect.right = java.lang.Math.max(rect.right, headerRect.right); org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEMRECT, phdn.iItem, headerRect); int gridWidth = (linesVisible) ? org.eclipse.swt.widgets.Tree.GRID_WIDTH : 0; rect.left = (headerRect.right) - gridWidth; org.eclipse.swt.widgets.HDITEM oldItem = new org.eclipse.swt.widgets.HDITEM(); oldItem.mask = OS.HDI_WIDTH; org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEM, phdn.iItem, oldItem); int deltaX = (newItem.cxy) - (oldItem.cxy); if ((explorerTheme) || ((((findImageControl()) != null) || (hooks(SWT.EraseItem))) || (hooks(SWT.PaintItem)))) { org.eclipse.swt.widgets.OS.InvalidateRect(handle, rect, true); org.eclipse.swt.widgets.OS.OffsetRect(rect, deltaX, 0); org.eclipse.swt.widgets.OS.InvalidateRect(handle, rect, true); } else { int flags = (OS.SW_INVALIDATE) | (OS.SW_ERASE); org.eclipse.swt.widgets.OS.ScrollWindowEx(handle, deltaX, 0, rect, null, 0, null, flags); } if ((org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_ORDERTOINDEX, phdn.iItem, 0)) != 0) { rect.left = headerRect.left; rect.right = headerRect.right; org.eclipse.swt.widgets.OS.InvalidateRect(handle, rect, true); } setScrollWidth(); } } break; } case OS.HDN_ITEMCHANGEDW : case OS.HDN_ITEMCHANGEDA : { org.eclipse.swt.widgets.NMHEADER phdn = new org.eclipse.swt.widgets.NMHEADER(); org.eclipse.swt.widgets.OS.MoveMemory(phdn, lParam, NMHEADER.sizeof); if ((phdn.pitem) != 0) { org.eclipse.swt.widgets.HDITEM pitem = new org.eclipse.swt.widgets.HDITEM(); org.eclipse.swt.widgets.OS.MoveMemory(pitem, phdn.pitem, HDITEM.sizeof); if (((pitem.mask) & (OS.HDI_WIDTH)) != 0) { if (ignoreColumnMove) { if ((!(OS.IsWinCE)) && ((OS.WIN32_VERSION) >= (org.eclipse.swt.widgets.OS.VERSION(6, 0)))) { int flags = (OS.RDW_UPDATENOW) | (OS.RDW_ALLCHILDREN); org.eclipse.swt.widgets.OS.RedrawWindow(handle, null, 0, flags); } else { if (((style) & (SWT.DOUBLE_BUFFERED)) == 0) { int oldStyle = style; style |= SWT.DOUBLE_BUFFERED; org.eclipse.swt.widgets.OS.UpdateWindow(handle); style = oldStyle; } } } org.eclipse.swt.widgets.TreeColumn column = columns[phdn.iItem]; if (column != null) { column.updateToolTip(phdn.iItem); column.sendEvent(SWT.Resize); if (isDisposed()) return LRESULT.ZERO; int count = org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0); org.eclipse.swt.widgets.TreeColumn[] newColumns = new org.eclipse.swt.widgets.TreeColumn[count]; java.lang.System.arraycopy(columns, 0, newColumns, 0, count); int[] order = new int[count]; org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETORDERARRAY, count, order); boolean moved = false; for (int i = 0; i < count; i++) { org.eclipse.swt.widgets.TreeColumn nextColumn = newColumns[order[i]]; if (moved && (!(nextColumn.isDisposed()))) { nextColumn.updateToolTip(order[i]); nextColumn.sendEvent(SWT.Move); } if (nextColumn == column) moved = true; } } } setScrollWidth(); } break; } case OS.HDN_ITEMCLICKW : case OS.HDN_ITEMCLICKA : { org.eclipse.swt.widgets.NMHEADER phdn = new org.eclipse.swt.widgets.NMHEADER(); org.eclipse.swt.widgets.OS.MoveMemory(phdn, lParam, NMHEADER.sizeof); org.eclipse.swt.widgets.TreeColumn column = columns[phdn.iItem]; if (column != null) { column.postEvent(SWT.Selection); } break; } case OS.HDN_ITEMDBLCLICKW : case OS.HDN_ITEMDBLCLICKA : { org.eclipse.swt.widgets.NMHEADER phdn = new org.eclipse.swt.widgets.NMHEADER(); org.eclipse.swt.widgets.OS.MoveMemory(phdn, lParam, NMHEADER.sizeof); org.eclipse.swt.widgets.TreeColumn column = columns[phdn.iItem]; if (column != null) { column.postEvent(SWT.DefaultSelection); } break; } } } return super.wmNotify(hdr, wParam, lParam); }
static int getParentType(int widgetType) { org.eclipse.swt.accessibility.LONG type = null; while ((widgetType != 0) && ((type = ((org.eclipse.swt.accessibility.LONG) (org.eclipse.swt.accessibility.AccessibleFactory.Factories.get(new org.eclipse.swt.accessibility.LONG(widgetType))))) == null)) { widgetType = org.eclipse.swt.accessibility.OS.g_type_parent(widgetType); } if (type == null) return 0; return ((org.eclipse.swt.accessibility.LONG) (type)).value; }
public void setExpanded(boolean expanded) { checkWidget(); int hwnd = parent.handle; int hOldItem = org.eclipse.swt.widgets.OS.SendMessage(hwnd, OS.TVM_GETNEXTITEM, OS.TVGN_CARET, 0); parent.ignoreExpand = true; org.eclipse.swt.widgets.OS.SendMessage(hwnd, OS.TVM_EXPAND, (expanded ? OS.TVE_EXPAND : OS.TVE_COLLAPSE), handle); parent.ignoreExpand = false; int hNewItem = org.eclipse.swt.widgets.OS.SendMessage(hwnd, OS.TVM_GETNEXTITEM, OS.TVGN_CARET, 0); if (hNewItem != hOldItem) { org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); if (hNewItem != 0) { org.eclipse.swt.widgets.TVITEM tvItem = new org.eclipse.swt.widgets.TVITEM(); tvItem.mask = (OS.TVIF_HANDLE) | (OS.TVIF_PARAM); tvItem.hItem = hNewItem; if ((org.eclipse.swt.widgets.OS.SendMessage(hwnd, OS.TVM_GETITEM, 0, tvItem)) != 0) { event.item = parent.items[tvItem.lParam]; } parent.hAnchor = hNewItem; } parent.sendEvent(SWT.Selection, event); } }
boolean hasLink(int offset) { if (offset == (-1)) return false; int lineIndex = content.getLineAtOffset(offset); int lineOffset = content.getOffsetAtLine(lineIndex); java.lang.String line = content.getLine(lineIndex); org.eclipse.swt.custom.StyledTextEvent event = styledText.getLineStyleData(lineOffset, line); if (event != null) { org.eclipse.swt.custom.StyleRange[] styles = event.styles; if (styles != null) { int[] ranges = event.ranges; if (ranges != null) { for (int i = 0; i < (ranges.length); i += 2) { if (((((ranges[i]) <= offset) && (offset < ((ranges[i]) + (ranges[(i + 1)])))) && (styles[(i >> 1)].underline)) && ((styles[(i >> 1)].underlineStyle) == (org.eclipse.swt.SWT.UNDERLINE_LINK))) { return true; } } } else { for (int i = 0; i < (styles.length); i++) { if (((((styles[i].start) <= offset) && (offset < ((styles[i].start) + (styles[i].length)))) && (styles[(i >> 1)].underline)) && ((styles[(i >> 1)].underlineStyle) == (org.eclipse.swt.SWT.UNDERLINE_LINK))) { return true; } } } } } else { if ((ranges) != null) { int rangeCount = (styleCount) << 1; int index = getRangeIndex(offset, (-1), rangeCount); if (index >= rangeCount) return false; int rangeStart = ranges[index]; int rangeLength = ranges[(index + 1)]; org.eclipse.swt.custom.StyleRange rangeStyle = styles[(index >> 1)]; if ((((rangeStart <= offset) && (offset < (rangeStart + rangeLength))) && (rangeStyle.underline)) && ((rangeStyle.underlineStyle) == (org.eclipse.swt.SWT.UNDERLINE_LINK))) { return true; } } } return false; }
org.eclipse.swt.widgets.LRESULT WM_SETFOCUS(int wParam, int lParam) { org.eclipse.swt.widgets.LRESULT result = super.WM_SETFOCUS(wParam, lParam); if (isDisposed()) return result; if ((savedFocus) != (this)) restoreFocus(); return result; }
org.eclipse.swt.widgets.Rectangle getBounds() { checkWidget(); if (!(gtk_widget_get_mapped(handle))) { return new org.eclipse.swt.widgets.Rectangle(0, 0, 0, 0); } long window = gtk_widget_get_window(handle); int[] origin_x = new int[1]; int[] origin_y = new int[1]; org.eclipse.swt.widgets.OS.gdk_window_get_origin(window, origin_x, origin_y); org.eclipse.swt.widgets.GtkAllocation allocation = new org.eclipse.swt.widgets.GtkAllocation(); gtk_widget_get_allocation(handle, allocation); int x = (origin_x[0]) + (allocation.x); int y = (origin_y[0]) + (allocation.y); int width = allocation.width; int height = allocation.height; return new org.eclipse.swt.widgets.Rectangle(x, y, width, height); }
int gtk_clicked(int widget) { org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); if (((style) & (SWT.DROP_DOWN)) != 0) { int eventPtr = org.eclipse.swt.widgets.OS.gtk_get_current_event(); if (eventPtr != 0) { org.eclipse.swt.widgets.GdkEvent gdkEvent = new org.eclipse.swt.widgets.GdkEvent(); org.eclipse.swt.widgets.OS.memmove(gdkEvent, eventPtr, GdkEvent.sizeof); switch (gdkEvent.type) { case OS.GDK_BUTTON_PRESS : case OS.GDK_2BUTTON_PRESS : case OS.GDK_BUTTON_RELEASE : { double[] x_win = new double[1]; double[] y_win = new double[1]; org.eclipse.swt.widgets.OS.gdk_event_get_coords(eventPtr, x_win, y_win); int x = (org.eclipse.swt.widgets.OS.GTK_WIDGET_X(arrowHandle)) - (org.eclipse.swt.widgets.OS.GTK_WIDGET_X(handle)); int width = org.eclipse.swt.widgets.OS.GTK_WIDGET_WIDTH(arrowHandle); if (((((state) & (SWT.RIGHT_TO_LEFT)) == 0) && (x <= ((int) (x_win[0])))) || ((((state) & (SWT.RIGHT_TO_LEFT)) != 0) && (((int) (x_win[0])) <= (x + width)))) { event.detail = SWT.ARROW; int topHandle = topHandle(); event.x = org.eclipse.swt.widgets.OS.GTK_WIDGET_X(topHandle); event.y = (org.eclipse.swt.widgets.OS.GTK_WIDGET_Y(topHandle)) + (org.eclipse.swt.widgets.OS.GTK_WIDGET_HEIGHT(topHandle)); } break; } } org.eclipse.swt.widgets.OS.gdk_event_free(eventPtr); } } if (((style) & (SWT.RADIO)) != 0) { if (((parent.getStyle()) & (SWT.NO_RADIO_GROUP)) == 0) { selectRadio(); } } postEvent(SWT.Selection, event); return 0; }
static long applicationProc(long id, long sel, long arg0, long arg1) { org.eclipse.swt.widgets.Display display = org.eclipse.swt.widgets.Display.getCurrent(); if ((display == null) && (id != (org.eclipse.swt.widgets.Display.applicationDelegate.id))) { org.eclipse.swt.widgets.objc_super super_struct = new org.eclipse.swt.widgets.objc_super(); super_struct.receiver = id; super_struct.super_class = org.eclipse.swt.widgets.OS.objc_msgSend(id, OS.sel_superclass); return org.eclipse.swt.widgets.OS.objc_msgSendSuper(super_struct, sel, arg0, arg1); } if ((org.eclipse.swt.widgets.Display.currAppDelegate) != null) { if (org.eclipse.swt.widgets.Display.currAppDelegate.respondsToSelector(sel)) org.eclipse.swt.widgets.OS.objc_msgSend(org.eclipse.swt.widgets.Display.currAppDelegate.id, sel, arg0, arg1); } if (sel == (OS.sel_application_openFile_)) { java.lang.String file = new org.eclipse.swt.widgets.NSString(arg1).getString(); org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); event.text = file; display.sendEvent(SWT.OpenDocument, event); return 1; } else if (sel == (OS.sel_application_openFiles_)) { org.eclipse.swt.widgets.NSArray files = new org.eclipse.swt.widgets.NSArray(arg1); long count = files.count(); for (int i = 0; i < count; i++) { java.lang.String file = new org.eclipse.swt.widgets.NSString(files.objectAtIndex(i)).getString(); org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); event.text = file; display.sendEvent(SWT.OpenDocument, event); } new org.eclipse.swt.widgets.NSApplication(arg0).replyToOpenOrPrint(OS.NSApplicationDelegateReplySuccess); } else if (sel == (OS.sel_applicationShouldHandleReopen_hasVisibleWindows_)) { final org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); display.sendEvent(SWT.Activate, event); return event.doit ? 1 : 0; } return 0; }
int widgetExtStyle() { int bits = (super.widgetExtStyle()) & (~(OS.WS_EX_MDICHILD)); if ((parent) == null) { if ((((style) & (SWT.NO_TRIM)) != 0) || (((style) & (SWT.TITLE)) == 0)) { bits |= OS.WS_EX_TOOLWINDOW; } } if ((parent) != null) { if (OS.IsWin95) return bits; if ((((OS.WIN32_MAJOR) << 16) | (OS.WIN32_MINOR)) < ((4 << 16) | 10)) { return bits; } } if (((style) & (SWT.ON_TOP)) != 0) bits |= OS.WS_EX_TOPMOST; return bits; }
public java.lang.String open() { int dialog; if (((style) & (SWT.SAVE)) != 0) { dialog = org.eclipse.swt.widgets.OS.gcnew_SaveFileDialog(); } else { dialog = org.eclipse.swt.widgets.OS.gcnew_OpenFileDialog(); if (((style) & (SWT.MULTI)) != 0) org.eclipse.swt.widgets.OS.OpenFileDialog_Multiselect(dialog, true); } int titlePtr = parent.createDotNetString(title, false); org.eclipse.swt.widgets.OS.FileDialog_Title(dialog, titlePtr); org.eclipse.swt.widgets.OS.GCHandle_Free(titlePtr); int fileNamePtr = parent.createDotNetString(fileName, false); org.eclipse.swt.widgets.OS.FileDialog_FileName(dialog, fileNamePtr); org.eclipse.swt.widgets.OS.GCHandle_Free(fileNamePtr); if (((filterExtensions) != null) && ((filterExtensions.length) > 0)) { java.lang.StringBuffer strFilter = new java.lang.StringBuffer(); for (int i = 0; i < (filterExtensions.length); i++) { if (i > 0) strFilter.append("|"); if (((filterNames) != null) && (i < (filterNames.length))) { strFilter.append(filterNames[i]); } else { strFilter.append(filterExtensions[i]); } strFilter.append("|"); strFilter.append(filterExtensions[i]); } int filterPtr = parent.createDotNetString(strFilter.toString(), false); org.eclipse.swt.widgets.OS.FileDialog_Filter(dialog, filterPtr); org.eclipse.swt.widgets.OS.GCHandle_Free(filterPtr); } int filterPathPtr = parent.createDotNetString(filterPath, false); org.eclipse.swt.widgets.OS.FileDialog_InitialDirectory(dialog, filterPathPtr); org.eclipse.swt.widgets.OS.GCHandle_Free(filterPathPtr); int parentHandle = (((parent.style) & (SWT.ON_TOP)) == 0) ? parent.shellHandle : 0; boolean success = org.eclipse.swt.widgets.OS.CommonDialog_ShowDialog(dialog, parentHandle); java.lang.String fullPath = null; if (success) { int strings = org.eclipse.swt.widgets.OS.FileDialog_FileNames(dialog); int length = org.eclipse.swt.widgets.OS.ICollection_Count(strings); fileNames = new java.lang.String[length]; for (int i = 0; i < length; i++) { int str = org.eclipse.swt.widgets.OS.IList_default(strings, i); int fileInfo = org.eclipse.swt.widgets.OS.gcnew_FileInfo(str); int name = org.eclipse.swt.widgets.OS.FileInfo_Name(fileInfo); fileNames[i] = org.eclipse.swt.widgets.Widget.createJavaString(name); if (i == 0) { int dir = org.eclipse.swt.widgets.OS.FileInfo_DirectoryName(fileInfo); filterPath = org.eclipse.swt.widgets.Widget.createJavaString(dir); org.eclipse.swt.widgets.OS.GCHandle_Free(dir); } org.eclipse.swt.widgets.OS.GCHandle_Free(name); org.eclipse.swt.widgets.OS.GCHandle_Free(fileInfo); org.eclipse.swt.widgets.OS.GCHandle_Free(str); } org.eclipse.swt.widgets.OS.GCHandle_Free(strings); fullPath = ((filterPath) + "\\") + (fileNames[0]); fileName = fileNames[0]; } else { fileNames = new java.lang.String[0]; } org.eclipse.swt.widgets.OS.GCHandle_Free(dialog); return fullPath; }
org.eclipse.swt.widgets.LRESULT CDDS_ITEMPREPAINT(int wParam, int lParam) { org.eclipse.swt.widgets.NMTVCUSTOMDRAW nmcd = new org.eclipse.swt.widgets.NMTVCUSTOMDRAW(); org.eclipse.swt.widgets.OS.MoveMemory(nmcd, lParam, NMTVCUSTOMDRAW.sizeof); int id = nmcd.lItemlParam; if (((style) & (SWT.VIRTUAL)) != 0) { if (id == (-1)) { org.eclipse.swt.widgets.TVITEM tvItem = new org.eclipse.swt.widgets.TVITEM(); tvItem.mask = (OS.TVIF_HANDLE) | (OS.TVIF_PARAM); tvItem.hItem = nmcd.dwItemSpec; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETITEM, 0, tvItem); id = tvItem.lParam; } } org.eclipse.swt.widgets.TreeItem item = _getItem(nmcd.dwItemSpec, id); if (item == null) return null; if ((ignoreCustomDraw) || ((nmcd.left) == (nmcd.right))) { int hDC = nmcd.hdc; int index = ((hwndHeader) != 0) ? org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_ORDERTOINDEX, 0, 0) : 0; int hFont = ((item.cellFont) != null) ? item.cellFont[index] : -1; if (hFont == (-1)) hFont = item.font; if (hFont != (-1)) org.eclipse.swt.widgets.OS.SelectObject(hDC, hFont); return new org.eclipse.swt.widgets.LRESULT((hFont == (-1) ? OS.CDRF_DODEFAULT : OS.CDRF_NEWFONT)); } org.eclipse.swt.widgets.RECT clipRect = null; int index = 0; int count = 0; if ((hwndHeader) != 0) { index = org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_ORDERTOINDEX, 0, 0); count = org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0); if ((count != 0) && (!(printClient))) { clipRect = new org.eclipse.swt.widgets.RECT(); org.eclipse.swt.widgets.HDITEM hdItem = new org.eclipse.swt.widgets.HDITEM(); hdItem.mask = OS.HDI_WIDTH; org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEM, index, hdItem); org.eclipse.swt.widgets.OS.SetRect(clipRect, nmcd.left, nmcd.top, ((nmcd.left) + (hdItem.cxy)), nmcd.bottom); } } int clrText = -1; int clrTextBk = -1; int hFont = ((item.cellFont) != null) ? item.cellFont[index] : -1; if (hFont == (-1)) hFont = item.font; if (org.eclipse.swt.widgets.OS.IsWindowEnabled(handle)) { clrText = ((item.cellForeground) != null) ? item.cellForeground[index] : -1; if (clrText == (-1)) clrText = item.foreground; clrTextBk = ((item.cellBackground) != null) ? item.cellBackground[index] : -1; if (clrTextBk == (-1)) clrTextBk = item.background; } int clrSortBk = -1; if (((OS.COMCTL32_MAJOR) >= 6) && (org.eclipse.swt.widgets.OS.IsAppThemed())) { if (((sortColumn) != null) && ((sortDirection) != (SWT.NONE))) { if ((findImageControl()) == null) { if ((indexOf(sortColumn)) == index) { clrTextBk = clrSortBk = getSortColumnPixel(); } } } } int hDC = nmcd.hdc; boolean selected = false; if (org.eclipse.swt.widgets.OS.IsWindowEnabled(handle)) { org.eclipse.swt.widgets.TVITEM tvItem = new org.eclipse.swt.widgets.TVITEM(); tvItem.mask = (OS.TVIF_HANDLE) | (OS.TVIF_STATE); tvItem.hItem = item.handle; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETITEM, 0, tvItem); if (((tvItem.state) & ((OS.TVIS_SELECTED) | (OS.TVIS_DROPHILITED))) != 0) { selected = true; if ((handle) == (org.eclipse.swt.widgets.OS.GetFocus())) { if ((org.eclipse.swt.widgets.OS.GetTextColor(hDC)) != (org.eclipse.swt.widgets.OS.GetSysColor(OS.COLOR_HIGHLIGHTTEXT))) { selected = false; } else { if ((org.eclipse.swt.widgets.OS.GetBkColor(hDC)) != (org.eclipse.swt.widgets.OS.GetSysColor(OS.COLOR_HIGHLIGHT))) { selected = false; } } } } } if (((org.eclipse.swt.widgets.OS.IsWindowVisible(handle)) && ((nmcd.left) < (nmcd.right))) && ((nmcd.top) < (nmcd.bottom))) { if (hFont != (-1)) org.eclipse.swt.widgets.OS.SelectObject(hDC, hFont); if (linesVisible) { org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); org.eclipse.swt.widgets.OS.SetRect(rect, nmcd.left, nmcd.top, nmcd.right, nmcd.bottom); org.eclipse.swt.widgets.OS.DrawEdge(hDC, rect, OS.BDR_SUNKENINNER, OS.BF_BOTTOM); } if (hooks(SWT.MeasureItem)) { org.eclipse.swt.widgets.RECT itemRect = item.getBounds(index, true, true, false, false, false, hDC); int nSavedDC = org.eclipse.swt.widgets.OS.SaveDC(hDC); org.eclipse.swt.widgets.GCData data = new org.eclipse.swt.widgets.GCData(); data.device = display; data.hFont = hFont; org.eclipse.swt.widgets.GC gc = org.eclipse.swt.widgets.GC.win32_new(hDC, data); org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); event.item = item; event.gc = gc; event.index = index; event.x = itemRect.left; event.y = itemRect.top; event.width = (itemRect.right) - (itemRect.left); event.height = (itemRect.bottom) - (itemRect.top); sendEvent(SWT.MeasureItem, event); event.gc = null; gc.dispose(); org.eclipse.swt.widgets.OS.RestoreDC(hDC, nSavedDC); if ((isDisposed()) || (item.isDisposed())) return null; if ((hwndHeader) != 0) { if (count == 0) { if (((event.x) + (event.width)) > (scrollWidth)) { setScrollWidth((scrollWidth = (event.x) + (event.width))); } } } if ((event.height) > (getItemHeight())) setItemHeight(event.height); } selectionForeground = -1; ignoreDrawForeground = ignoreDrawSelection = ignoreFullSelection = ignoreDrawBackground = false; if (hooks(SWT.EraseItem)) { org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); org.eclipse.swt.widgets.OS.SetRect(rect, nmcd.left, nmcd.top, nmcd.right, nmcd.bottom); if ((org.eclipse.swt.widgets.OS.IsWindowEnabled(handle)) || ((findImageControl()) != null)) { drawBackground(hDC, rect); } else { fillBackground(hDC, org.eclipse.swt.widgets.OS.GetBkColor(hDC), rect); } org.eclipse.swt.widgets.RECT cellRect = item.getBounds(index, true, true, true, true, true, hDC); if (clrSortBk != (-1)) { org.eclipse.swt.widgets.RECT fullRect = item.getBounds(index, true, true, true, true, true, hDC); drawBackground(hDC, fullRect, clrSortBk); } int nSavedDC = org.eclipse.swt.widgets.OS.SaveDC(hDC); org.eclipse.swt.widgets.GCData data = new org.eclipse.swt.widgets.GCData(); data.device = display; data.foreground = org.eclipse.swt.widgets.OS.GetTextColor(hDC); data.background = org.eclipse.swt.widgets.OS.GetBkColor(hDC); if (!selected) { if (clrText != (-1)) data.foreground = clrText; if (clrTextBk != (-1)) data.background = clrTextBk; } data.hPen = org.eclipse.swt.widgets.OS.CreatePen(OS.PS_SOLID, 0, data.foreground); data.hBrush = org.eclipse.swt.widgets.OS.CreateSolidBrush(data.background); if (hFont != (-1)) data.hFont = hFont; org.eclipse.swt.widgets.OS.SelectObject(hDC, data.hPen); org.eclipse.swt.widgets.OS.SelectObject(hDC, data.hBrush); org.eclipse.swt.widgets.GC gc = org.eclipse.swt.widgets.GC.win32_new(hDC, data); org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); event.index = index; event.item = item; event.gc = gc; event.detail |= SWT.FOREGROUND; if (clrTextBk != (-1)) event.detail |= SWT.BACKGROUND; if (selected) event.detail |= SWT.SELECTED; if (((nmcd.uItemState) & (OS.CDIS_FOCUS)) != 0) { if (((style) & (SWT.FULL_SELECTION)) != 0) { if ((handle) == (org.eclipse.swt.widgets.OS.GetFocus())) { int uiState = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.WM_QUERYUISTATE, 0, 0); if ((uiState & (OS.UISF_HIDEFOCUS)) == 0) event.detail |= SWT.FOCUSED; } } } event.x = cellRect.left; event.y = cellRect.top; event.width = (cellRect.right) - (cellRect.left); event.height = (cellRect.bottom) - (cellRect.top); gc.setClipping(event.x, event.y, event.width, event.height); sendEvent(SWT.EraseItem, event); event.gc = null; int newTextClr = org.eclipse.swt.widgets.OS.GetTextColor(hDC); gc.dispose(); org.eclipse.swt.widgets.OS.RestoreDC(hDC, nSavedDC); if ((isDisposed()) || (item.isDisposed())) return null; if (event.doit) { ignoreDrawForeground = ((event.detail) & (SWT.FOREGROUND)) == 0; ignoreDrawSelection = ((event.detail) & (SWT.SELECTED)) == 0; ignoreDrawBackground = ((event.detail) & (SWT.BACKGROUND)) == 0; } else { ignoreDrawForeground = ignoreDrawSelection = ignoreDrawBackground = true; } if (((!(ignoreDrawBackground)) && (!(ignoreDrawSelection))) && (clrTextBk != (-1))) { if (count == 0) { if (((style) & (SWT.FULL_SELECTION)) != 0) { fillBackground(hDC, clrTextBk, rect); } else { org.eclipse.swt.widgets.RECT textRect = item.getBounds(index, true, false, true, false, true, hDC); fillBackground(hDC, clrTextBk, textRect); } } else { fillBackground(hDC, clrTextBk, cellRect); } } if (ignoreDrawSelection) ignoreFullSelection = true; if (!(ignoreDrawSelection)) { if (!selected) { selectionForeground = clrText = org.eclipse.swt.widgets.OS.GetSysColor(OS.COLOR_HIGHLIGHTTEXT); } if (((style) & (SWT.FULL_SELECTION)) != 0) { if ((((style) & (SWT.FULL_SELECTION)) != 0) && (count == 0)) { fillBackground(hDC, org.eclipse.swt.widgets.OS.GetBkColor(hDC), rect); } else { fillBackground(hDC, org.eclipse.swt.widgets.OS.GetBkColor(hDC), cellRect); } } else { org.eclipse.swt.widgets.RECT textRect = item.getBounds(index, true, false, false, false, true, hDC); fillBackground(hDC, org.eclipse.swt.widgets.OS.GetBkColor(hDC), textRect); } } else { if (selected) { selectionForeground = clrText = newTextClr; ignoreDrawSelection = true; } } org.eclipse.swt.widgets.RECT itemRect = item.getBounds(index, true, true, false, false, false, hDC); org.eclipse.swt.widgets.OS.SaveDC(hDC); org.eclipse.swt.widgets.OS.SelectClipRgn(hDC, 0); (itemRect.right)++; if (linesVisible) (itemRect.bottom)++; if (clipRect != null) { org.eclipse.swt.widgets.OS.IntersectClipRect(hDC, clipRect.left, clipRect.top, clipRect.right, clipRect.bottom); } org.eclipse.swt.widgets.OS.ExcludeClipRect(hDC, itemRect.left, itemRect.top, itemRect.right, itemRect.bottom); return new org.eclipse.swt.widgets.LRESULT(((OS.CDRF_DODEFAULT) | (OS.CDRF_NOTIFYPOSTPAINT))); } if (((style) & (SWT.FULL_SELECTION)) != 0) { int bits = org.eclipse.swt.widgets.OS.GetWindowLong(handle, OS.GWL_STYLE); if ((bits & (OS.TVS_FULLROWSELECT)) == 0) { org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); org.eclipse.swt.widgets.OS.SetRect(rect, nmcd.left, nmcd.top, nmcd.right, nmcd.bottom); if (selected) { fillBackground(hDC, org.eclipse.swt.widgets.OS.GetBkColor(hDC), rect); } else { if (org.eclipse.swt.widgets.OS.IsWindowEnabled(handle)) drawBackground(hDC, rect); } nmcd.uItemState &= ~(OS.CDIS_FOCUS); org.eclipse.swt.widgets.OS.MoveMemory(lParam, nmcd, NMTVCUSTOMDRAW.sizeof); } } } org.eclipse.swt.widgets.LRESULT result = null; if (((clrText == (-1)) && (clrTextBk == (-1))) && (hFont == (-1))) { result = new org.eclipse.swt.widgets.LRESULT(((OS.CDRF_DODEFAULT) | (OS.CDRF_NOTIFYPOSTPAINT))); } else { result = new org.eclipse.swt.widgets.LRESULT(((OS.CDRF_NEWFONT) | (OS.CDRF_NOTIFYPOSTPAINT))); if (hFont != (-1)) org.eclipse.swt.widgets.OS.SelectObject(hDC, hFont); if ((org.eclipse.swt.widgets.OS.IsWindowEnabled(handle)) && (org.eclipse.swt.widgets.OS.IsWindowVisible(handle))) { if (clrTextBk != (-1)) { int bits = org.eclipse.swt.widgets.OS.GetWindowLong(handle, OS.GWL_STYLE); if ((bits & (OS.TVS_FULLROWSELECT)) == 0) { if ((count != 0) && ((hwndHeader) != 0)) { org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); org.eclipse.swt.widgets.HDITEM hdItem = new org.eclipse.swt.widgets.HDITEM(); hdItem.mask = OS.HDI_WIDTH; org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEM, index, hdItem); org.eclipse.swt.widgets.OS.SetRect(rect, nmcd.left, nmcd.top, ((nmcd.left) + (hdItem.cxy)), nmcd.bottom); if (((OS.COMCTL32_MAJOR) < 6) || (!(org.eclipse.swt.widgets.OS.IsAppThemed()))) { org.eclipse.swt.widgets.RECT itemRect = new org.eclipse.swt.widgets.RECT(); itemRect.left = item.handle; if ((org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETITEMRECT, 1, itemRect)) != 0) { rect.left = java.lang.Math.min(itemRect.left, rect.right); } } if (((style) & (SWT.FULL_SELECTION)) != 0) { if (!selected) fillBackground(hDC, clrTextBk, rect); } else { fillBackground(hDC, clrTextBk, rect); } } else { if (((style) & (SWT.FULL_SELECTION)) != 0) { org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); org.eclipse.swt.widgets.OS.SetRect(rect, nmcd.left, nmcd.top, nmcd.right, nmcd.bottom); if (!selected) fillBackground(hDC, clrTextBk, rect); } } } } if (!selected) { nmcd.clrText = (clrText == (-1)) ? getForegroundPixel() : clrText; nmcd.clrTextBk = (clrTextBk == (-1)) ? getBackgroundPixel() : clrTextBk; org.eclipse.swt.widgets.OS.MoveMemory(lParam, nmcd, NMTVCUSTOMDRAW.sizeof); } } } if ((!(org.eclipse.swt.widgets.OS.IsWindowEnabled(handle))) && (clrSortBk != (-1))) { org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); org.eclipse.swt.widgets.HDITEM hdItem = new org.eclipse.swt.widgets.HDITEM(); hdItem.mask = OS.HDI_WIDTH; org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEM, index, hdItem); org.eclipse.swt.widgets.OS.SetRect(rect, nmcd.left, nmcd.top, ((nmcd.left) + (hdItem.cxy)), nmcd.bottom); fillBackground(hDC, clrSortBk, rect); } org.eclipse.swt.widgets.OS.SaveDC(hDC); if (clipRect != null) { int hRgn = org.eclipse.swt.widgets.OS.CreateRectRgn(clipRect.left, clipRect.top, clipRect.right, clipRect.bottom); org.eclipse.swt.widgets.POINT lpPoint = new org.eclipse.swt.widgets.POINT(); org.eclipse.swt.widgets.OS.GetWindowOrgEx(hDC, lpPoint); org.eclipse.swt.widgets.OS.OffsetRgn(hRgn, (-(lpPoint.x)), (-(lpPoint.y))); org.eclipse.swt.widgets.OS.SelectClipRgn(hDC, hRgn); org.eclipse.swt.widgets.OS.DeleteObject(hRgn); } return result; }
public org.eclipse.swt.widgets.Rectangle computeTrim(int x, int y, int width, int height) { checkWidget(); org.eclipse.swt.widgets.Rectangle trim = super.computeTrim(x, y, width, height); org.eclipse.swt.widgets.NSRect rect = new org.eclipse.swt.widgets.NSRect(); rect.x = trim.x; rect.y = trim.y; rect.width = trim.width; rect.height = trim.height; if ((window) != null) { if (!(fixResize())) { float h = rect.height; rect = window.frameRectForContentRect(rect); rect.y += h - (rect.height); } } return new org.eclipse.swt.widgets.Rectangle(((int) (rect.x)), ((int) (rect.y)), ((int) (rect.width)), ((int) (rect.height))); }
public void setImage(org.eclipse.swt.widgets.Image newImage) { checkWidget(); org.eclipse.swt.widgets.Tree parent = getParent(); org.eclipse.swt.widgets.Image oldImage = getImage(); boolean isSameImage; int imageWidth = 0; int redrawX = 0; super.setImage(newImage); if ((newImage != null) && (oldImage != null)) { isSameImage = newImage.equals(oldImage); } else { isSameImage = newImage == oldImage; } if (isSameImage == false) { if ((parent.getVisibleRedrawY(this)) != (-1)) { if ((parent.getImageExtent()) != null) { imageWidth = parent.getImageExtent().x; } else if (newImage != null) { imageWidth = newImage.getBounds().x; } redrawX = getItemStartX(); } parent.itemChanged(this, redrawX, imageWidth); } }
int OnStartURIOpen(int aURI, int retval) { org.eclipse.swt.browser.nsIURI location = new org.eclipse.swt.browser.nsIURI(aURI); int aSpec = org.eclipse.swt.browser.XPCOM.nsEmbedCString_new(); location.GetSpec(aSpec); int length = org.eclipse.swt.browser.XPCOM.nsEmbedCString_Length(aSpec); int buffer = org.eclipse.swt.browser.XPCOM.nsEmbedCString_get(aSpec); buffer = org.eclipse.swt.browser.XPCOM.nsEmbedCString_get(aSpec); byte[] dest = new byte[length]; org.eclipse.swt.browser.XPCOM.memmove(dest, buffer, length); org.eclipse.swt.browser.XPCOM.nsEmbedCString_delete(aSpec); java.lang.String value = new java.lang.String(dest); boolean isHttps = value.startsWith(XPCOM.HTTPS_PROTOCOL); if ((locationListeners.length) == 0) { org.eclipse.swt.browser.XPCOM.memmove(retval, new int[]{ isHttps ? 1 : 0 }, 4); return XPCOM.NS_OK; } boolean doit = !isHttps; if ((request) == 0) { org.eclipse.swt.browser.LocationEvent event = new org.eclipse.swt.browser.LocationEvent(this); event.display = getDisplay(); event.widget = this; event.location = value; event.doit = doit; for (int i = 0; i < (locationListeners.length); i++) locationListeners[i].changing(event); if (!isHttps) doit = event.doit; } org.eclipse.swt.browser.XPCOM.memmove(retval, new int[]{ doit ? 0 : 1 }, 4); return XPCOM.NS_OK; }
public org.eclipse.swt.widgets.RGB open() { org.eclipse.swt.widgets.NSColorPanel panel = org.eclipse.swt.widgets.NSColorPanel.sharedColorPanel(); java.lang.String className = "SWTColorDialogPanel"; org.eclipse.swt.widgets.Display display = ((parent) != null) ? parent.getDisplay() : org.eclipse.swt.widgets.Display.getCurrent(); display.subclassPanel(panel, className); if ((rgb) != null) { org.eclipse.swt.widgets.NSColor color = org.eclipse.swt.widgets.NSColor.colorWithDeviceRed(((rgb.red) / 255.0F), ((rgb.green) / 255.0F), ((rgb.blue) / 255.0F), 1); panel.setColor(color); } org.eclipse.swt.widgets.SWTPanelDelegate delegate = ((org.eclipse.swt.widgets.SWTPanelDelegate) (new org.eclipse.swt.widgets.SWTPanelDelegate().alloc().init())); int jniRef = org.eclipse.swt.widgets.OS.NewGlobalRef(this); if (jniRef == 0) org.eclipse.swt.widgets.SWT.error(SWT.ERROR_NO_HANDLES); org.eclipse.swt.widgets.OS.object_setInstanceVariable(delegate.id, Display.SWT_OBJECT, jniRef); panel.setDelegate(delegate); rgb = null; selected = false; panel.orderFront(null); display.setModalDialog(this); org.eclipse.swt.widgets.NSApplication.sharedApplication().runModalForWindow(panel); display.setModalDialog(null); panel.setDelegate(null); delegate.release(); org.eclipse.swt.widgets.OS.DeleteGlobalRef(jniRef); if (selected) { org.eclipse.swt.widgets.NSColor color = panel.color(); if (color != null) { color = color.colorUsingColorSpaceName(OS.NSCalibratedRGBColorSpace); rgb = new org.eclipse.swt.widgets.RGB(((int) ((color.redComponent()) * 255)), ((int) ((color.greenComponent()) * 255)), ((int) ((color.blueComponent()) * 255))); } } return rgb; }
static int checkStyle(int style) { if (OS.IsPPC) { if ((style & (SWT.TOP)) == 0) style |= SWT.BOTTOM; } style = checkBits(style, SWT.TOP, SWT.BOTTOM, 0, 0, 0, 0); return style & (~((SWT.H_SCROLL) | (SWT.V_SCROLL))); }
boolean fixResize() { if ((window) == null) return false; if (((style) & (SWT.NO_TRIM)) == 0) { if ((((style) & (SWT.RESIZE)) != 0) && (((style) & (((((SWT.SHEET) | (SWT.TITLE)) | (SWT.CLOSE)) | (SWT.MIN)) | (SWT.MAX))) == 0)) { return true; } } return false; }
void createHandle() { int[] outControl = new int[1]; int window = org.eclipse.swt.internal.carbon.OS.GetControlOwner(parent.handle); org.eclipse.swt.internal.carbon.OS.CreateDataBrowserControl(window, null, OS.kDataBrowserListView, outControl); if ((outControl[0]) == 0) error(SWT.ERROR_NO_HANDLES); handle = outControl[0]; if (!(drawFocusRing())) { org.eclipse.swt.internal.carbon.OS.SetControlData(handle, OS.kControlEntireControl, OS.kControlDataBrowserIncludesFrameAndFocusTag, 1, new byte[]{ 0 }); } int selectionFlags = (((style) & (SWT.SINGLE)) != 0) ? (org.eclipse.swt.internal.carbon.OS.kDataBrowserSelectOnlyOne) | (org.eclipse.swt.internal.carbon.OS.kDataBrowserNeverEmptySelectionSet) : org.eclipse.swt.internal.carbon.OS.kDataBrowserCmdTogglesSelection; org.eclipse.swt.internal.carbon.OS.SetDataBrowserSelectionFlags(handle, selectionFlags); org.eclipse.swt.internal.carbon.OS.SetDataBrowserListViewHeaderBtnHeight(handle, ((short) (0))); org.eclipse.swt.internal.carbon.OS.SetDataBrowserTableViewHiliteStyle(handle, OS.kDataBrowserTableViewFillHilite); org.eclipse.swt.internal.carbon.OS.SetDataBrowserHasScrollBars(handle, (((style) & (SWT.H_SCROLL)) != 0), (((style) & (SWT.V_SCROLL)) != 0)); org.eclipse.swt.internal.carbon.DataBrowserListViewColumnDesc column = new org.eclipse.swt.internal.carbon.DataBrowserListViewColumnDesc(); column.headerBtnDesc_version = org.eclipse.swt.internal.carbon.OS.kDataBrowserListViewLatestHeaderDesc; column.propertyDesc_propertyID = org.eclipse.swt.widgets.List.COLUMN_ID; column.propertyDesc_propertyType = org.eclipse.swt.internal.carbon.OS.kDataBrowserTextType; column.propertyDesc_propertyFlags = (org.eclipse.swt.internal.carbon.OS.kDataBrowserListViewSelectionColumn) | (org.eclipse.swt.internal.carbon.OS.kDataBrowserDefaultPropertyFlags); column.headerBtnDesc_maximumWidth = 32767; column.headerBtnDesc_initialOrder = ((short) (org.eclipse.swt.internal.carbon.OS.kDataBrowserOrderIncreasing)); org.eclipse.swt.internal.carbon.OS.AddDataBrowserListViewColumn(handle, column, 0); if ((org.eclipse.swt.internal.carbon.OS.VERSION) < 4160) { org.eclipse.swt.internal.carbon.OS.HIViewSetDrawingEnabled(handle, false); int size = 50; org.eclipse.swt.internal.carbon.Rect rect = new org.eclipse.swt.internal.carbon.Rect(); rect.right = rect.bottom = ((short) (size)); org.eclipse.swt.internal.carbon.OS.SetControlBounds(handle, rect); int bpl = size * 4; int[] gWorld = new int[1]; int data = org.eclipse.swt.internal.carbon.OS.NewPtr((bpl * size)); org.eclipse.swt.internal.carbon.OS.NewGWorldFromPtr(gWorld, OS.k32ARGBPixelFormat, rect, 0, 0, 0, data, bpl); int[] curPort = new int[1]; int[] curGWorld = new int[1]; org.eclipse.swt.internal.carbon.OS.GetGWorld(curPort, curGWorld); org.eclipse.swt.internal.carbon.OS.SetGWorld(gWorld[0], curGWorld[0]); org.eclipse.swt.internal.carbon.OS.DrawControlInCurrentPort(handle); org.eclipse.swt.internal.carbon.OS.SetGWorld(curPort[0], curGWorld[0]); org.eclipse.swt.internal.carbon.OS.DisposeGWorld(gWorld[0]); org.eclipse.swt.internal.carbon.OS.DisposePtr(data); rect.right = rect.bottom = ((short) (0)); org.eclipse.swt.internal.carbon.OS.SetControlBounds(handle, rect); org.eclipse.swt.internal.carbon.OS.HIViewSetDrawingEnabled(handle, true); } }
void removeItem(org.eclipse.swt.widgets.TableItem item) { if ((isRemovingAll()) == true) return; java.util.Vector items = getItemVector(); int index = items.indexOf(item); if (index != (-1)) { removingItem(item); items.removeElementAt(index); for (int i = index; i < (items.size()); i++) { org.eclipse.swt.widgets.TableItem anItem = ((org.eclipse.swt.widgets.TableItem) (items.elementAt(i))); anItem.setIndex(((anItem.getIndex()) - 1)); } removedItem(item); } }
void setToolTipText(long rootWidget, long tipWidget, java.lang.String string) { if ((OS.GTK_VERSION) >= (org.eclipse.swt.widgets.OS.VERSION(2, 12, 0))) { byte[] buffer = null; if ((string != null) && ((string.length()) > 0)) { char[] chars = fixMnemonic(string, false); buffer = org.eclipse.swt.widgets.Converter.wcsToMbcs(null, chars, true); } long oldTooltip = org.eclipse.swt.widgets.OS.gtk_widget_get_tooltip_text(rootWidget); boolean same = false; if ((buffer == null) && (oldTooltip == 0)) { same = true; } else if ((buffer != null) && (oldTooltip != 0)) { same = (org.eclipse.swt.widgets.OS.strcmp(oldTooltip, buffer)) == 0; } if (oldTooltip != 0) org.eclipse.swt.widgets.OS.g_free(oldTooltip); if (same) return; long eventPtr = 0; if ((OS.GTK_VERSION) < (org.eclipse.swt.widgets.OS.VERSION(2, 18, 0))) { org.eclipse.swt.widgets.OS.gtk_widget_set_tooltip_text(rootWidget, null); long tipWindow = gtk_widget_get_window(rootWidget); if (tipWindow != 0) { int[] x = new int[1]; int[] y = new int[1]; long window = org.eclipse.swt.widgets.OS.gdk_window_at_pointer(x, y); long[] user_data = new long[1]; if (window != 0) org.eclipse.swt.widgets.OS.gdk_window_get_user_data(window, user_data); if (tipWidget == (user_data[0])) { eventPtr = org.eclipse.swt.widgets.OS.gdk_event_new(OS.GDK_MOTION_NOTIFY); org.eclipse.swt.widgets.GdkEventMotion event = new org.eclipse.swt.widgets.GdkEventMotion(); event.type = OS.GDK_MOTION_NOTIFY; event.window = org.eclipse.swt.widgets.OS.g_object_ref(tipWindow); event.x = x[0]; event.y = y[0]; org.eclipse.swt.widgets.OS.gdk_window_get_origin(window, x, y); event.x_root = (event.x) + (x[0]); event.y_root = (event.y) + (y[0]); org.eclipse.swt.widgets.OS.memmove(eventPtr, event, GdkEventMotion.sizeof); org.eclipse.swt.widgets.OS.gtk_main_do_event(eventPtr); } } } org.eclipse.swt.widgets.OS.gtk_widget_set_tooltip_text(rootWidget, buffer); if (eventPtr != 0) { org.eclipse.swt.widgets.OS.gtk_main_do_event(eventPtr); org.eclipse.swt.widgets.OS.gdk_event_free(eventPtr); } } else { byte[] buffer = null; if ((string != null) && ((string.length()) > 0)) { char[] chars = fixMnemonic(string, false); buffer = org.eclipse.swt.widgets.Converter.wcsToMbcs(null, chars, true); } long tipData = org.eclipse.swt.widgets.OS.gtk_tooltips_data_get(tipWidget); if (tipData != 0) { long oldTooltip = org.eclipse.swt.widgets.OS.GTK_TOOLTIPS_GET_TIP_TEXT(tipData); if ((string == null) && (oldTooltip == 0)) { return; } else if ((string != null) && (oldTooltip != 0)) { if (buffer != null) { if ((org.eclipse.swt.widgets.OS.strcmp(oldTooltip, buffer)) == 0) return; } } } if ((tooltipsHandle) == 0) { tooltipsHandle = org.eclipse.swt.widgets.OS.gtk_tooltips_new(); if ((tooltipsHandle) == 0) error(SWT.ERROR_NO_HANDLES); org.eclipse.swt.widgets.OS.g_object_ref(tooltipsHandle); g_object_ref_sink(tooltipsHandle); } org.eclipse.swt.widgets.OS.gtk_tooltips_force_window(tooltipsHandle); long tipWindow = org.eclipse.swt.widgets.OS.GTK_TOOLTIPS_TIP_WINDOW(tooltipsHandle); if ((tipWindow != 0) && (tipWindow != (tooltipWindow))) { org.eclipse.swt.widgets.OS.g_signal_connect(tipWindow, OS.size_allocate, display.sizeAllocateProc, shellHandle); tooltipWindow = tipWindow; } boolean set = true; if (tipWindow != 0) { if ((gtk_widget_get_visible(tipWidget)) || (gtk_widget_get_realized(tipWidget))) { int[] x = new int[1]; int[] y = new int[1]; long window = gdk_device_get_window_at_position(x, y); if (window != 0) { long[] user_data = new long[1]; org.eclipse.swt.widgets.OS.gdk_window_get_user_data(window, user_data); if (tipWidget == (user_data[0])) { set = false; int handler_id = org.eclipse.swt.widgets.OS.g_signal_connect(tipWindow, OS.size_request, display.sizeRequestProc, shellHandle); org.eclipse.swt.widgets.OS.gtk_tooltips_set_tip(tooltipsHandle, tipWidget, buffer, null); org.eclipse.swt.widgets.OS.gtk_widget_hide(tipWindow); long data = org.eclipse.swt.widgets.OS.gtk_tooltips_data_get(tipWidget); org.eclipse.swt.widgets.OS.GTK_TOOLTIPS_SET_ACTIVE(tooltipsHandle, data); org.eclipse.swt.widgets.OS.gtk_tooltips_set_tip(tooltipsHandle, tipWidget, buffer, null); if (handler_id != 0) org.eclipse.swt.widgets.OS.g_signal_handler_disconnect(tipWindow, handler_id); } } } } if (set) org.eclipse.swt.widgets.OS.gtk_tooltips_set_tip(tooltipsHandle, tipWidget, buffer, null); } }
void onDispose(org.eclipse.swt.custom.Event event) { removeListener(SWT.Dispose, listener); notifyListeners(SWT.Dispose, event); event.type = SWT.None; inDispose = true; if (((showMenu) != null) && (!(showMenu.isDisposed()))) { showMenu.dispose(); showMenu = null; } int length = items.length; for (int i = 0; i < length; i++) { if ((items[i]) != null) { items[i].dispose(); } } gradientColors = null; selectionGradientColors = null; selectionGradientPercents = null; selectionBgImage = null; selectionBackground = null; selectionForeground = null; if ((controlBkImages) != null) { for (int i = 0; i < (controlBkImages.length); i++) { if ((controlBkImages[i]) != null) { controlBkImages[i].dispose(); controlBkImages[i] = null; } } controlBkImages = null; } controls = null; controlAlignments = null; controlRects = null; if ((maxImage) != null) maxImage.dispose(); maxImage = null; if ((minImage) != null) minImage.dispose(); minImage = null; if ((chevronImage) != null) chevronImage.dispose(); chevronImage = null; if ((renderer) != null) renderer.dispose(); renderer = null; minItem = null; maxItem = null; minMaxTb = null; chevronItem = null; chevronTb = null; if ((folderListeners.length) != 0) folderListeners = new org.eclipse.swt.custom.CTabFolder2Listener[0]; if ((tabListeners.length) != 0) tabListeners = new org.eclipse.swt.custom.CTabFolderListener[0]; }
public void setControl(org.eclipse.swt.widgets.Control control) { checkWidget(); if (control != null) { if (control.isDisposed()) error(SWT.ERROR_INVALID_ARGUMENT); if ((control.parent) != (parent)) error(SWT.ERROR_INVALID_PARENT); } if (((style) & (SWT.SEPARATOR)) == 0) return; this.control = control; if ((control != null) && (!(control.isDisposed()))) { control.setBounds(getBounds()); int xDisplay = org.eclipse.swt.widgets.OS.XtDisplay(handle); if (xDisplay == 0) return; if (!(org.eclipse.swt.widgets.OS.XtIsRealized(handle))) { org.eclipse.swt.widgets.Shell shell = parent.getShell(); shell.realizeWidget(); } int topHandle1 = control.topHandle(); int window1 = org.eclipse.swt.widgets.OS.XtWindow(topHandle1); if (window1 == 0) return; int topHandle2 = this.topHandle(); int window2 = org.eclipse.swt.widgets.OS.XtWindow(topHandle2); if (window2 == 0) return; org.eclipse.swt.widgets.XWindowChanges struct = new org.eclipse.swt.widgets.XWindowChanges(); struct.sibling = window2; struct.stack_mode = OS.Above; int screen = org.eclipse.swt.widgets.OS.XDefaultScreen(xDisplay); int flags = (OS.CWStackMode) | (OS.CWSibling); org.eclipse.swt.widgets.OS.XReconfigureWMWindow(xDisplay, window1, screen, flags, struct); } }
void resize() { if (tableTree.isDisposed()) return; if (((item) == null) || (item.isDisposed())) return; org.eclipse.swt.custom.Table table = tableTree.getTable(); if (((column) < 0) || ((column) >= (table.getColumnCount()))) return; super.resize(); }
void initExternal(java.lang.String profilePath) { if (!(org.eclipse.swt.browser.Mozilla.IsPre_4)) return; java.io.File componentsDir = new java.io.File(profilePath, AppFileLocProvider.COMPONENTS_DIR); java.io.InputStream is = org.eclipse.swt.browser.Library.class.getResourceAsStream("/external.xpt"); if (is != null) { if (!(componentsDir.exists())) { componentsDir.mkdirs(); } int read; byte[] buffer = new byte[4096]; java.io.File file = new java.io.File(componentsDir, "external.xpt"); try { java.io.FileOutputStream os = new java.io.FileOutputStream(file); while ((read = is.read(buffer)) != (-1)) { os.write(buffer, 0, read); } os.close(); is.close(); } catch (java.io.FileNotFoundException e) { } catch (java.io.IOException e) { } } }
void createHandle(int index) { state |= (HANDLE) | (CANVAS); int decorations = 0; if (((style) & (SWT.NO_TRIM)) == 0) { if (((style) & (SWT.MIN)) != 0) decorations |= OS.MWM_DECOR_MINIMIZE; if (((style) & (SWT.MAX)) != 0) decorations |= OS.MWM_DECOR_MAXIMIZE; if (((style) & (SWT.RESIZE)) != 0) decorations |= OS.MWM_DECOR_RESIZEH; if (((style) & (SWT.BORDER)) != 0) decorations |= OS.MWM_DECOR_BORDER; if (((style) & (SWT.MENU)) != 0) decorations |= OS.MWM_DECOR_MENU; if (((style) & (SWT.TITLE)) != 0) decorations |= OS.MWM_DECOR_TITLE; if (((style) & (SWT.RESIZE)) != 0) decorations |= OS.MWM_DECOR_BORDER; } int inputMode = OS.MWM_INPUT_MODELESS; if (((style) & (SWT.PRIMARY_MODAL)) != 0) inputMode = OS.MWM_INPUT_PRIMARY_APPLICATION_MODAL; if (((style) & (SWT.APPLICATION_MODAL)) != 0) inputMode = OS.MWM_INPUT_FULL_APPLICATION_MODAL; if (((style) & (SWT.SYSTEM_MODAL)) != 0) inputMode = OS.MWM_INPUT_SYSTEM_MODAL; byte[] buffer = new byte[]{ ((byte) (' ')), 0, 0, 0 }; int ptr = org.eclipse.swt.widgets.OS.XtMalloc(buffer.length); org.eclipse.swt.widgets.OS.memmove(ptr, buffer, buffer.length); int[] argList1 = new int[]{ OS.XmNmwmInputMode, inputMode, OS.XmNmwmDecorations, decorations, OS.XmNoverrideRedirect, ((style) & (SWT.ON_TOP)) != 0 ? 1 : 0, OS.XmNtitle, ptr }; int orientations = (SWT.LEFT_TO_RIGHT) | (SWT.RIGHT_TO_LEFT); if ((((style) & (~orientations)) == (SWT.NONE)) || (((style) & ((SWT.NO_TRIM) | (SWT.ON_TOP))) != 0)) { reparented = true; } byte[] appClass = display.appClass; if ((((parent) == null) && (((style) & (SWT.ON_TOP)) == 0)) && (inputMode != (OS.MWM_INPUT_FULL_APPLICATION_MODAL))) { int xDisplay = display.xDisplay; int widgetClass = org.eclipse.swt.widgets.OS.TopLevelShellWidgetClass(); shellHandle = org.eclipse.swt.widgets.OS.XtAppCreateShell(display.appName, appClass, widgetClass, xDisplay, argList1, ((argList1.length) / 2)); } else { int widgetClass = org.eclipse.swt.widgets.OS.TransientShellWidgetClass(); int parentHandle = display.shellHandle; if ((parent) != null) parentHandle = parent.handle; shellHandle = org.eclipse.swt.widgets.OS.XtCreatePopupShell(appClass, widgetClass, parentHandle, argList1, ((argList1.length) / 2)); } org.eclipse.swt.widgets.OS.XtFree(ptr); if ((shellHandle) == 0) error(SWT.ERROR_NO_HANDLES); createScrolledHandle(shellHandle); if (((style) & (((SWT.NO_TRIM) | (SWT.BORDER)) | (SWT.RESIZE))) == 0) { int[] argList2 = new int[]{ OS.XmNborderWidth, 1 }; org.eclipse.swt.widgets.OS.XtSetValues(handle, argList2, ((argList2.length) / 2)); } if (((style) & (SWT.ON_TOP)) == 0) { int[] argList3 = new int[]{ OS.XmNtraversalOn, 0 }; int textHandle = org.eclipse.swt.widgets.OS.XmCreateTextField(handle, null, argList3, ((argList3.length) / 2)); if (textHandle == 0) error(SWT.ERROR_NO_HANDLES); } }
boolean paint(org.eclipse.swt.widgets.GC gc, org.eclipse.swt.widgets.TableColumn column, boolean backgroundOnly) { if (!(parent.checkData(this, true))) return false; int columnIndex = 0; int x = 0; if (column != null) { columnIndex = column.getIndex(); x = column.getX(); } int oldAlpha = gc.getAlpha(); boolean oldAdvanced = gc.getAdvanced(); int oldAntialias = gc.getAntialias(); org.eclipse.swt.widgets.Pattern oldBackgroundPattern = gc.getBackgroundPattern(); org.eclipse.swt.widgets.Pattern oldForegroundPattern = gc.getForegroundPattern(); int oldInterpolation = gc.getInterpolation(); int oldTextAntialias = gc.getTextAntialias(); boolean isSelected = isSelected(); if (parent.hooks(SWT.MeasureItem)) { int contentWidth = getContentWidth(columnIndex); int contentX = getContentX(columnIndex); gc.setFont(getFont(columnIndex, false)); org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); event.item = this; event.gc = gc; event.index = columnIndex; event.x = contentX; event.y = parent.getItemY(this); event.width = contentWidth; event.height = parent.itemHeight; event.detail = (isSelected) ? SWT.SELECTED : 0; parent.sendEvent(SWT.MeasureItem, event); event.gc = null; if (gc.isDisposed()) return false; gc.setAlpha(oldAlpha); gc.setAntialias(oldAntialias); gc.setBackgroundPattern(oldBackgroundPattern); gc.setForegroundPattern(oldForegroundPattern); gc.setInterpolation(oldInterpolation); gc.setTextAntialias(oldTextAntialias); gc.setAdvanced(oldAdvanced); if (isDisposed()) return false; if ((parent.itemHeight) != (event.height)) { parent.customHeightSet = true; boolean update = parent.setItemHeight(((event.height) + (2 * (parent.getCellPadding())))); if (update) parent.redraw(); } if ((parent.columns.length) == 0) { int change = (event.width) - ((customWidth) != (-1) ? customWidth : contentWidth); if (((event.width) != contentWidth) || ((customWidth) != (-1))) customWidth = event.width; if (change != 0) { parent.updateHorizontalBar((contentX + (event.width)), change); } } } org.eclipse.swt.widgets.Rectangle clientArea = parent.clientArea; if (((clientArea.x) + (clientArea.width)) < x) return false; org.eclipse.swt.widgets.Rectangle cellBounds = getCellBounds(columnIndex); if (parent.linesVisible) { (cellBounds.y)++; (cellBounds.height)--; } int cellRightX = 0; if (column != null) { cellRightX = (column.getX()) + (column.width); } else { cellRightX = (cellBounds.x) + (cellBounds.width); } gc.setClipping(x, cellBounds.y, ((clientArea.width) - x), cellBounds.height); int y = parent.getItemY(this); int itemHeight = parent.itemHeight; if (column == null) { parent.drawBackground(gc, 0, y, clientArea.width, itemHeight, 0, 0); } else { int fillWidth = cellBounds.width; if (parent.linesVisible) fillWidth--; parent.drawBackground(gc, cellBounds.x, cellBounds.y, fillWidth, cellBounds.height, 0, 0); } boolean isFocusItem = ((parent.focusItem) == (this)) && (parent.isFocusControl()); boolean drawBackground = true; boolean drawForeground = true; boolean drawSelection = isSelected; boolean drawFocus = isFocusItem; if (parent.hooks(SWT.EraseItem)) { drawBackground = ((background) != null) || (((cellBackgrounds) != null) && ((cellBackgrounds[columnIndex]) != null)); gc.setFont(getFont(columnIndex, false)); if (isSelected && ((columnIndex == 0) || (((parent.style) & (SWT.FULL_SELECTION)) != 0))) { gc.setForeground(display.getSystemColor(SWT.COLOR_LIST_SELECTION_TEXT)); gc.setBackground(display.getSystemColor(SWT.COLOR_LIST_SELECTION)); } else { gc.setForeground(getForeground(columnIndex)); gc.setBackground(getBackground(columnIndex)); } org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); event.item = this; event.gc = gc; event.index = columnIndex; event.doit = true; event.detail = SWT.FOREGROUND; if (drawBackground) event.detail |= SWT.BACKGROUND; if (isSelected) event.detail |= SWT.SELECTED; if (isFocusItem) event.detail |= SWT.FOCUSED; event.x = cellBounds.x; event.y = cellBounds.y; event.width = cellBounds.width; event.height = cellBounds.height; gc.setClipping(cellBounds); parent.sendEvent(SWT.EraseItem, event); event.gc = null; if (gc.isDisposed()) return false; gc.setAlpha(oldAlpha); gc.setAntialias(oldAntialias); gc.setBackgroundPattern(oldBackgroundPattern); gc.setClipping(cellBounds); gc.setForegroundPattern(oldForegroundPattern); gc.setInterpolation(oldInterpolation); gc.setTextAntialias(oldTextAntialias); gc.setAdvanced(oldAdvanced); if (isDisposed()) return false; if (!(event.doit)) { drawBackground = drawForeground = drawSelection = drawFocus = false; } else { drawBackground = drawBackground && (((event.detail) & (SWT.BACKGROUND)) != 0); drawForeground = ((event.detail) & (SWT.FOREGROUND)) != 0; drawSelection = isSelected && (((event.detail) & (SWT.SELECTED)) != 0); drawFocus = isFocusItem && (((event.detail) & (SWT.FOCUSED)) != 0); } } if (drawBackground) { gc.setBackground(getBackground(columnIndex)); if ((columnIndex == 0) && ((column == null) || ((column.getOrderIndex()) == 0))) { org.eclipse.swt.widgets.Rectangle focusBounds = getFocusBounds(); int fillWidth = 0; if (column == null) { fillWidth = focusBounds.width; } else { fillWidth = (column.width) - (focusBounds.x); if (parent.linesVisible) fillWidth--; } gc.fillRectangle(focusBounds.x, focusBounds.y, fillWidth, focusBounds.height); } else { int fillWidth = cellBounds.width; gc.fillRectangle(cellBounds.x, cellBounds.y, fillWidth, cellBounds.height); } } if (drawSelection && ((columnIndex == 0) || (((parent.style) & (SWT.FULL_SELECTION)) != 0))) { if ((parent.hasFocus()) || (((parent.style) & (SWT.HIDE_SELECTION)) == 0)) { gc.setBackground(display.getSystemColor(SWT.COLOR_LIST_SELECTION)); if (columnIndex == 0) { org.eclipse.swt.widgets.Rectangle focusBounds = getFocusBounds(); int startX; int fillWidth; if (((column == null) || ((column.getOrderIndex()) == 0)) || (((parent.style) & (SWT.FULL_SELECTION)) == 0)) { startX = (focusBounds.x) + 1; } else { startX = column.getX(); } if (column == null) { fillWidth = (focusBounds.width) - 2; } else { fillWidth = ((column.getX()) + (column.width)) - startX; if (((column.getOrderIndex()) == ((parent.columns.length) - 1)) || (((parent.style) & (SWT.FULL_SELECTION)) == 0)) { fillWidth -= 2; } } if (fillWidth > 0) { gc.fillRectangle(startX, ((focusBounds.y) + 1), fillWidth, ((focusBounds.height) - 2)); } } else { int startX = column.getX(); int fillWidth = column.width; if ((column.getOrderIndex()) == 0) { startX += 1; fillWidth -= 1; } if ((column.getOrderIndex()) == ((parent.columns.length) - 1)) { fillWidth -= 2; } if (fillWidth > 0) { gc.fillRectangle(startX, ((cellBounds.y) + 1), fillWidth, ((cellBounds.height) - 2)); } } } } if (backgroundOnly) return false; if ((columnIndex == 0) && (((parent.style) & (SWT.CHECK)) != 0)) { org.eclipse.swt.widgets.Image baseImage = (grayed) ? parent.getGrayUncheckedImage() : parent.getUncheckedImage(); org.eclipse.swt.widgets.Rectangle checkboxBounds = getCheckboxBounds(); gc.drawImage(baseImage, checkboxBounds.x, checkboxBounds.y); if (checked) { org.eclipse.swt.widgets.Image checkmarkImage = parent.getCheckmarkImage(); org.eclipse.swt.widgets.Rectangle checkmarkBounds = checkmarkImage.getBounds(); int xInset = ((checkboxBounds.width) - (checkmarkBounds.width)) / 2; int yInset = ((checkboxBounds.height) - (checkmarkBounds.height)) / 2; gc.drawImage(checkmarkImage, ((checkboxBounds.x) + xInset), ((checkboxBounds.y) + yInset)); } } if (drawForeground) { org.eclipse.swt.widgets.Image image = getImage(columnIndex, false); java.lang.String text = getDisplayText(columnIndex); org.eclipse.swt.widgets.Rectangle imageArea = getImageBounds(columnIndex); int startX = imageArea.x; int padding = parent.getCellPadding(); gc.setClipping(startX, (((cellBounds.y) + padding) - (parent.linesVisible ? 1 : 0)), ((cellRightX - startX) - padding), ((cellBounds.height) - (2 * (padding - (parent.linesVisible ? 1 : 0))))); if (image != null) { org.eclipse.swt.widgets.Rectangle imageBounds = image.getBounds(); gc.drawImage(image, 0, 0, imageBounds.width, imageBounds.height, imageArea.x, imageArea.y, imageArea.width, imageArea.height); } if ((text.length()) > 0) { gc.setFont(getFont(columnIndex, false)); int fontHeight = getFontHeight(columnIndex); if (drawSelection && ((columnIndex == 0) || (((parent.style) & (SWT.FULL_SELECTION)) != 0))) { if ((parent.hasFocus()) || (((parent.style) & (SWT.HIDE_SELECTION)) == 0)) { gc.setForeground(display.getSystemColor(SWT.COLOR_LIST_SELECTION_TEXT)); } } else { if ((!isSelected) || drawSelection) { gc.setForeground(getForeground(columnIndex)); } } x = (getTextX(columnIndex)) + (org.eclipse.swt.widgets.TableItem.MARGIN_TEXT); gc.drawString(text, x, (y + ((itemHeight - fontHeight) / 2)), true); } } if (parent.hooks(SWT.PaintItem)) { int contentWidth = getContentWidth(columnIndex); int contentX = getContentX(columnIndex); gc.setFont(getFont(columnIndex, false)); if (isSelected && ((columnIndex == 0) || (((parent.style) & (SWT.FULL_SELECTION)) != 0))) { gc.setForeground(display.getSystemColor(SWT.COLOR_LIST_SELECTION_TEXT)); gc.setBackground(display.getSystemColor(SWT.COLOR_LIST_SELECTION)); } else { gc.setForeground(getForeground(columnIndex)); gc.setBackground(getBackground(columnIndex)); } org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); event.item = this; event.gc = gc; event.index = columnIndex; if (isSelected) event.detail |= SWT.SELECTED; if (drawFocus) event.detail |= SWT.FOCUSED; event.x = contentX; event.y = cellBounds.y; event.width = contentWidth; event.height = cellBounds.height; gc.setClipping(cellBounds); parent.sendEvent(SWT.PaintItem, event); event.gc = null; if (gc.isDisposed()) return false; gc.setAlpha(oldAlpha); gc.setAntialias(oldAntialias); gc.setBackgroundPattern(oldBackgroundPattern); gc.setClipping(cellBounds); gc.setForegroundPattern(oldForegroundPattern); gc.setInterpolation(oldInterpolation); gc.setTextAntialias(oldTextAntialias); gc.setAdvanced(oldAdvanced); drawFocus = isFocusItem && (((event.detail) & (SWT.FOCUSED)) != 0); } return isFocusItem && (!drawFocus); }
synchronized void createDisplay(org.eclipse.swt.widgets.DeviceData data) { if (!(org.eclipse.swt.widgets.OS.g_thread_supported())) { org.eclipse.swt.widgets.OS.g_thread_init(0); } org.eclipse.swt.widgets.OS.gtk_set_locale(); if (!(org.eclipse.swt.widgets.OS.gtk_init_check(new int[]{ 0 }, null))) { org.eclipse.swt.widgets.SWT.error(SWT.ERROR_NO_HANDLES, null, " [gtk_init_check() failed]"); } int ptr = org.eclipse.swt.widgets.OS.gtk_check_version(org.eclipse.swt.widgets.Display.MAJOR, org.eclipse.swt.widgets.Display.MINOR, org.eclipse.swt.widgets.Display.MICRO); if (ptr != 0) { int length = org.eclipse.swt.widgets.OS.strlen(ptr); byte[] buffer = new byte[length]; org.eclipse.swt.widgets.OS.memmove(buffer, ptr, length); java.lang.System.out.println(("***WARNING: " + (new java.lang.String(org.eclipse.swt.widgets.Converter.mbcsToWcs(null, buffer))))); java.lang.System.out.println(((((("***WARNING: SWT requires GTK " + (org.eclipse.swt.widgets.Display.MAJOR)) + ".") + (org.eclipse.swt.widgets.Display.MINOR)) + ".") + (org.eclipse.swt.widgets.Display.MICRO))); int major = org.eclipse.swt.widgets.OS.gtk_major_version(); int minor = org.eclipse.swt.widgets.OS.gtk_minor_version(); int micro = org.eclipse.swt.widgets.OS.gtk_micro_version(); java.lang.System.out.println(((((("***WARNING: Detected: " + major) + ".") + minor) + ".") + micro)); } if ((org.eclipse.swt.widgets.Display.fixed_type) == 0) { byte[] type_name = org.eclipse.swt.widgets.Converter.wcsToMbcs(null, "SwtFixed", true); org.eclipse.swt.widgets.Display.fixedClassInitCallback = new org.eclipse.swt.widgets.Callback(getClass(), "fixedClassInitProc", 2); org.eclipse.swt.widgets.Display.fixedClassInitProc = org.eclipse.swt.widgets.Display.fixedClassInitCallback.getAddress(); if ((org.eclipse.swt.widgets.Display.fixedClassInitProc) == 0) org.eclipse.swt.widgets.SWT.error(SWT.ERROR_NO_MORE_CALLBACKS); org.eclipse.swt.widgets.Display.fixedMapCallback = new org.eclipse.swt.widgets.Callback(getClass(), "fixedMapProc", 1); org.eclipse.swt.widgets.Display.fixedMapProc = org.eclipse.swt.widgets.Display.fixedMapCallback.getAddress(); if ((org.eclipse.swt.widgets.Display.fixedMapProc) == 0) org.eclipse.swt.widgets.SWT.error(SWT.ERROR_NO_MORE_CALLBACKS); org.eclipse.swt.widgets.GTypeInfo fixed_info = new org.eclipse.swt.widgets.GTypeInfo(); fixed_info.class_size = ((short) (org.eclipse.swt.widgets.OS.GtkFixedClass_sizeof())); fixed_info.class_init = org.eclipse.swt.widgets.Display.fixedClassInitProc; fixed_info.instance_size = ((short) (org.eclipse.swt.widgets.OS.GtkFixed_sizeof())); org.eclipse.swt.widgets.Display.fixed_info_ptr = org.eclipse.swt.widgets.OS.g_malloc(GTypeInfo.sizeof); org.eclipse.swt.widgets.OS.memmove(org.eclipse.swt.widgets.Display.fixed_info_ptr, fixed_info, GTypeInfo.sizeof); org.eclipse.swt.widgets.Display.fixed_type = org.eclipse.swt.widgets.OS.g_type_register_static(org.eclipse.swt.widgets.OS.GTK_TYPE_FIXED(), type_name, org.eclipse.swt.widgets.Display.fixed_info_ptr, 0); } org.eclipse.swt.widgets.OS.gtk_widget_set_default_direction(OS.GTK_TEXT_DIR_LTR); org.eclipse.swt.widgets.OS.gdk_rgb_init(); byte[] buffer = org.eclipse.swt.widgets.Converter.wcsToMbcs(null, org.eclipse.swt.widgets.Display.APP_NAME, true); org.eclipse.swt.widgets.OS.g_set_prgname(buffer); org.eclipse.swt.widgets.OS.gdk_set_program_class(buffer); byte[] flatStyle = org.eclipse.swt.widgets.Converter.wcsToMbcs(null, "style \"swt-flat\" { GtkToolbar::shadow-type = none } widget \"*swt-toolbar-flat*\" style : highest \"swt-flat\"", true); org.eclipse.swt.widgets.OS.gtk_rc_parse_string(flatStyle); shellHandle = org.eclipse.swt.widgets.OS.gtk_window_new(OS.GTK_WINDOW_TOPLEVEL); if ((shellHandle) == 0) org.eclipse.swt.widgets.SWT.error(SWT.ERROR_NO_HANDLES); org.eclipse.swt.widgets.OS.gtk_widget_realize(shellHandle); eventCallback = new org.eclipse.swt.widgets.Callback(this, "eventProc", 2); eventProc = eventCallback.getAddress(); if ((eventProc) == 0) org.eclipse.swt.widgets.SWT.error(SWT.ERROR_NO_MORE_CALLBACKS); org.eclipse.swt.widgets.OS.gdk_event_handler_set(eventProc, 0, 0); filterCallback = new org.eclipse.swt.widgets.Callback(this, "filterProc", 3); filterProc = filterCallback.getAddress(); if ((filterProc) == 0) error(SWT.ERROR_NO_MORE_CALLBACKS); org.eclipse.swt.widgets.OS.gdk_window_add_filter(0, filterProc, 0); }
public org.eclipse.swt.widgets.Point computeSize(int wHint, int hHint, boolean changed) { checkWidget(); int width = 0; int height = 0; org.eclipse.swt.widgets.NSControl widget = ((org.eclipse.swt.widgets.NSControl) (view)); org.eclipse.swt.widgets.NSCell viewCell = widget.cell(); org.eclipse.swt.widgets.NSSize size = viewCell.cellSize(); width = ((int) (java.lang.Math.ceil(size.width))); height = ((int) (java.lang.Math.ceil(size.height))); if (((style) & (SWT.READ_ONLY)) == 0) { ignoreSetObject = true; org.eclipse.swt.widgets.NSComboBoxCell cell = new org.eclipse.swt.widgets.NSComboBoxCell(viewCell.id); org.eclipse.swt.widgets.NSArray array = cell.objectValues(); int length = ((int) (array.count())); if (length > 0) { cell = new org.eclipse.swt.widgets.NSComboBoxCell(cell.copy()); for (int i = 0; i < length; i++) { org.eclipse.swt.widgets.NSAttributedString attStr = new org.eclipse.swt.widgets.NSAttributedString(array.objectAtIndex(i)); cell.setAttributedStringValue(attStr); size = cell.cellSize(); width = java.lang.Math.max(width, ((int) (java.lang.Math.ceil(size.width)))); } cell.release(); } ignoreSetObject = false; org.eclipse.swt.widgets.NSString nsStr = widget.stringValue(); if (nsStr != null) { java.lang.String str = nsStr.getString(); if ((str != null) && (((str.indexOf('\n')) >= 0) || ((str.indexOf('\r')) >= 0))) { int frameHeight = ((int) (view.frame().height)); if (frameHeight > 0) { height = frameHeight; } } } } else { org.eclipse.swt.widgets.NSPopUpButton nsPopUpButton = ((org.eclipse.swt.widgets.NSPopUpButton) (view)); if (((nsPopUpButton.numberOfItems()) == 1) && ((nsPopUpButton.indexOfSelectedItem()) == (-1))) { nsPopUpButton.selectItemAtIndex(0); size = viewCell.cellSize(); width = java.lang.Math.max(width, ((int) (java.lang.Math.ceil(size.width)))); nsPopUpButton.selectItemAtIndex((-1)); } } if (hHint != (SWT.DEFAULT)) { if ((((style) & (SWT.READ_ONLY)) != 0) || (hHint < height)) height = hHint; } if (wHint != (SWT.DEFAULT)) width = wHint; return new org.eclipse.swt.widgets.Point(width, height); }
void setSelection(int index, boolean notify) { if (index >= (org.eclipse.swt.internal.carbon.OS.GetControl32BitMaximum(handle))) return; int currentIndex = (org.eclipse.swt.internal.carbon.OS.GetControl32BitValue(handle)) - 1; if (currentIndex != (-1)) { org.eclipse.swt.widgets.TabItem item = items[currentIndex]; if (item != null) { org.eclipse.swt.widgets.Control control = item.control; if ((control != null) && (!(control.isDisposed()))) { control.setVisible(false); } } } org.eclipse.swt.internal.carbon.OS.SetControl32BitValue(handle, (index + 1)); index = (org.eclipse.swt.internal.carbon.OS.GetControl32BitValue(handle)) - 1; lastSelected = index; if (index != (-1)) { org.eclipse.swt.widgets.TabItem item = items[index]; if (item != null) { org.eclipse.swt.widgets.Control control = item.control; if ((control != null) && (!(control.isDisposed()))) { control.setBounds(getClientArea()); control.setVisible(true); } if (notify) { org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); event.item = item; sendEvent(SWT.Selection, event); } } } }
private boolean isOffice2007(boolean program) { java.lang.String programID = getProgramID(); if (programID == null) return false; if (program) { int lastDot = programID.lastIndexOf('.'); if (lastDot != (-1)) { programID = programID.substring(0, lastDot); org.eclipse.swt.ole.win32.GUID guid = getClassID(programID); programID = getProgID(guid); if (programID == null) return false; } } if (programID.equals("Word.Document.12")) return true; if (programID.equals("Excel.Sheet.12")) return true; if (programID.equals("PowerPoint.Show.12")) return true; return false; }
void setOrientation() { super.setOrientation(); if (((parent.style) & (SWT.MIRRORED)) != 0) { if (((parent.state) & (CANVAS)) != 0) { if (((style) & (SWT.HORIZONTAL)) != 0) { org.eclipse.swt.widgets.OS.gtk_range_set_inverted(handle, true); } } } }
public void textChanged(int startOffset, int newLineCount, int replaceLineCount, int newCharCount, int replaceCharCount) { int startLine = visualContent.getLineAtOffset(startOffset); visualContent.textChanged(startOffset, newLineCount, replaceLineCount, newCharCount, replaceCharCount); if (wordWrap) { int lineCount = content.getLineCount(); if (startLine >= lineCount) startLine = lineCount - 1; } if (startLine <= (getPartialBottomIndex())) { parent.internalRedraw(); } }
public org.eclipse.swt.widgets.Point computeSize(int wHint, int hHint, boolean changed) { checkWidget(); int border = getBorderWidth(); int width = border * 2; int height = border * 2; if (((style) & (SWT.SEPARATOR)) != 0) { if (((style) & (SWT.HORIZONTAL)) != 0) { width += DEFAULT_WIDTH; height += 3; } else { width += 3; height += DEFAULT_HEIGHT; } if (wHint != (SWT.DEFAULT)) width = wHint + (border * 2); if (hHint != (SWT.DEFAULT)) height = hHint + (border * 2); return new org.eclipse.swt.widgets.Point(width, height); } int[] argList = new int[]{ OS.XmNlabelType, 0 }; org.eclipse.swt.widgets.OS.XtGetValues(handle, argList, ((argList.length) / 2)); int labelType = argList[1]; if ((labelType == (OS.XmSTRING)) && (((style) & (SWT.WRAP)) != 0)) { int[] argList4 = new int[]{ OS.XmNmarginTop, 0, OS.XmNmarginBottom, 0, OS.XmNmarginHeight, 0, OS.XmNmarginWidth, 0 }; org.eclipse.swt.widgets.OS.XtGetValues(handle, argList4, ((argList4.length) / 2)); java.lang.String string = text; if (wHint != (SWT.DEFAULT)) { int unavailable = 2 * ((argList4[7]) + (getBorderWidth())); string = display.wrapText(string, font, (wHint - unavailable)); } org.eclipse.swt.widgets.GC gc = new org.eclipse.swt.widgets.GC(this); org.eclipse.swt.widgets.Point extent = gc.textExtent(string); gc.dispose(); height = ((((extent.y) + (argList4[1])) + (argList4[3])) + ((argList4[5]) * 2)) + (border * 2); if (wHint == (SWT.DEFAULT)) { width += (extent.x) + (2 * (argList4[7])); } } else { org.eclipse.swt.widgets.XtWidgetGeometry result = new org.eclipse.swt.widgets.XtWidgetGeometry(); result.request_mode = (OS.CWWidth) | (OS.CWHeight); org.eclipse.swt.widgets.OS.XtQueryGeometry(handle, null, result); width += result.width; height += result.height; } if ((labelType == (OS.XmSTRING)) && ((text.length()) == 0)) { width = 0; } if (wHint != (SWT.DEFAULT)) width = wHint + (border * 2); if (hHint != (SWT.DEFAULT)) height = hHint + (border * 2); return new org.eclipse.swt.widgets.Point(width, height); }
int kEventWindowActivated(int nextHandler, int theEvent, int userData) { int result = super.kEventWindowActivated(nextHandler, theEvent, userData); if (result == (org.eclipse.swt.internal.carbon.OS.noErr)) return result; int[] outScope = new int[1]; org.eclipse.swt.internal.carbon.OS.GetWindowActivationScope(shellHandle, outScope); if ((outScope[0]) == (org.eclipse.swt.internal.carbon.OS.kWindowActivationScopeNone)) return result; display.setMenuBar(menuBar); if ((menuBar) != null) org.eclipse.swt.internal.carbon.OS.DrawMenuBar(); activate = true; sendEvent(SWT.Activate); if (isDisposed()) return result; restoreFocus(); activate = false; return result; }
public org.eclipse.swt.widgets.Widget findWidget(int handle, int id) { checkDevice(); return null; }
int kEventRawKeyPressed(int nextHandler, int theEvent, int userData) { if ((org.eclipse.swt.internal.carbon.OS.VERSION) < 4160) { int[] keyCode = new int[1]; org.eclipse.swt.internal.carbon.OS.GetEventParameter(theEvent, OS.kEventParamKeyCode, OS.typeUInt32, null, ((keyCode.length) * 4), null, keyCode); switch (keyCode[0]) { case 126 : case 125 : if (!(sendKeyEvent(SWT.KeyDown, theEvent))) return org.eclipse.swt.internal.carbon.OS.noErr; break; } } return org.eclipse.swt.internal.carbon.OS.eventNotHandledErr; }
org.eclipse.swt.widgets.LRESULT WM_NOTIFY(int wParam, int lParam) { org.eclipse.swt.widgets.NMHDR hdr = new org.eclipse.swt.widgets.NMHDR(); org.eclipse.swt.widgets.OS.MoveMemory(hdr, lParam, NMHDR.sizeof); if (((hwndHeader) != 0) && ((hdr.hwndFrom) == (hwndHeader))) { switch (hdr.code) { case OS.HDN_BEGINTRACKW : case OS.HDN_BEGINTRACKA : case OS.HDN_DIVIDERDBLCLICKW : case OS.HDN_DIVIDERDBLCLICKA : { org.eclipse.swt.widgets.NMHEADER phdn = new org.eclipse.swt.widgets.NMHEADER(); org.eclipse.swt.widgets.OS.MoveMemory(phdn, lParam, NMHEADER.sizeof); org.eclipse.swt.widgets.TreeColumn column = columns[phdn.iItem]; if ((column != null) && (!(column.getResizable()))) { return LRESULT.ONE; } ignoreColumnMove = true; switch (hdr.code) { case OS.HDN_DIVIDERDBLCLICKW : case OS.HDN_DIVIDERDBLCLICKA : if (column != null) column.pack(); } break; } case OS.NM_RELEASEDCAPTURE : { if (!(ignoreColumnMove)) { int count = org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0); for (int i = 0; i < count; i++) { org.eclipse.swt.widgets.TreeColumn column = columns[i]; column.updateToolTip(i); } updateImageList(); } ignoreColumnMove = false; break; } case OS.HDN_BEGINDRAG : { if (ignoreColumnMove) return LRESULT.ONE; org.eclipse.swt.widgets.NMHEADER phdn = new org.eclipse.swt.widgets.NMHEADER(); org.eclipse.swt.widgets.OS.MoveMemory(phdn, lParam, NMHEADER.sizeof); if ((phdn.iItem) != (-1)) { org.eclipse.swt.widgets.TreeColumn column = columns[phdn.iItem]; if ((column != null) && (!(column.getMoveable()))) { ignoreColumnMove = true; return LRESULT.ONE; } } break; } case OS.HDN_ENDDRAG : { org.eclipse.swt.widgets.NMHEADER phdn = new org.eclipse.swt.widgets.NMHEADER(); org.eclipse.swt.widgets.OS.MoveMemory(phdn, lParam, NMHEADER.sizeof); if (((phdn.iItem) != (-1)) && ((phdn.pitem) != 0)) { org.eclipse.swt.widgets.HDITEM pitem = new org.eclipse.swt.widgets.HDITEM(); org.eclipse.swt.widgets.OS.MoveMemory(pitem, phdn.pitem, HDITEM.sizeof); if ((((pitem.mask) & (OS.HDI_ORDER)) != 0) && ((pitem.iOrder) != (-1))) { int count = org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0); int[] order = new int[count]; org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETORDERARRAY, count, order); int index = 0; while (index < (order.length)) { if ((order[index]) == (phdn.iItem)) break; index++; } if (index == (order.length)) index = 0; if (index == (pitem.iOrder)) break; int start = java.lang.Math.min(index, pitem.iOrder); int end = java.lang.Math.max(index, pitem.iOrder); org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); org.eclipse.swt.widgets.RECT itemRect = new org.eclipse.swt.widgets.RECT(); org.eclipse.swt.widgets.OS.GetClientRect(handle, rect); org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEMRECT, order[start], itemRect); rect.left = java.lang.Math.max(rect.left, itemRect.left); org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEMRECT, order[end], itemRect); rect.right = java.lang.Math.min(rect.right, itemRect.right); org.eclipse.swt.widgets.OS.InvalidateRect(handle, rect, true); ignoreColumnMove = false; for (int i = start; i <= end; i++) { org.eclipse.swt.widgets.TreeColumn column = columns[order[i]]; if (!(column.isDisposed())) { column.postEvent(SWT.Move); } } } } break; } case OS.HDN_ITEMCHANGINGW : case OS.HDN_ITEMCHANGINGA : { org.eclipse.swt.widgets.NMHEADER phdn = new org.eclipse.swt.widgets.NMHEADER(); org.eclipse.swt.widgets.OS.MoveMemory(phdn, lParam, NMHEADER.sizeof); if ((phdn.pitem) != 0) { org.eclipse.swt.widgets.HDITEM newItem = new org.eclipse.swt.widgets.HDITEM(); org.eclipse.swt.widgets.OS.MoveMemory(newItem, phdn.pitem, HDITEM.sizeof); if (((newItem.mask) & (OS.HDI_WIDTH)) != 0) { org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); org.eclipse.swt.widgets.OS.GetClientRect(handle, rect); org.eclipse.swt.widgets.RECT itemRect = new org.eclipse.swt.widgets.RECT(); int count = org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0); int index = org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_ORDERTOINDEX, (count - 1), 0); org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEMRECT, index, itemRect); rect.right = java.lang.Math.max(rect.right, itemRect.right); org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEMRECT, phdn.iItem, itemRect); int gridWidth = (getLinesVisible()) ? org.eclipse.swt.widgets.Tree.GRID_WIDTH : 0; rect.left = (itemRect.right) - gridWidth; if ((backgroundImage) != null) { org.eclipse.swt.widgets.OS.InvalidateRect(handle, rect, true); } else { org.eclipse.swt.widgets.HDITEM oldItem = new org.eclipse.swt.widgets.HDITEM(); oldItem.mask = OS.HDI_WIDTH; org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEM, phdn.iItem, oldItem); int deltaX = (newItem.cxy) - (oldItem.cxy); int flags = (OS.SW_INVALIDATE) | (OS.SW_ERASE); org.eclipse.swt.widgets.OS.ScrollWindowEx(handle, deltaX, 0, rect, null, 0, null, flags); } if ((phdn.iItem) != 0) { rect.left = itemRect.left; rect.right = itemRect.right; org.eclipse.swt.widgets.OS.InvalidateRect(handle, rect, true); } setScrollWidth(); } } break; } case OS.HDN_ITEMCHANGEDW : case OS.HDN_ITEMCHANGEDA : { org.eclipse.swt.widgets.NMHEADER phdn = new org.eclipse.swt.widgets.NMHEADER(); org.eclipse.swt.widgets.OS.MoveMemory(phdn, lParam, NMHEADER.sizeof); if ((phdn.pitem) != 0) { org.eclipse.swt.widgets.HDITEM pitem = new org.eclipse.swt.widgets.HDITEM(); org.eclipse.swt.widgets.OS.MoveMemory(pitem, phdn.pitem, HDITEM.sizeof); if (((pitem.mask) & (OS.HDI_WIDTH)) != 0) { org.eclipse.swt.widgets.TreeColumn column = columns[phdn.iItem]; if (column != null) { column.updateToolTip(phdn.iItem); column.sendEvent(SWT.Resize); if (isDisposed()) return LRESULT.ZERO; int count = org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0); org.eclipse.swt.widgets.TreeColumn[] newColumns = new org.eclipse.swt.widgets.TreeColumn[count]; java.lang.System.arraycopy(columns, 0, newColumns, 0, count); int[] order = new int[count]; org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETORDERARRAY, count, order); boolean moved = false; for (int i = 0; i < count; i++) { org.eclipse.swt.widgets.TreeColumn nextColumn = newColumns[order[i]]; if (moved && (!(nextColumn.isDisposed()))) { nextColumn.updateToolTip(order[i]); nextColumn.sendEvent(SWT.Move); } if (nextColumn == column) moved = true; } } } setScrollWidth(); } break; } case OS.HDN_ITEMCLICKW : case OS.HDN_ITEMCLICKA : { org.eclipse.swt.widgets.NMHEADER phdn = new org.eclipse.swt.widgets.NMHEADER(); org.eclipse.swt.widgets.OS.MoveMemory(phdn, lParam, NMHEADER.sizeof); org.eclipse.swt.widgets.TreeColumn column = columns[phdn.iItem]; if (column != null) { column.postEvent(SWT.Selection); } break; } case OS.HDN_ITEMDBLCLICKW : case OS.HDN_ITEMDBLCLICKA : { org.eclipse.swt.widgets.NMHEADER phdn = new org.eclipse.swt.widgets.NMHEADER(); org.eclipse.swt.widgets.OS.MoveMemory(phdn, lParam, NMHEADER.sizeof); org.eclipse.swt.widgets.TreeColumn column = columns[phdn.iItem]; if (column != null) { column.postEvent(SWT.DefaultSelection); } break; } } } return super.WM_NOTIFY(wParam, lParam); }
void setToolTipTitle(int hwndToolTip, java.lang.String text, int icon) { if ((hwndToolTip != (toolTipHandle)) && (hwndToolTip != (balloonTipHandle))) { return; } if (hwndToolTip == (toolTipHandle)) { if ((text == (toolTitle)) || (((toolTitle) != null) && (toolTitle.equals(text)))) { if (icon == (toolIcon)) return; } toolTitle = text; toolIcon = icon; } else { if (hwndToolTip == (balloonTipHandle)) { if ((text == (balloonTitle)) || (((balloonTitle) != null) && (balloonTitle.equals(text)))) { if (icon == (toolIcon)) return; } balloonTitle = text; balloonIcon = icon; } } if (text != null) { if ((text.length()) > 99) text = text.substring(0, 99); org.eclipse.swt.widgets.TCHAR pszTitle = new org.eclipse.swt.widgets.TCHAR(getCodePage(), text, true); org.eclipse.swt.widgets.OS.SendMessage(hwndToolTip, OS.TTM_SETTITLE, icon, pszTitle); } else { org.eclipse.swt.widgets.OS.SendMessage(hwndToolTip, OS.TTM_SETTITLE, 0, 0); } }
protected void layout(org.eclipse.swt.custom.Composite composite, boolean flushCache) { org.eclipse.swt.custom.ViewForm form = ((org.eclipse.swt.custom.ViewForm) (composite)); org.eclipse.swt.custom.Control left = form.topLeft; org.eclipse.swt.custom.Control center = form.topCenter; org.eclipse.swt.custom.Control right = form.topRight; org.eclipse.swt.custom.Control content = form.content; org.eclipse.swt.custom.Rectangle rect = composite.getClientArea(); org.eclipse.swt.custom.Point leftSize = new org.eclipse.swt.custom.Point(0, 0); if ((left != null) && (!(left.isDisposed()))) { leftSize = computeChildSize(left, SWT.DEFAULT, SWT.DEFAULT, flushCache); } org.eclipse.swt.custom.Point centerSize = new org.eclipse.swt.custom.Point(0, 0); if ((center != null) && (!(center.isDisposed()))) { centerSize = computeChildSize(center, SWT.DEFAULT, SWT.DEFAULT, flushCache); } org.eclipse.swt.custom.Point rightSize = new org.eclipse.swt.custom.Point(0, 0); if ((right != null) && (!(right.isDisposed()))) { rightSize = computeChildSize(right, SWT.DEFAULT, SWT.DEFAULT, flushCache); } int minTopWidth = ((((leftSize.x) + (centerSize.x)) + (rightSize.x)) + (2 * (form.marginWidth))) + (2 * (form.highlight)); int count = -1; if ((leftSize.x) > 0) count++; if ((centerSize.x) > 0) count++; if ((rightSize.x) > 0) count++; if (count > 0) minTopWidth += count * (form.horizontalSpacing); int x = (((rect.x) + (rect.width)) - (form.marginWidth)) - (form.highlight); int y = ((rect.y) + (form.marginHeight)) + (form.highlight); boolean top = false; if ((form.separateTopCenter) || (minTopWidth > (rect.width))) { int topHeight = java.lang.Math.max(rightSize.y, leftSize.y); if ((right != null) && (!(right.isDisposed()))) { top = true; x -= rightSize.x; right.setBounds(x, y, rightSize.x, topHeight); x -= form.horizontalSpacing; } if ((left != null) && (!(left.isDisposed()))) { top = true; int trim = computeTrim(left); int leftW = (((x - (rect.x)) - (form.marginWidth)) - (form.highlight)) - trim; leftSize = computeChildSize(left, leftW, SWT.DEFAULT, false); left.setBounds((((rect.x) + (form.marginWidth)) + (form.highlight)), y, leftSize.x, topHeight); } if (top) y += topHeight + (form.verticalSpacing); if ((center != null) && (!(center.isDisposed()))) { top = true; int trim = computeTrim(center); int w = (((rect.width) - (2 * (form.marginWidth))) - (2 * (form.highlight))) - trim; org.eclipse.swt.custom.Point size = computeChildSize(center, w, SWT.DEFAULT, false); if ((size.x) < (centerSize.x)) { centerSize = size; } center.setBounds((((((rect.x) + (rect.width)) - (form.marginWidth)) - (form.highlight)) - (centerSize.x)), y, centerSize.x, centerSize.y); y += (centerSize.y) + (form.verticalSpacing); } } else { int topHeight = java.lang.Math.max(rightSize.y, java.lang.Math.max(centerSize.y, leftSize.y)); if ((right != null) && (!(right.isDisposed()))) { top = true; x -= rightSize.x; right.setBounds(x, y, rightSize.x, topHeight); x -= form.horizontalSpacing; } if ((center != null) && (!(center.isDisposed()))) { top = true; x -= centerSize.x; center.setBounds(x, y, centerSize.x, topHeight); x -= form.horizontalSpacing; } if ((left != null) && (!(left.isDisposed()))) { top = true; org.eclipse.swt.custom.Rectangle trim = (left instanceof org.eclipse.swt.custom.Composite) ? ((org.eclipse.swt.custom.Composite) (left)).computeTrim(0, 0, 0, 0) : new org.eclipse.swt.custom.Rectangle(0, 0, 0, 0); int w = (((x - (rect.x)) - (form.marginWidth)) - (form.highlight)) - (trim.width); int h = topHeight - (trim.height); leftSize = computeChildSize(left, w, h, false); left.setBounds((((rect.x) + (form.marginWidth)) + (form.highlight)), y, leftSize.x, topHeight); } if (top) y += topHeight + (form.verticalSpacing); } int oldSeperator = form.separator; form.separator = -1; if ((content != null) && (!(content.isDisposed()))) { if (((left != null) || (right != null)) || (center != null)) { form.separator = y; y++; } content.setBounds((((rect.x) + (form.marginWidth)) + (form.highlight)), y, (((rect.width) - (2 * (form.marginWidth))) - (2 * (form.highlight))), (((((rect.y) + (rect.height)) - y) - (form.marginHeight)) - (form.highlight))); } if (oldSeperator != (form.separator)) { int t; int b; if (oldSeperator == (-1)) { t = form.separator; b = (form.separator) + 1; } else if ((form.separator) == (-1)) { t = oldSeperator; b = oldSeperator + 1; } else { t = java.lang.Math.min(form.separator, oldSeperator); b = java.lang.Math.max(form.separator, oldSeperator); } form.redraw(form.borderLeft, t, (((form.getSize().x) - (form.borderLeft)) - (form.borderRight)), (b - t), false); } }
void decidePolicyForNewWindowAction(int actionInformation, int request, int frameName, int listener) { org.eclipse.swt.browser.WebKit.objc_msgSend(listener, WebKit.S_use); }
void setBackgroundColor(org.eclipse.swt.widgets.GdkColor color) { super.setBackgroundColor(color); if ((OS.GTK_VERSION) >= (org.eclipse.swt.widgets.OS.VERSION(2, 4, 0))) { if ((entryHandle) != 0) org.eclipse.swt.widgets.OS.gtk_widget_modify_base(entryHandle, 0, color); if ((cellHandle) != 0) org.eclipse.swt.widgets.OS.g_object_set(cellHandle, OS.background_gdk, color, 0); org.eclipse.swt.widgets.OS.g_object_set(textRenderer, OS.background_gdk, color, 0); } else { org.eclipse.swt.widgets.OS.gtk_widget_modify_base(entryHandle, 0, color); if ((listHandle) != 0) org.eclipse.swt.widgets.OS.gtk_widget_modify_base(listHandle, 0, color); } }
public void setEnabled(boolean enabled) { checkWidget(); int topHandle = topHandle(); org.eclipse.swt.widgets.OS.gtk_widget_set_sensitive(topHandle, enabled); if (enabled) { int[] x = new int[1]; int[] y = new int[1]; org.eclipse.swt.widgets.OS.gdk_window_get_pointer(parent.paintWindow(), x, y, null); if (getBounds().contains(x[0], y[0])) { org.eclipse.swt.widgets.OS.gtk_widget_hide(handle); org.eclipse.swt.widgets.OS.gtk_widget_show(handle); } } }
void createWidget(int index) { parent.createItem(this, index); setOrientation(); hookEvents(); register(); text = ""; }
public void setEnabled(boolean enabled) { checkWidget(); long topHandle = topHandle(); if ((gtk_widget_get_sensitive(topHandle)) == enabled) return; org.eclipse.swt.widgets.OS.gtk_widget_set_sensitive(topHandle, enabled); if (enabled) { int[] x = new int[1]; int[] y = new int[1]; gdk_window_get_device_position(parent.paintWindow(), x, y, null); if (getBounds().contains(x[0], y[0])) { org.eclipse.swt.widgets.OS.gtk_widget_hide(handle); org.eclipse.swt.widgets.OS.gtk_widget_show(handle); } } else { if (((OS.GTK_VERSION) >= (org.eclipse.swt.widgets.OS.VERSION(2, 14, 0))) && (!(OS.GTK3))) { org.eclipse.swt.widgets.OS.gtk_widget_set_state(topHandle, OS.GTK_STATE_NORMAL); } } }
org.eclipse.swt.widgets.LRESULT WM_PAINT(int wParam, int lParam) { if (((state) & (CANVAS)) == 0) { return super.WM_PAINT(wParam, lParam); } int oldBits = 0; int newBits = 0; if (!(OS.IsWinCE)) { oldBits = org.eclipse.swt.widgets.OS.GetWindowLong(handle, OS.GWL_STYLE); newBits = (oldBits | (OS.WS_CLIPSIBLINGS)) | (OS.WS_CLIPCHILDREN); if (newBits != oldBits) org.eclipse.swt.widgets.OS.SetWindowLong(handle, OS.GWL_STYLE, newBits); } org.eclipse.swt.widgets.PAINTSTRUCT ps = new org.eclipse.swt.widgets.PAINTSTRUCT(); if (hooks(SWT.Paint)) { org.eclipse.swt.widgets.GCData data = new org.eclipse.swt.widgets.GCData(); data.ps = ps; data.hwnd = handle; org.eclipse.swt.widgets.GC gc = org.eclipse.swt.widgets.GC.win32_new(this, data); int sysRgn = 0; if (((style) & ((SWT.NO_MERGE_PAINTS) | (SWT.DOUBLE_BUFFERED))) != 0) { sysRgn = org.eclipse.swt.widgets.OS.CreateRectRgn(0, 0, 0, 0); if ((org.eclipse.swt.widgets.OS.GetRandomRgn(gc.handle, sysRgn, OS.SYSRGN)) == 1) { if ((OS.WIN32_VERSION) >= (org.eclipse.swt.widgets.OS.VERSION(4, 10))) { if (((org.eclipse.swt.widgets.OS.GetLayout(gc.handle)) & (OS.LAYOUT_RTL)) != 0) { int nBytes = org.eclipse.swt.widgets.OS.GetRegionData(sysRgn, 0, null); int[] lpRgnData = new int[nBytes / 4]; org.eclipse.swt.widgets.OS.GetRegionData(sysRgn, nBytes, lpRgnData); int newSysRgn = org.eclipse.swt.widgets.OS.ExtCreateRegion(new float[]{ -1, 0, 0, 1, 0, 0 }, nBytes, lpRgnData); org.eclipse.swt.widgets.OS.DeleteObject(sysRgn); sysRgn = newSysRgn; } } if (OS.IsWinNT) { org.eclipse.swt.widgets.POINT pt = new org.eclipse.swt.widgets.POINT(); org.eclipse.swt.widgets.OS.MapWindowPoints(0, handle, pt, 1); org.eclipse.swt.widgets.OS.OffsetRgn(sysRgn, pt.x, pt.y); } } } int width = (ps.right) - (ps.left); int height = (ps.bottom) - (ps.top); if ((width != 0) && (height != 0)) { org.eclipse.swt.widgets.GC paintGC = null; org.eclipse.swt.widgets.Image image = null; if (((style) & (SWT.DOUBLE_BUFFERED)) != 0) { image = new org.eclipse.swt.widgets.Image(display, width, height); paintGC = gc; gc = new org.eclipse.swt.widgets.GC(image, ((style) & (SWT.RIGHT_TO_LEFT))); gc.setForeground(getForeground()); gc.setBackground(getBackground()); gc.setFont(getFont()); org.eclipse.swt.widgets.OS.OffsetRgn(sysRgn, (-(ps.left)), (-(ps.top))); org.eclipse.swt.widgets.OS.SelectClipRgn(gc.handle, sysRgn); org.eclipse.swt.widgets.OS.OffsetRgn(sysRgn, ps.left, ps.top); org.eclipse.swt.widgets.OS.SetMetaRgn(gc.handle); org.eclipse.swt.widgets.OS.SetWindowOrgEx(gc.handle, ps.left, ps.top, null); org.eclipse.swt.widgets.OS.SetBrushOrgEx(gc.handle, ps.left, ps.top, null); if (((style) & (SWT.NO_BACKGROUND)) != 0) { } else { org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); org.eclipse.swt.widgets.OS.SetRect(rect, ps.left, ps.top, ps.right, ps.bottom); drawBackground(gc.handle, rect); } } org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); event.gc = gc; org.eclipse.swt.widgets.RECT rect = null; if ((((style) & (SWT.NO_MERGE_PAINTS)) != 0) && ((org.eclipse.swt.widgets.OS.GetRgnBox(sysRgn, (rect = new org.eclipse.swt.widgets.RECT()))) == (OS.COMPLEXREGION))) { int nBytes = org.eclipse.swt.widgets.OS.GetRegionData(sysRgn, 0, null); int[] lpRgnData = new int[nBytes / 4]; org.eclipse.swt.widgets.OS.GetRegionData(sysRgn, nBytes, lpRgnData); int count = lpRgnData[2]; for (int i = 0; i < count; i++) { int offset = 8 + (i << 2); org.eclipse.swt.widgets.OS.SetRect(rect, lpRgnData[offset], lpRgnData[(offset + 1)], lpRgnData[(offset + 2)], lpRgnData[(offset + 3)]); if (((style) & ((SWT.DOUBLE_BUFFERED) | (SWT.NO_BACKGROUND))) == 0) { drawBackground(gc.handle, rect); } event.x = rect.left; event.y = rect.top; event.width = (rect.right) - (rect.left); event.height = (rect.bottom) - (rect.top); event.count = (count - 1) - i; sendEvent(SWT.Paint, event); } } else { if (((style) & ((SWT.DOUBLE_BUFFERED) | (SWT.NO_BACKGROUND))) == 0) { if (rect == null) rect = new org.eclipse.swt.widgets.RECT(); org.eclipse.swt.widgets.OS.SetRect(rect, ps.left, ps.top, ps.right, ps.bottom); drawBackground(gc.handle, rect); } event.x = ps.left; event.y = ps.top; event.width = width; event.height = height; sendEvent(SWT.Paint, event); } event.gc = null; if (((style) & (SWT.DOUBLE_BUFFERED)) != 0) { gc.dispose(); if (!(isDisposed())) { paintGC.drawImage(image, ps.left, ps.top); } image.dispose(); gc = paintGC; } } gc.dispose(); if (sysRgn != 0) org.eclipse.swt.widgets.OS.DeleteObject(sysRgn); } else { int hDC = org.eclipse.swt.widgets.OS.BeginPaint(handle, ps); if (((style) & (SWT.NO_BACKGROUND)) == 0) { org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); org.eclipse.swt.widgets.OS.SetRect(rect, ps.left, ps.top, ps.right, ps.bottom); drawBackground(hDC, rect); } org.eclipse.swt.widgets.OS.EndPaint(handle, ps); } if ((!(OS.IsWinCE)) && (!(isDisposed()))) { if (newBits != oldBits) { if (!(isDisposed())) { org.eclipse.swt.widgets.OS.SetWindowLong(handle, OS.GWL_STYLE, oldBits); } } } return LRESULT.ZERO; }
public void setText(java.lang.String string) { checkWidget(); if (string == null) error(SWT.ERROR_NULL_ARGUMENT); if (((style) & (SWT.SEPARATOR)) != 0) return; super.setText(string); if (org.eclipse.swt.internal.carbon.OS.HIVIEW) { char[] buffer = new char[text.length()]; text.getChars(0, buffer.length, buffer, 0); int length = fixMnemonic(buffer); int ptr = org.eclipse.swt.internal.carbon.OS.CFStringCreateWithCharacters(OS.kCFAllocatorDefault, buffer, length); if (ptr == 0) error(SWT.ERROR_CANNOT_SET_TEXT); org.eclipse.swt.internal.carbon.OS.SetControlData(labelHandle, 0, OS.kControlStaticTextCFStringTag, 4, new int[]{ ptr }); org.eclipse.swt.internal.carbon.OS.CFRelease(ptr); redrawWidget(labelHandle, false); parent.relayout(); } else { updateText(true); } }
public java.lang.String open() { int dialog; if (((style) & (SWT.OPEN)) != 0) { dialog = org.eclipse.swt.widgets.OS.gcnew_OpenFileDialog(); if (((style) & (SWT.MULTI)) != 0) org.eclipse.swt.widgets.OS.OpenFileDialog_Multiselect(dialog, true); } else { dialog = org.eclipse.swt.widgets.OS.gcnew_SaveFileDialog(); } int titlePtr = parent.createDotNetString(title, false); org.eclipse.swt.widgets.OS.FileDialog_Title(dialog, titlePtr); org.eclipse.swt.widgets.OS.GCHandle_Free(titlePtr); int fileNamePtr = parent.createDotNetString(fileName, false); org.eclipse.swt.widgets.OS.FileDialog_FileName(dialog, fileNamePtr); org.eclipse.swt.widgets.OS.GCHandle_Free(fileNamePtr); if (((filterExtensions) != null) && ((filterExtensions.length) > 0)) { java.lang.StringBuffer strFilter = new java.lang.StringBuffer(); for (int i = 0; i < (filterExtensions.length); i++) { if (i > 0) strFilter.append("|"); if (((filterNames) != null) && (i < (filterNames.length))) { strFilter.append(filterNames[i]); } else { strFilter.append(filterExtensions[i]); } strFilter.append("|"); strFilter.append(filterExtensions[i]); } int filterPtr = parent.createDotNetString(strFilter.toString(), false); org.eclipse.swt.widgets.OS.FileDialog_Filter(dialog, filterPtr); org.eclipse.swt.widgets.OS.GCHandle_Free(filterPtr); } int filterPathPtr = parent.createDotNetString(filterPath, false); org.eclipse.swt.widgets.OS.FileDialog_InitialDirectory(dialog, filterPathPtr); org.eclipse.swt.widgets.OS.GCHandle_Free(filterPathPtr); int parentHandle = (((parent.style) & (SWT.ON_TOP)) == 0) ? parent.shellHandle : 0; boolean success = org.eclipse.swt.widgets.OS.CommonDialog_ShowDialog(dialog, parentHandle); java.lang.String fullPath = null; if (success) { int strings = org.eclipse.swt.widgets.OS.FileDialog_FileNames(dialog); int length = org.eclipse.swt.widgets.OS.ICollection_Count(strings); fileNames = new java.lang.String[length]; for (int i = 0; i < length; i++) { int str = org.eclipse.swt.widgets.OS.IList_default(strings, i); int fileInfo = org.eclipse.swt.widgets.OS.gcnew_FileInfo(str); int name = org.eclipse.swt.widgets.OS.FileInfo_Name(fileInfo); fileNames[i] = org.eclipse.swt.widgets.Widget.createJavaString(name); if (i == 0) { int dir = org.eclipse.swt.widgets.OS.FileInfo_DirectoryName(fileInfo); filterPath = org.eclipse.swt.widgets.Widget.createJavaString(dir); org.eclipse.swt.widgets.OS.GCHandle_Free(dir); } org.eclipse.swt.widgets.OS.GCHandle_Free(name); org.eclipse.swt.widgets.OS.GCHandle_Free(fileInfo); org.eclipse.swt.widgets.OS.GCHandle_Free(str); } org.eclipse.swt.widgets.OS.GCHandle_Free(strings); fullPath = ((filterPath) + "\\") + (fileNames[0]); } else { fileNames = new java.lang.String[0]; } org.eclipse.swt.widgets.OS.GCHandle_Free(dialog); return fullPath; }
void _setImage(org.eclipse.swt.widgets.Image image) { if ((image2) != null) image2.dispose(); image2 = null; if ((hCopiedBitmap) != 0) org.eclipse.swt.widgets.OS.DeleteObject(hCopiedBitmap); hCopiedBitmap = 0; boolean hasAlpha = false; int hImage = 0; int imageBits = 0; int fImageType = 0; if (image != null) { switch (image.type) { case SWT.BITMAP : { org.eclipse.swt.widgets.ImageData data = image.getImageData(); if ((OS.COMCTL32_MAJOR) < 6) { org.eclipse.swt.widgets.Rectangle rect = image.getBounds(); switch (data.getTransparencyType()) { case SWT.TRANSPARENCY_PIXEL : if (((rect.width) <= (org.eclipse.swt.widgets.Label.ICON_WIDTH)) && ((rect.height) <= (org.eclipse.swt.widgets.Label.ICON_HEIGHT))) { image2 = new org.eclipse.swt.widgets.Image(display, data, data.getTransparencyMask()); hImage = image2.handle; imageBits = OS.SS_ICON; fImageType = OS.IMAGE_ICON; break; } case SWT.TRANSPARENCY_ALPHA : image2 = new org.eclipse.swt.widgets.Image(display, rect.width, rect.height); org.eclipse.swt.widgets.GC gc = new org.eclipse.swt.widgets.GC(image2); gc.setBackground(getBackground()); gc.fillRectangle(rect); gc.drawImage(image, 0, 0); gc.dispose(); hImage = image2.handle; imageBits = OS.SS_BITMAP; fImageType = OS.IMAGE_BITMAP; break; case SWT.TRANSPARENCY_NONE : hImage = image.handle; imageBits = OS.SS_BITMAP; fImageType = OS.IMAGE_BITMAP; break; } } else { if ((((data.alpha) != (-1)) || ((data.alphaData) != null)) || ((data.transparentPixel) != (-1))) { hasAlpha = true; hImage = org.eclipse.swt.widgets.Display.create32bitDIB(image.handle, data.alpha, data.alphaData, data.transparentPixel); } else { hImage = image.handle; if (((data.depth) <= 8) && ((display.getDepth()) > 8)) { image2 = new org.eclipse.swt.widgets.Image(display, data.width, data.height); org.eclipse.swt.widgets.GC gc = new org.eclipse.swt.widgets.GC(image2); gc.drawImage(image, 0, 0); gc.dispose(); hImage = image2.handle; } } imageBits = OS.SS_BITMAP; fImageType = OS.IMAGE_BITMAP; } break; } case SWT.ICON : { hImage = image.handle; imageBits = OS.SS_ICON; fImageType = OS.IMAGE_ICON; break; } } } org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); org.eclipse.swt.widgets.OS.GetWindowRect(handle, rect); int newBits = org.eclipse.swt.widgets.OS.GetWindowLong(handle, OS.GWL_STYLE); int oldBits = newBits; newBits &= ~((OS.SS_BITMAP) | (OS.SS_ICON)); newBits |= (imageBits | (OS.SS_REALSIZEIMAGE)) | (OS.SS_CENTERIMAGE); if (newBits != oldBits) { org.eclipse.swt.widgets.OS.SetWindowLong(handle, OS.GWL_STYLE, newBits); } org.eclipse.swt.widgets.OS.SendMessage(handle, OS.STM_SETIMAGE, fImageType, hImage); if (hasAlpha && (hImage != 0)) { org.eclipse.swt.widgets.OS.DeleteObject(hImage); hCopiedBitmap = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.STM_GETIMAGE, OS.IMAGE_BITMAP, 0); } int flags = (((OS.SWP_NOZORDER) | (OS.SWP_DRAWFRAME)) | (OS.SWP_NOACTIVATE)) | (OS.SWP_NOMOVE); SetWindowPos(handle, 0, 0, 0, ((rect.right) - (rect.left)), ((rect.bottom) - (rect.top)), flags); org.eclipse.swt.widgets.OS.InvalidateRect(handle, null, true); }
void onKeyDown(org.eclipse.swt.custom.Event e) { org.eclipse.swt.custom.TableTreeItem[] selection = getSelection(); if ((selection.length) == 0) return; org.eclipse.swt.custom.TableTreeItem item = selection[0]; int type = 0; if (((e.keyCode) == (SWT.ARROW_RIGHT)) || ((e.keyCode) == (SWT.ARROW_LEFT))) { int trailKey = (((getStyle()) & (SWT.MIRRORED)) != 0) ? SWT.ARROW_LEFT : SWT.ARROW_RIGHT; if ((e.keyCode) == trailKey) { if ((item.getItemCount()) == 0) return; if (item.getExpanded()) { org.eclipse.swt.custom.TableTreeItem newSelection = item.getItems()[0]; table.setSelection(new org.eclipse.swt.custom.TableItem[]{ newSelection.tableItem }); showItem(newSelection); type = SWT.Selection; } else { item.setExpanded(true); type = SWT.Expand; } } else { if (item.getExpanded()) { item.setExpanded(false); type = SWT.Collapse; } else { org.eclipse.swt.custom.TableTreeItem parent = item.getParentItem(); if (parent != null) { int index = parent.indexOf(item); if (index != 0) return; table.setSelection(new org.eclipse.swt.custom.TableItem[]{ parent.tableItem }); type = SWT.Selection; } } } } if ((e.character) == '*') { item.expandAll(true); } if ((e.character) == '-') { if (item.getExpanded()) { item.setExpanded(false); type = SWT.Collapse; } } if ((e.character) == '+') { if (((item.getItemCount()) > 0) && (!(item.getExpanded()))) { item.setExpanded(true); type = SWT.Expand; } } if (type == 0) return; org.eclipse.swt.custom.Event event = new org.eclipse.swt.custom.Event(); event.item = item; notifyListeners(type, event); }
public LineStyleEvent(org.eclipse.swt.custom.StyledTextEvent e) { super(e); styles = e.styles; ranges = e.ranges; lineOffset = e.detail; lineText = e.text; alignment = e.alignment; justify = e.justify; indent = e.indent; bullet = e.bullet; bulletIndex = e.bulletIndex; }
int ShowUI(int dwID, int pActiveObject, int pCommandTarget, int pFrame, int pDoc) { return COM.E_NOTIMPL; }
public void setMenu(org.eclipse.swt.widgets.Menu menu) { checkWidget(); if (menu != null) { if (menu.isDisposed()) org.eclipse.swt.widgets.SWT.error(SWT.ERROR_INVALID_ARGUMENT); if (((menu.style) & (SWT.POP_UP)) == 0) { error(SWT.ERROR_MENU_NOT_POP_UP); } if ((menu.parent) != (menuShell())) { error(SWT.ERROR_INVALID_PARENT); } } this.menu = menu; org.eclipse.swt.widgets.NSMenu nsMenu = (menu != null) ? menu.nsMenu : null; ((org.eclipse.swt.widgets.NSView) (view)).setMenu(nsMenu); }
public org.eclipse.swt.widgets.Point computeSize(int wHint, int hHint, boolean changed) { checkWidget(); int border = getBorderWidth(); int width = border * 2; int height = border * 2; if (((((style) & (SWT.ARROW)) != 0) && (wHint == (SWT.DEFAULT))) && (hHint == (SWT.DEFAULT))) { org.eclipse.swt.widgets.Display display = getDisplay(); width += display.scrolledMarginX; height += display.scrolledMarginY; return new org.eclipse.swt.widgets.Point(width, height); } org.eclipse.swt.widgets.XtWidgetGeometry result = new org.eclipse.swt.widgets.XtWidgetGeometry(); result.request_mode = (OS.CWWidth) | (OS.CWHeight); int[] argList2 = new int[]{ OS.XmNrecomputeSize, 1 }; org.eclipse.swt.widgets.OS.XtSetValues(handle, argList2, ((argList2.length) / 2)); org.eclipse.swt.widgets.OS.XtQueryGeometry(handle, null, result); int[] argList3 = new int[]{ OS.XmNrecomputeSize, 0 }; org.eclipse.swt.widgets.OS.XtSetValues(handle, argList3, ((argList3.length) / 2)); width += result.width; height += result.height; int[] argList = new int[]{ OS.XmNlabelType, 0 }; org.eclipse.swt.widgets.OS.XtGetValues(handle, argList, ((argList.length) / 2)); if ((argList[1]) == (OS.XmSTRING)) { int[] argList1 = new int[]{ OS.XmNlabelString, 0 }; org.eclipse.swt.widgets.OS.XtGetValues(handle, argList1, ((argList1.length) / 2)); int xmString = argList1[1]; if (org.eclipse.swt.widgets.OS.XmStringEmpty(xmString)) height += getFontHeight(); if (xmString != 0) org.eclipse.swt.widgets.OS.XmStringFree(xmString); } if ((wHint != (SWT.DEFAULT)) || (hHint != (SWT.DEFAULT))) { int[] argList4 = new int[]{ OS.XmNmarginLeft, 0, OS.XmNmarginRight, 0, OS.XmNmarginTop, 0, OS.XmNmarginBottom, 0 }; org.eclipse.swt.widgets.OS.XtGetValues(handle, argList4, ((argList4.length) / 2)); if (wHint != (SWT.DEFAULT)) width = ((wHint + (argList4[1])) + (argList4[3])) + (border * 2); if (hHint != (SWT.DEFAULT)) height = ((hHint + (argList4[5])) + (argList4[7])) + (border * 2); } return new org.eclipse.swt.widgets.Point(width, height); }
public void setText(java.lang.String string) { checkWidget(); if (string == null) error(SWT.ERROR_NULL_ARGUMENT); if (((style) & (org.eclipse.swt.SWT.ARROW)) != 0) return; text = string; char[] buffer = new char[text.length()]; text.getChars(0, buffer.length, buffer, 0); int length = fixMnemonic(buffer); int ptr = org.eclipse.swt.internal.carbon.OS.CFStringCreateWithCharacters(OS.kCFAllocatorDefault, buffer, length); if (ptr == 0) error(SWT.ERROR_CANNOT_SET_TEXT); org.eclipse.swt.internal.carbon.OS.SetControlTitleWithCFString(handle, ptr); org.eclipse.swt.internal.carbon.OS.CFRelease(ptr); }
int GetVisibility(int aVisibility) { boolean visible = (browser.isVisible()) && (!(browser.getShell().getMinimized())); org.eclipse.swt.browser.XPCOM.memmove(aVisibility, new int[]{ visible ? 1 : 0 }, 4); return XPCOM.NS_OK; }
void setBackgroundImage(org.eclipse.swt.widgets.NSImage image) { if (((style) & (SWT.SINGLE)) != 0) { org.eclipse.swt.widgets.NSTextField widget = ((org.eclipse.swt.widgets.NSTextField) (view)); widget.setDrawsBackground(((backgroundImage) != null)); org.eclipse.swt.widgets.NSColor nsColor = org.eclipse.swt.widgets.NSColor.colorWithPatternImage(image); widget.setBackgroundColor(nsColor); } else { scrollView.setDrawsBackground(((backgroundImage) != null)); ((org.eclipse.swt.widgets.NSTextView) (view)).setDrawsBackground(((backgroundImage) != null)); } }
int dragEnd(int widget, int context, int data) { org.eclipse.swt.dnd.OS.gdk_pointer_ungrab(OS.GDK_CURRENT_TIME); org.eclipse.swt.dnd.OS.gdk_keyboard_ungrab(OS.GDK_CURRENT_TIME); int op = DND.DROP_NONE; if (context != 0) { org.eclipse.swt.dnd.GdkDragContext gdkDragContext = new org.eclipse.swt.dnd.GdkDragContext(); org.eclipse.swt.dnd.OS.memmove(gdkDragContext, context, GdkDragContext.sizeof); if ((gdkDragContext.dest_window) != 0) { op = osOpToOp(gdkDragContext.action); if (movePerformed) op = DND.DROP_MOVE; } } org.eclipse.swt.dnd.DNDEvent event = new org.eclipse.swt.dnd.DNDEvent(); event.widget = this; event.doit = op != 0; event.detail = op; try { notifyListeners(DND.DragEnd, event); } catch (java.lang.Throwable e) { return 0; } movePerformed = false; return 1; }
public void setIncrement(int value) { checkWidget(); if (value < 1) return; int hHeap = org.eclipse.swt.widgets.OS.GetProcessHeap(); int count = ((int) (org.eclipse.swt.widgets.OS.SendMessage(hwndUpDown, OS.UDM_GETACCEL, 0, ((org.eclipse.swt.widgets.UDACCEL) (null))))); int udaccels = org.eclipse.swt.widgets.OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, ((UDACCEL.sizeof) * count)); org.eclipse.swt.widgets.OS.SendMessage(hwndUpDown, OS.UDM_GETACCEL, count, udaccels); int first = -1; org.eclipse.swt.widgets.UDACCEL udaccel = new org.eclipse.swt.widgets.UDACCEL(); for (int i = 0; i < count; i++) { int offset = udaccels + (i * (UDACCEL.sizeof)); org.eclipse.swt.widgets.OS.MoveMemory(udaccel, offset, UDACCEL.sizeof); if (first == (-1)) first = udaccel.nInc; udaccel.nInc = ((udaccel.nInc) / first) * value; org.eclipse.swt.widgets.OS.MoveMemory(offset, udaccel, UDACCEL.sizeof); } org.eclipse.swt.widgets.OS.SendMessage(hwndUpDown, OS.UDM_SETACCEL, count, udaccels); org.eclipse.swt.widgets.OS.HeapFree(hHeap, 0, udaccels); }
int gtk_motion_notify_event(int widget, int eventPtr) { int result = super.gtk_motion_notify_event(widget, eventPtr); int[] state = new int[1]; org.eclipse.swt.widgets.OS.gdk_event_get_state(eventPtr, state); if ((!(dragging)) || (((state[0]) & (OS.GDK_BUTTON1_MASK)) == 0)) return 0; int x = org.eclipse.swt.widgets.OS.GTK_WIDGET_X(handle); int y = org.eclipse.swt.widgets.OS.GTK_WIDGET_Y(handle); int width = org.eclipse.swt.widgets.OS.GTK_WIDGET_WIDTH(handle); int height = org.eclipse.swt.widgets.OS.GTK_WIDGET_HEIGHT(handle); int border = 0; int parentBorder = 0; int parentWidth = org.eclipse.swt.widgets.OS.GTK_WIDGET_WIDTH(parent.handle); int parentHeight = org.eclipse.swt.widgets.OS.GTK_WIDGET_HEIGHT(parent.handle); double[] px = new double[1]; double[] py = new double[1]; org.eclipse.swt.widgets.OS.gdk_event_get_coords(eventPtr, px, py); int newX = lastX; int newY = lastY; if (((style) & (SWT.VERTICAL)) != 0) { newX = java.lang.Math.min(java.lang.Math.max(0, (((((int) (px[0])) + x) - (startX)) - parentBorder)), (parentWidth - width)); } else { newY = java.lang.Math.min(java.lang.Math.max(0, (((((int) (py[0])) + y) - (startY)) - parentBorder)), (parentHeight - height)); } if ((newX == (lastX)) && (newY == (lastY))) return 0; drawBand(lastX, lastY, width, height); org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); event.detail = SWT.DRAG; event.time = org.eclipse.swt.widgets.OS.gdk_event_get_time(eventPtr); event.x = newX; event.y = newY; event.width = width; event.height = height; sendEvent(SWT.Selection, event); if (isDisposed()) return 0; if (event.doit) { lastX = event.x; lastY = event.y; drawBand(lastX, lastY, width, height); } return result; }
void setZOrder(org.eclipse.swt.widgets.Control control, boolean above) { if ((window) == null) return; if (!(getVisible())) return; if (control == null) { if (above) { window.orderFront(null); } else { window.orderBack(null); } } else { org.eclipse.swt.widgets.NSWindow otherWindow = control.getShell().window; window.orderWindow((above ? OS.NSWindowAbove : OS.NSWindowBelow), otherWindow.windowNumber()); } }
void createWidget() { super.createWidget(); text = ""; org.eclipse.swt.widgets.NSDictionary dict = ((org.eclipse.swt.widgets.NSTextView) (view)).linkTextAttributes(); linkColor = new org.eclipse.swt.widgets.NSColor(dict.valueForKey(OS.NSForegroundColorAttributeName)); offsets = new org.eclipse.swt.widgets.Point[0]; ids = new java.lang.String[0]; mnemonics = new int[0]; focusIndex = -1; }
public org.eclipse.swt.widgets.Point computeSize(int wHint, int hHint, boolean changed) { checkWidget(); if (((style) & (SWT.ARROW)) != 0) { int[] outMetric = new int[1]; org.eclipse.swt.internal.carbon.OS.GetThemeMetric(OS.kThemeMetricDisclosureTriangleHeight, outMetric); int width = outMetric[0]; int height = outMetric[0]; if (wHint != (SWT.DEFAULT)) width = wHint; if (hHint != (SWT.DEFAULT)) height = hHint; return new org.eclipse.swt.widgets.Point(width, height); } int width = 0; int height = 0; if ((isImage) && ((image) != null)) { org.eclipse.swt.widgets.Rectangle bounds = image.getBounds(); width = bounds.width; height = bounds.height; } else { int[] ptr = new int[1]; org.eclipse.swt.internal.carbon.OS.CopyControlTitleAsCFString(handle, ptr); if ((ptr[0]) != 0) { org.eclipse.swt.internal.carbon.Point ioBounds = new org.eclipse.swt.internal.carbon.Point(); if ((font) == null) { org.eclipse.swt.internal.carbon.OS.GetThemeTextDimensions(ptr[0], ((short) (defaultThemeFont())), OS.kThemeStateActive, false, ioBounds, null); } else { int[] currentPort = new int[1]; org.eclipse.swt.internal.carbon.OS.GetPort(currentPort); org.eclipse.swt.internal.carbon.OS.SetPortWindowPort(org.eclipse.swt.internal.carbon.OS.GetControlOwner(handle)); org.eclipse.swt.internal.carbon.OS.TextFont(font.id); org.eclipse.swt.internal.carbon.OS.TextFace(font.style); org.eclipse.swt.internal.carbon.OS.TextSize(font.size); org.eclipse.swt.internal.carbon.OS.GetThemeTextDimensions(ptr[0], ((short) (OS.kThemeCurrentPortFont)), OS.kThemeStateActive, false, ioBounds, null); org.eclipse.swt.internal.carbon.OS.SetPort(currentPort[0]); } width = ioBounds.h; height = ioBounds.v; org.eclipse.swt.internal.carbon.OS.CFRelease(ptr[0]); } else { width = DEFAULT_WIDTH; height = DEFAULT_HEIGHT; } } if (((style) & ((SWT.CHECK) | (SWT.RADIO))) != 0) { int[] outMetric = new int[1]; int metric = (((style) & (SWT.CHECK)) != 0) ? org.eclipse.swt.internal.carbon.OS.kThemeMetricCheckBoxWidth : org.eclipse.swt.internal.carbon.OS.kThemeMetricRadioButtonWidth; org.eclipse.swt.internal.carbon.OS.GetThemeMetric(metric, outMetric); width += (outMetric[0]) + 3; height = java.lang.Math.max(outMetric[0], height); } else { if ((((style) & (SWT.FLAT)) != 0) || (((style) & (SWT.TOGGLE)) != 0)) { width += 10; height += 10; } else { width += 28; int[] outMetric = new int[1]; org.eclipse.swt.internal.carbon.OS.GetThemeMetric(OS.kThemeMetricPushButtonHeight, outMetric); height = java.lang.Math.max(height, outMetric[0]); } } org.eclipse.swt.internal.carbon.Rect inset = getInset(); width += (inset.left) + (inset.right); height += (inset.top) + (inset.bottom); width = java.lang.Math.max(20, width); int border = (((style) & (SWT.PUSH)) != 0) ? 2 : 0; if (wHint != (SWT.DEFAULT)) width = wHint + (border * 2); if (hHint != (SWT.DEFAULT)) height = hHint + (border * 2); return new org.eclipse.swt.widgets.Point(width, height); }
void setSelection(int start, int length, boolean sendEvent, boolean doBlock) { int end = start + length; if (start > end) { int temp = end; end = start; start = temp; } if (((((selection.x) != start) || ((selection.y) != end)) || ((length > 0) && ((selectionAnchor) != (selection.x)))) || ((length < 0) && ((selectionAnchor) != (selection.y)))) { if ((blockSelection) && doBlock) { if (length < 0) { setBlockSelectionOffset(end, start, sendEvent); } else { setBlockSelectionOffset(start, end, sendEvent); } } else { clearSelection(sendEvent); if (length < 0) { selectionAnchor = selection.y = end; selection.x = start; setCaretOffset(start, org.eclipse.swt.custom.StyledText.PREVIOUS_OFFSET_TRAILING); } else { selectionAnchor = selection.x = start; selection.y = end; setCaretOffset(end, org.eclipse.swt.custom.StyledText.PREVIOUS_OFFSET_TRAILING); } internalRedrawRange(selection.x, ((selection.y) - (selection.x))); sendAccessibleTextCaretMoved(); } } }
int windowProc(int hwnd, int msg, int wParam, int lParam) { if (((hwndHeader) != 0) && (hwnd == (hwndHeader))) { switch (msg) { case OS.WM_CAPTURECHANGED : if ((OS.COMCTL32_MAJOR) < 6) { if ((lParam != 0) && (lParam != (hwndHeader))) { org.eclipse.swt.widgets.OS.InvalidateRect(hwndHeader, null, true); } } break; case OS.WM_NOTIFY : { org.eclipse.swt.widgets.NMHDR hdr = new org.eclipse.swt.widgets.NMHDR(); org.eclipse.swt.widgets.OS.MoveMemory(hdr, lParam, NMHDR.sizeof); switch (hdr.code) { case OS.TTN_SHOW : case OS.TTN_POP : case OS.TTN_GETDISPINFOA : case OS.TTN_GETDISPINFOW : return org.eclipse.swt.widgets.OS.SendMessage(handle, msg, wParam, lParam); } } } return callWindowProc(hwnd, msg, wParam, lParam); } if (((hwndParent) != 0) && (hwnd == (hwndParent))) { switch (msg) { case OS.WM_MOVE : { sendEvent(SWT.Move); return 0; } case OS.WM_SIZE : { setScrollWidth(); if (ignoreResize) return 0; setResizeChildren(false); int code = callWindowProc(hwnd, OS.WM_SIZE, wParam, lParam); sendEvent(SWT.Resize); if (isDisposed()) return 0; if ((layout) != null) { markLayout(false, false); updateLayout(false, false); } setResizeChildren(true); return code; } case OS.WM_NCPAINT : { org.eclipse.swt.widgets.LRESULT result = wmNCPaint(hwnd, wParam, lParam); if (result != null) return result.value; break; } case OS.WM_PRINT : { org.eclipse.swt.widgets.LRESULT result = wmPrint(hwnd, wParam, lParam); if (result != null) return result.value; break; } case OS.WM_COMMAND : case OS.WM_NOTIFY : case OS.WM_SYSCOLORCHANGE : { return org.eclipse.swt.widgets.OS.SendMessage(handle, msg, wParam, lParam); } case OS.WM_HSCROLL : { if (((horizontalBar) != null) && ((lParam == 0) || (lParam == (hwndParent)))) { wmScroll(horizontalBar, true, hwndParent, OS.WM_HSCROLL, wParam, lParam); } setScrollWidth(); break; } case OS.WM_VSCROLL : { org.eclipse.swt.widgets.SCROLLINFO info = new org.eclipse.swt.widgets.SCROLLINFO(); info.cbSize = SCROLLINFO.sizeof; info.fMask = OS.SIF_ALL; org.eclipse.swt.widgets.OS.GetScrollInfo(hwndParent, OS.SB_VERT, info); if ((!(OS.IsWinCE)) && ((OS.WIN32_VERSION) >= (org.eclipse.swt.widgets.OS.VERSION(6, 0)))) { if ((wParam & 65535) == (OS.SB_THUMBTRACK)) { info.nPos = info.nTrackPos; } } org.eclipse.swt.widgets.OS.SetScrollInfo(handle, OS.SB_VERT, info, true); int code = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.WM_VSCROLL, wParam, lParam); org.eclipse.swt.widgets.OS.GetScrollInfo(handle, OS.SB_VERT, info); org.eclipse.swt.widgets.OS.SetScrollInfo(hwndParent, OS.SB_VERT, info, true); return code; } } return callWindowProc(hwnd, msg, wParam, lParam); } return super.windowProc(hwnd, msg, wParam, lParam); }
int TranslateAccelerator(int lpMsg, int pguidCmdGroup, int nCmdID) { org.eclipse.swt.browser.Menu menubar = getShell().getMenuBar(); if (((menubar != null) && (!(menubar.isDisposed()))) && (menubar.isEnabled())) { org.eclipse.swt.browser.Shell shell = menubar.getShell(); int hwnd = shell.handle; int hAccel = org.eclipse.swt.browser.OS.SendMessage(hwnd, ((OS.WM_APP) + 1), 0, 0); if (hAccel != 0) { org.eclipse.swt.browser.MSG msg = new org.eclipse.swt.browser.MSG(); org.eclipse.swt.browser.OS.MoveMemory(msg, lpMsg, MSG.sizeof); if ((org.eclipse.swt.browser.OS.TranslateAccelerator(hwnd, hAccel, msg)) != 0) return COM.S_OK; } } int result = COM.S_FALSE; org.eclipse.swt.browser.MSG msg = new org.eclipse.swt.browser.MSG(); org.eclipse.swt.browser.OS.MoveMemory(msg, lpMsg, MSG.sizeof); if ((((msg.message) == (OS.WM_KEYDOWN)) && ((msg.wParam) == (OS.VK_N))) && ((org.eclipse.swt.browser.OS.GetKeyState(OS.VK_CONTROL)) < 0)) { result = COM.S_OK; } else { if (((msg.message) == (OS.WM_KEYDOWN)) && ((msg.wParam) == (OS.VK_F5))) { org.eclipse.swt.browser.OleAutomation auto = new org.eclipse.swt.browser.OleAutomation(this); int[] rgdispid = auto.getIDsOfNames(new java.lang.String[]{ "LocationURL" }); org.eclipse.swt.browser.Variant pVarResult = auto.getProperty(rgdispid[0]); auto.dispose(); if (pVarResult != null) { if ((pVarResult.getType()) == (OLE.VT_BSTR)) { java.lang.String url = pVarResult.getString(); if (url.equals(IE.ABOUT_BLANK)) result = COM.S_OK; } pVarResult.dispose(); } } } return result; }
int kEventRawKeyDown(int nextHandler, int theEvent, int userData) { int[] keyCode = new int[1]; org.eclipse.swt.internal.carbon.OS.GetEventParameter(theEvent, OS.kEventParamKeyCode, OS.typeUInt32, null, ((keyCode.length) * 4), null, keyCode); if ((keyCode[0]) == 114) { org.eclipse.swt.widgets.Control control = this; while (control != null) { if (control.hooks(SWT.Help)) { control.postEvent(SWT.Help); break; } control = control.parent; } } if (!(sendKeyEvent(SWT.KeyDown, theEvent))) return org.eclipse.swt.internal.carbon.OS.noErr; return org.eclipse.swt.internal.carbon.OS.eventNotHandledErr; }
protected void asyncExec(java.lang.Runnable runnable) { if (runnable == null) { if (!((org.eclipse.swt.widgets.Synchronizer.IS_CARBON) || (org.eclipse.swt.widgets.Synchronizer.IS_GTK))) { display.wake(); return; } } addLast(new org.eclipse.swt.widgets.RunnableLock(runnable)); }
org.eclipse.swt.widgets.Point computeSize() { checkWidget(); int width = 0; int height = 0; if (((style) & (SWT.SEPARATOR)) != 0) { if (((parent.style) & (SWT.HORIZONTAL)) != 0) { width = getWidth(); height = org.eclipse.swt.widgets.ToolItem.DEFAULT_HEIGHT; } else { width = org.eclipse.swt.widgets.ToolItem.DEFAULT_WIDTH; height = getWidth(); } if ((control) != null) { height = java.lang.Math.max(height, control.getMininumHeight()); } } else { ((org.eclipse.swt.widgets.NSButton) (view)).sizeToFit(); org.eclipse.swt.widgets.NSRect rect = view.frame(); width = ((int) (rect.width)) + (org.eclipse.swt.widgets.ToolItem.INSET); height = ((int) (rect.height)) + (org.eclipse.swt.widgets.ToolItem.INSET); view.setNeedsDisplay(true); } return new org.eclipse.swt.widgets.Point(width, height); }
void setScrollbar() { if ((itemCount) == 0) return; if (((style) & (SWT.V_SCROLL)) == 0) return; int height = getClientArea().height; org.eclipse.swt.widgets.ExpandItem item = items[((itemCount) - 1)]; int maxHeight = ((item.y) + (getBandHeight())) + (spacing); if (item.expanded) maxHeight += item.height; long adjustmentHandle = org.eclipse.swt.widgets.OS.gtk_scrolled_window_get_vadjustment(scrolledHandle); org.eclipse.swt.widgets.GtkAdjustment adjustment = new org.eclipse.swt.widgets.GtkAdjustment(); gtk_adjustment_get(adjustmentHandle, adjustment); yCurrentScroll = ((int) (adjustment.value)); if (((yCurrentScroll) > 0) && (height > maxHeight)) { yCurrentScroll = java.lang.Math.max(0, (((yCurrentScroll) + maxHeight) - height)); layoutItems(0, false); } maxHeight += yCurrentScroll; adjustment.value = java.lang.Math.min(yCurrentScroll, maxHeight); adjustment.upper = maxHeight; adjustment.page_size = height; gtk_adjustment_configure(adjustmentHandle, adjustment); int policy = (maxHeight > height) ? OS.GTK_POLICY_ALWAYS : OS.GTK_POLICY_NEVER; org.eclipse.swt.widgets.OS.gtk_scrolled_window_set_policy(scrolledHandle, OS.GTK_POLICY_NEVER, policy); org.eclipse.swt.widgets.GtkAllocation allocation = new org.eclipse.swt.widgets.GtkAllocation(); gtk_widget_get_allocation(fixedHandle, allocation); int width = (allocation.width) - ((spacing) * 2); if (policy == (OS.GTK_POLICY_ALWAYS)) { long vHandle = 0; if ((OS.GTK_VERSION) < (org.eclipse.swt.widgets.OS.VERSION(2, 8, 0))) { vHandle = org.eclipse.swt.widgets.OS.GTK_SCROLLED_WINDOW_VSCROLLBAR(scrolledHandle); } else { vHandle = org.eclipse.swt.widgets.OS.gtk_scrolled_window_get_vscrollbar(scrolledHandle); } org.eclipse.swt.widgets.GtkRequisition requisition = new org.eclipse.swt.widgets.GtkRequisition(); gtk_widget_get_preferred_size(vHandle, requisition); width -= requisition.width; } width = java.lang.Math.max(0, width); for (int i = 0; i < (itemCount); i++) { org.eclipse.swt.widgets.ExpandItem item2 = items[i]; item2.setBounds(0, 0, width, item2.height, false, true); } }
static org.eclipse.swt.program.Program getProgram(java.lang.String key) { java.lang.String name = org.eclipse.swt.program.Program.getKeyValue(key, false); if ((name == null) || ((name.length()) == 0)) { name = key; } java.lang.String DEFAULT_COMMAND = "\\shell"; java.lang.String defaultCommand = org.eclipse.swt.program.Program.getKeyValue((key + DEFAULT_COMMAND), true); if ((defaultCommand == null) || ((defaultCommand.length()) == 0)) defaultCommand = "open"; java.lang.String COMMAND = ("\\shell\\" + defaultCommand) + "\\command"; java.lang.String command = org.eclipse.swt.program.Program.getKeyValue((key + COMMAND), true); if ((command == null) || ((command.length()) == 0)) return null; java.lang.String DEFAULT_ICON = "\\DefaultIcon"; java.lang.String iconName = org.eclipse.swt.program.Program.getKeyValue((key + DEFAULT_ICON), true); if ((iconName == null) || ((iconName.length()) == 0)) return null; org.eclipse.swt.program.Program program = new org.eclipse.swt.program.Program(); program.name = name; program.command = command; program.iconName = iconName; return program; }
void paint(org.eclipse.swt.custom.Event event) { if ((row) == null) return; int columnIndex = ((column) == null) ? 0 : table.indexOf(column); org.eclipse.swt.custom.GC gc = event.gc; org.eclipse.swt.custom.Display display = getDisplay(); gc.setBackground(getBackground()); gc.setForeground(getForeground()); gc.fillRectangle(event.x, event.y, event.width, event.height); int x = 0; org.eclipse.swt.custom.Point size = getSize(); org.eclipse.swt.custom.Image image = row.getImage(columnIndex); if (image != null) { org.eclipse.swt.custom.Rectangle imageSize = image.getBounds(); int imageY = ((size.y) - (imageSize.height)) / 2; gc.drawImage(image, x, imageY); x += imageSize.width; } java.lang.String text = row.getText(columnIndex); if ((text.length()) > 0) { org.eclipse.swt.custom.Rectangle bounds = row.getBounds(columnIndex); org.eclipse.swt.custom.Point extent = gc.stringExtent(text); java.lang.String platform = org.eclipse.swt.custom.SWT.getPlatform(); if ("win32".equals(platform)) { if (((table.getColumnCount()) == 0) || (columnIndex == 0)) { x += 2; } else { int alignmnent = column.getAlignment(); switch (alignmnent) { case SWT.LEFT : x += 6; break; case SWT.RIGHT : x = ((bounds.width) - (extent.x)) - 6; break; case SWT.CENTER : x += (((bounds.width) - x) - (extent.x)) / 2; break; } } } else { if ((table.getColumnCount()) == 0) { x += 5; } else { int alignmnent = column.getAlignment(); switch (alignmnent) { case SWT.LEFT : x += 5; break; case SWT.RIGHT : x = ((bounds.width) - (extent.x)) - 2; break; case SWT.CENTER : x += ((((bounds.width) - x) - (extent.x)) / 2) + 2; break; } } } int textY = ((size.y) - (extent.y)) / 2; gc.drawString(text, x, textY); } if (isFocusControl()) { gc.setBackground(display.getSystemColor(SWT.COLOR_BLACK)); gc.setForeground(display.getSystemColor(SWT.COLOR_WHITE)); gc.drawFocus(0, 0, size.x, size.y); } }
public void drawLine(int x1, int y1, int x2, int y2) { if ((handle) == 0) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_GRAPHIC_DISPOSED); if (data.updateClip) setCGClipping(); if (((x1 == x2) && (y1 == y2)) && ((data.lineWidth) <= 1)) { drawPoint(x1, y1); return; } org.eclipse.swt.graphics.OS.CGContextBeginPath(handle); float offset = (((data.lineWidth) % 2) == 1) ? 0.5F : 0.0F; org.eclipse.swt.graphics.OS.CGContextMoveToPoint(handle, (x1 + offset), (y1 + offset)); org.eclipse.swt.graphics.OS.CGContextAddLineToPoint(handle, (x2 + offset), (y2 + offset)); org.eclipse.swt.graphics.OS.CGContextStrokePath(handle); flush(); }
public XPCOMObject(int[] argCounts) { int[] callbackAddresses = new int[argCounts.length]; synchronized(org.eclipse.swt.internal.mozilla.XPCOMObject.Callbacks) { for (int i = 0, length = argCounts.length; i < length; i++) { if ((org.eclipse.swt.internal.mozilla.XPCOMObject.Callbacks[i][argCounts[i]]) == null) { org.eclipse.swt.internal.mozilla.XPCOMObject.Callbacks[i][argCounts[i]] = new org.eclipse.swt.internal.mozilla.Callback(getClass(), ("callback" + i), ((argCounts[i]) + 1), true, XPCOM.NS_ERROR_FAILURE); } callbackAddresses[i] = org.eclipse.swt.internal.mozilla.XPCOMObject.Callbacks[i][argCounts[i]].getAddress(); if ((callbackAddresses[i]) == 0) org.eclipse.swt.internal.mozilla.SWT.error(SWT.ERROR_NO_MORE_CALLBACKS); } } int pVtable = org.eclipse.swt.internal.mozilla.C.malloc(((C.PTR_SIZEOF) * (argCounts.length))); org.eclipse.swt.internal.mozilla.XPCOM.memmove(pVtable, callbackAddresses, ((C.PTR_SIZEOF) * (argCounts.length))); ppVtable = org.eclipse.swt.internal.mozilla.C.malloc(C.PTR_SIZEOF); org.eclipse.swt.internal.mozilla.XPCOM.memmove(ppVtable, new int[]{ pVtable }, C.PTR_SIZEOF); org.eclipse.swt.internal.mozilla.XPCOMObject.ObjectMap.put(new org.eclipse.swt.internal.mozilla.LONG(ppVtable), this); }
private void showToolTip(int x, int y) { org.eclipse.swt.custom.CTabItem item = getItem(new org.eclipse.swt.custom.Point(x, y)); if (item != null) { if (item == (toolTipItem)) return; toolTipItem = item; java.lang.String tooltip = item.getToolTipText(); if (tooltip != null) { org.eclipse.swt.custom.Label label = ((org.eclipse.swt.custom.Label) (tip.getChildren()[0])); label.setText(tooltip); tip.pack(); org.eclipse.swt.custom.Point pt = new org.eclipse.swt.custom.Point(((item.x) + ((item.width) / 4)), (((item.y) + (item.height)) + 2)); pt = toDisplay(pt); org.eclipse.swt.custom.Display display = tip.getDisplay(); org.eclipse.swt.custom.Rectangle rect = display.getBounds(); org.eclipse.swt.custom.Point size = tip.getSize(); pt.x = java.lang.Math.max(0, java.lang.Math.min(pt.x, ((rect.width) - (size.x)))); pt.y = java.lang.Math.max(0, java.lang.Math.min(pt.y, ((rect.height) - (size.y)))); tip.setLocation(pt); tip.setVisible(true); return; } } toolTipItem = null; tip.setVisible(false); }
public void addArc(float x, float y, float width, float height, float startAngle, float arcAngle) { if (isDisposed()) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_GRAPHIC_DISPOSED); float[] cmt = new float[6]; org.eclipse.swt.graphics.OS.CGAffineTransformMake((width / 2.0F), 0, 0, (height / 2.0F), (x + (width / 2.0F)), (y + (height / 2.0F)), cmt); if (arcAngle < 0) { float angle = ((-(startAngle + arcAngle)) * ((float) (Compatibility.PI))) / 180; if (closed) org.eclipse.swt.graphics.OS.CGPathMoveToPoint(handle, cmt, ((float) (java.lang.Math.cos(angle))), ((float) (java.lang.Math.sin(angle)))); org.eclipse.swt.graphics.OS.CGPathAddArc(handle, cmt, 0, 0, 1, angle, (((-startAngle) * ((float) (Compatibility.PI))) / 180), true); } else { float angle = ((-startAngle) * ((float) (Compatibility.PI))) / 180; if (closed) org.eclipse.swt.graphics.OS.CGPathMoveToPoint(handle, cmt, ((float) (java.lang.Math.cos(angle))), ((float) (java.lang.Math.sin(angle)))); org.eclipse.swt.graphics.OS.CGPathAddArc(handle, cmt, 0, 0, 1, angle, (((-(startAngle + arcAngle)) * ((float) (Compatibility.PI))) / 180), true); } moved = true; closed = false; if ((java.lang.Math.abs(arcAngle)) >= 360) close(); }
public org.eclipse.swt.widgets.Rectangle computeTrim(int x, int y, int width, int height) { checkWidget(); org.eclipse.swt.widgets.Rectangle trim = super.computeTrim(x, y, width, height); int xborder = 0; int yborder = 0; if (((style) & (SWT.SINGLE)) != 0) { if (((style) & (SWT.BORDER)) != 0) { int style = org.eclipse.swt.widgets.OS.gtk_widget_get_style(handle); xborder += org.eclipse.swt.widgets.OS.gtk_style_get_xthickness(style); yborder += org.eclipse.swt.widgets.OS.gtk_style_get_ythickness(style); } xborder += org.eclipse.swt.widgets.Text.INNER_BORDER; yborder += org.eclipse.swt.widgets.Text.INNER_BORDER; } else { int borderWidth = org.eclipse.swt.widgets.OS.gtk_container_get_border_width(handle); xborder += borderWidth; yborder += borderWidth; } int[] property = new int[1]; org.eclipse.swt.widgets.OS.gtk_widget_style_get(handle, OS.interior_focus, property, 0); if ((property[0]) == 0) { org.eclipse.swt.widgets.OS.gtk_widget_style_get(handle, OS.focus_line_width, property, 0); xborder += property[0]; yborder += property[0]; } trim.x -= xborder; trim.y -= yborder; trim.width += 2 * xborder; trim.height += 2 * yborder; trim.width += org.eclipse.swt.widgets.Text.SPACE_FOR_CURSOR; return new org.eclipse.swt.widgets.Rectangle(trim.x, trim.y, trim.width, trim.height); }
public void setControl(org.eclipse.swt.widgets.Control control) { checkWidget(); if (control != null) { if (control.isDisposed()) error(SWT.ERROR_INVALID_ARGUMENT); if ((control.parent) != (parent)) error(SWT.ERROR_INVALID_PARENT); } int index = parent.indexOf(this); if (index == (-1)) return; if (((this.control) != null) && (this.control.isDisposed())) { this.control = null; } org.eclipse.swt.widgets.Control oldControl = this.control; org.eclipse.swt.widgets.Control newControl = control; int hwnd = parent.handle; int hwndChild = 0; if (newControl != null) hwndChild = control.handle; org.eclipse.swt.widgets.REBARBANDINFO rbBand = new org.eclipse.swt.widgets.REBARBANDINFO(); rbBand.cbSize = REBARBANDINFO.sizeof; rbBand.fMask = OS.RBBIM_CHILD; rbBand.hwndChild = hwndChild; this.control = newControl; int hwndAbove = 0; if (newControl != null) { hwndAbove = org.eclipse.swt.widgets.OS.GetWindow(hwndChild, OS.GW_HWNDPREV); } boolean hideNew = (newControl != null) && (!(newControl.getVisible())); boolean showOld = (oldControl != null) && (oldControl.getVisible()); org.eclipse.swt.widgets.OS.SendMessage(hwnd, OS.RB_SETBANDINFO, index, rbBand); if (hideNew) newControl.setVisible(false); if (showOld) oldControl.setVisible(true); if ((hwndAbove != 0) && (hwndAbove != hwndChild)) { int flags = ((OS.SWP_NOSIZE) | (OS.SWP_NOMOVE)) | (OS.SWP_NOACTIVATE); org.eclipse.swt.widgets.OS.SetWindowPos(hwndChild, hwndAbove, 0, 0, 0, 0, flags); } }
org.eclipse.swt.widgets.LRESULT WM_SYSCHAR(int wParam, int lParam) { org.eclipse.swt.widgets.Display display = this.display; display.lastAscii = wParam; display.lastNull = wParam == 0; if ((!(hooks(SWT.KeyDown))) && (!(display.filters(SWT.KeyDown)))) { return null; } boolean oldKeyHit = display.mnemonicKeyHit; display.mnemonicKeyHit = true; int result = callWindowProc(OS.WM_SYSCHAR, wParam, lParam); boolean consumed = false; if (!(display.mnemonicKeyHit)) { consumed = !(sendKeyEvent(SWT.KeyDown, OS.WM_SYSCHAR, wParam, lParam)); } consumed |= display.mnemonicKeyHit; display.mnemonicKeyHit = oldKeyHit; return consumed ? LRESULT.ONE : new org.eclipse.swt.widgets.LRESULT(result); }
void createHandle(int index) { state |= HANDLE; fixedHandle = org.eclipse.swt.widgets.OS.gtk_fixed_new(); if ((fixedHandle) == 0) error(SWT.ERROR_NO_HANDLES); org.eclipse.swt.widgets.OS.gtk_fixed_set_has_window(fixedHandle, true); handle = org.eclipse.swt.widgets.OS.gtk_combo_new(); if ((handle) == 0) error(SWT.ERROR_NO_HANDLES); int parentHandle = parent.parentingHandle(); org.eclipse.swt.widgets.OS.gtk_container_add(parentHandle, fixedHandle); org.eclipse.swt.widgets.OS.gtk_container_add(fixedHandle, handle); org.eclipse.swt.widgets.OS.gtk_widget_show(fixedHandle); org.eclipse.swt.widgets.OS.gtk_widget_show(handle); org.eclipse.swt.widgets.GtkCombo combo = new org.eclipse.swt.widgets.GtkCombo(); org.eclipse.swt.widgets.OS.memmove(combo, handle); entryHandle = combo.entry; listHandle = combo.list; boolean editable = ((style) & (SWT.READ_ONLY)) == 0; org.eclipse.swt.widgets.OS.gtk_entry_set_editable(entryHandle, editable); org.eclipse.swt.widgets.OS.gtk_combo_set_case_sensitive(handle, true); }
void createHandle(int index) { state |= HANDLE; handle = org.eclipse.swt.widgets.OS.gtk_progress_bar_new(); if ((handle) == 0) error(SWT.ERROR_NO_HANDLES); int parentHandle = parent.parentingHandle(); org.eclipse.swt.widgets.OS.gtk_container_add(parentHandle, handle); org.eclipse.swt.widgets.OS.gtk_widget_show(handle); int orientation = (((style) & (SWT.VERTICAL)) != 0) ? OS.GTK_PROGRESS_BOTTOM_TO_TOP : OS.GTK_PROGRESS_LEFT_TO_RIGHT; org.eclipse.swt.widgets.OS.gtk_progress_bar_set_orientation(handle, orientation); if (((style) & (SWT.INDETERMINATE)) != 0) { timerId = org.eclipse.swt.widgets.OS.gtk_timeout_add(org.eclipse.swt.widgets.ProgressBar.DELAY, display.windowTimerProc, handle); } else { int barStyle = (((this.style) & (SWT.SMOOTH)) == 0) ? OS.GTK_PROGRESS_DISCRETE : OS.GTK_PROGRESS_CONTINUOUS; org.eclipse.swt.widgets.OS.gtk_progress_bar_set_bar_style(handle, barStyle); } }
org.eclipse.swt.widgets.LRESULT WM_SYSCOMMAND(int wParam, int lParam) { if ((wParam & 61440) == 0) { org.eclipse.swt.widgets.Decorations shell = menuShell(); if (shell.isEnabled()) { org.eclipse.swt.widgets.MenuItem item = shell.findMenuItem((wParam & 65535)); if (item != null) item.wmCommandChild(wParam, lParam); } return LRESULT.ZERO; } int cmd = wParam & 65520; switch (cmd) { case OS.SC_CLOSE : int hwndShell = menuShell().handle; int bits = org.eclipse.swt.widgets.OS.GetWindowLong(hwndShell, OS.GWL_STYLE); if ((bits & (OS.WS_SYSMENU)) == 0) return LRESULT.ZERO; break; case OS.SC_KEYMENU : if (lParam == 0) { org.eclipse.swt.widgets.Decorations shell = menuShell(); org.eclipse.swt.widgets.Menu menu = shell.getMenuBar(); if (menu == null) { org.eclipse.swt.widgets.Control control = display.getFocusControl(); if (control != null) { if ((control.hooks(SWT.KeyDown)) || (control.hooks(SWT.KeyUp))) { display.mnemonicKeyHit = false; return LRESULT.ZERO; } } } } else { if ((hooks(SWT.KeyDown)) || (hooks(SWT.KeyUp))) { org.eclipse.swt.widgets.Decorations shell = menuShell(); org.eclipse.swt.widgets.Menu menu = shell.getMenuBar(); if (menu != null) { char key = mbcsToWcs(lParam); if (key != 0) { key = java.lang.Character.toUpperCase(key); org.eclipse.swt.widgets.MenuItem[] items = menu.getItems(); for (int i = 0; i < (items.length); i++) { org.eclipse.swt.widgets.MenuItem item = items[i]; java.lang.String text = item.getText(); char mnemonic = findMnemonic(text); if (((text.length()) > 0) && (mnemonic == 0)) { char ch = text.charAt(0); if ((java.lang.Character.toUpperCase(ch)) == key) { display.mnemonicKeyHit = false; return LRESULT.ZERO; } } } } } } } case OS.SC_HSCROLL : case OS.SC_VSCROLL : org.eclipse.swt.widgets.Decorations shell = menuShell(); if ((!(shell.isEnabled())) || (!(shell.isActive()))) { return LRESULT.ZERO; } break; case OS.SC_MINIMIZE : menuShell().saveFocus(); break; } return null; }
static org.eclipse.swt.widgets.GtkBorder getEntryInnerBorder(long handle) { org.eclipse.swt.widgets.GtkBorder gtkBorder = new org.eclipse.swt.widgets.GtkBorder(); if ((OS.GTK_VERSION) >= (org.eclipse.swt.widgets.OS.VERSION(2, 10, 0))) { long border = org.eclipse.swt.widgets.OS.gtk_entry_get_inner_border(handle); if (border != 0) { org.eclipse.swt.widgets.OS.memmove(gtkBorder, border, GtkBorder.sizeof); return gtkBorder; } long[] borderPtr = new long[1]; org.eclipse.swt.widgets.OS.gtk_widget_style_get(handle, OS.inner_border, borderPtr, 0); if ((borderPtr[0]) != 0) { org.eclipse.swt.widgets.OS.memmove(gtkBorder, borderPtr[0], GtkBorder.sizeof); org.eclipse.swt.widgets.OS.gtk_border_free(borderPtr[0]); return gtkBorder; } } gtkBorder.left = org.eclipse.swt.widgets.Display.INNER_BORDER; gtkBorder.top = org.eclipse.swt.widgets.Display.INNER_BORDER; gtkBorder.right = org.eclipse.swt.widgets.Display.INNER_BORDER; gtkBorder.bottom = org.eclipse.swt.widgets.Display.INNER_BORDER; return gtkBorder; }
int accessibilityAttributeValue(int id, int sel, int arg0) { org.eclipse.swt.widgets.NSString nsAttributeName = new org.eclipse.swt.widgets.NSString(arg0); if ((nsAttributeName.isEqualToString(OS.NSAccessibilityRoleAttribute)) || (nsAttributeName.isEqualToString(OS.NSAccessibilityRoleDescriptionAttribute))) { org.eclipse.swt.widgets.NSString roleText = (((style) & (SWT.PUSH)) != 0) ? OS.NSAccessibilityButtonRole : ((style) & (SWT.RADIO)) != 0 ? OS.NSAccessibilityRadioButtonRole : ((style) & (SWT.CHECK)) != 0 ? OS.NSAccessibilityCheckBoxRole : ((style) & (SWT.DROP_DOWN)) != 0 ? OS.NSAccessibilityMenuButtonRole : null; if (roleText != null) { if (nsAttributeName.isEqualToString(OS.NSAccessibilityRoleAttribute)) { return roleText.id; } else { int description = org.eclipse.swt.widgets.OS.NSAccessibilityRoleDescription(roleText.id, 0); return description; } } } else if ((nsAttributeName.isEqualToString(OS.NSAccessibilityTitleAttribute)) || (nsAttributeName.isEqualToString(OS.NSAccessibilityDescriptionAttribute))) { return (getText()) != null ? org.eclipse.swt.widgets.NSString.stringWith(getText()).id : org.eclipse.swt.widgets.NSString.stringWith("").id; } else if (nsAttributeName.isEqualToString(OS.NSAccessibilityHelpAttribute)) { java.lang.String accessibleText = toolTipText; if ((accessibleText == null) || (accessibleText.equals(""))) accessibleText = text; if (!((accessibleText == null) || (accessibleText.equals("")))) { return org.eclipse.swt.widgets.NSString.stringWith(accessibleText).id; } else { return org.eclipse.swt.widgets.NSString.stringWith("").id; } } else if ((nsAttributeName.isEqualToString(OS.NSAccessibilityValueAttribute)) && (((style) & ((SWT.CHECK) | (SWT.RADIO))) != 0)) { org.eclipse.swt.widgets.NSNumber value = org.eclipse.swt.widgets.NSNumber.numberWithInt((selection ? 1 : 0)); return value.id; } else if (nsAttributeName.isEqualToString(OS.NSAccessibilityEnabledAttribute)) { org.eclipse.swt.widgets.NSNumber value = org.eclipse.swt.widgets.NSNumber.numberWithInt((getEnabled() ? 1 : 0)); return value.id; } return super.accessibilityAttributeValue(id, sel, arg0); }
org.eclipse.swt.widgets.LRESULT WM_KILLFOCUS(int wParam, int lParam) { if ((ime) != null) { org.eclipse.swt.widgets.LRESULT result = ime.WM_KILLFOCUS(wParam, lParam); if (result != null) return result; } org.eclipse.swt.widgets.Caret caret = this.caret; org.eclipse.swt.widgets.LRESULT result = super.WM_KILLFOCUS(wParam, lParam); if (caret != null) caret.killFocus(); return result; }
public org.eclipse.swt.custom.Point computeSize(int wHint, int hHint, boolean changed) { checkWidget(); int lineCount = (((getStyle()) & (SWT.SINGLE)) != 0) ? 1 : content.getLineCount(); int width = 0; int height = 0; if ((wHint == (SWT.DEFAULT)) || (hHint == (SWT.DEFAULT))) { org.eclipse.swt.custom.Display display = getDisplay(); int maxHeight = display.getClientArea().height; for (int lineIndex = 0; lineIndex < lineCount; lineIndex++) { org.eclipse.swt.custom.TextLayout layout = renderer.getTextLayout(lineIndex); if (wordWrap) layout.setWidth((wHint == 0 ? 1 : wHint)); org.eclipse.swt.custom.Rectangle rect = layout.getBounds(); height += rect.height; width = java.lang.Math.max(width, rect.width); renderer.disposeTextLayout(layout); if ((isFixedLineHeight()) && (height < maxHeight)) break; } if (isFixedLineHeight()) { height = lineCount * (renderer.getLineHeight()); } } if (width == 0) width = org.eclipse.swt.custom.StyledText.DEFAULT_WIDTH; if (height == 0) height = org.eclipse.swt.custom.StyledText.DEFAULT_HEIGHT; if (wHint != (SWT.DEFAULT)) width = wHint; if (hHint != (SWT.DEFAULT)) height = hHint; int wTrim = ((leftMargin) + (rightMargin)) + (getCaretWidth()); int hTrim = (topMargin) + (bottomMargin); org.eclipse.swt.custom.Rectangle rect = computeTrim(0, 0, (width + wTrim), (height + hTrim)); return new org.eclipse.swt.custom.Point(rect.width, rect.height); }
public void drawPolyline(int[] pointArray) { if ((handle) == 0) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_GRAPHIC_DISPOSED); if (pointArray == null) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NULL_ARGUMENT); org.eclipse.swt.graphics.OS.Polyline(handle, pointArray, ((pointArray.length) / 2)); int length = pointArray.length; if (length >= 2) { org.eclipse.swt.graphics.OS.SetPixel(handle, pointArray[(length - 2)], pointArray[(length - 1)], org.eclipse.swt.graphics.OS.GetTextColor(handle)); } }
boolean dragDetect(int x, int y, boolean filter, boolean[] consume) { boolean quit = false; boolean dragging = false; while (!quit) { int eventPtr = 0; while (true) { eventPtr = org.eclipse.swt.widgets.OS.gdk_event_get(); if (eventPtr != 0) { break; } else { try { java.lang.Thread.sleep(50); } catch (java.lang.Exception ex) { } } } switch (org.eclipse.swt.widgets.OS.GDK_EVENT_TYPE(eventPtr)) { case OS.GDK_MOTION_NOTIFY : { org.eclipse.swt.widgets.GdkEventMotion gdkMotionEvent = new org.eclipse.swt.widgets.GdkEventMotion(); org.eclipse.swt.widgets.OS.memmove(gdkMotionEvent, eventPtr, GdkEventMotion.sizeof); if (((gdkMotionEvent.state) & (OS.GDK_BUTTON1_MASK)) != 0) { if (org.eclipse.swt.widgets.OS.gtk_drag_check_threshold(handle, x, y, ((int) (gdkMotionEvent.x)), ((int) (gdkMotionEvent.y)))) { dragging = true; quit = true; } } else { quit = true; } int[] newX = new int[1]; int[] newY = new int[1]; org.eclipse.swt.widgets.OS.gdk_window_get_pointer(gdkMotionEvent.window, newX, newY, null); break; } case OS.GDK_BUTTON_RELEASE : { org.eclipse.swt.widgets.OS.gdk_event_put(eventPtr); quit = true; break; } case OS.GDK_KEY_PRESS : case OS.GDK_KEY_RELEASE : { org.eclipse.swt.widgets.GdkEventKey gdkEvent = new org.eclipse.swt.widgets.GdkEventKey(); org.eclipse.swt.widgets.OS.memmove(gdkEvent, eventPtr, GdkEventKey.sizeof); if ((gdkEvent.keyval) == (OS.GDK_Escape)) quit = true; break; } case OS.GDK_BUTTON_PRESS : case OS.GDK_2BUTTON_PRESS : case OS.GDK_3BUTTON_PRESS : quit = true; break; default : org.eclipse.swt.widgets.OS.gtk_main_do_event(eventPtr); } org.eclipse.swt.widgets.OS.gdk_event_free(eventPtr); } return dragging; }
void doSelectionWordNext() { int newCaretOffset = getWordEnd(caretOffset); advancing = true; if (((isSingleLine()) == false) || ((content.getLineAtOffset(caretOffset)) == (content.getLineAtOffset(newCaretOffset)))) { caretOffset = newCaretOffset; showCaret(); } }
void updateImages(boolean enabled) { if (((style) & (SWT.SEPARATOR)) != 0) return; int hwnd = parent.handle; org.eclipse.swt.widgets.TBBUTTONINFO info = new org.eclipse.swt.widgets.TBBUTTONINFO(); info.cbSize = TBBUTTONINFO.sizeof; info.dwMask = OS.TBIF_IMAGE; org.eclipse.swt.widgets.OS.SendMessage(hwnd, OS.TB_GETBUTTONINFO, id, info); if (((info.iImage) == (OS.I_IMAGENONE)) && ((image) == null)) return; org.eclipse.swt.widgets.ImageList imageList = parent.getImageList(); org.eclipse.swt.widgets.ImageList hotImageList = parent.getHotImageList(); org.eclipse.swt.widgets.ImageList disabledImageList = parent.getDisabledImageList(); if ((info.iImage) == (OS.I_IMAGENONE)) { org.eclipse.swt.widgets.Rectangle bounds = image.getBounds(); int listStyle = (parent.style) & (SWT.RIGHT_TO_LEFT); if (imageList == null) { imageList = display.getImageListToolBar(listStyle, bounds.width, bounds.height); } if (disabledImageList == null) { disabledImageList = display.getImageListToolBarDisabled(listStyle, bounds.width, bounds.height); } if (hotImageList == null) { hotImageList = display.getImageListToolBarHot(listStyle, bounds.width, bounds.height); } org.eclipse.swt.widgets.Image disabled = disabledImage; if ((disabledImage) == null) { if ((disabledImage2) != null) disabledImage2.dispose(); disabledImage2 = null; disabled = image; if (!enabled) { disabled = disabledImage2 = new org.eclipse.swt.widgets.Image(display, image, SWT.IMAGE_DISABLE); } } org.eclipse.swt.widgets.Image image2 = image; org.eclipse.swt.widgets.Image hot = hotImage; if (((style) & ((SWT.CHECK) | (SWT.RADIO))) != 0) { if (!enabled) image2 = hot = disabled; } info.iImage = imageList.add(image2); disabledImageList.add(disabled); hotImageList.add((hot != null ? hot : image2)); parent.setImageList(imageList); parent.setDisabledImageList(disabledImageList); parent.setHotImageList(hotImageList); } else { org.eclipse.swt.widgets.Image disabled = null; if (disabledImageList != null) { if ((image) != null) { if ((disabledImage2) != null) disabledImage2.dispose(); disabledImage2 = null; disabled = disabledImage; if ((disabledImage) == null) { disabled = image; if (!enabled) { disabled = disabledImage2 = new org.eclipse.swt.widgets.Image(display, image, SWT.IMAGE_DISABLE); } } } disabledImageList.put(info.iImage, disabled); } org.eclipse.swt.widgets.Image image2 = image; org.eclipse.swt.widgets.Image hot = hotImage; if (((style) & ((SWT.CHECK) | (SWT.RADIO))) != 0) { if (!enabled) image2 = hot = disabled; } if (imageList != null) imageList.put(info.iImage, image2); if (hotImageList != null) { hotImageList.put(info.iImage, (hot != null ? hot : image2)); } if ((image) == null) info.iImage = OS.I_IMAGENONE; } info.dwMask |= OS.TBIF_SIZE; info.cx = 0; org.eclipse.swt.widgets.OS.SendMessage(hwnd, OS.TB_SETBUTTONINFO, id, info); int hFont = org.eclipse.swt.widgets.OS.SendMessage(hwnd, OS.WM_GETFONT, 0, 0); org.eclipse.swt.widgets.OS.SendMessage(hwnd, OS.WM_SETFONT, hFont, 0); parent.layoutItems(); }
public void setText(java.lang.String string) { checkWidget(); if (string == null) error(SWT.ERROR_NULL_ARGUMENT); if (((style) & (SWT.SEPARATOR)) != 0) return; super.setText(string); int hwnd = parent.handle; org.eclipse.swt.widgets.TBBUTTONINFO info = new org.eclipse.swt.widgets.TBBUTTONINFO(); info.cbSize = TBBUTTONINFO.sizeof; info.dwMask = (OS.TBIF_TEXT) | (OS.TBIF_STYLE); info.fsStyle = ((byte) ((widgetStyle()) | (OS.BTNS_AUTOSIZE))); int hHeap = org.eclipse.swt.widgets.OS.GetProcessHeap(); int pszText = 0; if ((string.length()) != 0) { info.fsStyle |= OS.BTNS_SHOWTEXT; org.eclipse.swt.widgets.TCHAR buffer = new org.eclipse.swt.widgets.TCHAR(parent.getCodePage(), string, true); int byteCount = (buffer.length()) * (TCHAR.sizeof); pszText = org.eclipse.swt.widgets.OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, byteCount); org.eclipse.swt.widgets.OS.MoveMemory(pszText, buffer, byteCount); info.pszText = pszText; } org.eclipse.swt.widgets.OS.SendMessage(hwnd, OS.TB_SETBUTTONINFO, id, info); if (pszText != 0) org.eclipse.swt.widgets.OS.HeapFree(hHeap, 0, pszText); int hFont = org.eclipse.swt.widgets.OS.SendMessage(hwnd, OS.WM_GETFONT, 0, 0); org.eclipse.swt.widgets.OS.SendMessage(hwnd, OS.WM_SETFONT, hFont, 0); parent.layoutItems(); }
void dropDown(boolean drop) { if (drop == (isDropped())) return; org.eclipse.swt.custom.Display display = getDisplay(); if (!drop) { display.removeFilter(SWT.Selection, filter); popup.setVisible(false); if ((!(isDisposed())) && (isFocusControl())) { text.setFocus(); } return; } if (!(isVisible())) return; if ((getShell()) != (popup.getParent())) { java.lang.String[] items = list.getItems(); int selectionIndex = list.getSelectionIndex(); list.removeListener(SWT.Dispose, listener); popup.dispose(); popup = null; list = null; createPopup(items, selectionIndex); } org.eclipse.swt.custom.Point size = getSize(); int itemCount = list.getItemCount(); itemCount = (itemCount == 0) ? visibleItemCount : java.lang.Math.min(visibleItemCount, itemCount); int itemHeight = (list.getItemHeight()) * itemCount; org.eclipse.swt.custom.Point listSize = list.computeSize(SWT.DEFAULT, itemHeight, false); list.setBounds(1, 1, java.lang.Math.max(((size.x) - 2), listSize.x), listSize.y); int index = list.getSelectionIndex(); if (index != (-1)) list.setTopIndex(index); org.eclipse.swt.custom.Rectangle listRect = list.getBounds(); org.eclipse.swt.custom.Rectangle parentRect = display.map(getParent(), null, getBounds()); org.eclipse.swt.custom.Point comboSize = getSize(); org.eclipse.swt.custom.Rectangle displayRect = getMonitor().getClientArea(); int width = java.lang.Math.max(comboSize.x, ((listRect.width) + 2)); int height = (listRect.height) + 2; int x = parentRect.x; int y = (parentRect.y) + (comboSize.y); if ((y + height) > ((displayRect.y) + (displayRect.height))) { int popUpwardsHeight = (((parentRect.y) - height) < (displayRect.y)) ? (parentRect.y) - (displayRect.y) : height; int popDownwardsHeight = ((displayRect.y) + (displayRect.height)) - y; if (popUpwardsHeight > popDownwardsHeight) { height = popUpwardsHeight; y = (parentRect.y) - popUpwardsHeight; } else { height = popDownwardsHeight; } list.setSize(listRect.width, (height - 2)); } if ((x + width) > ((displayRect.x) + (displayRect.width))) x = ((displayRect.x) + (displayRect.width)) - (listRect.width); popup.setBounds(x, y, width, height); popup.setVisible(true); if (isFocusControl()) list.setFocus(); display.removeFilter(SWT.Selection, filter); display.addFilter(SWT.Selection, filter); }
int widgetExtStyle() { int bits = (super.widgetExtStyle()) & (~(OS.WS_EX_MDICHILD)); if (!(OS.IsWinCE)) { if ((parent) == null) { if (((style) & (SWT.ON_TOP)) != 0) { int trim = (((SWT.TITLE) | (SWT.CLOSE)) | (SWT.MIN)) | (SWT.MAX); if ((((style) & (SWT.NO_TRIM)) != 0) || (((style) & trim) == 0)) { bits |= OS.WS_EX_TOOLWINDOW; } } } } if ((parent) != null) { if (OS.IsWin95) return bits; if ((OS.WIN32_VERSION) < (org.eclipse.swt.widgets.OS.VERSION(4, 10))) { return bits; } } if (((style) & (SWT.ON_TOP)) != 0) bits |= OS.WS_EX_TOPMOST; return bits; }
public int getOffset(int x, int y, int[] trailing) { checkLayout(); computeRuns(); if ((trailing != null) && ((trailing.length) < 1)) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_INVALID_ARGUMENT); int length = text.length(); if (length == 0) return 0; int lineY = 0; int start = 0; int lineIndex; for (lineIndex = 0; lineIndex < ((breaks.length) - 1); lineIndex++) { int lineBreak = breaks[lineIndex]; int height = lineHeight[lineIndex]; if ((lineY + height) > y) break; lineY += height; start = lineBreak; } int[] offset = new int[]{ start }; boolean[] leading = new boolean[1]; org.eclipse.swt.graphics.OS.ATSUPositionToOffset(layout, org.eclipse.swt.graphics.OS.Long2Fix(x), org.eclipse.swt.graphics.OS.Long2Fix((y - lineY)), offset, leading, null); if (trailing != null) trailing[0] = (leading[0]) ? 0 : 1; if (!(leading[0])) (offset[0])--; for (int i = 0; i < (hardBreaks.length); i++) { if ((offset[0]) == (hardBreaks[i])) { (offset[0])++; break; } } offset[0] = untranslateOffset(offset[0]); if ((offset[0]) > (length - 1)) { offset[0] = length - 1; if (trailing != null) trailing[0] = 1; } return offset[0]; }
ImageData(int width, int height, int depth, org.eclipse.swt.graphics.PaletteData palette, int scanlinePad, byte[] data, int maskPad, byte[] maskData, byte[] alphaData, int alpha, int transparentPixel, int type, int x, int y, int disposalMethod, int delayTime) { if (palette == null) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NULL_ARGUMENT); if (!(((((((depth == 1) || (depth == 2)) || (depth == 4)) || (depth == 8)) || (depth == 16)) || (depth == 24)) || (depth == 32))) { org.eclipse.swt.graphics.SWT.error(SWT.ERROR_INVALID_ARGUMENT); } if ((width <= 0) || (height <= 0)) { org.eclipse.swt.graphics.SWT.error(SWT.ERROR_INVALID_ARGUMENT); } if (scanlinePad == 0) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_CANNOT_BE_ZERO); int bytesPerLine = (((((width * depth) + 7) / 8) + (scanlinePad - 1)) / scanlinePad) * scanlinePad; setAllFields(width, height, depth, scanlinePad, bytesPerLine, (data != null ? data : new byte[bytesPerLine * height]), palette, transparentPixel, maskData, maskPad, alphaData, alpha, type, x, y, disposalMethod, delayTime); }
protected void layout(org.eclipse.swt.layout.Composite composite, boolean flushCache) { org.eclipse.swt.layout.Rectangle rect = composite.getClientArea(); int x = ((rect.x) + (marginLeft)) + (marginWidth); int y = ((rect.y) + (marginTop)) + (marginHeight); int width = java.lang.Math.max(0, ((((rect.width) - (marginLeft)) - (2 * (marginWidth))) - (marginRight))); int height = java.lang.Math.max(0, ((((rect.height) - (marginTop)) - (2 * (marginHeight))) - (marginBottom))); layout(composite, true, x, y, width, height, flushCache); }
public org.eclipse.swt.graphics.Rectangle getBounds() { checkLayout(); computeRuns(); int[] w = new int[1]; int[] h = new int[1]; org.eclipse.swt.graphics.OS.pango_layout_get_size(layout, w, h); int wrapWidth = org.eclipse.swt.graphics.OS.pango_layout_get_width(layout); w[0] = (wrapWidth != (-1)) ? wrapWidth : (w[0]) + (org.eclipse.swt.graphics.OS.pango_layout_get_indent(layout)); int width = org.eclipse.swt.graphics.OS.PANGO_PIXELS(w[0]); int height = org.eclipse.swt.graphics.OS.PANGO_PIXELS(h[0]); if (((ascent) != (-1)) && ((descent) != (-1))) { height = java.lang.Math.max(height, ((ascent) + (descent))); } height += org.eclipse.swt.graphics.OS.PANGO_PIXELS(org.eclipse.swt.graphics.OS.pango_layout_get_spacing(layout)); return new org.eclipse.swt.graphics.Rectangle(0, 0, width, height); }
public static void main(java.lang.String[] args) { org.eclipse.swt.examples.texteditor.Display display = new org.eclipse.swt.examples.texteditor.Display(); org.eclipse.swt.examples.texteditor.TextEditor editor = new org.eclipse.swt.examples.texteditor.TextEditor(); org.eclipse.swt.examples.texteditor.Shell shell = editor.open(display); while (!(shell.isDisposed())) { if (!(display.readAndDispatch())) display.sleep(); } editor.releaseResources(); display.dispose(); }
void setBackgroundPixel(int pixel) { if ((background) == pixel) return; background = pixel; if (OS.IsWinCE) { org.eclipse.swt.widgets.OS.InvalidateRect(handle, null, true); } else { int flags = ((OS.RDW_ERASE) | (OS.RDW_FRAME)) | (OS.RDW_INVALIDATE); org.eclipse.swt.widgets.OS.RedrawWindow(handle, null, 0, flags); } }
public boolean execute(java.lang.String script) { checkWidget(); if (script == null) org.eclipse.swt.browser.SWT.error(SWT.ERROR_NULL_ARGUMENT); int[] rgdispid = auto.getIDsOfNames(new java.lang.String[]{ "Document" }); int dispIdMember = rgdispid[0]; org.eclipse.swt.browser.Variant pVarResult = auto.getProperty(dispIdMember); if ((pVarResult == null) || ((pVarResult.getType()) == (COM.VT_EMPTY))) return false; org.eclipse.swt.browser.OleAutomation document = pVarResult.getAutomation(); pVarResult.dispose(); rgdispid = document.getIDsOfNames(new java.lang.String[]{ "parentWindow" }); if (rgdispid == null) { document.dispose(); return false; } dispIdMember = rgdispid[0]; pVarResult = document.getProperty(dispIdMember); org.eclipse.swt.browser.OleAutomation ihtmlWindow2 = pVarResult.getAutomation(); pVarResult.dispose(); document.dispose(); rgdispid = ihtmlWindow2.getIDsOfNames(new java.lang.String[]{ "execScript", "code" }); org.eclipse.swt.browser.Variant[] rgvarg = new org.eclipse.swt.browser.Variant[1]; rgvarg[0] = new org.eclipse.swt.browser.Variant(script); int[] rgdispidNamedArgs = new int[1]; rgdispidNamedArgs[0] = rgdispid[1]; pVarResult = ihtmlWindow2.invoke(rgdispid[0], rgvarg, rgdispidNamedArgs); rgvarg[0].dispose(); ihtmlWindow2.dispose(); if (pVarResult == null) return false; pVarResult.dispose(); return true; }
public org.eclipse.swt.widgets.Rectangle getImageBounds(int index) { checkWidget(); int itemIndex = parent.indexOf(this); if (itemIndex == (-1)) return new org.eclipse.swt.widgets.Rectangle(0, 0, 0, 0); int hwnd = parent.handle; int hwndHeader = org.eclipse.swt.widgets.OS.SendMessage(hwnd, OS.LVM_GETHEADER, 0, 0); int count = org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0); if (!((0 <= index) && (index < count))) return new org.eclipse.swt.widgets.Rectangle(0, 0, 0, 0); int gridWidth = (parent.getLinesVisible()) ? parent.getGridLineWidth() : 0; org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); rect.top = index; rect.left = OS.LVIR_ICON; org.eclipse.swt.widgets.OS.SendMessage(hwnd, OS.LVM_GETSUBITEMRECT, itemIndex, rect); if (index == 0) { rect.left -= gridWidth; } int width = java.lang.Math.max(0, (((rect.right) - (rect.left)) - gridWidth)); int height = java.lang.Math.max(0, (((rect.bottom) - (rect.top)) - gridWidth)); if (((index != 0) && ((images) != null)) && ((images[index]) == null)) { width = 0; } if ((((OS.COMCTL32_MAJOR) << 16) | (OS.COMCTL32_MINOR)) >= ((5 << 16) | 80)) { rect.top -= gridWidth; } return new org.eclipse.swt.widgets.Rectangle(((rect.left) + gridWidth), ((rect.top) + gridWidth), width, height); }
public Accessible(org.eclipse.swt.accessibility.Accessible parent) { this.parent = org.eclipse.swt.accessibility.Accessible.checkNull(parent); this.control = parent.control; parent.children.addElement(this); AddRef(); }
void setForegroundPixel(int pixel) { super.setForegroundPixel(pixel); if (((state) & (CANVAS)) != 0) { int xDisplay = org.eclipse.swt.widgets.OS.XtDisplay(handle); if (xDisplay == 0) return; int xWindow = org.eclipse.swt.widgets.OS.XtWindow(handle); if (xWindow == 0) return; int[] argList = new int[]{ OS.XmNforeground, 0 }; org.eclipse.swt.widgets.OS.XtGetValues(handle, argList, ((argList.length) / 2)); if (pixel == (argList[1])) return; org.eclipse.swt.widgets.OS.XClearArea(xDisplay, xWindow, 0, 0, 0, 0, true); } }
public org.eclipse.swt.widgets.Point computeSize(int wHint, int hHint, boolean changed) { checkWidget(); int width = 100; int height = 21; int[] ptr = new int[1]; if (((style) & (SWT.READ_ONLY)) != 0) { int index = (org.eclipse.swt.internal.carbon.OS.GetControlValue(handle)) - 1; org.eclipse.swt.internal.carbon.OS.CopyMenuItemTextAsCFString(menuHandle, ((short) (index + 1)), ptr); } else { org.eclipse.swt.internal.carbon.OS.GetControlData(handle, ((short) (OS.kHIComboBoxEditTextPart)), OS.kControlEditTextCFStringTag, 4, ptr, null); } if ((ptr[0]) != 0) { org.eclipse.swt.internal.carbon.Point bounds = new org.eclipse.swt.internal.carbon.Point(); short[] baseLine = new short[1]; if ((org.eclipse.swt.internal.carbon.OS.GetThemeTextDimensions(ptr[0], ((short) (OS.kThemeSystemFont)), OS.kThemeStateActive, false, bounds, baseLine)) == (org.eclipse.swt.internal.carbon.OS.noErr)) { width = java.lang.Math.max(width, bounds.h); height = java.lang.Math.max(height, bounds.v); } org.eclipse.swt.internal.carbon.OS.CFRelease(ptr[0]); } org.eclipse.swt.internal.carbon.Rect inset = getInset(); width += (inset.left) + (inset.right); height += (inset.top) + (inset.bottom); if (wHint != (SWT.DEFAULT)) width = wHint; if (hHint != (SWT.DEFAULT)) height = hHint; return new org.eclipse.swt.widgets.Point(width, height); }
public void showSelection() { checkWidget(); int index = getSelectionIndex(); if (index == (-1)) return; int iter = org.eclipse.swt.widgets.OS.g_malloc(org.eclipse.swt.widgets.OS.GtkTreeIter_sizeof()); org.eclipse.swt.widgets.OS.gtk_tree_model_iter_nth_child(modelHandle, iter, 0, index); int path = org.eclipse.swt.widgets.OS.gtk_tree_model_get_path(modelHandle, iter); org.eclipse.swt.widgets.OS.gtk_tree_view_scroll_to_cell(handle, path, 0, true, 0, 0); org.eclipse.swt.widgets.OS.gtk_tree_path_free(path); org.eclipse.swt.widgets.OS.g_free(iter); }
void handleTextChanging(org.eclipse.swt.custom.TextChangingEvent event) { int firstLine; int textChangeY; boolean isMultiLineChange = ((event.replaceLineCount) > 0) || ((event.newLineCount) > 0); if ((event.replaceCharCount) < 0) { event.start += event.replaceCharCount; event.replaceCharCount *= -1; } lastTextChangeStart = event.start; lastTextChangeNewLineCount = event.newLineCount; lastTextChangeNewCharCount = event.newCharCount; lastTextChangeReplaceLineCount = event.replaceLineCount; lastTextChangeReplaceCharCount = event.replaceCharCount; firstLine = content.getLineAtOffset(event.start); textChangeY = ((firstLine * (lineHeight)) - (verticalScrollOffset)) + (topMargin); if (isMultiLineChange) { redrawMultiLineChange(textChangeY, event.newLineCount, event.replaceLineCount); } if ((defaultLineStyler) != null) { defaultLineStyler.textChanging(event); } int newEndOfText = ((content.getCharCount()) - (event.replaceCharCount)) + (event.newCharCount); if ((caretOffset) > newEndOfText) caretOffset = newEndOfText; }
void _removeListener(int eventType, org.eclipse.swt.widgets.Listener listener) { super._removeListener(eventType, listener); switch (eventType) { case SWT.MeasureItem : { if ((((style) & (SWT.H_SCROLL)) != 0) && (((state) & (DISPOSE_SENT)) == 0)) { int bits = org.eclipse.swt.widgets.OS.GetWindowLong(handle, OS.GWL_STYLE); bits &= ~(OS.TVS_NOHSCROLL); org.eclipse.swt.widgets.OS.SetWindowLong(handle, OS.GWL_STYLE, bits); org.eclipse.swt.widgets.OS.InvalidateRect(handle, null, true); } break; } } }
int gtk_changed(int widget) { boolean keyPress = false; int eventPtr = org.eclipse.swt.widgets.OS.gtk_get_current_event(); if (eventPtr != 0) { org.eclipse.swt.widgets.GdkEventKey gdkEvent = new org.eclipse.swt.widgets.GdkEventKey(); org.eclipse.swt.widgets.OS.memmove(gdkEvent, eventPtr, GdkEventKey.sizeof); switch (gdkEvent.type) { case OS.GDK_KEY_PRESS : keyPress = true; break; } org.eclipse.swt.widgets.OS.gdk_event_free(eventPtr); } if (keyPress) { postEvent(SWT.Modify); } else { sendEvent(SWT.Modify); } if (((style) & (SWT.SEARCH)) != 0) { if (((style) & (SWT.ICON_CANCEL)) != 0) { int ptr = org.eclipse.swt.widgets.OS.gtk_entry_get_text(handle); org.eclipse.swt.widgets.OS.gtk_entry_set_icon_sensitive(handle, OS.GTK_ENTRY_ICON_SECONDARY, ((org.eclipse.swt.widgets.OS.g_utf8_strlen(ptr, (-1))) > 0)); } } return 0; }
public void showSelection() { checkWidget(); boolean rightToLeft = (caretOffset) == (selection.x); int startOffset; int endOffset; if (rightToLeft) { startOffset = selection.y; endOffset = selection.x; } else { startOffset = selection.x; endOffset = selection.y; } org.eclipse.swt.custom.Rectangle startBounds = getBoundsAtOffset(startOffset); org.eclipse.swt.custom.Rectangle endBounds = getBoundsAtOffset(endOffset); int w = ((clientAreaWidth) - (leftMargin)) - (rightMargin); boolean selectionFits = (rightToLeft) ? ((startBounds.x) - (endBounds.x)) <= w : ((endBounds.x) - (startBounds.x)) <= w; if (selectionFits) { if (showLocation(startBounds, false)) { endBounds = getBoundsAtOffset(endOffset); } endBounds.width = (endOffset == (caretOffset)) ? getCaretWidth() : 0; showLocation(endBounds, false); } else { showLocation(endBounds, true); } }
void notifyImageChanged(int columnIndex, boolean imageWasNull) { org.eclipse.swt.widgets.Table parent = getParent(); org.eclipse.swt.widgets.Rectangle changedColumnBounds; org.eclipse.swt.widgets.Image currentImage; int redrawStartX = 0; int redrawWidth = 0; int columnCount = parent.internalGetColumnCount(); if (((columnIndex >= 0) && (columnIndex < columnCount)) && ((parent.getVisibleRedrawY(this)) != (-1))) { changedColumnBounds = parent.internalGetColumn(columnIndex).getBounds(); currentImage = getImage(columnIndex); redrawStartX = java.lang.Math.max(0, getImageBounds(columnIndex).x); if ((((parent.getImageExtent()) != null) && (imageWasNull == false)) && (currentImage != null)) { redrawWidth = getImageStopX(columnIndex); } else { redrawWidth = changedColumnBounds.width; } redrawWidth += (changedColumnBounds.x) - redrawStartX; } parent.itemChanged(this, redrawStartX, redrawWidth); }
int TranslateAccelerator(int lpMsg, int pguidCmdGroup, int nCmdID) { org.eclipse.swt.browser.Menu menubar = getShell().getMenuBar(); if (((menubar != null) && (!(menubar.isDisposed()))) && (menubar.isEnabled())) { org.eclipse.swt.browser.Shell shell = menubar.getShell(); int hwnd = shell.handle; int hAccel = org.eclipse.swt.browser.OS.SendMessage(hwnd, ((OS.WM_APP) + 1), 0, 0); if (hAccel != 0) { org.eclipse.swt.browser.MSG msg = new org.eclipse.swt.browser.MSG(); org.eclipse.swt.browser.OS.MoveMemory(msg, lpMsg, MSG.sizeof); if ((org.eclipse.swt.browser.OS.TranslateAccelerator(hwnd, hAccel, msg)) != 0) return COM.S_OK; } } int result = COM.S_FALSE; org.eclipse.swt.browser.MSG msg = new org.eclipse.swt.browser.MSG(); org.eclipse.swt.browser.OS.MoveMemory(msg, lpMsg, MSG.sizeof); if ((msg.message) == (OS.WM_KEYDOWN)) { switch (((int) (msg.wParam))) { case OS.VK_N : if ((org.eclipse.swt.browser.OS.GetKeyState(OS.VK_CONTROL)) < 0) result = COM.S_OK; break; case OS.VK_F5 : org.eclipse.swt.browser.OleAutomation auto = new org.eclipse.swt.browser.OleAutomation(this); int[] rgdispid = auto.getIDsOfNames(new java.lang.String[]{ "LocationURL" }); org.eclipse.swt.browser.Variant pVarResult = auto.getProperty(rgdispid[0]); auto.dispose(); if (pVarResult != null) { if ((pVarResult.getType()) == (OLE.VT_BSTR)) { java.lang.String url = pVarResult.getString(); if (url.equals(IE.ABOUT_BLANK)) result = COM.S_OK; } pVarResult.dispose(); } break; case OS.VK_TAB : break; default : org.eclipse.swt.browser.OS.TranslateMessage(msg); frame.setData(org.eclipse.swt.browser.WebSite.CONSUME_KEY, "true"); break; } } boolean isAccent = false; switch (((int) (msg.wParam))) { case OS.VK_SHIFT : case OS.VK_MENU : case OS.VK_CONTROL : case OS.VK_CAPITAL : case OS.VK_NUMLOCK : case OS.VK_SCROLL : break; default : { int mapKey = org.eclipse.swt.browser.OS.MapVirtualKey(((int) (msg.wParam)), 2); if (mapKey != 0) { isAccent = (mapKey & (OS.IsWinNT ? -2147483648 : 32768)) != 0; if (!isAccent) { for (int i = 0; i < (org.eclipse.swt.browser.WebSite.ACCENTS.length); i++) { int value = org.eclipse.swt.browser.OS.VkKeyScan(org.eclipse.swt.browser.WebSite.ACCENTS[i]); if ((value != (-1)) && ((value & 255) == (msg.wParam))) { int state = value >> 8; if (((((org.eclipse.swt.browser.OS.GetKeyState(OS.VK_SHIFT)) < 0) == ((state & 1) != 0)) && (((org.eclipse.swt.browser.OS.GetKeyState(OS.VK_CONTROL)) < 0) == ((state & 2) != 0))) && (((org.eclipse.swt.browser.OS.GetKeyState(OS.VK_MENU)) < 0) == ((state & 4) != 0))) { if ((state & 7) != 0) isAccent = true; break; } } } } } break; } } if (isAccent) result = COM.S_OK; return result; }
private void onMouseDown(org.eclipse.swt.custom.Event event) { for (int i = 0; i < (items.length); i++) { if (items[i].getBounds().contains(new org.eclipse.swt.custom.Point(event.x, event.y))) { if (i == (selectedIndex)) { showSelection(); return; } forceFocus(); setSelection(i, true); if (isFocusControl()) setFocus(); return; } } }
public void run() { if (((currentControl) != null) && (!(currentControl.isDisposed()))) { currentControl.sendMouseEvent(org.eclipse.swt.widgets.NSApplication.sharedApplication().currentEvent(), SWT.MouseHover, (((trackingControl) != null) && (!(trackingControl.isDisposed())))); } }
protected void layout(org.eclipse.swt.custom.Composite composite, boolean flushCache) { org.eclipse.swt.custom.SashForm sashForm = ((org.eclipse.swt.custom.SashForm) (composite)); org.eclipse.swt.custom.Rectangle area = sashForm.getClientArea(); if (((area.width) <= 1) || ((area.height) <= 1)) return; org.eclipse.swt.custom.Control[] newControls = sashForm.getControls(true); if (((sashForm.controls.length) == 0) && ((newControls.length) == 0)) return; sashForm.controls = newControls; org.eclipse.swt.custom.Control[] controls = sashForm.controls; if (((sashForm.maxControl) != null) && (!(sashForm.maxControl.isDisposed()))) { for (int i = 0; i < (controls.length); i++) { if ((controls[i]) != (sashForm.maxControl)) { controls[i].setBounds((-200), (-200), 0, 0); } else { controls[i].setBounds(area); } } return; } if ((sashForm.sashes.length) < ((controls.length) - 1)) { org.eclipse.swt.custom.Sash[] newSashes = new org.eclipse.swt.custom.Sash[(controls.length) - 1]; java.lang.System.arraycopy(sashForm.sashes, 0, newSashes, 0, sashForm.sashes.length); for (int i = sashForm.sashes.length; i < (newSashes.length); i++) { newSashes[i] = new org.eclipse.swt.custom.Sash(sashForm, sashForm.sashStyle); newSashes[i].setBackground(sashForm.background); newSashes[i].setForeground(sashForm.foreground); newSashes[i].addListener(SWT.Selection, sashForm.sashListener); } sashForm.sashes = newSashes; } if ((sashForm.sashes.length) > ((controls.length) - 1)) { if ((controls.length) == 0) { for (int i = 0; i < (sashForm.sashes.length); i++) { sashForm.sashes[i].dispose(); } sashForm.sashes = new org.eclipse.swt.custom.Sash[0]; } else { org.eclipse.swt.custom.Sash[] newSashes = new org.eclipse.swt.custom.Sash[(controls.length) - 1]; java.lang.System.arraycopy(sashForm.sashes, 0, newSashes, 0, newSashes.length); for (int i = (controls.length) - 1; i < (sashForm.sashes.length); i++) { sashForm.sashes[i].dispose(); } sashForm.sashes = newSashes; } } if ((controls.length) == 0) return; org.eclipse.swt.custom.Sash[] sashes = sashForm.sashes; long[] ratios = new long[controls.length]; long total = 0; for (int i = 0; i < (controls.length); i++) { java.lang.Object data = controls[i].getLayoutData(); if ((data != null) && (data instanceof org.eclipse.swt.custom.SashFormData)) { ratios[i] = ((org.eclipse.swt.custom.SashFormData) (data)).weight; } else { data = new org.eclipse.swt.custom.SashFormData(); controls[i].setLayoutData(data); ((org.eclipse.swt.custom.SashFormData) (data)).weight = ratios[i] = ((200 << 16) + 999) / 1000; } total += ratios[i]; } int sashwidth = ((sashes.length) > 0) ? (sashForm.SASH_WIDTH) + ((sashes[0].getBorderWidth()) * 2) : sashForm.SASH_WIDTH; if ((sashForm.getOrientation()) == (SWT.HORIZONTAL)) { int width = ((int) (((ratios[0]) * ((area.width) - ((sashes.length) * sashwidth))) / total)); int x = area.x; controls[0].setBounds(x, area.y, width, area.height); x += width; for (int i = 1; i < ((controls.length) - 1); i++) { sashes[(i - 1)].setBounds(x, area.y, sashwidth, area.height); x += sashwidth; width = ((int) (((ratios[i]) * ((area.width) - ((sashes.length) * sashwidth))) / total)); controls[i].setBounds(x, area.y, width, area.height); x += width; } if ((controls.length) > 1) { sashes[((sashes.length) - 1)].setBounds(x, area.y, sashwidth, area.height); x += sashwidth; width = (area.width) - x; controls[((controls.length) - 1)].setBounds(x, area.y, width, area.height); } } else { int height = ((int) (((ratios[0]) * ((area.height) - ((sashes.length) * sashwidth))) / total)); int y = area.y; controls[0].setBounds(area.x, y, area.width, height); y += height; for (int i = 1; i < ((controls.length) - 1); i++) { sashes[(i - 1)].setBounds(area.x, y, area.width, sashwidth); y += sashwidth; height = ((int) (((ratios[i]) * ((area.height) - ((sashes.length) * sashwidth))) / total)); controls[i].setBounds(area.x, y, area.width, height); y += height; } if ((controls.length) > 1) { sashes[((sashes.length) - 1)].setBounds(area.x, y, area.width, sashwidth); y += sashwidth; height = (area.height) - y; controls[((controls.length) - 1)].setBounds(area.x, y, area.width, height); } } }
void init(org.eclipse.swt.graphics.Device device, java.lang.String name, int height, int style) { if (name == null) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NULL_ARGUMENT); if (height < 0) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_INVALID_ARGUMENT); this.device = device; int[] font = new int[1]; byte[] buffer = name.getBytes(); this.id = OS.kInvalidFontFamily; if ((org.eclipse.swt.graphics.OS.ATSUFindFontFromName(buffer, buffer.length, OS.kFontFamilyName, OS.kFontNoPlatformCode, OS.kFontNoScriptCode, OS.kFontNoLanguageCode, font)) == (OS.noErr)) { short[] family = new short[1]; org.eclipse.swt.graphics.OS.FMGetFontFamilyInstanceFromFont(font[0], family, new short[1]); this.id = family[0]; } if ((this.id) == (OS.kInvalidFontFamily)) this.id = org.eclipse.swt.graphics.OS.GetAppFont(); if ((style & (SWT.ITALIC)) != 0) this.style |= OS.italic; if ((style & (SWT.BOLD)) != 0) this.style |= OS.bold; this.size = ((short) (height)); org.eclipse.swt.graphics.OS.FMGetFontFromFontFamilyInstance(id, this.style, font, null); if ((font[0]) == 0) { org.eclipse.swt.graphics.Font systemFont = device.systemFont; this.handle = systemFont.handle; } else { this.handle = font[0]; } this.atsuiStyle = createStyle(); }
int[] createGdipImage() { switch (type) { case SWT.BITMAP : { if ((((alpha) != (-1)) || ((alphaData) != null)) || ((transparentPixel) != (-1))) { org.eclipse.swt.graphics.BITMAP bm = new org.eclipse.swt.graphics.BITMAP(); org.eclipse.swt.graphics.OS.GetObject(handle, BITMAP.sizeof, bm); int imgWidth = bm.bmWidth; int imgHeight = bm.bmHeight; int hDC = device.internal_new_GC(null); int srcHdc = org.eclipse.swt.graphics.OS.CreateCompatibleDC(hDC); int oldSrcBitmap = org.eclipse.swt.graphics.OS.SelectObject(srcHdc, handle); int memHdc = org.eclipse.swt.graphics.OS.CreateCompatibleDC(hDC); int memDib = org.eclipse.swt.graphics.Image.createDIB(imgWidth, imgHeight, 32); if (memDib == 0) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NO_HANDLES); int oldMemBitmap = org.eclipse.swt.graphics.OS.SelectObject(memHdc, memDib); org.eclipse.swt.graphics.BITMAP dibBM = new org.eclipse.swt.graphics.BITMAP(); org.eclipse.swt.graphics.OS.GetObject(memDib, BITMAP.sizeof, dibBM); int sizeInBytes = (dibBM.bmWidthBytes) * (dibBM.bmHeight); org.eclipse.swt.graphics.OS.BitBlt(memHdc, 0, 0, imgWidth, imgHeight, srcHdc, 0, 0, OS.SRCCOPY); byte red = 0; byte green = 0; byte blue = 0; if ((transparentPixel) != (-1)) { if ((bm.bmBitsPixel) <= 8) { byte[] color = new byte[4]; org.eclipse.swt.graphics.OS.GetDIBColorTable(srcHdc, transparentPixel, 1, color); blue = color[0]; green = color[1]; red = color[2]; } else { switch (bm.bmBitsPixel) { case 16 : int blueMask = 31; int blueShift = org.eclipse.swt.graphics.ImageData.getChannelShift(blueMask); byte[] blues = ImageData.ANY_TO_EIGHT[org.eclipse.swt.graphics.ImageData.getChannelWidth(blueMask, blueShift)]; blue = blues[(((transparentPixel) & blueMask) >> blueShift)]; int greenMask = 992; int greenShift = org.eclipse.swt.graphics.ImageData.getChannelShift(greenMask); byte[] greens = ImageData.ANY_TO_EIGHT[org.eclipse.swt.graphics.ImageData.getChannelWidth(greenMask, greenShift)]; green = greens[(((transparentPixel) & greenMask) >> greenShift)]; int redMask = 31744; int redShift = org.eclipse.swt.graphics.ImageData.getChannelShift(redMask); byte[] reds = ImageData.ANY_TO_EIGHT[org.eclipse.swt.graphics.ImageData.getChannelWidth(redMask, redShift)]; red = reds[(((transparentPixel) & redMask) >> redShift)]; break; case 24 : blue = ((byte) (((transparentPixel) & 16711680) >> 16)); green = ((byte) (((transparentPixel) & 65280) >> 8)); red = ((byte) ((transparentPixel) & 255)); break; case 32 : blue = ((byte) (((transparentPixel) & -16777216) >>> 24)); green = ((byte) (((transparentPixel) & 16711680) >> 16)); red = ((byte) (((transparentPixel) & 65280) >> 8)); break; } } } org.eclipse.swt.graphics.OS.SelectObject(srcHdc, oldSrcBitmap); org.eclipse.swt.graphics.OS.SelectObject(memHdc, oldMemBitmap); org.eclipse.swt.graphics.OS.DeleteObject(srcHdc); org.eclipse.swt.graphics.OS.DeleteObject(memHdc); byte[] srcData = new byte[sizeInBytes]; org.eclipse.swt.graphics.OS.MoveMemory(srcData, dibBM.bmBits, sizeInBytes); org.eclipse.swt.graphics.OS.DeleteObject(memDib); device.internal_dispose_GC(hDC, null); if ((alpha) != (-1)) { for (int y = 0, dp = 0; y < imgHeight; ++y) { for (int x = 0; x < imgWidth; ++x) { srcData[(dp + 3)] = ((byte) (alpha)); dp += 4; } } } else if ((alphaData) != null) { for (int y = 0, dp = 0, ap = 0; y < imgHeight; ++y) { for (int x = 0; x < imgWidth; ++x) { srcData[(dp + 3)] = alphaData[(ap++)]; dp += 4; } } } else if ((transparentPixel) != (-1)) { for (int y = 0, dp = 0; y < imgHeight; ++y) { for (int x = 0; x < imgWidth; ++x) { if ((((srcData[dp]) == blue) && ((srcData[(dp + 1)]) == green)) && ((srcData[(dp + 2)]) == red)) { srcData[(dp + 3)] = ((byte) (0)); } else { srcData[(dp + 3)] = ((byte) (255)); } dp += 4; } } } int hHeap = org.eclipse.swt.graphics.OS.GetProcessHeap(); int pixels = org.eclipse.swt.graphics.OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, srcData.length); if (pixels == 0) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NO_HANDLES); org.eclipse.swt.graphics.OS.MoveMemory(pixels, srcData, sizeInBytes); return new int[]{ org.eclipse.swt.graphics.Gdip.Bitmap_new(imgWidth, imgHeight, dibBM.bmWidthBytes, Gdip.PixelFormat32bppARGB, pixels), pixels }; } return new int[]{ org.eclipse.swt.graphics.Gdip.Bitmap_new(handle, 0), 0 }; } case SWT.ICON : { org.eclipse.swt.graphics.ICONINFO iconInfo = new org.eclipse.swt.graphics.ICONINFO(); if (OS.IsWinCE) { org.eclipse.swt.graphics.Image.GetIconInfo(this, iconInfo); } else { org.eclipse.swt.graphics.OS.GetIconInfo(handle, iconInfo); } int hBitmap = iconInfo.hbmColor; if (hBitmap == 0) hBitmap = iconInfo.hbmMask; org.eclipse.swt.graphics.BITMAP bm = new org.eclipse.swt.graphics.BITMAP(); org.eclipse.swt.graphics.OS.GetObject(hBitmap, BITMAP.sizeof, bm); int imgWidth = bm.bmWidth; int imgHeight = (hBitmap == (iconInfo.hbmMask)) ? (bm.bmHeight) / 2 : bm.bmHeight; int img = 0; int pixels = 0; if ((imgWidth > imgHeight) || ((bm.bmBitsPixel) == 32)) { int hDC = device.internal_new_GC(null); int srcHdc = org.eclipse.swt.graphics.OS.CreateCompatibleDC(hDC); int oldSrcBitmap = org.eclipse.swt.graphics.OS.SelectObject(srcHdc, hBitmap); int memHdc = org.eclipse.swt.graphics.OS.CreateCompatibleDC(hDC); int memDib = org.eclipse.swt.graphics.Image.createDIB(imgWidth, imgHeight, 32); if (memDib == 0) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NO_HANDLES); int oldMemBitmap = org.eclipse.swt.graphics.OS.SelectObject(memHdc, memDib); org.eclipse.swt.graphics.BITMAP dibBM = new org.eclipse.swt.graphics.BITMAP(); org.eclipse.swt.graphics.OS.GetObject(memDib, BITMAP.sizeof, dibBM); org.eclipse.swt.graphics.OS.BitBlt(memHdc, 0, 0, imgWidth, imgHeight, srcHdc, 0, (hBitmap == (iconInfo.hbmMask) ? imgHeight : 0), OS.SRCCOPY); org.eclipse.swt.graphics.OS.SelectObject(memHdc, oldMemBitmap); org.eclipse.swt.graphics.OS.DeleteObject(memHdc); byte[] srcData = new byte[(dibBM.bmWidthBytes) * (dibBM.bmHeight)]; org.eclipse.swt.graphics.OS.MoveMemory(srcData, dibBM.bmBits, srcData.length); org.eclipse.swt.graphics.OS.DeleteObject(memDib); org.eclipse.swt.graphics.OS.SelectObject(srcHdc, iconInfo.hbmMask); if ((bm.bmBitsPixel) != 32) { for (int y = 0, dp = 0; y < imgHeight; ++y) { for (int x = 0; x < imgWidth; ++x) { if ((org.eclipse.swt.graphics.OS.GetPixel(srcHdc, x, y)) != 0) { srcData[(dp + 3)] = ((byte) (0)); } else { srcData[(dp + 3)] = ((byte) (255)); } dp += 4; } } } org.eclipse.swt.graphics.OS.SelectObject(srcHdc, oldSrcBitmap); org.eclipse.swt.graphics.OS.DeleteObject(srcHdc); device.internal_dispose_GC(hDC, null); int hHeap = org.eclipse.swt.graphics.OS.GetProcessHeap(); pixels = org.eclipse.swt.graphics.OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, srcData.length); if (pixels == 0) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NO_HANDLES); org.eclipse.swt.graphics.OS.MoveMemory(pixels, srcData, srcData.length); img = org.eclipse.swt.graphics.Gdip.Bitmap_new(imgWidth, imgHeight, dibBM.bmWidthBytes, Gdip.PixelFormat32bppARGB, pixels); } else { img = org.eclipse.swt.graphics.Gdip.Bitmap_new(handle); } if ((iconInfo.hbmColor) != 0) org.eclipse.swt.graphics.OS.DeleteObject(iconInfo.hbmColor); if ((iconInfo.hbmMask) != 0) org.eclipse.swt.graphics.OS.DeleteObject(iconInfo.hbmMask); return new int[]{ img, pixels }; } default : org.eclipse.swt.graphics.SWT.error(SWT.ERROR_INVALID_IMAGE); } return null; }
void destroyWidget() { org.eclipse.swt.widgets.NSWindow window = this.window; org.eclipse.swt.widgets.Display display = this.display; releaseHandle(); if (window != null) { window.close(); } if ((!(display.isDisposed())) && ((display.getShells().length) == 0)) { display.setMenuBar(null); } }
public void setRedraw(boolean redraw) { checkWidget(); if (redraw) { if ((--(drawCount)) == 0) { if ((redrawWindow) != 0) { int window = paintWindow(); org.eclipse.swt.widgets.OS.gdk_window_hide(redrawWindow); org.eclipse.swt.widgets.OS.gdk_window_destroy(redrawWindow); org.eclipse.swt.widgets.OS.gdk_window_set_events(window, org.eclipse.swt.widgets.OS.gtk_widget_get_events(paintHandle())); redrawWindow = 0; } } } else { if (((drawCount)++) == 0) { if (((org.eclipse.swt.widgets.OS.GTK_WIDGET_FLAGS(handle)) & (OS.GTK_REALIZED)) != 0) { int window = paintWindow(); org.eclipse.swt.widgets.Rectangle rect = getBounds(); org.eclipse.swt.widgets.GdkWindowAttr attributes = new org.eclipse.swt.widgets.GdkWindowAttr(); attributes.width = rect.width; attributes.height = rect.height; attributes.event_mask = OS.GDK_EXPOSURE_MASK; attributes.window_type = OS.GDK_WINDOW_CHILD; redrawWindow = org.eclipse.swt.widgets.OS.gdk_window_new(window, attributes, 0); if ((redrawWindow) != 0) { int mouseMask = (((((((((OS.GDK_BUTTON_PRESS_MASK) | (OS.GDK_BUTTON_RELEASE_MASK)) | (OS.GDK_ENTER_NOTIFY_MASK)) | (OS.GDK_LEAVE_NOTIFY_MASK)) | (OS.GDK_POINTER_MOTION_MASK)) | (OS.GDK_POINTER_MOTION_HINT_MASK)) | (OS.GDK_BUTTON_MOTION_MASK)) | (OS.GDK_BUTTON1_MOTION_MASK)) | (OS.GDK_BUTTON2_MOTION_MASK)) | (OS.GDK_BUTTON3_MOTION_MASK); org.eclipse.swt.widgets.OS.gdk_window_set_events(window, ((org.eclipse.swt.widgets.OS.gdk_window_get_events(window)) & (~mouseMask))); org.eclipse.swt.widgets.OS.gdk_window_set_back_pixmap(redrawWindow, 0, false); org.eclipse.swt.widgets.OS.gdk_window_show(redrawWindow); } } } } }
public boolean setText(java.lang.String html) { checkWidget(); if (html == null) org.eclipse.swt.browser.SWT.error(SWT.ERROR_NULL_ARGUMENT); int[] result = new int[1]; int rc = webBrowser.QueryInterface(nsIWebNavigation.NS_IWEBNAVIGATION_IID, result); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Browser.error(rc); if ((result[0]) == 0) org.eclipse.swt.browser.Browser.error(XPCOM.NS_ERROR_NO_INTERFACE); org.eclipse.swt.browser.nsIWebNavigation webNavigation = new org.eclipse.swt.browser.nsIWebNavigation(result[0]); if ((this.html) != null) { rc = webNavigation.Stop(nsIWebNavigation.STOP_ALL); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Browser.error(rc); } this.html = html; char[] arg = "about:blank".toCharArray(); char[] c = new char[(arg.length) + 1]; java.lang.System.arraycopy(arg, 0, c, 0, arg.length); rc = webNavigation.LoadURI(c, nsIWebNavigation.LOAD_FLAGS_NONE, 0, 0, 0); onFocusGained(null); webNavigation.Release(); return rc == (XPCOM.NS_OK); }
void destroyWidget() { parent.destroyItem(this); super.destroyWidget(); }
public org.eclipse.swt.graphics.GCData getGCData() { if ((handle) == null) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_WIDGET_DISPOSED); org.eclipse.swt.graphics.NSAutoreleasePool pool = checkGC(((org.eclipse.swt.graphics.GC.TRANSFORM) | (org.eclipse.swt.graphics.GC.CLIPPING))); uncheckGC(pool); return data; }
public void getClipping(org.eclipse.swt.graphics.Region region) { if ((handle) == 0) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_GRAPHIC_DISPOSED); if (region == null) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NULL_ARGUMENT); if (region.isDisposed()) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_INVALID_ARGUMENT); int gdipGraphics = data.gdipGraphics; if (gdipGraphics != 0) { int rgn = org.eclipse.swt.graphics.Gdip.Region_new(); org.eclipse.swt.graphics.Gdip.Graphics_GetClip(data.gdipGraphics, rgn); if (org.eclipse.swt.graphics.Gdip.Region_IsInfinite(rgn, gdipGraphics)) { org.eclipse.swt.graphics.Rect rect = new org.eclipse.swt.graphics.Rect(); org.eclipse.swt.graphics.Gdip.Graphics_SetPixelOffsetMode(gdipGraphics, Gdip.PixelOffsetModeNone); org.eclipse.swt.graphics.Gdip.Graphics_GetVisibleClipBounds(gdipGraphics, rect); org.eclipse.swt.graphics.Gdip.Graphics_SetPixelOffsetMode(gdipGraphics, Gdip.PixelOffsetModeHalf); org.eclipse.swt.graphics.OS.SetRectRgn(region.handle, rect.X, rect.Y, ((rect.X) + (rect.Width)), ((rect.Y) + (rect.Height))); } else { int matrix = org.eclipse.swt.graphics.Gdip.Matrix_new(1, 0, 0, 1, 0, 0); int identity = org.eclipse.swt.graphics.Gdip.Matrix_new(1, 0, 0, 1, 0, 0); org.eclipse.swt.graphics.Gdip.Graphics_GetTransform(gdipGraphics, matrix); org.eclipse.swt.graphics.Gdip.Graphics_SetTransform(gdipGraphics, identity); int hRgn = org.eclipse.swt.graphics.Gdip.Region_GetHRGN(rgn, data.gdipGraphics); org.eclipse.swt.graphics.Gdip.Graphics_SetTransform(gdipGraphics, matrix); org.eclipse.swt.graphics.Gdip.Matrix_delete(identity); org.eclipse.swt.graphics.Gdip.Matrix_delete(matrix); if (!(OS.IsWinCE)) { org.eclipse.swt.graphics.POINT pt = new org.eclipse.swt.graphics.POINT(); org.eclipse.swt.graphics.OS.GetWindowOrgEx(handle, pt); org.eclipse.swt.graphics.OS.OffsetRgn(hRgn, pt.x, pt.y); } org.eclipse.swt.graphics.OS.CombineRgn(region.handle, hRgn, 0, OS.RGN_COPY); org.eclipse.swt.graphics.OS.DeleteObject(hRgn); } org.eclipse.swt.graphics.Gdip.Region_delete(rgn); return; } org.eclipse.swt.graphics.POINT pt = new org.eclipse.swt.graphics.POINT(); if (!(OS.IsWinCE)) org.eclipse.swt.graphics.OS.GetWindowOrgEx(handle, pt); int result = org.eclipse.swt.graphics.OS.GetClipRgn(handle, region.handle); if (result != 1) { org.eclipse.swt.graphics.RECT rect = new org.eclipse.swt.graphics.RECT(); org.eclipse.swt.graphics.OS.GetClipBox(handle, rect); org.eclipse.swt.graphics.OS.SetRectRgn(region.handle, rect.left, rect.top, rect.right, rect.bottom); } else { org.eclipse.swt.graphics.OS.OffsetRgn(region.handle, pt.x, pt.y); } if (!(OS.IsWinCE)) { int metaRgn = org.eclipse.swt.graphics.OS.CreateRectRgn(0, 0, 0, 0); if ((org.eclipse.swt.graphics.OS.GetMetaRgn(handle, metaRgn)) != 0) { org.eclipse.swt.graphics.OS.OffsetRgn(metaRgn, pt.x, pt.y); org.eclipse.swt.graphics.OS.CombineRgn(region.handle, metaRgn, region.handle, OS.RGN_AND); } org.eclipse.swt.graphics.OS.DeleteObject(metaRgn); int hwnd = data.hwnd; if ((hwnd != 0) && ((data.ps) != null)) { int sysRgn = org.eclipse.swt.graphics.OS.CreateRectRgn(0, 0, 0, 0); if ((org.eclipse.swt.graphics.OS.GetRandomRgn(handle, sysRgn, OS.SYSRGN)) == 1) { if ((OS.WIN32_VERSION) >= (org.eclipse.swt.graphics.OS.VERSION(4, 10))) { if (((org.eclipse.swt.graphics.OS.GetLayout(handle)) & (OS.LAYOUT_RTL)) != 0) { int nBytes = org.eclipse.swt.graphics.OS.GetRegionData(sysRgn, 0, null); int[] lpRgnData = new int[nBytes / 4]; org.eclipse.swt.graphics.OS.GetRegionData(sysRgn, nBytes, lpRgnData); int newSysRgn = org.eclipse.swt.graphics.OS.ExtCreateRegion(new float[]{ -1, 0, 0, 1, 0, 0 }, nBytes, lpRgnData); org.eclipse.swt.graphics.OS.DeleteObject(sysRgn); sysRgn = newSysRgn; } } if (OS.IsWinNT) { org.eclipse.swt.graphics.OS.MapWindowPoints(0, hwnd, pt, 1); org.eclipse.swt.graphics.OS.OffsetRgn(sysRgn, pt.x, pt.y); } org.eclipse.swt.graphics.OS.CombineRgn(region.handle, sysRgn, region.handle, OS.RGN_AND); } org.eclipse.swt.graphics.OS.DeleteObject(sysRgn); } } }
long callWindowProc(long hwnd, int msg, long wParam, long lParam) { if ((handle) == 0) return 0; boolean redraw = false; switch (msg) { case OS.WM_ERASEBKGND : { if ((findImageControl()) != null) return 0; break; } case OS.WM_HSCROLL : case OS.WM_VSCROLL : { redraw = (((findImageControl()) != null) && (getDrawing())) && (org.eclipse.swt.widgets.OS.IsWindowVisible(handle)); if (redraw) org.eclipse.swt.widgets.OS.DefWindowProc(handle, OS.WM_SETREDRAW, 0, 0); break; } case OS.WM_PAINT : { boolean doubleBuffer = (findImageControl()) != null; boolean drawMessage = false; if ((((style) & (SWT.SINGLE)) != 0) && ((message.length()) > 0)) { if (((!(OS.IsWinCE)) && ((OS.WIN32_VERSION) < (org.eclipse.swt.widgets.OS.VERSION(6, 0)))) || (((style) & (SWT.READ_ONLY)) != 0)) { drawMessage = (hwnd != (org.eclipse.swt.widgets.OS.GetFocus())) && ((org.eclipse.swt.widgets.OS.GetWindowTextLength(handle)) == 0); } } if (doubleBuffer || drawMessage) { long paintDC = 0; org.eclipse.swt.widgets.PAINTSTRUCT ps = new org.eclipse.swt.widgets.PAINTSTRUCT(); paintDC = org.eclipse.swt.widgets.OS.BeginPaint(handle, ps); int width = (ps.right) - (ps.left); int height = (ps.bottom) - (ps.top); if ((width != 0) && (height != 0)) { long hDC = paintDC; long hBitmap = 0; long hOldBitmap = 0; org.eclipse.swt.widgets.POINT lpPoint1 = null; org.eclipse.swt.widgets.POINT lpPoint2 = null; if (doubleBuffer) { hDC = org.eclipse.swt.widgets.OS.CreateCompatibleDC(paintDC); lpPoint1 = new org.eclipse.swt.widgets.POINT(); lpPoint2 = new org.eclipse.swt.widgets.POINT(); org.eclipse.swt.widgets.OS.SetWindowOrgEx(hDC, ps.left, ps.top, lpPoint1); org.eclipse.swt.widgets.OS.SetBrushOrgEx(hDC, ps.left, ps.top, lpPoint2); hBitmap = org.eclipse.swt.widgets.OS.CreateCompatibleBitmap(paintDC, width, height); hOldBitmap = org.eclipse.swt.widgets.OS.SelectObject(hDC, hBitmap); org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); org.eclipse.swt.widgets.OS.SetRect(rect, ps.left, ps.top, ps.right, ps.bottom); drawBackground(hDC, rect); } org.eclipse.swt.widgets.OS.CallWindowProc(org.eclipse.swt.widgets.Text.EditProc, hwnd, OS.WM_PAINT, hDC, lParam); if (drawMessage) { org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); org.eclipse.swt.widgets.OS.GetClientRect(handle, rect); long margins = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.EM_GETMARGINS, 0, 0); rect.left += org.eclipse.swt.widgets.OS.LOWORD(margins); rect.right -= org.eclipse.swt.widgets.OS.HIWORD(margins); if (((style) & (SWT.BORDER)) != 0) { (rect.left)++; (rect.top)++; (rect.right)--; (rect.bottom)--; } org.eclipse.swt.widgets.TCHAR buffer = new org.eclipse.swt.widgets.TCHAR(getCodePage(), message, false); int uFormat = OS.DT_EDITCONTROL; boolean rtl = ((style) & (SWT.RIGHT_TO_LEFT)) != 0; if (rtl) uFormat |= OS.DT_RTLREADING; int alignment = (style) & (((SWT.LEFT) | (SWT.CENTER)) | (SWT.RIGHT)); switch (alignment) { case SWT.LEFT : uFormat |= (rtl) ? OS.DT_RIGHT : OS.DT_LEFT; break; case SWT.CENTER : uFormat |= OS.DT_CENTER; case SWT.RIGHT : uFormat |= (rtl) ? OS.DT_LEFT : OS.DT_RIGHT; break; } long hFont = org.eclipse.swt.widgets.OS.SendMessage(hwnd, OS.WM_GETFONT, 0, 0); long hOldFont = org.eclipse.swt.widgets.OS.SelectObject(hDC, hFont); org.eclipse.swt.widgets.OS.SetTextColor(hDC, org.eclipse.swt.widgets.OS.GetSysColor(OS.COLOR_GRAYTEXT)); org.eclipse.swt.widgets.OS.SetBkMode(hDC, OS.TRANSPARENT); org.eclipse.swt.widgets.OS.DrawText(hDC, buffer, buffer.length(), rect, uFormat); org.eclipse.swt.widgets.OS.SelectObject(hDC, hOldFont); } if (doubleBuffer) { org.eclipse.swt.widgets.OS.SetWindowOrgEx(hDC, lpPoint1.x, lpPoint1.y, null); org.eclipse.swt.widgets.OS.SetBrushOrgEx(hDC, lpPoint2.x, lpPoint2.y, null); org.eclipse.swt.widgets.OS.BitBlt(paintDC, ps.left, ps.top, width, height, hDC, 0, 0, OS.SRCCOPY); org.eclipse.swt.widgets.OS.SelectObject(hDC, hOldBitmap); org.eclipse.swt.widgets.OS.DeleteObject(hBitmap); org.eclipse.swt.widgets.OS.DeleteObject(hDC); } } org.eclipse.swt.widgets.OS.EndPaint(handle, ps); return 0; } break; } } long code = org.eclipse.swt.widgets.OS.CallWindowProc(org.eclipse.swt.widgets.Text.EditProc, hwnd, msg, wParam, lParam); switch (msg) { case OS.WM_HSCROLL : case OS.WM_VSCROLL : { if (redraw) { org.eclipse.swt.widgets.OS.DefWindowProc(handle, OS.WM_SETREDRAW, 1, 0); org.eclipse.swt.widgets.OS.InvalidateRect(handle, null, true); } break; } } return code; }
public org.eclipse.swt.widgets.Point computeSize(int wHint, int hHint, boolean changed) { checkWidget(); int width = 0; int height = 0; int tmInternalLeading = 0; if (wHint == (SWT.DEFAULT)) { int newFont; int oldFont = 0; int hDC = org.eclipse.swt.widgets.OS.GetDC(handle); newFont = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.WM_GETFONT, 0, 0); if (newFont != 0) oldFont = org.eclipse.swt.widgets.OS.SelectObject(hDC, newFont); int count = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.CB_GETCOUNT, 0, 0); org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); int flags = (OS.DT_CALCRECT) | (OS.DT_NOPREFIX); if (((style) & (SWT.READ_ONLY)) == 0) flags |= OS.DT_EDITCONTROL; int length = org.eclipse.swt.widgets.OS.GetWindowTextLength(handle); int cp = getCodePage(); org.eclipse.swt.widgets.TCHAR buffer = new org.eclipse.swt.widgets.TCHAR(cp, (length + 1)); org.eclipse.swt.widgets.OS.GetWindowText(handle, buffer, (length + 1)); org.eclipse.swt.widgets.OS.DrawText(hDC, buffer, length, rect, flags); width = java.lang.Math.max(width, ((rect.right) - (rect.left))); for (int i = 0; i < count; i++) { length = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.CB_GETLBTEXTLEN, i, 0); if (length != (OS.CB_ERR)) { if ((length + 1) > (buffer.length())) buffer = new org.eclipse.swt.widgets.TCHAR(cp, (length + 1)); int result = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.CB_GETLBTEXT, i, buffer); if (result != (OS.CB_ERR)) { org.eclipse.swt.widgets.OS.DrawText(hDC, buffer, length, rect, flags); width = java.lang.Math.max(width, ((rect.right) - (rect.left))); } } } if (((style) & (SWT.READ_ONLY)) != 0) { org.eclipse.swt.widgets.TEXTMETRIC tm = (OS.IsUnicode) ? ((org.eclipse.swt.widgets.TEXTMETRIC) (new org.eclipse.swt.widgets.TEXTMETRICW())) : new org.eclipse.swt.widgets.TEXTMETRICA(); org.eclipse.swt.widgets.OS.GetTextMetrics(hDC, tm); tmInternalLeading = tm.tmInternalLeading; } if (newFont != 0) org.eclipse.swt.widgets.OS.SelectObject(hDC, oldFont); org.eclipse.swt.widgets.OS.ReleaseDC(handle, hDC); } if (hHint == (SWT.DEFAULT)) { if (((style) & (SWT.SIMPLE)) != 0) { int count = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.CB_GETCOUNT, 0, 0); int itemHeight = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.CB_GETITEMHEIGHT, 0, 0); height = count * itemHeight; } } if (width == 0) width = DEFAULT_WIDTH; if (height == 0) height = DEFAULT_HEIGHT; if (wHint != (SWT.DEFAULT)) width = wHint; if (hHint != (SWT.DEFAULT)) height = hHint; if (((style) & (SWT.READ_ONLY)) != 0) { width += tmInternalLeading * 2; } else { int hwndText = org.eclipse.swt.widgets.OS.GetDlgItem(handle, org.eclipse.swt.widgets.Combo.CBID_EDIT); if (hwndText != 0) { int margins = org.eclipse.swt.widgets.OS.SendMessage(hwndText, OS.EM_GETMARGINS, 0, 0); int marginWidth = (margins & 65535) + ((margins >> 16) & 65535); width += marginWidth + 3; } } org.eclipse.swt.widgets.COMBOBOXINFO pcbi = new org.eclipse.swt.widgets.COMBOBOXINFO(); pcbi.cbSize = COMBOBOXINFO.sizeof; if ((((style) & (SWT.SIMPLE)) == 0) && (org.eclipse.swt.widgets.OS.GetComboBoxInfo(handle, pcbi))) { width += (pcbi.itemLeft) + ((pcbi.buttonRight) - (pcbi.buttonLeft)); height = (pcbi.buttonTop) + ((pcbi.buttonBottom) - (pcbi.buttonTop)); } else { int border = org.eclipse.swt.widgets.OS.GetSystemMetrics(OS.SM_CXEDGE); width += (org.eclipse.swt.widgets.OS.GetSystemMetrics(OS.SM_CXVSCROLL)) + (border * 2); int textHeight = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.CB_GETITEMHEIGHT, (-1), 0); if (((style) & (SWT.DROP_DOWN)) != 0) { height = textHeight + 6; } else { height += textHeight + 10; } } return new org.eclipse.swt.widgets.Point(width, height); }
public int ConfirmEx(int parent, int dialogTitle, int text, int buttonFlags, int button0Title, int button1Title, int button2Title, int checkMsg, int checkValue, int _retval) { org.eclipse.swt.browser.Browser browser = getBrowser(parent); int length = org.eclipse.swt.browser.XPCOM.strlen_PRUnichar(dialogTitle); char[] dest = new char[length]; org.eclipse.swt.browser.XPCOM.memmove(dest, dialogTitle, (length * 2)); java.lang.String titleLabel = new java.lang.String(dest); length = org.eclipse.swt.browser.XPCOM.strlen_PRUnichar(text); dest = new char[length]; org.eclipse.swt.browser.XPCOM.memmove(dest, text, (length * 2)); java.lang.String textLabel = new java.lang.String(dest); java.lang.String checkLabel = null; if (checkMsg != 0) { length = org.eclipse.swt.browser.XPCOM.strlen_PRUnichar(checkMsg); dest = new char[length]; org.eclipse.swt.browser.XPCOM.memmove(dest, checkMsg, (length * 2)); checkLabel = new java.lang.String(dest); } java.lang.String button1Label = getLabel(buttonFlags, nsIPromptService.BUTTON_POS_0, button0Title); java.lang.String button2Label = getLabel(buttonFlags, nsIPromptService.BUTTON_POS_1, button0Title); java.lang.String button3Label = getLabel(buttonFlags, nsIPromptService.BUTTON_POS_2, button0Title); org.eclipse.swt.browser.PromptDialog dialog = new org.eclipse.swt.browser.PromptDialog(browser.getShell()); int[] check = new int[1]; int[] result = new int[1]; if (checkValue != 0) org.eclipse.swt.browser.XPCOM.memmove(check, checkValue, 4); dialog.confirmEx(titleLabel, textLabel, checkLabel, button1Label, button2Label, button3Label, check, result); if (checkValue != 0) org.eclipse.swt.browser.XPCOM.memmove(checkValue, check, 4); org.eclipse.swt.browser.XPCOM.memmove(_retval, result, 4); return XPCOM.NS_OK; }
boolean insertText(int id, int sel, int string) { org.eclipse.swt.widgets.NSObject saver = new org.eclipse.swt.widgets.NSObject(string); saver.retain(); try { if (hasKeyboardFocus(id)) { org.eclipse.swt.widgets.Shell s = this.getShell(); org.eclipse.swt.widgets.NSEvent nsEvent = org.eclipse.swt.widgets.NSApplication.sharedApplication().currentEvent(); if (nsEvent != null) { int type = nsEvent.type(); if ((type == (OS.NSKeyDown)) || (type == (OS.NSSystemDefined))) { boolean[] consume = new boolean[1]; if (translateTraversal(nsEvent.keyCode(), nsEvent, consume)) return true; if (isDisposed()) return true; org.eclipse.swt.widgets.NSString str = new org.eclipse.swt.widgets.NSString(string); if (str.isKindOfClass(OS.class_NSAttributedString)) { str = new org.eclipse.swt.widgets.NSAttributedString(string).string(); } int length = ((int) (str.length())); char[] buffer = new char[length]; str.getCharacters(buffer); for (int i = 0; i < (buffer.length); i++) { s.keyInputHappened = true; org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); if ((i == 0) && (type == (OS.NSKeyDown))) setKeyState(event, SWT.KeyDown, nsEvent); event.character = buffer[i]; if (!(sendKeyEvent(SWT.KeyDown, event))) return false; } if (consume[0]) return false; } } if (((state) & (CANVAS)) != 0) return true; } return super.insertText(id, sel, string); } finally { saver.release(); } }
void updateBar(int selection, int minimum, int maximum) { if (((style) & (SWT.INDETERMINATE)) != 0) return; if (((org.eclipse.swt.widgets.OS.GTK_WIDGET_FLAGS(handle)) & (OS.GTK_REALIZED)) == 0) return; double fraction = (minimum == maximum) ? 1 : ((double) (selection - minimum)) / (maximum - minimum); org.eclipse.swt.widgets.OS.gtk_progress_bar_set_fraction(handle, fraction); org.eclipse.swt.widgets.OS.gdk_flush(); int window = paintWindow(); org.eclipse.swt.widgets.OS.gdk_window_process_updates(window, false); }
boolean translateTraversal(int key, org.eclipse.swt.widgets.XKeyEvent xEvent) { int detail = SWT.TRAVERSE_NONE; int code = traversalCode(key, xEvent); boolean all = false; switch (key) { case OS.XK_Escape : case OS.XK_Cancel : { all = true; detail = SWT.TRAVERSE_ESCAPE; break; } case OS.XK_Return : { all = true; detail = SWT.TRAVERSE_RETURN; break; } case OS.XK_Tab : { boolean next = ((xEvent.state) & (OS.ShiftMask)) == 0; switch (xEvent.state) { case OS.ControlMask : case OS.ShiftMask : code |= (SWT.TRAVERSE_TAB_PREVIOUS) | (SWT.TRAVERSE_TAB_NEXT); } detail = (next) ? SWT.TRAVERSE_TAB_NEXT : SWT.TRAVERSE_TAB_PREVIOUS; break; } case OS.XK_Up : case OS.XK_Left : case OS.XK_Down : case OS.XK_Right : { boolean next = (key == (OS.XK_Down)) || (key == (OS.XK_Right)); detail = (next) ? SWT.TRAVERSE_ARROW_NEXT : SWT.TRAVERSE_ARROW_PREVIOUS; break; } case OS.XK_Page_Up : case OS.XK_Page_Down : { all = true; if (((xEvent.state) & (OS.ControlMask)) == 0) return false; detail = (key == (OS.XK_Page_Down)) ? SWT.TRAVERSE_PAGE_NEXT : SWT.TRAVERSE_PAGE_PREVIOUS; break; } default : return false; } org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); event.doit = (code & detail) != 0; event.detail = detail; event.time = xEvent.time; setKeyState(event, xEvent); org.eclipse.swt.widgets.Shell shell = getShell(); org.eclipse.swt.widgets.Control control = this; do { if (control.traverse(event)) return true; if ((!(event.doit)) && (control.hooks(SWT.Traverse))) { return false; } if (control == shell) return false; control = control.parent; } while (all && (control != null) ); return false; }
void sendMouseEvent(int type, int button, int eventPtr) { org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); event.time = org.eclipse.swt.widgets.OS.gdk_event_get_time(eventPtr); event.button = button; if (type == (SWT.MouseMove)) { org.eclipse.swt.widgets.GdkEventMotion gdkEvent = new org.eclipse.swt.widgets.GdkEventMotion(); org.eclipse.swt.widgets.OS.memmove(gdkEvent, eventPtr, GdkEventMotion.sizeof); if ((gdkEvent.is_hint) != 0) { int[] pointer_x = new int[1]; int[] pointer_y = new int[1]; org.eclipse.swt.widgets.OS.gdk_window_get_pointer(gdkEvent.window, pointer_x, pointer_y, null); event.x = pointer_x[0]; event.y = pointer_y[0]; } else { int window = org.eclipse.swt.widgets.OS.GTK_WIDGET_WINDOW(eventHandle()); int[] origin_x = new int[1]; int[] origin_y = new int[1]; org.eclipse.swt.widgets.OS.gdk_window_get_origin(window, origin_x, origin_y); event.x = ((int) ((gdkEvent.x_root) - (origin_x[0]))); event.y = ((int) ((gdkEvent.y_root) - (origin_y[0]))); } } else { double[] root_x = new double[1]; double[] root_y = new double[1]; org.eclipse.swt.widgets.OS.gdk_event_get_root_coords(eventPtr, root_x, root_y); int window = org.eclipse.swt.widgets.OS.GTK_WIDGET_WINDOW(eventHandle()); int[] origin_x = new int[1]; int[] origin_y = new int[1]; org.eclipse.swt.widgets.OS.gdk_window_get_origin(window, origin_x, origin_y); event.x = ((int) ((root_x[0]) - (origin_x[0]))); event.y = ((int) ((root_y[0]) - (origin_y[0]))); } int[] state = new int[1]; org.eclipse.swt.widgets.OS.gdk_event_get_state(eventPtr, state); setInputState(event, state[0]); postEvent(type, event); }
public void setText(java.lang.String string) { checkWidget(); if (string == null) error(SWT.ERROR_NULL_ARGUMENT); if (string.equals(text)) return; text = string; if ((OS.COMCTL32_MAJOR) >= 6) { boolean enabled = org.eclipse.swt.widgets.OS.IsWindowEnabled(handle); org.eclipse.swt.widgets.TCHAR buffer = new org.eclipse.swt.widgets.TCHAR(getCodePage(), string, true); org.eclipse.swt.widgets.OS.SetWindowText(handle, buffer); parse(string); enableWidget(enabled); } else { layout.setText(parse(string)); focusIndex = ((offsets.length) > 0) ? 0 : -1; selection.x = selection.y = -1; int bits = org.eclipse.swt.widgets.OS.GetWindowLong(handle, OS.GWL_STYLE); if ((offsets.length) > 0) { bits |= OS.WS_TABSTOP; } else { bits &= ~(OS.WS_TABSTOP); } org.eclipse.swt.widgets.OS.SetWindowLong(handle, OS.GWL_STYLE, bits); boolean enabled = org.eclipse.swt.widgets.OS.IsWindowEnabled(handle); org.eclipse.swt.widgets.TextStyle linkStyle = new org.eclipse.swt.widgets.TextStyle(null, (enabled ? linkColor : linkDisabledColor), null); linkStyle.underline = true; for (int i = 0; i < (offsets.length); i++) { org.eclipse.swt.widgets.Point point = offsets[i]; layout.setStyle(linkStyle, point.x, point.y); } org.eclipse.swt.widgets.TextStyle mnemonicStyle = new org.eclipse.swt.widgets.TextStyle(null, null, null); mnemonicStyle.underline = true; for (int i = 0; i < (mnemonics.length); i++) { int mnemonic = mnemonics[i]; if (mnemonic != (-1)) { layout.setStyle(mnemonicStyle, mnemonic, mnemonic); } } redraw(); } }
org.eclipse.swt.widgets.LRESULT wmDrawChild(int wParam, int lParam) { if (((style) & (SWT.ARROW)) == 0) return super.wmDrawChild(wParam, lParam); org.eclipse.swt.widgets.DRAWITEMSTRUCT struct = new org.eclipse.swt.widgets.DRAWITEMSTRUCT(); org.eclipse.swt.widgets.OS.MoveMemory(struct, lParam, DRAWITEMSTRUCT.sizeof); org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); org.eclipse.swt.widgets.OS.SetRect(rect, struct.left, struct.top, struct.right, struct.bottom); if (((OS.COMCTL32_MAJOR) >= 6) && (org.eclipse.swt.widgets.OS.IsAppThemed())) { int iStateId = OS.ABS_LEFTNORMAL; switch ((style) & ((((SWT.UP) | (SWT.DOWN)) | (SWT.LEFT)) | (SWT.RIGHT))) { case SWT.UP : iStateId = OS.ABS_UPNORMAL; break; case SWT.DOWN : iStateId = OS.ABS_DOWNNORMAL; break; case SWT.LEFT : iStateId = OS.ABS_LEFTNORMAL; break; case SWT.RIGHT : iStateId = OS.ABS_RIGHTNORMAL; break; } if ((!(OS.IsWinCE)) && ((OS.WIN32_VERSION) >= (org.eclipse.swt.widgets.OS.VERSION(6, 0)))) { if (((style) & (SWT.MIRRORED)) != 0) { if (((style) & ((SWT.LEFT) | (SWT.RIGHT))) != 0) { iStateId = (iStateId == (OS.ABS_RIGHTNORMAL)) ? OS.ABS_LEFTNORMAL : OS.ABS_RIGHTNORMAL; } } } if (!(getEnabled())) iStateId += (OS.ABS_UPDISABLED) - (OS.ABS_UPNORMAL); if (((struct.itemState) & (OS.ODS_SELECTED)) != 0) iStateId += (OS.ABS_UPPRESSED) - (OS.ABS_UPNORMAL); org.eclipse.swt.widgets.OS.DrawThemeBackground(display.hScrollBarTheme(), struct.hDC, OS.SBP_ARROWBTN, iStateId, rect, null); } else { int uState = OS.DFCS_SCROLLLEFT; switch ((style) & ((((SWT.UP) | (SWT.DOWN)) | (SWT.LEFT)) | (SWT.RIGHT))) { case SWT.UP : uState = OS.DFCS_SCROLLUP; break; case SWT.DOWN : uState = OS.DFCS_SCROLLDOWN; break; case SWT.LEFT : uState = OS.DFCS_SCROLLLEFT; break; case SWT.RIGHT : uState = OS.DFCS_SCROLLRIGHT; break; } if (!(getEnabled())) uState |= OS.DFCS_INACTIVE; if (((style) & (SWT.FLAT)) == (SWT.FLAT)) uState |= OS.DFCS_FLAT; if (((struct.itemState) & (OS.ODS_SELECTED)) != 0) uState |= OS.DFCS_PUSHED; org.eclipse.swt.widgets.OS.DrawFrameControl(struct.hDC, rect, OS.DFC_SCROLL, uState); } return null; }
void handleTextChanged(org.eclipse.swt.custom.TextChangedEvent event) { int firstLine = content.getLineAtOffset(lastTextChangeStart); resetCache(firstLine, 0); if ((!(isFixedLineHeight())) && ((topIndex) > firstLine)) { topIndex = firstLine; topIndexY = 0; super.redraw(); } else { int lastLine = firstLine + (lastTextChangeNewLineCount); int firstLineTop = getLinePixel(firstLine); int newLastLineBottom = getLinePixel((lastLine + 1)); if ((lastLineBottom) != newLastLineBottom) { super.redraw(); if (wordWrap) setCaretLocation(); } else { super.redraw(0, firstLineTop, clientAreaWidth, (newLastLineBottom - firstLineTop), false); redrawLinesBullet(renderer.redrawLines); } } renderer.redrawLines = null; updateSelection(lastTextChangeStart, lastTextChangeReplaceCharCount, lastTextChangeNewCharCount); if (((lastTextChangeReplaceLineCount) > 0) || (wordWrap)) { claimBottomFreeSpace(); } if ((lastTextChangeReplaceCharCount) > 0) { claimRightFreeSpace(); } }
public org.eclipse.swt.widgets.Point computeSize(int wHint, int hHint, boolean changed) { checkWidget(); if ((wHint != (SWT.DEFAULT)) && (wHint < 0)) wHint = 0; if ((hHint != (SWT.DEFAULT)) && (hHint < 0)) hHint = 0; int width; int height; if ((OS.COMCTL32_MAJOR) >= 6) { int hDC = org.eclipse.swt.widgets.OS.GetDC(handle); int newFont = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.WM_GETFONT, 0, 0); int oldFont = org.eclipse.swt.widgets.OS.SelectObject(hDC, newFont); org.eclipse.swt.widgets.TCHAR buffer = new org.eclipse.swt.widgets.TCHAR(getCodePage(), parse(text), false); org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); int flags = OS.DT_CALCRECT; boolean wrap = wHint != (SWT.DEFAULT); if (wrap) { flags |= OS.DT_WORDBREAK; rect.right = wHint; } org.eclipse.swt.widgets.OS.DrawText(hDC, buffer, buffer.length(), rect, flags); width = (rect.right) - (rect.left); height = (wrap) ? rect.bottom : org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LM_GETIDEALHEIGHT, 0, 0); if (newFont != 0) org.eclipse.swt.widgets.OS.SelectObject(hDC, oldFont); org.eclipse.swt.widgets.OS.ReleaseDC(handle, hDC); } else { int layoutWidth = layout.getWidth(); if (wHint == 0) { layout.setWidth(1); org.eclipse.swt.widgets.Rectangle rect = layout.getBounds(); width = 0; height = rect.height; } else { layout.setWidth(wHint); org.eclipse.swt.widgets.Rectangle rect = layout.getBounds(); width = rect.width; height = rect.height; } layout.setWidth(layoutWidth); } if (wHint != (SWT.DEFAULT)) width = wHint; if (hHint != (SWT.DEFAULT)) height = hHint; int border = getBorderWidth(); width += border * 2; height += border * 2; return new org.eclipse.swt.widgets.Point(width, height); }
void recreateRenderers() { if ((checkRenderer) != 0) { display.removeWidget(checkRenderer); org.eclipse.swt.widgets.OS.g_object_unref(checkRenderer); checkRenderer = (ownerDraw) ? org.eclipse.swt.widgets.OS.g_object_new(display.gtk_cell_renderer_toggle_get_type(), 0) : org.eclipse.swt.widgets.OS.gtk_cell_renderer_toggle_new(); if ((checkRenderer) == 0) error(SWT.ERROR_NO_HANDLES); org.eclipse.swt.widgets.OS.g_object_ref(checkRenderer); display.addWidget(checkRenderer, this); org.eclipse.swt.widgets.OS.g_signal_connect_closure(checkRenderer, OS.toggled, display.closures[TOGGLED], false); } if ((columnCount) == 0) { createRenderers(org.eclipse.swt.widgets.OS.gtk_tree_view_get_column(handle, 0), Tree.FIRST_COLUMN, true, 0); } else { for (int i = 0; i < (columnCount); i++) { org.eclipse.swt.widgets.TableColumn column = columns[i]; createRenderers(column.handle, column.modelIndex, (i == 0), column.style); } } }
public void setPreferredSize(int width, int height) { checkWidget(); ideal = true; preferredWidth = java.lang.Math.max(width, ((minimumWidth) + (org.eclipse.swt.widgets.CoolItem.MINIMUM_WIDTH))); preferredHeight = height; }
public void dispose() { if (isDisposed()) return; if ((parent) != null) { int[] argList = new int[]{ OS.XmNoverrideRedirect, 0 }; org.eclipse.swt.widgets.OS.XtGetValues(shellHandle, argList, ((argList.length) / 2)); org.eclipse.swt.widgets.Shell activeShell = display.getActiveShell(); if (((argList[1]) != 0) || (activeShell == (this))) { org.eclipse.swt.widgets.Shell shell = parent.getShell(); shell.bringToTop(false); } } super.dispose(); }
static org.eclipse.swt.program.Program getProgram(java.lang.String key) { java.lang.String name = org.eclipse.swt.program.Program.getKeyValue(key, false); if ((name == null) || ((name.length()) == 0)) { name = key; } java.lang.String DEFAULT_COMMAND = "\\shell"; java.lang.String defaultCommand = org.eclipse.swt.program.Program.getKeyValue((key + DEFAULT_COMMAND), true); if ((defaultCommand == null) || ((defaultCommand.length()) == 0)) defaultCommand = "open"; java.lang.String COMMAND = ("\\shell\\" + defaultCommand) + "\\command"; java.lang.String command = org.eclipse.swt.program.Program.getKeyValue((key + COMMAND), true); if ((command == null) || ((command.length()) == 0)) return null; java.lang.String DEFAULT_ICON = "\\DefaultIcon"; java.lang.String iconName = org.eclipse.swt.program.Program.getKeyValue((key + DEFAULT_ICON), true); if ((iconName == null) || ((iconName.length()) == 0)) return null; org.eclipse.swt.program.Program program = new org.eclipse.swt.program.Program(); program.name = name; program.command = command; program.iconName = iconName; return program; }
void update(boolean all) { if (display.inPaint) return; org.eclipse.swt.internal.carbon.OS.HIViewRender(handle); if (isDisposed()) return; org.eclipse.swt.internal.carbon.OS.HIWindowFlush(org.eclipse.swt.internal.carbon.OS.GetControlOwner(handle)); }
static int getDesktop(final org.eclipse.swt.program.Display display) { if (display == null) return org.eclipse.swt.program.Program.DESKTOP_UNKNOWN; java.lang.Integer desktopValue = ((java.lang.Integer) (display.getData(org.eclipse.swt.program.Program.DESKTOP_DATA))); if (desktopValue != null) return desktopValue.intValue(); int desktop = org.eclipse.swt.program.Program.DESKTOP_UNKNOWN; int xDisplay = org.eclipse.swt.program.OS.GDK_DISPLAY(); int rootWindow = org.eclipse.swt.program.OS.XDefaultRootWindow(xDisplay); int[] numProp = new int[1]; int propList = org.eclipse.swt.program.OS.XListProperties(xDisplay, rootWindow, numProp); int[] property = new int[numProp[0]]; if (propList != 0) { org.eclipse.swt.program.OS.memmove(property, propList, ((property.length) * (OS.PTR_SIZEOF))); org.eclipse.swt.program.OS.XFree(propList); } if (desktop == (org.eclipse.swt.program.Program.DESKTOP_UNKNOWN)) { byte[] gnomeName = org.eclipse.swt.program.Converter.wcsToMbcs(null, "_NET_SUPPORTING_WM_CHECK", true); int gnome = org.eclipse.swt.program.OS.XInternAtom(xDisplay, gnomeName, true); if (((gnome != (OS.None)) && ((OS.GTK_VERSION) >= (org.eclipse.swt.program.OS.VERSION(2, 2, 0)))) && (org.eclipse.swt.program.Program.gnome_init())) { desktop = org.eclipse.swt.program.Program.DESKTOP_GNOME; int icon_theme = org.eclipse.swt.program.GNOME.gnome_icon_theme_new(); display.setData(org.eclipse.swt.program.Program.ICON_THEME_DATA, new org.eclipse.swt.program.LONG(icon_theme)); display.addListener(SWT.Dispose, new org.eclipse.swt.program.Listener() { public void handleEvent(org.eclipse.swt.program.Event event) { org.eclipse.swt.program.LONG gnomeIconTheme = ((org.eclipse.swt.program.LONG) (display.getData(org.eclipse.swt.program.Program.ICON_THEME_DATA))); if (gnomeIconTheme == null) return; display.setData(org.eclipse.swt.program.Program.ICON_THEME_DATA, null); if ((gnomeIconTheme.value) != 0) org.eclipse.swt.program.OS.g_object_unref(gnomeIconTheme.value); } }); byte[] buffer; int flags = OS.RTLD_LAZY; if (OS.IsAIX) { buffer = org.eclipse.swt.program.Converter.wcsToMbcs(null, "libgio-2.0.a(libgio-2.0.so.0)", true); flags |= OS.RTLD_MEMBER; } else if (OS.IsHPUX) { buffer = org.eclipse.swt.program.Converter.wcsToMbcs(null, "libgio-2.0.so", true); } else { buffer = org.eclipse.swt.program.Converter.wcsToMbcs(null, "libgio-2.0.so.0", true); } int libgio = org.eclipse.swt.program.OS.dlopen(buffer, flags); if (libgio != 0) { buffer = org.eclipse.swt.program.Converter.wcsToMbcs(null, "g_app_info_launch_default_for_uri", true); int g_app_info_launch_default_for_uri = org.eclipse.swt.program.OS.dlsym(libgio, buffer); if (g_app_info_launch_default_for_uri != 0) { desktop = org.eclipse.swt.program.Program.DESKTOP_GIO; } org.eclipse.swt.program.OS.dlclose(libgio); } else { buffer = org.eclipse.swt.program.Converter.wcsToMbcs(null, "libgnomevfs-2.so.0", true); int libgnomevfs = org.eclipse.swt.program.OS.dlopen(buffer, OS.RTLD_LAZY); if (libgnomevfs != 0) { buffer = org.eclipse.swt.program.Converter.wcsToMbcs(null, "gnome_vfs_url_show", true); int gnome_vfs_url_show = org.eclipse.swt.program.OS.dlsym(libgnomevfs, buffer); if (gnome_vfs_url_show != 0) { desktop = org.eclipse.swt.program.Program.DESKTOP_GNOME_24; } org.eclipse.swt.program.OS.dlclose(libgnomevfs); } } } } if (desktop == (org.eclipse.swt.program.Program.DESKTOP_UNKNOWN)) { byte[] cdeName = org.eclipse.swt.program.Converter.wcsToMbcs(null, "_DT_SM_PREFERENCES", true); int cde = org.eclipse.swt.program.OS.XInternAtom(xDisplay, cdeName, true); for (int index = 0; (desktop == (org.eclipse.swt.program.Program.DESKTOP_UNKNOWN)) && (index < (property.length)); index++) { if ((property[index]) == (OS.None)) continue; if (((property[index]) == cde) && (org.eclipse.swt.program.Program.cde_init(display))) desktop = org.eclipse.swt.program.Program.DESKTOP_CDE; } } display.setData(org.eclipse.swt.program.Program.DESKTOP_DATA, new java.lang.Integer(desktop)); return desktop; }
void _addListener(int eventType, org.eclipse.swt.widgets.Listener listener) { super._addListener(eventType, listener); switch (eventType) { case SWT.DragDetect : { if (((state) & (DRAG_DETECT)) != 0) { int bits = org.eclipse.swt.widgets.OS.GetWindowLong(handle, OS.GWL_STYLE); bits &= ~(OS.TVS_DISABLEDRAGDROP); org.eclipse.swt.widgets.OS.SetWindowLong(handle, OS.GWL_STYLE, bits); } break; } case SWT.MeasureItem : case SWT.EraseItem : case SWT.PaintItem : { customDraw = true; style |= SWT.DOUBLE_BUFFERED; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_SETSCROLLTIME, 0, 0); int bits = org.eclipse.swt.widgets.OS.GetWindowLong(handle, OS.GWL_STYLE); bits |= OS.TVS_NOTOOLTIPS; if (eventType == (SWT.MeasureItem)) bits |= OS.TVS_NOHSCROLL; if (((style) & (SWT.FULL_SELECTION)) != 0) { if (eventType != (SWT.MeasureItem)) { if (!(explorerTheme)) bits &= ~(OS.TVS_FULLROWSELECT); } } if (bits != (org.eclipse.swt.widgets.OS.GetWindowLong(handle, OS.GWL_STYLE))) { org.eclipse.swt.widgets.OS.SetWindowLong(handle, OS.GWL_STYLE, bits); org.eclipse.swt.widgets.OS.InvalidateRect(handle, null, true); int count = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETCOUNT, 0, 0); if ((count != 0) && ((bits & (OS.TVS_NOHSCROLL)) != 0)) { if (!(OS.IsWinCE)) org.eclipse.swt.widgets.OS.ShowScrollBar(handle, OS.SB_HORZ, false); } } break; } } }
org.eclipse.swt.graphics.TextLayout.StyleItem[] merge(int items, int itemCount) { int count = 0; int start = 0; int end = segmentsText.length(); int itemIndex = 0; int styleIndex = 0; org.eclipse.swt.graphics.TextLayout.StyleItem[] runs = new org.eclipse.swt.graphics.TextLayout.StyleItem[itemCount + (styles.length)]; org.eclipse.swt.graphics.SCRIPT_ITEM scriptItem = new org.eclipse.swt.graphics.SCRIPT_ITEM(); boolean linkBefore = false; while (start < end) { org.eclipse.swt.graphics.TextLayout.StyleItem item = new org.eclipse.swt.graphics.TextLayout.StyleItem(); item.start = start; item.style = styles[styleIndex].style; runs[(count++)] = item; org.eclipse.swt.graphics.OS.MoveMemory(scriptItem, (items + (itemIndex * (SCRIPT_ITEM.sizeof))), SCRIPT_ITEM.sizeof); item.analysis = scriptItem.a; if (linkBefore) { item.analysis.fLinkBefore = true; linkBefore = false; } scriptItem.a = new org.eclipse.swt.graphics.SCRIPT_ANALYSIS(); org.eclipse.swt.graphics.OS.MoveMemory(scriptItem, (items + ((itemIndex + 1) * (SCRIPT_ITEM.sizeof))), SCRIPT_ITEM.sizeof); int itemLimit = scriptItem.iCharPos; int styleLimit = translateOffset(styles[(styleIndex + 1)].start); if (styleLimit <= itemLimit) { styleIndex++; start = styleLimit; if (((start < itemLimit) && (0 < start)) && (start < end)) { char pChar = segmentsText.charAt((start - 1)); char tChar = segmentsText.charAt(start); if ((!(org.eclipse.swt.graphics.Compatibility.isWhitespace(pChar))) && (!(org.eclipse.swt.graphics.Compatibility.isWhitespace(tChar)))) { item.analysis.fLinkAfter = true; linkBefore = true; } } } if (itemLimit <= styleLimit) { itemIndex++; start = itemLimit; } item.length = start - (item.start); } org.eclipse.swt.graphics.TextLayout.StyleItem item = new org.eclipse.swt.graphics.TextLayout.StyleItem(); item.start = end; org.eclipse.swt.graphics.OS.MoveMemory(scriptItem, (items + (itemCount * (SCRIPT_ITEM.sizeof))), SCRIPT_ITEM.sizeof); item.analysis = scriptItem.a; runs[(count++)] = item; if ((runs.length) != count) { org.eclipse.swt.graphics.TextLayout.StyleItem[] result = new org.eclipse.swt.graphics.TextLayout.StyleItem[count]; java.lang.System.arraycopy(runs, 0, result, 0, count); return result; } return runs; }
boolean forceFocus(int focusHandle) { if ((focusHandle != 0) && (org.eclipse.swt.widgets.OS.GTK_WIDGET_HAS_FOCUS(focusHandle))) return true; org.eclipse.swt.widgets.OS.gtk_widget_realize(focusHandle); org.eclipse.swt.widgets.OS.gtk_widget_grab_focus(focusHandle); org.eclipse.swt.widgets.Shell shell = getShell(); int shellHandle = shell.shellHandle; int handle = org.eclipse.swt.widgets.OS.gtk_window_get_focus(shellHandle); while (handle != 0) { if (handle == focusHandle) return true; org.eclipse.swt.widgets.Widget widget = display.getWidget(handle); if ((widget != null) && (widget instanceof org.eclipse.swt.widgets.Control)) { return widget == (this); } handle = org.eclipse.swt.widgets.OS.gtk_widget_get_parent(handle); } return false; }
void setZOrder(org.eclipse.swt.widgets.Control sibling, boolean above, boolean fixChildren) { int topHandle = topHandle(); int siblingHandle = (sibling != null) ? sibling.topHandle() : 0; int window = org.eclipse.swt.widgets.OS.GTK_WIDGET_WINDOW(topHandle); if (above) { if (window != 0) org.eclipse.swt.widgets.OS.gdk_window_raise(window); if (fixChildren) parent.moveAbove(topHandle, siblingHandle); } else { if (window != 0) org.eclipse.swt.widgets.OS.gdk_window_lower(window); if (fixChildren) parent.moveBelow(topHandle, siblingHandle); } if (fixChildren && ((parent.parentingHandle()) == (parent.fixedHandle))) { window = org.eclipse.swt.widgets.OS.GTK_WIDGET_WINDOW(parent.handle); if (window != 0) org.eclipse.swt.widgets.OS.gdk_window_lower(window); } }
boolean hasFocus() { org.eclipse.swt.widgets.NSWindow window = view.window(); if (window.isKeyWindow()) { org.eclipse.swt.widgets.NSResponder nsResponder = window.firstResponder(); if ((nsResponder.id) == (focusView().id)) return true; org.eclipse.swt.widgets.NSText fieldEditor = window.fieldEditor(false, null); if ((nsResponder.isKindOfClass(OS.class_NSTextView)) && (fieldEditor != null)) { org.eclipse.swt.widgets.id delegate = fieldEditor.delegate(); if (delegate != null) { return (delegate.id) == (focusView().id); } } } return false; }
boolean hasCursor() { org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); if (!(org.eclipse.swt.widgets.OS.GetClientRect(handle, rect))) return false; if ((org.eclipse.swt.widgets.OS.MapWindowPoints(handle, 0, rect, 2)) == 0) return false; org.eclipse.swt.widgets.POINT pt = new org.eclipse.swt.widgets.POINT(); return (org.eclipse.swt.widgets.OS.GetCursorPos(pt)) && (org.eclipse.swt.widgets.OS.PtInRect(rect, pt)); }
public void handleEvent(org.eclipse.swt.browser.Event e) { switch (e.type) { case SWT.Dispose : { if (ignoreDispose) { ignoreDispose = false; break; } ignoreDispose = true; notifyListeners(e.type, e); e.type = SWT.NONE; org.eclipse.swt.browser.Shell shell = getShell(); shell.removeListener(SWT.Resize, this); shell.removeListener(SWT.Show, this); shell.removeListener(SWT.Hide, this); org.eclipse.swt.browser.Control c = this; do { c.removeListener(SWT.Show, this); c.removeListener(SWT.Hide, this); c = c.getParent(); } while (c != shell ); e.display.setData(org.eclipse.swt.browser.Browser.ADD_WIDGET_KEY, new java.lang.Object[]{ new java.lang.Integer(webViewHandle), null }); org.eclipse.swt.browser.WebKit.objc_msgSend(webView, WebKit.S_setFrameLoadDelegate, 0); org.eclipse.swt.browser.WebKit.objc_msgSend(webView, WebKit.S_setResourceLoadDelegate, 0); org.eclipse.swt.browser.WebKit.objc_msgSend(webView, WebKit.S_setUIDelegate, 0); org.eclipse.swt.browser.WebKit.objc_msgSend(webView, WebKit.S_setPolicyDelegate, 0); org.eclipse.swt.browser.WebKit.objc_msgSend(notificationCenter, WebKit.S_removeObserver, delegate); org.eclipse.swt.browser.WebKit.objc_msgSend(delegate, WebKit.S_release); html = null; break; } case SWT.Hide : { org.eclipse.swt.browser.CGRect bounds = new org.eclipse.swt.browser.CGRect(); bounds.x = bounds.y = -(org.eclipse.swt.browser.Browser.MIN_SIZE); bounds.width = bounds.height = org.eclipse.swt.browser.Browser.MIN_SIZE; org.eclipse.swt.browser.OS.HIViewSetFrame(webViewHandle, bounds); break; } case SWT.Show : { org.eclipse.swt.browser.Shell shell = getShell(); org.eclipse.swt.browser.Composite parent = this; while ((parent != shell) && ((parent.getVisible()) || (parent == (e.widget)))) { parent = parent.getParent(); } if (!((parent.getVisible()) || (parent == (e.widget)))) return; org.eclipse.swt.browser.CGRect bounds = new org.eclipse.swt.browser.CGRect(); if (OS.HIVIEW) { org.eclipse.swt.browser.OS.HIViewGetBounds(handle, bounds); int[] contentView = new int[1]; org.eclipse.swt.browser.OS.HIViewFindByID(org.eclipse.swt.browser.OS.HIViewGetRoot(org.eclipse.swt.browser.OS.GetControlOwner(handle)), org.eclipse.swt.browser.OS.kHIViewWindowContentID(), contentView); org.eclipse.swt.browser.OS.HIViewConvertRect(bounds, handle, contentView[0]); } else { org.eclipse.swt.browser.OS.HIViewGetFrame(handle, bounds); } if ((bounds.width) <= (org.eclipse.swt.browser.Browser.MIN_SIZE)) bounds.width = org.eclipse.swt.browser.Browser.MIN_SIZE; if ((bounds.height) <= (org.eclipse.swt.browser.Browser.MIN_SIZE)) bounds.height = org.eclipse.swt.browser.Browser.MIN_SIZE; org.eclipse.swt.browser.OS.HIViewSetFrame(webViewHandle, bounds); break; } case SWT.Resize : { if (!(isVisible())) return; org.eclipse.swt.browser.CGRect bounds = new org.eclipse.swt.browser.CGRect(); if (OS.HIVIEW) { org.eclipse.swt.browser.OS.HIViewGetBounds(handle, bounds); int[] contentView = new int[1]; org.eclipse.swt.browser.OS.HIViewFindByID(org.eclipse.swt.browser.OS.HIViewGetRoot(org.eclipse.swt.browser.OS.GetControlOwner(handle)), org.eclipse.swt.browser.OS.kHIViewWindowContentID(), contentView); org.eclipse.swt.browser.OS.HIViewConvertRect(bounds, handle, contentView[0]); } else { org.eclipse.swt.browser.OS.HIViewGetFrame(handle, bounds); } if ((bounds.width) <= (org.eclipse.swt.browser.Browser.MIN_SIZE)) bounds.width = org.eclipse.swt.browser.Browser.MIN_SIZE; if ((bounds.height) <= (org.eclipse.swt.browser.Browser.MIN_SIZE)) bounds.height = org.eclipse.swt.browser.Browser.MIN_SIZE; if ((e.widget) == (getShell())) { (bounds.x)++; org.eclipse.swt.browser.OS.HIViewSetFrame(webViewHandle, bounds); (bounds.x)--; } org.eclipse.swt.browser.OS.HIViewSetFrame(webViewHandle, bounds); break; } } }
public org.eclipse.swt.widgets.Point computeSize(int wHint, int hHint, boolean changed) { checkWidget(); if ((wHint != (SWT.DEFAULT)) && (wHint < 0)) wHint = 0; if ((hHint != (SWT.DEFAULT)) && (hHint < 0)) hHint = 0; if (((style) & (SWT.SEPARATOR)) != 0) { if (((style) & (SWT.HORIZONTAL)) != 0) { if (wHint == (SWT.DEFAULT)) wHint = DEFAULT_WIDTH; } else { if (hHint == (SWT.DEFAULT)) hHint = DEFAULT_HEIGHT; } } boolean fixWrap = ((labelHandle) != 0) && (((style) & (SWT.WRAP)) != 0); if (fixWrap || ((frameHandle) != 0)) forceResize(); int[] labelWidth = new int[1]; int[] labelHeight = new int[1]; if (fixWrap) { org.eclipse.swt.widgets.OS.gtk_widget_get_size_request(labelHandle, labelWidth, labelHeight); org.eclipse.swt.widgets.OS.gtk_widget_set_size_request(labelHandle, wHint, hHint); } org.eclipse.swt.widgets.Point size; if ((frameHandle) != 0) { int[] reqWidth = new int[1]; int[] reqHeight = new int[1]; org.eclipse.swt.widgets.OS.gtk_widget_get_size_request(handle, reqWidth, reqHeight); org.eclipse.swt.widgets.OS.gtk_widget_set_size_request(handle, wHint, hHint); size = computeNativeSize(frameHandle, (-1), (-1), changed); org.eclipse.swt.widgets.OS.gtk_widget_set_size_request(handle, reqWidth[0], reqHeight[0]); } else { size = computeNativeSize(handle, wHint, hHint, changed); } if (fixWrap) { org.eclipse.swt.widgets.OS.gtk_widget_set_size_request(labelHandle, labelWidth[0], labelHeight[0]); } if ((hHint == (SWT.DEFAULT)) && ((labelHandle) != 0)) { int layout = org.eclipse.swt.widgets.OS.gtk_label_get_layout(labelHandle); int context = org.eclipse.swt.widgets.OS.pango_layout_get_context(layout); int lang = org.eclipse.swt.widgets.OS.pango_context_get_language(context); int font = getFontDescription(); int metrics = org.eclipse.swt.widgets.OS.pango_context_get_metrics(context, font, lang); int ascent = org.eclipse.swt.widgets.OS.PANGO_PIXELS(org.eclipse.swt.widgets.OS.pango_font_metrics_get_ascent(metrics)); int descent = org.eclipse.swt.widgets.OS.PANGO_PIXELS(org.eclipse.swt.widgets.OS.pango_font_metrics_get_descent(metrics)); org.eclipse.swt.widgets.OS.pango_font_metrics_unref(metrics); int fontHeight = ascent + descent; int[] buffer = new int[1]; org.eclipse.swt.widgets.OS.g_object_get(labelHandle, OS.ypad, buffer, 0); fontHeight += 2 * (buffer[0]); if ((frameHandle) != 0) { int style = org.eclipse.swt.widgets.OS.gtk_widget_get_style(frameHandle); fontHeight += 2 * (org.eclipse.swt.widgets.OS.gtk_style_get_ythickness(style)); fontHeight += 2 * (org.eclipse.swt.widgets.OS.gtk_container_get_border_width(frameHandle)); } size.y = java.lang.Math.max(size.y, fontHeight); } return size; }
public void create(org.eclipse.swt.browser.Composite parent, int style) { delegate = new org.eclipse.swt.browser.MozillaDelegate(browser); org.eclipse.swt.browser.Display display = parent.getDisplay(); int[] result = new int[1]; if (!(org.eclipse.swt.browser.Mozilla.Initialized)) { boolean initLoaded = false; boolean IsXULRunner = false; java.lang.String greInitialized = java.lang.System.getProperty(org.eclipse.swt.browser.Mozilla.GRE_INITIALIZED); if ("true".equals(greInitialized)) { org.eclipse.swt.browser.Mozilla.Initialized = true; } java.lang.String mozillaPath = java.lang.System.getProperty(org.eclipse.swt.browser.Mozilla.XULRUNNER_PATH); if (mozillaPath == null) { try { java.lang.String libName = delegate.getSWTInitLibraryName(); org.eclipse.swt.browser.Library.loadLibrary(libName); initLoaded = true; } catch (java.lang.UnsatisfiedLinkError e) { } } else { mozillaPath += (org.eclipse.swt.browser.Mozilla.SEPARATOR_OS) + (delegate.getLibraryName()); IsXULRunner = true; } if (initLoaded) { org.eclipse.swt.browser.GREVersionRange range = new org.eclipse.swt.browser.GREVersionRange(); byte[] bytes = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.GRERANGE_LOWER, true); int lower = org.eclipse.swt.browser.C.malloc(bytes.length); org.eclipse.swt.browser.C.memmove(lower, bytes, bytes.length); range.lower = lower; range.lowerInclusive = org.eclipse.swt.browser.Mozilla.LowerRangeInclusive; bytes = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.GRERANGE_UPPER, true); int upper = org.eclipse.swt.browser.C.malloc(bytes.length); org.eclipse.swt.browser.C.memmove(upper, bytes, bytes.length); range.upper = upper; range.upperInclusive = org.eclipse.swt.browser.Mozilla.UpperRangeInclusive; int length = XPCOMInit.PATH_MAX; int greBuffer = org.eclipse.swt.browser.C.malloc(length); int propertiesPtr = org.eclipse.swt.browser.C.malloc((2 * (C.PTR_SIZEOF))); int rc = org.eclipse.swt.browser.XPCOMInit.GRE_GetGREPathWithProperties(range, 1, propertiesPtr, 0, greBuffer, length); if (rc != (XPCOM.NS_OK)) { org.eclipse.swt.browser.C.free(lower); bytes = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.GRERANGE_LOWER_FALLBACK, true); lower = org.eclipse.swt.browser.C.malloc(bytes.length); org.eclipse.swt.browser.C.memmove(lower, bytes, bytes.length); range.lower = lower; rc = org.eclipse.swt.browser.XPCOMInit.GRE_GetGREPathWithProperties(range, 1, propertiesPtr, 0, greBuffer, length); } org.eclipse.swt.browser.C.free(lower); org.eclipse.swt.browser.C.free(upper); org.eclipse.swt.browser.C.free(propertiesPtr); if (rc == (XPCOM.NS_OK)) { length = org.eclipse.swt.browser.C.strlen(greBuffer); bytes = new byte[length]; org.eclipse.swt.browser.C.memmove(bytes, greBuffer, length); mozillaPath = new java.lang.String(org.eclipse.swt.browser.MozillaDelegate.mbcsToWcs(null, bytes)); IsXULRunner = (mozillaPath.length()) > 0; if (IsXULRunner) { byte[] path = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, mozillaPath, true); rc = org.eclipse.swt.browser.XPCOMInit.XPCOMGlueStartup(path); if (rc != (XPCOM.NS_OK)) { IsXULRunner = false; mozillaPath = mozillaPath.substring(0, mozillaPath.lastIndexOf(org.eclipse.swt.browser.Mozilla.SEPARATOR_OS)); if (Device.DEBUG) java.lang.System.out.println(("cannot use detected XULRunner: " + mozillaPath)); } else { org.eclipse.swt.browser.Mozilla.XPCOMInitWasGlued = true; } } } org.eclipse.swt.browser.C.free(greBuffer); } if (IsXULRunner) { if (Device.DEBUG) java.lang.System.out.println(("XULRunner path: " + mozillaPath)); try { org.eclipse.swt.browser.Library.loadLibrary("swt-xulrunner"); } catch (java.lang.UnsatisfiedLinkError e) { org.eclipse.swt.browser.SWT.error(SWT.ERROR_NO_HANDLES, e); } byte[] path = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, mozillaPath, true); int rc = org.eclipse.swt.browser.XPCOM.XPCOMGlueStartup(path); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } org.eclipse.swt.browser.Mozilla.XPCOMWasGlued = true; mozillaPath = mozillaPath.substring(0, mozillaPath.lastIndexOf(org.eclipse.swt.browser.Mozilla.SEPARATOR_OS)); } else { if ((style & (SWT.MOZILLA)) != 0) { browser.dispose(); java.lang.String errorString = ((mozillaPath != null) && ((mozillaPath.length()) > 0)) ? (" [Failed to use detected XULRunner: " + mozillaPath) + "]" : " [Could not detect registered XULRunner to use]"; org.eclipse.swt.browser.SWT.error(SWT.ERROR_NO_HANDLES, null, errorString); } int ptr = org.eclipse.swt.browser.C.getenv(org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.MOZILLA_FIVE_HOME, true)); if (ptr != 0) { int length = org.eclipse.swt.browser.C.strlen(ptr); byte[] buffer = new byte[length]; org.eclipse.swt.browser.C.memmove(buffer, ptr, length); mozillaPath = new java.lang.String(org.eclipse.swt.browser.MozillaDelegate.mbcsToWcs(null, buffer)); } else { browser.dispose(); org.eclipse.swt.browser.SWT.error(SWT.ERROR_NO_HANDLES, null, " [Unknown Mozilla path (MOZILLA_FIVE_HOME not set)]"); } if (Device.DEBUG) java.lang.System.out.println(("Mozilla path: " + mozillaPath)); if (org.eclipse.swt.browser.Compatibility.fileExists(mozillaPath, "components/libwidget_gtk.so")) { browser.dispose(); org.eclipse.swt.browser.SWT.error(SWT.ERROR_NO_HANDLES, null, " [Mozilla GTK2 required (GTK1.2 detected)]"); } try { org.eclipse.swt.browser.Library.loadLibrary("swt-mozilla"); } catch (java.lang.UnsatisfiedLinkError e) { try { org.eclipse.swt.browser.Library.loadLibrary("swt-mozilla-gcc3"); } catch (java.lang.UnsatisfiedLinkError ex) { browser.dispose(); org.eclipse.swt.browser.SWT.error(SWT.ERROR_NO_HANDLES, e, ((" [MOZILLA_FIVE_HOME='" + mozillaPath) + "']")); } } } if (!(org.eclipse.swt.browser.Mozilla.Initialized)) { int[] retVal = new int[1]; org.eclipse.swt.browser.nsEmbedString pathString = new org.eclipse.swt.browser.nsEmbedString(mozillaPath); int rc = org.eclipse.swt.browser.XPCOM.NS_NewLocalFile(pathString.getAddress(), true, retVal); pathString.dispose(); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((retVal[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_ERROR_NULL_POINTER); } org.eclipse.swt.browser.Mozilla.LocationProvider = new org.eclipse.swt.browser.AppFileLocProvider(mozillaPath); org.eclipse.swt.browser.Mozilla.LocationProvider.AddRef(); org.eclipse.swt.browser.nsIFile localFile = new org.eclipse.swt.browser.nsILocalFile(retVal[0]); rc = org.eclipse.swt.browser.XPCOM.NS_InitXPCOM2(0, localFile.getAddress(), org.eclipse.swt.browser.Mozilla.LocationProvider.getAddress()); localFile.Release(); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.SWT.error(SWT.ERROR_NO_HANDLES, null, ((((" [MOZILLA_FIVE_HOME may not point at an embeddable GRE] [NS_InitEmbedding " + mozillaPath) + " error ") + rc) + "]")); } java.lang.System.setProperty(org.eclipse.swt.browser.Mozilla.GRE_INITIALIZED, "true"); if (IsXULRunner) { java.lang.System.setProperty(org.eclipse.swt.browser.Mozilla.XULRUNNER_PATH, mozillaPath); } } if (IsXULRunner) { try { java.lang.Class clazz = java.lang.Class.forName("org.mozilla.xpcom.Mozilla"); java.lang.reflect.Method method = clazz.getMethod("getInstance", new java.lang.Class[0]); java.lang.Object mozilla = method.invoke(null, new java.lang.Object[0]); method = clazz.getMethod("getComponentManager", new java.lang.Class[0]); try { method.invoke(mozilla, new java.lang.Object[0]); } catch (java.lang.reflect.InvocationTargetException e) { java.lang.Class fileClass = java.lang.Class.forName("java.io.File"); method = clazz.getMethod("initialize", new java.lang.Class[]{ fileClass }); java.lang.reflect.Constructor constructor = fileClass.getDeclaredConstructor(new java.lang.Class[]{ java.lang.String.class }); java.lang.Object argument = constructor.newInstance(new java.lang.Object[]{ mozillaPath }); method.invoke(mozilla, new java.lang.Object[]{ argument }); } } catch (java.lang.ClassNotFoundException e) { } catch (java.lang.NoSuchMethodException e) { } catch (java.lang.IllegalArgumentException e) { } catch (java.lang.IllegalAccessException e) { } catch (java.lang.reflect.InvocationTargetException e) { } catch (java.lang.InstantiationException e) { } } int rc = org.eclipse.swt.browser.XPCOM.NS_GetComponentManager(result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } org.eclipse.swt.browser.nsIComponentManager componentManager = new org.eclipse.swt.browser.nsIComponentManager(result[0]); result[0] = 0; if (delegate.needsSpinup()) { rc = componentManager.CreateInstance(XPCOM.NS_APPSHELL_CID, 0, nsIAppShell.NS_IAPPSHELL_IID, result); if (rc != (XPCOM.NS_ERROR_NO_INTERFACE)) { if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } org.eclipse.swt.browser.Mozilla.AppShell = new org.eclipse.swt.browser.nsIAppShell(result[0]); rc = org.eclipse.swt.browser.Mozilla.AppShell.Create(0, null); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } rc = org.eclipse.swt.browser.Mozilla.AppShell.Spinup(); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } } result[0] = 0; } org.eclipse.swt.browser.Mozilla.WindowCreator = new org.eclipse.swt.browser.WindowCreator2(); org.eclipse.swt.browser.Mozilla.WindowCreator.AddRef(); rc = org.eclipse.swt.browser.XPCOM.NS_GetServiceManager(result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } org.eclipse.swt.browser.nsIServiceManager serviceManager = new org.eclipse.swt.browser.nsIServiceManager(result[0]); result[0] = 0; byte[] aContractID = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_WINDOWWATCHER_CONTRACTID, true); rc = serviceManager.GetServiceByContractID(aContractID, nsIWindowWatcher.NS_IWINDOWWATCHER_IID, result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } org.eclipse.swt.browser.nsIWindowWatcher windowWatcher = new org.eclipse.swt.browser.nsIWindowWatcher(result[0]); result[0] = 0; rc = windowWatcher.SetWindowCreator(org.eclipse.swt.browser.Mozilla.WindowCreator.getAddress()); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } windowWatcher.Release(); if ((org.eclipse.swt.browser.Mozilla.LocationProvider) != null) { byte[] buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_DIRECTORYSERVICE_CONTRACTID, true); rc = serviceManager.GetServiceByContractID(buffer, nsIDirectoryService.NS_IDIRECTORYSERVICE_IID, result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } org.eclipse.swt.browser.nsIDirectoryService directoryService = new org.eclipse.swt.browser.nsIDirectoryService(result[0]); result[0] = 0; rc = directoryService.QueryInterface(nsIProperties.NS_IPROPERTIES_IID, result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } directoryService.Release(); org.eclipse.swt.browser.nsIProperties properties = new org.eclipse.swt.browser.nsIProperties(result[0]); result[0] = 0; buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_APP_APPLICATION_REGISTRY_DIR, true); rc = properties.Get(buffer, nsIFile.NS_IFILE_IID, result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } properties.Release(); org.eclipse.swt.browser.nsIFile profileDir = new org.eclipse.swt.browser.nsIFile(result[0]); result[0] = 0; int path = org.eclipse.swt.browser.XPCOM.nsEmbedCString_new(); rc = profileDir.GetNativePath(path); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } int length = org.eclipse.swt.browser.XPCOM.nsEmbedCString_Length(path); int ptr = org.eclipse.swt.browser.XPCOM.nsEmbedCString_get(path); buffer = new byte[length]; org.eclipse.swt.browser.XPCOM.memmove(buffer, ptr, length); java.lang.String profilePath = (new java.lang.String(org.eclipse.swt.browser.MozillaDelegate.mbcsToWcs(null, buffer))) + (org.eclipse.swt.browser.Mozilla.PROFILE_DIR); org.eclipse.swt.browser.Mozilla.LocationProvider.setProfilePath(profilePath); org.eclipse.swt.browser.XPCOM.nsEmbedCString_delete(path); profileDir.Release(); buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_OBSERVER_CONTRACTID, true); rc = serviceManager.GetServiceByContractID(buffer, nsIObserverService.NS_IOBSERVERSERVICE_IID, result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } org.eclipse.swt.browser.nsIObserverService observerService = new org.eclipse.swt.browser.nsIObserverService(result[0]); result[0] = 0; buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.PROFILE_DO_CHANGE, true); length = org.eclipse.swt.browser.Mozilla.STARTUP.length(); char[] chars = new char[length + 1]; org.eclipse.swt.browser.Mozilla.STARTUP.getChars(0, length, chars, 0); rc = observerService.NotifyObservers(0, buffer, chars); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.PROFILE_AFTER_CHANGE, true); rc = observerService.NotifyObservers(0, buffer, chars); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } observerService.Release(); } aContractID = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_PREFSERVICE_CONTRACTID, true); rc = serviceManager.GetServiceByContractID(aContractID, nsIPrefService.NS_IPREFSERVICE_IID, result); serviceManager.Release(); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } org.eclipse.swt.browser.nsIPrefService prefService = new org.eclipse.swt.browser.nsIPrefService(result[0]); result[0] = 0; byte[] buffer = new byte[1]; rc = prefService.GetBranch(buffer, result); prefService.Release(); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } org.eclipse.swt.browser.nsIPrefBranch prefBranch = new org.eclipse.swt.browser.nsIPrefBranch(result[0]); result[0] = 0; java.lang.String prefLocales = null; org.eclipse.swt.browser.nsIPrefLocalizedString localizedString = null; buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.PREFERENCE_LANGUAGES, true); rc = prefBranch.GetComplexValue(buffer, nsIPrefLocalizedString.NS_IPREFLOCALIZEDSTRING_IID, result); if (rc != (XPCOM.NS_OK)) { prefLocales = "en-us,en" + (org.eclipse.swt.browser.Mozilla.TOKENIZER_LOCALE); } else { if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } localizedString = new org.eclipse.swt.browser.nsIPrefLocalizedString(result[0]); result[0] = 0; rc = localizedString.ToString(result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } int length = org.eclipse.swt.browser.XPCOM.strlen_PRUnichar(result[0]); char[] dest = new char[length]; org.eclipse.swt.browser.XPCOM.memmove(dest, result[0], (length * 2)); prefLocales = (new java.lang.String(dest)) + (org.eclipse.swt.browser.Mozilla.TOKENIZER_LOCALE); } result[0] = 0; java.util.Locale locale = java.util.Locale.getDefault(); java.lang.String language = locale.getLanguage(); java.lang.String country = locale.getCountry(); java.lang.StringBuffer stringBuffer = new java.lang.StringBuffer(language); stringBuffer.append(org.eclipse.swt.browser.Mozilla.SEPARATOR_LOCALE); stringBuffer.append(country.toLowerCase()); stringBuffer.append(org.eclipse.swt.browser.Mozilla.TOKENIZER_LOCALE); stringBuffer.append(language); stringBuffer.append(org.eclipse.swt.browser.Mozilla.TOKENIZER_LOCALE); java.lang.String newLocales = stringBuffer.toString(); int start; int end = -1; do { start = end + 1; end = prefLocales.indexOf(org.eclipse.swt.browser.Mozilla.TOKENIZER_LOCALE, start); java.lang.String token; if (end == (-1)) { token = prefLocales.substring(start); } else { token = prefLocales.substring(start, end); } if ((token.length()) > 0) { token = (token + (org.eclipse.swt.browser.Mozilla.TOKENIZER_LOCALE)).trim(); if ((newLocales.indexOf(token)) == (-1)) { stringBuffer.append(token); } } } while (end != (-1) ); newLocales = stringBuffer.toString(); if (!(newLocales.equals(prefLocales))) { newLocales = newLocales.substring(0, ((newLocales.length()) - (org.eclipse.swt.browser.Mozilla.TOKENIZER_LOCALE.length()))); int length = newLocales.length(); char[] charBuffer = new char[length + 1]; newLocales.getChars(0, length, charBuffer, 0); if (localizedString == null) { byte[] contractID = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_PREFLOCALIZEDSTRING_CONTRACTID, true); rc = componentManager.CreateInstanceByContractID(contractID, 0, nsIPrefLocalizedString.NS_IPREFLOCALIZEDSTRING_IID, result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } localizedString = new org.eclipse.swt.browser.nsIPrefLocalizedString(result[0]); result[0] = 0; } localizedString.SetDataWithLength(length, charBuffer); rc = prefBranch.SetComplexValue(buffer, nsIPrefLocalizedString.NS_IPREFLOCALIZEDSTRING_IID, localizedString.getAddress()); } if (localizedString != null) { localizedString.Release(); localizedString = null; } java.lang.String prefCharset = null; buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.PREFERENCE_CHARSET, true); rc = prefBranch.GetComplexValue(buffer, nsIPrefLocalizedString.NS_IPREFLOCALIZEDSTRING_IID, result); if (rc != (XPCOM.NS_OK)) { prefCharset = "ISO-8859-1"; } else { if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } localizedString = new org.eclipse.swt.browser.nsIPrefLocalizedString(result[0]); result[0] = 0; rc = localizedString.ToString(result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } int length = org.eclipse.swt.browser.XPCOM.strlen_PRUnichar(result[0]); char[] dest = new char[length]; org.eclipse.swt.browser.XPCOM.memmove(dest, result[0], (length * 2)); prefCharset = new java.lang.String(dest); } result[0] = 0; java.lang.String newCharset = java.lang.System.getProperty("file.encoding"); if (!(newCharset.equals(prefCharset))) { int length = newCharset.length(); char[] charBuffer = new char[length + 1]; newCharset.getChars(0, length, charBuffer, 0); if (localizedString == null) { byte[] contractID = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_PREFLOCALIZEDSTRING_CONTRACTID, true); rc = componentManager.CreateInstanceByContractID(contractID, 0, nsIPrefLocalizedString.NS_IPREFLOCALIZEDSTRING_IID, result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } localizedString = new org.eclipse.swt.browser.nsIPrefLocalizedString(result[0]); result[0] = 0; } localizedString.SetDataWithLength(length, charBuffer); rc = prefBranch.SetComplexValue(buffer, nsIPrefLocalizedString.NS_IPREFLOCALIZEDSTRING_IID, localizedString.getAddress()); } if (localizedString != null) localizedString.Release(); java.lang.String proxyHost = java.lang.System.getProperty(org.eclipse.swt.browser.Mozilla.PROPERTY_PROXYHOST); java.lang.String proxyPortString = java.lang.System.getProperty(org.eclipse.swt.browser.Mozilla.PROPERTY_PROXYPORT); int port = -1; if (proxyPortString != null) { try { int value = java.lang.Integer.valueOf(proxyPortString).intValue(); if ((0 <= value) && (value <= (org.eclipse.swt.browser.Mozilla.MAX_PORT))) port = value; } catch (java.lang.NumberFormatException e) { } } if (proxyHost != null) { byte[] contractID = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_PREFLOCALIZEDSTRING_CONTRACTID, true); rc = componentManager.CreateInstanceByContractID(contractID, 0, nsIPrefLocalizedString.NS_IPREFLOCALIZEDSTRING_IID, result); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); if ((result[0]) == 0) org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); localizedString = new org.eclipse.swt.browser.nsIPrefLocalizedString(result[0]); result[0] = 0; int length = proxyHost.length(); char[] charBuffer = new char[length + 1]; proxyHost.getChars(0, length, charBuffer, 0); rc = localizedString.SetDataWithLength(length, charBuffer); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.PREFERENCE_PROXYHOST_FTP, true); rc = prefBranch.SetComplexValue(buffer, nsIPrefLocalizedString.NS_IPREFLOCALIZEDSTRING_IID, localizedString.getAddress()); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.PREFERENCE_PROXYHOST_HTTP, true); rc = prefBranch.SetComplexValue(buffer, nsIPrefLocalizedString.NS_IPREFLOCALIZEDSTRING_IID, localizedString.getAddress()); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.PREFERENCE_PROXYHOST_SSL, true); rc = prefBranch.SetComplexValue(buffer, nsIPrefLocalizedString.NS_IPREFLOCALIZEDSTRING_IID, localizedString.getAddress()); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); localizedString.Release(); } if (port != (-1)) { buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.PREFERENCE_PROXYPORT_FTP, true); rc = prefBranch.SetIntPref(buffer, port); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.PREFERENCE_PROXYPORT_HTTP, true); rc = prefBranch.SetIntPref(buffer, port); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.PREFERENCE_PROXYPORT_SSL, true); rc = prefBranch.SetIntPref(buffer, port); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); } if ((proxyHost != null) || (port != (-1))) { buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.PREFERENCE_PROXYTYPE, true); rc = prefBranch.SetIntPref(buffer, 1); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); } buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.PREFERENCE_DISABLEOPENDURINGLOAD, true); rc = prefBranch.SetBoolPref(buffer, 0); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.PREFERENCE_DISABLEWINDOWSTATUSCHANGE, true); rc = prefBranch.SetBoolPref(buffer, 0); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } prefBranch.Release(); org.eclipse.swt.browser.PromptService2Factory factory = new org.eclipse.swt.browser.PromptService2Factory(); factory.AddRef(); rc = componentManager.QueryInterface(nsIComponentRegistrar.NS_ICOMPONENTREGISTRAR_IID, result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } org.eclipse.swt.browser.nsIComponentRegistrar componentRegistrar = new org.eclipse.swt.browser.nsIComponentRegistrar(result[0]); result[0] = 0; aContractID = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_PROMPTSERVICE_CONTRACTID, true); byte[] aClassName = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, "Prompt Service", true); rc = componentRegistrar.RegisterFactory(XPCOM.NS_PROMPTSERVICE_CID, aClassName, aContractID, factory.getAddress()); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } factory.Release(); org.eclipse.swt.browser.HelperAppLauncherDialogFactory dialogFactory = new org.eclipse.swt.browser.HelperAppLauncherDialogFactory(); dialogFactory.AddRef(); aContractID = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_HELPERAPPLAUNCHERDIALOG_CONTRACTID, true); aClassName = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, "Helper App Launcher Dialog", true); rc = componentRegistrar.RegisterFactory(XPCOM.NS_HELPERAPPLAUNCHERDIALOG_CID, aClassName, aContractID, dialogFactory.getAddress()); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } dialogFactory.Release(); org.eclipse.swt.browser.DownloadFactory downloadFactory = new org.eclipse.swt.browser.DownloadFactory(); downloadFactory.AddRef(); aContractID = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_DOWNLOAD_CONTRACTID, true); aClassName = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, "Download", true); rc = componentRegistrar.RegisterFactory(XPCOM.NS_DOWNLOAD_CID, aClassName, aContractID, downloadFactory.getAddress()); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } downloadFactory.Release(); org.eclipse.swt.browser.FilePickerFactory pickerFactory = (IsXULRunner) ? new org.eclipse.swt.browser.FilePickerFactory_1_8() : new org.eclipse.swt.browser.FilePickerFactory(); pickerFactory.AddRef(); aContractID = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_FILEPICKER_CONTRACTID, true); aClassName = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, "FilePicker", true); rc = componentRegistrar.RegisterFactory(XPCOM.NS_FILEPICKER_CID, aClassName, aContractID, pickerFactory.getAddress()); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } pickerFactory.Release(); componentRegistrar.Release(); componentManager.Release(); org.eclipse.swt.browser.Mozilla.Initialized = true; } if ((display.getData(org.eclipse.swt.browser.Mozilla.DISPOSE_LISTENER_HOOKED)) == null) { display.setData(org.eclipse.swt.browser.Mozilla.DISPOSE_LISTENER_HOOKED, org.eclipse.swt.browser.Mozilla.DISPOSE_LISTENER_HOOKED); display.addListener(SWT.Dispose, new org.eclipse.swt.browser.Listener() { public void handleEvent(org.eclipse.swt.browser.Event event) { if ((org.eclipse.swt.browser.Mozilla.BrowserCount) > 0) return; int[] result = new int[1]; int rc = org.eclipse.swt.browser.XPCOM.NS_GetServiceManager(result); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); if ((result[0]) == 0) org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); org.eclipse.swt.browser.nsIServiceManager serviceManager = new org.eclipse.swt.browser.nsIServiceManager(result[0]); result[0] = 0; byte[] buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_OBSERVER_CONTRACTID, true); rc = serviceManager.GetServiceByContractID(buffer, nsIObserverService.NS_IOBSERVERSERVICE_IID, result); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); if ((result[0]) == 0) org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); serviceManager.Release(); org.eclipse.swt.browser.nsIObserverService observerService = new org.eclipse.swt.browser.nsIObserverService(result[0]); result[0] = 0; buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.PROFILE_BEFORE_CHANGE, true); int length = org.eclipse.swt.browser.Mozilla.SHUTDOWN_PERSIST.length(); char[] chars = new char[length + 1]; org.eclipse.swt.browser.Mozilla.SHUTDOWN_PERSIST.getChars(0, length, chars, 0); rc = observerService.NotifyObservers(0, buffer, chars); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); observerService.Release(); if (org.eclipse.swt.browser.Mozilla.XPCOMWasGlued) { org.eclipse.swt.browser.XPCOM.XPCOMGlueShutdown(); org.eclipse.swt.browser.Mozilla.XPCOMWasGlued = false; } if (org.eclipse.swt.browser.Mozilla.XPCOMInitWasGlued) { org.eclipse.swt.browser.XPCOMInit.XPCOMGlueShutdown(); org.eclipse.swt.browser.Mozilla.XPCOMInitWasGlued = false; } org.eclipse.swt.browser.Mozilla.Initialized = false; } }); } (org.eclipse.swt.browser.Mozilla.BrowserCount)++; int rc = org.eclipse.swt.browser.XPCOM.NS_GetComponentManager(result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } org.eclipse.swt.browser.nsIComponentManager componentManager = new org.eclipse.swt.browser.nsIComponentManager(result[0]); result[0] = 0; org.eclipse.swt.browser.nsID NS_IWEBBROWSER_CID = new org.eclipse.swt.browser.nsID("F1EAC761-87E9-11d3-AF80-00A024FFC08C"); rc = componentManager.CreateInstance(NS_IWEBBROWSER_CID, 0, nsIWebBrowser.NS_IWEBBROWSER_IID, result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } webBrowser = new org.eclipse.swt.browser.nsIWebBrowser(result[0]); result[0] = 0; createCOMInterfaces(); AddRef(); rc = webBrowser.SetContainerWindow(webBrowserChrome.getAddress()); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } rc = webBrowser.QueryInterface(nsIBaseWindow.NS_IBASEWINDOW_IID, result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_ERROR_NO_INTERFACE); } org.eclipse.swt.browser.nsIBaseWindow baseWindow = new org.eclipse.swt.browser.nsIBaseWindow(result[0]); result[0] = 0; org.eclipse.swt.browser.Rectangle rect = browser.getClientArea(); if (rect.isEmpty()) { rect.width = 1; rect.height = 1; } embedHandle = delegate.getHandle(); rc = baseWindow.InitWindow(embedHandle, 0, 0, 0, rect.width, rect.height); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_ERROR_FAILURE); } rc = baseWindow.Create(); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_ERROR_FAILURE); } rc = baseWindow.SetVisibility(true); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_ERROR_FAILURE); } baseWindow.Release(); if (!(org.eclipse.swt.browser.Mozilla.PerformedVersionCheck)) { org.eclipse.swt.browser.Mozilla.PerformedVersionCheck = true; rc = webBrowser.QueryInterface(nsIInterfaceRequestor.NS_IINTERFACEREQUESTOR_IID, result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_ERROR_FAILURE); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_ERROR_NO_INTERFACE); } org.eclipse.swt.browser.nsIInterfaceRequestor interfaceRequestor = new org.eclipse.swt.browser.nsIInterfaceRequestor(result[0]); result[0] = 0; rc = interfaceRequestor.GetInterface(nsIDocShell.NS_IDOCSHELL_IID, result); if ((rc == (XPCOM.NS_OK)) && ((result[0]) != 0)) { org.eclipse.swt.browser.Mozilla.IsPre_1_8 = true; new org.eclipse.swt.browser.nsISupports(result[0]).Release(); } result[0] = 0; if (!(org.eclipse.swt.browser.Mozilla.IsPre_1_8)) { rc = interfaceRequestor.GetInterface(nsIDocShell_1_8.NS_IDOCSHELL_IID, result); if ((rc == (XPCOM.NS_OK)) && ((result[0]) != 0)) { new org.eclipse.swt.browser.nsISupports(result[0]).Release(); result[0] = 0; rc = componentManager.QueryInterface(nsIComponentRegistrar.NS_ICOMPONENTREGISTRAR_IID, result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } org.eclipse.swt.browser.nsIComponentRegistrar componentRegistrar = new org.eclipse.swt.browser.nsIComponentRegistrar(result[0]); org.eclipse.swt.browser.DownloadFactory_1_8 downloadFactory_1_8 = new org.eclipse.swt.browser.DownloadFactory_1_8(); downloadFactory_1_8.AddRef(); byte[] aContractID = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_TRANSFER_CONTRACTID, true); byte[] aClassName = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, "Transfer", true); rc = componentRegistrar.RegisterFactory(XPCOM.NS_DOWNLOAD_CID, aClassName, aContractID, downloadFactory_1_8.getAddress()); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } downloadFactory_1_8.Release(); componentRegistrar.Release(); } } result[0] = 0; interfaceRequestor.Release(); } componentManager.Release(); rc = webBrowser.AddWebBrowserListener(weakReference.getAddress(), nsIWebProgressListener.NS_IWEBPROGRESSLISTENER_IID); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } rc = webBrowser.SetParentURIContentListener(uriContentListener.getAddress()); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } delegate.init(); listener = new org.eclipse.swt.browser.Listener() { public void handleEvent(org.eclipse.swt.browser.Event event) { switch (event.type) { case SWT.Dispose : { if (ignoreDispose) { ignoreDispose = false; break; } ignoreDispose = true; browser.notifyListeners(event.type, event); event.type = SWT.NONE; onDispose(event.display); break; } case SWT.Resize : onResize(); break; case SWT.FocusIn : Activate(); break; case SWT.Activate : Activate(); break; case SWT.Deactivate : { org.eclipse.swt.browser.Display display = event.display; if ((org.eclipse.swt.browser.Mozilla.this.browser) == (display.getFocusControl())) Deactivate(); break; } case SWT.Show : { org.eclipse.swt.browser.Display display = event.display; display.asyncExec(new java.lang.Runnable() { public void run() { if (browser.isDisposed()) return; onResize(); } }); break; } } } }; int[] folderEvents = new int[]{ SWT.Dispose, SWT.Resize, SWT.FocusIn, SWT.Activate, SWT.Deactivate, SWT.Show, SWT.KeyDown }; for (int i = 0; i < (folderEvents.length); i++) { browser.addListener(folderEvents[i], listener); } }
int dragSendDataProc(int theType, int dragSendRefCon, int theItemRef, int theDrag) { control.setData(org.eclipse.swt.dnd.DragSource.DRAG_STARTED, null); if (theType == 0) return org.eclipse.swt.internal.carbon.OS.badDragFlavorErr; org.eclipse.swt.dnd.TransferData transferData = new org.eclipse.swt.dnd.TransferData(); transferData.type = theType; org.eclipse.swt.dnd.DNDEvent event = new org.eclipse.swt.dnd.DNDEvent(); event.widget = this; event.time = ((int) (java.lang.System.currentTimeMillis())); event.dataType = transferData; notifyListeners(DND.DragSetData, event); if (!(event.doit)) return org.eclipse.swt.internal.carbon.OS.dragNotAcceptedErr; org.eclipse.swt.dnd.Transfer transfer = null; for (int i = 0; i < (transferAgents.length); i++) { org.eclipse.swt.dnd.Transfer transferAgent = transferAgents[i]; if ((transferAgent != null) && (transferAgent.isSupportedType(transferData))) { transfer = transferAgent; break; } } if (transfer == null) return org.eclipse.swt.internal.carbon.OS.badDragFlavorErr; transfer.javaToNative(event.data, transferData); if ((transferData.result) != (org.eclipse.swt.internal.carbon.OS.noErr)) return transferData.result; byte[] datum = transferData.data[0]; if (datum == null) return org.eclipse.swt.internal.carbon.OS.cantGetFlavorErr; int rc = org.eclipse.swt.internal.carbon.OS.SetDragItemFlavorData(theDrag, theItemRef, theType, datum, datum.length, 0); if ((rc == (org.eclipse.swt.internal.carbon.OS.noErr)) && (transfer instanceof org.eclipse.swt.dnd.FileTransfer)) { for (int i = 1; i < (transferData.data.length); i++) { datum = transferData.data[i]; if (datum == null) return org.eclipse.swt.internal.carbon.OS.cantGetFlavorErr; rc = org.eclipse.swt.internal.carbon.OS.AddDragItemFlavor(theDrag, (1 + i), theType, datum, datum.length, 0); if (rc != (org.eclipse.swt.internal.carbon.OS.noErr)) break; } } return rc; }
public org.eclipse.swt.widgets.Point computeSize(int wHint, int hHint, boolean changed) { checkWidget(); if ((wHint != (SWT.DEFAULT)) && (wHint < 0)) wHint = 0; if ((hHint != (SWT.DEFAULT)) && (hHint < 0)) hHint = 0; if (((style) & (SWT.SEPARATOR)) != 0) { if (((style) & (SWT.HORIZONTAL)) != 0) { if (wHint == (SWT.DEFAULT)) wHint = DEFAULT_WIDTH; } else { if (hHint == (SWT.DEFAULT)) hHint = DEFAULT_HEIGHT; } } org.eclipse.swt.widgets.Point size; boolean fixWrap = (((labelHandle) != 0) && (((style) & (SWT.WRAP)) != 0)) && (((org.eclipse.swt.widgets.OS.GTK_WIDGET_FLAGS(labelHandle)) & (OS.GTK_VISIBLE)) != 0); if (fixWrap || ((frameHandle) != 0)) forceResize(); if (fixWrap) { int labelLayout = org.eclipse.swt.widgets.OS.gtk_label_get_layout(labelHandle); int pangoWidth = org.eclipse.swt.widgets.OS.pango_layout_get_width(labelLayout); if (wHint != (SWT.DEFAULT)) { org.eclipse.swt.widgets.OS.pango_layout_set_width(labelLayout, (wHint * (OS.PANGO_SCALE))); } else { org.eclipse.swt.widgets.OS.pango_layout_set_width(labelLayout, (-1)); } int[] w = new int[1]; int[] h = new int[1]; org.eclipse.swt.widgets.OS.pango_layout_get_size(labelLayout, w, h); org.eclipse.swt.widgets.OS.pango_layout_set_width(labelLayout, pangoWidth); if ((frameHandle) != 0) { int[] labelWidth = new int[1]; int[] labelHeight = new int[1]; org.eclipse.swt.widgets.OS.gtk_widget_get_size_request(labelHandle, labelWidth, labelHeight); org.eclipse.swt.widgets.OS.gtk_widget_set_size_request(labelHandle, 1, 1); size = computeNativeSize(frameHandle, (-1), (-1), changed); org.eclipse.swt.widgets.OS.gtk_widget_set_size_request(labelHandle, labelWidth[0], labelHeight[0]); size.x = (size.x) - 1; size.y = (size.y) - 1; } else { size = new org.eclipse.swt.widgets.Point(0, 0); } size.x += (wHint == (SWT.DEFAULT)) ? org.eclipse.swt.widgets.OS.PANGO_PIXELS(w[0]) : wHint; size.y += (hHint == (SWT.DEFAULT)) ? org.eclipse.swt.widgets.OS.PANGO_PIXELS(h[0]) : hHint; } else { if ((frameHandle) != 0) { int[] reqWidth = new int[1]; int[] reqHeight = new int[1]; org.eclipse.swt.widgets.OS.gtk_widget_get_size_request(handle, reqWidth, reqHeight); org.eclipse.swt.widgets.OS.gtk_widget_set_size_request(handle, wHint, hHint); size = computeNativeSize(frameHandle, (-1), (-1), changed); org.eclipse.swt.widgets.OS.gtk_widget_set_size_request(handle, reqWidth[0], reqHeight[0]); } else { size = computeNativeSize(handle, wHint, hHint, changed); } } if ((hHint == (SWT.DEFAULT)) && ((labelHandle) != 0)) { int layout = org.eclipse.swt.widgets.OS.gtk_label_get_layout(labelHandle); int context = org.eclipse.swt.widgets.OS.pango_layout_get_context(layout); int lang = org.eclipse.swt.widgets.OS.pango_context_get_language(context); int font = getFontDescription(); int metrics = org.eclipse.swt.widgets.OS.pango_context_get_metrics(context, font, lang); int ascent = org.eclipse.swt.widgets.OS.PANGO_PIXELS(org.eclipse.swt.widgets.OS.pango_font_metrics_get_ascent(metrics)); int descent = org.eclipse.swt.widgets.OS.PANGO_PIXELS(org.eclipse.swt.widgets.OS.pango_font_metrics_get_descent(metrics)); org.eclipse.swt.widgets.OS.pango_font_metrics_unref(metrics); int fontHeight = ascent + descent; int[] buffer = new int[1]; org.eclipse.swt.widgets.OS.g_object_get(labelHandle, OS.ypad, buffer, 0); fontHeight += 2 * (buffer[0]); if ((frameHandle) != 0) { int style = org.eclipse.swt.widgets.OS.gtk_widget_get_style(frameHandle); fontHeight += 2 * (org.eclipse.swt.widgets.OS.gtk_style_get_ythickness(style)); fontHeight += 2 * (org.eclipse.swt.widgets.OS.gtk_container_get_border_width(frameHandle)); } size.y = java.lang.Math.max(size.y, fontHeight); } return size; }
static org.eclipse.swt.program.Program gio_getProgram(org.eclipse.swt.program.Display display, int application) { org.eclipse.swt.program.Program program = new org.eclipse.swt.program.Program(); program.display = display; int length; byte[] buffer; int applicationName = org.eclipse.swt.program.OS.g_app_info_get_name(application); if (applicationName != 0) { length = org.eclipse.swt.program.OS.strlen(applicationName); if (length > 0) { buffer = new byte[length]; org.eclipse.swt.program.OS.memmove(buffer, applicationName, length); program.name = new java.lang.String(org.eclipse.swt.program.Converter.mbcsToWcs(null, buffer)); } } int applicationCommand = org.eclipse.swt.program.OS.g_app_info_get_executable(application); if (applicationCommand != 0) { length = org.eclipse.swt.program.OS.strlen(applicationCommand); if (length > 0) { buffer = new byte[length]; org.eclipse.swt.program.OS.memmove(buffer, applicationCommand, length); program.command = new java.lang.String(org.eclipse.swt.program.Converter.mbcsToWcs(null, buffer)); } } program.gnomeExpectUri = org.eclipse.swt.program.OS.g_app_info_supports_uris(application); int icon = org.eclipse.swt.program.OS.g_app_info_get_icon(application); if (icon != 0) { int icon_name = org.eclipse.swt.program.OS.g_icon_to_string(icon); if (icon_name != 0) { length = org.eclipse.swt.program.OS.strlen(icon_name); if (length > 0) { buffer = new byte[length]; org.eclipse.swt.program.OS.memmove(buffer, icon_name, length); program.iconPath = new java.lang.String(org.eclipse.swt.program.Converter.mbcsToWcs(null, buffer)); } org.eclipse.swt.program.OS.g_free(icon_name); } org.eclipse.swt.program.OS.g_object_unref(icon); } return program; }
void add(int[] pointArray, int count) { count = (count / 2) * 2; if (count <= 2) return; org.eclipse.swt.graphics.NSAutoreleasePool pool = null; if (!(org.eclipse.swt.graphics.NSThread.isMainThread())) pool = ((org.eclipse.swt.graphics.NSAutoreleasePool) (new org.eclipse.swt.graphics.NSAutoreleasePool().alloc().init())); try { int polyRgn = org.eclipse.swt.graphics.Region.polyRgn(pointArray, count); org.eclipse.swt.graphics.OS.UnionRgn(handle, polyRgn, handle); org.eclipse.swt.graphics.OS.DisposeRgn(polyRgn); } finally { if (pool != null) pool.release(); } }
public void open() { checkWidget(); int mask = ((org.eclipse.swt.SWT.PRIMARY_MODAL) | (org.eclipse.swt.SWT.APPLICATION_MODAL)) | (org.eclipse.swt.SWT.SYSTEM_MODAL); if (((style) & mask) != 0) { display.setModalShell(this); } else { updateModal(); } bringToTop(false); setWindowVisible(true, true); if (isDisposed()) return; if ((!(restoreFocus())) && (!(traverseGroup(true)))) setFocus(); }
int[] computePolyline(int left, int top, int right, int bottom) { int height = bottom - top; int width = 2 * height; int peaks = (right - left) / width; if ((peaks == 0) && ((right - left) > 2)) { peaks = 1; } int length = ((2 * peaks) + 1) * 2; if (length < 0) return new int[0]; int[] coordinates = new int[length]; for (int i = 0; i < peaks; i++) { int index = 4 * i; coordinates[index] = left + (width * i); coordinates[(index + 1)] = bottom; coordinates[(index + 2)] = (coordinates[index]) + (width / 2); coordinates[(index + 3)] = top; } coordinates[(length - 2)] = java.lang.Math.min(java.lang.Math.max(0, (right - 1)), (left + (width * peaks))); coordinates[(length - 1)] = bottom; return coordinates; }
boolean paint(org.eclipse.swt.examples.accessibility.GC gc, org.eclipse.swt.examples.accessibility.CTableColumn column, boolean backgroundOnly) { if (!(parent.checkData(this, true))) return false; int columnIndex = 0; int x = 0; if (column != null) { columnIndex = column.getIndex(); x = column.getX(); } int oldAlpha = gc.getAlpha(); boolean oldAdvanced = gc.getAdvanced(); int oldAntialias = gc.getAntialias(); org.eclipse.swt.examples.accessibility.Pattern oldBackgroundPattern = gc.getBackgroundPattern(); org.eclipse.swt.examples.accessibility.Pattern oldForegroundPattern = gc.getForegroundPattern(); int oldInterpolation = gc.getInterpolation(); int oldTextAntialias = gc.getTextAntialias(); if (parent.isListening(SWT.MeasureItem)) { int contentWidth = getContentWidth(columnIndex); int contentX = getContentX(columnIndex); gc.setFont(getFont(columnIndex, false)); org.eclipse.swt.examples.accessibility.Event event = new org.eclipse.swt.examples.accessibility.Event(); event.item = this; event.gc = gc; event.index = columnIndex; event.x = contentX; event.y = parent.getItemY(this); event.width = contentWidth; event.height = parent.itemHeight; parent.notifyListeners(SWT.MeasureItem, event); event.gc = null; if (gc.isDisposed()) return false; gc.setAlpha(oldAlpha); gc.setAntialias(oldAntialias); gc.setBackgroundPattern(oldBackgroundPattern); gc.setForegroundPattern(oldForegroundPattern); gc.setInterpolation(oldInterpolation); gc.setTextAntialias(oldTextAntialias); gc.setAdvanced(oldAdvanced); if (isDisposed()) return false; if ((parent.itemHeight) != (event.height)) { parent.customHeightSet = true; boolean update = parent.setItemHeight(((event.height) + (2 * (parent.getCellPadding())))); if (update) parent.redraw(); } if ((parent.columns.length) == 0) { int change = (event.width) - ((customWidth) != (-1) ? customWidth : contentWidth); if (((event.width) != contentWidth) || ((customWidth) != (-1))) customWidth = event.width; if (change != 0) { parent.updateHorizontalBar((contentX + (event.width)), change); } } } org.eclipse.swt.examples.accessibility.Rectangle clientArea = parent.clientArea; if (((clientArea.x) + (clientArea.width)) < x) return false; org.eclipse.swt.examples.accessibility.Rectangle cellBounds = getCellBounds(columnIndex); if (parent.linesVisible) { (cellBounds.y)++; (cellBounds.height)--; } int cellRightX = 0; if (column != null) { cellRightX = (column.getX()) + (column.width); } else { cellRightX = (cellBounds.x) + (cellBounds.width); } gc.setClipping(x, cellBounds.y, ((clientArea.width) - x), cellBounds.height); int y = parent.getItemY(this); int itemHeight = parent.itemHeight; if (column == null) { gc.fillRectangle(0, y, clientArea.width, itemHeight); } else { int fillWidth = cellBounds.width; if (parent.linesVisible) fillWidth--; gc.fillRectangle(cellBounds.x, cellBounds.y, fillWidth, cellBounds.height); } boolean isSelected = isSelected(); boolean isFocusItem = ((parent.focusItem) == (this)) && (parent.isFocusControl()); boolean drawBackground = true; boolean drawForeground = true; boolean drawSelection = isSelected; boolean drawFocus = isFocusItem; if (parent.isListening(SWT.EraseItem)) { drawBackground = ((background) != null) || (((cellBackgrounds) != null) && ((cellBackgrounds[columnIndex]) != null)); gc.setFont(getFont(columnIndex, false)); if (isSelected && ((columnIndex == 0) || (((parent.getStyle()) & (SWT.FULL_SELECTION)) != 0))) { gc.setForeground(display.getSystemColor(SWT.COLOR_LIST_SELECTION_TEXT)); gc.setBackground(display.getSystemColor(SWT.COLOR_LIST_SELECTION)); } else { gc.setForeground(getForeground(columnIndex)); gc.setBackground(getBackground(columnIndex)); } org.eclipse.swt.examples.accessibility.Event event = new org.eclipse.swt.examples.accessibility.Event(); event.item = this; event.gc = gc; event.index = columnIndex; event.doit = true; event.detail = SWT.FOREGROUND; if (drawBackground) event.detail |= SWT.BACKGROUND; if (isSelected) event.detail |= SWT.SELECTED; if (isFocusItem) event.detail |= SWT.FOCUSED; event.x = cellBounds.x; event.y = cellBounds.y; event.width = cellBounds.width; event.height = cellBounds.height; gc.setClipping(cellBounds); parent.notifyListeners(SWT.EraseItem, event); event.gc = null; if (gc.isDisposed()) return false; gc.setAlpha(oldAlpha); gc.setAntialias(oldAntialias); gc.setBackgroundPattern(oldBackgroundPattern); gc.setClipping(cellBounds); gc.setForegroundPattern(oldForegroundPattern); gc.setInterpolation(oldInterpolation); gc.setTextAntialias(oldTextAntialias); gc.setAdvanced(oldAdvanced); if (isDisposed()) return false; if (!(event.doit)) { drawBackground = drawForeground = drawSelection = drawFocus = false; } else { drawBackground = drawBackground && (((event.detail) & (SWT.BACKGROUND)) != 0); drawForeground = ((event.detail) & (SWT.FOREGROUND)) != 0; drawSelection = isSelected && (((event.detail) & (SWT.SELECTED)) != 0); drawFocus = isFocusItem && (((event.detail) & (SWT.FOCUSED)) != 0); } } if (drawBackground) { gc.setBackground(getBackground(columnIndex)); if ((columnIndex == 0) && ((column == null) || ((column.getOrderIndex()) == 0))) { org.eclipse.swt.examples.accessibility.Rectangle focusBounds = getFocusBounds(); int fillWidth = 0; if (column == null) { fillWidth = focusBounds.width; } else { fillWidth = (column.width) - (focusBounds.x); if (parent.linesVisible) fillWidth--; } gc.fillRectangle(focusBounds.x, focusBounds.y, fillWidth, focusBounds.height); } else { int fillWidth = cellBounds.width; gc.fillRectangle(cellBounds.x, cellBounds.y, fillWidth, cellBounds.height); } } if (drawSelection && ((columnIndex == 0) || (((parent.getStyle()) & (SWT.FULL_SELECTION)) != 0))) { if ((parent.isFocusControl()) || (((parent.getStyle()) & (SWT.HIDE_SELECTION)) == 0)) { gc.setBackground(display.getSystemColor(SWT.COLOR_LIST_SELECTION)); if (columnIndex == 0) { org.eclipse.swt.examples.accessibility.Rectangle focusBounds = getFocusBounds(); int startX; int fillWidth; if (((column == null) || ((column.getOrderIndex()) == 0)) || (((parent.getStyle()) & (SWT.FULL_SELECTION)) == 0)) { startX = (focusBounds.x) + 1; } else { startX = column.getX(); } if (column == null) { fillWidth = (focusBounds.width) - 2; } else { fillWidth = ((column.getX()) + (column.width)) - startX; if (((column.getOrderIndex()) == ((parent.columns.length) - 1)) || (((parent.getStyle()) & (SWT.FULL_SELECTION)) == 0)) { fillWidth -= 2; } } if (fillWidth > 0) { gc.fillRectangle(startX, ((focusBounds.y) + 1), fillWidth, ((focusBounds.height) - 2)); } } else { int startX = column.getX(); int fillWidth = column.width; if ((column.getOrderIndex()) == 0) { startX += 1; fillWidth -= 1; } if ((column.getOrderIndex()) == ((parent.columns.length) - 1)) { fillWidth -= 2; } if (fillWidth > 0) { gc.fillRectangle(column.getX(), ((cellBounds.y) + 1), fillWidth, ((cellBounds.height) - 2)); } } } } if (backgroundOnly) return false; if ((columnIndex == 0) && (((parent.getStyle()) & (SWT.CHECK)) != 0)) { org.eclipse.swt.examples.accessibility.Image baseImage = (grayed) ? parent.getGrayUncheckedImage() : parent.getUncheckedImage(); org.eclipse.swt.examples.accessibility.Rectangle checkboxBounds = getCheckboxBounds(); gc.drawImage(baseImage, checkboxBounds.x, checkboxBounds.y); if (checked) { org.eclipse.swt.examples.accessibility.Image checkmarkImage = parent.getCheckmarkImage(); org.eclipse.swt.examples.accessibility.Rectangle checkmarkBounds = checkmarkImage.getBounds(); int xInset = ((checkboxBounds.width) - (checkmarkBounds.width)) / 2; int yInset = ((checkboxBounds.height) - (checkmarkBounds.height)) / 2; gc.drawImage(checkmarkImage, ((checkboxBounds.x) + xInset), ((checkboxBounds.y) + yInset)); } } if (drawForeground) { org.eclipse.swt.examples.accessibility.Image image = getImage(columnIndex, false); java.lang.String text = getDisplayText(columnIndex); org.eclipse.swt.examples.accessibility.Rectangle imageArea = getImageBounds(columnIndex); int startX = imageArea.x; int padding = parent.getCellPadding(); gc.setClipping(startX, (((cellBounds.y) + padding) - (parent.linesVisible ? 1 : 0)), ((cellRightX - startX) - padding), ((cellBounds.height) - (2 * (padding - (parent.linesVisible ? 1 : 0))))); if (image != null) { org.eclipse.swt.examples.accessibility.Rectangle imageBounds = image.getBounds(); gc.drawImage(image, 0, 0, imageBounds.width, imageBounds.height, imageArea.x, imageArea.y, imageArea.width, imageArea.height); } if ((text.length()) > 0) { gc.setFont(getFont(columnIndex, false)); int fontHeight = getFontHeight(columnIndex); if (drawSelection && ((columnIndex == 0) || (((parent.getStyle()) & (SWT.FULL_SELECTION)) != 0))) { if ((parent.isFocusControl()) || (((parent.getStyle()) & (SWT.HIDE_SELECTION)) == 0)) { gc.setForeground(display.getSystemColor(SWT.COLOR_LIST_SELECTION_TEXT)); } } else { if ((!isSelected) || drawSelection) { gc.setForeground(getForeground(columnIndex)); } } x = (getTextX(columnIndex)) + (org.eclipse.swt.examples.accessibility.CTableItem.MARGIN_TEXT); gc.drawString(text, x, (y + ((itemHeight - fontHeight) / 2)), true); } } if (parent.isListening(SWT.PaintItem)) { int contentWidth = getContentWidth(columnIndex); int contentX = getContentX(columnIndex); gc.setFont(getFont(columnIndex, false)); if (isSelected && ((columnIndex == 0) || (((parent.getStyle()) & (SWT.FULL_SELECTION)) != 0))) { gc.setForeground(display.getSystemColor(SWT.COLOR_LIST_SELECTION_TEXT)); gc.setBackground(display.getSystemColor(SWT.COLOR_LIST_SELECTION)); } else { gc.setForeground(getForeground(columnIndex)); gc.setBackground(getBackground(columnIndex)); } org.eclipse.swt.examples.accessibility.Event event = new org.eclipse.swt.examples.accessibility.Event(); event.item = this; event.gc = gc; event.index = columnIndex; if (isSelected) event.detail |= SWT.SELECTED; if (drawFocus) event.detail |= SWT.FOCUSED; event.x = contentX; event.y = cellBounds.y; event.width = contentWidth; event.height = cellBounds.height; gc.setClipping(cellBounds); parent.notifyListeners(SWT.PaintItem, event); event.gc = null; if (gc.isDisposed()) return false; gc.setAlpha(oldAlpha); gc.setAntialias(oldAntialias); gc.setBackgroundPattern(oldBackgroundPattern); gc.setClipping(cellBounds); gc.setForegroundPattern(oldForegroundPattern); gc.setInterpolation(oldInterpolation); gc.setTextAntialias(oldTextAntialias); gc.setAdvanced(oldAdvanced); drawFocus = isFocusItem && (((event.detail) & (SWT.FOCUSED)) != 0); } return isFocusItem && (!drawFocus); }
void setScrollbarVisible(int barHandle, boolean visible) { org.eclipse.swt.widgets.Display display = getDisplay(); boolean oldFocusOut = display.postFocusOut; org.eclipse.swt.widgets.Control[] children = _getChildren(); int[] traversals = new int[children.length]; int[] argList = new int[]{ OS.XmNtraversalOn, 0 }; for (int i = 0; i < (children.length); i++) { int childHandle = children[i].topHandle(); org.eclipse.swt.widgets.OS.XtGetValues(childHandle, argList, ((argList.length) / 2)); if ((traversals[i] = argList[1]) != 0) { if (!(children[i].hasFocus())) { argList[1] = 0; display.postFocusOut = true; org.eclipse.swt.widgets.OS.XtSetValues(children[i].handle, argList, ((argList.length) / 2)); } } } super.setScrollbarVisible(barHandle, visible); for (int i = 0; i < (children.length); i++) { argList[1] = traversals[i]; org.eclipse.swt.widgets.Control control = children[i]; if (!(control.isDisposed())) { int childHandle = control.topHandle(); org.eclipse.swt.widgets.OS.XtSetValues(childHandle, argList, ((argList.length) / 2)); if ((argList[1]) != 0) control.overrideTranslations(); } } display.postFocusOut = oldFocusOut; if (!(display.postFocusOut)) display.runFocusOutEvents(); }
void releaseWidget() { super.releaseWidget(); if ((((state) & (CANVAS)) != 0) && (((style) & (SWT.EMBEDDED)) != 0)) { int hwndChild = org.eclipse.swt.widgets.OS.GetWindow(handle, OS.GW_CHILD); if (hwndChild != 0) { int threadId = org.eclipse.swt.widgets.OS.GetWindowThreadProcessId(hwndChild, null); if (threadId != (org.eclipse.swt.widgets.OS.GetCurrentThreadId())) { org.eclipse.swt.widgets.OS.ShowWindow(hwndChild, OS.SW_HIDE); org.eclipse.swt.widgets.OS.SetParent(hwndChild, 0); } } } layout = null; tabList = null; lpwp = null; }
public void dropAccept(org.eclipse.swt.custom.DropTargetEvent event) { if ((currentOffset) != (-1)) { org.eclipse.swt.custom.StyledText text = ((org.eclipse.swt.custom.StyledText) (getControl())); text.setSelection(currentOffset); currentOffset = -1; } }
long eventHandle() { return OS.GTK3 ? fixedHandle : super.eventHandle(); }
int gtk_motion_notify_event(int widget, int eventPtr) { if ((cursor) != (lastCursor)) { ungrab(); grabbed = grab(); lastCursor = cursor; } return gtk_mouse(OS.GDK_MOTION_NOTIFY, widget, eventPtr); }
int[] getRanges(int start, int length) { int[] newRanges; int end = (start + length) - 1; if ((ranges) != null) { int rangeCount = (styleCount) << 1; int rangeStart = getRangeIndex(start, (-1), rangeCount); if (rangeStart >= rangeCount) return null; if ((ranges[rangeStart]) > end) return null; int rangeEnd = java.lang.Math.min((rangeCount - 2), ((getRangeIndex(end, (rangeStart - 1), rangeCount)) + 1)); newRanges = new int[(rangeEnd - rangeStart) + 2]; java.lang.System.arraycopy(ranges, rangeStart, newRanges, 0, newRanges.length); } else { int rangeStart = getRangeIndex(start, (-1), styleCount); if (rangeStart >= (styleCount)) return null; if ((styles[rangeStart].start) > end) return null; int rangeEnd = java.lang.Math.min(((styleCount) - 1), getRangeIndex(end, (rangeStart - 1), styleCount)); newRanges = new int[((rangeEnd - rangeStart) + 1) << 1]; for (int i = rangeStart, j = 0; i <= rangeEnd; i++ , j += 2) { org.eclipse.swt.custom.StyleRange style = styles[i]; newRanges[j] = style.start; newRanges[(j + 1)] = style.length; } } if (start > (newRanges[0])) { newRanges[1] = ((newRanges[0]) + (newRanges[1])) - start; newRanges[0] = start; } if (end < (((newRanges[((newRanges.length) - 2)]) + (newRanges[((newRanges.length) - 1)])) - 1)) { newRanges[((newRanges.length) - 1)] = (end - (newRanges[((newRanges.length) - 2)])) + 1; } return newRanges; }
public void setControl(org.eclipse.swt.widgets.Control control) { checkWidget(); if (control != null) { if (control.isDisposed()) error(SWT.ERROR_INVALID_ARGUMENT); if ((control.parent) != (parent)) error(SWT.ERROR_INVALID_PARENT); } org.eclipse.swt.widgets.Control oldControl = this.control; org.eclipse.swt.widgets.Control newControl = control; this.control = control; int index = parent.indexOf(this); if (index != (parent.getSelectionIndex())) { if (newControl != null) newControl.setVisible(false); return; } if (newControl != null) { newControl.setBounds(parent.getClientArea()); newControl.setVisible(true); } if (oldControl != null) oldControl.setVisible(false); }
boolean sendKeyEvent(int type, int msg, int wParam, int lParam, org.eclipse.swt.widgets.Event event) { if (!(super.sendKeyEvent(type, msg, wParam, lParam, event))) { return false; } if (((style) & (SWT.READ_ONLY)) != 0) return true; if (ignoreVerify) return true; if (type != (SWT.KeyDown)) return true; if (((msg != (OS.WM_CHAR)) && (msg != (OS.WM_KEYDOWN))) && (msg != (OS.WM_IME_CHAR))) { return true; } if ((event.character) == 0) return true; if ((!(hooks(SWT.Verify))) && (!(filters(SWT.Verify)))) return true; char key = event.character; int stateMask = event.stateMask; switch (msg) { case OS.WM_CHAR : if (((((key != 8) && (key != 127)) && (key != '\r')) && (key != '\t')) && (key != '\n')) break; case OS.WM_KEYDOWN : if ((stateMask & (((SWT.ALT) | (SWT.SHIFT)) | (SWT.CONTROL))) != 0) return false; break; } if ((org.eclipse.swt.widgets.OS.GetKeyState(OS.VK_LBUTTON)) < 0) { if ((handle) == (org.eclipse.swt.widgets.OS.GetCapture())) return true; } java.lang.String oldText = ""; int[] start = new int[1]; int[] end = new int[1]; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.EM_GETSEL, start, end); switch (key) { case 8 : if ((start[0]) == (end[0])) { if ((start[0]) == 0) return true; int lineStart = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.EM_LINEINDEX, (-1), 0); if ((start[0]) == lineStart) { start[0] = (start[0]) - (org.eclipse.swt.widgets.Text.DELIMITER.length()); } else { start[0] = (start[0]) - 1; if ((!(OS.IsUnicode)) && (OS.IsDBLocale)) { int[] newStart = new int[1]; int[] newEnd = new int[1]; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.EM_SETSEL, start[0], end[0]); org.eclipse.swt.widgets.OS.SendMessage(handle, OS.EM_GETSEL, newStart, newEnd); if ((start[0]) != (newStart[0])) start[0] = (start[0]) - 1; } } start[0] = java.lang.Math.max(start[0], 0); } break; case 127 : if ((start[0]) == (end[0])) { int length = org.eclipse.swt.widgets.OS.GetWindowTextLength(handle); if ((start[0]) == length) return true; int line = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.EM_LINEFROMCHAR, end[0], 0); int lineStart = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.EM_LINEINDEX, (line + 1), 0); if ((end[0]) == (lineStart - (org.eclipse.swt.widgets.Text.DELIMITER.length()))) { end[0] = (end[0]) + (org.eclipse.swt.widgets.Text.DELIMITER.length()); } else { end[0] = (end[0]) + 1; if ((!(OS.IsUnicode)) && (OS.IsDBLocale)) { int[] newStart = new int[1]; int[] newEnd = new int[1]; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.EM_SETSEL, start[0], end[0]); org.eclipse.swt.widgets.OS.SendMessage(handle, OS.EM_GETSEL, newStart, newEnd); if ((end[0]) != (newEnd[0])) end[0] = (end[0]) + 1; } } end[0] = java.lang.Math.min(end[0], length); } break; case '\r' : if (((style) & (SWT.SINGLE)) != 0) return true; oldText = org.eclipse.swt.widgets.Text.DELIMITER; break; default : if ((key != '\t') && (key < 32)) return true; oldText = new java.lang.String(new char[]{ key }); break; } java.lang.String newText = verifyText(oldText, start[0], end[0], event); if (newText == null) return false; if (newText == oldText) return true; newText = org.eclipse.swt.widgets.Display.withCrLf(newText); org.eclipse.swt.widgets.TCHAR buffer = new org.eclipse.swt.widgets.TCHAR(getCodePage(), newText, true); org.eclipse.swt.widgets.OS.SendMessage(handle, OS.EM_SETSEL, start[0], end[0]); ignoreCharacter = true; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.EM_REPLACESEL, 0, buffer); ignoreCharacter = false; return false; }
public void drawPoint(int x, int y) { if ((handle) == 0) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_GRAPHIC_DISPOSED); if ((data.gdipGraphics) != 0) { initGdip(false, true); org.eclipse.swt.graphics.Gdip.Graphics_FillRectangle(data.gdipGraphics, data.gdipBrush, x, y, 1, 1); return; } org.eclipse.swt.graphics.OS.SetPixel(handle, x, y, org.eclipse.swt.graphics.OS.GetTextColor(handle)); }
public void setRedraw(boolean redraw) { checkWidget(); if (redraw) { if ((--(drawCount)) == 0) { if ((redrawWindow) != 0) { int window = paintWindow(); if ((OS.GTK_VERSION) >= (org.eclipse.swt.widgets.OS.VERSION(2, 17, 0))) org.eclipse.swt.widgets.OS.gdk_window_hide(window); org.eclipse.swt.widgets.OS.gdk_window_hide(redrawWindow); org.eclipse.swt.widgets.OS.gdk_window_destroy(redrawWindow); org.eclipse.swt.widgets.OS.gdk_window_set_events(window, org.eclipse.swt.widgets.OS.gtk_widget_get_events(paintHandle())); if ((OS.GTK_VERSION) >= (org.eclipse.swt.widgets.OS.VERSION(2, 17, 0))) org.eclipse.swt.widgets.OS.gdk_window_show_unraised(window); redrawWindow = 0; } } } else { if (((drawCount)++) == 0) { if (((org.eclipse.swt.widgets.OS.GTK_WIDGET_FLAGS(handle)) & (OS.GTK_REALIZED)) != 0) { int window = paintWindow(); org.eclipse.swt.widgets.Rectangle rect = getBounds(); org.eclipse.swt.widgets.GdkWindowAttr attributes = new org.eclipse.swt.widgets.GdkWindowAttr(); attributes.width = rect.width; attributes.height = rect.height; attributes.event_mask = OS.GDK_EXPOSURE_MASK; attributes.window_type = OS.GDK_WINDOW_CHILD; redrawWindow = org.eclipse.swt.widgets.OS.gdk_window_new(window, attributes, 0); if ((redrawWindow) != 0) { int mouseMask = (((((((((OS.GDK_BUTTON_PRESS_MASK) | (OS.GDK_BUTTON_RELEASE_MASK)) | (OS.GDK_ENTER_NOTIFY_MASK)) | (OS.GDK_LEAVE_NOTIFY_MASK)) | (OS.GDK_POINTER_MOTION_MASK)) | (OS.GDK_POINTER_MOTION_HINT_MASK)) | (OS.GDK_BUTTON_MOTION_MASK)) | (OS.GDK_BUTTON1_MOTION_MASK)) | (OS.GDK_BUTTON2_MOTION_MASK)) | (OS.GDK_BUTTON3_MOTION_MASK); org.eclipse.swt.widgets.OS.gdk_window_set_events(window, ((org.eclipse.swt.widgets.OS.gdk_window_get_events(window)) & (~mouseMask))); org.eclipse.swt.widgets.OS.gdk_window_set_back_pixmap(redrawWindow, 0, false); org.eclipse.swt.widgets.OS.gdk_window_show(redrawWindow); } } } } }
void flagsChanged(int id, int sel, int theEvent) { if ((view.window().firstResponder().id) == id) { if (((state) & (SAFARI_EVENTS_FIX)) == 0) { org.eclipse.swt.widgets.Shell s = this.getShell(); s.keyInputHappened = false; int mask = 0; org.eclipse.swt.widgets.NSEvent nsEvent = new org.eclipse.swt.widgets.NSEvent(theEvent); int modifiers = nsEvent.modifierFlags(); int keyCode = org.eclipse.swt.widgets.Display.translateKey(nsEvent.keyCode()); switch (keyCode) { case SWT.ALT : mask = OS.NSAlternateKeyMask; break; case SWT.CONTROL : mask = OS.NSControlKeyMask; break; case SWT.COMMAND : mask = OS.NSCommandKeyMask; break; case SWT.SHIFT : mask = OS.NSShiftKeyMask; break; case SWT.CAPS_LOCK : org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); event.keyCode = keyCode; setInputState(event, nsEvent, SWT.KeyDown); sendKeyEvent(SWT.KeyDown, event); setInputState(event, nsEvent, SWT.KeyUp); sendKeyEvent(SWT.KeyUp, event); break; } if (mask != 0) { s.keyInputHappened = true; int type = ((mask & modifiers) != 0) ? SWT.KeyDown : SWT.KeyUp; if (type == (SWT.KeyDown)) s.keyInputHappened = true; org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); event.keyCode = keyCode; setInputState(event, nsEvent, type); if (!(sendKeyEvent(type, event))) return; } } } super.flagsChanged(id, sel, theEvent); }
int filterProc(int xEvent, int gdkEvent, int data2) { int eventType = org.eclipse.swt.widgets.OS.X_EVENT_TYPE(xEvent); if ((eventType != (OS.FocusOut)) && (eventType != (OS.FocusIn))) return 0; org.eclipse.swt.widgets.XFocusChangeEvent xFocusEvent = new org.eclipse.swt.widgets.XFocusChangeEvent(); org.eclipse.swt.widgets.OS.memmove(xFocusEvent, xEvent, XFocusChangeEvent.sizeof); switch (eventType) { case OS.FocusIn : if (((xFocusEvent.mode) == (OS.NotifyNormal)) || ((xFocusEvent.mode) == (OS.NotifyWhileGrabbed))) { if (((xFocusEvent.detail) == (OS.NotifyNonlinear)) || ((xFocusEvent.detail) == (OS.NotifyAncestor))) { if ((tooltipsHandle) != 0) org.eclipse.swt.widgets.OS.gtk_tooltips_enable(tooltipsHandle); display.activeShell = this; display.activePending = false; sendEvent(SWT.Activate); } } break; case OS.FocusOut : if (((xFocusEvent.mode) == (OS.NotifyNormal)) || ((xFocusEvent.mode) == (OS.NotifyWhileGrabbed))) { if (((xFocusEvent.detail) == (OS.NotifyNonlinearVirtual)) || ((xFocusEvent.detail) == (OS.NotifyVirtual))) { if ((tooltipsHandle) != 0) org.eclipse.swt.widgets.OS.gtk_tooltips_disable(tooltipsHandle); org.eclipse.swt.widgets.Display display = this.display; sendEvent(SWT.Deactivate); setActiveControl(null); if ((display.activeShell) == (this)) { display.activeShell = null; display.activePending = false; } } } break; } return 0; }
int readImageRef(int path) { int image = 0; int url = org.eclipse.swt.internal.carbon.OS.CFURLCreateFromFileSystemRepresentation(OS.kCFAllocatorDefault, path, org.eclipse.swt.internal.carbon.OS.strlen(path), false); if (url != 0) { int extention = org.eclipse.swt.internal.carbon.OS.CFURLCopyPathExtension(url); if (extention != 0) { int length = org.eclipse.swt.internal.carbon.OS.CFStringGetLength(extention); char[] buffer = new char[length]; org.eclipse.swt.internal.carbon.CFRange range = new org.eclipse.swt.internal.carbon.CFRange(); range.length = length; org.eclipse.swt.internal.carbon.OS.CFStringGetCharacters(extention, range, buffer); java.lang.String ext = new java.lang.String(buffer); if (ext.equalsIgnoreCase("png")) { int provider = org.eclipse.swt.internal.carbon.OS.CGDataProviderCreateWithURL(url); if (provider != 0) { image = org.eclipse.swt.internal.carbon.OS.CGImageCreateWithPNGDataProvider(provider, null, true, OS.kCGRenderingIntentDefault); org.eclipse.swt.internal.carbon.OS.CGDataProviderRelease(provider); } } else if ((ext.equalsIgnoreCase("jpeg")) || (ext.equals("jpg"))) { int provider = org.eclipse.swt.internal.carbon.OS.CGDataProviderCreateWithURL(url); if (provider != 0) { image = org.eclipse.swt.internal.carbon.OS.CGImageCreateWithJPEGDataProvider(provider, null, true, OS.kCGRenderingIntentDefault); org.eclipse.swt.internal.carbon.OS.CGDataProviderRelease(provider); } } else if (ext.equalsIgnoreCase("icns")) { byte[] fsRef = new byte[80]; if (org.eclipse.swt.internal.carbon.OS.CFURLGetFSRef(url, fsRef)) { byte[] fsSpec = new byte[70]; if ((org.eclipse.swt.internal.carbon.OS.FSGetCatalogInfo(fsRef, 0, null, null, fsSpec, null)) == (org.eclipse.swt.internal.carbon.OS.noErr)) { int[] iconFamily = new int[1]; org.eclipse.swt.internal.carbon.OS.ReadIconFile(fsSpec, iconFamily); if ((iconFamily[0]) != 0) { int[] icon = createImageFromFamily(iconFamily[0], OS.kThumbnail32BitData, OS.kThumbnail8BitMask, 128, 128); if (icon == null) icon = createImageFromFamily(iconFamily[0], OS.kHuge32BitData, OS.kHuge8BitMask, 64, 64); if (icon == null) icon = createImageFromFamily(iconFamily[0], OS.kLarge32BitData, OS.kLarge8BitMask, 32, 32); if (icon != null) image = icon[0]; org.eclipse.swt.internal.carbon.OS.DisposeHandle(iconFamily[0]); } } } } org.eclipse.swt.internal.carbon.OS.CFRelease(extention); } org.eclipse.swt.internal.carbon.OS.CFRelease(url); } return image; }
void drawBackground(int control, int context) { if (((style) & (SWT.SEPARATOR)) != 0) { fillBackground(control, context, null); } }
public void setPrinterData(org.eclipse.swt.printing.PrinterData data) { if (data == null) data = new org.eclipse.swt.printing.PrinterData(); this.printerData = data; }
java.lang.Object convertToJava(org.eclipse.swt.browser.Variant variant) { switch (variant.getType()) { case OLE.VT_EMPTY : case OLE.VT_NULL : return null; case OLE.VT_BSTR : return variant.getString(); case OLE.VT_BOOL : return new java.lang.Boolean(variant.getBoolean()); case OLE.VT_I2 : case OLE.VT_I4 : case OLE.VT_I8 : case OLE.VT_R4 : case OLE.VT_R8 : return new java.lang.Double(variant.getDouble()); case OLE.VT_DISPATCH : { java.lang.Object[] args = null; org.eclipse.swt.browser.OleAutomation auto = variant.getAutomation(); org.eclipse.swt.browser.TYPEATTR typeattr = auto.getTypeInfoAttributes(); if (typeattr != null) { org.eclipse.swt.browser.GUID guid = new org.eclipse.swt.browser.GUID(); guid.Data1 = typeattr.guid_Data1; guid.Data2 = typeattr.guid_Data2; guid.Data3 = typeattr.guid_Data3; guid.Data4 = typeattr.guid_Data4; if (org.eclipse.swt.browser.COM.IsEqualGUID(guid, COM.IIDIJScriptTypeInfo)) { int[] rgdispid = auto.getIDsOfNames(new java.lang.String[]{ "length" }); if (rgdispid != null) { org.eclipse.swt.browser.Variant varLength = auto.getProperty(rgdispid[0]); int length = varLength.getInt(); varLength.dispose(); args = new java.lang.Object[length]; for (int i = 0; i < length; i++) { rgdispid = auto.getIDsOfNames(new java.lang.String[]{ java.lang.String.valueOf(i) }); if (rgdispid != null) { org.eclipse.swt.browser.Variant current = auto.getProperty(rgdispid[0]); try { args[i] = convertToJava(current); current.dispose(); } catch (java.lang.IllegalArgumentException e) { current.dispose(); auto.dispose(); throw e; } } } } } else { auto.dispose(); org.eclipse.swt.browser.SWT.error(SWT.ERROR_INVALID_ARGUMENT); } } auto.dispose(); return args; } } org.eclipse.swt.browser.SWT.error(SWT.ERROR_INVALID_ARGUMENT); return null; }
void releaseHandle() { super.releaseHandle(); if ((this.scrollView) != null) { this.scrollView.release(); } this.scrollView = null; }
int setBounds(int x, int y, int width, int height, boolean move, boolean resize) { long topHandle = topHandle(); boolean sendMove = move; org.eclipse.swt.widgets.GtkAllocation allocation = new org.eclipse.swt.widgets.GtkAllocation(); gtk_widget_get_allocation(topHandle, allocation); if (((parent.style) & (SWT.MIRRORED)) != 0) { int clientWidth = parent.getClientWidth(); int oldWidth = (((state) & (ZERO_WIDTH)) != 0) ? 0 : allocation.width; int oldX = (clientWidth - oldWidth) - (allocation.x); if (move) { sendMove &= x != oldX; x = (clientWidth - (resize ? width : oldWidth)) - x; } else { move = true; x = (clientWidth - (resize ? width : oldWidth)) - oldX; y = allocation.y; } } boolean sameOrigin = true; boolean sameExtent = true; if (move) { int oldX = allocation.x; int oldY = allocation.y; sameOrigin = (x == oldX) && (y == oldY); if (!sameOrigin) { if ((enableWindow) != 0) { org.eclipse.swt.widgets.OS.gdk_window_move(enableWindow, x, y); } moveHandle(x, y); } } int clientWidth = 0; if (resize) { int oldWidth = (((state) & (ZERO_WIDTH)) != 0) ? 0 : allocation.width; int oldHeight = (((state) & (ZERO_HEIGHT)) != 0) ? 0 : allocation.height; sameExtent = (width == oldWidth) && (height == oldHeight); if ((!sameExtent) && (((style) & (SWT.MIRRORED)) != 0)) clientWidth = getClientWidth(); if ((!sameExtent) && (!((width == 0) && (height == 0)))) { int newWidth = java.lang.Math.max(1, width); int newHeight = java.lang.Math.max(1, height); if ((redrawWindow) != 0) { org.eclipse.swt.widgets.OS.gdk_window_resize(redrawWindow, newWidth, newHeight); } if ((enableWindow) != 0) { org.eclipse.swt.widgets.OS.gdk_window_resize(enableWindow, newWidth, newHeight); } resizeHandle(newWidth, newHeight); } } if ((!sameOrigin) || (!sameExtent)) { org.eclipse.swt.widgets.GtkRequisition requisition = new org.eclipse.swt.widgets.GtkRequisition(); gtk_widget_size_request(topHandle, requisition); if (move) { allocation.x = x; allocation.y = y; } if (resize) { allocation.width = width; allocation.height = height; } if (((OS.GTK_VERSION) >= (org.eclipse.swt.widgets.OS.VERSION(3, 8, 0))) && (!(org.eclipse.swt.widgets.OS.gtk_widget_get_visible(handle)))) { org.eclipse.swt.widgets.OS.gtk_widget_show(handle); org.eclipse.swt.widgets.OS.gtk_widget_size_allocate(topHandle, allocation); org.eclipse.swt.widgets.OS.gtk_widget_hide(handle); } else { org.eclipse.swt.widgets.OS.gtk_widget_size_allocate(topHandle, allocation); } } if (!sameExtent) { state = (width == 0) ? (state) | (ZERO_WIDTH) : (state) & (~(ZERO_WIDTH)); state = (height == 0) ? (state) | (ZERO_HEIGHT) : (state) & (~(ZERO_HEIGHT)); if (((state) & ((ZERO_WIDTH) | (ZERO_HEIGHT))) != 0) { if ((enableWindow) != 0) { org.eclipse.swt.widgets.OS.gdk_window_hide(enableWindow); } org.eclipse.swt.widgets.OS.gtk_widget_hide(topHandle); } else { if (((state) & (HIDDEN)) == 0) { if ((enableWindow) != 0) { org.eclipse.swt.widgets.OS.gdk_window_show_unraised(enableWindow); } org.eclipse.swt.widgets.OS.gtk_widget_show(topHandle); } } if (((style) & (SWT.MIRRORED)) != 0) moveChildren(clientWidth); } int result = 0; if (move && (!sameOrigin)) { org.eclipse.swt.widgets.Control control = findBackgroundControl(); if ((control != null) && ((control.backgroundImage) != null)) { if (isVisible()) redrawWidget(0, 0, 0, 0, true, true, true); } if (sendMove) sendEvent(SWT.Move); result |= MOVED; } if (resize && (!sameExtent)) { sendEvent(SWT.Resize); result |= RESIZED; } return result; }
void init() { if (!(Mozilla.IsPre_4)) { browser.addListener(SWT.Traverse, new org.eclipse.swt.browser.Listener() { public void handleEvent(org.eclipse.swt.browser.Event event) { if (((event.detail) & ((org.eclipse.swt.SWT.TRAVERSE_TAB_NEXT) | (org.eclipse.swt.SWT.TRAVERSE_TAB_PREVIOUS))) == 0) return; int[] result = new int[1]; int rc = org.eclipse.swt.browser.XPCOM.NS_GetServiceManager(result); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); if ((result[0]) == 0) org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); org.eclipse.swt.browser.nsIServiceManager serviceManager = new org.eclipse.swt.browser.nsIServiceManager(result[0]); result[0] = 0; byte[] aContractID = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_FOCUSMANAGER_CONTRACTID, true); rc = serviceManager.GetServiceByContractID(aContractID, nsIFocusManager.NS_IFOCUSMANAGER_10_IID, result); serviceManager.Release(); if ((rc == (XPCOM.NS_OK)) && ((result[0]) != 0)) { org.eclipse.swt.browser.nsIFocusManager focusManager = new org.eclipse.swt.browser.nsIFocusManager(result[0]); result[0] = 0; rc = focusManager.GetFocusedElement(result); focusManager.Release(); event.doit = (result[0]) == 0; if ((rc == (XPCOM.NS_OK)) && ((result[0]) != 0)) { new org.eclipse.swt.browser.nsISupports(result[0]).Release(); } } } }); } }
void drag(org.eclipse.swt.dnd.Event dragEvent) { org.eclipse.swt.dnd.DNDEvent event = new org.eclipse.swt.dnd.DNDEvent(); event.widget = this; event.x = dragEvent.x; event.y = dragEvent.y; event.time = dragEvent.time; event.doit = true; notifyListeners(DND.DragStart, event); if (((!(event.doit)) || ((transferAgents) == null)) || ((transferAgents.length) == 0)) return; org.eclipse.swt.dnd.NSPasteboard dragBoard = org.eclipse.swt.dnd.NSPasteboard.pasteboardWithName(OS.NSDragPboard); org.eclipse.swt.dnd.NSMutableArray nativeTypeArray = org.eclipse.swt.dnd.NSMutableArray.arrayWithCapacity(10); for (int i = 0; i < (transferAgents.length); i++) { org.eclipse.swt.dnd.Transfer transfer = transferAgents[i]; if (transfer != null) { java.lang.String[] typeNames = transfer.getTypeNames(); for (int j = 0; j < (typeNames.length); j++) { nativeTypeArray.addObject(org.eclipse.swt.dnd.NSString.stringWith(typeNames[j])); } } } if (nativeTypeArray != null) dragBoard.declareTypes(nativeTypeArray, dragSourceDelegate); org.eclipse.swt.dnd.NSEvent currEvent = org.eclipse.swt.dnd.NSApplication.sharedApplication().currentEvent(); org.eclipse.swt.dnd.NSPoint pt = currEvent.locationInWindow(); org.eclipse.swt.dnd.NSPoint viewPt = control.view.convertPoint_fromView_(pt, null); dragOperations = opToOsOp(getStyle()); org.eclipse.swt.dnd.NSImage dragImage = null; org.eclipse.swt.dnd.Image defaultDragImage = null; try { org.eclipse.swt.dnd.Image image = event.image; if (image == null) { org.eclipse.swt.dnd.Image newDragImage = new org.eclipse.swt.dnd.Image(org.eclipse.swt.dnd.Display.getCurrent(), 20, 20); org.eclipse.swt.dnd.GC imageGC = new org.eclipse.swt.dnd.GC(newDragImage); org.eclipse.swt.dnd.Color grayColor = new org.eclipse.swt.dnd.Color(org.eclipse.swt.dnd.Display.getCurrent(), 50, 50, 50); imageGC.setForeground(grayColor); imageGC.drawRectangle(0, 0, 19, 19); imageGC.dispose(); org.eclipse.swt.dnd.ImageData newImageData = newDragImage.getImageData(); newImageData.alpha = ((int) (255 * 0.4)); defaultDragImage = new org.eclipse.swt.dnd.Image(org.eclipse.swt.dnd.Display.getCurrent(), newImageData); newDragImage.dispose(); grayColor.dispose(); image = defaultDragImage; } dragImage = image.handle; org.eclipse.swt.dnd.NSSize imageSize = dragImage.size(); viewPt.x -= (imageSize.width) / 2; if (control.view.isFlipped()) viewPt.y += (imageSize.height) / 2; else viewPt.y -= (imageSize.height) / 2; org.eclipse.swt.dnd.NSSize ignored = new org.eclipse.swt.dnd.NSSize(); ignored.width = 0; ignored.height = 0; dragStarted = false; control.view.dragImage(dragImage, viewPt, ignored, org.eclipse.swt.dnd.NSApplication.sharedApplication().currentEvent(), dragBoard, dragSourceDelegate, true); if (!(dragStarted)) { event = new org.eclipse.swt.dnd.DNDEvent(); event.widget = this; event.time = ((int) (java.lang.System.currentTimeMillis())); event.doit = false; event.detail = DND.DROP_NONE; notifyListeners(DND.DragEnd, event); } } finally { if (defaultDragImage != null) defaultDragImage.dispose(); } }
org.eclipse.swt.custom.Rectangle computeBounds() { if ((((item) == null) || ((column) == (-1))) || (item.isDisposed())) return new org.eclipse.swt.custom.Rectangle(0, 0, 0, 0); org.eclipse.swt.custom.Rectangle cell = item.getBounds(column); org.eclipse.swt.custom.Rectangle rect = item.getImageBounds(column); if ((rect.width) != 0) { int imageGap = java.lang.Math.max(((rect.x) - (cell.x)), 0); cell.x = (rect.x) + (rect.width); cell.width -= imageGap + (rect.width); } org.eclipse.swt.custom.Rectangle area = table.getClientArea(); if ((cell.x) < ((area.x) + (area.width))) { if (((cell.x) + (cell.width)) > ((area.x) + (area.width))) { cell.width = ((area.x) + (area.width)) - (cell.x); } } org.eclipse.swt.custom.Rectangle editorRect = new org.eclipse.swt.custom.Rectangle(cell.x, cell.y, minimumWidth, minimumHeight); if (grabHorizontal) { editorRect.width = java.lang.Math.max(cell.width, minimumWidth); } if (grabVertical) { editorRect.height = java.lang.Math.max(cell.height, minimumHeight); } if ((horizontalAlignment) == (SWT.RIGHT)) { editorRect.x += (cell.width) - (editorRect.width); } else if ((horizontalAlignment) == (SWT.LEFT)) { } else { editorRect.x += ((cell.width) - (editorRect.width)) / 2; } if ((verticalAlignment) == (SWT.BOTTOM)) { editorRect.y += (cell.height) - (editorRect.height); } else if ((verticalAlignment) == (SWT.TOP)) { } else { editorRect.y += ((cell.height) - (editorRect.height)) / 2; } return editorRect; }
int processMouseDown(int int0, int int1, int int2) { int result = super.processMouseDown(int0, int1, int2); if (((style) & (SWT.MULTI)) != 0) selected = true; double[] px = new double[1]; double[] py = new double[1]; org.eclipse.swt.widgets.OS.gdk_event_get_coords(int0, px, py); int x = ((int) (px[0])); int y = ((int) (py[0])); if (((style) & (SWT.CHECK)) != 0) { if (!(org.eclipse.swt.widgets.OS.gtk_ctree_is_hot_spot(handle, x, y))) { int[] row = new int[1]; int[] column = new int[1]; if ((org.eclipse.swt.widgets.OS.gtk_clist_get_selection_info(handle, x, y, row, column)) != 0) { int node = org.eclipse.swt.widgets.OS.gtk_ctree_node_nth(handle, row[0]); int crow = org.eclipse.swt.widgets.OS.g_list_nth_data(node, 0); org.eclipse.swt.widgets.GtkCTreeRow row_data = new org.eclipse.swt.widgets.GtkCTreeRow(); org.eclipse.swt.widgets.OS.memmove(row_data, crow, GtkCTreeRow.sizeof); int nX = ((org.eclipse.swt.widgets.OS.GTK_CLIST_HOFFSET(handle)) + ((org.eclipse.swt.widgets.OS.GTK_CTREE_TREE_INDENT(handle)) * (row_data.level))) - 2; int nY = ((org.eclipse.swt.widgets.OS.GTK_CLIST_VOFFSET(handle)) + (((org.eclipse.swt.widgets.OS.GTK_CLIST_ROW_HEIGHT(handle)) + 1) * (row[0]))) + 2; int[] check_width = new int[1]; int[] check_height = new int[1]; org.eclipse.swt.widgets.OS.gdk_drawable_get_size(check, check_width, check_height); if ((nX <= x) && (x <= (nX + (check_width[0])))) { if ((nY <= y) && (y <= (nY + (check_height[0])))) { byte[] spacing = new byte[1]; boolean[] is_leaf = new boolean[1]; boolean[] expanded = new boolean[1]; int[] pixmap = new int[1]; int[] mask = new int[1]; int index = (org.eclipse.swt.widgets.OS.gtk_ctree_node_get_row_data(handle, node)) - 1; byte[] text = org.eclipse.swt.widgets.Converter.wcsToMbcs(null, items[index].getText(), true); org.eclipse.swt.widgets.OS.gtk_ctree_get_node_info(handle, node, null, spacing, pixmap, mask, pixmap, mask, is_leaf, expanded); pixmap[0] = ((pixmap[0]) == (check)) ? uncheck : check; org.eclipse.swt.widgets.OS.gtk_ctree_set_node_info(handle, node, text, spacing[0], pixmap[0], mask[0], pixmap[0], mask[0], is_leaf[0], expanded[0]); org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); event.detail = SWT.CHECK; event.item = items[index]; postEvent(SWT.Selection, event); } } } } } org.eclipse.swt.widgets.GdkEvent gdkEvent = new org.eclipse.swt.widgets.GdkEvent(); org.eclipse.swt.widgets.OS.memmove(gdkEvent, int0, GdkEvent.sizeof); if ((gdkEvent.type) == (OS.GDK_2BUTTON_PRESS)) { if (hooks(SWT.DefaultSelection)) return 1; } return result; }
void handleTextChanged(org.eclipse.swt.custom.TextChangedEvent event) { lineCache.textChanged(lastTextChangeStart, lastTextChangeNewLineCount, lastTextChangeReplaceLineCount, lastTextChangeNewCharCount, lastTextChangeReplaceCharCount); setScrollBars(); updateSelection(lastTextChangeStart, lastTextChangeReplaceCharCount, lastTextChangeNewCharCount); if ((lastTextChangeReplaceLineCount) > 0) { claimBottomFreeSpace(); } if ((lastTextChangeReplaceCharCount) > 0) { claimRightFreeSpace(); } if (((lastTextChangeNewLineCount) == 0) && ((lastTextChangeReplaceLineCount) == 0)) { int startLine = content.getLineAtOffset(lastTextChangeStart); int startY = ((startLine * (lineHeight)) - (verticalScrollOffset)) + (topMargin); if (org.eclipse.swt.custom.StyledText.DOUBLE_BUFFERED) { org.eclipse.swt.custom.GC gc = getGC(); org.eclipse.swt.custom.Caret caret = getCaret(); boolean caretVisible = false; if (caret != null) { caretVisible = caret.getVisible(); caret.setVisible(false); } performPaint(gc, startLine, startY, lineHeight); if (caret != null) { caret.setVisible(caretVisible); } gc.dispose(); } else { redraw(startY, 0, getClientArea().width, lineHeight, false); update(); } } }
int kEventMouseDragged(int nextHandler, int theEvent, int userData) { if (((state) & (CANVAS)) == 0) { if (isEnabledModal()) sendMouseEvent(SWT.MouseMove, ((short) (0)), theEvent); display.dragDetect(this); } return org.eclipse.swt.internal.carbon.OS.eventNotHandledErr; }
void checkGC(int mask) { int state = data.state; if ((state & mask) == mask) return; state = (state ^ mask) & mask; data.state |= mask; int gdipGraphics = data.gdipGraphics; if (gdipGraphics != 0) { int pen = data.gdipPen; int width = data.lineWidth; if ((state & (org.eclipse.swt.graphics.GC.FOREGROUND)) != 0) { if ((data.gdipFgBrush) != 0) org.eclipse.swt.graphics.Gdip.SolidBrush_delete(data.gdipFgBrush); data.gdipFgBrush = 0; int brush; org.eclipse.swt.graphics.Pattern pattern = data.foregroundPattern; if (pattern != null) { brush = pattern.handle; } else { int foreground = data.foreground; int rgb = (((foreground >> 16) & 255) | (foreground & 65280)) | ((foreground & 255) << 16); int color = org.eclipse.swt.graphics.Gdip.Color_new((((data.alpha) << 24) | rgb)); if (color == 0) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NO_HANDLES); brush = org.eclipse.swt.graphics.Gdip.SolidBrush_new(color); if (brush == 0) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NO_HANDLES); org.eclipse.swt.graphics.Gdip.Color_delete(color); data.gdipFgBrush = brush; brush = data.gdipFgBrush; } if (pen != 0) { org.eclipse.swt.graphics.Gdip.Pen_SetBrush(pen, brush); } else { pen = data.gdipPen = org.eclipse.swt.graphics.Gdip.Pen_new(brush, java.lang.Math.max(1, width)); } } if ((state & (org.eclipse.swt.graphics.GC.LINE_WIDTH)) != 0) { org.eclipse.swt.graphics.Gdip.Pen_SetWidth(pen, java.lang.Math.max(1, width)); } if ((state & (org.eclipse.swt.graphics.GC.LINE_STYLE)) != 0) { float[] dashes = null; int dashStyle = Gdip.DashStyleSolid; switch (data.lineStyle) { case SWT.LINE_SOLID : break; case SWT.LINE_DOT : dashStyle = Gdip.DashStyleDot; if (width == 0) dashes = org.eclipse.swt.graphics.GC.LINE_DOT_ZERO; break; case SWT.LINE_DASH : dashStyle = Gdip.DashStyleDash; if (width == 0) dashes = org.eclipse.swt.graphics.GC.LINE_DASH_ZERO; break; case SWT.LINE_DASHDOT : dashStyle = Gdip.DashStyleDashDot; if (width == 0) dashes = org.eclipse.swt.graphics.GC.LINE_DASHDOT_ZERO; break; case SWT.LINE_DASHDOTDOT : dashStyle = Gdip.DashStyleDashDotDot; if (width == 0) dashes = org.eclipse.swt.graphics.GC.LINE_DASHDOTDOT_ZERO; break; case SWT.LINE_CUSTOM : { if ((data.lineDashes) != null) { dashes = new float[(data.lineDashes.length) * 2]; for (int i = 0; i < (data.lineDashes.length); i++) { float dash = ((float) (data.lineDashes[i])) / (java.lang.Math.max(1, width)); dashes[i] = dash; dashes[(i + (data.lineDashes.length))] = dash; } } } } if (dashes != null) { org.eclipse.swt.graphics.Gdip.Pen_SetDashPattern(pen, dashes, dashes.length); org.eclipse.swt.graphics.Gdip.Pen_SetDashStyle(pen, Gdip.DashStyleCustom); } else { org.eclipse.swt.graphics.Gdip.Pen_SetDashStyle(pen, dashStyle); } } if ((state & (org.eclipse.swt.graphics.GC.LINE_JOIN)) != 0) { int joinStyle = 0; switch (data.lineJoin) { case SWT.JOIN_MITER : joinStyle = Gdip.LineJoinMiter; break; case SWT.JOIN_BEVEL : joinStyle = Gdip.LineJoinBevel; break; case SWT.JOIN_ROUND : joinStyle = Gdip.LineJoinRound; break; } org.eclipse.swt.graphics.Gdip.Pen_SetLineJoin(pen, joinStyle); } if ((state & (org.eclipse.swt.graphics.GC.LINE_CAP)) != 0) { int dashCap = Gdip.DashCapFlat; int capStyle = 0; switch (data.lineCap) { case SWT.CAP_FLAT : capStyle = Gdip.LineCapFlat; break; case SWT.CAP_ROUND : capStyle = Gdip.LineCapRound; dashCap = Gdip.DashCapRound; break; case SWT.CAP_SQUARE : capStyle = Gdip.LineCapSquare; break; } org.eclipse.swt.graphics.Gdip.Pen_SetLineCap(pen, capStyle, capStyle, dashCap); } if ((state & (org.eclipse.swt.graphics.GC.BACKGROUND)) != 0) { if ((data.gdipBgBrush) != 0) org.eclipse.swt.graphics.Gdip.SolidBrush_delete(data.gdipBgBrush); data.gdipBgBrush = 0; org.eclipse.swt.graphics.Pattern pattern = data.backgroundPattern; if (pattern != null) { data.gdipBrush = pattern.handle; } else { int background = data.background; int rgb = (((background >> 16) & 255) | (background & 65280)) | ((background & 255) << 16); int color = org.eclipse.swt.graphics.Gdip.Color_new((((data.alpha) << 24) | rgb)); if (color == 0) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NO_HANDLES); int brush = org.eclipse.swt.graphics.Gdip.SolidBrush_new(color); if (brush == 0) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NO_HANDLES); org.eclipse.swt.graphics.Gdip.Color_delete(color); data.gdipBrush = data.gdipBgBrush = brush; } } if ((state & (org.eclipse.swt.graphics.GC.FONT)) != 0) { org.eclipse.swt.graphics.OS.SelectObject(handle, data.hFont); int font = org.eclipse.swt.graphics.GC.createGdipFont(handle, data.hFont); if ((data.gdipFont) != 0) org.eclipse.swt.graphics.Gdip.Font_delete(data.gdipFont); data.gdipFont = font; } return; } if ((state & (((((org.eclipse.swt.graphics.GC.FOREGROUND) | (org.eclipse.swt.graphics.GC.LINE_CAP)) | (org.eclipse.swt.graphics.GC.LINE_JOIN)) | (org.eclipse.swt.graphics.GC.LINE_STYLE)) | (org.eclipse.swt.graphics.GC.LINE_WIDTH))) != 0) { int color = data.foreground; int width = data.lineWidth; int[] dashes = null; int lineStyle = OS.PS_SOLID; switch (data.lineStyle) { case SWT.LINE_SOLID : break; case SWT.LINE_DASH : lineStyle = OS.PS_DASH; break; case SWT.LINE_DOT : lineStyle = OS.PS_DOT; break; case SWT.LINE_DASHDOT : lineStyle = OS.PS_DASHDOT; break; case SWT.LINE_DASHDOTDOT : lineStyle = OS.PS_DASHDOTDOT; break; case SWT.LINE_CUSTOM : { if ((data.lineDashes) != null) { lineStyle = OS.PS_USERSTYLE; dashes = data.lineDashes; } break; } } if ((state & (org.eclipse.swt.graphics.GC.LINE_STYLE)) != 0) { org.eclipse.swt.graphics.OS.SetBkMode(handle, ((data.lineStyle) == (SWT.LINE_SOLID) ? OS.OPAQUE : OS.TRANSPARENT)); } int joinStyle = 0; switch (data.lineJoin) { case SWT.JOIN_MITER : joinStyle = OS.PS_JOIN_MITER; break; case SWT.JOIN_ROUND : joinStyle = OS.PS_JOIN_ROUND; break; case SWT.JOIN_BEVEL : joinStyle = OS.PS_JOIN_BEVEL; break; } int capStyle = 0; switch (data.lineCap) { case SWT.CAP_ROUND : capStyle = OS.PS_ENDCAP_ROUND; break; case SWT.CAP_FLAT : capStyle = OS.PS_ENDCAP_FLAT; break; case SWT.CAP_SQUARE : capStyle = OS.PS_ENDCAP_SQUARE; break; } int style = (lineStyle | joinStyle) | capStyle; int newPen; if (((OS.IsWinCE) || ((width == 0) && (lineStyle != (OS.PS_USERSTYLE)))) || (style == 0)) { newPen = org.eclipse.swt.graphics.OS.CreatePen((style & (OS.PS_STYLE_MASK)), width, color); } else { org.eclipse.swt.graphics.LOGBRUSH logBrush = new org.eclipse.swt.graphics.LOGBRUSH(); logBrush.lbStyle = OS.BS_SOLID; logBrush.lbColor = color; newPen = org.eclipse.swt.graphics.OS.ExtCreatePen((style | (OS.PS_GEOMETRIC)), java.lang.Math.max(1, width), logBrush, (dashes != null ? dashes.length : 0), dashes); } org.eclipse.swt.graphics.OS.SelectObject(handle, newPen); data.state |= org.eclipse.swt.graphics.GC.PEN; data.state &= ~(org.eclipse.swt.graphics.GC.NULL_PEN); if ((data.hPen) != 0) org.eclipse.swt.graphics.OS.DeleteObject(data.hPen); data.hPen = data.hOldPen = newPen; } else if ((state & (org.eclipse.swt.graphics.GC.PEN)) != 0) { org.eclipse.swt.graphics.OS.SelectObject(handle, data.hOldPen); data.state &= ~(org.eclipse.swt.graphics.GC.NULL_PEN); } else if ((state & (org.eclipse.swt.graphics.GC.NULL_PEN)) != 0) { data.hOldPen = org.eclipse.swt.graphics.OS.SelectObject(handle, org.eclipse.swt.graphics.OS.GetStockObject(OS.NULL_PEN)); data.state &= ~(org.eclipse.swt.graphics.GC.PEN); } if ((state & (org.eclipse.swt.graphics.GC.BACKGROUND)) != 0) { int newBrush = org.eclipse.swt.graphics.OS.CreateSolidBrush(data.background); org.eclipse.swt.graphics.OS.SelectObject(handle, newBrush); data.state |= org.eclipse.swt.graphics.GC.BRUSH; data.state &= ~(org.eclipse.swt.graphics.GC.NULL_BRUSH); if ((data.hBrush) != 0) org.eclipse.swt.graphics.OS.DeleteObject(data.hBrush); data.hOldBrush = data.hBrush = newBrush; } else if ((state & (org.eclipse.swt.graphics.GC.BRUSH)) != 0) { org.eclipse.swt.graphics.OS.SelectObject(handle, data.hOldBrush); data.state &= ~(org.eclipse.swt.graphics.GC.NULL_BRUSH); } else if ((state & (org.eclipse.swt.graphics.GC.NULL_BRUSH)) != 0) { data.hOldBrush = org.eclipse.swt.graphics.OS.SelectObject(handle, org.eclipse.swt.graphics.OS.GetStockObject(OS.NULL_BRUSH)); data.state &= ~(org.eclipse.swt.graphics.GC.BRUSH); } if ((state & (org.eclipse.swt.graphics.GC.BACKGROUND_TEXT)) != 0) { org.eclipse.swt.graphics.OS.SetBkColor(handle, data.background); } if ((state & (org.eclipse.swt.graphics.GC.FOREGROUND_TEXT)) != 0) { org.eclipse.swt.graphics.OS.SetTextColor(handle, data.foreground); } if ((state & (org.eclipse.swt.graphics.GC.FONT)) != 0) { org.eclipse.swt.graphics.OS.SelectObject(handle, data.hFont); } }
public org.eclipse.swt.widgets.Point computeSize(int wHint, int hHint, boolean changed) { checkWidget(); int width = 0; int height = 0; int tmInternalLeading = 0; if (wHint == (SWT.DEFAULT)) { int newFont; int oldFont = 0; int hDC = org.eclipse.swt.widgets.OS.GetDC(handle); newFont = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.WM_GETFONT, 0, 0); if (newFont != 0) oldFont = org.eclipse.swt.widgets.OS.SelectObject(hDC, newFont); int count = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.CB_GETCOUNT, 0, 0); org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); int flags = (OS.DT_CALCRECT) | (OS.DT_NOPREFIX); if (((style) & (SWT.READ_ONLY)) == 0) flags |= OS.DT_EDITCONTROL; int length = org.eclipse.swt.widgets.OS.GetWindowTextLength(handle); int cp = getCodePage(); org.eclipse.swt.widgets.TCHAR buffer = new org.eclipse.swt.widgets.TCHAR(cp, (length + 1)); org.eclipse.swt.widgets.OS.GetWindowText(handle, buffer, (length + 1)); org.eclipse.swt.widgets.OS.DrawText(hDC, buffer, length, rect, flags); width = java.lang.Math.max(width, ((rect.right) - (rect.left))); for (int i = 0; i < count; i++) { length = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.CB_GETLBTEXTLEN, i, 0); if (length != (OS.CB_ERR)) { if ((length + 1) > (buffer.length())) buffer = new org.eclipse.swt.widgets.TCHAR(cp, (length + 1)); int result = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.CB_GETLBTEXT, i, buffer); if (result != (OS.CB_ERR)) { org.eclipse.swt.widgets.OS.DrawText(hDC, buffer, length, rect, flags); width = java.lang.Math.max(width, ((rect.right) - (rect.left))); } } } if (((style) & (SWT.READ_ONLY)) != 0) { org.eclipse.swt.widgets.TEXTMETRIC tm = (OS.IsUnicode) ? ((org.eclipse.swt.widgets.TEXTMETRIC) (new org.eclipse.swt.widgets.TEXTMETRICW())) : new org.eclipse.swt.widgets.TEXTMETRICA(); org.eclipse.swt.widgets.OS.GetTextMetrics(hDC, tm); tmInternalLeading = tm.tmInternalLeading; } if (newFont != 0) org.eclipse.swt.widgets.OS.SelectObject(hDC, oldFont); org.eclipse.swt.widgets.OS.ReleaseDC(handle, hDC); } if (hHint == (SWT.DEFAULT)) { if (((style) & (SWT.SIMPLE)) != 0) { int count = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.CB_GETCOUNT, 0, 0); int itemHeight = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.CB_GETITEMHEIGHT, 0, 0); height = count * itemHeight; } } if (width == 0) width = DEFAULT_WIDTH; if (height == 0) height = DEFAULT_HEIGHT; if (wHint != (SWT.DEFAULT)) width = wHint; if (hHint != (SWT.DEFAULT)) height = hHint; if (((style) & (SWT.READ_ONLY)) != 0) { width += tmInternalLeading * 2; } else { int hwndText = org.eclipse.swt.widgets.OS.GetDlgItem(handle, org.eclipse.swt.widgets.Combo.CBID_EDIT); if (hwndText != 0) { int margins = org.eclipse.swt.widgets.OS.SendMessage(hwndText, OS.EM_GETMARGINS, 0, 0); int marginWidth = (margins & 65535) + ((margins >> 16) & 65535); width += marginWidth + 3; } } org.eclipse.swt.widgets.COMBOBOXINFO pcbi = new org.eclipse.swt.widgets.COMBOBOXINFO(); pcbi.cbSize = COMBOBOXINFO.sizeof; if (((((style) & (SWT.SIMPLE)) == 0) && (!(OS.IsWinCE))) && (org.eclipse.swt.widgets.OS.GetComboBoxInfo(handle, pcbi))) { width += (pcbi.itemLeft) + ((pcbi.buttonRight) - (pcbi.buttonLeft)); height = (pcbi.buttonTop) + ((pcbi.buttonBottom) - (pcbi.buttonTop)); } else { int border = org.eclipse.swt.widgets.OS.GetSystemMetrics(OS.SM_CXEDGE); width += (org.eclipse.swt.widgets.OS.GetSystemMetrics(OS.SM_CXVSCROLL)) + (border * 2); int textHeight = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.CB_GETITEMHEIGHT, (-1), 0); if (((style) & (SWT.DROP_DOWN)) != 0) { height = textHeight + 6; } else { height += textHeight + 10; } } return new org.eclipse.swt.widgets.Point(width, height); }
void createHandle(int index, boolean fixed, boolean scrolled) { if (scrolled) { if (fixed) { fixedHandle = org.eclipse.swt.widgets.OS.g_object_new(display.gtk_fixed_get_type(), 0); if ((fixedHandle) == 0) error(SWT.ERROR_NO_HANDLES); org.eclipse.swt.widgets.OS.gtk_fixed_set_has_window(fixedHandle, true); } int vadj = org.eclipse.swt.widgets.OS.gtk_adjustment_new(0, 0, 100, 1, 10, 10); if (vadj == 0) error(SWT.ERROR_NO_HANDLES); int hadj = org.eclipse.swt.widgets.OS.gtk_adjustment_new(0, 0, 100, 1, 10, 10); if (hadj == 0) error(SWT.ERROR_NO_HANDLES); scrolledHandle = org.eclipse.swt.widgets.OS.gtk_scrolled_window_new(hadj, vadj); if ((scrolledHandle) == 0) org.eclipse.swt.widgets.SWT.error(SWT.ERROR_NO_HANDLES); } handle = org.eclipse.swt.widgets.OS.g_object_new(display.gtk_fixed_get_type(), 0); if ((handle) == 0) org.eclipse.swt.widgets.SWT.error(SWT.ERROR_NO_HANDLES); org.eclipse.swt.widgets.OS.gtk_fixed_set_has_window(handle, true); org.eclipse.swt.widgets.OS.GTK_WIDGET_SET_FLAGS(handle, OS.GTK_CAN_FOCUS); if (((style) & (SWT.EMBEDDED)) == 0) { if ((((state) & (CANVAS)) != 0) && (((style) & (SWT.NO_FOCUS)) == 0)) { if ((display.getData(org.eclipse.swt.widgets.Composite.NO_INPUT_METHOD)) == null) { imHandle = org.eclipse.swt.widgets.OS.gtk_im_multicontext_new(); if ((imHandle) == 0) error(SWT.ERROR_NO_HANDLES); } } } if (scrolled) { if (fixed) org.eclipse.swt.widgets.OS.gtk_container_add(fixedHandle, scrolledHandle); boolean warnings = display.getWarnings(); display.setWarnings(false); org.eclipse.swt.widgets.OS.gtk_container_add(scrolledHandle, handle); display.setWarnings(warnings); int hsp = (((style) & (SWT.H_SCROLL)) != 0) ? OS.GTK_POLICY_ALWAYS : OS.GTK_POLICY_NEVER; int vsp = (((style) & (SWT.V_SCROLL)) != 0) ? OS.GTK_POLICY_ALWAYS : OS.GTK_POLICY_NEVER; org.eclipse.swt.widgets.OS.gtk_scrolled_window_set_policy(scrolledHandle, hsp, vsp); if (hasBorder()) { org.eclipse.swt.widgets.OS.gtk_scrolled_window_set_shadow_type(scrolledHandle, OS.GTK_SHADOW_ETCHED_IN); } } if (((style) & (SWT.EMBEDDED)) != 0) { socketHandle = org.eclipse.swt.widgets.OS.gtk_socket_new(); if ((socketHandle) == 0) org.eclipse.swt.widgets.SWT.error(SWT.ERROR_NO_HANDLES); org.eclipse.swt.widgets.OS.gtk_container_add(handle, socketHandle); } if ((((style) & (SWT.NO_REDRAW_RESIZE)) != 0) && (((style) & (SWT.RIGHT_TO_LEFT)) == 0)) { org.eclipse.swt.widgets.OS.gtk_widget_set_redraw_on_allocate(handle, false); } if ((((style) & (SWT.DOUBLE_BUFFERED)) == 0) && (((style) & (SWT.NO_BACKGROUND)) != 0)) { org.eclipse.swt.widgets.OS.gtk_widget_set_double_buffered(handle, false); } }
void createHandle() { if (((style) & (SWT.PUSH)) == 0) state |= THEME_BACKGROUND; org.eclipse.swt.widgets.NSButton widget = ((org.eclipse.swt.widgets.NSButton) (new org.eclipse.swt.widgets.SWTButton().alloc())); widget.init(); if (((display.smallFonts) && (((style) & ((SWT.PUSH) | (SWT.TOGGLE))) != 0)) && (((style) & (SWT.FLAT)) == 0)) { org.eclipse.swt.widgets.NSButtonCell cell = ((org.eclipse.swt.widgets.NSButtonCell) (new org.eclipse.swt.widgets.SWTButtonCell().alloc().init())); widget.setCell(cell); cell.release(); } int type = OS.NSMomentaryLightButton; if (((style) & (SWT.PUSH)) != 0) { if (((style) & (SWT.FLAT)) != 0) { widget.setBezelStyle(OS.NSShadowlessSquareBezelStyle); } else { widget.setBezelStyle(OS.NSRoundedBezelStyle); } } else if (((style) & (SWT.CHECK)) != 0) { type = OS.NSSwitchButton; } else if (((style) & (SWT.RADIO)) != 0) { type = OS.NSRadioButton; } else if (((style) & (SWT.TOGGLE)) != 0) { type = OS.NSPushOnPushOffButton; if (((style) & (SWT.FLAT)) != 0) { widget.setBezelStyle(OS.NSShadowlessSquareBezelStyle); } else { widget.setBezelStyle(OS.NSRoundedBezelStyle); } } else if (((style) & (SWT.ARROW)) != 0) { widget.setBezelStyle(OS.NSRegularSquareBezelStyle); } widget.setButtonType(type); widget.setTitle(org.eclipse.swt.widgets.NSString.stringWith("")); widget.setImagePosition(OS.NSImageLeft); widget.setTarget(widget); widget.setAction(OS.sel_sendSelection); view = widget; _setAlignment(style); }
public void setText(java.lang.String string) { checkWidget(); if (string == null) error(SWT.ERROR_NULL_ARGUMENT); if (string.equals(text)) return; text = string; org.eclipse.swt.widgets.NSTextView widget = ((org.eclipse.swt.widgets.NSTextView) (view)); widget.setString(org.eclipse.swt.widgets.NSString.stringWith(parse(string))); org.eclipse.swt.widgets.NSTextStorage textStorage = widget.textStorage(); org.eclipse.swt.widgets.NSRange range = new org.eclipse.swt.widgets.NSRange(); range.length = textStorage.length(); textStorage.removeAttribute(OS.NSLinkAttributeName, range); for (int i = 0; i < (offsets.length); i++) { range.location = offsets[i].x; range.length = ((offsets[i].y) - (offsets[i].x)) + 1; textStorage.addAttribute(OS.NSLinkAttributeName, org.eclipse.swt.widgets.NSString.stringWith(ids[i]), range); } }
synchronized void createDisplay(org.eclipse.swt.widgets.DeviceData data) { if (!(org.eclipse.swt.widgets.OS.g_thread_supported())) { org.eclipse.swt.widgets.OS.g_thread_init(0); org.eclipse.swt.widgets.OS.gdk_threads_init(); } org.eclipse.swt.widgets.OS.gtk_set_locale(); if (!(org.eclipse.swt.widgets.OS.gtk_init_check(new int[]{ 0 }, null))) { org.eclipse.swt.widgets.SWT.error(SWT.ERROR_DEVICE_DISPOSED); return; } org.eclipse.swt.widgets.OS.gdk_rgb_init(); int ptr = org.eclipse.swt.widgets.OS.gtk_check_version(2, 0, 1); if (ptr != 0) { int length = org.eclipse.swt.widgets.OS.strlen(ptr); byte[] buffer = new byte[length]; org.eclipse.swt.widgets.OS.memmove(buffer, ptr, length); java.lang.System.out.println(("***WARNING: " + (new java.lang.String(org.eclipse.swt.widgets.Converter.mbcsToWcs(null, buffer))))); } }
static synchronized void loadLibrary() { if (org.eclipse.swt.awt.SWT_AWT.loaded) return; org.eclipse.swt.awt.SWT_AWT.loaded = true; try { java.lang.System.loadLibrary("jawt"); } catch (java.lang.Throwable e) { } org.eclipse.swt.internal.Library.loadLibrary("swt-awt"); }
void createHandle() { int features = ((org.eclipse.swt.internal.carbon.OS.kControlSupportsEmbedding) | (org.eclipse.swt.internal.carbon.OS.kControlSupportsFocus)) | (org.eclipse.swt.internal.carbon.OS.kControlGetsFocusOnClick); int[] outControl = new int[1]; int window = org.eclipse.swt.internal.carbon.OS.GetControlOwner(parent.handle); org.eclipse.swt.internal.carbon.OS.CreateUserPaneControl(window, null, features, outControl); if ((outControl[0]) == 0) error(SWT.ERROR_NO_HANDLES); handle = outControl[0]; int[] theRoot = new int[1]; org.eclipse.swt.internal.carbon.OS.GetRootControl(window, theRoot); short[] oldCount = new short[1]; org.eclipse.swt.internal.carbon.OS.CountSubControls(theRoot[0], oldCount); int iFrameOptions = (org.eclipse.swt.internal.carbon.OS.kTXNDontDrawCaretWhenInactiveMask) | (org.eclipse.swt.internal.carbon.OS.kTXNMonostyledTextMask); if (((style) & (SWT.H_SCROLL)) != 0) iFrameOptions |= org.eclipse.swt.internal.carbon.OS.kTXNWantHScrollBarMask; if (((style) & (SWT.V_SCROLL)) != 0) iFrameOptions |= org.eclipse.swt.internal.carbon.OS.kTXNWantVScrollBarMask; if (((style) & (SWT.SINGLE)) != 0) iFrameOptions |= org.eclipse.swt.internal.carbon.OS.kTXNSingleLineOnlyMask; if (((style) & (SWT.WRAP)) != 0) iFrameOptions |= org.eclipse.swt.internal.carbon.OS.kTXNAlwaysWrapAtViewEdgeMask; int[] oTXNObject = new int[1]; int[] oTXNFrameID = new int[1]; org.eclipse.swt.internal.carbon.OS.TXNNewObject(0, window, null, iFrameOptions, OS.kTXNTextEditStyleFrameType, OS.kTXNUnicodeTextFile, OS.kTXNSystemDefaultEncoding, oTXNObject, oTXNFrameID, 0); if ((oTXNObject[0]) == 0) error(SWT.ERROR_NO_HANDLES); txnObject = oTXNObject[0]; txnFrameID = oTXNFrameID[0]; short[] newCount = new short[1]; org.eclipse.swt.internal.carbon.OS.CountSubControls(theRoot[0], newCount); int[] scrollBar = new int[1]; for (int i = newCount[0]; i > (oldCount[0]); --i) { org.eclipse.swt.internal.carbon.OS.GetIndexedSubControl(theRoot[0], ((short) (i)), scrollBar); org.eclipse.swt.internal.carbon.OS.HIViewRemoveFromSuperview(scrollBar[0]); org.eclipse.swt.internal.carbon.OS.HIViewAddSubview(handle, scrollBar[0]); } int ptr = org.eclipse.swt.internal.carbon.OS.NewPtr(Rect.sizeof); org.eclipse.swt.internal.carbon.Rect rect = new org.eclipse.swt.internal.carbon.Rect(); if (hasBorder()) { org.eclipse.swt.internal.carbon.OS.SetRect(rect, ((short) (1)), ((short) (1)), ((short) (1)), ((short) (1))); } org.eclipse.swt.internal.carbon.OS.memcpy(ptr, rect, Rect.sizeof); int[] tags = new int[]{ org.eclipse.swt.internal.carbon.OS.kTXNDisableDragAndDropTag, org.eclipse.swt.internal.carbon.OS.kTXNIOPrivilegesTag, org.eclipse.swt.internal.carbon.OS.kTXNMarginsTag }; int[] datas = new int[]{ 1, ((style) & (SWT.READ_ONLY)) != 0 ? 1 : 0, ptr }; org.eclipse.swt.internal.carbon.OS.TXNSetTXNObjectControls(txnObject, false, tags.length, tags, datas); org.eclipse.swt.internal.carbon.OS.TXNSetFrameBounds(txnObject, 0, 0, 0, 0, txnFrameID); org.eclipse.swt.internal.carbon.OS.DisposePtr(ptr); char[] buffer = new char[]{ ' ' }; org.eclipse.swt.internal.carbon.OS.TXNSetData(txnObject, OS.kTXNUnicodeTextData, buffer, 2, OS.kTXNStartOffset, OS.kTXNEndOffset); org.eclipse.swt.internal.carbon.OS.TXNSetData(txnObject, OS.kTXNUnicodeTextData, buffer, 0, OS.kTXNStartOffset, OS.kTXNEndOffset); }
void updateImage() { boolean drawProgress = ((progress) != 0) && ((progressState) != (SWT.DEFAULT)); boolean drawIntermidiate = (progressState) == (SWT.INDETERMINATE); org.eclipse.swt.widgets.NSApplication app = org.eclipse.swt.widgets.NSApplication.sharedApplication(); org.eclipse.swt.widgets.NSDockTile dock = app.dockTile(); boolean drawImage = ((overlayImage) != null) && ((dock.badgeLabel()) == null); if (((!drawImage) && (!drawProgress)) && (!drawIntermidiate)) { app.setApplicationIconImage(null); return; } org.eclipse.swt.widgets.NSSize size = defaultImage.size(); org.eclipse.swt.widgets.NSImage newImage = ((org.eclipse.swt.widgets.NSImage) (new org.eclipse.swt.widgets.NSImage().alloc())); newImage = newImage.initWithSize(size); org.eclipse.swt.widgets.NSBitmapImageRep rep = ((org.eclipse.swt.widgets.NSBitmapImageRep) (new org.eclipse.swt.widgets.NSBitmapImageRep().alloc())); rep = rep.initWithBitmapDataPlanes(0, ((int) (size.width)), ((int) (size.height)), 8, 4, true, false, OS.NSDeviceRGBColorSpace, ((OS.NSAlphaFirstBitmapFormat) | (OS.NSAlphaNonpremultipliedBitmapFormat)), (((int) (size.width)) * 4), 32); newImage.addRepresentation(rep); rep.release(); org.eclipse.swt.widgets.NSRect rect = new org.eclipse.swt.widgets.NSRect(); rect.height = size.height; rect.width = size.width; newImage.lockFocus(); defaultImage.drawInRect(rect, rect, OS.NSCompositeSourceOver, 1); if (drawImage) { org.eclipse.swt.widgets.NSImage badgetImage = overlayImage.handle; org.eclipse.swt.widgets.NSSize badgeSize = badgetImage.size(); org.eclipse.swt.widgets.NSRect srcRect = new org.eclipse.swt.widgets.NSRect(); srcRect.height = badgeSize.height; srcRect.width = badgeSize.width; org.eclipse.swt.widgets.NSRect dstRect = new org.eclipse.swt.widgets.NSRect(); dstRect.x = (size.width) / 2; dstRect.height = (size.height) / 2; dstRect.width = (size.width) / 2; badgetImage.drawInRect(dstRect, srcRect, OS.NSCompositeSourceOver, 1); } if (drawIntermidiate || drawProgress) { switch (progressState) { case SWT.ERROR : org.eclipse.swt.widgets.NSColor.colorWithDeviceRed(1, 0, 0, 0.6F).setFill(); break; case SWT.PAUSED : org.eclipse.swt.widgets.NSColor.colorWithDeviceRed(1, 1, 0, 0.6F).setFill(); break; default : org.eclipse.swt.widgets.NSColor.colorWithDeviceRed(1, 1, 1, 0.6F).setFill(); } rect.width = (size.width) / (((org.eclipse.swt.widgets.TaskItem.PROGRESS_BARS) * 2) - 1); rect.height = (size.height) / 3; int count; if (drawIntermidiate) { count = iProgress; iProgress = ((iProgress) + 1) % ((org.eclipse.swt.widgets.TaskItem.PROGRESS_BARS) + 1); getDisplay().timerExec(org.eclipse.swt.widgets.TaskItem.PROGRESS_TIMER, new java.lang.Runnable() { public void run() { updateImage(); } }); } else { count = ((progress) * (org.eclipse.swt.widgets.TaskItem.PROGRESS_BARS)) / (org.eclipse.swt.widgets.TaskItem.PROGRESS_MAX); } for (int i = 0; i <= count; i++) { rect.x = (i * 2) * (rect.width); org.eclipse.swt.widgets.NSBezierPath.fillRect(rect); } } newImage.unlockFocus(); app.setApplicationIconImage(newImage); newImage.release(); }
void createHandle() { state |= THEME_BACKGROUND; org.eclipse.swt.widgets.NSBox widget = ((org.eclipse.swt.widgets.NSBox) (new org.eclipse.swt.widgets.SWTBox().alloc())); widget.init(); widget.setTitlePosition(OS.NSNoTitle); widget.setContentViewMargins(new org.eclipse.swt.widgets.NSSize()); org.eclipse.swt.widgets.NSView contentWidget = ((org.eclipse.swt.widgets.NSView) (new org.eclipse.swt.widgets.SWTView().alloc())); contentWidget.init(); widget.setContentView(contentWidget); contentView = contentWidget; view = widget; }
void drawImageMask(org.eclipse.swt.graphics.Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple, int imgWidth, int imgHeight) { int drawable = data.drawable; int colorPixmap = srcImage.pixmap; if ((srcImage.transparentPixel) != (-1)) srcImage.createMask(); int maskPixmap = srcImage.mask; if ((srcWidth != destWidth) || (srcHeight != destHeight)) { int pixbuf = org.eclipse.swt.graphics.OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, true, 8, srcWidth, srcHeight); if (pixbuf != 0) { int colormap = org.eclipse.swt.graphics.OS.gdk_colormap_get_system(); org.eclipse.swt.graphics.OS.gdk_pixbuf_get_from_drawable(pixbuf, colorPixmap, colormap, srcX, srcY, 0, 0, srcWidth, srcHeight); int gdkImagePtr = org.eclipse.swt.graphics.OS.gdk_drawable_get_image(maskPixmap, 0, 0, imgWidth, imgHeight); if (gdkImagePtr != 0) { int stride = org.eclipse.swt.graphics.OS.gdk_pixbuf_get_rowstride(pixbuf); int pixels = org.eclipse.swt.graphics.OS.gdk_pixbuf_get_pixels(pixbuf); byte[] line = new byte[stride]; for (int y = 0; y < srcHeight; y++) { int offset = pixels + (y * stride); org.eclipse.swt.graphics.OS.memmove(line, offset, stride); for (int x = 0; x < srcWidth; x++) { if ((org.eclipse.swt.graphics.OS.gdk_image_get_pixel(gdkImagePtr, (x + srcX), (y + srcY))) == 0) { line[((x * 4) + 3)] = 0; } } org.eclipse.swt.graphics.OS.memmove(offset, line, stride); } org.eclipse.swt.graphics.OS.g_object_unref(gdkImagePtr); int scaledPixbuf = org.eclipse.swt.graphics.OS.gdk_pixbuf_scale_simple(pixbuf, destWidth, destHeight, OS.GDK_INTERP_BILINEAR); if (scaledPixbuf != 0) { int[] colorBuffer = new int[1]; int[] maskBuffer = new int[1]; org.eclipse.swt.graphics.OS.gdk_pixbuf_render_pixmap_and_mask(scaledPixbuf, colorBuffer, maskBuffer, 128); colorPixmap = colorBuffer[0]; maskPixmap = maskBuffer[0]; org.eclipse.swt.graphics.OS.g_object_unref(scaledPixbuf); } } org.eclipse.swt.graphics.OS.g_object_unref(pixbuf); } srcX = 0; srcY = 0; srcWidth = destWidth; srcHeight = destHeight; } if ((data.clipRgn) != 0) { int newWidth = srcX + srcWidth; int newHeight = srcY + srcHeight; int bytesPerLine = ((((newWidth + 7) / 8) + 3) / 4) * 4; byte[] maskData = new byte[bytesPerLine * newHeight]; int mask = org.eclipse.swt.graphics.OS.gdk_bitmap_create_from_data(0, maskData, (bytesPerLine * 8), newHeight); if (mask != 0) { int gc = org.eclipse.swt.graphics.OS.gdk_gc_new(mask); org.eclipse.swt.graphics.OS.gdk_region_offset(data.clipRgn, ((-destX) + srcX), ((-destY) + srcY)); org.eclipse.swt.graphics.OS.gdk_gc_set_clip_region(gc, data.clipRgn); org.eclipse.swt.graphics.OS.gdk_region_offset(data.clipRgn, (-destX), (-destY)); org.eclipse.swt.graphics.GdkColor color = new org.eclipse.swt.graphics.GdkColor(); color.pixel = 1; org.eclipse.swt.graphics.OS.gdk_gc_set_foreground(gc, color); org.eclipse.swt.graphics.OS.gdk_draw_rectangle(mask, gc, 1, 0, 0, newWidth, newHeight); org.eclipse.swt.graphics.OS.gdk_gc_set_function(gc, OS.GDK_AND); org.eclipse.swt.graphics.OS.gdk_draw_drawable(mask, gc, maskPixmap, 0, 0, 0, 0, newWidth, newHeight); org.eclipse.swt.graphics.OS.g_object_unref(gc); if ((maskPixmap != 0) && ((srcImage.mask) != maskPixmap)) org.eclipse.swt.graphics.OS.g_object_unref(maskPixmap); maskPixmap = mask; } } org.eclipse.swt.graphics.GdkGCValues values = new org.eclipse.swt.graphics.GdkGCValues(); org.eclipse.swt.graphics.OS.gdk_gc_get_values(handle, values); org.eclipse.swt.graphics.OS.gdk_gc_set_clip_mask(handle, maskPixmap); org.eclipse.swt.graphics.OS.gdk_gc_set_clip_origin(handle, (destX - srcX), (destY - srcY)); org.eclipse.swt.graphics.OS.gdk_draw_drawable(drawable, handle, colorPixmap, srcX, srcY, destX, destY, srcWidth, srcHeight); org.eclipse.swt.graphics.OS.gdk_gc_set_values(handle, values, (((OS.GDK_GC_CLIP_MASK) | (OS.GDK_GC_CLIP_X_ORIGIN)) | (OS.GDK_GC_CLIP_Y_ORIGIN))); if ((data.clipRgn) != 0) org.eclipse.swt.graphics.OS.gdk_gc_set_clip_region(handle, data.clipRgn); if ((colorPixmap != 0) && ((srcImage.pixmap) != colorPixmap)) org.eclipse.swt.graphics.OS.g_object_unref(colorPixmap); if ((maskPixmap != 0) && ((srcImage.mask) != maskPixmap)) org.eclipse.swt.graphics.OS.g_object_unref(maskPixmap); if (((srcImage.transparentPixel) != (-1)) && ((srcImage.memGC) != null)) srcImage.destroyMask(); }
public boolean readAndDispatch() { checkDevice(); int xtContext = org.eclipse.swt.widgets.OS.XtDisplayToApplicationContext(xDisplay); int status = org.eclipse.swt.widgets.OS.XtAppPending(xtContext); if (status == 0) { if ((getMessageCount()) == 0) { org.eclipse.swt.widgets.OS.XtAppAddTimeOut(xtContext, 1, 0, 0); org.eclipse.swt.widgets.OS.XtAppProcessEvent(xtContext, OS.XtIMTimer); } } else { if ((status & (OS.XtIMTimer)) != 0) { org.eclipse.swt.widgets.OS.XtAppProcessEvent(xtContext, OS.XtIMTimer); status = org.eclipse.swt.widgets.OS.XtAppPending(xtContext); } if ((status & (OS.XtIMAlternateInput)) != 0) { org.eclipse.swt.widgets.OS.XtAppProcessEvent(xtContext, OS.XtIMAlternateInput); status = org.eclipse.swt.widgets.OS.XtAppPending(xtContext); } if ((status & (OS.XtIMXEvent)) != 0) { org.eclipse.swt.widgets.OS.XtAppNextEvent(xtContext, xEvent); if (!(filterEvent(xEvent))) org.eclipse.swt.widgets.OS.XtDispatchEvent(xEvent); } runDeferredEvents(); return true; } return runAsyncMessages(); }
org.eclipse.swt.widgets.LRESULT wmMouseMove(int hwnd, int wParam, int lParam) { org.eclipse.swt.widgets.LRESULT result = null; int pos = org.eclipse.swt.widgets.OS.GetMessagePos(); if ((pos != (display.lastMouse)) || (display.captureChanged)) { if (!(OS.IsWinCE)) { boolean mouseEnter = (hooks(SWT.MouseEnter)) || (display.filters(SWT.MouseEnter)); boolean mouseExit = (hooks(SWT.MouseExit)) || (display.filters(SWT.MouseExit)); boolean mouseHover = (hooks(SWT.MouseHover)) || (display.filters(SWT.MouseHover)); if ((mouseEnter || mouseExit) || mouseHover) { org.eclipse.swt.widgets.TRACKMOUSEEVENT lpEventTrack = new org.eclipse.swt.widgets.TRACKMOUSEEVENT(); lpEventTrack.cbSize = TRACKMOUSEEVENT.sizeof; lpEventTrack.dwFlags = OS.TME_QUERY; lpEventTrack.hwndTrack = hwnd; org.eclipse.swt.widgets.OS.TrackMouseEvent(lpEventTrack); if ((lpEventTrack.dwFlags) == 0) { lpEventTrack.dwFlags = (OS.TME_LEAVE) | (OS.TME_HOVER); lpEventTrack.hwndTrack = hwnd; org.eclipse.swt.widgets.OS.TrackMouseEvent(lpEventTrack); if (mouseEnter) { org.eclipse.swt.widgets.MSG msg = new org.eclipse.swt.widgets.MSG(); int flags = (((OS.PM_REMOVE) | (OS.PM_NOYIELD)) | (OS.PM_QS_INPUT)) | (OS.PM_QS_POSTMESSAGE); while (org.eclipse.swt.widgets.OS.PeekMessage(msg, 0, OS.WM_MOUSELEAVE, OS.WM_MOUSELEAVE, flags)) { org.eclipse.swt.widgets.OS.TranslateMessage(msg); org.eclipse.swt.widgets.OS.DispatchMessage(msg); } sendMouseEvent(SWT.MouseEnter, 0, hwnd, OS.WM_MOUSEMOVE, wParam, lParam); } } else { lpEventTrack.dwFlags = OS.TME_HOVER; org.eclipse.swt.widgets.OS.TrackMouseEvent(lpEventTrack); } } } if (pos != (display.lastMouse)) { display.lastMouse = pos; if (!(sendMouseEvent(SWT.MouseMove, 0, hwnd, OS.WM_MOUSEMOVE, wParam, lParam))) { result = LRESULT.ZERO; } } } display.captureChanged = false; return result; }
public void handleEvent(org.eclipse.swt.browser.Event event) { switch (event.type) { case SWT.Dispose : onDispose(); break; case SWT.Resize : onResize(); break; case SWT.FocusIn : onFocusGained(); break; case SWT.Deactivate : { org.eclipse.swt.browser.Display display = event.display; if ((this) == (display.getFocusControl())) onFocusLost(); break; } case SWT.Show : { org.eclipse.swt.browser.Display display = event.display; display.asyncExec(new java.lang.Runnable() { public void run() { if (org.eclipse.swt.browser.Browser.this.isDisposed()) return; onResize(); } }); break; } } }
void setMenu(org.eclipse.swt.widgets.Menu menu) { int[] ppv = new int[1]; int hr = org.eclipse.swt.widgets.OS.CoCreateInstance(org.eclipse.swt.widgets.TaskBar.CLSID_DestinationList, 0, OS.CLSCTX_INPROC_SERVER, org.eclipse.swt.widgets.TaskBar.IID_ICustomDestinationList, ppv); if (hr != (OS.S_OK)) error(SWT.ERROR_NO_HANDLES); int pDestList = ppv[0]; java.lang.String appName = Display.APP_NAME; char[] buffer = new char[]{ 'S', 'W', 'T', '\u0000' }; if ((appName != null) && ((appName.length()) > 0)) { int length = appName.length(); buffer = new char[length + 1]; appName.getChars(0, length, buffer, 0); } org.eclipse.swt.widgets.MenuItem[] items = null; if ((menu != null) && (((items = menu.getItems()).length) != 0)) { java.lang.String directory = null; for (int i = 0; i < (items.length); i++) { org.eclipse.swt.widgets.MenuItem item = items[i]; if (((item.getImage()) != null) && ((item.getData(org.eclipse.swt.widgets.TaskBar.ICON_KEY)) == null)) { directory = getDirectory(buffer); break; } } int poa = createShellLinkArray(items, directory); if (poa != 0) { hr = org.eclipse.swt.widgets.OS.VtblCall(3, pDestList, buffer); if (hr != (OS.S_OK)) error(SWT.ERROR_INVALID_ARGUMENT); int[] cMaxSlots = new int[1]; org.eclipse.swt.widgets.OS.VtblCall(4, pDestList, cMaxSlots, org.eclipse.swt.widgets.TaskBar.IID_IObjectArray, ppv); if (hr != (OS.S_OK)) error(SWT.ERROR_INVALID_ARGUMENT); int pRemovedItems = ppv[0]; int[] count = new int[1]; org.eclipse.swt.widgets.OS.VtblCall(3, poa, count); if ((count[0]) != 0) { hr = org.eclipse.swt.widgets.OS.VtblCall(7, pDestList, poa); if (hr != (OS.S_OK)) error(SWT.ERROR_INVALID_ARGUMENT); } for (int i = 0; i < (items.length); i++) { org.eclipse.swt.widgets.MenuItem item = items[i]; if (((item.getStyle()) & (SWT.CASCADE)) != 0) { org.eclipse.swt.widgets.Menu subMenu = item.getMenu(); if (subMenu != null) { org.eclipse.swt.widgets.MenuItem[] subItems = subMenu.getItems(); if (directory == null) { for (int j = 0; j < (subItems.length); j++) { org.eclipse.swt.widgets.MenuItem subItem = subItems[j]; if (((subItem.getImage()) != null) && ((subItem.getData(org.eclipse.swt.widgets.TaskBar.ICON_KEY)) == null)) { directory = getDirectory(buffer); break; } } } int poa2 = createShellLinkArray(subItems, directory); if (poa2 != 0) { org.eclipse.swt.widgets.OS.VtblCall(3, poa2, count); if ((count[0]) != 0) { java.lang.String text = item.getText(); int length = text.length(); char[] buffer2 = new char[length + 1]; text.getChars(0, length, buffer2, 0); hr = org.eclipse.swt.widgets.OS.VtblCall(5, pDestList, buffer2, poa2); if (hr != (OS.S_OK)) error(SWT.ERROR_INVALID_ARGUMENT); } org.eclipse.swt.widgets.OS.VtblCall(2, poa2); } } } } hr = org.eclipse.swt.widgets.OS.VtblCall(8, pDestList); if (hr != (OS.S_OK)) error(SWT.ERROR_INVALID_ARGUMENT); if (pRemovedItems != 0) org.eclipse.swt.widgets.OS.VtblCall(2, pRemovedItems); org.eclipse.swt.widgets.OS.VtblCall(2, poa); } } else { hr = org.eclipse.swt.widgets.OS.VtblCall(10, pDestList, buffer); if (hr != (OS.S_OK)) error(SWT.ERROR_INVALID_ARGUMENT); } org.eclipse.swt.widgets.OS.VtblCall(2, pDestList); }
public boolean print(org.eclipse.swt.widgets.GC gc) { checkWidget(); if (gc == null) error(SWT.ERROR_NULL_ARGUMENT); if (gc.isDisposed()) error(SWT.ERROR_INVALID_ARGUMENT); if ((!(OS.IsWinCE)) && ((OS.WIN32_VERSION) >= (org.eclipse.swt.widgets.OS.VERSION(5, 1)))) { int topHandle = topHandle(); int hdc = gc.handle; int state = 0; int gdipGraphics = gc.getGCData().gdipGraphics; if (gdipGraphics != 0) { int clipRgn = 0; org.eclipse.swt.widgets.Gdip.Graphics_SetPixelOffsetMode(gdipGraphics, Gdip.PixelOffsetModeNone); int rgn = org.eclipse.swt.widgets.Gdip.Region_new(); if (rgn == 0) org.eclipse.swt.widgets.SWT.error(SWT.ERROR_NO_HANDLES); org.eclipse.swt.widgets.Gdip.Graphics_GetClip(gdipGraphics, rgn); if (!(org.eclipse.swt.widgets.Gdip.Region_IsInfinite(rgn, gdipGraphics))) { clipRgn = org.eclipse.swt.widgets.Gdip.Region_GetHRGN(rgn, gdipGraphics); } org.eclipse.swt.widgets.Gdip.Region_delete(rgn); org.eclipse.swt.widgets.Gdip.Graphics_SetPixelOffsetMode(gdipGraphics, Gdip.PixelOffsetModeHalf); float[] lpXform = null; int matrix = org.eclipse.swt.widgets.Gdip.Matrix_new(1, 0, 0, 1, 0, 0); if (matrix == 0) org.eclipse.swt.widgets.SWT.error(SWT.ERROR_NO_HANDLES); org.eclipse.swt.widgets.Gdip.Graphics_GetTransform(gdipGraphics, matrix); if (!(org.eclipse.swt.widgets.Gdip.Matrix_IsIdentity(matrix))) { lpXform = new float[6]; org.eclipse.swt.widgets.Gdip.Matrix_GetElements(matrix, lpXform); } org.eclipse.swt.widgets.Gdip.Matrix_delete(matrix); hdc = org.eclipse.swt.widgets.Gdip.Graphics_GetHDC(gdipGraphics); state = org.eclipse.swt.widgets.OS.SaveDC(hdc); if (lpXform != null) { org.eclipse.swt.widgets.OS.SetGraphicsMode(hdc, OS.GM_ADVANCED); org.eclipse.swt.widgets.OS.SetWorldTransform(hdc, lpXform); } if (clipRgn != 0) { org.eclipse.swt.widgets.OS.SelectClipRgn(hdc, clipRgn); org.eclipse.swt.widgets.OS.DeleteObject(clipRgn); } } if (OS.IsWinCE) { org.eclipse.swt.widgets.OS.UpdateWindow(topHandle); } else { int flags = (OS.RDW_UPDATENOW) | (OS.RDW_ALLCHILDREN); org.eclipse.swt.widgets.OS.RedrawWindow(topHandle, null, 0, flags); } int bits = org.eclipse.swt.widgets.OS.GetWindowLong(topHandle, OS.GWL_STYLE); if ((bits & (OS.WS_VISIBLE)) == 0) { org.eclipse.swt.widgets.OS.DefWindowProc(topHandle, OS.WM_SETREDRAW, 1, 0); } printWidget(topHandle, hdc, gc); if ((bits & (OS.WS_VISIBLE)) == 0) { org.eclipse.swt.widgets.OS.DefWindowProc(topHandle, OS.WM_SETREDRAW, 0, 0); } if (gdipGraphics != 0) { org.eclipse.swt.widgets.OS.RestoreDC(hdc, state); org.eclipse.swt.widgets.Gdip.Graphics_ReleaseHDC(gdipGraphics, hdc); } return true; } return false; }
org.eclipse.swt.widgets.LRESULT WM_LBUTTONDOWN(int wParam, int lParam) { org.eclipse.swt.widgets.TVHITTESTINFO lpht = new org.eclipse.swt.widgets.TVHITTESTINFO(); lpht.x = ((short) (lParam & 65535)); lpht.y = ((short) (lParam >> 16)); org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_HITTEST, 0, lpht); if (((lpht.hItem) == 0) || (((lpht.flags) & (OS.TVHT_ONITEMBUTTON)) != 0)) { org.eclipse.swt.widgets.Display display = this.display; display.captureChanged = false; if (!(sendMouseEvent(SWT.MouseDown, 1, handle, OS.WM_LBUTTONDOWN, wParam, lParam))) { if ((!(display.captureChanged)) && (!(isDisposed()))) { if ((org.eclipse.swt.widgets.OS.GetCapture()) != (handle)) org.eclipse.swt.widgets.OS.SetCapture(handle); } return LRESULT.ZERO; } boolean fixSelection = false; boolean deselected = false; if (((lpht.hItem) != 0) && (((style) & (SWT.MULTI)) != 0)) { int hSelection = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETNEXTITEM, OS.TVGN_CARET, 0); if (hSelection != 0) { org.eclipse.swt.widgets.TVITEM tvItem = new org.eclipse.swt.widgets.TVITEM(); tvItem.mask = (OS.TVIF_HANDLE) | (OS.TVIF_STATE); tvItem.hItem = lpht.hItem; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETITEM, 0, tvItem); if (((tvItem.state) & (OS.TVIS_EXPANDED)) != 0) { fixSelection = true; tvItem.stateMask = OS.TVIS_SELECTED; int hNext = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETNEXTITEM, OS.TVGN_NEXTVISIBLE, lpht.hItem); while (hNext != 0) { tvItem.hItem = hNext; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETITEM, 0, tvItem); if (((tvItem.state) & (OS.TVIS_SELECTED)) != 0) deselected = true; tvItem.state = 0; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_SETITEM, 0, tvItem); int hItem = hNext = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETNEXTITEM, OS.TVGN_NEXTVISIBLE, hNext); while ((hItem != 0) && (hItem != (lpht.hItem))) { hItem = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETNEXTITEM, OS.TVGN_PARENT, hItem); } if (hItem == 0) break; } } } } dragStarted = gestureCompleted = false; if (fixSelection) ignoreDeselect = ignoreSelect = lockSelection = true; int code = callWindowProc(handle, OS.WM_LBUTTONDOWN, wParam, lParam); if (fixSelection) ignoreDeselect = ignoreSelect = lockSelection = false; if (dragStarted) { if ((!(display.captureChanged)) && (!(isDisposed()))) { if ((org.eclipse.swt.widgets.OS.GetCapture()) != (handle)) org.eclipse.swt.widgets.OS.SetCapture(handle); } } if (deselected) { org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); event.item = _getItem(lpht.hItem); postEvent(SWT.Selection, event); } return new org.eclipse.swt.widgets.LRESULT(code); } if (((style) & (SWT.CHECK)) != 0) { if (((lpht.flags) & (OS.TVHT_ONITEMSTATEICON)) != 0) { org.eclipse.swt.widgets.Display display = this.display; display.captureChanged = false; if (!(sendMouseEvent(SWT.MouseDown, 1, handle, OS.WM_LBUTTONDOWN, wParam, lParam))) { if ((!(display.captureChanged)) && (!(isDisposed()))) { if ((org.eclipse.swt.widgets.OS.GetCapture()) != (handle)) org.eclipse.swt.widgets.OS.SetCapture(handle); } return LRESULT.ZERO; } if ((!(display.captureChanged)) && (!(isDisposed()))) { if ((org.eclipse.swt.widgets.OS.GetCapture()) != (handle)) org.eclipse.swt.widgets.OS.SetCapture(handle); } org.eclipse.swt.widgets.OS.SetFocus(handle); org.eclipse.swt.widgets.TVITEM tvItem = new org.eclipse.swt.widgets.TVITEM(); tvItem.hItem = lpht.hItem; tvItem.mask = ((OS.TVIF_HANDLE) | (OS.TVIF_PARAM)) | (OS.TVIF_STATE); tvItem.stateMask = OS.TVIS_STATEIMAGEMASK; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETITEM, 0, tvItem); int state = (tvItem.state) >> 12; if ((state & 1) != 0) { state++; } else { --state; } tvItem.state = state << 12; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_SETITEM, 0, tvItem); if (!(OS.IsWinCE)) { int id = tvItem.hItem; if ((OS.COMCTL32_MAJOR) >= 6) { id = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_MAPHTREEITEMTOACCID, tvItem.hItem, 0); } org.eclipse.swt.widgets.OS.NotifyWinEvent(OS.EVENT_OBJECT_FOCUS, handle, OS.OBJID_CLIENT, id); } org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); event.item = _getItem(tvItem.hItem, tvItem.lParam); event.detail = SWT.CHECK; postEvent(SWT.Selection, event); return LRESULT.ZERO; } } if (((style) & (SWT.FULL_SELECTION)) == 0) { if (((lpht.flags) & (OS.TVHT_ONITEM)) == 0) { org.eclipse.swt.widgets.Display display = this.display; display.captureChanged = false; if (!(sendMouseEvent(SWT.MouseDown, 1, handle, OS.WM_LBUTTONDOWN, wParam, lParam))) { if ((!(display.captureChanged)) && (!(isDisposed()))) { if ((org.eclipse.swt.widgets.OS.GetCapture()) != (handle)) org.eclipse.swt.widgets.OS.SetCapture(handle); } return LRESULT.ZERO; } int code = callWindowProc(handle, OS.WM_LBUTTONDOWN, wParam, lParam); if ((!(display.captureChanged)) && (!(isDisposed()))) { if ((org.eclipse.swt.widgets.OS.GetCapture()) != (handle)) org.eclipse.swt.widgets.OS.SetCapture(handle); } return new org.eclipse.swt.widgets.LRESULT(code); } } org.eclipse.swt.widgets.TVITEM tvItem = new org.eclipse.swt.widgets.TVITEM(); tvItem.mask = (OS.TVIF_HANDLE) | (OS.TVIF_STATE); tvItem.stateMask = OS.TVIS_SELECTED; boolean hittestSelected = false; boolean focused = false; if (((style) & (SWT.MULTI)) != 0) { tvItem.hItem = lpht.hItem; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETITEM, 0, tvItem); hittestSelected = ((tvItem.state) & (OS.TVIS_SELECTED)) != 0; focused = (org.eclipse.swt.widgets.OS.GetFocus()) == (handle); } boolean redraw = false; int hOldItem = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETNEXTITEM, OS.TVGN_CARET, 0); if (((style) & (SWT.MULTI)) != 0) { tvItem.hItem = hOldItem; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETITEM, 0, tvItem); if (hittestSelected || ((wParam & (OS.MK_CONTROL)) != 0)) { redraw = (focused && ((drawCount) == 0)) && (org.eclipse.swt.widgets.OS.IsWindowVisible(handle)); if (redraw) { org.eclipse.swt.widgets.OS.UpdateWindow(handle); org.eclipse.swt.widgets.OS.DefWindowProc(handle, OS.WM_SETREDRAW, 0, 0); } } else { deselectAll(); } } org.eclipse.swt.widgets.Display display = this.display; display.captureChanged = false; if (!(sendMouseEvent(SWT.MouseDown, 1, handle, OS.WM_LBUTTONDOWN, wParam, lParam))) { if ((!(display.captureChanged)) && (!(isDisposed()))) { if ((org.eclipse.swt.widgets.OS.GetCapture()) != (handle)) org.eclipse.swt.widgets.OS.SetCapture(handle); } return LRESULT.ZERO; } dragStarted = gestureCompleted = false; ignoreDeselect = ignoreSelect = true; int code = callWindowProc(handle, OS.WM_LBUTTONDOWN, wParam, lParam); int hNewItem = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETNEXTITEM, OS.TVGN_CARET, 0); if (((style) & (SWT.FULL_SELECTION)) != 0) { int bits = org.eclipse.swt.widgets.OS.GetWindowLong(handle, OS.GWL_STYLE); if ((bits & (OS.TVS_FULLROWSELECT)) == 0) { if ((hNewItem == hOldItem) && ((lpht.hItem) != hOldItem)) { org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_SELECTITEM, OS.TVGN_CARET, lpht.hItem); hNewItem = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETNEXTITEM, OS.TVGN_CARET, 0); } } } ignoreDeselect = ignoreSelect = false; if (dragStarted) { if ((!(display.captureChanged)) && (!(isDisposed()))) { if ((org.eclipse.swt.widgets.OS.GetCapture()) != (handle)) org.eclipse.swt.widgets.OS.SetCapture(handle); } } if (((style) & (SWT.SINGLE)) != 0) { if (hOldItem == hNewItem) { tvItem.mask = (OS.TVIF_HANDLE) | (OS.TVIF_STATE); tvItem.state = OS.TVIS_SELECTED; tvItem.stateMask = OS.TVIS_SELECTED; tvItem.hItem = hNewItem; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_SETITEM, 0, tvItem); } } if (((style) & (SWT.MULTI)) != 0) { if (hittestSelected || ((wParam & (OS.MK_CONTROL)) != 0)) { if ((hOldItem == hNewItem) && (hOldItem == (lpht.hItem))) { if ((wParam & (OS.MK_CONTROL)) != 0) { tvItem.state ^= OS.TVIS_SELECTED; if (dragStarted) tvItem.state = OS.TVIS_SELECTED; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_SETITEM, 0, tvItem); } } else { if (((tvItem.state) & (OS.TVIS_SELECTED)) != 0) { tvItem.state = OS.TVIS_SELECTED; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_SETITEM, 0, tvItem); } if (((wParam & (OS.MK_CONTROL)) != 0) && (!(dragStarted))) { if (hittestSelected) { tvItem.state = 0; tvItem.hItem = lpht.hItem; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_SETITEM, 0, tvItem); } } } if (redraw) { org.eclipse.swt.widgets.RECT rect1 = new org.eclipse.swt.widgets.RECT(); org.eclipse.swt.widgets.RECT rect2 = new org.eclipse.swt.widgets.RECT(); rect1.left = hOldItem; rect2.left = hNewItem; int fItemRect = (((style) & (SWT.FULL_SELECTION)) != 0) ? 0 : 1; if ((hooks(SWT.EraseItem)) || (hooks(SWT.PaintItem))) fItemRect = 0; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETITEMRECT, fItemRect, rect1); org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETITEMRECT, fItemRect, rect2); org.eclipse.swt.widgets.OS.DefWindowProc(handle, OS.WM_SETREDRAW, 1, 0); org.eclipse.swt.widgets.OS.InvalidateRect(handle, rect1, true); org.eclipse.swt.widgets.OS.InvalidateRect(handle, rect2, true); org.eclipse.swt.widgets.OS.UpdateWindow(handle); } } if ((wParam & (OS.MK_CONTROL)) == 0) { if ((!hittestSelected) || (!(dragStarted))) { tvItem.state = 0; int oldProc = org.eclipse.swt.widgets.OS.GetWindowLong(handle, OS.GWL_WNDPROC); org.eclipse.swt.widgets.OS.SetWindowLong(handle, OS.GWL_WNDPROC, org.eclipse.swt.widgets.Tree.TreeProc); if (((style) & (SWT.VIRTUAL)) != 0) { int hItem = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETNEXTITEM, OS.TVGN_ROOT, 0); deselect(hItem, tvItem, hNewItem); } else { for (int i = 0; i < (items.length); i++) { org.eclipse.swt.widgets.TreeItem item = items[i]; if ((item != null) && ((item.handle) != hNewItem)) { tvItem.hItem = item.handle; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_SETITEM, 0, tvItem); } } } tvItem.hItem = hNewItem; tvItem.state = OS.TVIS_SELECTED; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_SETITEM, 0, tvItem); org.eclipse.swt.widgets.OS.SetWindowLong(handle, OS.GWL_WNDPROC, oldProc); if ((wParam & (OS.MK_SHIFT)) != 0) { org.eclipse.swt.widgets.RECT rect1 = new org.eclipse.swt.widgets.RECT(); if ((hAnchor) == 0) hAnchor = hNewItem; rect1.left = hAnchor; if ((org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETITEMRECT, 0, rect1)) != 0) { org.eclipse.swt.widgets.RECT rect2 = new org.eclipse.swt.widgets.RECT(); rect2.left = hNewItem; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETITEMRECT, 0, rect2); int flags = ((rect1.top) < (rect2.top)) ? OS.TVGN_NEXTVISIBLE : OS.TVGN_PREVIOUSVISIBLE; tvItem.state = OS.TVIS_SELECTED; int hItem = tvItem.hItem = hAnchor; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_SETITEM, 0, tvItem); while (hItem != hNewItem) { tvItem.hItem = hItem; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_SETITEM, 0, tvItem); hItem = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETNEXTITEM, flags, hItem); } } } } } } if ((wParam & (OS.MK_SHIFT)) == 0) hAnchor = hNewItem; if (!(gestureCompleted)) { tvItem.hItem = hNewItem; tvItem.mask = (OS.TVIF_HANDLE) | (OS.TVIF_PARAM); org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETITEM, 0, tvItem); org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); event.item = _getItem(tvItem.hItem, tvItem.lParam); postEvent(SWT.Selection, event); } gestureCompleted = false; if (dragStarted) { sendDragEvent(((short) (lParam & 65535)), ((short) (lParam >> 16))); } else { int bits = org.eclipse.swt.widgets.OS.GetWindowLong(handle, OS.GWL_STYLE); if ((bits & (OS.TVS_DISABLEDRAGDROP)) == 0) { sendMouseEvent(SWT.MouseUp, 1, handle, OS.WM_LBUTTONUP, wParam, lParam); } } dragStarted = false; return new org.eclipse.swt.widgets.LRESULT(code); }
boolean translateTraversal(org.eclipse.swt.widgets.MSG msg) { int hwndText = org.eclipse.swt.widgets.OS.GetDlgItem(handle, org.eclipse.swt.widgets.Combo.CBID_EDIT); if ((hwndText != 0) && ((msg.hwnd) == hwndText)) { switch (msg.wParam) { case OS.VK_RETURN : case OS.VK_ESCAPE : if ((org.eclipse.swt.widgets.OS.SendMessage(handle, OS.CB_GETDROPPEDSTATE, 0, 0)) != 0) { return false; } } } return super.translateTraversal(msg); }
void setCaretOffset(int offset, int alignment) { if ((caretOffset) != offset) { caretOffset = offset; if (isListening(org.eclipse.swt.custom.StyledText.CaretMoved)) { org.eclipse.swt.custom.StyledTextEvent event = new org.eclipse.swt.custom.StyledTextEvent(content); event.end = caretOffset; notifyListeners(org.eclipse.swt.custom.StyledText.CaretMoved, event); } getAccessible().textCaretMoved(caretOffset); } if (alignment != (SWT.DEFAULT)) { caretAlignment = alignment; } }
org.eclipse.swt.widgets.LRESULT WM_PAINT(int wParam, int lParam) { boolean fixPaint = (findBackgroundControl()) != null; if (!fixPaint) { if (((OS.COMCTL32_MAJOR) >= 6) && (org.eclipse.swt.widgets.OS.IsAppThemed())) { org.eclipse.swt.widgets.Control control = findThemeControl(); fixPaint = control != null; } } if (fixPaint) { boolean redraw = ((drawCount) == 0) && (org.eclipse.swt.widgets.OS.IsWindowVisible(handle)); if (redraw) org.eclipse.swt.widgets.OS.SendMessage(handle, OS.WM_SETREDRAW, 0, 0); ignoreResize = true; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.WM_SIZE, 0, 0); ignoreResize = false; if (redraw) { org.eclipse.swt.widgets.OS.SendMessage(handle, OS.WM_SETREDRAW, 1, 0); org.eclipse.swt.widgets.OS.InvalidateRect(handle, null, true); } } return super.WM_PAINT(wParam, lParam); }
public java.lang.Object getContents(org.eclipse.swt.dnd.Transfer transfer, int clipboards) { checkWidget(); if (transfer == null) org.eclipse.swt.dnd.DND.error(SWT.ERROR_NULL_ARGUMENT); if ((clipboards & (DND.CLIPBOARD)) == 0) return null; org.eclipse.swt.dnd.NSPasteboard pasteboard = org.eclipse.swt.dnd.NSPasteboard.generalPasteboard(); if (pasteboard == null) return null; java.lang.String[] typeNames = transfer.getTypeNames(); org.eclipse.swt.dnd.NSMutableArray types = org.eclipse.swt.dnd.NSMutableArray.arrayWithCapacity(typeNames.length); for (int i = 0; i < (typeNames.length); i++) { types.addObject(org.eclipse.swt.dnd.NSString.stringWith(typeNames[i])); } org.eclipse.swt.dnd.NSString type = pasteboard.availableTypeFromArray(types); if (type != null) { org.eclipse.swt.dnd.TransferData tdata = new org.eclipse.swt.dnd.TransferData(); tdata.type = org.eclipse.swt.dnd.Transfer.registerType(type.getString()); if (((type.isEqual(OS.NSStringPboardType)) || (type.isEqual(OS.NSRTFPboardType))) || (type.isEqual(OS.NSHTMLPboardType))) { tdata.data = pasteboard.stringForType(type); } else if (type.isEqual(OS.NSFilenamesPboardType)) { tdata.data = new org.eclipse.swt.dnd.NSArray(pasteboard.propertyListForType(type).id); } else if (type.isEqual(OS.NSURLPboardType)) { tdata.data = org.eclipse.swt.dnd.NSURL.URLFromPasteboard(pasteboard); } else { tdata.data = pasteboard.dataForType(type); } if ((tdata.data) != null) { return transfer.nativeToJava(tdata); } } return null; }
public Image(org.eclipse.swt.graphics.Device device, org.eclipse.swt.graphics.ImageData source, org.eclipse.swt.graphics.ImageData mask) { super(device); if (source == null) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NULL_ARGUMENT); if (mask == null) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NULL_ARGUMENT); if (((source.width) != (mask.width)) || ((source.height) != (mask.height))) { org.eclipse.swt.graphics.SWT.error(SWT.ERROR_INVALID_ARGUMENT); } mask = org.eclipse.swt.graphics.ImageData.convertMask(mask); org.eclipse.swt.graphics.Image.init(device, this, source, mask); init(); }
public void draw(org.eclipse.swt.graphics.GC gc, int x, int y, int selectionStart, int selectionEnd, org.eclipse.swt.graphics.Color selectionForeground, org.eclipse.swt.graphics.Color selectionBackground, int flags) { checkLayout(); computeRuns(); if (gc == null) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NULL_ARGUMENT); if (gc.isDisposed()) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_INVALID_ARGUMENT); if ((selectionForeground != null) && (selectionForeground.isDisposed())) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_INVALID_ARGUMENT); if ((selectionBackground != null) && (selectionBackground.isDisposed())) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_INVALID_ARGUMENT); gc.checkGC(GC.FOREGROUND); int length = text.length(); x += java.lang.Math.min(indent, wrapIndent); boolean hasSelection = ((selectionStart <= selectionEnd) && (selectionStart != (-1))) && (selectionEnd != (-1)); org.eclipse.swt.graphics.GCData data = gc.data; int cairo = data.cairo; if (((flags & ((SWT.FULL_SELECTION) | (SWT.DELIMITER_SELECTION))) != 0) && (hasSelection || ((flags & (SWT.LAST_LINE_SELECTION)) != 0))) { int[] attrs = new int[1]; int[] nAttrs = new int[1]; org.eclipse.swt.graphics.PangoLogAttr logAttr = new org.eclipse.swt.graphics.PangoLogAttr(); org.eclipse.swt.graphics.PangoRectangle rect = new org.eclipse.swt.graphics.PangoRectangle(); int lineCount = org.eclipse.swt.graphics.OS.pango_layout_get_line_count(layout); int ptr = org.eclipse.swt.graphics.OS.pango_layout_get_text(layout); int iter = org.eclipse.swt.graphics.OS.pango_layout_get_iter(layout); if (selectionBackground == null) selectionBackground = device.getSystemColor(SWT.COLOR_LIST_SELECTION); if (cairo != 0) { org.eclipse.swt.graphics.Cairo.cairo_save(cairo); org.eclipse.swt.graphics.GdkColor color = selectionBackground.handle; org.eclipse.swt.graphics.Cairo.cairo_set_source_rgba(cairo, (((color.red) & 65535) / ((float) (65535))), (((color.green) & 65535) / ((float) (65535))), (((color.blue) & 65535) / ((float) (65535))), ((data.alpha) / ((float) (255)))); } else { org.eclipse.swt.graphics.OS.gdk_gc_set_foreground(gc.handle, selectionBackground.handle); } int lineIndex = 0; do { int lineEnd; org.eclipse.swt.graphics.OS.pango_layout_iter_get_line_extents(iter, null, rect); if (org.eclipse.swt.graphics.OS.pango_layout_iter_next_line(iter)) { int bytePos = org.eclipse.swt.graphics.OS.pango_layout_iter_get_index(iter); lineEnd = ((int) (org.eclipse.swt.graphics.OS.g_utf16_pointer_to_offset(ptr, (ptr + bytePos)))); } else { lineEnd = ((int) (org.eclipse.swt.graphics.OS.g_utf16_strlen(ptr, (-1)))); } boolean extent = false; if ((lineIndex == (lineCount - 1)) && ((flags & (SWT.LAST_LINE_SELECTION)) != 0)) { extent = true; } else { if ((attrs[0]) == 0) org.eclipse.swt.graphics.OS.pango_layout_get_log_attrs(layout, attrs, nAttrs); org.eclipse.swt.graphics.OS.memmove(logAttr, ((attrs[0]) + (lineEnd * (PangoLogAttr.sizeof))), PangoLogAttr.sizeof); if (!(logAttr.is_line_break)) { if ((selectionStart <= lineEnd) && (lineEnd <= selectionEnd)) extent = true; } else { if (((selectionStart <= lineEnd) && (lineEnd < selectionEnd)) && ((flags & (SWT.FULL_SELECTION)) != 0)) { extent = true; } } } if (extent) { int lineX = (x + (org.eclipse.swt.graphics.OS.PANGO_PIXELS(rect.x))) + (org.eclipse.swt.graphics.OS.PANGO_PIXELS(rect.width)); int lineY = y + (org.eclipse.swt.graphics.OS.PANGO_PIXELS(rect.y)); int height = org.eclipse.swt.graphics.OS.PANGO_PIXELS(rect.height); if (((ascent) != (-1)) && ((descent) != (-1))) { height = java.lang.Math.max(height, ((ascent) + (descent))); } int width = ((flags & (SWT.FULL_SELECTION)) != 0) ? 32767 : height / 3; if (cairo != 0) { org.eclipse.swt.graphics.Cairo.cairo_rectangle(cairo, lineX, lineY, width, height); org.eclipse.swt.graphics.Cairo.cairo_fill(cairo); } else { org.eclipse.swt.graphics.OS.gdk_draw_rectangle(data.drawable, gc.handle, 1, lineX, lineY, width, height); } } lineIndex++; } while (lineIndex < lineCount ); org.eclipse.swt.graphics.OS.pango_layout_iter_free(iter); if ((attrs[0]) != 0) org.eclipse.swt.graphics.OS.g_free(attrs[0]); if (cairo != 0) { org.eclipse.swt.graphics.Cairo.cairo_restore(cairo); } else { org.eclipse.swt.graphics.OS.gdk_gc_set_foreground(gc.handle, data.foreground); } } if (length == 0) return; if (!hasSelection) { if (cairo != 0) { if (((data.style) & (SWT.MIRRORED)) != 0) { org.eclipse.swt.graphics.Cairo.cairo_save(cairo); org.eclipse.swt.graphics.Cairo.cairo_scale(cairo, (-1), 1); org.eclipse.swt.graphics.Cairo.cairo_translate(cairo, (((-2) * x) - (width())), 0); } org.eclipse.swt.graphics.Cairo.cairo_move_to(cairo, x, y); org.eclipse.swt.graphics.OS.pango_cairo_show_layout(cairo, layout); drawBorder(gc, x, y, null); if (((data.style) & (SWT.MIRRORED)) != 0) { org.eclipse.swt.graphics.Cairo.cairo_restore(cairo); } } else { org.eclipse.swt.graphics.OS.gdk_draw_layout(data.drawable, gc.handle, x, y, layout); drawBorder(gc, x, y, null); } } else { selectionStart = java.lang.Math.min(java.lang.Math.max(0, selectionStart), (length - 1)); selectionEnd = java.lang.Math.min(java.lang.Math.max(0, selectionEnd), (length - 1)); length = ((int) (org.eclipse.swt.graphics.OS.g_utf16_strlen(org.eclipse.swt.graphics.OS.pango_layout_get_text(layout), (-1)))); selectionStart = translateOffset(selectionStart); selectionEnd = translateOffset(selectionEnd); if (selectionForeground == null) selectionForeground = device.getSystemColor(SWT.COLOR_LIST_SELECTION_TEXT); if (selectionBackground == null) selectionBackground = device.getSystemColor(SWT.COLOR_LIST_SELECTION); boolean fullSelection = (selectionStart == 0) && (selectionEnd == (length - 1)); if (fullSelection) { if (cairo != 0) { int ptr = org.eclipse.swt.graphics.OS.pango_layout_get_text(layout); if (((data.style) & (SWT.MIRRORED)) != 0) { org.eclipse.swt.graphics.Cairo.cairo_save(cairo); org.eclipse.swt.graphics.Cairo.cairo_scale(cairo, (-1), 1); org.eclipse.swt.graphics.Cairo.cairo_translate(cairo, (((-2) * x) - (width())), 0); } drawWithCairo(gc, x, y, 0, org.eclipse.swt.graphics.OS.strlen(ptr), fullSelection, selectionForeground.handle, selectionBackground.handle); if (((data.style) & (SWT.MIRRORED)) != 0) { org.eclipse.swt.graphics.Cairo.cairo_restore(cairo); } } else { org.eclipse.swt.graphics.OS.gdk_draw_layout_with_colors(data.drawable, gc.handle, x, y, layout, selectionForeground.handle, selectionBackground.handle); drawBorder(gc, x, y, selectionForeground.handle); } } else { int ptr = org.eclipse.swt.graphics.OS.pango_layout_get_text(layout); int byteSelStart = ((int) ((org.eclipse.swt.graphics.OS.g_utf16_offset_to_pointer(ptr, selectionStart)) - ptr)); int byteSelEnd = ((int) ((org.eclipse.swt.graphics.OS.g_utf16_offset_to_pointer(ptr, (selectionEnd + 1))) - ptr)); int strlen = org.eclipse.swt.graphics.OS.strlen(ptr); byteSelStart = java.lang.Math.min(byteSelStart, strlen); byteSelEnd = java.lang.Math.min(byteSelEnd, strlen); if (cairo != 0) { if (((data.style) & (SWT.MIRRORED)) != 0) { org.eclipse.swt.graphics.Cairo.cairo_save(cairo); org.eclipse.swt.graphics.Cairo.cairo_scale(cairo, (-1), 1); org.eclipse.swt.graphics.Cairo.cairo_translate(cairo, (((-2) * x) - (width())), 0); } drawWithCairo(gc, x, y, byteSelStart, byteSelEnd, fullSelection, selectionForeground.handle, selectionBackground.handle); if (((data.style) & (SWT.MIRRORED)) != 0) { org.eclipse.swt.graphics.Cairo.cairo_restore(cairo); } } else { org.eclipse.swt.graphics.Region clipping = new org.eclipse.swt.graphics.Region(); gc.getClipping(clipping); org.eclipse.swt.graphics.OS.gdk_draw_layout(data.drawable, gc.handle, x, y, layout); drawBorder(gc, x, y, null); int[] ranges = new int[]{ byteSelStart, byteSelEnd }; int rgn = org.eclipse.swt.graphics.OS.gdk_pango_layout_get_clip_region(layout, x, y, ranges, ((ranges.length) / 2)); if (rgn != 0) { org.eclipse.swt.graphics.OS.gdk_gc_set_clip_region(gc.handle, rgn); org.eclipse.swt.graphics.OS.gdk_region_destroy(rgn); } org.eclipse.swt.graphics.OS.gdk_draw_layout_with_colors(data.drawable, gc.handle, x, y, layout, selectionForeground.handle, selectionBackground.handle); drawBorder(gc, x, y, selectionForeground.handle); gc.setClipping(clipping); clipping.dispose(); } } } if (cairo != 0) { org.eclipse.swt.graphics.Cairo.cairo_new_path(cairo); } }
int Invoke(int dispIdMember, int riid, int lcid, int dwFlags, int pDispParams, int pVarResult, int pExcepInfo, int pArgErr) { org.eclipse.swt.browser.IE ie = ((org.eclipse.swt.browser.IE) (((org.eclipse.swt.browser.Browser) (getParent().getParent())).webBrowser)); java.util.Hashtable functions = ie.functions; if (functions == null) { if (pVarResult != 0) { org.eclipse.swt.browser.COM.MoveMemory(pVarResult, new int[]{ 0 }, C.PTR_SIZEOF); } return COM.S_OK; } org.eclipse.swt.browser.DISPPARAMS dispParams = new org.eclipse.swt.browser.DISPPARAMS(); org.eclipse.swt.browser.COM.MoveMemory(dispParams, pDispParams, DISPPARAMS.sizeof); if ((dispParams.cArgs) != 2) { if (pVarResult != 0) { org.eclipse.swt.browser.COM.MoveMemory(pVarResult, new int[]{ 0 }, C.PTR_SIZEOF); } return COM.S_OK; } int ptr = (dispParams.rgvarg) + (Variant.sizeof); org.eclipse.swt.browser.Variant variant = org.eclipse.swt.browser.Variant.win32_new(ptr); int index = variant.getInt(); variant.dispose(); if (index <= 0) { if (pVarResult != 0) { org.eclipse.swt.browser.COM.MoveMemory(pVarResult, new int[]{ 0 }, C.PTR_SIZEOF); } return COM.S_OK; } variant = org.eclipse.swt.browser.Variant.win32_new(dispParams.rgvarg); java.lang.Object key = new java.lang.Integer(index); org.eclipse.swt.browser.BrowserFunction function = ((org.eclipse.swt.browser.BrowserFunction) (functions.get(key))); java.lang.Object returnValue = null; if (function != null) { try { java.lang.Object temp = convertToJava(variant); if (temp instanceof java.lang.Object[]) { java.lang.Object[] args = ((java.lang.Object[]) (temp)); try { returnValue = function.function(args); } catch (java.lang.Exception e) { returnValue = org.eclipse.swt.browser.WebBrowser.CreateErrorString(e.getLocalizedMessage()); } } } catch (java.lang.IllegalArgumentException e) { if (function.isEvaluate) { function.function(new java.lang.String[]{ org.eclipse.swt.browser.WebBrowser.CreateErrorString(new org.eclipse.swt.browser.SWTException(SWT.ERROR_INVALID_RETURN_VALUE).getLocalizedMessage()) }); } returnValue = org.eclipse.swt.browser.WebBrowser.CreateErrorString(e.getLocalizedMessage()); } } variant.dispose(); if (pVarResult != 0) { if (returnValue == null) { org.eclipse.swt.browser.COM.MoveMemory(pVarResult, new int[]{ 0 }, C.PTR_SIZEOF); } else { try { variant = convertToJS(returnValue); } catch (org.eclipse.swt.browser.SWTException e) { variant = convertToJS(org.eclipse.swt.browser.WebBrowser.CreateErrorString(e.getLocalizedMessage())); } org.eclipse.swt.browser.Variant.win32_copy(pVarResult, variant); variant.dispose(); } } return COM.S_OK; }
public int internal_new_GC(org.eclipse.swt.graphics.GCData data) { if ((handle) == null) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_GRAPHIC_DISPOSED); if (((type) != (SWT.BITMAP)) || ((memGC) != null)) { org.eclipse.swt.graphics.SWT.error(SWT.ERROR_INVALID_ARGUMENT); } org.eclipse.swt.graphics.NSAutoreleasePool pool = null; if (!(org.eclipse.swt.graphics.NSThread.isMainThread())) pool = ((org.eclipse.swt.graphics.NSAutoreleasePool) (new org.eclipse.swt.graphics.NSAutoreleasePool().alloc().init())); try { org.eclipse.swt.graphics.NSBitmapImageRep rep = imageRep; if (imageRep.hasAlpha()) { int bpr = (width) * 4; rep = ((org.eclipse.swt.graphics.NSBitmapImageRep) (new org.eclipse.swt.graphics.NSBitmapImageRep().alloc())); int bitmapData = imageRep.bitmapData(); if ((data.bitmapDataAddress) != 0) org.eclipse.swt.graphics.OS.free(data.bitmapDataAddress); data.bitmapDataAddress = org.eclipse.swt.graphics.OS.malloc(C.PTR_SIZEOF); org.eclipse.swt.graphics.OS.memmove(data.bitmapDataAddress, new int[]{ bitmapData }, C.PTR_SIZEOF); rep = rep.initWithBitmapDataPlanes(data.bitmapDataAddress, width, height, 8, 3, false, false, OS.NSDeviceRGBColorSpace, OS.NSAlphaFirstBitmapFormat, bpr, 32); rep.autorelease(); } handle.setCacheMode(OS.NSImageCacheNever); org.eclipse.swt.graphics.NSGraphicsContext context = org.eclipse.swt.graphics.NSGraphicsContext.graphicsContextWithBitmapImageRep(rep); org.eclipse.swt.graphics.NSGraphicsContext flippedContext = org.eclipse.swt.graphics.NSGraphicsContext.graphicsContextWithGraphicsPort(context.graphicsPort(), true); context = flippedContext; context.retain(); org.eclipse.swt.graphics.NSGraphicsContext.setCurrentContext(context); org.eclipse.swt.graphics.NSAffineTransform transform = org.eclipse.swt.graphics.NSAffineTransform.transform(); org.eclipse.swt.graphics.NSSize size = handle.size(); transform.translateXBy(0, size.height); transform.scaleXBy(1, (-1)); transform.set(); if (data != null) { int mask = (SWT.LEFT_TO_RIGHT) | (SWT.RIGHT_TO_LEFT); if (((data.style) & mask) == 0) { data.style |= SWT.LEFT_TO_RIGHT; } data.device = device; data.background = device.COLOR_WHITE.handle; data.foreground = device.COLOR_BLACK.handle; data.font = device.systemFont; data.image = this; } return context.id; } finally { if (pool != null) pool.release(); } }
public void setItemCount(int count) { checkWidget(); count = java.lang.Math.max(0, count); if (count == (itemsCount)) return; int redrawStart; int redrawEnd; if (count < (itemsCount)) { redrawStart = count; redrawEnd = (itemsCount) - 1; for (int i = count; i < (itemsCount); i++) { items[i].dispose(false); } int newSelectedCount = 0; for (int i = 0; i < (selectedItems.length); i++) { if (!(selectedItems[i].isDisposed())) newSelectedCount++; } if (newSelectedCount != (selectedItems.length)) { org.eclipse.swt.widgets.TableItem[] newSelectedItems = new org.eclipse.swt.widgets.TableItem[newSelectedCount]; int pos = 0; for (int i = 0; i < (selectedItems.length); i++) { org.eclipse.swt.widgets.TableItem item = selectedItems[i]; if (!(item.isDisposed())) { newSelectedItems[(pos++)] = item; } } selectedItems = newSelectedItems; } if (((anchorItem) != null) && (anchorItem.isDisposed())) anchorItem = null; if (((lastClickedItem) != null) && (lastClickedItem.isDisposed())) lastClickedItem = null; if (((focusItem) != null) && (focusItem.isDisposed())) { org.eclipse.swt.widgets.TableItem newFocusItem = (count > 0) ? items[(count - 1)] : null; setFocusItem(newFocusItem, false); } int visibleItemCount = ((getClientArea().height) - (getHeaderHeight())) / (itemHeight); topIndex = java.lang.Math.min(topIndex, java.lang.Math.max(0, (count - visibleItemCount))); itemsCount = count; if ((columns.length) == 0) updateHorizontalBar(); } else { redrawStart = itemsCount; redrawEnd = count - 1; org.eclipse.swt.widgets.TableItem[] newItems = new org.eclipse.swt.widgets.TableItem[count]; java.lang.System.arraycopy(items, 0, newItems, 0, itemsCount); items = newItems; for (int i = itemsCount; i < count; i++) { items[i] = new org.eclipse.swt.widgets.TableItem(this, SWT.NONE, i, false); (itemsCount)++; } } updateVerticalBar(); redrawItems(redrawStart, redrawEnd, false); }
public LineBackgroundEvent(org.eclipse.swt.custom.StyledTextEvent e) { super(e); lineOffset = e.detail; lineText = e.text; lineBackground = e.lineBackground; }
void moveBelow(int child, int sibling) { if (child == sibling) return; int parentHandle = parentingHandle(); if ((sibling == 0) && (parentHandle == (fixedHandle))) { moveAbove(child, ((scrolledHandle) != 0 ? scrolledHandle : handle)); return; } org.eclipse.swt.widgets.GtkFixed fixed = new org.eclipse.swt.widgets.GtkFixed(); org.eclipse.swt.widgets.OS.memmove(fixed, parentHandle); int children = fixed.children; if (children == 0) return; int[] data = new int[1]; int[] widget = new int[1]; int childData = 0; int childLink = 0; int siblingLink = 0; int temp = children; while (temp != 0) { org.eclipse.swt.widgets.OS.memmove(data, temp, OS.PTR_SIZEOF); org.eclipse.swt.widgets.OS.memmove(widget, data[0], OS.PTR_SIZEOF); if (child == (widget[0])) { childLink = temp; childData = data[0]; } else if (sibling == (widget[0])) { siblingLink = temp; } if ((childData != 0) && ((sibling == 0) || (siblingLink != 0))) break; temp = org.eclipse.swt.widgets.OS.g_list_next(temp); } children = org.eclipse.swt.widgets.OS.g_list_remove_link(children, childLink); if ((siblingLink == 0) || ((org.eclipse.swt.widgets.OS.g_list_previous(siblingLink)) == 0)) { org.eclipse.swt.widgets.OS.g_list_free_1(childLink); children = org.eclipse.swt.widgets.OS.g_list_prepend(children, childData); } else { temp = org.eclipse.swt.widgets.OS.g_list_previous(siblingLink); org.eclipse.swt.widgets.OS.g_list_set_previous(childLink, temp); org.eclipse.swt.widgets.OS.g_list_set_next(temp, childLink); org.eclipse.swt.widgets.OS.g_list_set_next(childLink, siblingLink); org.eclipse.swt.widgets.OS.g_list_set_previous(siblingLink, childLink); } fixed.children = children; org.eclipse.swt.widgets.OS.memmove(parentHandle, fixed); }
public org.eclipse.swt.widgets.Rectangle computeTrim(int x, int y, int width, int height) { checkWidget(); org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); org.eclipse.swt.widgets.OS.SetRect(rect, x, y, (x + width), (y + height)); int bits1 = org.eclipse.swt.widgets.OS.GetWindowLong(handle, OS.GWL_STYLE); int bits2 = org.eclipse.swt.widgets.OS.GetWindowLong(handle, OS.GWL_EXSTYLE); boolean hasMenu = (OS.IsWinCE) ? false : (org.eclipse.swt.widgets.OS.GetMenu(handle)) != 0; org.eclipse.swt.widgets.OS.AdjustWindowRectEx(rect, bits1, hasMenu, bits2); if ((horizontalBar) != null) rect.bottom += org.eclipse.swt.widgets.OS.GetSystemMetrics(OS.SM_CYHSCROLL); if ((verticalBar) != null) rect.right += org.eclipse.swt.widgets.OS.GetSystemMetrics(OS.SM_CXVSCROLL); if (hasMenu) { org.eclipse.swt.widgets.RECT testRect = new org.eclipse.swt.widgets.RECT(); org.eclipse.swt.widgets.OS.SetRect(testRect, 0, 0, ((rect.right) - (rect.left)), ((rect.bottom) - (rect.top))); org.eclipse.swt.widgets.OS.SendMessage(handle, OS.WM_NCCALCSIZE, 0, testRect); while (((testRect.bottom) - (testRect.top)) < height) { if (((testRect.bottom) - (testRect.top)) == 0) break; rect.top -= (org.eclipse.swt.widgets.OS.GetSystemMetrics(OS.SM_CYMENU)) - (org.eclipse.swt.widgets.OS.GetSystemMetrics(OS.SM_CYBORDER)); org.eclipse.swt.widgets.OS.SetRect(testRect, 0, 0, ((rect.right) - (rect.left)), ((rect.bottom) - (rect.top))); org.eclipse.swt.widgets.OS.SendMessage(handle, OS.WM_NCCALCSIZE, 0, testRect); } } return new org.eclipse.swt.widgets.Rectangle(rect.left, rect.top, ((rect.right) - (rect.left)), ((rect.bottom) - (rect.top))); }
public java.lang.String open() { java.lang.String string = title; if ((string.length()) == 0) string = " "; byte[] buffer1 = org.eclipse.swt.widgets.Converter.wcsToMbcs(null, string, true); int xmStringPtr1 = org.eclipse.swt.widgets.OS.XmStringParseText(buffer1, 0, OS.XmFONTLIST_DEFAULT_TAG, OS.XmCHARSET_TEXT, null, 0, 0); byte[] buffer2 = org.eclipse.swt.widgets.Converter.wcsToMbcs(null, "*", true); int xmStringPtr2 = org.eclipse.swt.widgets.OS.XmStringParseText(buffer2, 0, OS.XmFONTLIST_DEFAULT_TAG, OS.XmCHARSET_TEXT, null, 0, 0); if ((filterPath) == null) filterPath = ""; byte[] buffer3 = org.eclipse.swt.widgets.Converter.wcsToMbcs(null, filterPath, true); int xmStringPtr3 = org.eclipse.swt.widgets.OS.XmStringParseText(buffer3, 0, OS.XmFONTLIST_DEFAULT_TAG, OS.XmCHARSET_TEXT, null, 0, 0); byte[] buffer7 = org.eclipse.swt.widgets.Converter.wcsToMbcs(null, org.eclipse.swt.widgets.SWT.getMessage("SWT_Selection"), true); int xmStringPtr4 = org.eclipse.swt.widgets.OS.XmStringParseText(buffer7, 0, OS.XmFONTLIST_DEFAULT_TAG, OS.XmCHARSET_TEXT, null, 0, 0); org.eclipse.swt.widgets.Display display = parent.display; int[] argList1 = new int[]{ OS.XmNresizePolicy, OS.XmRESIZE_NONE, OS.XmNdialogStyle, OS.XmDIALOG_PRIMARY_APPLICATION_MODAL, OS.XmNwidth, ((org.eclipse.swt.widgets.OS.XDisplayWidth(display.xDisplay, org.eclipse.swt.widgets.OS.XDefaultScreen(display.xDisplay))) * 4) / 9, OS.XmNdialogTitle, xmStringPtr1, OS.XmNpattern, xmStringPtr2, OS.XmNdirectory, xmStringPtr3, OS.XmNpathMode, OS.XmPATH_MODE_FULL, OS.XmNfilterLabelString, xmStringPtr4 }; if (OS.IsAIX) parent.realizeWidget(); int parentHandle = parent.shellHandle; byte[] name = new byte[]{ 0 }; int dialog = org.eclipse.swt.widgets.OS.XmCreateFileSelectionDialog(parentHandle, name, argList1, ((argList1.length) / 2)); int child = org.eclipse.swt.widgets.OS.XmFileSelectionBoxGetChild(dialog, OS.XmDIALOG_HELP_BUTTON); if (child != 0) org.eclipse.swt.widgets.OS.XtUnmanageChild(child); child = org.eclipse.swt.widgets.OS.XmFileSelectionBoxGetChild(dialog, OS.XmDIALOG_LIST); if (child != 0) { int parent2 = org.eclipse.swt.widgets.OS.XtParent(child); if (parent2 != 0) org.eclipse.swt.widgets.OS.XtUnmanageChild(parent2); } child = org.eclipse.swt.widgets.OS.XmFileSelectionBoxGetChild(dialog, OS.XmDIALOG_LIST_LABEL); if (child != 0) org.eclipse.swt.widgets.OS.XtUnmanageChild(child); child = org.eclipse.swt.widgets.OS.XmFileSelectionBoxGetChild(dialog, OS.XmDIALOG_TEXT); if (child != 0) org.eclipse.swt.widgets.OS.XtUnmanageChild(child); child = org.eclipse.swt.widgets.OS.XmFileSelectionBoxGetChild(dialog, OS.XmDIALOG_SELECTION_LABEL); if (child != 0) org.eclipse.swt.widgets.OS.XtUnmanageChild(child); org.eclipse.swt.widgets.OS.XmStringFree(xmStringPtr1); org.eclipse.swt.widgets.OS.XmStringFree(xmStringPtr2); org.eclipse.swt.widgets.OS.XmStringFree(xmStringPtr3); org.eclipse.swt.widgets.OS.XmStringFree(xmStringPtr4); byte[] buffer4 = org.eclipse.swt.widgets.Converter.wcsToMbcs(null, message, true); int xmString1 = org.eclipse.swt.widgets.OS.XmStringGenerate(buffer4, null, OS.XmCHARSET_TEXT, null); int[] argList = new int[]{ OS.XmNlabelType, OS.XmSTRING, OS.XmNlabelString, xmString1 }; int textArea = org.eclipse.swt.widgets.OS.XmCreateLabel(dialog, name, argList, ((argList.length) / 2)); org.eclipse.swt.widgets.OS.XtManageChild(textArea); org.eclipse.swt.widgets.OS.XmStringFree(xmString1); org.eclipse.swt.widgets.Callback callback = new org.eclipse.swt.widgets.Callback(this, "activate", 3); int address = callback.getAddress(); if (address == 0) org.eclipse.swt.widgets.SWT.error(SWT.ERROR_NO_MORE_CALLBACKS); org.eclipse.swt.widgets.OS.XtAddCallback(dialog, OS.XmNokCallback, address, OS.XmDIALOG_OK_BUTTON); org.eclipse.swt.widgets.OS.XtAddCallback(dialog, OS.XmNcancelCallback, address, OS.XmDIALOG_CANCEL_BUTTON); cancel = true; org.eclipse.swt.widgets.OS.XtManageChild(dialog); while ((org.eclipse.swt.widgets.OS.XtIsRealized(dialog)) && (org.eclipse.swt.widgets.OS.XtIsManaged(dialog))) if (!(display.readAndDispatch())) display.sleep(); java.lang.String directoryPath = ""; if (!(cancel)) { int[] argList2 = new int[]{ OS.XmNdirMask, 0 }; org.eclipse.swt.widgets.OS.XtGetValues(dialog, argList2, ((argList2.length) / 2)); int xmString3 = argList2[1]; int[] table = new int[]{ display.tabMapping, display.crMapping }; int ptr = org.eclipse.swt.widgets.OS.XmStringUnparse(xmString3, null, OS.XmCHARSET_TEXT, OS.XmCHARSET_TEXT, table, table.length, OS.XmOUTPUT_ALL); if (ptr != 0) { int length = org.eclipse.swt.widgets.OS.strlen(ptr); byte[] buffer = new byte[length]; org.eclipse.swt.widgets.OS.memmove(buffer, ptr, length); org.eclipse.swt.widgets.OS.XtFree(ptr); directoryPath = new java.lang.String(org.eclipse.swt.widgets.Converter.mbcsToWcs(null, buffer)); } org.eclipse.swt.widgets.OS.XmStringFree(xmString3); int length = directoryPath.length(); if ((directoryPath.charAt((length - 1))) == '*') { directoryPath = directoryPath.substring(0, (length - 1)); length--; } if ((directoryPath.endsWith(org.eclipse.swt.widgets.DirectoryDialog.SEPARATOR)) && (!(directoryPath.equals(org.eclipse.swt.widgets.DirectoryDialog.SEPARATOR)))) { directoryPath = directoryPath.substring(0, (length - 1)); } filterPath = directoryPath; } if (org.eclipse.swt.widgets.OS.XtIsRealized(dialog)) org.eclipse.swt.widgets.OS.XtDestroyWidget(dialog); callback.dispose(); if (cancel) return null; return directoryPath; }
void createHandle(int index) { state |= HANDLE; fixedHandle = org.eclipse.swt.widgets.OS.g_object_new(display.gtk_fixed_get_type(), 0); if ((fixedHandle) == 0) error(SWT.ERROR_NO_HANDLES); org.eclipse.swt.widgets.OS.gtk_fixed_set_has_window(fixedHandle, true); int hAdjustment = org.eclipse.swt.widgets.OS.gtk_adjustment_new(0, 0, 100, 1, 10, 10); if (hAdjustment == 0) error(SWT.ERROR_NO_HANDLES); if (((style) & (SWT.HORIZONTAL)) != 0) { handle = org.eclipse.swt.widgets.OS.gtk_hscrollbar_new(hAdjustment); } else { handle = org.eclipse.swt.widgets.OS.gtk_vscrollbar_new(hAdjustment); } if ((handle) == 0) error(SWT.ERROR_NO_HANDLES); if (((OS.GTK_VERSION) < (org.eclipse.swt.widgets.OS.VERSION(2, 10, 0))) || (((style) & (SWT.VERTICAL)) != 0)) { org.eclipse.swt.widgets.OS.GTK_WIDGET_SET_FLAGS(handle, OS.GTK_CAN_FOCUS); } org.eclipse.swt.widgets.OS.gtk_container_add(fixedHandle, handle); }
void gtk_render_focus(long style, long window, int state_type, org.eclipse.swt.graphics.GdkRectangle area, long widget, byte[] detail, int x, int y, int width, int height) { if ((OS.GTK_VERSION) >= (org.eclipse.swt.graphics.OS.VERSION(3, 2, 0))) { long cairo = org.eclipse.swt.graphics.OS.gdk_cairo_create(window); long context = org.eclipse.swt.graphics.OS.gtk_widget_get_style_context(style); org.eclipse.swt.graphics.OS.gtk_style_context_save(context); org.eclipse.swt.graphics.OS.gtk_style_context_set_state(context, org.eclipse.swt.graphics.OS.gtk_widget_get_state_flags(widget)); org.eclipse.swt.graphics.Cairo.cairo_save(cairo); org.eclipse.swt.graphics.OS.gtk_render_focus(context, cairo, x, y, width, height); org.eclipse.swt.graphics.Cairo.cairo_restore(cairo); org.eclipse.swt.graphics.OS.gtk_style_context_restore(context); org.eclipse.swt.graphics.Cairo.cairo_destroy(cairo); } else { org.eclipse.swt.graphics.OS.gtk_paint_focus(style, window, state_type, area, widget, detail, x, y, width, height); } }
private boolean setEventData(byte ops, byte op, int dragContext, short x, short y, int timestamp, org.eclipse.swt.dnd.DNDEvent event) { int style = getStyle(); int operations = (osOpToOp(ops)) & style; if (operations == (DND.DROP_NONE)) return false; int operation = osOpToOp(op); int xDisplay = getDisplay().xDisplay; int xWindow = org.eclipse.swt.dnd.OS.XDefaultRootWindow(xDisplay); int[] unused = new int[1]; int[] mask_return = new int[1]; org.eclipse.swt.dnd.OS.XQueryPointer(xDisplay, xWindow, unused, unused, unused, unused, unused, unused, mask_return); int mask = mask_return[0]; if (((mask & (OS.ShiftMask)) == 0) && ((mask & (OS.ControlMask)) == 0)) { operation = DND.DROP_DEFAULT; } if (operation == (DND.DROP_DEFAULT)) { if ((style & (DND.DROP_DEFAULT)) == 0) { operation = ((operations & (DND.DROP_MOVE)) != 0) ? DND.DROP_MOVE : DND.DROP_NONE; } } else { if ((operation & operations) == 0) operation = DND.DROP_NONE; } int ppExportTargets = org.eclipse.swt.dnd.OS.XtMalloc(4); int pNumExportTargets = org.eclipse.swt.dnd.OS.XtMalloc(4); int[] args = new int[]{ OS.XmNexportTargets, ppExportTargets, OS.XmNnumExportTargets, pNumExportTargets }; org.eclipse.swt.dnd.OS.XtGetValues(dragContext, args, ((args.length) / 2)); int[] numExportTargets = new int[1]; org.eclipse.swt.dnd.OS.memmove(numExportTargets, pNumExportTargets, 4); org.eclipse.swt.dnd.OS.XtFree(pNumExportTargets); int[] pExportTargets = new int[1]; org.eclipse.swt.dnd.OS.memmove(pExportTargets, ppExportTargets, 4); org.eclipse.swt.dnd.OS.XtFree(ppExportTargets); int[] exportTargets = new int[numExportTargets[0]]; org.eclipse.swt.dnd.OS.memmove(exportTargets, pExportTargets[0], (4 * (numExportTargets[0]))); org.eclipse.swt.dnd.TransferData[] dataTypes = new org.eclipse.swt.dnd.TransferData[0]; for (int i = 0; i < (exportTargets.length); i++) { for (int j = 0; j < (transferAgents.length); j++) { org.eclipse.swt.dnd.TransferData transferData = new org.eclipse.swt.dnd.TransferData(); transferData.type = exportTargets[i]; if (transferAgents[j].isSupportedType(transferData)) { org.eclipse.swt.dnd.TransferData[] newDataTypes = new org.eclipse.swt.dnd.TransferData[(dataTypes.length) + 1]; java.lang.System.arraycopy(dataTypes, 0, newDataTypes, 0, dataTypes.length); newDataTypes[dataTypes.length] = transferData; dataTypes = newDataTypes; break; } } } if ((dataTypes.length) == 0) return false; short[] root_x = new short[1]; short[] root_y = new short[1]; org.eclipse.swt.dnd.OS.XtTranslateCoords(this.control.handle, ((short) (x)), ((short) (y)), root_x, root_y); event.widget = this; event.x = root_x[0]; event.y = root_y[0]; event.time = timestamp; event.feedback = DND.FEEDBACK_SELECT; event.dataTypes = dataTypes; event.dataType = dataTypes[0]; event.operations = operations; event.detail = operation; return true; }
boolean canBecomeKeyWindow(int id, int sel) { if (isPopup) return false; if ((window) != null) { int styleMask = window.styleMask(); if ((styleMask == (OS.NSBorderlessWindowMask)) || ((styleMask & (((OS.NSNonactivatingPanelMask) | (OS.NSDocModalWindowMask)) | (OS.NSResizableWindowMask))) != 0)) return true; } return super.canBecomeKeyWindow(id, sel); }
public Pattern(org.eclipse.swt.graphics.Device device, float x1, float y1, float x2, float y2, org.eclipse.swt.graphics.Color color1, int alpha1, org.eclipse.swt.graphics.Color color2, int alpha2) { if (device == null) device = org.eclipse.swt.graphics.Device.getDevice(); if (device == null) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NULL_ARGUMENT); if (color1 == null) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NULL_ARGUMENT); if (color1.isDisposed()) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_INVALID_ARGUMENT); if (color2 == null) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NULL_ARGUMENT); if (color2.isDisposed()) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_INVALID_ARGUMENT); this.device = device; device.checkGDIP(); int colorRef1 = color1.handle; int rgb = (((colorRef1 >> 16) & 255) | (colorRef1 & 65280)) | ((colorRef1 & 255) << 16); int foreColor = org.eclipse.swt.graphics.Gdip.Color_new((((alpha1 & 255) << 24) | rgb)); int colorRef2 = color2.handle; rgb = (((colorRef2 >> 16) & 255) | (colorRef2 & 65280)) | ((colorRef2 & 255) << 16); int backColor = org.eclipse.swt.graphics.Gdip.Color_new((((alpha2 & 255) << 24) | rgb)); org.eclipse.swt.graphics.PointF p1 = new org.eclipse.swt.graphics.PointF(); p1.X = x1; p1.Y = y1; org.eclipse.swt.graphics.PointF p2 = new org.eclipse.swt.graphics.PointF(); p2.X = x2; p2.Y = y2; handle = org.eclipse.swt.graphics.Gdip.LinearGradientBrush_new(p1, p2, foreColor, backColor); if ((handle) == 0) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NO_HANDLES); if ((alpha1 != 255) || (alpha2 != 255)) { int a = ((int) (((alpha1 & 255) * 0.5F) + ((alpha2 & 255) * 0.5F))); int r = ((int) ((((colorRef1 & 255) >> 0) * 0.5F) + (((colorRef2 & 255) >> 0) * 0.5F))); int g = ((int) ((((colorRef1 & 65280) >> 8) * 0.5F) + (((colorRef2 & 65280) >> 8) * 0.5F))); int b = ((int) ((((colorRef1 & 1044480) >> 16) * 0.5F) + (((colorRef2 & 16711680) >> 16) * 0.5F))); int midColor = org.eclipse.swt.graphics.Gdip.Color_new(((((a << 24) | (r << 16)) | (g << 8)) | b)); org.eclipse.swt.graphics.Gdip.LinearGradientBrush_SetInterpolationColors(handle, new int[]{ foreColor, midColor, backColor }, new float[]{ 0, 0.5F, 1 }, 3); org.eclipse.swt.graphics.Gdip.Color_delete(midColor); } org.eclipse.swt.graphics.Gdip.Color_delete(foreColor); org.eclipse.swt.graphics.Gdip.Color_delete(backColor); if (device.tracking) device.new_Object(this); }
void printLine(int x, int y, org.eclipse.swt.custom.GC gc, org.eclipse.swt.custom.Color foreground, org.eclipse.swt.custom.Color background, org.eclipse.swt.custom.TextLayout layout, org.eclipse.swt.custom.TextLayout printLayout, int index) { if (background != null) { org.eclipse.swt.custom.Rectangle rect = layout.getBounds(); gc.setBackground(background); gc.fillRectangle(x, y, rect.width, rect.height); } if (printOptions.printLineNumbers) { org.eclipse.swt.custom.FontMetrics metrics = layout.getLineMetrics(0); printLayout.setAscent(((metrics.getAscent()) + (metrics.getLeading()))); printLayout.setDescent(metrics.getDescent()); java.lang.String[] lineLabels = printOptions.lineLabels; if (lineLabels != null) { if (((0 <= index) && (index < (lineLabels.length))) && ((lineLabels[index]) != null)) { printLayout.setText(lineLabels[index]); } else { printLayout.setText(""); } } else { printLayout.setText(java.lang.String.valueOf(index)); } int paintX = (x - (printMargin)) - (printLayout.getBounds().width); printLayout.draw(gc, paintX, y); printLayout.setAscent((-1)); printLayout.setDescent((-1)); } gc.setForeground(foreground); layout.draw(gc, x, y); }
void createItem(org.eclipse.swt.widgets.MenuItem item, int index) { if (!((0 <= index) && (index <= (itemCount)))) error(SWT.ERROR_INVALID_RANGE); org.eclipse.swt.widgets.NSMenuItem nsItem = null; if (((item.style) & (SWT.SEPARATOR)) != 0) { nsItem = org.eclipse.swt.widgets.NSMenuItem.separatorItem(); nsItem.retain(); } else { nsItem = ((org.eclipse.swt.widgets.NSMenuItem) (new org.eclipse.swt.widgets.SWTMenuItem().alloc())); nsItem.initWithTitle(org.eclipse.swt.widgets.NSString.stringWith(""), 0, org.eclipse.swt.widgets.NSString.stringWith("")); nsItem.setTarget(nsItem); nsItem.setAction(OS.sel_sendSelection); } item.nsItem = nsItem; item.createJNIRef(); item.register(); nsMenu.insertItem(nsItem, index); if ((itemCount) == (items.length)) { org.eclipse.swt.widgets.MenuItem[] newItems = new org.eclipse.swt.widgets.MenuItem[(items.length) + 4]; java.lang.System.arraycopy(items, 0, newItems, 0, items.length); items = newItems; } java.lang.System.arraycopy(items, index, items, (index + 1), (((itemCount)++) - index)); items[index] = item; org.eclipse.swt.widgets.NSMenu emptyMenu = item.createEmptyMenu(); if (emptyMenu != null) { nsItem.setSubmenu(emptyMenu); emptyMenu.autorelease(); } if (!(getEnabled())) nsItem.setEnabled(false); }
public void scroll(int destX, int destY, int x, int y, int width, int height, boolean all) { checkWidget(); if ((width <= 0) || (height <= 0)) return; int deltaX = destX - x; int deltaY = destY - y; if ((deltaX == 0) && (deltaY == 0)) return; if (!(isDrawing(handle))) return; boolean isFocus = ((caret) != null) && (caret.isFocusCaret()); if (isFocus) caret.killFocus(); org.eclipse.swt.widgets.Rectangle clientRect = getClientArea(); org.eclipse.swt.widgets.Rectangle sourceRect = new org.eclipse.swt.widgets.Rectangle(x, y, width, height); if (sourceRect.intersects(clientRect)) { update(all); } org.eclipse.swt.widgets.GC gc = new org.eclipse.swt.widgets.GC(this); gc.copyArea(x, y, width, height, destX, destY); gc.dispose(); if (all) { org.eclipse.swt.widgets.Control[] children = _getChildren(); for (int i = 0; i < (children.length); i++) { org.eclipse.swt.widgets.Control child = children[i]; org.eclipse.swt.widgets.Rectangle rect = child.getBounds(); if (((java.lang.Math.min((x + width), ((rect.x) + (rect.width)))) >= (java.lang.Math.max(x, rect.x))) && ((java.lang.Math.min((y + height), ((rect.y) + (rect.height)))) >= (java.lang.Math.max(y, rect.y)))) { child.setLocation(((rect.x) + deltaX), ((rect.y) + deltaY)); } } } if (isFocus) caret.setFocus(); }
public int getAlpha() { if ((handle) == 0) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_GRAPHIC_DISPOSED); if ((data.cairo) == 0) return 255; return ((int) ((org.eclipse.swt.graphics.Cairo.cairo_current_alpha(data.cairo)) * 255)); }
public void setTopRight(org.eclipse.swt.custom.Control control, int alignment) { checkWidget(); if (((alignment != (SWT.RIGHT)) && (alignment != (SWT.FILL))) && (alignment != ((SWT.RIGHT) | (SWT.WRAP)))) { org.eclipse.swt.custom.SWT.error(SWT.ERROR_INVALID_ARGUMENT); } if ((control != null) && ((control.isDisposed()) || ((control.getParent()) != (this)))) { org.eclipse.swt.custom.SWT.error(SWT.ERROR_INVALID_ARGUMENT); } if (((topRight) == control) && ((topRightAlignment) == alignment)) return; if ((topRight) != null) removeTabControl(topRight, false); topRight = control; topRightAlignment = alignment; alignment &= ~(SWT.RIGHT); if (control != null) addTabControl(control, ((SWT.TRAIL) | alignment), (-1), false); updateTabHeight(false); if (updateItems()) redraw(); updateBkImages(); }
public void setOrientation(int orientation) { super.setOrientation(orientation); for (int row = 0; row < (this.items.length); row++) { for (int column = 0; column < (this.items[row].length); column++) { org.eclipse.swt.widgets.CoolItem item = this.items[row][column]; if ((item.arrowImage) != null) { item.arrowImage.dispose(); item.arrowImage = null; } item.updateChevron(); } } }
void copyModel(int oldModel, int oldStart, int newModel, int newStart, int[] types, int oldParent, int newParent, int modelLength) { int iter = org.eclipse.swt.widgets.OS.g_malloc(org.eclipse.swt.widgets.OS.GtkTreeIter_sizeof()); if (org.eclipse.swt.widgets.OS.gtk_tree_model_iter_children(oldModel, iter, oldParent)) { int[] oldItems = new int[org.eclipse.swt.widgets.OS.gtk_tree_model_iter_n_children(oldModel, oldParent)]; int oldIndex = 0; do { int newItem = org.eclipse.swt.widgets.OS.g_malloc(org.eclipse.swt.widgets.OS.GtkTreeIter_sizeof()); if (newItem == 0) error(SWT.ERROR_NO_HANDLES); org.eclipse.swt.widgets.OS.gtk_tree_store_append(newModel, newItem, newParent); int[] index = new int[1]; org.eclipse.swt.widgets.OS.gtk_tree_model_get(oldModel, iter, org.eclipse.swt.widgets.Tree.ID_COLUMN, index, (-1)); org.eclipse.swt.widgets.TreeItem item = null; if ((index[0]) != (-1)) { item = items[index[0]]; if (item != null) { int oldItem = item.handle; oldItems[(oldIndex++)] = oldItem; int[] ptr = new int[1]; for (int j = 0; j < (org.eclipse.swt.widgets.Tree.FIRST_COLUMN); j++) { org.eclipse.swt.widgets.OS.gtk_tree_model_get(oldModel, oldItem, j, ptr, (-1)); org.eclipse.swt.widgets.OS.gtk_tree_store_set(newModel, newItem, j, ptr[0], (-1)); if ((types[j]) == (org.eclipse.swt.widgets.OS.G_TYPE_STRING())) org.eclipse.swt.widgets.OS.g_free(ptr[0]); } for (int j = 0; j < (modelLength - (org.eclipse.swt.widgets.Tree.FIRST_COLUMN)); j++) { org.eclipse.swt.widgets.OS.gtk_tree_model_get(oldModel, oldItem, (oldStart + j), ptr, (-1)); org.eclipse.swt.widgets.OS.gtk_tree_store_set(newModel, newItem, (newStart + j), ptr[0], (-1)); if ((types[j]) == (org.eclipse.swt.widgets.OS.G_TYPE_STRING())) org.eclipse.swt.widgets.OS.g_free(ptr[0]); } } } else { org.eclipse.swt.widgets.OS.gtk_tree_store_set(newModel, newItem, org.eclipse.swt.widgets.Tree.ID_COLUMN, (-1), (-1)); } copyModel(oldModel, oldStart, newModel, newStart, types, iter, newItem, modelLength); if (item != null) { item.handle = newItem; } else { org.eclipse.swt.widgets.OS.g_free(newItem); } } while (org.eclipse.swt.widgets.OS.gtk_tree_model_iter_next(oldModel, iter) ); for (int i = 0; i < (oldItems.length); i++) { int oldItem = oldItems[i]; if (oldItem != 0) { org.eclipse.swt.widgets.OS.gtk_tree_store_remove(oldModel, oldItem); org.eclipse.swt.widgets.OS.g_free(oldItem); } } } org.eclipse.swt.widgets.OS.g_free(iter); }
int EnumLocalesProc(int lpLocaleString) { int length = 8; org.eclipse.swt.graphics.TCHAR buffer = new org.eclipse.swt.graphics.TCHAR(0, length); int byteCount = length * (TCHAR.sizeof); org.eclipse.swt.graphics.OS.MoveMemory(buffer, lpLocaleString, byteCount); int lcid = java.lang.Integer.parseInt(buffer.toString(0, buffer.strlen()), 16); int size = org.eclipse.swt.graphics.OS.GetLocaleInfo(lcid, OS.LOCALE_SISO639LANGNAME, buffer, length); if ((size <= 0) || (!(lang.equals(buffer.toString(0, (size - 1)))))) return 1; if ((country) != null) { size = org.eclipse.swt.graphics.OS.GetLocaleInfo(lcid, OS.LOCALE_SISO3166CTRYNAME, buffer, length); if ((size <= 0) || (!(country.equals(buffer.toString(0, (size - 1)))))) return 1; } size = org.eclipse.swt.graphics.OS.GetLocaleInfo(lcid, OS.LOCALE_IDEFAULTANSICODEPAGE, buffer, length); if (size <= 0) return 1; int cp = java.lang.Integer.parseInt(buffer.toString(0, (size - 1))); int[] lpCs = new int[8]; org.eclipse.swt.graphics.OS.TranslateCharsetInfo(cp, lpCs, OS.TCI_SRCCODEPAGE); data.lfCharSet = ((byte) (lpCs[0])); return 0; }
void handleCompositionChanged(org.eclipse.swt.custom.Event event) { java.lang.String text = event.text; int start = event.start; int end = event.end; int length = text.length(); if (length == (ime.getCommitCount())) { content.replaceTextRange(start, (end - start), ""); setCaretOffset(ime.getCompositionOffset(), SWT.DEFAULT); caretWidth = 0; caretDirection = SWT.NULL; } else { content.replaceTextRange(start, (end - start), text); setCaretOffset(ime.getCaretOffset(), SWT.DEFAULT); if (ime.getWideCaret()) { start = ime.getCompositionOffset(); int lineIndex = getCaretLine(); int lineOffset = content.getOffsetAtLine(lineIndex); org.eclipse.swt.custom.TextLayout layout = renderer.getTextLayout(lineIndex); caretWidth = layout.getBounds((start - lineOffset), (((start + length) - 1) - lineOffset)).width; renderer.disposeTextLayout(layout); } } showCaret(); }
public void setRegion(org.eclipse.swt.widgets.Region region) { checkWidget(); if (((style) & (SWT.NO_TRIM)) == 0) return; if ((region != null) && (region.isDisposed())) error(SWT.ERROR_INVALID_ARGUMENT); int window = org.eclipse.swt.widgets.OS.GTK_WIDGET_WINDOW(topHandle()); int shape_region = (region == null) ? 0 : region.handle; org.eclipse.swt.widgets.OS.gdk_window_shape_combine_region(window, shape_region, 0, 0); this.region = region; }
public int getFocusIndex() { checkWidget(); int result = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LB_GETCARETINDEX, 0, 0); if (result == 0) { int count = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LB_GETCOUNT, 0, 0); if (count == 0) return -1; } return result; }
public void copy() { checkWidget(); if ((((style) & (SWT.PASSWORD)) != 0) || ((echoCharacter) != '\u0000')) return; if ((txnObject) == 0) { org.eclipse.swt.widgets.Point selection = getSelection(); if ((selection.x) == (selection.y)) return; copyToClipboard(getEditText(selection.x, ((selection.y) - 1))); } else { org.eclipse.swt.internal.carbon.OS.TXNCopy(txnObject); } }
int messageProc(int hwnd, int msg, int wParam, int lParam) { switch (msg) { case org.eclipse.swt.widgets.Display.SWT_KEYMSG : boolean consumed = false; org.eclipse.swt.widgets.MSG keyMsg = new org.eclipse.swt.widgets.MSG(); org.eclipse.swt.widgets.OS.MoveMemory(keyMsg, lParam, MSG.sizeof); org.eclipse.swt.widgets.Control control = findControl(keyMsg.hwnd); if (control != null) { keyMsg.hwnd = control.handle; int flags = (OS.PM_REMOVE) | (OS.PM_NOYIELD); do { if (!(consumed |= filterMessage(keyMsg))) { org.eclipse.swt.widgets.OS.TranslateMessage(keyMsg); consumed |= (org.eclipse.swt.widgets.OS.DispatchMessage(keyMsg)) == 1; } } while (org.eclipse.swt.widgets.OS.PeekMessage(keyMsg, keyMsg.hwnd, OS.WM_KEYFIRST, OS.WM_KEYLAST, flags) ); } if (consumed) { int hHeap = org.eclipse.swt.widgets.OS.GetProcessHeap(); org.eclipse.swt.widgets.OS.HeapFree(hHeap, 0, lParam); } else { org.eclipse.swt.widgets.OS.PostMessage(embeddedHwnd, org.eclipse.swt.widgets.Display.SWT_KEYMSG, wParam, lParam); } return 0; case org.eclipse.swt.widgets.Display.SWT_TRAYICONMSG : if ((tray) != null) { org.eclipse.swt.widgets.TrayItem[] items = tray.items; for (int i = 0; i < (items.length); i++) { org.eclipse.swt.widgets.TrayItem item = items[i]; if ((item != null) && ((item.id) == wParam)) { return item.messageProc(hwnd, msg, wParam, lParam); } } } return 0; case OS.WM_ACTIVATEAPP : if (wParam != 0) { if (((modalDialogShell) != null) && (modalDialogShell.isDisposed())) modalDialogShell = null; org.eclipse.swt.widgets.Shell modal = ((modalDialogShell) != null) ? modalDialogShell : getModalShell(); if (modal != null) { int hwndModal = modal.handle; if (org.eclipse.swt.widgets.OS.IsWindowEnabled(hwndModal)) { modal.bringToTop(); } int hwndPopup = org.eclipse.swt.widgets.OS.GetLastActivePopup(hwndModal); if ((hwndPopup != 0) && (hwndPopup != (modal.handle))) { if ((getControl(hwndPopup)) == null) { if (org.eclipse.swt.widgets.OS.IsWindowEnabled(hwndPopup)) { org.eclipse.swt.widgets.OS.SetActiveWindow(hwndPopup); } } } } } break; case OS.WM_ENDSESSION : if (wParam != 0) { dispose(); java.lang.System.exit(0); } break; case OS.WM_NULL : if (OS.IsWinCE) { if (runAsyncMessages()) wakeThread(); } break; case OS.WM_QUERYENDSESSION : org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); sendEvent(SWT.Close, event); if (!(event.doit)) return 0; break; case OS.WM_SETTINGCHANGE : updateFont(); break; case OS.WM_TIMER : runTimer(wParam); break; } return org.eclipse.swt.widgets.OS.DefWindowProc(hwnd, msg, wParam, lParam); }
public void setWidth(int width) { checkWidget(); if (((style) & (SWT.SEPARATOR)) == 0) return; if (width < 0) return; org.eclipse.swt.widgets.OS.gtk_widget_set_size_request(handle, width, (-1)); int parentHandle = parent.parentingHandle(); org.eclipse.swt.widgets.OS.gtk_container_resize_children(parentHandle); resizeControl(); }
public void setHeight(int height) { if (height < 0) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_INVALID_ARGUMENT); this.height = height; data.lfWidth = 0; }
int messageProc(int hwnd, int msg, int wParam, int lParam) { switch (msg) { case org.eclipse.swt.widgets.Display.SWT_KEYMSG : { boolean consumed = false; org.eclipse.swt.widgets.MSG keyMsg = new org.eclipse.swt.widgets.MSG(); org.eclipse.swt.widgets.OS.MoveMemory(keyMsg, lParam, MSG.sizeof); org.eclipse.swt.widgets.Control control = findControl(keyMsg.hwnd); if (control != null) { boolean accentKey = false; switch (keyMsg.message) { case OS.WM_KEYDOWN : case OS.WM_SYSKEYDOWN : if (!(OS.IsWinCE)) { int mapKey = org.eclipse.swt.widgets.OS.MapVirtualKey(keyMsg.wParam, 2); accentKey = (mapKey & (OS.IsWinNT ? -2147483648 : 32768)) != 0; if (!accentKey) { for (int i = 0; i < (org.eclipse.swt.widgets.Display.ACCENTS.length); i++) { int value = org.eclipse.swt.widgets.OS.VkKeyScan(org.eclipse.swt.widgets.Display.ACCENTS[i]); if ((value != (-1)) && ((value & 255) == (keyMsg.wParam))) { int state = value >> 8; if (((org.eclipse.swt.widgets.OS.GetKeyState(OS.VK_SHIFT)) < 0) != ((state & 1) != 0)) break; if (((org.eclipse.swt.widgets.OS.GetKeyState(OS.VK_CONTROL)) < 0) != ((state & 2) != 0)) break; if (((org.eclipse.swt.widgets.OS.GetKeyState(OS.VK_MENU)) < 0) != ((state & 4) != 0)) break; accentKey = true; } } } } } if ((!accentKey) && (!(ignoreNextKey))) { keyMsg.hwnd = control.handle; int flags = (((OS.PM_REMOVE) | (OS.PM_NOYIELD)) | (OS.PM_QS_INPUT)) | (OS.PM_QS_POSTMESSAGE); do { if (!(consumed |= filterMessage(keyMsg))) { org.eclipse.swt.widgets.OS.TranslateMessage(keyMsg); consumed |= (org.eclipse.swt.widgets.OS.DispatchMessage(keyMsg)) == 1; } } while (org.eclipse.swt.widgets.OS.PeekMessage(keyMsg, keyMsg.hwnd, OS.WM_KEYFIRST, OS.WM_KEYLAST, flags) ); } switch (keyMsg.message) { case OS.WM_KEYDOWN : case OS.WM_SYSKEYDOWN : ignoreNextKey = accentKey; } } if (consumed) { int hHeap = org.eclipse.swt.widgets.OS.GetProcessHeap(); org.eclipse.swt.widgets.OS.HeapFree(hHeap, 0, lParam); } else { org.eclipse.swt.widgets.OS.PostMessage(embeddedHwnd, org.eclipse.swt.widgets.Display.SWT_KEYMSG, wParam, lParam); } return 0; } case org.eclipse.swt.widgets.Display.SWT_TRAYICONMSG : { if ((tray) != null) { org.eclipse.swt.widgets.TrayItem[] items = tray.items; for (int i = 0; i < (items.length); i++) { org.eclipse.swt.widgets.TrayItem item = items[i]; if ((item != null) && ((item.id) == wParam)) { return item.messageProc(hwnd, msg, wParam, lParam); } } } return 0; } case OS.WM_ACTIVATEAPP : { if (wParam != 0) { if (!(isXMouseActive())) { if (((modalDialogShell) != null) && (modalDialogShell.isDisposed())) modalDialogShell = null; org.eclipse.swt.widgets.Shell modal = ((modalDialogShell) != null) ? modalDialogShell : getModalShell(); if (modal != null) { int hwndModal = modal.handle; if (org.eclipse.swt.widgets.OS.IsWindowEnabled(hwndModal)) { modal.bringToTop(); if (modal.isDisposed()) break; } int hwndPopup = org.eclipse.swt.widgets.OS.GetLastActivePopup(hwndModal); if ((hwndPopup != 0) && (hwndPopup != (modal.handle))) { if ((getControl(hwndPopup)) == null) { if (org.eclipse.swt.widgets.OS.IsWindowEnabled(hwndPopup)) { org.eclipse.swt.widgets.OS.SetActiveWindow(hwndPopup); } } } } } } break; } case OS.WM_ENDSESSION : { if (wParam != 0) { dispose(); java.lang.System.exit(0); } break; } case OS.WM_QUERYENDSESSION : { org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); sendEvent(SWT.Close, event); if (!(event.doit)) return 0; break; } case OS.WM_SETTINGCHANGE : { if ((wParam == 0) || (wParam == 1)) runSettings(); break; } case OS.WM_TIMER : { runTimer(wParam); break; } default : { if (msg == (org.eclipse.swt.widgets.Display.SWT_TASKBARCREATED)) { if ((tray) != null) { org.eclipse.swt.widgets.TrayItem[] items = tray.items; for (int i = 0; i < (items.length); i++) { org.eclipse.swt.widgets.TrayItem item = items[i]; if (item != null) item.recreate(); } } } } } return org.eclipse.swt.widgets.OS.DefWindowProc(hwnd, msg, wParam, lParam); }
public void removeAll() { checkWidget(); ignoreDeselect = ignoreSelect = true; if ((drawCount) == 0) { org.eclipse.swt.widgets.OS.DefWindowProc(handle, OS.WM_SETREDRAW, 0, 0); } int result = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_DELETEITEM, 0, OS.TVI_ROOT); if ((drawCount) == 0) { org.eclipse.swt.widgets.OS.DefWindowProc(handle, OS.WM_SETREDRAW, 1, 0); org.eclipse.swt.widgets.OS.InvalidateRect(handle, null, true); } ignoreDeselect = ignoreSelect = false; if (result == 0) error(SWT.ERROR_ITEM_NOT_REMOVED); for (int i = 0; i < (items.length); i++) { org.eclipse.swt.widgets.TreeItem item = items[i]; if ((item != null) && (!(item.isDisposed()))) { item.releaseResources(); } } if ((imageList) != null) { org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_SETIMAGELIST, 0, 0); org.eclipse.swt.widgets.Display display = getDisplay(); display.releaseImageList(imageList); } imageList = null; customDraw = false; items = new org.eclipse.swt.widgets.TreeItem[4]; hAnchor = 0; }
org.eclipse.swt.graphics.NSAttributedString createString(java.lang.String string, int flags) { org.eclipse.swt.graphics.NSMutableDictionary dict = org.eclipse.swt.graphics.NSMutableDictionary.dictionaryWithCapacity(4); float[] foreground = data.foreground; org.eclipse.swt.graphics.Pattern pattern = data.foregroundPattern; if (pattern != null) { if ((pattern.color) != null) dict.setObject(pattern.color, OS.NSForegroundColorAttributeName); } else { org.eclipse.swt.graphics.NSColor color = org.eclipse.swt.graphics.NSColor.colorWithDeviceRed(foreground[0], foreground[1], foreground[2], ((data.alpha) / 255.0F)); dict.setObject(color, OS.NSForegroundColorAttributeName); } dict.setObject(data.font.handle, OS.NSFontAttributeName); if ((flags & (SWT.DRAW_TRANSPARENT)) == 0) { float[] background = data.background; org.eclipse.swt.graphics.NSColor color = org.eclipse.swt.graphics.NSColor.colorWithDeviceRed(background[0], background[1], background[2], ((data.alpha) / 255.0F)); dict.setObject(color, OS.NSBackgroundColorAttributeName); } if ((flags & (SWT.DRAW_TAB)) == 0) { org.eclipse.swt.graphics.NSMutableParagraphStyle paragraph = ((org.eclipse.swt.graphics.NSMutableParagraphStyle) (new org.eclipse.swt.graphics.NSMutableParagraphStyle().alloc().init())); paragraph.setAlignment(OS.NSLeftTextAlignment); paragraph.setLineBreakMode(OS.NSLineBreakByClipping); paragraph.setTabStops(org.eclipse.swt.graphics.NSArray.array()); dict.setObject(paragraph, OS.NSParagraphStyleAttributeName); paragraph.release(); } int length = string.length(); char[] chars = new char[length]; string.getChars(0, length, chars, 0); int breakCount = 0; int[] breaks = null; if (((flags & (SWT.DRAW_MNEMONIC)) != 0) || ((flags & (SWT.DRAW_DELIMITER)) == 0)) { int i = 0; int j = 0; while (i < (chars.length)) { char c = chars[(j++)] = chars[(i++)]; switch (c) { case '&' : { if ((flags & (SWT.DRAW_MNEMONIC)) != 0) { if (i == (chars.length)) { continue; } if ((chars[i]) == '&') { i++; continue; } j--; } break; } case '\r' : case '\n' : { if ((flags & (SWT.DRAW_DELIMITER)) == 0) { if (((c == '\r') && (i != (chars.length))) && ((chars[i]) == '\n')) i++; j--; if (breaks == null) { breaks = new int[4]; } else if (breakCount == (breaks.length)) { int[] newBreaks = new int[(breaks.length) + 4]; java.lang.System.arraycopy(breaks, 0, newBreaks, 0, breaks.length); breaks = newBreaks; } breaks[(breakCount++)] = j; } break; } } } length = j; } org.eclipse.swt.graphics.NSString str = org.eclipse.swt.graphics.NSString.stringWithCharacters(chars, length); return ((org.eclipse.swt.graphics.NSAttributedString) (new org.eclipse.swt.graphics.NSAttributedString().alloc())).initWithString(str, dict); }
org.eclipse.swt.widgets.Point getControlSize(int control) { if (org.eclipse.swt.internal.carbon.OS.HIVIEW) { org.eclipse.swt.internal.carbon.CGRect rect = new org.eclipse.swt.internal.carbon.CGRect(); org.eclipse.swt.internal.carbon.OS.HIViewGetFrame(control, rect); org.eclipse.swt.internal.carbon.Rect inset = getInset(); int width = (((int) (rect.width)) + (inset.left)) + (inset.right); int height = (((int) (rect.height)) + (inset.top)) + (inset.bottom); return new org.eclipse.swt.widgets.Point(width, height); } org.eclipse.swt.internal.carbon.Rect rect = new org.eclipse.swt.internal.carbon.Rect(); org.eclipse.swt.internal.carbon.OS.GetControlBounds(control, rect); org.eclipse.swt.internal.carbon.Rect inset = getInset(); rect.left -= inset.left; rect.top -= inset.top; rect.right += inset.right; rect.bottom += inset.bottom; return new org.eclipse.swt.widgets.Point(((rect.right) - (rect.left)), ((rect.bottom) - (rect.top))); }
public org.eclipse.swt.widgets.Point getSize() { checkWidget(); if (OS.IsWinCE) return new org.eclipse.swt.widgets.Point(0, 0); if (((style) & (SWT.BAR)) != 0) { org.eclipse.swt.widgets.MENUBARINFO info = new org.eclipse.swt.widgets.MENUBARINFO(); info.cbSize = MENUBARINFO.sizeof; int hwndParent = parent.handle; if (org.eclipse.swt.widgets.OS.GetMenuBarInfo(hwndParent, OS.OBJID_MENU, 0, info)) { int width = (info.right) - (info.left); int height = (info.bottom) - (info.top); return new org.eclipse.swt.widgets.Point(width, height); } } else { int count = GetMenuItemCount(handle); if (count != 0) { org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); int hwndParent = parent.handle; if (org.eclipse.swt.widgets.OS.GetMenuItemRect(hwndParent, handle, (count - 1), rect)) { org.eclipse.swt.widgets.OS.MapWindowPoints(0, hwndParent, rect, 2); int width = (rect.right) + 4; int height = (rect.bottom) + 4; return new org.eclipse.swt.widgets.Point(width, height); } } } return new org.eclipse.swt.widgets.Point(0, 0); }
void showToolTip(int x, int y) { java.lang.String tooltip = _getToolTip(x, y); if (tooltip == null) return; if ((toolTipShell) == null) { toolTipShell = new org.eclipse.swt.custom.Shell(getShell(), ((SWT.ON_TOP) | (SWT.TOOL))); toolTipLabel = new org.eclipse.swt.custom.Label(toolTipShell, SWT.CENTER); org.eclipse.swt.custom.Display display = toolTipShell.getDisplay(); toolTipLabel.setForeground(display.getSystemColor(SWT.COLOR_INFO_FOREGROUND)); toolTipLabel.setBackground(display.getSystemColor(SWT.COLOR_INFO_BACKGROUND)); for (int i = 0; i < (toolTipEvents.length); i++) { addListener(toolTipEvents[i], toolTipListener); } } if (updateToolTip(x, y)) { toolTipShell.setVisible(true); } else { hideToolTip(); } }
static int getDesktop(org.eclipse.swt.widgets.Display display) { if (display == null) return org.eclipse.swt.program.Program.DESKTOP_UNKNOWN; java.lang.Integer desktopValue = ((java.lang.Integer) (display.getData(org.eclipse.swt.program.Program.desktopData))); if (desktopValue != null) { return desktopValue.intValue(); } int desktop = org.eclipse.swt.program.Program.DESKTOP_UNKNOWN; int xDisplay = display.xDisplay; byte[] gnomeName = org.eclipse.swt.program.Converter.wcsToMbcs(null, "GNOME_NAME_SERVER", true); byte[] cdeName = org.eclipse.swt.program.Converter.wcsToMbcs(null, "DTWM_IS_RUNNING", true); byte[] kdeName = org.eclipse.swt.program.Converter.wcsToMbcs(null, "KWIN_RUNNING", true); int gnome = org.eclipse.swt.program.OS.XInternAtom(xDisplay, gnomeName, true); int cde = org.eclipse.swt.program.OS.XInternAtom(xDisplay, cdeName, true); int kde = org.eclipse.swt.program.OS.XInternAtom(xDisplay, kdeName, true); int rootWindow = org.eclipse.swt.program.OS.XDefaultRootWindow(xDisplay); int[] numProp = new int[1]; int propList = org.eclipse.swt.program.OS.XListProperties(xDisplay, rootWindow, numProp); if (propList == 0) return org.eclipse.swt.program.Program.DESKTOP_UNKNOWN; int[] property = new int[numProp[0]]; org.eclipse.swt.program.OS.memmove(property, propList, ((property.length) * 4)); org.eclipse.swt.program.OS.XFree(propList); for (int index = 0; (desktop == (org.eclipse.swt.program.Program.DESKTOP_UNKNOWN)) && (index < (property.length)); index++) { if ((property[index]) == (OS.None)) continue; if ((property[index]) == gnome) { if (org.eclipse.swt.program.Program.gnome_init()) desktop = org.eclipse.swt.program.Program.DESKTOP_GNOME; } if ((property[index]) == cde) { if (org.eclipse.swt.program.Program.cde_init(display)) desktop = org.eclipse.swt.program.Program.DESKTOP_CDE; } if ((property[index]) == kde) { if (org.eclipse.swt.program.Program.kde_init()) desktop = org.eclipse.swt.program.Program.DESKTOP_KDE; } } display.setData(org.eclipse.swt.program.Program.desktopData, new java.lang.Integer(desktop)); return desktop; }
void setDeferResize(boolean defer) { if (defer) { if (((resizeCount)++) == 0) { wasResized = false; if (((hooks(SWT.MeasureItem)) || (hooks(SWT.EraseItem))) || (hooks(SWT.PaintItem))) { if ((((drawCount)++) == 0) && (org.eclipse.swt.widgets.OS.IsWindowVisible(handle))) { org.eclipse.swt.widgets.OS.DefWindowProc(handle, OS.WM_SETREDRAW, 0, 0); } } } } else { if ((--(resizeCount)) == 0) { if (((hooks(SWT.MeasureItem)) || (hooks(SWT.EraseItem))) || (hooks(SWT.PaintItem))) { if ((--(drawCount)) == 0) { org.eclipse.swt.widgets.OS.DefWindowProc(handle, OS.WM_SETREDRAW, 1, 0); if (OS.IsWinCE) { int hwndHeader = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_GETHEADER, 0, 0); if (hwndHeader != 0) org.eclipse.swt.widgets.OS.InvalidateRect(hwndHeader, null, true); org.eclipse.swt.widgets.OS.InvalidateRect(handle, null, true); } else { int flags = (((OS.RDW_ERASE) | (OS.RDW_FRAME)) | (OS.RDW_INVALIDATE)) | (OS.RDW_ALLCHILDREN); org.eclipse.swt.widgets.OS.RedrawWindow(handle, null, 0, flags); } } } if (wasResized) { wasResized = false; setResizeChildren(false); sendEvent(SWT.Resize); if (isDisposed()) return; if ((layout) != null) { markLayout(false, false); updateLayout(false, false); } setResizeChildren(true); } } } }
boolean hasFocus() { org.eclipse.swt.widgets.NSWindow window = view.window(); org.eclipse.swt.widgets.NSResponder nsResponder = window.firstResponder(); if ((nsResponder.id) == (focusView().id)) return true; org.eclipse.swt.widgets.NSText fieldEditor = window.fieldEditor(false, null); if ((nsResponder.isKindOfClass(OS.class_NSTextView)) && (fieldEditor != null)) { org.eclipse.swt.widgets.id delegate = fieldEditor.delegate(); if (delegate != null) { return (delegate.id) == (focusView().id); } } return false; }
void setKeyState(org.eclipse.swt.widgets.Event event, org.eclipse.swt.widgets.GdkEventKey keyEvent) { if ((keyEvent.length) <= 1) { event.keyCode = org.eclipse.swt.widgets.Display.translateKey(keyEvent.keyval); switch (keyEvent.keyval) { case OS.GDK_BackSpace : event.character = '\b'; break; case OS.GDK_Linefeed : event.character = '\n'; break; case OS.GDK_KP_Enter : event.character = '\r'; break; case OS.GDK_Return : event.character = '\r'; break; case OS.GDK_Delete : event.character = 127; break; case OS.GDK_Cancel : case OS.GDK_Escape : event.character = 27; break; case OS.GDK_Tab : case OS.GDK_ISO_Left_Tab : event.character = '\t'; break; default : { if ((event.keyCode) == 0) { int key = keyEvent.keyval; if ((((keyEvent.state) & (OS.GDK_CONTROL_MASK)) != 0) && ((0 <= key) && (key <= 127))) { if (('a' <= key) && (key <= 'z')) key -= 'a' - 'A'; if ((64 <= key) && (key <= 95)) key -= 64; event.character = ((char) (key)); } else { event.character = ((char) (org.eclipse.swt.widgets.OS.gdk_keyval_to_unicode(key))); } } } } } setInputState(event, keyEvent.state); }
org.eclipse.swt.widgets.NSString getItemID() { org.eclipse.swt.widgets.NSString itemID = id; if (((style) & (SWT.SEPARATOR)) != 0) { if ((control) == null) { if (((width) == (org.eclipse.swt.widgets.ToolItem.DEFAULT_SEPARATOR_WIDTH)) || ((width) == 0)) { if ((OS.VERSION) < 4208) itemID = OS.NSToolbarSeparatorItemIdentifier; } else if ((width) == (SWT.DEFAULT)) { itemID = OS.NSToolbarSpaceItemIdentifier; } else if ((width) == (SWT.SEPARATOR_FILL)) { itemID = OS.NSToolbarFlexibleSpaceItemIdentifier; } } } return itemID; }
public void setVisible(boolean visible) { checkWidget(); if ((drawCount) != 0) { if ((((state) & (HIDDEN)) == 0) == visible) return; } else { if (visible == (org.eclipse.swt.widgets.OS.IsWindowVisible(handle))) return; } if (visible) { sendEvent(SWT.Show); if (isDisposed()) return; if (OS.IsHPC) { if ((menuBar) != null) { int hwndCB = menuBar.hwndCB; org.eclipse.swt.widgets.OS.CommandBar_DrawMenuBar(hwndCB, 0); } } if ((drawCount) != 0) { state &= ~(HIDDEN); } else { if (OS.IsWinCE) { org.eclipse.swt.widgets.OS.ShowWindow(handle, OS.SW_SHOW); } else { if ((menuBar) != null) { display.removeBar(menuBar); org.eclipse.swt.widgets.OS.DrawMenuBar(handle); } org.eclipse.swt.widgets.STARTUPINFO lpStartUpInfo = Display.lpStartupInfo; if ((lpStartUpInfo != null) && (((lpStartUpInfo.dwFlags) & (OS.STARTF_USESHOWWINDOW)) != 0)) { org.eclipse.swt.widgets.OS.ShowWindow(handle, lpStartUpInfo.wShowWindow); } else { org.eclipse.swt.widgets.OS.ShowWindow(handle, swFlags); } } if (isDisposed()) return; opened = true; if (!(moved)) { moved = true; org.eclipse.swt.widgets.Point location = getLocation(); oldX = location.x; oldY = location.y; } if (!(resized)) { resized = true; org.eclipse.swt.widgets.Rectangle rect = getClientArea(); oldWidth = rect.width; oldHeight = rect.height; } org.eclipse.swt.widgets.OS.UpdateWindow(handle); } } else { if (!(OS.IsWinCE)) { if (org.eclipse.swt.widgets.OS.IsIconic(handle)) { swFlags = OS.SW_SHOWMINNOACTIVE; } else { if (org.eclipse.swt.widgets.OS.IsZoomed(handle)) { swFlags = OS.SW_SHOWMAXIMIZED; } else { if ((handle) == (org.eclipse.swt.widgets.OS.GetActiveWindow())) { swFlags = OS.SW_RESTORE; } else { swFlags = OS.SW_SHOWNOACTIVATE; } } } } if ((drawCount) != 0) { state |= HIDDEN; } else { org.eclipse.swt.widgets.OS.ShowWindow(handle, OS.SW_HIDE); } if (isDisposed()) return; sendEvent(SWT.Hide); } }
org.eclipse.swt.widgets.LRESULT WM_GETDLGCODE(int wParam, int lParam) { org.eclipse.swt.widgets.LRESULT result = super.WM_GETDLGCODE(wParam, lParam); if (result != null) return result; if (OS.IsPPC) { if (((((style) & (SWT.MULTI)) != 0) && (((style) & (SWT.READ_ONLY)) == 0)) && (lParam == 0)) { return new org.eclipse.swt.widgets.LRESULT((((OS.DLGC_HASSETSEL) | (OS.DLGC_WANTALLKEYS)) | (OS.DLGC_WANTCHARS))); } } if (((style) & (SWT.READ_ONLY)) != 0) { int code = callWindowProc(OS.WM_GETDLGCODE, wParam, lParam); code &= ~(((OS.DLGC_WANTALLKEYS) | (OS.DLGC_WANTTAB)) | (OS.DLGC_WANTARROWS)); return new org.eclipse.swt.widgets.LRESULT(code); } return null; }
public Image(org.eclipse.swt.graphics.Device device, org.eclipse.swt.graphics.Image srcImage, int flag) { super(device); if (srcImage == null) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NULL_ARGUMENT); if (srcImage.isDisposed()) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_INVALID_ARGUMENT); switch (flag) { case SWT.IMAGE_COPY : case SWT.IMAGE_DISABLE : case SWT.IMAGE_GRAY : break; default : org.eclipse.swt.graphics.SWT.error(SWT.ERROR_INVALID_ARGUMENT); } device = this.device; this.type = srcImage.type; if (OS.USE_CAIRO) { if (flag != (SWT.IMAGE_DISABLE)) transparentPixel = srcImage.transparentPixel; alpha = srcImage.alpha; if ((srcImage.alphaData) != null) { alphaData = new byte[srcImage.alphaData.length]; java.lang.System.arraycopy(srcImage.alphaData, 0, alphaData, 0, alphaData.length); } int imageSurface = srcImage.surface; int width = this.width = srcImage.width; int height = this.height = srcImage.height; int format = ((org.eclipse.swt.graphics.Cairo.cairo_surface_get_content(imageSurface)) == (Cairo.CAIRO_CONTENT_COLOR)) ? Cairo.CAIRO_FORMAT_RGB24 : Cairo.CAIRO_FORMAT_ARGB32; boolean hasAlpha = format == (Cairo.CAIRO_FORMAT_ARGB32); surface = org.eclipse.swt.graphics.Cairo.cairo_image_surface_create(format, width, height); if ((surface) == 0) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NO_HANDLES); int cairo = org.eclipse.swt.graphics.Cairo.cairo_create(surface); if (cairo == 0) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NO_HANDLES); org.eclipse.swt.graphics.Cairo.cairo_set_operator(cairo, Cairo.CAIRO_OPERATOR_SOURCE); org.eclipse.swt.graphics.Cairo.cairo_set_source_surface(cairo, imageSurface, 0, 0); org.eclipse.swt.graphics.Cairo.cairo_paint(cairo); org.eclipse.swt.graphics.Cairo.cairo_destroy(cairo); if (flag != (SWT.IMAGE_COPY)) { int stride = org.eclipse.swt.graphics.Cairo.cairo_image_surface_get_stride(surface); int data = org.eclipse.swt.graphics.Cairo.cairo_image_surface_get_data(surface); int oa; int or; int og; int ob; if (OS.BIG_ENDIAN) { oa = 0; or = 1; og = 2; ob = 3; } else { oa = 3; or = 2; og = 1; ob = 0; } switch (flag) { case SWT.IMAGE_DISABLE : { org.eclipse.swt.graphics.Color zeroColor = device.getSystemColor(SWT.COLOR_WIDGET_NORMAL_SHADOW); org.eclipse.swt.graphics.RGB zeroRGB = zeroColor.getRGB(); int zeroRed = zeroRGB.red; int zeroGreen = zeroRGB.green; int zeroBlue = zeroRGB.blue; org.eclipse.swt.graphics.Color oneColor = device.getSystemColor(SWT.COLOR_WIDGET_BACKGROUND); org.eclipse.swt.graphics.RGB oneRGB = oneColor.getRGB(); int oneRed = oneRGB.red; int oneGreen = oneRGB.green; int oneBlue = oneRGB.blue; byte[] line = new byte[stride]; for (int y = 0; y < height; y++) { org.eclipse.swt.graphics.OS.memmove(line, (data + (y * stride)), stride); for (int x = 0, offset = 0; x < width; x++ , offset += 4) { int a = (line[(offset + oa)]) & 255; int r = (line[(offset + or)]) & 255; int g = (line[(offset + og)]) & 255; int b = (line[(offset + ob)]) & 255; if (hasAlpha && (a != 0)) { r = ((r * 255) + (a / 2)) / a; g = ((g * 255) + (a / 2)) / a; b = ((b * 255) + (a / 2)) / a; } int intensity = ((r * r) + (g * g)) + (b * b); if (intensity < 98304) { r = zeroRed; g = zeroGreen; b = zeroBlue; } else { r = oneRed; g = oneGreen; b = oneBlue; } if (hasAlpha) { r = (r * a) + 128; r = (r + (r >> 8)) >> 8; g = (g * a) + 128; g = (g + (g >> 8)) >> 8; b = (b * a) + 128; b = (b + (b >> 8)) >> 8; } line[(offset + or)] = ((byte) (r)); line[(offset + og)] = ((byte) (g)); line[(offset + ob)] = ((byte) (b)); } org.eclipse.swt.graphics.OS.memmove((data + (y * stride)), line, stride); } break; } case SWT.IMAGE_GRAY : { byte[] line = new byte[stride]; for (int y = 0; y < height; y++) { org.eclipse.swt.graphics.OS.memmove(line, (data + (y * stride)), stride); for (int x = 0, offset = 0; x < width; x++ , offset += 4) { int a = (line[(offset + oa)]) & 255; int r = (line[(offset + or)]) & 255; int g = (line[(offset + og)]) & 255; int b = (line[(offset + ob)]) & 255; if (hasAlpha && (a != 0)) { r = ((r * 255) + (a / 2)) / a; g = ((g * 255) + (a / 2)) / a; b = ((b * 255) + (a / 2)) / a; } int intensity = (((((((r + r) + g) + g) + g) + g) + g) + b) >> 3; if (hasAlpha) { intensity = (intensity * a) + 128; intensity = (intensity + (intensity >> 8)) >> 8; } line[(offset + or)] = line[(offset + og)] = line[(offset + ob)] = ((byte) (intensity)); } org.eclipse.swt.graphics.OS.memmove((data + (y * stride)), line, stride); } break; } } } init(); return; } int[] w = new int[1]; int[] h = new int[1]; if ((OS.GTK_VERSION) >= (org.eclipse.swt.graphics.OS.VERSION(2, 24, 0))) { org.eclipse.swt.graphics.OS.gdk_pixmap_get_size(pixmap, w, h); } else { org.eclipse.swt.graphics.OS.gdk_drawable_get_size(srcImage.pixmap, w, h); } int width = w[0]; int height = h[0]; if ((((srcImage.type) == (SWT.ICON)) && ((srcImage.mask) != 0)) || ((srcImage.transparentPixel) != (-1))) { if ((srcImage.transparentPixel) != (-1)) srcImage.createMask(); int mask = org.eclipse.swt.graphics.OS.gdk_pixmap_new(0, width, height, 1); if (mask == 0) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NO_HANDLES); int gdkGC = org.eclipse.swt.graphics.OS.gdk_gc_new(mask); if (gdkGC == 0) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NO_HANDLES); org.eclipse.swt.graphics.OS.gdk_draw_drawable(mask, gdkGC, srcImage.mask, 0, 0, 0, 0, width, height); org.eclipse.swt.graphics.OS.g_object_unref(gdkGC); this.mask = mask; if (((srcImage.transparentPixel) != (-1)) && ((srcImage.memGC) != null)) srcImage.destroyMask(); } if (flag != (SWT.IMAGE_DISABLE)) transparentPixel = srcImage.transparentPixel; alpha = srcImage.alpha; if ((srcImage.alphaData) != null) { alphaData = new byte[srcImage.alphaData.length]; java.lang.System.arraycopy(srcImage.alphaData, 0, alphaData, 0, alphaData.length); } createAlphaMask(width, height); int pixmap = org.eclipse.swt.graphics.OS.gdk_pixmap_new(org.eclipse.swt.graphics.OS.gdk_get_default_root_window(), width, height, (-1)); if (pixmap == 0) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NO_HANDLES); int gdkGC = org.eclipse.swt.graphics.OS.gdk_gc_new(pixmap); if (gdkGC == 0) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NO_HANDLES); this.pixmap = pixmap; if (flag == (SWT.IMAGE_COPY)) { org.eclipse.swt.graphics.OS.gdk_draw_drawable(pixmap, gdkGC, srcImage.pixmap, 0, 0, 0, 0, width, height); org.eclipse.swt.graphics.OS.g_object_unref(gdkGC); } else { int pixbuf = org.eclipse.swt.graphics.OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, false, 8, width, height); if (pixbuf == 0) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NO_HANDLES); int colormap = org.eclipse.swt.graphics.OS.gdk_colormap_get_system(); org.eclipse.swt.graphics.OS.gdk_pixbuf_get_from_drawable(pixbuf, srcImage.pixmap, colormap, 0, 0, 0, 0, width, height); int stride = org.eclipse.swt.graphics.OS.gdk_pixbuf_get_rowstride(pixbuf); int pixels = org.eclipse.swt.graphics.OS.gdk_pixbuf_get_pixels(pixbuf); switch (flag) { case SWT.IMAGE_DISABLE : { org.eclipse.swt.graphics.Color zeroColor = device.getSystemColor(SWT.COLOR_WIDGET_NORMAL_SHADOW); org.eclipse.swt.graphics.RGB zeroRGB = zeroColor.getRGB(); byte zeroRed = ((byte) (zeroRGB.red)); byte zeroGreen = ((byte) (zeroRGB.green)); byte zeroBlue = ((byte) (zeroRGB.blue)); org.eclipse.swt.graphics.Color oneColor = device.getSystemColor(SWT.COLOR_WIDGET_BACKGROUND); org.eclipse.swt.graphics.RGB oneRGB = oneColor.getRGB(); byte oneRed = ((byte) (oneRGB.red)); byte oneGreen = ((byte) (oneRGB.green)); byte oneBlue = ((byte) (oneRGB.blue)); byte[] line = new byte[stride]; for (int y = 0; y < height; y++) { org.eclipse.swt.graphics.OS.memmove(line, (pixels + (y * stride)), stride); for (int x = 0; x < width; x++) { int offset = x * 3; int red = (line[offset]) & 255; int green = (line[(offset + 1)]) & 255; int blue = (line[(offset + 2)]) & 255; int intensity = ((red * red) + (green * green)) + (blue * blue); if (intensity < 98304) { line[offset] = zeroRed; line[(offset + 1)] = zeroGreen; line[(offset + 2)] = zeroBlue; } else { line[offset] = oneRed; line[(offset + 1)] = oneGreen; line[(offset + 2)] = oneBlue; } } org.eclipse.swt.graphics.OS.memmove((pixels + (y * stride)), line, stride); } break; } case SWT.IMAGE_GRAY : { byte[] line = new byte[stride]; for (int y = 0; y < height; y++) { org.eclipse.swt.graphics.OS.memmove(line, (pixels + (y * stride)), stride); for (int x = 0; x < width; x++) { int offset = x * 3; int red = (line[offset]) & 255; int green = (line[(offset + 1)]) & 255; int blue = (line[(offset + 2)]) & 255; byte intensity = ((byte) ((((((((red + red) + green) + green) + green) + green) + green) + blue) >> 3)); line[offset] = line[(offset + 1)] = line[(offset + 2)] = intensity; } org.eclipse.swt.graphics.OS.memmove((pixels + (y * stride)), line, stride); } break; } } org.eclipse.swt.graphics.OS.gdk_pixbuf_render_to_drawable(pixbuf, pixmap, gdkGC, 0, 0, 0, 0, width, height, OS.GDK_RGB_DITHER_NORMAL, 0, 0); org.eclipse.swt.graphics.OS.g_object_unref(pixbuf); org.eclipse.swt.graphics.OS.g_object_unref(gdkGC); } init(); }
public int getOffset(int x, int y, int[] trailing) { checkLayout(); computeRuns(null); if ((trailing != null) && ((trailing.length) < 1)) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_INVALID_ARGUMENT); int line; int lineCount = runs.length; for (line = 0; line < lineCount; line++) { if ((lineY[(line + 1)]) > y) break; } line = java.lang.Math.min(line, ((runs.length) - 1)); org.eclipse.swt.graphics.TextLayout.StyleItem[] lineRuns = runs[line]; int lineIndent = getLineIndent(line); if (x >= (lineIndent + (lineWidth[line]))) x = (lineIndent + (lineWidth[line])) - 1; if (x < lineIndent) x = lineIndent; int low = -1; int high = lineRuns.length; while ((high - low) > 1) { int index = (high + low) / 2; org.eclipse.swt.graphics.TextLayout.StyleItem run = lineRuns[index]; if ((run.x) > x) { high = index; } else if (((run.x) + (run.width)) <= x) { low = index; } else { if ((run.lineBreak) && (!(run.softBreak))) return untranslateOffset(run.start); int xRun = x - (run.x); if (((run.style) != null) && ((run.style.metrics) != null)) { org.eclipse.swt.graphics.GlyphMetrics metrics = run.style.metrics; if ((metrics.width) > 0) { if (trailing != null) { trailing[0] = ((xRun % (metrics.width)) < ((metrics.width) / 2)) ? 0 : 1; } return untranslateOffset(((run.start) + (xRun / (metrics.width)))); } } if (run.tab) { if (trailing != null) trailing[0] = (x < ((run.x) + ((run.width) / 2))) ? 0 : 1; return untranslateOffset(run.start); } int cChars = run.length; int cGlyphs = run.glyphCount; int[] piCP = new int[1]; int[] piTrailing = new int[1]; if (((orientation) & (SWT.RIGHT_TO_LEFT)) != 0) { xRun = (run.width) - xRun; } int advances = ((run.justify) != 0) ? run.justify : run.advances; org.eclipse.swt.graphics.OS.ScriptXtoCP(xRun, cChars, cGlyphs, run.clusters, run.visAttrs, advances, run.analysis, piCP, piTrailing); int offset = (run.start) + (piCP[0]); int length = segmentsText.length(); char ch = (offset < length) ? segmentsText.charAt(offset) : 0; if (((55296 <= ch) && (ch <= 56319)) && ((piTrailing[0]) <= 1)) { if ((offset + 1) < length) { ch = segmentsText.charAt((offset + 1)); if ((56320 <= ch) && (ch <= 57343)) { if (trailing != null) trailing[0] = 0; } } } else if (((56320 <= ch) && (ch <= 57343)) && ((piTrailing[0]) <= 1)) { if ((offset - 1) >= 0) { ch = segmentsText.charAt((offset - 1)); if ((55296 <= ch) && (ch <= 56319)) { offset--; if (trailing != null) trailing[0] = 2; } } } else { if (trailing != null) trailing[0] = piTrailing[0]; } return untranslateOffset(offset); } } if (trailing != null) trailing[0] = 0; if ((lineRuns.length) == 1) { org.eclipse.swt.graphics.TextLayout.StyleItem run = lineRuns[0]; if ((run.lineBreak) && (!(run.softBreak))) return untranslateOffset(run.start); } return untranslateOffset(lineOffset[(line + 1)]); }
void applicationSendEvent(int id, int sel, int event) { org.eclipse.swt.widgets.NSEvent nsEvent = new org.eclipse.swt.widgets.NSEvent(event); org.eclipse.swt.widgets.NSWindow window = nsEvent.window(); int type = ((int) (nsEvent.type())); boolean beep = false; switch (type) { case OS.NSLeftMouseDown : case OS.NSRightMouseDown : case OS.NSOtherMouseDown : beep = true; case OS.NSLeftMouseUp : case OS.NSRightMouseUp : case OS.NSOtherMouseUp : case OS.NSLeftMouseDragged : case OS.NSRightMouseDragged : case OS.NSOtherMouseDragged : case OS.NSMouseMoved : case OS.NSMouseEntered : case OS.NSMouseExited : case OS.NSKeyDown : case OS.NSKeyUp : case OS.NSScrollWheel : if (window != null) { org.eclipse.swt.widgets.Shell shell = ((org.eclipse.swt.widgets.Shell) (getWidget(window.id))); if (shell != null) { org.eclipse.swt.widgets.Shell modalShell = shell.getModalShell(); if (modalShell != null) { if (beep) { if (!(application.isActive())) { application.activateIgnoringOtherApps(true); } else { beep(); } } return; } } } break; } sendEvent = true; if ((((window != null) && (window.isKeyWindow())) && ((nsEvent.type()) == (OS.NSKeyDown))) && (((nsEvent.modifierFlags()) & (OS.NSHelpKeyMask)) != 0)) { window.sendEvent(nsEvent); } if ((((window != null) && (window.isKeyWindow())) && ((nsEvent.type()) == (OS.NSKeyUp))) && (((nsEvent.modifierFlags()) & (OS.NSCommandKeyMask)) != 0)) { window.sendEvent(nsEvent); } else { org.eclipse.swt.widgets.objc_super super_struct = new org.eclipse.swt.widgets.objc_super(); super_struct.receiver = id; super_struct.super_class = org.eclipse.swt.widgets.OS.objc_msgSend(id, OS.sel_superclass); org.eclipse.swt.widgets.OS.objc_msgSendSuper(super_struct, sel, event); } sendEvent = false; }
void drawRoundRectangleGdip(int gdipGraphics, int brush, int x, int y, int width, int height, int arcWidth, int arcHeight) { int nx = x; int ny = y; int nw = width; int nh = height; int naw = arcWidth; int nah = arcHeight; if (nw < 0) { nw = 0 - nw; nx = nx - nw; } if (nh < 0) { nh = 0 - nh; ny = ny - nh; } if (naw < 0) naw = 0 - naw; if (nah < 0) nah = 0 - nah; int naw2 = naw / 2; int nah2 = nah / 2; if (((data.lineWidth) == 0) || (((data.lineWidth) % 2) == 1)) org.eclipse.swt.graphics.Gdip.Graphics_SetPixelOffsetMode(gdipGraphics, Gdip.PixelOffsetModeNone); if (nw > naw) { if (nh > nah) { org.eclipse.swt.graphics.Gdip.Graphics_DrawArc(gdipGraphics, brush, nx, ny, naw, nah, (-90), (-90)); org.eclipse.swt.graphics.Gdip.Graphics_DrawLine(gdipGraphics, brush, (nx + naw2), ny, ((nx + nw) - naw2), ny); org.eclipse.swt.graphics.Gdip.Graphics_DrawArc(gdipGraphics, brush, ((nx + nw) - naw), ny, naw, nah, 0, (-90)); org.eclipse.swt.graphics.Gdip.Graphics_DrawLine(gdipGraphics, brush, (nx + nw), (ny + nah2), (nx + nw), ((ny + nh) - nah2)); org.eclipse.swt.graphics.Gdip.Graphics_DrawArc(gdipGraphics, brush, ((nx + nw) - naw), ((ny + nh) - nah), naw, nah, (-270), (-90)); org.eclipse.swt.graphics.Gdip.Graphics_DrawLine(gdipGraphics, brush, (nx + naw2), (ny + nh), ((nx + nw) - naw2), (ny + nh)); org.eclipse.swt.graphics.Gdip.Graphics_DrawArc(gdipGraphics, brush, nx, ((ny + nh) - nah), naw, nah, (-180), (-90)); org.eclipse.swt.graphics.Gdip.Graphics_DrawLine(gdipGraphics, brush, nx, (ny + nah2), nx, ((ny + nh) - nah2)); } else { org.eclipse.swt.graphics.Gdip.Graphics_DrawArc(gdipGraphics, brush, nx, ny, naw, nh, 90, (-180)); org.eclipse.swt.graphics.Gdip.Graphics_DrawLine(gdipGraphics, brush, (nx + naw2), ny, ((nx + nw) - naw2), ny); org.eclipse.swt.graphics.Gdip.Graphics_DrawArc(gdipGraphics, brush, ((nx + nw) - naw), ny, naw, nh, 270, (-180)); org.eclipse.swt.graphics.Gdip.Graphics_DrawLine(gdipGraphics, brush, (nx + naw2), (ny + nh), ((nx + nw) - naw2), (ny + nh)); } } else { if (nh > nah) { org.eclipse.swt.graphics.Gdip.Graphics_DrawArc(gdipGraphics, brush, nx, ny, nw, nah, 0, (-180)); org.eclipse.swt.graphics.Gdip.Graphics_DrawLine(gdipGraphics, brush, (nx + nw), (ny + nah2), (nx + nw), ((ny + nh) - nah2)); org.eclipse.swt.graphics.Gdip.Graphics_DrawArc(gdipGraphics, brush, nx, ((ny + nh) - nah), nw, nah, (-180), (-180)); org.eclipse.swt.graphics.Gdip.Graphics_DrawLine(gdipGraphics, brush, nx, (ny + nah2), nx, ((ny + nh) - nah2)); } else { org.eclipse.swt.graphics.Gdip.Graphics_DrawArc(gdipGraphics, brush, nx, ny, nw, nh, 0, 360); } } if (((data.lineWidth) == 0) || (((data.lineWidth) % 2) == 1)) org.eclipse.swt.graphics.Gdip.Graphics_SetPixelOffsetMode(gdipGraphics, Gdip.PixelOffsetModeHalf); }
void textChanging(org.eclipse.swt.custom.TextChangingEvent event) { int start = event.start; int newCharCount = event.newCharCount; int replaceCharCount = event.replaceCharCount; int newLineCount = event.newLineCount; int replaceLineCount = event.replaceLineCount; updateRanges(start, replaceCharCount, newCharCount); int startLine = content.getLineAtOffset(start); if (replaceCharCount == (content.getCharCount())) lines = null; if (replaceLineCount == (lineCount)) { lineCount = newLineCount; lineWidth = new int[lineCount]; lineHeight = new int[lineCount]; reset(0, lineCount); } else { int delta = newLineCount - replaceLineCount; if (((lineCount) + delta) > (lineWidth.length)) { int[] newWidths = new int[((lineCount) + delta) + (org.eclipse.swt.custom.StyledTextRenderer.GROW)]; java.lang.System.arraycopy(lineWidth, 0, newWidths, 0, lineCount); lineWidth = newWidths; int[] newHeights = new int[((lineCount) + delta) + (org.eclipse.swt.custom.StyledTextRenderer.GROW)]; java.lang.System.arraycopy(lineHeight, 0, newHeights, 0, lineCount); lineHeight = newHeights; } if ((lines) != null) { if (((lineCount) + delta) > (lines.length)) { org.eclipse.swt.custom.StyledTextRenderer.LineInfo[] newLines = new org.eclipse.swt.custom.StyledTextRenderer.LineInfo[((lineCount) + delta) + (org.eclipse.swt.custom.StyledTextRenderer.GROW)]; java.lang.System.arraycopy(lines, 0, newLines, 0, lineCount); lines = newLines; } } int startIndex = (startLine + replaceLineCount) + 1; int endIndex = (startLine + newLineCount) + 1; java.lang.System.arraycopy(lineWidth, startIndex, lineWidth, endIndex, ((lineCount) - startIndex)); java.lang.System.arraycopy(lineHeight, startIndex, lineHeight, endIndex, ((lineCount) - startIndex)); for (int i = startLine; i < endIndex; i++) { lineWidth[i] = lineHeight[i] = -1; } for (int i = (lineCount) + delta; i < (lineCount); i++) { lineWidth[i] = lineHeight[i] = -1; } if ((layouts) != null) { int layoutStartLine = startLine - (topIndex); int layoutEndLine = (layoutStartLine + replaceLineCount) + 1; for (int i = layoutStartLine; i < layoutEndLine; i++) { if ((0 <= i) && (i < (layouts.length))) { if ((layouts[i]) != null) layouts[i].dispose(); layouts[i] = null; } } if (delta > 0) { for (int i = (layouts.length) - 1; i >= layoutEndLine; i--) { if ((0 <= i) && (i < (layouts.length))) { endIndex = i + delta; if ((0 <= endIndex) && (endIndex < (layouts.length))) { layouts[endIndex] = layouts[i]; layouts[i] = null; } else { if ((layouts[i]) != null) layouts[i].dispose(); layouts[i] = null; } } } } else if (delta < 0) { for (int i = layoutEndLine; i < (layouts.length); i++) { if ((0 <= i) && (i < (layouts.length))) { endIndex = i + delta; if ((0 <= endIndex) && (endIndex < (layouts.length))) { layouts[endIndex] = layouts[i]; layouts[i] = null; } else { if ((layouts[i]) != null) layouts[i].dispose(); layouts[i] = null; } } } } } if (((lines) != null) && (!((replaceLineCount == 0) && (newLineCount == 0)))) { int startLineOffset = content.getOffsetAtLine(startLine); if (startLineOffset != start) startLine++; startIndex = startLine + replaceLineCount; endIndex = startLine + newLineCount; java.lang.System.arraycopy(lines, startIndex, lines, endIndex, ((lineCount) - startIndex)); for (int i = startLine; i < endIndex; i++) { lines[i] = null; } for (int i = (lineCount) + delta; i < (lineCount); i++) { lines[i] = null; } } lineCount += delta; if ((((maxWidthLineIndex) != (-1)) && (startLine <= (maxWidthLineIndex))) && ((maxWidthLineIndex) <= (startLine + replaceLineCount))) { maxWidth = 0; maxWidthLineIndex = -1; for (int i = 0; i < (lineCount); i++) { if ((lineWidth[i]) > (maxWidth)) { maxWidth = lineWidth[i]; maxWidthLineIndex = i; } } } } }
boolean translateTraversal(org.eclipse.swt.widgets.MSG msg) { int key = msg.wParam; if (key == (OS.VK_MENU)) { org.eclipse.swt.widgets.Shell shell = getShell(); int hwndShell = shell.handle; org.eclipse.swt.widgets.OS.SendMessage(hwndShell, OS.WM_CHANGEUISTATE, OS.UIS_INITIALIZE, 0); return false; } int hwnd = msg.hwnd; int detail = SWT.TRAVERSE_NONE; boolean doit = true; boolean all = false; boolean lastVirtual = false; int lastKey = key; int lastAscii = 0; switch (key) { case OS.VK_ESCAPE : { all = true; lastAscii = 27; int code = org.eclipse.swt.widgets.OS.SendMessage(hwnd, OS.WM_GETDLGCODE, 0, 0); if ((code & (OS.DLGC_WANTALLKEYS)) != 0) { if ((code & (OS.DLGC_HASSETSEL)) == 0) doit = false; } detail = SWT.TRAVERSE_ESCAPE; break; } case OS.VK_RETURN : { all = true; lastAscii = '\r'; int code = org.eclipse.swt.widgets.OS.SendMessage(hwnd, OS.WM_GETDLGCODE, 0, 0); if ((code & (OS.DLGC_WANTALLKEYS)) != 0) doit = false; detail = SWT.TRAVERSE_RETURN; break; } case OS.VK_TAB : { lastAscii = '\t'; boolean next = (org.eclipse.swt.widgets.OS.GetKeyState(OS.VK_SHIFT)) >= 0; int code = org.eclipse.swt.widgets.OS.SendMessage(hwnd, OS.WM_GETDLGCODE, 0, 0); if ((code & ((OS.DLGC_WANTTAB) | (OS.DLGC_WANTALLKEYS))) != 0) { if (next && ((org.eclipse.swt.widgets.OS.GetKeyState(OS.VK_CONTROL)) >= 0)) doit = false; } detail = (next) ? SWT.TRAVERSE_TAB_NEXT : SWT.TRAVERSE_TAB_PREVIOUS; break; } case OS.VK_UP : case OS.VK_LEFT : case OS.VK_DOWN : case OS.VK_RIGHT : { if (OS.IsSP) { if ((key == (OS.VK_LEFT)) || (key == (OS.VK_RIGHT))) return false; } lastVirtual = true; int code = org.eclipse.swt.widgets.OS.SendMessage(hwnd, OS.WM_GETDLGCODE, 0, 0); if ((code & (OS.DLGC_WANTARROWS)) != 0) doit = false; boolean next = (key == (OS.VK_DOWN)) || (key == (OS.VK_RIGHT)); detail = (next) ? SWT.TRAVERSE_ARROW_NEXT : SWT.TRAVERSE_ARROW_PREVIOUS; break; } case OS.VK_PRIOR : case OS.VK_NEXT : { all = true; lastVirtual = true; if ((org.eclipse.swt.widgets.OS.GetKeyState(OS.VK_CONTROL)) >= 0) return false; detail = (key == (OS.VK_PRIOR)) ? SWT.TRAVERSE_PAGE_PREVIOUS : SWT.TRAVERSE_PAGE_NEXT; break; } default : return false; } org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); event.doit = doit; event.detail = detail; org.eclipse.swt.widgets.Display display = getDisplay(); display.lastKey = lastKey; display.lastAscii = lastAscii; display.lastVirtual = lastVirtual; display.lastNull = false; if (!(setKeyState(event, SWT.Traverse))) { return false; } org.eclipse.swt.widgets.Shell shell = getShell(); org.eclipse.swt.widgets.Control control = this; do { if (control.traverse(event)) { int hwndShell = shell.handle; org.eclipse.swt.widgets.OS.SendMessage(hwndShell, OS.WM_CHANGEUISTATE, OS.UIS_INITIALIZE, 0); return true; } if ((!(event.doit)) && (control.hooks(SWT.Traverse))) { return false; } if (control == shell) return false; control = control.parent; } while (all && (control != null) ); return false; }
void forceResize(int width, int height) { int flags = org.eclipse.swt.widgets.OS.GTK_WIDGET_FLAGS(vboxHandle); org.eclipse.swt.widgets.OS.GTK_WIDGET_SET_FLAGS(vboxHandle, OS.GTK_VISIBLE); org.eclipse.swt.widgets.GtkRequisition requisition = new org.eclipse.swt.widgets.GtkRequisition(); org.eclipse.swt.widgets.OS.gtk_widget_size_request(vboxHandle, requisition); org.eclipse.swt.widgets.GtkAllocation allocation = new org.eclipse.swt.widgets.GtkAllocation(); int border = org.eclipse.swt.widgets.OS.gtk_container_get_border_width(shellHandle); allocation.x = border; allocation.y = border; allocation.width = width; allocation.height = height; org.eclipse.swt.widgets.OS.gtk_widget_size_allocate(vboxHandle, allocation); if ((flags & (OS.GTK_VISIBLE)) == 0) { org.eclipse.swt.widgets.OS.GTK_WIDGET_UNSET_FLAGS(vboxHandle, OS.GTK_VISIBLE); } }
int defaultFont() { int hwnd = parent.handle; int hwndIME = org.eclipse.swt.widgets.OS.ImmGetDefaultIMEWnd(hwnd); int hFont = 0; if (hwndIME != 0) { hFont = org.eclipse.swt.widgets.OS.SendMessage(hwndIME, OS.WM_GETFONT, 0, 0); } else { hFont = org.eclipse.swt.widgets.OS.SendMessage(hwnd, OS.WM_GETFONT, 0, 0); } if (hFont == 0) return parent.defaultFont(); return hFont; }
void setDeferResize(boolean defer) { if (defer) { if (((resizeCount)++) == 0) { wasResized = false; if (((hooks(SWT.MeasureItem)) || (hooks(SWT.EraseItem))) || (hooks(SWT.PaintItem))) { if (((drawCount) == 0) && (org.eclipse.swt.widgets.OS.IsWindowVisible(handle))) { org.eclipse.swt.widgets.OS.UpdateWindow(handle); org.eclipse.swt.widgets.OS.SendMessage(handle, OS.WM_SETREDRAW, 0, 0); } } } } else { if ((--(resizeCount)) == 0) { if (((hooks(SWT.MeasureItem)) || (hooks(SWT.EraseItem))) || (hooks(SWT.PaintItem))) { if ((drawCount) == 0) { org.eclipse.swt.widgets.OS.SendMessage(handle, OS.WM_SETREDRAW, 1, 0); if (OS.IsWinCE) { org.eclipse.swt.widgets.OS.InvalidateRect(handle, null, false); } else { int flags = (((OS.RDW_ERASE) | (OS.RDW_FRAME)) | (OS.RDW_INVALIDATE)) | (OS.RDW_ALLCHILDREN); org.eclipse.swt.widgets.OS.RedrawWindow(handle, null, 0, flags); } } } if (wasResized) { wasResized = false; setResizeChildren(false); sendEvent(SWT.Resize); if (isDisposed()) return; if ((layout) != null) { markLayout(false, false); updateLayout(false, false); } setResizeChildren(true); } } } }
boolean insertText(int id, int sel, int string) { org.eclipse.swt.widgets.NSObject saver = new org.eclipse.swt.widgets.NSObject(string); saver.retain(); try { if (hasKeyboardFocus(id)) { org.eclipse.swt.widgets.Shell s = this.getShell(); org.eclipse.swt.widgets.NSEvent nsEvent = org.eclipse.swt.widgets.NSApplication.sharedApplication().currentEvent(); if (nsEvent != null) { int type = nsEvent.type(); if ((type == (OS.NSKeyDown)) || (type == (OS.NSSystemDefined))) { org.eclipse.swt.widgets.NSString str = new org.eclipse.swt.widgets.NSString(string); if (str.isKindOfClass(OS.class_NSAttributedString)) { str = new org.eclipse.swt.widgets.NSAttributedString(string).string(); } int length = ((int) (str.length())); char[] buffer = new char[length]; str.getCharacters(buffer); for (int i = 0; i < (buffer.length); i++) { s.keyInputHappened = true; org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); if ((i == 0) && (type == (OS.NSKeyDown))) setKeyState(event, SWT.KeyDown, nsEvent); event.character = buffer[i]; if (!(sendKeyEvent(SWT.KeyDown, event))) return false; } } } if (((state) & (CANVAS)) != 0) return true; } return super.insertText(id, sel, string); } finally { saver.release(); } }
public void create(org.eclipse.swt.browser.Composite parent, int style) { delegate = new org.eclipse.swt.browser.MozillaDelegate(browser); org.eclipse.swt.browser.Display display = parent.getDisplay(); int[] result = new int[1]; if (!(org.eclipse.swt.browser.Mozilla.Initialized)) { boolean initLoaded = false; org.eclipse.swt.browser.Mozilla.IsXULRunner = false; java.lang.String mozillaPath = java.lang.System.getProperty(org.eclipse.swt.browser.Mozilla.XULRUNNER_PATH); if (mozillaPath == null) { try { org.eclipse.swt.browser.Library.loadLibrary("swt-xpcominit"); initLoaded = true; } catch (java.lang.UnsatisfiedLinkError e) { } } else { mozillaPath += (org.eclipse.swt.browser.Mozilla.SEPARATOR_OS) + (delegate.getLibraryName()); java.lang.String xulrunnerInitialized = java.lang.System.getProperty(org.eclipse.swt.browser.Mozilla.XULRUNNER_INITIALIZED); if ("true".equals(xulrunnerInitialized)) { org.eclipse.swt.browser.Mozilla.Initialized = true; } org.eclipse.swt.browser.Mozilla.IsXULRunner = true; } if (initLoaded) { org.eclipse.swt.browser.GREVersionRange range = new org.eclipse.swt.browser.GREVersionRange(); byte[] bytes = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.GRERANGE_LOWER, true); int lower = org.eclipse.swt.browser.C.malloc(bytes.length); org.eclipse.swt.browser.C.memmove(lower, bytes, bytes.length); range.lower = lower; range.lowerInclusive = org.eclipse.swt.browser.Mozilla.LowerRangeInclusive; bytes = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.GRERANGE_UPPER, true); int upper = org.eclipse.swt.browser.C.malloc(bytes.length); org.eclipse.swt.browser.C.memmove(upper, bytes, bytes.length); range.upper = upper; range.upperInclusive = org.eclipse.swt.browser.Mozilla.UpperRangeInclusive; int length = XPCOMInit.PATH_MAX; int greBuffer = org.eclipse.swt.browser.C.malloc(length); int propertiesPtr = org.eclipse.swt.browser.C.malloc((2 * (C.PTR_SIZEOF))); int rc = org.eclipse.swt.browser.XPCOMInit.GRE_GetGREPathWithProperties(range, 1, propertiesPtr, 0, greBuffer, length); if (rc != (XPCOM.NS_OK)) { org.eclipse.swt.browser.C.free(lower); bytes = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.GRERANGE_LOWER_FALLBACK, true); lower = org.eclipse.swt.browser.C.malloc(bytes.length); org.eclipse.swt.browser.C.memmove(lower, bytes, bytes.length); range.lower = lower; rc = org.eclipse.swt.browser.XPCOMInit.GRE_GetGREPathWithProperties(range, 1, propertiesPtr, 0, greBuffer, length); } org.eclipse.swt.browser.C.free(lower); org.eclipse.swt.browser.C.free(upper); org.eclipse.swt.browser.C.free(propertiesPtr); if (rc == (XPCOM.NS_OK)) { length = org.eclipse.swt.browser.C.strlen(greBuffer); bytes = new byte[length]; org.eclipse.swt.browser.C.memmove(bytes, greBuffer, length); mozillaPath = new java.lang.String(org.eclipse.swt.browser.MozillaDelegate.mbcsToWcs(null, bytes)); org.eclipse.swt.browser.Mozilla.IsXULRunner = (mozillaPath.length()) > 0; if (org.eclipse.swt.browser.Mozilla.IsXULRunner) { byte[] path = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, mozillaPath, true); rc = org.eclipse.swt.browser.XPCOMInit.XPCOMGlueStartup(path); if (rc != (XPCOM.NS_OK)) { org.eclipse.swt.browser.Mozilla.IsXULRunner = false; mozillaPath = mozillaPath.substring(0, mozillaPath.lastIndexOf(org.eclipse.swt.browser.Mozilla.SEPARATOR_OS)); if (Device.DEBUG) java.lang.System.out.println(("cannot use detected XULRunner: " + mozillaPath)); } else { org.eclipse.swt.browser.XPCOMInit.XPCOMGlueShutdown(); } } } org.eclipse.swt.browser.C.free(greBuffer); } if (org.eclipse.swt.browser.Mozilla.IsXULRunner) { if (Device.DEBUG) java.lang.System.out.println(("XULRunner path: " + mozillaPath)); try { org.eclipse.swt.browser.Library.loadLibrary("swt-xulrunner"); } catch (java.lang.UnsatisfiedLinkError e) { try { org.eclipse.swt.browser.Library.loadLibrary("swt-xulrunner-gcc3"); } catch (java.lang.UnsatisfiedLinkError ex) { browser.dispose(); org.eclipse.swt.browser.SWT.error(SWT.ERROR_NO_HANDLES, e); } } byte[] path = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, mozillaPath, true); int rc = org.eclipse.swt.browser.XPCOM.XPCOMGlueStartup(path); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } mozillaPath = mozillaPath.substring(0, mozillaPath.lastIndexOf(org.eclipse.swt.browser.Mozilla.SEPARATOR_OS)); } else { if ((style & (SWT.MOZILLA)) != 0) { browser.dispose(); java.lang.String errorString = ((mozillaPath != null) && ((mozillaPath.length()) > 0)) ? (" [Failed to use detected XULRunner: " + mozillaPath) + "]" : " [Could not detect registered XULRunner to use]"; org.eclipse.swt.browser.SWT.error(SWT.ERROR_NO_HANDLES, null, errorString); } int ptr = org.eclipse.swt.browser.C.getenv(org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.MOZILLA_FIVE_HOME, true)); if (ptr != 0) { int length = org.eclipse.swt.browser.C.strlen(ptr); byte[] buffer = new byte[length]; org.eclipse.swt.browser.C.memmove(buffer, ptr, length); mozillaPath = new java.lang.String(org.eclipse.swt.browser.MozillaDelegate.mbcsToWcs(null, buffer)); } else { browser.dispose(); org.eclipse.swt.browser.SWT.error(SWT.ERROR_NO_HANDLES, null, " [Unknown Mozilla path (MOZILLA_FIVE_HOME not set)]"); } if (Device.DEBUG) java.lang.System.out.println(("Mozilla path: " + mozillaPath)); java.io.File file = new java.io.File(mozillaPath, "components/libwidget_gtk.so"); if (file.exists()) { browser.dispose(); org.eclipse.swt.browser.SWT.error(SWT.ERROR_NO_HANDLES, null, " [Mozilla GTK2 required (GTK1.2 detected)]"); } try { org.eclipse.swt.browser.Library.loadLibrary("swt-mozilla"); } catch (java.lang.UnsatisfiedLinkError e) { try { org.eclipse.swt.browser.Library.loadLibrary("swt-mozilla-gcc3"); } catch (java.lang.UnsatisfiedLinkError ex) { browser.dispose(); org.eclipse.swt.browser.SWT.error(SWT.ERROR_NO_HANDLES, e); } } } if (!(org.eclipse.swt.browser.Mozilla.Initialized)) { int[] retVal = new int[1]; org.eclipse.swt.browser.nsEmbedString pathString = new org.eclipse.swt.browser.nsEmbedString(mozillaPath); int rc = org.eclipse.swt.browser.XPCOM.NS_NewLocalFile(pathString.getAddress(), true, retVal); pathString.dispose(); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((retVal[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_ERROR_NULL_POINTER); } org.eclipse.swt.browser.Mozilla.LocationProvider = new org.eclipse.swt.browser.AppFileLocProvider(mozillaPath); org.eclipse.swt.browser.Mozilla.LocationProvider.AddRef(); org.eclipse.swt.browser.nsIFile localFile = new org.eclipse.swt.browser.nsILocalFile(retVal[0]); rc = org.eclipse.swt.browser.XPCOM.NS_InitXPCOM2(0, localFile.getAddress(), org.eclipse.swt.browser.Mozilla.LocationProvider.getAddress()); localFile.Release(); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.SWT.error(SWT.ERROR_NO_HANDLES, null, ((((" [MOZILLA_FIVE_HOME may not point at an embeddable GRE] [NS_InitEmbedding " + mozillaPath) + " error ") + rc) + "]")); } java.lang.System.setProperty(org.eclipse.swt.browser.Mozilla.XULRUNNER_PATH, mozillaPath); java.lang.System.setProperty(org.eclipse.swt.browser.Mozilla.XULRUNNER_INITIALIZED, "true"); } if (org.eclipse.swt.browser.Mozilla.IsXULRunner) { try { java.lang.Class clazz = java.lang.Class.forName("org.mozilla.xpcom.Mozilla"); java.lang.reflect.Method method = clazz.getMethod("getInstance", new java.lang.Class[0]); java.lang.Object mozilla = method.invoke(null, new java.lang.Object[0]); method = clazz.getMethod("getComponentManager", new java.lang.Class[0]); try { method.invoke(mozilla, new java.lang.Object[0]); } catch (java.lang.reflect.InvocationTargetException e) { method = clazz.getMethod("initialize", new java.lang.Class[]{ java.io.File.class }); method.invoke(mozilla, new java.lang.Object[]{ new java.io.File(mozillaPath) }); } } catch (java.lang.ClassNotFoundException e) { } catch (java.lang.NoSuchMethodException e) { } catch (java.lang.IllegalArgumentException e) { } catch (java.lang.IllegalAccessException e) { } catch (java.lang.reflect.InvocationTargetException e) { } } int rc = org.eclipse.swt.browser.XPCOM.NS_GetComponentManager(result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } org.eclipse.swt.browser.nsIComponentManager componentManager = new org.eclipse.swt.browser.nsIComponentManager(result[0]); result[0] = 0; rc = componentManager.CreateInstance(XPCOM.NS_APPSHELL_CID, 0, nsIAppShell.NS_IAPPSHELL_IID, result); if (rc != (XPCOM.NS_ERROR_NO_INTERFACE)) { if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } org.eclipse.swt.browser.Mozilla.AppShell = new org.eclipse.swt.browser.nsIAppShell(result[0]); rc = org.eclipse.swt.browser.Mozilla.AppShell.Create(0, null); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } rc = org.eclipse.swt.browser.Mozilla.AppShell.Spinup(); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } } result[0] = 0; org.eclipse.swt.browser.Mozilla.WindowCreator = new org.eclipse.swt.browser.WindowCreator2(); org.eclipse.swt.browser.Mozilla.WindowCreator.AddRef(); rc = org.eclipse.swt.browser.XPCOM.NS_GetServiceManager(result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } org.eclipse.swt.browser.nsIServiceManager serviceManager = new org.eclipse.swt.browser.nsIServiceManager(result[0]); result[0] = 0; byte[] aContractID = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_WINDOWWATCHER_CONTRACTID, true); rc = serviceManager.GetServiceByContractID(aContractID, nsIWindowWatcher.NS_IWINDOWWATCHER_IID, result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } org.eclipse.swt.browser.nsIWindowWatcher windowWatcher = new org.eclipse.swt.browser.nsIWindowWatcher(result[0]); result[0] = 0; rc = windowWatcher.SetWindowCreator(org.eclipse.swt.browser.Mozilla.WindowCreator.getAddress()); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } windowWatcher.Release(); if ((org.eclipse.swt.browser.Mozilla.LocationProvider) != null) { byte[] buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_DIRECTORYSERVICE_CONTRACTID, true); rc = serviceManager.GetServiceByContractID(buffer, nsIDirectoryService.NS_IDIRECTORYSERVICE_IID, result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } org.eclipse.swt.browser.nsIDirectoryService directoryService = new org.eclipse.swt.browser.nsIDirectoryService(result[0]); result[0] = 0; rc = directoryService.QueryInterface(nsIProperties.NS_IPROPERTIES_IID, result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } directoryService.Release(); org.eclipse.swt.browser.nsIProperties properties = new org.eclipse.swt.browser.nsIProperties(result[0]); result[0] = 0; buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_APP_APPLICATION_REGISTRY_DIR, true); rc = properties.Get(buffer, nsIFile.NS_IFILE_IID, result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } properties.Release(); org.eclipse.swt.browser.nsIFile profileDir = new org.eclipse.swt.browser.nsIFile(result[0]); result[0] = 0; int path = org.eclipse.swt.browser.XPCOM.nsEmbedCString_new(); rc = profileDir.GetNativePath(path); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } int length = org.eclipse.swt.browser.XPCOM.nsEmbedCString_Length(path); int ptr = org.eclipse.swt.browser.XPCOM.nsEmbedCString_get(path); buffer = new byte[length]; org.eclipse.swt.browser.XPCOM.memmove(buffer, ptr, length); java.lang.String profilePath = (new java.lang.String(org.eclipse.swt.browser.MozillaDelegate.mbcsToWcs(null, buffer))) + (org.eclipse.swt.browser.Mozilla.PROFILE_DIR); org.eclipse.swt.browser.Mozilla.LocationProvider.setProfilePath(profilePath); org.eclipse.swt.browser.XPCOM.nsEmbedCString_delete(path); profileDir.Release(); buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_OBSERVER_CONTRACTID, true); rc = serviceManager.GetServiceByContractID(buffer, nsIObserverService.NS_IOBSERVERSERVICE_IID, result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } org.eclipse.swt.browser.nsIObserverService observerService = new org.eclipse.swt.browser.nsIObserverService(result[0]); result[0] = 0; buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.PROFILE_DO_CHANGE, true); length = org.eclipse.swt.browser.Mozilla.STARTUP.length(); char[] chars = new char[length + 1]; org.eclipse.swt.browser.Mozilla.STARTUP.getChars(0, length, chars, 0); rc = observerService.NotifyObservers(0, buffer, chars); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.PROFILE_AFTER_CHANGE, true); rc = observerService.NotifyObservers(0, buffer, chars); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } observerService.Release(); display.addListener(SWT.Dispose, new org.eclipse.swt.browser.Listener() { public void handleEvent(org.eclipse.swt.browser.Event event) { int[] result = new int[1]; int rc = org.eclipse.swt.browser.XPCOM.NS_GetServiceManager(result); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); if ((result[0]) == 0) org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); org.eclipse.swt.browser.nsIServiceManager serviceManager = new org.eclipse.swt.browser.nsIServiceManager(result[0]); result[0] = 0; byte[] buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_OBSERVER_CONTRACTID, true); rc = serviceManager.GetServiceByContractID(buffer, nsIObserverService.NS_IOBSERVERSERVICE_IID, result); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); if ((result[0]) == 0) org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); serviceManager.Release(); org.eclipse.swt.browser.nsIObserverService observerService = new org.eclipse.swt.browser.nsIObserverService(result[0]); result[0] = 0; buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.PROFILE_BEFORE_CHANGE, true); int length = org.eclipse.swt.browser.Mozilla.SHUTDOWN_PERSIST.length(); char[] chars = new char[length + 1]; org.eclipse.swt.browser.Mozilla.SHUTDOWN_PERSIST.getChars(0, length, chars, 0); rc = observerService.NotifyObservers(0, buffer, chars); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); observerService.Release(); } }); } aContractID = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_PREFSERVICE_CONTRACTID, true); rc = serviceManager.GetServiceByContractID(aContractID, nsIPrefService.NS_IPREFSERVICE_IID, result); serviceManager.Release(); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } org.eclipse.swt.browser.nsIPrefService prefService = new org.eclipse.swt.browser.nsIPrefService(result[0]); result[0] = 0; byte[] buffer = new byte[1]; rc = prefService.GetBranch(buffer, result); prefService.Release(); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } org.eclipse.swt.browser.nsIPrefBranch prefBranch = new org.eclipse.swt.browser.nsIPrefBranch(result[0]); result[0] = 0; java.lang.String prefLocales = null; org.eclipse.swt.browser.nsIPrefLocalizedString localizedString = null; buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.PREFERENCE_LANGUAGES, true); rc = prefBranch.GetComplexValue(buffer, nsIPrefLocalizedString.NS_IPREFLOCALIZEDSTRING_IID, result); if (rc != (XPCOM.NS_OK)) { prefLocales = "en-us,en" + (org.eclipse.swt.browser.Mozilla.TOKENIZER_LOCALE); } else { if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } localizedString = new org.eclipse.swt.browser.nsIPrefLocalizedString(result[0]); result[0] = 0; rc = localizedString.ToString(result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } int length = org.eclipse.swt.browser.XPCOM.strlen_PRUnichar(result[0]); char[] dest = new char[length]; org.eclipse.swt.browser.XPCOM.memmove(dest, result[0], (length * 2)); prefLocales = (new java.lang.String(dest)) + (org.eclipse.swt.browser.Mozilla.TOKENIZER_LOCALE); } result[0] = 0; java.util.Locale locale = java.util.Locale.getDefault(); java.lang.String language = locale.getLanguage(); java.lang.String country = locale.getCountry(); java.lang.StringBuffer stringBuffer = new java.lang.StringBuffer(language); stringBuffer.append(org.eclipse.swt.browser.Mozilla.SEPARATOR_LOCALE); stringBuffer.append(country.toLowerCase()); stringBuffer.append(org.eclipse.swt.browser.Mozilla.TOKENIZER_LOCALE); stringBuffer.append(language); stringBuffer.append(org.eclipse.swt.browser.Mozilla.TOKENIZER_LOCALE); java.lang.String newLocales = stringBuffer.toString(); java.util.StringTokenizer tokenzier = new java.util.StringTokenizer(prefLocales, org.eclipse.swt.browser.Mozilla.TOKENIZER_LOCALE); while (tokenzier.hasMoreTokens()) { java.lang.String token = ((tokenzier.nextToken()) + (org.eclipse.swt.browser.Mozilla.TOKENIZER_LOCALE)).trim(); if ((newLocales.indexOf(token)) == (-1)) { stringBuffer.append(token); } } newLocales = stringBuffer.toString(); if (!(newLocales.equals(prefLocales))) { newLocales = newLocales.substring(0, ((newLocales.length()) - (org.eclipse.swt.browser.Mozilla.TOKENIZER_LOCALE.length()))); int length = newLocales.length(); char[] charBuffer = new char[length + 1]; newLocales.getChars(0, length, charBuffer, 0); if (localizedString == null) { byte[] contractID = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_PREFLOCALIZEDSTRING_CONTRACTID, true); rc = componentManager.CreateInstanceByContractID(contractID, 0, nsIPrefLocalizedString.NS_IPREFLOCALIZEDSTRING_IID, result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } localizedString = new org.eclipse.swt.browser.nsIPrefLocalizedString(result[0]); result[0] = 0; } localizedString.SetDataWithLength(length, charBuffer); rc = prefBranch.SetComplexValue(buffer, nsIPrefLocalizedString.NS_IPREFLOCALIZEDSTRING_IID, localizedString.getAddress()); } if (localizedString != null) { localizedString.Release(); localizedString = null; } java.lang.String prefCharset = null; buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.PREFERENCE_CHARSET, true); rc = prefBranch.GetComplexValue(buffer, nsIPrefLocalizedString.NS_IPREFLOCALIZEDSTRING_IID, result); if (rc != (XPCOM.NS_OK)) { prefCharset = "ISO-8859-1"; } else { if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } localizedString = new org.eclipse.swt.browser.nsIPrefLocalizedString(result[0]); result[0] = 0; rc = localizedString.ToString(result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } int length = org.eclipse.swt.browser.XPCOM.strlen_PRUnichar(result[0]); char[] dest = new char[length]; org.eclipse.swt.browser.XPCOM.memmove(dest, result[0], (length * 2)); prefCharset = new java.lang.String(dest); } result[0] = 0; java.lang.String newCharset = java.lang.System.getProperty("file.encoding"); if (!(newCharset.equals(prefCharset))) { int length = newCharset.length(); char[] charBuffer = new char[length + 1]; newCharset.getChars(0, length, charBuffer, 0); if (localizedString == null) { byte[] contractID = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_PREFLOCALIZEDSTRING_CONTRACTID, true); rc = componentManager.CreateInstanceByContractID(contractID, 0, nsIPrefLocalizedString.NS_IPREFLOCALIZEDSTRING_IID, result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } localizedString = new org.eclipse.swt.browser.nsIPrefLocalizedString(result[0]); result[0] = 0; } localizedString.SetDataWithLength(length, charBuffer); rc = prefBranch.SetComplexValue(buffer, nsIPrefLocalizedString.NS_IPREFLOCALIZEDSTRING_IID, localizedString.getAddress()); } if (localizedString != null) localizedString.Release(); buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.PREFERENCE_DISABLEOPENDURINGLOAD, true); rc = prefBranch.SetBoolPref(buffer, 0); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.PREFERENCE_DISABLEWINDOWSTATUSCHANGE, true); rc = prefBranch.SetBoolPref(buffer, 0); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } prefBranch.Release(); org.eclipse.swt.browser.PromptServiceFactory factory = new org.eclipse.swt.browser.PromptServiceFactory(); factory.AddRef(); rc = componentManager.QueryInterface(nsIComponentRegistrar.NS_ICOMPONENTREGISTRAR_IID, result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } org.eclipse.swt.browser.nsIComponentRegistrar componentRegistrar = new org.eclipse.swt.browser.nsIComponentRegistrar(result[0]); result[0] = 0; aContractID = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_PROMPTSERVICE_CONTRACTID, true); byte[] aClassName = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, "Prompt Service", true); rc = componentRegistrar.RegisterFactory(XPCOM.NS_PROMPTSERVICE_CID, aClassName, aContractID, factory.getAddress()); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } factory.Release(); org.eclipse.swt.browser.HelperAppLauncherDialogFactory dialogFactory = new org.eclipse.swt.browser.HelperAppLauncherDialogFactory(); dialogFactory.AddRef(); aContractID = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_HELPERAPPLAUNCHERDIALOG_CONTRACTID, true); aClassName = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, "Helper App Launcher Dialog", true); rc = componentRegistrar.RegisterFactory(XPCOM.NS_HELPERAPPLAUNCHERDIALOG_CID, aClassName, aContractID, dialogFactory.getAddress()); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } dialogFactory.Release(); org.eclipse.swt.browser.DownloadFactory downloadFactory = new org.eclipse.swt.browser.DownloadFactory(); downloadFactory.AddRef(); aContractID = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_DOWNLOAD_CONTRACTID, true); aClassName = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, "Download", true); rc = componentRegistrar.RegisterFactory(XPCOM.NS_DOWNLOAD_CID, aClassName, aContractID, downloadFactory.getAddress()); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } downloadFactory.Release(); org.eclipse.swt.browser.DownloadFactory_1_8 downloadFactory_1_8 = new org.eclipse.swt.browser.DownloadFactory_1_8(); downloadFactory_1_8.AddRef(); aContractID = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_TRANSFER_CONTRACTID, true); aClassName = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, "Transfer", true); rc = componentRegistrar.RegisterFactory(XPCOM.NS_DOWNLOAD_CID, aClassName, aContractID, downloadFactory_1_8.getAddress()); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } downloadFactory_1_8.Release(); org.eclipse.swt.browser.FilePickerFactory pickerFactory = (org.eclipse.swt.browser.Mozilla.IsXULRunner) ? new org.eclipse.swt.browser.FilePickerFactory_1_8() : new org.eclipse.swt.browser.FilePickerFactory(); pickerFactory.AddRef(); aContractID = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_FILEPICKER_CONTRACTID, true); aClassName = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, "FilePicker", true); rc = componentRegistrar.RegisterFactory(XPCOM.NS_FILEPICKER_CID, aClassName, aContractID, pickerFactory.getAddress()); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } pickerFactory.Release(); componentRegistrar.Release(); componentManager.Release(); org.eclipse.swt.browser.Mozilla.Is_1_8 = org.eclipse.swt.browser.Mozilla.IsXULRunner; org.eclipse.swt.browser.Mozilla.Initialized = true; } (org.eclipse.swt.browser.Mozilla.BrowserCount)++; int rc = org.eclipse.swt.browser.XPCOM.NS_GetComponentManager(result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } org.eclipse.swt.browser.nsIComponentManager componentManager = new org.eclipse.swt.browser.nsIComponentManager(result[0]); result[0] = 0; org.eclipse.swt.browser.nsID NS_IWEBBROWSER_CID = new org.eclipse.swt.browser.nsID("F1EAC761-87E9-11d3-AF80-00A024FFC08C"); rc = componentManager.CreateInstance(NS_IWEBBROWSER_CID, 0, nsIWebBrowser.NS_IWEBBROWSER_IID, result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } componentManager.Release(); webBrowser = new org.eclipse.swt.browser.nsIWebBrowser(result[0]); result[0] = 0; createCOMInterfaces(); AddRef(); if (!(org.eclipse.swt.browser.Mozilla.Is_1_8)) { rc = webBrowser.QueryInterface(nsIWebBrowserStream.NS_IWEBBROWSERSTREAM_IID, result); if ((rc == (XPCOM.NS_OK)) && ((result[0]) != 0)) { org.eclipse.swt.browser.Mozilla.Is_1_8 = true; new org.eclipse.swt.browser.nsISupports(result[0]).Release(); result[0] = 0; } } rc = webBrowser.SetContainerWindow(webBrowserChrome.getAddress()); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } rc = webBrowser.QueryInterface(nsIBaseWindow.NS_IBASEWINDOW_IID, result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_ERROR_NO_INTERFACE); } org.eclipse.swt.browser.nsIBaseWindow baseWindow = new org.eclipse.swt.browser.nsIBaseWindow(result[0]); result[0] = 0; org.eclipse.swt.browser.Rectangle rect = browser.getClientArea(); if (rect.isEmpty()) { rect.width = 1; rect.height = 1; } embedHandle = delegate.getHandle(); rc = baseWindow.InitWindow(embedHandle, 0, 0, 0, rect.width, rect.height); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_ERROR_FAILURE); } rc = baseWindow.Create(); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_ERROR_FAILURE); } rc = baseWindow.SetVisibility(true); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_ERROR_FAILURE); } baseWindow.Release(); rc = webBrowser.AddWebBrowserListener(weakReference.getAddress(), nsIWebProgressListener.NS_IWEBPROGRESSLISTENER_IID); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } rc = webBrowser.SetParentURIContentListener(uriContentListener.getAddress()); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } delegate.init(); listener = new org.eclipse.swt.browser.Listener() { public void handleEvent(org.eclipse.swt.browser.Event event) { switch (event.type) { case SWT.Dispose : { if (ignoreDispose) { ignoreDispose = false; break; } ignoreDispose = true; browser.notifyListeners(event.type, event); event.type = SWT.NONE; onDispose(event.display); break; } case SWT.Resize : onResize(); break; case SWT.FocusIn : Activate(); break; case SWT.Activate : Activate(); break; case SWT.Deactivate : { org.eclipse.swt.browser.Display display = event.display; if ((org.eclipse.swt.browser.Mozilla.this.browser) == (display.getFocusControl())) Deactivate(); break; } case SWT.Show : { org.eclipse.swt.browser.Display display = event.display; display.asyncExec(new java.lang.Runnable() { public void run() { if (browser.isDisposed()) return; onResize(); } }); break; } } } }; int[] folderEvents = new int[]{ SWT.Dispose, SWT.Resize, SWT.FocusIn, SWT.Activate, SWT.Deactivate, SWT.Show, SWT.KeyDown }; for (int i = 0; i < (folderEvents.length); i++) { browser.addListener(folderEvents[i], listener); } }
public void handleEvent(org.eclipse.swt.browser.OleEvent event) { switch (event.type) { case org.eclipse.swt.browser.Browser.BeforeNavigate2 : { org.eclipse.swt.browser.Variant varResult = event.arguments[1]; java.lang.String url = varResult.getString(); org.eclipse.swt.browser.LocationEvent newEvent = new org.eclipse.swt.browser.LocationEvent(this); newEvent.display = getDisplay(); newEvent.widget = this; newEvent.location = url; newEvent.doit = true; for (int i = 0; i < (locationListeners.length); i++) locationListeners[i].changing(newEvent); org.eclipse.swt.browser.Variant cancel = event.arguments[6]; if (cancel != null) { int pCancel = cancel.getByRef(); org.eclipse.swt.browser.COM.MoveMemory(pCancel, new short[]{ newEvent.doit ? COM.VARIANT_FALSE : COM.VARIANT_TRUE }, 2); } break; } case org.eclipse.swt.browser.Browser.CommandStateChange : { boolean enabled = false; org.eclipse.swt.browser.Variant varResult = event.arguments[0]; int command = varResult.getInt(); varResult = event.arguments[1]; enabled = varResult.getBoolean(); switch (command) { case org.eclipse.swt.browser.Browser.CSC_NAVIGATEBACK : back = enabled; break; case org.eclipse.swt.browser.Browser.CSC_NAVIGATEFORWARD : forward = enabled; break; } break; } case org.eclipse.swt.browser.Browser.DocumentComplete : { org.eclipse.swt.browser.Variant varResult = event.arguments[0]; org.eclipse.swt.browser.IDispatch dispatch = varResult.getDispatch(); varResult = event.arguments[1]; java.lang.String url = varResult.getString(); if (((html) != null) && (url.equals(org.eclipse.swt.browser.Browser.ABOUT_BLANK))) { int charCount = html.length(); char[] chars = new char[charCount]; html.getChars(0, charCount, chars, 0); html = null; int byteCount = org.eclipse.swt.browser.OS.WideCharToMultiByte(OS.CP_UTF8, 0, chars, charCount, null, 0, null, null); byte[] UTF8BOM = new byte[]{ ((byte) (239)), ((byte) (187)), ((byte) (191)) }; int hGlobal = org.eclipse.swt.browser.OS.GlobalAlloc(OS.GMEM_FIXED, ((UTF8BOM.length) + byteCount)); if (hGlobal != 0) { org.eclipse.swt.browser.OS.MoveMemory(hGlobal, UTF8BOM, UTF8BOM.length); org.eclipse.swt.browser.OS.WideCharToMultiByte(OS.CP_UTF8, 0, chars, charCount, (hGlobal + (UTF8BOM.length)), byteCount, null, null); int[] ppstm = new int[1]; if ((org.eclipse.swt.browser.OS.CreateStreamOnHGlobal(hGlobal, true, ppstm)) == (OS.S_OK)) { int[] rgdispid = auto.getIDsOfNames(new java.lang.String[]{ "Document" }); org.eclipse.swt.browser.Variant pVarResult = auto.getProperty(rgdispid[0]); org.eclipse.swt.browser.IDispatch dispatchDocument = pVarResult.getDispatch(); int[] ppvObject = new int[1]; int result = dispatchDocument.QueryInterface(COM.IIDIPersistStreamInit, ppvObject); if (result == (OS.S_OK)) { org.eclipse.swt.browser.IPersistStreamInit persistStreamInit = new org.eclipse.swt.browser.IPersistStreamInit(ppvObject[0]); if ((persistStreamInit.InitNew()) == (OS.S_OK)) { persistStreamInit.Load(ppstm[0]); } persistStreamInit.Release(); } pVarResult.dispose(); org.eclipse.swt.browser.IUnknown stream = new org.eclipse.swt.browser.IUnknown(ppstm[0]); stream.Release(); } else { org.eclipse.swt.browser.OS.GlobalFree(hGlobal); } } } else { org.eclipse.swt.browser.Variant variant = new org.eclipse.swt.browser.Variant(auto); org.eclipse.swt.browser.IDispatch top = variant.getDispatch(); org.eclipse.swt.browser.LocationEvent locationEvent = new org.eclipse.swt.browser.LocationEvent(this); locationEvent.display = getDisplay(); locationEvent.widget = this; locationEvent.location = url; locationEvent.top = (top.getAddress()) == (dispatch.getAddress()); for (int i = 0; i < (locationListeners.length); i++) locationListeners[i].changed(locationEvent); if (((globalDispatch) != 0) && ((dispatch.getAddress()) == (globalDispatch))) { globalDispatch = 0; org.eclipse.swt.browser.ProgressEvent progressEvent = new org.eclipse.swt.browser.ProgressEvent(this); progressEvent.display = getDisplay(); progressEvent.widget = this; for (int i = 0; i < (progressListeners.length); i++) progressListeners[i].completed(progressEvent); } } break; } case org.eclipse.swt.browser.Browser.NavigateComplete2 : { org.eclipse.swt.browser.Variant varResult = event.arguments[0]; org.eclipse.swt.browser.IDispatch dispatch = varResult.getDispatch(); if ((globalDispatch) == 0) globalDispatch = dispatch.getAddress(); break; } case org.eclipse.swt.browser.Browser.NewWindow2 : { org.eclipse.swt.browser.Variant cancel = event.arguments[1]; int pCancel = cancel.getByRef(); org.eclipse.swt.browser.COM.MoveMemory(pCancel, new short[]{ COM.VARIANT_TRUE }, 2); org.eclipse.swt.browser.WindowEvent newEvent = new org.eclipse.swt.browser.WindowEvent(this); newEvent.display = getDisplay(); newEvent.widget = this; for (int i = 0; i < (openWindowListeners.length); i++) openWindowListeners[i].open(newEvent); org.eclipse.swt.browser.Browser browser = newEvent.browser; boolean doit = (browser != null) && (!(browser.isDisposed())); if (doit) { org.eclipse.swt.browser.Variant variant = new org.eclipse.swt.browser.Variant(browser.auto); org.eclipse.swt.browser.IDispatch iDispatch = variant.getDispatch(); org.eclipse.swt.browser.Variant ppDisp = event.arguments[0]; int byref = ppDisp.getByRef(); if (byref != 0) org.eclipse.swt.browser.COM.MoveMemory(byref, new int[]{ iDispatch.getAddress() }, 4); } org.eclipse.swt.browser.COM.MoveMemory(pCancel, new short[]{ doit ? COM.VARIANT_FALSE : COM.VARIANT_TRUE }, 2); break; } case org.eclipse.swt.browser.Browser.OnMenuBar : { org.eclipse.swt.browser.Variant arg0 = event.arguments[0]; menuBar = arg0.getBoolean(); break; } case org.eclipse.swt.browser.Browser.OnStatusBar : { org.eclipse.swt.browser.Variant arg0 = event.arguments[0]; statusBar = arg0.getBoolean(); break; } case org.eclipse.swt.browser.Browser.OnToolBar : { org.eclipse.swt.browser.Variant arg0 = event.arguments[0]; toolBar = arg0.getBoolean(); if (!(toolBar)) { addressBar = false; menuBar = false; } break; } case org.eclipse.swt.browser.Browser.OnVisible : { org.eclipse.swt.browser.Variant arg1 = event.arguments[0]; boolean visible = arg1.getBoolean(); org.eclipse.swt.browser.WindowEvent newEvent = new org.eclipse.swt.browser.WindowEvent(this); newEvent.display = getDisplay(); newEvent.widget = this; if (visible) { if (addressBar) { int[] rgdispid = auto.getIDsOfNames(new java.lang.String[]{ "AddressBar" }); org.eclipse.swt.browser.Variant pVarResult = auto.getProperty(rgdispid[0]); if ((pVarResult != null) && ((pVarResult.getType()) == (OLE.VT_BOOL))) addressBar = pVarResult.getBoolean(); } newEvent.addressBar = addressBar; newEvent.menuBar = menuBar; newEvent.statusBar = statusBar; newEvent.toolBar = toolBar; newEvent.location = location; newEvent.size = size; for (int i = 0; i < (visibilityWindowListeners.length); i++) { visibilityWindowListeners[i].show(newEvent); } location = null; size = null; } else { for (int i = 0; i < (visibilityWindowListeners.length); i++) visibilityWindowListeners[i].hide(newEvent); } break; } case org.eclipse.swt.browser.Browser.ProgressChange : { org.eclipse.swt.browser.Variant arg1 = event.arguments[0]; int nProgress = ((arg1.getType()) != (OLE.VT_I4)) ? 0 : arg1.getInt(); org.eclipse.swt.browser.Variant arg2 = event.arguments[1]; int nProgressMax = ((arg2.getType()) != (OLE.VT_I4)) ? 0 : arg2.getInt(); org.eclipse.swt.browser.ProgressEvent newEvent = new org.eclipse.swt.browser.ProgressEvent(this); newEvent.display = getDisplay(); newEvent.widget = this; newEvent.current = nProgress; newEvent.total = nProgressMax; if (nProgress != (-1)) { for (int i = 0; i < (progressListeners.length); i++) progressListeners[i].changed(newEvent); } break; } case org.eclipse.swt.browser.Browser.StatusTextChange : { org.eclipse.swt.browser.Variant arg1 = event.arguments[0]; if ((arg1.getType()) == (OLE.VT_BSTR)) { java.lang.String text = arg1.getString(); org.eclipse.swt.browser.StatusTextEvent newEvent = new org.eclipse.swt.browser.StatusTextEvent(this); newEvent.display = getDisplay(); newEvent.widget = this; newEvent.text = text; for (int i = 0; i < (statusTextListeners.length); i++) statusTextListeners[i].changed(newEvent); } break; } case org.eclipse.swt.browser.Browser.TitleChange : { org.eclipse.swt.browser.Variant arg1 = event.arguments[0]; if ((arg1.getType()) == (OLE.VT_BSTR)) { java.lang.String title = arg1.getString(); org.eclipse.swt.browser.TitleEvent newEvent = new org.eclipse.swt.browser.TitleEvent(this); newEvent.display = getDisplay(); newEvent.widget = this; newEvent.title = title; for (int i = 0; i < (titleListeners.length); i++) titleListeners[i].changed(newEvent); } break; } case org.eclipse.swt.browser.Browser.WindowClosing : { org.eclipse.swt.browser.WindowEvent newEvent = new org.eclipse.swt.browser.WindowEvent(this); newEvent.display = getDisplay(); newEvent.widget = this; for (int i = 0; i < (closeWindowListeners.length); i++) closeWindowListeners[i].close(newEvent); org.eclipse.swt.browser.Variant cancel = event.arguments[1]; int pCancel = cancel.getByRef(); org.eclipse.swt.browser.COM.MoveMemory(pCancel, new short[]{ COM.VARIANT_FALSE }, 2); dispose(); break; } case org.eclipse.swt.browser.Browser.WindowSetHeight : { if ((size) == null) size = new org.eclipse.swt.browser.Point(0, 0); org.eclipse.swt.browser.Variant arg1 = event.arguments[0]; size.y = arg1.getInt(); break; } case org.eclipse.swt.browser.Browser.WindowSetLeft : { if ((location) == null) location = new org.eclipse.swt.browser.Point(0, 0); org.eclipse.swt.browser.Variant arg1 = event.arguments[0]; location.x = arg1.getInt(); break; } case org.eclipse.swt.browser.Browser.WindowSetTop : { if ((location) == null) location = new org.eclipse.swt.browser.Point(0, 0); org.eclipse.swt.browser.Variant arg1 = event.arguments[0]; location.y = arg1.getInt(); break; } case org.eclipse.swt.browser.Browser.WindowSetWidth : { if ((size) == null) size = new org.eclipse.swt.browser.Point(0, 0); org.eclipse.swt.browser.Variant arg1 = event.arguments[0]; size.x = arg1.getInt(); break; } } org.eclipse.swt.browser.Variant[] arguments = event.arguments; for (int i = 0; i < (arguments.length); i++) arguments[i].dispose(); }
org.eclipse.swt.widgets.LRESULT WM_NOTIFY(int wParam, int lParam) { org.eclipse.swt.widgets.NMHDR hdr = new org.eclipse.swt.widgets.NMHDR(); org.eclipse.swt.widgets.OS.MoveMemory(hdr, lParam, NMHDR.sizeof); if (((hdr.hwndFrom) == (itemToolTipHandle)) && ((hwndHeader) != 0)) { if (!(OS.IsWinCE)) { switch (hdr.code) { case OS.TTN_SHOW : { int pos = org.eclipse.swt.widgets.OS.GetMessagePos(); org.eclipse.swt.widgets.POINT pt = new org.eclipse.swt.widgets.POINT(); pt.x = ((short) (pos & 65535)); pt.y = ((short) (pos >> 16)); org.eclipse.swt.widgets.OS.ScreenToClient(handle, pt); org.eclipse.swt.widgets.TVHITTESTINFO lpht = new org.eclipse.swt.widgets.TVHITTESTINFO(); lpht.x = pt.x; lpht.y = pt.y; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_HITTEST, 0, lpht); if ((lpht.hItem) != 0) { int hDC = org.eclipse.swt.widgets.OS.GetDC(handle); int oldFont = 0; int newFont = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.WM_GETFONT, 0, 0); if (newFont != 0) oldFont = org.eclipse.swt.widgets.OS.SelectObject(hDC, newFont); org.eclipse.swt.widgets.LRESULT result = null; org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); org.eclipse.swt.widgets.OS.GetClientRect(hwndParent, rect); org.eclipse.swt.widgets.OS.MapWindowPoints(hwndParent, handle, rect, 2); org.eclipse.swt.widgets.TreeItem item = _getItem(lpht.hItem); int index = 0; int count = java.lang.Math.max(1, org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0)); int[] order = new int[count]; org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETORDERARRAY, count, order); while (index < count) { int hFont = ((item.cellFont) != null) ? item.cellFont[order[index]] : -1; if (hFont == (-1)) hFont = item.font; if (hFont != (-1)) hFont = org.eclipse.swt.widgets.OS.SelectObject(hDC, hFont); org.eclipse.swt.widgets.RECT cellRect = item.getBounds(order[index], true, false, true, false, true, hDC); if (hFont != (-1)) org.eclipse.swt.widgets.OS.SelectObject(hDC, hFont); if ((cellRect.left) > (rect.right)) break; cellRect.right = java.lang.Math.min(cellRect.right, rect.right); if (org.eclipse.swt.widgets.OS.PtInRect(cellRect, pt)) { org.eclipse.swt.widgets.RECT textRect = item.getBounds(order[index], true, false, false, false, false, hDC); if ((textRect.right) > (cellRect.right)) { org.eclipse.swt.widgets.OS.MapWindowPoints(handle, 0, textRect, 2); int flags = ((OS.SWP_NOACTIVATE) | (OS.SWP_NOSIZE)) | (OS.SWP_NOZORDER); SetWindowPos(itemToolTipHandle, 0, textRect.left, textRect.top, 0, 0, flags); result = LRESULT.ONE; } break; } index++; } if (newFont != 0) org.eclipse.swt.widgets.OS.SelectObject(hDC, oldFont); org.eclipse.swt.widgets.OS.ReleaseDC(handle, hDC); if (result != null) return result; } } } } } if ((hdr.hwndFrom) == (hwndHeader)) { switch (hdr.code) { case OS.HDN_BEGINTRACKW : case OS.HDN_BEGINTRACKA : case OS.HDN_DIVIDERDBLCLICKW : case OS.HDN_DIVIDERDBLCLICKA : { org.eclipse.swt.widgets.NMHEADER phdn = new org.eclipse.swt.widgets.NMHEADER(); org.eclipse.swt.widgets.OS.MoveMemory(phdn, lParam, NMHEADER.sizeof); org.eclipse.swt.widgets.TreeColumn column = columns[phdn.iItem]; if ((column != null) && (!(column.getResizable()))) { return LRESULT.ONE; } ignoreColumnMove = true; switch (hdr.code) { case OS.HDN_DIVIDERDBLCLICKW : case OS.HDN_DIVIDERDBLCLICKA : if (column != null) column.pack(); } break; } case OS.NM_RELEASEDCAPTURE : { if (!(ignoreColumnMove)) { int count = org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0); for (int i = 0; i < count; i++) { org.eclipse.swt.widgets.TreeColumn column = columns[i]; column.updateToolTip(i); } updateImageList(); } ignoreColumnMove = false; break; } case OS.HDN_BEGINDRAG : { if (ignoreColumnMove) return LRESULT.ONE; org.eclipse.swt.widgets.NMHEADER phdn = new org.eclipse.swt.widgets.NMHEADER(); org.eclipse.swt.widgets.OS.MoveMemory(phdn, lParam, NMHEADER.sizeof); if ((phdn.iItem) != (-1)) { org.eclipse.swt.widgets.TreeColumn column = columns[phdn.iItem]; if ((column != null) && (!(column.getMoveable()))) { ignoreColumnMove = true; return LRESULT.ONE; } } break; } case OS.HDN_ENDDRAG : { org.eclipse.swt.widgets.NMHEADER phdn = new org.eclipse.swt.widgets.NMHEADER(); org.eclipse.swt.widgets.OS.MoveMemory(phdn, lParam, NMHEADER.sizeof); if (((phdn.iItem) != (-1)) && ((phdn.pitem) != 0)) { org.eclipse.swt.widgets.HDITEM pitem = new org.eclipse.swt.widgets.HDITEM(); org.eclipse.swt.widgets.OS.MoveMemory(pitem, phdn.pitem, HDITEM.sizeof); if ((((pitem.mask) & (OS.HDI_ORDER)) != 0) && ((pitem.iOrder) != (-1))) { int count = org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0); int[] order = new int[count]; org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETORDERARRAY, count, order); int index = 0; while (index < (order.length)) { if ((order[index]) == (phdn.iItem)) break; index++; } if (index == (order.length)) index = 0; if (index == (pitem.iOrder)) break; int start = java.lang.Math.min(index, pitem.iOrder); int end = java.lang.Math.max(index, pitem.iOrder); org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); org.eclipse.swt.widgets.RECT headerRect = new org.eclipse.swt.widgets.RECT(); org.eclipse.swt.widgets.OS.GetClientRect(handle, rect); org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEMRECT, order[start], headerRect); rect.left = java.lang.Math.max(rect.left, headerRect.left); org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEMRECT, order[end], headerRect); rect.right = java.lang.Math.min(rect.right, headerRect.right); org.eclipse.swt.widgets.OS.InvalidateRect(handle, rect, true); ignoreColumnMove = false; for (int i = start; i <= end; i++) { org.eclipse.swt.widgets.TreeColumn column = columns[order[i]]; if (!(column.isDisposed())) { column.postEvent(SWT.Move); } } } } break; } case OS.HDN_ITEMCHANGINGW : case OS.HDN_ITEMCHANGINGA : { org.eclipse.swt.widgets.NMHEADER phdn = new org.eclipse.swt.widgets.NMHEADER(); org.eclipse.swt.widgets.OS.MoveMemory(phdn, lParam, NMHEADER.sizeof); if ((phdn.pitem) != 0) { org.eclipse.swt.widgets.HDITEM newItem = new org.eclipse.swt.widgets.HDITEM(); org.eclipse.swt.widgets.OS.MoveMemory(newItem, phdn.pitem, HDITEM.sizeof); if (((newItem.mask) & (OS.HDI_WIDTH)) != 0) { org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); org.eclipse.swt.widgets.OS.GetClientRect(handle, rect); org.eclipse.swt.widgets.RECT headerRect = new org.eclipse.swt.widgets.RECT(); int count = org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0); int index = org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_ORDERTOINDEX, (count - 1), 0); org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEMRECT, index, headerRect); rect.right = java.lang.Math.max(rect.right, headerRect.right); org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEMRECT, phdn.iItem, headerRect); int gridWidth = (getLinesVisible()) ? org.eclipse.swt.widgets.Tree.GRID_WIDTH : 0; rect.left = (headerRect.right) - gridWidth; if ((((findImageControl()) != null) || (hooks(SWT.EraseItem))) || (hooks(SWT.PaintItem))) { org.eclipse.swt.widgets.OS.InvalidateRect(handle, rect, true); } else { org.eclipse.swt.widgets.HDITEM oldItem = new org.eclipse.swt.widgets.HDITEM(); oldItem.mask = OS.HDI_WIDTH; org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEM, phdn.iItem, oldItem); int deltaX = (newItem.cxy) - (oldItem.cxy); int flags = (OS.SW_INVALIDATE) | (OS.SW_ERASE); org.eclipse.swt.widgets.OS.ScrollWindowEx(handle, deltaX, 0, rect, null, 0, null, flags); } if ((org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_ORDERTOINDEX, phdn.iItem, 0)) != 0) { rect.left = headerRect.left; rect.right = headerRect.right; org.eclipse.swt.widgets.OS.InvalidateRect(handle, rect, true); } setScrollWidth(); } } break; } case OS.HDN_ITEMCHANGEDW : case OS.HDN_ITEMCHANGEDA : { org.eclipse.swt.widgets.NMHEADER phdn = new org.eclipse.swt.widgets.NMHEADER(); org.eclipse.swt.widgets.OS.MoveMemory(phdn, lParam, NMHEADER.sizeof); if ((phdn.pitem) != 0) { org.eclipse.swt.widgets.HDITEM pitem = new org.eclipse.swt.widgets.HDITEM(); org.eclipse.swt.widgets.OS.MoveMemory(pitem, phdn.pitem, HDITEM.sizeof); if (((pitem.mask) & (OS.HDI_WIDTH)) != 0) { if (((style) & (SWT.DOUBLE_BUFFERED)) == 0) { if (ignoreColumnMove) { int oldStyle = style; style |= SWT.DOUBLE_BUFFERED; org.eclipse.swt.widgets.OS.UpdateWindow(handle); style = oldStyle; } } org.eclipse.swt.widgets.TreeColumn column = columns[phdn.iItem]; if (column != null) { column.updateToolTip(phdn.iItem); column.sendEvent(SWT.Resize); if (isDisposed()) return LRESULT.ZERO; int count = org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0); org.eclipse.swt.widgets.TreeColumn[] newColumns = new org.eclipse.swt.widgets.TreeColumn[count]; java.lang.System.arraycopy(columns, 0, newColumns, 0, count); int[] order = new int[count]; org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETORDERARRAY, count, order); boolean moved = false; for (int i = 0; i < count; i++) { org.eclipse.swt.widgets.TreeColumn nextColumn = newColumns[order[i]]; if (moved && (!(nextColumn.isDisposed()))) { nextColumn.updateToolTip(order[i]); nextColumn.sendEvent(SWT.Move); } if (nextColumn == column) moved = true; } } } setScrollWidth(); } break; } case OS.HDN_ITEMCLICKW : case OS.HDN_ITEMCLICKA : { org.eclipse.swt.widgets.NMHEADER phdn = new org.eclipse.swt.widgets.NMHEADER(); org.eclipse.swt.widgets.OS.MoveMemory(phdn, lParam, NMHEADER.sizeof); org.eclipse.swt.widgets.TreeColumn column = columns[phdn.iItem]; if (column != null) { column.postEvent(SWT.Selection); } break; } case OS.HDN_ITEMDBLCLICKW : case OS.HDN_ITEMDBLCLICKA : { org.eclipse.swt.widgets.NMHEADER phdn = new org.eclipse.swt.widgets.NMHEADER(); org.eclipse.swt.widgets.OS.MoveMemory(phdn, lParam, NMHEADER.sizeof); org.eclipse.swt.widgets.TreeColumn column = columns[phdn.iItem]; if (column != null) { column.postEvent(SWT.DefaultSelection); } break; } } } return super.WM_NOTIFY(wParam, lParam); }
int drawItemProc(int browser, int id, int property, int itemState, int theRect, int gdDepth, int colorDevice) { int index = getIndex(id); if (!((0 <= index) && (index < (itemCount)))) return org.eclipse.swt.internal.carbon.OS.noErr; int columnIndex = 0; if ((columnCount) > 0) { for (columnIndex = 0; columnIndex < (columnCount); columnIndex++) { if ((columns[columnIndex].id) == property) break; } if (columnIndex == (columnCount)) return org.eclipse.swt.internal.carbon.OS.noErr; } org.eclipse.swt.internal.carbon.Rect rect = new org.eclipse.swt.internal.carbon.Rect(); lastIndexOf = index; org.eclipse.swt.widgets.TableItem item = _getItem(index); if (((style) & (SWT.VIRTUAL)) != 0) { if (!(item.cached)) { if (!(checkData(item, false))) return org.eclipse.swt.internal.carbon.OS.noErr; if (setScrollWidth(item)) { if ((org.eclipse.swt.internal.carbon.OS.GetDataBrowserItemPartBounds(handle, id, property, OS.kDataBrowserPropertyEnclosingPart, rect)) == (org.eclipse.swt.internal.carbon.OS.noErr)) { int x = rect.left; int y = rect.top; int width = (rect.right) - (rect.left); int height = (rect.bottom) - (rect.top); redrawWidget(handle, x, y, width, height, false); } return org.eclipse.swt.internal.carbon.OS.noErr; } } } org.eclipse.swt.internal.carbon.OS.memmove(rect, theRect, Rect.sizeof); int x = rect.left; int y = rect.top; int width = (rect.right) - (rect.left); int height = (rect.bottom) - (rect.top); org.eclipse.swt.widgets.GC gc = paintGC; if (gc == null) { org.eclipse.swt.widgets.GCData data = new org.eclipse.swt.widgets.GCData(); int[] port = new int[1]; org.eclipse.swt.internal.carbon.OS.GetPort(port); data.port = port[0]; gc = org.eclipse.swt.widgets.GC.carbon_new(this, data); } org.eclipse.swt.internal.carbon.OS.GetDataBrowserItemPartBounds(handle, id, property, OS.kDataBrowserPropertyEnclosingPart, rect); int gridWidth = (getLinesVisible()) ? org.eclipse.swt.widgets.Table.GRID_WIDTH : 0; int itemX = (rect.left) + gridWidth; int itemY = rect.top; int itemWidth = ((rect.right) - (rect.left)) - gridWidth; int itemHeight = ((rect.bottom) - (rect.top)) + 1; if (drawBackground) { drawBackground = false; org.eclipse.swt.widgets.Region region = new org.eclipse.swt.widgets.Region(display); org.eclipse.swt.widgets.Rectangle clientArea = getClientArea(); int headerHeight = getHeaderHeight(); clientArea.y += headerHeight; clientArea.height -= headerHeight; if ((clientArea.height) < 0) clientArea.height = 0; region.add(clientArea); if ((((style) & (SWT.CHECK)) != 0) || (gridWidth != 0)) { int rgn = org.eclipse.swt.internal.carbon.OS.NewRgn(); if (((style) & (SWT.CHECK)) != 0) { if ((org.eclipse.swt.internal.carbon.OS.GetDataBrowserItemPartBounds(handle, id, org.eclipse.swt.widgets.Table.CHECK_COLUMN_ID, OS.kDataBrowserPropertyEnclosingPart, rect)) == (org.eclipse.swt.internal.carbon.OS.noErr)) { org.eclipse.swt.internal.carbon.OS.SetRectRgn(rgn, ((short) (rect.left)), ((short) (clientArea.y)), ((short) ((rect.right) + gridWidth)), ((short) ((clientArea.y) + (clientArea.height)))); org.eclipse.swt.internal.carbon.OS.DiffRgn(region.handle, rgn, region.handle); } } if (gridWidth != 0) { if ((columnCount) == 0) { if ((org.eclipse.swt.internal.carbon.OS.GetDataBrowserItemPartBounds(handle, id, org.eclipse.swt.widgets.Table.COLUMN_ID, OS.kDataBrowserPropertyEnclosingPart, rect)) == (org.eclipse.swt.internal.carbon.OS.noErr)) { org.eclipse.swt.internal.carbon.OS.SetRectRgn(rgn, ((short) (rect.right)), ((short) (clientArea.y)), ((short) ((rect.right) + gridWidth)), ((short) ((clientArea.y) + (clientArea.height)))); org.eclipse.swt.internal.carbon.OS.DiffRgn(region.handle, rgn, region.handle); } } else { for (int i = 0; i < (columnCount); i++) { if ((org.eclipse.swt.internal.carbon.OS.GetDataBrowserItemPartBounds(handle, id, columns[i].id, OS.kDataBrowserPropertyEnclosingPart, rect)) == (org.eclipse.swt.internal.carbon.OS.noErr)) { org.eclipse.swt.internal.carbon.OS.SetRectRgn(rgn, ((short) (rect.right)), ((short) (clientArea.y)), ((short) ((rect.right) + gridWidth)), ((short) ((clientArea.y) + (clientArea.height)))); org.eclipse.swt.internal.carbon.OS.DiffRgn(region.handle, rgn, region.handle); } } } } org.eclipse.swt.internal.carbon.OS.DisposeRgn(rgn); } if (region != null) gc.setClipping(region); fillBackground(handle, gc.handle, null); if (region != null) { gc.setClipping(((org.eclipse.swt.widgets.Rectangle) (null))); region.dispose(); } } org.eclipse.swt.internal.carbon.OS.CGContextSaveGState(gc.handle); int itemRgn = org.eclipse.swt.internal.carbon.OS.NewRgn(); org.eclipse.swt.internal.carbon.OS.SetRectRgn(itemRgn, ((short) (itemX)), ((short) (itemY)), ((short) (itemX + itemWidth)), ((short) (itemY + itemHeight))); int clip = org.eclipse.swt.internal.carbon.OS.NewRgn(); org.eclipse.swt.internal.carbon.OS.GetClip(clip); org.eclipse.swt.internal.carbon.OS.SectRgn(clip, itemRgn, itemRgn); org.eclipse.swt.internal.carbon.OS.DisposeRgn(clip); org.eclipse.swt.widgets.Region region = org.eclipse.swt.widgets.Region.carbon_new(display, itemRgn); org.eclipse.swt.widgets.Font font = item.getFont(columnIndex); org.eclipse.swt.widgets.Color background = item.getBackground(columnIndex); org.eclipse.swt.widgets.Color foreground = item.getForeground(columnIndex); org.eclipse.swt.widgets.Image image = item.getImage(columnIndex); java.lang.String text = item.getText(columnIndex); gc.setClipping(region); gc.setFont(font); org.eclipse.swt.widgets.Point extent = gc.stringExtent(text); int contentWidth = extent.x; org.eclipse.swt.widgets.Rectangle imageBounds = null; int gap = 0; if (image != null) { gap = getGap(); imageBounds = image.getBounds(); contentWidth += (this.imageBounds.width) + gap; } int paintWidth = contentWidth; if (hooks(SWT.MeasureItem)) { org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); event.item = item; event.index = columnIndex; event.gc = gc; event.width = contentWidth; event.height = itemHeight; sendEvent(SWT.MeasureItem, event); if (itemHeight < (event.height)) { itemHeight = event.height; org.eclipse.swt.internal.carbon.OS.SetDataBrowserTableViewRowHeight(handle, ((short) (event.height))); redrawWidget(handle, false); } if (setScrollWidth(item)) { redrawWidget(handle, false); } contentWidth = event.width; gc.setClipping(region); gc.setFont(font); } int drawState = SWT.FOREGROUND; if (((item.background) != null) || (((item.cellBackground) != null) && ((item.cellBackground[columnIndex]) != null))) drawState |= SWT.BACKGROUND; if ((itemState & ((org.eclipse.swt.internal.carbon.OS.kDataBrowserItemIsSelected) | (org.eclipse.swt.internal.carbon.OS.kDataBrowserItemIsDragTarget))) != 0) drawState |= SWT.SELECTED; boolean wasSelected = (drawState & (SWT.SELECTED)) != 0; if (((drawState & (SWT.SELECTED)) != 0) && ((((style) & (SWT.FULL_SELECTION)) != 0) || (columnIndex == 0))) { gc.setBackground(display.getSystemColor(SWT.COLOR_LIST_SELECTION)); gc.setForeground(display.getSystemColor(SWT.COLOR_LIST_SELECTION_TEXT)); } else { gc.setBackground(background); gc.setForeground(foreground); } if (hooks(SWT.EraseItem)) { org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); event.item = item; event.index = columnIndex; event.gc = gc; event.x = itemX; event.y = itemY; event.width = itemWidth; event.height = itemHeight; event.detail = drawState; sendEvent(SWT.EraseItem, event); drawState = (event.doit) ? event.detail : 0; gc.setClipping(region); gc.setFont(font); if (((drawState & (SWT.SELECTED)) != 0) && ((((style) & (SWT.FULL_SELECTION)) != 0) || (columnIndex == 0))) { gc.setBackground(display.getSystemColor(SWT.COLOR_LIST_SELECTION)); gc.setForeground(display.getSystemColor(SWT.COLOR_LIST_SELECTION_TEXT)); } else { gc.setBackground(background); if (!wasSelected) gc.setForeground(foreground); } } if (((columnCount) != 0) && (columnIndex != 0)) { org.eclipse.swt.widgets.TableColumn column = columns[columnIndex]; if (((column.style) & (SWT.CENTER)) != 0) x += (width - contentWidth) / 2; if (((column.style) & (SWT.RIGHT)) != 0) x += width - contentWidth; } int stringX = x; int imageWidth = 0; if (image != null) stringX += imageWidth = (this.imageBounds.width) + gap; if (((drawState & (SWT.SELECTED)) != 0) && ((((style) & (SWT.FULL_SELECTION)) != 0) || (columnIndex == 0))) { if ((((style) & (SWT.HIDE_SELECTION)) == 0) || (hasFocus())) { if (((style) & (SWT.FULL_SELECTION)) != 0) { gc.fillRectangle(itemX, itemY, itemWidth, (itemHeight - 1)); drawState &= ~(SWT.BACKGROUND); } else if (columnIndex == 0) { gc.fillRectangle((stringX - 1), y, ((contentWidth - imageWidth) + 2), (itemHeight - 1)); drawState &= ~(SWT.BACKGROUND); } } else { if ((drawState & (SWT.BACKGROUND)) != 0) gc.setBackground(background); } } if ((drawState & (SWT.BACKGROUND)) != 0) { if ((columnCount) == 0) { gc.fillRectangle((stringX - 1), y, ((contentWidth - imageWidth) + 2), (itemHeight - 1)); } else { gc.fillRectangle(itemX, itemY, itemWidth, itemHeight); } } if ((drawState & (SWT.FOREGROUND)) != 0) { if (image != null) { int imageX = x; int imageY = y + ((height - (this.imageBounds.height)) / 2); gc.drawImage(image, 0, 0, imageBounds.width, imageBounds.height, imageX, imageY, this.imageBounds.width, this.imageBounds.height); } gc.drawString(text, stringX, (y + ((height - (extent.y)) / 2)), true); } if (hooks(SWT.PaintItem)) { org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); event.item = item; event.index = columnIndex; event.gc = gc; event.x = x; event.y = y; event.width = paintWidth; event.height = itemHeight; event.detail = drawState; sendEvent(SWT.PaintItem, event); } org.eclipse.swt.internal.carbon.OS.CGContextRestoreGState(gc.handle); org.eclipse.swt.internal.carbon.OS.DisposeRgn(itemRgn); if (gc != (paintGC)) gc.dispose(); return org.eclipse.swt.internal.carbon.OS.noErr; }
boolean runGrabs() { if (((grabControl) == null) || (grabbing)) return false; if (!(org.eclipse.swt.internal.carbon.OS.StillDown())) { grabControl = null; return false; } org.eclipse.swt.internal.carbon.Rect rect = new org.eclipse.swt.internal.carbon.Rect(); int[] outModifiers = new int[1]; short[] outResult = new short[1]; org.eclipse.swt.internal.carbon.Point outPt = new org.eclipse.swt.internal.carbon.Point(); grabbing = true; mouseUpControl = null; try { while ((((grabControl) != null) && (!(grabControl.isDisposed()))) && ((outResult[0]) != (org.eclipse.swt.internal.carbon.OS.kMouseTrackingMouseUp))) { grabControl.getShell().update(true); lastModifiers = org.eclipse.swt.internal.carbon.OS.GetCurrentEventKeyModifiers(); int oldState = org.eclipse.swt.internal.carbon.OS.GetCurrentEventButtonState(); int handle = grabControl.handle; int window = org.eclipse.swt.internal.carbon.OS.GetControlOwner(handle); int port = org.eclipse.swt.internal.carbon.OS.GetWindowPort(window); org.eclipse.swt.internal.carbon.OS.TrackMouseLocationWithOptions(port, OS.kTrackMouseLocationOptionDontConsumeMouseUp, (50 / 1000.0), outPt, outModifiers, outResult); int type = 0; int button = 0; switch (((int) (outResult[0]))) { case org.eclipse.swt.internal.carbon.OS.kMouseTrackingTimedOut : { runAsyncMessages(); break; } case org.eclipse.swt.internal.carbon.OS.kMouseTrackingMouseDown : { type = SWT.MouseDown; int newState = org.eclipse.swt.internal.carbon.OS.GetCurrentEventButtonState(); if (((oldState & 1) == 0) && ((newState & 1) != 0)) button = 1; if (((oldState & 2) == 0) && ((newState & 2) != 0)) button = 2; if (((oldState & 4) == 0) && ((newState & 4) != 0)) button = 3; break; } case org.eclipse.swt.internal.carbon.OS.kMouseTrackingMouseUp : { type = SWT.MouseUp; int newState = org.eclipse.swt.internal.carbon.OS.GetCurrentEventButtonState(); if (((oldState & 1) != 0) && ((newState & 1) == 0)) button = 1; if (((oldState & 2) != 0) && ((newState & 2) == 0)) button = 2; if (((oldState & 4) != 0) && ((newState & 4) == 0)) button = 3; break; } case org.eclipse.swt.internal.carbon.OS.kMouseTrackingMouseDragged : { type = SWT.MouseMove; dragDetect(grabControl); break; } case org.eclipse.swt.internal.carbon.OS.kMouseTrackingMouseKeyModifiersChanged : break; case org.eclipse.swt.internal.carbon.OS.kMouseTrackingUserCancelled : break; case org.eclipse.swt.internal.carbon.OS.kMouseTrackingMouseMoved : { type = SWT.MouseMove; break; } } boolean events = type != 0; events |= runEnterExit(); if (type != 0) { org.eclipse.swt.internal.carbon.OS.GetControlBounds(handle, rect); int x = (outPt.h) - (rect.left); int y = (outPt.v) - (rect.top); int chord = org.eclipse.swt.internal.carbon.OS.GetCurrentEventButtonState(); if (((grabControl) != null) && (!(grabControl.isDisposed()))) { if (type == (SWT.MouseUp)) { mouseUpControl = grabControl; } else { grabControl.sendMouseEvent(type, ((short) (button)), chord, ((short) (x)), ((short) (y)), outModifiers[0], true); } } } if (events) runDeferredEvents(); } } finally { grabbing = false; grabControl = null; } return true; }
boolean SetScrollInfo(int hwnd, int flags, org.eclipse.swt.widgets.SCROLLINFO info, boolean fRedraw) { boolean fixRedraw = false; if (((state) & ((DISABLED) | (HIDDEN))) != 0) { fRedraw = false; fixRedraw = (org.eclipse.swt.widgets.OS.IsWindowVisible(hwnd)) && ((parent.drawCount) == 0); } if (fixRedraw) org.eclipse.swt.widgets.OS.DefWindowProc(hwnd, OS.WM_SETREDRAW, 0, 0); boolean result = org.eclipse.swt.widgets.OS.SetScrollInfo(hwnd, flags, info, fRedraw); if (((state) & (HIDDEN)) != 0) { if (!(OS.IsWinCE)) { org.eclipse.swt.widgets.ScrollBar bar = null; switch (flags) { case OS.SB_HORZ : bar = parent.getVerticalBar(); break; case OS.SB_VERT : bar = parent.getHorizontalBar(); break; } boolean both = (bar != null) && (!(bar.getVisible())); org.eclipse.swt.widgets.OS.ShowScrollBar(hwnd, (both ? OS.SB_BOTH : flags), false); } } if (((state) & (DISABLED)) != 0) { if (!(OS.IsWinCE)) { org.eclipse.swt.widgets.OS.EnableScrollBar(hwnd, flags, OS.ESB_DISABLE_BOTH); } } if (fixRedraw) org.eclipse.swt.widgets.OS.DefWindowProc(hwnd, OS.WM_SETREDRAW, 1, 0); return result; }
void OnSelectedItemChanged(int args) { int newItemRef = org.eclipse.swt.widgets.OS.RoutedPropertyChangedEventArgs_NewValue(args); org.eclipse.swt.widgets.TreeItem newItem = null; if (newItemRef != 0) { newItem = getItem(newItemRef, false); org.eclipse.swt.widgets.OS.GCHandle_Free(newItemRef); newItemRef = 0; } int treeType = org.eclipse.swt.widgets.OS.Object_GetType(handle); int propertyName = createDotNetString("IsSelectionChangeActive", false); int property = org.eclipse.swt.widgets.OS.Type_GetProperty(treeType, propertyName, ((OS.BindingFlags_Instance) | (OS.BindingFlags_NonPublic))); org.eclipse.swt.widgets.OS.GCHandle_Free(treeType); org.eclipse.swt.widgets.OS.GCHandle_Free(propertyName); org.eclipse.swt.widgets.OS.PropertyInfo_SetValueBoolean(property, handle, true, 0); int mask = (OS.ModifierKeys_Control) | (OS.ModifierKeys_Shift); int modifiers = org.eclipse.swt.widgets.OS.Keyboard_Modifiers(); switch (modifiers & mask) { case OS.ModifierKeys_Shift : deselectAll(); if (((anchor) == null) || ((anchor) == newItem)) { insertSelectedItem(newItem, selectedItemCount); } else { insertSelectedItems(anchor, newItem); } for (int i = 0; i < (selectedItemCount); i++) { org.eclipse.swt.widgets.OS.TreeViewItem_IsSelected(selectedItems[i].handle, true); } break; case OS.ModifierKeys_Control : if (newItem != null) { boolean selected = false; for (int i = 0; i < (selectedItemCount); i++) { if ((selectedItems[i]) == newItem) { selected = true; break; } } if (!selected) { insertSelectedItem(newItem, selectedItemCount); org.eclipse.swt.widgets.OS.TreeViewItem_IsSelected(newItem.handle, true); } else { removeSelectedItem(newItem); org.eclipse.swt.widgets.OS.TreeViewItem_IsSelected(newItem.handle, false); } } else { if ((anchor) != null) removeSelectedItem(anchor); } int oldItemRef = org.eclipse.swt.widgets.OS.RoutedPropertyChangedEventArgs_OldValue(args); if (oldItemRef != 0) { for (int i = 0; i < (selectedItemCount); i++) { if (org.eclipse.swt.widgets.OS.Object_Equals(oldItemRef, selectedItems[i].handle)) { org.eclipse.swt.widgets.OS.TreeViewItem_IsSelected(oldItemRef, true); break; } } org.eclipse.swt.widgets.OS.GCHandle_Free(oldItemRef); } break; default : for (int i = 0; i < (selectedItemCount); i++) { if ((newItemRef == 0) || (!(org.eclipse.swt.widgets.OS.Object_Equals(newItemRef, selectedItems[i].handle)))) { org.eclipse.swt.widgets.OS.TreeViewItem_IsSelected(selectedItems[i].handle, false); } } if (newItem != null) { org.eclipse.swt.widgets.OS.TreeViewItem_IsSelected(newItem.handle, true); selectedItems = new org.eclipse.swt.widgets.TreeItem[]{ newItem }; selectedItemCount = 1; } else { selectedItems = new org.eclipse.swt.widgets.TreeItem[0]; selectedItemCount = 0; } anchor = newItem; } org.eclipse.swt.widgets.OS.PropertyInfo_SetValueBoolean(property, handle, false, 0); org.eclipse.swt.widgets.OS.GCHandle_Free(property); }
void removeColumnVisual(org.eclipse.swt.widgets.TableColumn column) { int columnWidth = column.getWidth(); moveColumns(((column.getIndex()) + 1), (columnWidth * (-1))); redraw(); getHeader().redraw(); }
public void create(org.eclipse.swt.browser.Composite parent, int style) { delegate = new org.eclipse.swt.browser.MozillaDelegate(browser); org.eclipse.swt.browser.Display display = parent.getDisplay(); int[] result = new int[1]; if (!(org.eclipse.swt.browser.Mozilla.Initialized)) { boolean initLoaded = false; boolean IsXULRunner = false; java.lang.String greInitialized = java.lang.System.getProperty(org.eclipse.swt.browser.Mozilla.GRE_INITIALIZED); if ("true".equals(greInitialized)) { org.eclipse.swt.browser.Mozilla.Initialized = true; } java.lang.String mozillaPath = java.lang.System.getProperty(org.eclipse.swt.browser.Mozilla.XULRUNNER_PATH); if (mozillaPath == null) { try { java.lang.Class clazz = java.lang.Class.forName("org.eclipse.swt.browser.XULRunnerInitializer"); mozillaPath = java.lang.System.getProperty(org.eclipse.swt.browser.Mozilla.XULRUNNER_PATH); } catch (java.lang.ClassNotFoundException e) { } } if (mozillaPath == null) { try { java.lang.String libName = delegate.getSWTInitLibraryName(); org.eclipse.swt.browser.Library.loadLibrary(libName); initLoaded = true; } catch (java.lang.UnsatisfiedLinkError e) { } } else { mozillaPath += (org.eclipse.swt.browser.Mozilla.SEPARATOR_OS) + (delegate.getLibraryName()); IsXULRunner = true; } if (initLoaded) { org.eclipse.swt.browser.GREVersionRange range = new org.eclipse.swt.browser.GREVersionRange(); byte[] bytes = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.GRERANGE_LOWER, true); int lower = org.eclipse.swt.browser.C.malloc(bytes.length); org.eclipse.swt.browser.C.memmove(lower, bytes, bytes.length); range.lower = lower; range.lowerInclusive = org.eclipse.swt.browser.Mozilla.LowerRangeInclusive; bytes = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.GRERANGE_UPPER, true); int upper = org.eclipse.swt.browser.C.malloc(bytes.length); org.eclipse.swt.browser.C.memmove(upper, bytes, bytes.length); range.upper = upper; range.upperInclusive = org.eclipse.swt.browser.Mozilla.UpperRangeInclusive; int length = XPCOMInit.PATH_MAX; int greBuffer = org.eclipse.swt.browser.C.malloc(length); int propertiesPtr = org.eclipse.swt.browser.C.malloc((2 * (C.PTR_SIZEOF))); int rc = org.eclipse.swt.browser.XPCOMInit.GRE_GetGREPathWithProperties(range, 1, propertiesPtr, 0, greBuffer, length); if (rc != (XPCOM.NS_OK)) { org.eclipse.swt.browser.C.free(lower); bytes = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.GRERANGE_LOWER_FALLBACK, true); lower = org.eclipse.swt.browser.C.malloc(bytes.length); org.eclipse.swt.browser.C.memmove(lower, bytes, bytes.length); range.lower = lower; rc = org.eclipse.swt.browser.XPCOMInit.GRE_GetGREPathWithProperties(range, 1, propertiesPtr, 0, greBuffer, length); } org.eclipse.swt.browser.C.free(lower); org.eclipse.swt.browser.C.free(upper); org.eclipse.swt.browser.C.free(propertiesPtr); if (rc == (XPCOM.NS_OK)) { length = org.eclipse.swt.browser.C.strlen(greBuffer); bytes = new byte[length]; org.eclipse.swt.browser.C.memmove(bytes, greBuffer, length); mozillaPath = new java.lang.String(org.eclipse.swt.browser.MozillaDelegate.mbcsToWcs(null, bytes)); IsXULRunner = (mozillaPath.length()) > 0; if (IsXULRunner) { byte[] path = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, mozillaPath, true); rc = org.eclipse.swt.browser.XPCOMInit.XPCOMGlueStartup(path); if (rc != (XPCOM.NS_OK)) { IsXULRunner = false; mozillaPath = mozillaPath.substring(0, mozillaPath.lastIndexOf(org.eclipse.swt.browser.Mozilla.SEPARATOR_OS)); if (Device.DEBUG) java.lang.System.out.println(("cannot use detected XULRunner: " + mozillaPath)); } else { org.eclipse.swt.browser.Mozilla.XPCOMInitWasGlued = true; } } } org.eclipse.swt.browser.C.free(greBuffer); } if (IsXULRunner) { if (Device.DEBUG) java.lang.System.out.println(("XULRunner path: " + mozillaPath)); try { org.eclipse.swt.browser.Library.loadLibrary("swt-xulrunner"); } catch (java.lang.UnsatisfiedLinkError e) { org.eclipse.swt.browser.SWT.error(SWT.ERROR_NO_HANDLES, e); } byte[] path = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, mozillaPath, true); int rc = org.eclipse.swt.browser.XPCOM.XPCOMGlueStartup(path); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } org.eclipse.swt.browser.Mozilla.XPCOMWasGlued = true; mozillaPath = mozillaPath.substring(0, mozillaPath.lastIndexOf(org.eclipse.swt.browser.Mozilla.SEPARATOR_OS)); } else { if ((style & (SWT.MOZILLA)) != 0) { browser.dispose(); java.lang.String errorString = ((mozillaPath != null) && ((mozillaPath.length()) > 0)) ? (" [Failed to use detected XULRunner: " + mozillaPath) + "]" : " [Could not detect registered XULRunner to use]"; org.eclipse.swt.browser.SWT.error(SWT.ERROR_NO_HANDLES, null, errorString); } int ptr = org.eclipse.swt.browser.C.getenv(org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.MOZILLA_FIVE_HOME, true)); if (ptr != 0) { int length = org.eclipse.swt.browser.C.strlen(ptr); byte[] buffer = new byte[length]; org.eclipse.swt.browser.C.memmove(buffer, ptr, length); mozillaPath = new java.lang.String(org.eclipse.swt.browser.MozillaDelegate.mbcsToWcs(null, buffer)); } else { browser.dispose(); org.eclipse.swt.browser.SWT.error(SWT.ERROR_NO_HANDLES, null, " [Unknown Mozilla path (MOZILLA_FIVE_HOME not set)]"); } if (Device.DEBUG) java.lang.System.out.println(("Mozilla path: " + mozillaPath)); if (org.eclipse.swt.browser.Compatibility.fileExists(mozillaPath, "components/libwidget_gtk.so")) { browser.dispose(); org.eclipse.swt.browser.SWT.error(SWT.ERROR_NO_HANDLES, null, " [Mozilla GTK2 required (GTK1.2 detected)]"); } try { org.eclipse.swt.browser.Library.loadLibrary("swt-mozilla"); } catch (java.lang.UnsatisfiedLinkError e) { try { org.eclipse.swt.browser.Library.loadLibrary("swt-mozilla-gcc3"); } catch (java.lang.UnsatisfiedLinkError ex) { browser.dispose(); org.eclipse.swt.browser.SWT.error(SWT.ERROR_NO_HANDLES, e, ((" [MOZILLA_FIVE_HOME='" + mozillaPath) + "']")); } } } if (!(org.eclipse.swt.browser.Mozilla.Initialized)) { int[] retVal = new int[1]; org.eclipse.swt.browser.nsEmbedString pathString = new org.eclipse.swt.browser.nsEmbedString(mozillaPath); int rc = org.eclipse.swt.browser.XPCOM.NS_NewLocalFile(pathString.getAddress(), 1, retVal); pathString.dispose(); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((retVal[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_ERROR_NULL_POINTER); } org.eclipse.swt.browser.Mozilla.LocationProvider = new org.eclipse.swt.browser.AppFileLocProvider(mozillaPath); org.eclipse.swt.browser.Mozilla.LocationProvider.AddRef(); org.eclipse.swt.browser.nsIFile localFile = new org.eclipse.swt.browser.nsILocalFile(retVal[0]); rc = org.eclipse.swt.browser.XPCOM.NS_InitXPCOM2(0, localFile.getAddress(), org.eclipse.swt.browser.Mozilla.LocationProvider.getAddress()); localFile.Release(); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.SWT.error(SWT.ERROR_NO_HANDLES, null, ((((" [MOZILLA_FIVE_HOME may not point at an embeddable GRE] [NS_InitEmbedding " + mozillaPath) + " error ") + rc) + "]")); } java.lang.System.setProperty(org.eclipse.swt.browser.Mozilla.GRE_INITIALIZED, "true"); if (IsXULRunner) { java.lang.System.setProperty(org.eclipse.swt.browser.Mozilla.XULRUNNER_PATH, mozillaPath); } } if (IsXULRunner) { try { java.lang.Class clazz = java.lang.Class.forName("org.mozilla.xpcom.Mozilla"); java.lang.reflect.Method method = clazz.getMethod("getInstance", new java.lang.Class[0]); java.lang.Object mozilla = method.invoke(null, new java.lang.Object[0]); method = clazz.getMethod("getComponentManager", new java.lang.Class[0]); try { method.invoke(mozilla, new java.lang.Object[0]); } catch (java.lang.reflect.InvocationTargetException e) { java.lang.Class fileClass = java.lang.Class.forName("java.io.File"); method = clazz.getMethod("initialize", new java.lang.Class[]{ fileClass }); java.lang.reflect.Constructor constructor = fileClass.getDeclaredConstructor(new java.lang.Class[]{ java.lang.String.class }); java.lang.Object argument = constructor.newInstance(new java.lang.Object[]{ mozillaPath }); method.invoke(mozilla, new java.lang.Object[]{ argument }); } } catch (java.lang.ClassNotFoundException e) { } catch (java.lang.NoSuchMethodException e) { } catch (java.lang.IllegalArgumentException e) { } catch (java.lang.IllegalAccessException e) { } catch (java.lang.reflect.InvocationTargetException e) { } catch (java.lang.InstantiationException e) { } } int rc = org.eclipse.swt.browser.XPCOM.NS_GetComponentManager(result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } org.eclipse.swt.browser.nsIComponentManager componentManager = new org.eclipse.swt.browser.nsIComponentManager(result[0]); result[0] = 0; if (delegate.needsSpinup()) { rc = componentManager.CreateInstance(XPCOM.NS_APPSHELL_CID, 0, nsIAppShell.NS_IAPPSHELL_IID, result); if (rc != (XPCOM.NS_ERROR_NO_INTERFACE)) { if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } org.eclipse.swt.browser.Mozilla.AppShell = new org.eclipse.swt.browser.nsIAppShell(result[0]); rc = org.eclipse.swt.browser.Mozilla.AppShell.Create(0, null); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } rc = org.eclipse.swt.browser.Mozilla.AppShell.Spinup(); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } } result[0] = 0; } org.eclipse.swt.browser.Mozilla.WindowCreator = new org.eclipse.swt.browser.WindowCreator2(); org.eclipse.swt.browser.Mozilla.WindowCreator.AddRef(); rc = org.eclipse.swt.browser.XPCOM.NS_GetServiceManager(result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } org.eclipse.swt.browser.nsIServiceManager serviceManager = new org.eclipse.swt.browser.nsIServiceManager(result[0]); result[0] = 0; byte[] aContractID = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_WINDOWWATCHER_CONTRACTID, true); rc = serviceManager.GetServiceByContractID(aContractID, nsIWindowWatcher.NS_IWINDOWWATCHER_IID, result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } org.eclipse.swt.browser.nsIWindowWatcher windowWatcher = new org.eclipse.swt.browser.nsIWindowWatcher(result[0]); result[0] = 0; rc = windowWatcher.SetWindowCreator(org.eclipse.swt.browser.Mozilla.WindowCreator.getAddress()); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } windowWatcher.Release(); if ((org.eclipse.swt.browser.Mozilla.LocationProvider) != null) { byte[] buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_DIRECTORYSERVICE_CONTRACTID, true); rc = serviceManager.GetServiceByContractID(buffer, nsIDirectoryService.NS_IDIRECTORYSERVICE_IID, result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } org.eclipse.swt.browser.nsIDirectoryService directoryService = new org.eclipse.swt.browser.nsIDirectoryService(result[0]); result[0] = 0; rc = directoryService.QueryInterface(nsIProperties.NS_IPROPERTIES_IID, result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } directoryService.Release(); org.eclipse.swt.browser.nsIProperties properties = new org.eclipse.swt.browser.nsIProperties(result[0]); result[0] = 0; buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_APP_APPLICATION_REGISTRY_DIR, true); rc = properties.Get(buffer, nsIFile.NS_IFILE_IID, result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } properties.Release(); org.eclipse.swt.browser.nsIFile profileDir = new org.eclipse.swt.browser.nsIFile(result[0]); result[0] = 0; int path = org.eclipse.swt.browser.XPCOM.nsEmbedCString_new(); rc = profileDir.GetNativePath(path); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } int length = org.eclipse.swt.browser.XPCOM.nsEmbedCString_Length(path); int ptr = org.eclipse.swt.browser.XPCOM.nsEmbedCString_get(path); buffer = new byte[length]; org.eclipse.swt.browser.XPCOM.memmove(buffer, ptr, length); java.lang.String profilePath = (new java.lang.String(org.eclipse.swt.browser.MozillaDelegate.mbcsToWcs(null, buffer))) + (org.eclipse.swt.browser.Mozilla.PROFILE_DIR); org.eclipse.swt.browser.Mozilla.LocationProvider.setProfilePath(profilePath); org.eclipse.swt.browser.Mozilla.LocationProvider.isXULRunner = IsXULRunner; org.eclipse.swt.browser.XPCOM.nsEmbedCString_delete(path); profileDir.Release(); buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_OBSERVER_CONTRACTID, true); rc = serviceManager.GetServiceByContractID(buffer, nsIObserverService.NS_IOBSERVERSERVICE_IID, result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } org.eclipse.swt.browser.nsIObserverService observerService = new org.eclipse.swt.browser.nsIObserverService(result[0]); result[0] = 0; buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.PROFILE_DO_CHANGE, true); length = org.eclipse.swt.browser.Mozilla.STARTUP.length(); char[] chars = new char[length + 1]; org.eclipse.swt.browser.Mozilla.STARTUP.getChars(0, length, chars, 0); rc = observerService.NotifyObservers(0, buffer, chars); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.PROFILE_AFTER_CHANGE, true); rc = observerService.NotifyObservers(0, buffer, chars); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } observerService.Release(); } aContractID = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_PREFSERVICE_CONTRACTID, true); rc = serviceManager.GetServiceByContractID(aContractID, nsIPrefService.NS_IPREFSERVICE_IID, result); serviceManager.Release(); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } org.eclipse.swt.browser.nsIPrefService prefService = new org.eclipse.swt.browser.nsIPrefService(result[0]); result[0] = 0; byte[] buffer = new byte[1]; rc = prefService.GetBranch(buffer, result); prefService.Release(); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } org.eclipse.swt.browser.nsIPrefBranch prefBranch = new org.eclipse.swt.browser.nsIPrefBranch(result[0]); result[0] = 0; java.lang.String prefLocales = null; org.eclipse.swt.browser.nsIPrefLocalizedString localizedString = null; buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.PREFERENCE_LANGUAGES, true); rc = prefBranch.GetComplexValue(buffer, nsIPrefLocalizedString.NS_IPREFLOCALIZEDSTRING_IID, result); if (rc != (XPCOM.NS_OK)) { prefLocales = "en-us,en" + (org.eclipse.swt.browser.Mozilla.TOKENIZER_LOCALE); } else { if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } localizedString = new org.eclipse.swt.browser.nsIPrefLocalizedString(result[0]); result[0] = 0; rc = localizedString.ToString(result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } int length = org.eclipse.swt.browser.XPCOM.strlen_PRUnichar(result[0]); char[] dest = new char[length]; org.eclipse.swt.browser.XPCOM.memmove(dest, result[0], (length * 2)); prefLocales = (new java.lang.String(dest)) + (org.eclipse.swt.browser.Mozilla.TOKENIZER_LOCALE); } result[0] = 0; java.util.Locale locale = java.util.Locale.getDefault(); java.lang.String language = locale.getLanguage(); java.lang.String country = locale.getCountry(); java.lang.StringBuffer stringBuffer = new java.lang.StringBuffer(language); stringBuffer.append(org.eclipse.swt.browser.Mozilla.SEPARATOR_LOCALE); stringBuffer.append(country.toLowerCase()); stringBuffer.append(org.eclipse.swt.browser.Mozilla.TOKENIZER_LOCALE); stringBuffer.append(language); stringBuffer.append(org.eclipse.swt.browser.Mozilla.TOKENIZER_LOCALE); java.lang.String newLocales = stringBuffer.toString(); int start; int end = -1; do { start = end + 1; end = prefLocales.indexOf(org.eclipse.swt.browser.Mozilla.TOKENIZER_LOCALE, start); java.lang.String token; if (end == (-1)) { token = prefLocales.substring(start); } else { token = prefLocales.substring(start, end); } if ((token.length()) > 0) { token = (token + (org.eclipse.swt.browser.Mozilla.TOKENIZER_LOCALE)).trim(); if ((newLocales.indexOf(token)) == (-1)) { stringBuffer.append(token); } } } while (end != (-1) ); newLocales = stringBuffer.toString(); if (!(newLocales.equals(prefLocales))) { newLocales = newLocales.substring(0, ((newLocales.length()) - (org.eclipse.swt.browser.Mozilla.TOKENIZER_LOCALE.length()))); int length = newLocales.length(); char[] charBuffer = new char[length + 1]; newLocales.getChars(0, length, charBuffer, 0); if (localizedString == null) { byte[] contractID = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_PREFLOCALIZEDSTRING_CONTRACTID, true); rc = componentManager.CreateInstanceByContractID(contractID, 0, nsIPrefLocalizedString.NS_IPREFLOCALIZEDSTRING_IID, result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } localizedString = new org.eclipse.swt.browser.nsIPrefLocalizedString(result[0]); result[0] = 0; } localizedString.SetDataWithLength(length, charBuffer); rc = prefBranch.SetComplexValue(buffer, nsIPrefLocalizedString.NS_IPREFLOCALIZEDSTRING_IID, localizedString.getAddress()); } if (localizedString != null) { localizedString.Release(); localizedString = null; } java.lang.String prefCharset = null; buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.PREFERENCE_CHARSET, true); rc = prefBranch.GetComplexValue(buffer, nsIPrefLocalizedString.NS_IPREFLOCALIZEDSTRING_IID, result); if (rc != (XPCOM.NS_OK)) { prefCharset = "ISO-8859-1"; } else { if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } localizedString = new org.eclipse.swt.browser.nsIPrefLocalizedString(result[0]); result[0] = 0; rc = localizedString.ToString(result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } int length = org.eclipse.swt.browser.XPCOM.strlen_PRUnichar(result[0]); char[] dest = new char[length]; org.eclipse.swt.browser.XPCOM.memmove(dest, result[0], (length * 2)); prefCharset = new java.lang.String(dest); } result[0] = 0; java.lang.String newCharset = java.lang.System.getProperty("file.encoding"); if (!(newCharset.equals(prefCharset))) { int length = newCharset.length(); char[] charBuffer = new char[length + 1]; newCharset.getChars(0, length, charBuffer, 0); if (localizedString == null) { byte[] contractID = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_PREFLOCALIZEDSTRING_CONTRACTID, true); rc = componentManager.CreateInstanceByContractID(contractID, 0, nsIPrefLocalizedString.NS_IPREFLOCALIZEDSTRING_IID, result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } localizedString = new org.eclipse.swt.browser.nsIPrefLocalizedString(result[0]); result[0] = 0; } localizedString.SetDataWithLength(length, charBuffer); rc = prefBranch.SetComplexValue(buffer, nsIPrefLocalizedString.NS_IPREFLOCALIZEDSTRING_IID, localizedString.getAddress()); } if (localizedString != null) localizedString.Release(); java.lang.String proxyHost = java.lang.System.getProperty(org.eclipse.swt.browser.Mozilla.PROPERTY_PROXYHOST); java.lang.String proxyPortString = java.lang.System.getProperty(org.eclipse.swt.browser.Mozilla.PROPERTY_PROXYPORT); int port = -1; if (proxyPortString != null) { try { int value = java.lang.Integer.valueOf(proxyPortString).intValue(); if ((0 <= value) && (value <= (org.eclipse.swt.browser.Mozilla.MAX_PORT))) port = value; } catch (java.lang.NumberFormatException e) { } } if (proxyHost != null) { byte[] contractID = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_PREFLOCALIZEDSTRING_CONTRACTID, true); rc = componentManager.CreateInstanceByContractID(contractID, 0, nsIPrefLocalizedString.NS_IPREFLOCALIZEDSTRING_IID, result); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); if ((result[0]) == 0) org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); localizedString = new org.eclipse.swt.browser.nsIPrefLocalizedString(result[0]); result[0] = 0; int length = proxyHost.length(); char[] charBuffer = new char[length + 1]; proxyHost.getChars(0, length, charBuffer, 0); rc = localizedString.SetDataWithLength(length, charBuffer); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.PREFERENCE_PROXYHOST_FTP, true); rc = prefBranch.SetComplexValue(buffer, nsIPrefLocalizedString.NS_IPREFLOCALIZEDSTRING_IID, localizedString.getAddress()); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.PREFERENCE_PROXYHOST_HTTP, true); rc = prefBranch.SetComplexValue(buffer, nsIPrefLocalizedString.NS_IPREFLOCALIZEDSTRING_IID, localizedString.getAddress()); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.PREFERENCE_PROXYHOST_SSL, true); rc = prefBranch.SetComplexValue(buffer, nsIPrefLocalizedString.NS_IPREFLOCALIZEDSTRING_IID, localizedString.getAddress()); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); localizedString.Release(); } if (port != (-1)) { buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.PREFERENCE_PROXYPORT_FTP, true); rc = prefBranch.SetIntPref(buffer, port); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.PREFERENCE_PROXYPORT_HTTP, true); rc = prefBranch.SetIntPref(buffer, port); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.PREFERENCE_PROXYPORT_SSL, true); rc = prefBranch.SetIntPref(buffer, port); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); } if ((proxyHost != null) || (port != (-1))) { buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.PREFERENCE_PROXYTYPE, true); rc = prefBranch.SetIntPref(buffer, 1); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); } buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.PREFERENCE_DISABLEOPENDURINGLOAD, true); rc = prefBranch.SetBoolPref(buffer, 0); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.PREFERENCE_DISABLEWINDOWSTATUSCHANGE, true); rc = prefBranch.SetBoolPref(buffer, 0); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } prefBranch.Release(); org.eclipse.swt.browser.PromptService2Factory factory = new org.eclipse.swt.browser.PromptService2Factory(); factory.AddRef(); rc = componentManager.QueryInterface(nsIComponentRegistrar.NS_ICOMPONENTREGISTRAR_IID, result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } org.eclipse.swt.browser.nsIComponentRegistrar componentRegistrar = new org.eclipse.swt.browser.nsIComponentRegistrar(result[0]); result[0] = 0; aContractID = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_PROMPTSERVICE_CONTRACTID, true); byte[] aClassName = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, "Prompt Service", true); rc = componentRegistrar.RegisterFactory(XPCOM.NS_PROMPTSERVICE_CID, aClassName, aContractID, factory.getAddress()); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } factory.Release(); org.eclipse.swt.browser.HelperAppLauncherDialogFactory dialogFactory = new org.eclipse.swt.browser.HelperAppLauncherDialogFactory(); dialogFactory.AddRef(); aContractID = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_HELPERAPPLAUNCHERDIALOG_CONTRACTID, true); aClassName = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, "Helper App Launcher Dialog", true); rc = componentRegistrar.RegisterFactory(XPCOM.NS_HELPERAPPLAUNCHERDIALOG_CID, aClassName, aContractID, dialogFactory.getAddress()); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } dialogFactory.Release(); org.eclipse.swt.browser.DownloadFactory downloadFactory = new org.eclipse.swt.browser.DownloadFactory(); downloadFactory.AddRef(); aContractID = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_DOWNLOAD_CONTRACTID, true); aClassName = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, "Download", true); rc = componentRegistrar.RegisterFactory(XPCOM.NS_DOWNLOAD_CID, aClassName, aContractID, downloadFactory.getAddress()); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } downloadFactory.Release(); org.eclipse.swt.browser.FilePickerFactory pickerFactory = (IsXULRunner) ? new org.eclipse.swt.browser.FilePickerFactory_1_8() : new org.eclipse.swt.browser.FilePickerFactory(); pickerFactory.AddRef(); aContractID = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_FILEPICKER_CONTRACTID, true); aClassName = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, "FilePicker", true); rc = componentRegistrar.RegisterFactory(XPCOM.NS_FILEPICKER_CID, aClassName, aContractID, pickerFactory.getAddress()); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } pickerFactory.Release(); componentRegistrar.Release(); componentManager.Release(); org.eclipse.swt.browser.Mozilla.Initialized = true; } if ((display.getData(org.eclipse.swt.browser.Mozilla.DISPOSE_LISTENER_HOOKED)) == null) { display.setData(org.eclipse.swt.browser.Mozilla.DISPOSE_LISTENER_HOOKED, org.eclipse.swt.browser.Mozilla.DISPOSE_LISTENER_HOOKED); display.addListener(SWT.Dispose, new org.eclipse.swt.browser.Listener() { public void handleEvent(org.eclipse.swt.browser.Event event) { if ((org.eclipse.swt.browser.Mozilla.BrowserCount) > 0) return; int[] result = new int[1]; int rc = org.eclipse.swt.browser.XPCOM.NS_GetServiceManager(result); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); if ((result[0]) == 0) org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); org.eclipse.swt.browser.nsIServiceManager serviceManager = new org.eclipse.swt.browser.nsIServiceManager(result[0]); result[0] = 0; byte[] buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_OBSERVER_CONTRACTID, true); rc = serviceManager.GetServiceByContractID(buffer, nsIObserverService.NS_IOBSERVERSERVICE_IID, result); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); if ((result[0]) == 0) org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); org.eclipse.swt.browser.nsIObserverService observerService = new org.eclipse.swt.browser.nsIObserverService(result[0]); result[0] = 0; buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.PROFILE_BEFORE_CHANGE, true); int length = org.eclipse.swt.browser.Mozilla.SHUTDOWN_PERSIST.length(); char[] chars = new char[length + 1]; org.eclipse.swt.browser.Mozilla.SHUTDOWN_PERSIST.getChars(0, length, chars, 0); rc = observerService.NotifyObservers(0, buffer, chars); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); observerService.Release(); if ((org.eclipse.swt.browser.Mozilla.LocationProvider) != null) { java.lang.String prefsLocation = (org.eclipse.swt.browser.Mozilla.LocationProvider.profilePath) + (AppFileLocProvider.PREFERENCES_FILE); org.eclipse.swt.browser.nsEmbedString pathString = new org.eclipse.swt.browser.nsEmbedString(prefsLocation); rc = org.eclipse.swt.browser.XPCOM.NS_NewLocalFile(pathString.getAddress(), 1, result); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); if ((result[0]) == 0) org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_ERROR_NULL_POINTER); pathString.dispose(); org.eclipse.swt.browser.nsILocalFile localFile = new org.eclipse.swt.browser.nsILocalFile(result[0]); result[0] = 0; rc = localFile.QueryInterface(nsIFile.NS_IFILE_IID, result); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); if ((result[0]) == 0) org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_ERROR_NO_INTERFACE); localFile.Release(); org.eclipse.swt.browser.nsIFile prefFile = new org.eclipse.swt.browser.nsIFile(result[0]); result[0] = 0; buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_PREFSERVICE_CONTRACTID, true); rc = serviceManager.GetServiceByContractID(buffer, nsIPrefService.NS_IPREFSERVICE_IID, result); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); if ((result[0]) == 0) org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); org.eclipse.swt.browser.nsIPrefService prefService = new org.eclipse.swt.browser.nsIPrefService(result[0]); result[0] = 0; rc = prefService.SavePrefFile(prefFile.getAddress()); prefService.Release(); prefFile.Release(); } serviceManager.Release(); if (org.eclipse.swt.browser.Mozilla.XPCOMWasGlued) { org.eclipse.swt.browser.XPCOM.XPCOMGlueShutdown(); org.eclipse.swt.browser.Mozilla.XPCOMWasGlued = false; } if (org.eclipse.swt.browser.Mozilla.XPCOMInitWasGlued) { org.eclipse.swt.browser.XPCOMInit.XPCOMGlueShutdown(); org.eclipse.swt.browser.Mozilla.XPCOMInitWasGlued = false; } org.eclipse.swt.browser.Mozilla.Initialized = false; } }); } (org.eclipse.swt.browser.Mozilla.BrowserCount)++; int rc = org.eclipse.swt.browser.XPCOM.NS_GetComponentManager(result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } org.eclipse.swt.browser.nsIComponentManager componentManager = new org.eclipse.swt.browser.nsIComponentManager(result[0]); result[0] = 0; org.eclipse.swt.browser.nsID NS_IWEBBROWSER_CID = new org.eclipse.swt.browser.nsID("F1EAC761-87E9-11d3-AF80-00A024FFC08C"); rc = componentManager.CreateInstance(NS_IWEBBROWSER_CID, 0, nsIWebBrowser.NS_IWEBBROWSER_IID, result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } webBrowser = new org.eclipse.swt.browser.nsIWebBrowser(result[0]); result[0] = 0; createCOMInterfaces(); AddRef(); rc = webBrowser.SetContainerWindow(webBrowserChrome.getAddress()); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } rc = webBrowser.QueryInterface(nsIBaseWindow.NS_IBASEWINDOW_IID, result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_ERROR_NO_INTERFACE); } org.eclipse.swt.browser.nsIBaseWindow baseWindow = new org.eclipse.swt.browser.nsIBaseWindow(result[0]); result[0] = 0; org.eclipse.swt.browser.Rectangle rect = browser.getClientArea(); if (rect.isEmpty()) { rect.width = 1; rect.height = 1; } embedHandle = delegate.getHandle(); rc = baseWindow.InitWindow(embedHandle, 0, 0, 0, rect.width, rect.height); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_ERROR_FAILURE); } rc = baseWindow.Create(); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_ERROR_FAILURE); } rc = baseWindow.SetVisibility(1); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_ERROR_FAILURE); } baseWindow.Release(); if (!(org.eclipse.swt.browser.Mozilla.PerformedVersionCheck)) { org.eclipse.swt.browser.Mozilla.PerformedVersionCheck = true; rc = webBrowser.QueryInterface(nsIInterfaceRequestor.NS_IINTERFACEREQUESTOR_IID, result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_ERROR_FAILURE); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_ERROR_NO_INTERFACE); } org.eclipse.swt.browser.nsIInterfaceRequestor interfaceRequestor = new org.eclipse.swt.browser.nsIInterfaceRequestor(result[0]); result[0] = 0; rc = interfaceRequestor.GetInterface(nsIDocShell.NS_IDOCSHELL_IID, result); if ((rc == (XPCOM.NS_OK)) && ((result[0]) != 0)) { org.eclipse.swt.browser.Mozilla.IsPre_1_8 = true; new org.eclipse.swt.browser.nsISupports(result[0]).Release(); } result[0] = 0; if (!(org.eclipse.swt.browser.Mozilla.IsPre_1_8)) { rc = interfaceRequestor.GetInterface(nsIDocShell_1_8.NS_IDOCSHELL_IID, result); if ((rc == (XPCOM.NS_OK)) && ((result[0]) != 0)) { new org.eclipse.swt.browser.nsISupports(result[0]).Release(); result[0] = 0; rc = componentManager.QueryInterface(nsIComponentRegistrar.NS_ICOMPONENTREGISTRAR_IID, result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } org.eclipse.swt.browser.nsIComponentRegistrar componentRegistrar = new org.eclipse.swt.browser.nsIComponentRegistrar(result[0]); org.eclipse.swt.browser.DownloadFactory_1_8 downloadFactory_1_8 = new org.eclipse.swt.browser.DownloadFactory_1_8(); downloadFactory_1_8.AddRef(); byte[] aContractID = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_TRANSFER_CONTRACTID, true); byte[] aClassName = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, "Transfer", true); rc = componentRegistrar.RegisterFactory(XPCOM.NS_DOWNLOAD_CID, aClassName, aContractID, downloadFactory_1_8.getAddress()); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } downloadFactory_1_8.Release(); componentRegistrar.Release(); } else { awaitingNavigate = true; rc = webBrowser.QueryInterface(nsIWebNavigation.NS_IWEBNAVIGATION_IID, result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_ERROR_NO_INTERFACE); } org.eclipse.swt.browser.nsIWebNavigation webNavigation = new org.eclipse.swt.browser.nsIWebNavigation(result[0]); char[] uri = new char[(org.eclipse.swt.browser.Mozilla.ABOUT_BLANK.length()) + 1]; org.eclipse.swt.browser.Mozilla.ABOUT_BLANK.getChars(0, org.eclipse.swt.browser.Mozilla.ABOUT_BLANK.length(), uri, 0); rc = webNavigation.LoadURI(uri, nsIWebNavigation.LOAD_FLAGS_NONE, 0, 0, 0); webNavigation.Release(); } } result[0] = 0; interfaceRequestor.Release(); } componentManager.Release(); rc = webBrowser.AddWebBrowserListener(weakReference.getAddress(), nsIWebProgressListener.NS_IWEBPROGRESSLISTENER_IID); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } rc = webBrowser.SetParentURIContentListener(uriContentListener.getAddress()); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } delegate.init(); listener = new org.eclipse.swt.browser.Listener() { public void handleEvent(org.eclipse.swt.browser.Event event) { switch (event.type) { case SWT.Dispose : { if (ignoreDispose) { ignoreDispose = false; break; } ignoreDispose = true; browser.notifyListeners(event.type, event); event.type = SWT.NONE; onDispose(event.display); break; } case SWT.Resize : onResize(); break; case SWT.FocusIn : Activate(); break; case SWT.Activate : Activate(); break; case SWT.Deactivate : { org.eclipse.swt.browser.Display display = event.display; if ((org.eclipse.swt.browser.Mozilla.this.browser) == (display.getFocusControl())) Deactivate(); break; } case SWT.Show : { org.eclipse.swt.browser.Display display = event.display; display.asyncExec(new java.lang.Runnable() { public void run() { if (browser.isDisposed()) return; onResize(); } }); break; } } } }; int[] folderEvents = new int[]{ SWT.Dispose, SWT.Resize, SWT.FocusIn, SWT.Activate, SWT.Deactivate, SWT.Show, SWT.KeyDown }; for (int i = 0; i < (folderEvents.length); i++) { browser.addListener(folderEvents[i], listener); } }
org.eclipse.swt.widgets.LRESULT wmColorChild(int wParam, int lParam) { org.eclipse.swt.widgets.Control control = findBackgroundControl(); if (control == null) { if (((state) & (THEME_BACKGROUND)) != 0) { if (((OS.COMCTL32_MAJOR) >= 6) && (org.eclipse.swt.widgets.OS.IsAppThemed())) { control = findThemeControl(); if (control != null) { org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); org.eclipse.swt.widgets.OS.GetClientRect(handle, rect); org.eclipse.swt.widgets.OS.SetTextColor(wParam, getForegroundPixel()); org.eclipse.swt.widgets.OS.SetBkColor(wParam, getBackgroundPixel()); fillThemeBackground(wParam, control, rect); org.eclipse.swt.widgets.OS.SetBkMode(wParam, OS.TRANSPARENT); return new org.eclipse.swt.widgets.LRESULT(org.eclipse.swt.widgets.OS.GetStockObject(OS.NULL_BRUSH)); } } } if ((foreground) == (-1)) return null; } if (control == null) control = this; int forePixel = control.getForegroundPixel(); int backPixel = control.getBackgroundPixel(); org.eclipse.swt.widgets.OS.SetTextColor(wParam, forePixel); org.eclipse.swt.widgets.OS.SetBkColor(wParam, backPixel); if ((control.backgroundImage) != null) { org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); org.eclipse.swt.widgets.OS.GetClientRect(handle, rect); int hwnd = control.handle; int hBitmap = control.backgroundImage.handle; org.eclipse.swt.widgets.OS.MapWindowPoints(handle, hwnd, rect, 2); org.eclipse.swt.widgets.POINT lpPoint = new org.eclipse.swt.widgets.POINT(); org.eclipse.swt.widgets.OS.GetWindowOrgEx(wParam, lpPoint); org.eclipse.swt.widgets.OS.SetBrushOrgEx(wParam, ((-(rect.left)) - (lpPoint.x)), ((-(rect.top)) - (lpPoint.y)), lpPoint); int hBrush = findBrush(hBitmap, OS.BS_PATTERN); if (((state) & (DRAW_BACKGROUND)) != 0) { int hOldBrush = org.eclipse.swt.widgets.OS.SelectObject(wParam, hBrush); org.eclipse.swt.widgets.OS.MapWindowPoints(hwnd, handle, rect, 2); org.eclipse.swt.widgets.OS.PatBlt(wParam, rect.left, rect.top, ((rect.right) - (rect.left)), ((rect.bottom) - (rect.top)), OS.PATCOPY); org.eclipse.swt.widgets.OS.SelectObject(wParam, hOldBrush); } org.eclipse.swt.widgets.OS.SetBkMode(wParam, OS.TRANSPARENT); return new org.eclipse.swt.widgets.LRESULT(hBrush); } return new org.eclipse.swt.widgets.LRESULT(findBrush(backPixel, OS.BS_SOLID)); }
org.eclipse.swt.widgets.LRESULT WM_ENTERIDLE(int wParam, int lParam) { org.eclipse.swt.widgets.LRESULT result = super.WM_ENTERIDLE(wParam, lParam); if (result != null) return result; if (display.runMessages) { if (display.runAsyncMessages(false)) display.wakeThread(); } return result; }
public void setBackground(org.eclipse.swt.custom.Color color) { checkWidget(); background = color; super.setBackground(color); super.redraw(); }
void write(java.lang.String string, int start, int end) { for (int index = start; index < end; index++) { char ch = string.charAt(index); if ((ch > 255) && (WriteUnicode)) { if (index > start) { write(string.substring(start, index)); } write("\\u"); write(java.lang.Integer.toString(((short) (ch)))); write('?'); start = index + 1; } else if (((ch == '}') || (ch == '{')) || (ch == '\\')) { if (index > start) { write(string.substring(start, index)); } write('\\'); write(ch); start = index + 1; } } if (start < end) { write(string.substring(start, end)); } }
void textEvent(org.eclipse.swt.custom.Event event) { switch (event.type) { case SWT.FocusIn : { handleFocus(SWT.FocusIn); break; } case SWT.DefaultSelection : { dropDown(false); org.eclipse.swt.custom.Event e = new org.eclipse.swt.custom.Event(); e.time = event.time; e.stateMask = event.stateMask; notifyListeners(SWT.DefaultSelection, e); break; } case SWT.KeyDown : { org.eclipse.swt.custom.Event keyEvent = new org.eclipse.swt.custom.Event(); keyEvent.time = event.time; keyEvent.character = event.character; keyEvent.keyCode = event.keyCode; keyEvent.stateMask = event.stateMask; notifyListeners(SWT.KeyDown, keyEvent); if (isDisposed()) break; event.doit = keyEvent.doit; if (!(event.doit)) break; if (((event.keyCode) == (SWT.ARROW_UP)) || ((event.keyCode) == (SWT.ARROW_DOWN))) { event.doit = false; if (((event.stateMask) & (SWT.ALT)) != 0) { boolean dropped = isDropped(); text.selectAll(); if (!dropped) setFocus(); dropDown((!dropped)); break; } int oldIndex = getSelectionIndex(); if ((event.keyCode) == (SWT.ARROW_UP)) { select(java.lang.Math.max((oldIndex - 1), 0)); } else { select(java.lang.Math.min((oldIndex + 1), ((getItemCount()) - 1))); } if (oldIndex != (getSelectionIndex())) { org.eclipse.swt.custom.Event e = new org.eclipse.swt.custom.Event(); e.time = event.time; e.stateMask = event.stateMask; notifyListeners(SWT.Selection, e); } if (isDisposed()) break; } break; } case SWT.KeyUp : { org.eclipse.swt.custom.Event e = new org.eclipse.swt.custom.Event(); e.time = event.time; e.character = event.character; e.keyCode = event.keyCode; e.stateMask = event.stateMask; notifyListeners(SWT.KeyUp, e); event.doit = e.doit; break; } case SWT.MenuDetect : { org.eclipse.swt.custom.Event e = new org.eclipse.swt.custom.Event(); e.time = event.time; notifyListeners(SWT.MenuDetect, e); break; } case SWT.Modify : { list.deselectAll(); org.eclipse.swt.custom.Event e = new org.eclipse.swt.custom.Event(); e.time = event.time; notifyListeners(SWT.Modify, e); break; } case SWT.MouseDown : { org.eclipse.swt.custom.Event mouseEvent = new org.eclipse.swt.custom.Event(); mouseEvent.button = event.button; mouseEvent.count = event.count; mouseEvent.stateMask = event.stateMask; mouseEvent.time = event.time; mouseEvent.x = event.x; mouseEvent.y = event.y; notifyListeners(SWT.MouseDown, mouseEvent); if (isDisposed()) break; event.doit = mouseEvent.doit; if (!(event.doit)) break; if ((event.button) != 1) return; if (text.getEditable()) return; boolean dropped = isDropped(); text.selectAll(); if (!dropped) setFocus(); dropDown((!dropped)); break; } case SWT.MouseUp : { org.eclipse.swt.custom.Event mouseEvent = new org.eclipse.swt.custom.Event(); mouseEvent.button = event.button; mouseEvent.count = event.count; mouseEvent.stateMask = event.stateMask; mouseEvent.time = event.time; mouseEvent.x = event.x; mouseEvent.y = event.y; notifyListeners(SWT.MouseUp, mouseEvent); if (isDisposed()) break; event.doit = mouseEvent.doit; if (!(event.doit)) break; if ((event.button) != 1) return; if (text.getEditable()) return; text.selectAll(); break; } case SWT.MouseDoubleClick : { org.eclipse.swt.custom.Event mouseEvent = new org.eclipse.swt.custom.Event(); mouseEvent.button = event.button; mouseEvent.count = event.count; mouseEvent.stateMask = event.stateMask; mouseEvent.time = event.time; mouseEvent.x = event.x; mouseEvent.y = event.y; notifyListeners(SWT.MouseDoubleClick, mouseEvent); break; } case SWT.MouseWheel : { org.eclipse.swt.custom.Event keyEvent = new org.eclipse.swt.custom.Event(); keyEvent.time = event.time; keyEvent.keyCode = ((event.count) > 0) ? SWT.ARROW_UP : SWT.ARROW_DOWN; keyEvent.stateMask = event.stateMask; notifyListeners(SWT.KeyDown, keyEvent); if (isDisposed()) break; event.doit = keyEvent.doit; if (!(event.doit)) break; if ((event.count) != 0) { event.doit = false; int oldIndex = getSelectionIndex(); if ((event.count) > 0) { select(java.lang.Math.max((oldIndex - 1), 0)); } else { select(java.lang.Math.min((oldIndex + 1), ((getItemCount()) - 1))); } if (oldIndex != (getSelectionIndex())) { org.eclipse.swt.custom.Event e = new org.eclipse.swt.custom.Event(); e.time = event.time; e.stateMask = event.stateMask; notifyListeners(SWT.Selection, e); } if (isDisposed()) break; } break; } case SWT.Traverse : { switch (event.detail) { case SWT.TRAVERSE_ARROW_PREVIOUS : case SWT.TRAVERSE_ARROW_NEXT : event.doit = false; break; case SWT.TRAVERSE_TAB_PREVIOUS : event.doit = traverse(SWT.TRAVERSE_TAB_PREVIOUS); event.detail = SWT.TRAVERSE_NONE; return; } org.eclipse.swt.custom.Event e = new org.eclipse.swt.custom.Event(); e.time = event.time; e.detail = event.detail; e.doit = event.doit; e.character = event.character; e.keyCode = event.keyCode; notifyListeners(SWT.Traverse, e); event.doit = e.doit; event.detail = e.detail; break; } case SWT.Verify : { org.eclipse.swt.custom.Event e = new org.eclipse.swt.custom.Event(); e.text = event.text; e.start = event.start; e.end = event.end; e.character = event.character; e.keyCode = event.keyCode; e.stateMask = event.stateMask; notifyListeners(SWT.Verify, e); event.doit = e.doit; break; } } }
public boolean setFocus() { checkWidget(); if ((!(isEnabled())) || (!(getVisible()))) return false; if (isFocusControl()) return true; return text.setFocus(); }
int msgFilterProc(int code, int wParam, int lParam) { if (!(ignoreMsgFilter)) { if (code >= 0) { org.eclipse.swt.widgets.OS.MoveMemory(hookMsg, lParam, MSG.sizeof); if ((hookMsg.message) == (OS.WM_NULL)) { org.eclipse.swt.widgets.MSG msg = new org.eclipse.swt.widgets.MSG(); int flags = (((OS.PM_NOREMOVE) | (OS.PM_NOYIELD)) | (OS.PM_QS_INPUT)) | (OS.PM_QS_POSTMESSAGE); if (!(org.eclipse.swt.widgets.OS.PeekMessage(msg, 0, 0, 0, flags))) { if (runAsyncMessages(false)) wakeThread(); } } } } return org.eclipse.swt.widgets.OS.CallNextHookEx(filterHook, code, wParam, lParam); }
void dropDown(boolean drop) { if ((drop == (isDropped())) || (!(isVisible()))) return; if (!drop) { popup.setVisible(false); if ((!(isDisposed())) && (isFocusControl())) { text.setFocus(); } return; } if ((getShell()) != (popup.getParent())) { java.lang.String[] items = list.getItems(); int selectionIndex = list.getSelectionIndex(); list.removeListener(SWT.Dispose, listener); popup.dispose(); popup = null; list = null; createPopup(items, selectionIndex); } org.eclipse.swt.custom.Point size = getSize(); int itemCount = list.getItemCount(); itemCount = (itemCount == 0) ? visibleItemCount : java.lang.Math.min(visibleItemCount, itemCount); int itemHeight = (list.getItemHeight()) * itemCount; org.eclipse.swt.custom.Point listSize = list.computeSize(SWT.DEFAULT, itemHeight, false); list.setBounds(1, 1, java.lang.Math.max(((size.x) - 2), listSize.x), listSize.y); int index = list.getSelectionIndex(); if (index != (-1)) list.setTopIndex(index); org.eclipse.swt.custom.Display display = getDisplay(); org.eclipse.swt.custom.Rectangle listRect = list.getBounds(); org.eclipse.swt.custom.Rectangle parentRect = display.map(getParent(), null, getBounds()); org.eclipse.swt.custom.Point comboSize = getSize(); org.eclipse.swt.custom.Rectangle displayRect = getMonitor().getClientArea(); int width = java.lang.Math.max(comboSize.x, ((listRect.width) + 2)); int height = (listRect.height) + 2; int x = parentRect.x; int y = (parentRect.y) + (comboSize.y); if ((y + height) > ((displayRect.y) + (displayRect.height))) y = (parentRect.y) - height; if ((x + width) > ((displayRect.x) + (displayRect.width))) x = ((displayRect.x) + (displayRect.width)) - (listRect.width); popup.setBounds(x, y, width, height); popup.setVisible(true); if (isFocusControl()) list.setFocus(); }
public void freeResources() { if ((stockImages) != null) { for (int i = 0; i < (stockImages.length); ++i) { final org.eclipse.swt.examples.fileviewer.Image image = stockImages[i]; if (image != null) image.dispose(); } stockImages = null; } if ((iconCache) != null) { for (java.util.Enumeration it = iconCache.elements(); it.hasMoreElements();) { org.eclipse.swt.examples.fileviewer.Image image = ((org.eclipse.swt.examples.fileviewer.Image) (it.nextElement())); image.dispose(); } } if ((stockCursors) != null) { for (int i = 0; i < (stockCursors.length); ++i) { final org.eclipse.swt.examples.fileviewer.Cursor cursor = stockCursors[i]; if (cursor != null) cursor.dispose(); } stockCursors = null; } }
void print() { org.eclipse.swt.custom.Color background = gc.getBackground(); org.eclipse.swt.custom.Color foreground = gc.getForeground(); int paintY = clientArea.y; int paintX = clientArea.x; int width = clientArea.width; int page = startPage; int pageBottom = (clientArea.y) + (clientArea.height); int orientation = (gc.getStyle()) & ((SWT.RIGHT_TO_LEFT) | (SWT.LEFT_TO_RIGHT)); org.eclipse.swt.custom.TextLayout printLayout = null; if (((printOptions.printLineNumbers) || ((printOptions.header) != null)) || ((printOptions.footer) != null)) { printLayout = new org.eclipse.swt.custom.TextLayout(printer); printLayout.setFont(printerFont); } if (printOptions.printLineNumbers) { int numberingWidth = 0; int count = ((endLine) - (startLine)) + 1; java.lang.String[] lineLabels = printOptions.lineLabels; if (lineLabels != null) { for (int i = startLine; i < (java.lang.Math.min(count, lineLabels.length)); i++) { if ((lineLabels[i]) != null) { printLayout.setText(lineLabels[i]); int lineWidth = printLayout.getBounds().width; numberingWidth = java.lang.Math.max(numberingWidth, lineWidth); } } } else { java.lang.StringBuffer buffer = new java.lang.StringBuffer("0"); while ((count /= 10) > 0) buffer.append("0"); printLayout.setText(buffer.toString()); numberingWidth = printLayout.getBounds().width; } numberingWidth += printMargin; if (numberingWidth > width) numberingWidth = width; paintX += numberingWidth; width -= numberingWidth; } for (int i = startLine; (i <= (endLine)) && (page <= (endPage)); i++) { if (paintY == (clientArea.y)) { printer.startPage(); printDecoration(page, true, printLayout); } org.eclipse.swt.custom.TextLayout layout = printerRenderer.getTextLayout(i, orientation, width, lineSpacing); org.eclipse.swt.custom.Color lineBackground = printerRenderer.getLineBackground(i, background); int paragraphBottom = paintY + (layout.getBounds().height); if (paragraphBottom <= pageBottom) { printLine(paintX, paintY, gc, foreground, lineBackground, layout, printLayout, i); paintY = paragraphBottom; } else { int lineCount = layout.getLineCount(); while ((paragraphBottom > pageBottom) && (lineCount > 0)) { lineCount--; paragraphBottom -= (layout.getLineBounds(lineCount).height) + (layout.getSpacing()); } if (lineCount == 0) { printDecoration(page, false, printLayout); printer.endPage(); page++; if (page <= (endPage)) { printer.startPage(); printDecoration(page, true, printLayout); paintY = clientArea.y; printLine(paintX, paintY, gc, foreground, lineBackground, layout, printLayout, i); paintY += layout.getBounds().height; } } else { int height = paragraphBottom - paintY; gc.setClipping(clientArea.x, paintY, clientArea.width, height); printLine(paintX, paintY, gc, foreground, lineBackground, layout, printLayout, i); gc.setClipping(((org.eclipse.swt.custom.Rectangle) (null))); printDecoration(page, false, printLayout); printer.endPage(); page++; if (page <= (endPage)) { printer.startPage(); printDecoration(page, true, printLayout); paintY = (clientArea.y) - height; int layoutHeight = layout.getBounds().height; gc.setClipping(clientArea.x, clientArea.y, clientArea.width, (layoutHeight - height)); printLine(paintX, paintY, gc, foreground, lineBackground, layout, printLayout, i); gc.setClipping(((org.eclipse.swt.custom.Rectangle) (null))); paintY += layoutHeight; } } } printerRenderer.disposeTextLayout(layout); } if ((page <= (endPage)) && (paintY > (clientArea.y))) { printDecoration(page, false, printLayout); printer.endPage(); } if (printLayout != null) printLayout.dispose(); }
void windowSendEvent(int id, int sel, int event) { org.eclipse.swt.widgets.NSEvent nsEvent = new org.eclipse.swt.widgets.NSEvent(event); int type = ((int) (nsEvent.type())); switch (type) { case OS.NSLeftMouseUp : case OS.NSRightMouseUp : case OS.NSOtherMouseUp : case OS.NSMouseMoved : org.eclipse.swt.widgets.NSView[] hitView = new org.eclipse.swt.widgets.NSView[1]; org.eclipse.swt.widgets.Control control = display.findControl(false, hitView); if ((control != null) && ((!(control.isActive())) || (!(control.isEnabled())))) control = null; if (type == (OS.NSMouseMoved)) { org.eclipse.swt.widgets.Control trimControl = control; if ((trimControl != null) && (trimControl.isTrim(hitView[0]))) trimControl = null; display.checkEnterExit(trimControl, nsEvent, false); if ((trimControl != null) && (((trimControl.state) & (WEBKIT_EVENTS_FIX)) != 0)) trimControl = null; if (trimControl != null) trimControl.sendMouseEvent(nsEvent, type, false); } org.eclipse.swt.widgets.Widget target = null; if (control != null) { org.eclipse.swt.widgets.NSPoint eventPoint = nsEvent.locationInWindow(); if ((hitView[0]) != null) { org.eclipse.swt.widgets.NSWindow eventWindow = nsEvent.window(); if ((eventWindow != null) && (eventWindow != (hitView[0].window()))) { eventPoint = eventWindow.convertBaseToScreen(eventPoint); eventPoint = hitView[0].window().convertScreenToBase(eventPoint); } } target = control.findTooltip(eventPoint); } if (((display.tooltipControl) != control) || ((display.tooltipTarget) != target)) { org.eclipse.swt.widgets.Control oldControl = display.tooltipControl; org.eclipse.swt.widgets.Shell oldShell = ((oldControl != null) && (!(oldControl.isDisposed()))) ? oldControl.getShell() : null; org.eclipse.swt.widgets.Shell shell = ((control != null) && (!(control.isDisposed()))) ? control.getShell() : null; if (oldShell != null) oldShell.sendToolTipEvent(false); if (shell != null) shell.sendToolTipEvent(true); } display.tooltipControl = control; display.tooltipTarget = target; break; case OS.NSKeyDown : if (((nsEvent.modifierFlags()) & (OS.NSControlKeyMask)) != 0) { org.eclipse.swt.widgets.NSString chars = nsEvent.characters(); if ((chars != null) && ((chars.length()) == 1)) { int firstChar = ((int) (chars.characterAtIndex(0))); switch (firstChar) { case '\t' : case 25 : case OS.NSPageDownFunctionKey : case OS.NSPageUpFunctionKey : view.window().firstResponder().keyDown(nsEvent); return; } } } break; } if (isDisposed()) return; super.windowSendEvent(id, sel, event); }
org.eclipse.swt.widgets.LRESULT wmNotifyChild(org.eclipse.swt.widgets.NMHDR hdr, int wParam, int lParam) { switch (hdr.code) { case OS.LVN_ODFINDITEMA : case OS.LVN_ODFINDITEMW : { if (((style) & (SWT.VIRTUAL)) != 0) return new org.eclipse.swt.widgets.LRESULT((-1)); break; } case OS.LVN_ODSTATECHANGED : { if (((style) & (SWT.VIRTUAL)) != 0) { if (!(ignoreSelect)) { org.eclipse.swt.widgets.NMLVODSTATECHANGE lpStateChange = new org.eclipse.swt.widgets.NMLVODSTATECHANGE(); org.eclipse.swt.widgets.OS.MoveMemory(lpStateChange, lParam, NMLVODSTATECHANGE.sizeof); boolean oldSelected = ((lpStateChange.uOldState) & (OS.LVIS_SELECTED)) != 0; boolean newSelected = ((lpStateChange.uNewState) & (OS.LVIS_SELECTED)) != 0; if (oldSelected != newSelected) wasSelected = true; } } break; } case OS.LVN_GETDISPINFOA : case OS.LVN_GETDISPINFOW : { org.eclipse.swt.widgets.NMLVDISPINFO plvfi = new org.eclipse.swt.widgets.NMLVDISPINFO(); org.eclipse.swt.widgets.OS.MoveMemory(plvfi, lParam, NMLVDISPINFO.sizeof); boolean[] visible = display.columnVisible; if ((visible != null) && (!(visible[plvfi.iSubItem]))) { break; } org.eclipse.swt.widgets.TableItem item = _getItem(plvfi.iItem); if (item == null) break; if (ignoreShrink) { if ((!(OS.IsWinCE)) && ((OS.WIN32_VERSION) >= (org.eclipse.swt.widgets.OS.VERSION(6, 0)))) { org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); rect.left = OS.LVIR_BOUNDS; ignoreCustomDraw = true; int code = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_GETITEMRECT, plvfi.iItem, rect); ignoreCustomDraw = false; if (code != 0) org.eclipse.swt.widgets.OS.InvalidateRect(handle, rect, true); break; } else { if ((((style) & (SWT.VIRTUAL)) != 0) && (!(item.cached))) { org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_REDRAWITEMS, plvfi.iItem, plvfi.iItem); break; } } } if (!(item.cached)) { if (((style) & (SWT.VIRTUAL)) != 0) { lastIndexOf = plvfi.iItem; if (!(checkData(item, lastIndexOf, false))) break; org.eclipse.swt.widgets.TableItem newItem = (fixScrollWidth) ? null : item; if (setScrollWidth(newItem, true)) { org.eclipse.swt.widgets.OS.InvalidateRect(handle, null, true); } } item.cached = true; } if (((plvfi.mask) & (OS.LVIF_TEXT)) != 0) { java.lang.String string = null; if ((plvfi.iSubItem) == 0) { string = item.text; } else { java.lang.String[] strings = item.strings; if ((strings != null) && ((plvfi.iSubItem) < (strings.length))) string = strings[plvfi.iSubItem]; } if (string != null) { int length = java.lang.Math.min(string.length(), ((plvfi.cchTextMax) - 1)); if (((!(tipRequested)) && ((plvfi.iSubItem) == 0)) && (length == 0)) { string = " "; length = 1; } char[] buffer = display.tableBuffer; if ((buffer == null) || ((plvfi.cchTextMax) > (buffer.length))) { buffer = display.tableBuffer = new char[plvfi.cchTextMax]; } string.getChars(0, length, buffer, 0); buffer[(length++)] = 0; if (OS.IsUnicode) { org.eclipse.swt.widgets.OS.MoveMemory(plvfi.pszText, buffer, (length * 2)); } else { org.eclipse.swt.widgets.OS.WideCharToMultiByte(getCodePage(), 0, buffer, length, plvfi.pszText, plvfi.cchTextMax, null, null); org.eclipse.swt.widgets.OS.MoveMemory((((plvfi.pszText) + (plvfi.cchTextMax)) - 1), new byte[1], 1); } } } boolean move = false; if (((plvfi.mask) & (OS.LVIF_IMAGE)) != 0) { org.eclipse.swt.widgets.Image image = null; if ((plvfi.iSubItem) == 0) { image = item.image; } else { org.eclipse.swt.widgets.Image[] images = item.images; if ((images != null) && ((plvfi.iSubItem) < (images.length))) image = images[plvfi.iSubItem]; } if (image != null) { plvfi.iImage = imageIndex(image, plvfi.iSubItem); move = true; } } if (((plvfi.mask) & (OS.LVIF_STATE)) != 0) { if ((plvfi.iSubItem) == 0) { int state = 1; if (item.checked) state++; if (item.grayed) state += 2; if (!(org.eclipse.swt.widgets.OS.IsWindowEnabled(handle))) state += 4; plvfi.state = state << 12; plvfi.stateMask = OS.LVIS_STATEIMAGEMASK; move = true; } } if (((plvfi.mask) & (OS.LVIF_INDENT)) != 0) { if ((plvfi.iSubItem) == 0) { plvfi.iIndent = item.imageIndent; move = true; } } if (move) org.eclipse.swt.widgets.OS.MoveMemory(lParam, plvfi, NMLVDISPINFO.sizeof); break; } case OS.NM_CUSTOMDRAW : { int hwndHeader = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_GETHEADER, 0, 0); if ((hdr.hwndFrom) == hwndHeader) break; if ((!(customDraw)) && ((findImageControl()) == null)) { if (org.eclipse.swt.widgets.OS.IsWindowEnabled(handle)) { if ((!(explorerTheme)) || ((columnCount) != 0)) break; } } org.eclipse.swt.widgets.NMLVCUSTOMDRAW nmcd = new org.eclipse.swt.widgets.NMLVCUSTOMDRAW(); org.eclipse.swt.widgets.OS.MoveMemory(nmcd, lParam, NMLVCUSTOMDRAW.sizeof); switch (nmcd.dwDrawStage) { case OS.CDDS_PREPAINT : return CDDS_PREPAINT(nmcd, wParam, lParam); case OS.CDDS_ITEMPREPAINT : return CDDS_ITEMPREPAINT(nmcd, wParam, lParam); case OS.CDDS_ITEMPOSTPAINT : return CDDS_ITEMPOSTPAINT(nmcd, wParam, lParam); case OS.CDDS_SUBITEMPREPAINT : return CDDS_SUBITEMPREPAINT(nmcd, wParam, lParam); case OS.CDDS_SUBITEMPOSTPAINT : return CDDS_SUBITEMPOSTPAINT(nmcd, wParam, lParam); case OS.CDDS_POSTPAINT : return CDDS_POSTPAINT(nmcd, wParam, lParam); } break; } case OS.LVN_MARQUEEBEGIN : { if (((style) & (SWT.SINGLE)) != 0) return LRESULT.ONE; if ((hooks(SWT.MouseDown)) || (hooks(SWT.MouseUp))) { return LRESULT.ONE; } if (((style) & (SWT.RIGHT_TO_LEFT)) != 0) { if ((findImageControl()) != null) return LRESULT.ONE; } break; } case OS.LVN_BEGINDRAG : case OS.LVN_BEGINRDRAG : { if ((org.eclipse.swt.widgets.OS.GetKeyState(OS.VK_LBUTTON)) >= 0) break; dragStarted = true; if ((hdr.code) == (OS.LVN_BEGINDRAG)) { int pos = org.eclipse.swt.widgets.OS.GetMessagePos(); org.eclipse.swt.widgets.POINT pt = new org.eclipse.swt.widgets.POINT(); org.eclipse.swt.widgets.OS.POINTSTOPOINT(pt, pos); org.eclipse.swt.widgets.OS.ScreenToClient(handle, pt); sendDragEvent(1, pt.x, pt.y); } break; } case OS.LVN_COLUMNCLICK : { org.eclipse.swt.widgets.NMLISTVIEW pnmlv = new org.eclipse.swt.widgets.NMLISTVIEW(); org.eclipse.swt.widgets.OS.MoveMemory(pnmlv, lParam, NMLISTVIEW.sizeof); org.eclipse.swt.widgets.TableColumn column = columns[pnmlv.iSubItem]; if (column != null) { column.sendSelectionEvent(SWT.Selection); } break; } case OS.LVN_ITEMACTIVATE : { if (ignoreActivate) break; org.eclipse.swt.widgets.NMLISTVIEW pnmlv = new org.eclipse.swt.widgets.NMLISTVIEW(); org.eclipse.swt.widgets.OS.MoveMemory(pnmlv, lParam, NMLISTVIEW.sizeof); if ((pnmlv.iItem) != (-1)) { org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); event.item = _getItem(pnmlv.iItem); sendSelectionEvent(SWT.DefaultSelection, event, false); } break; } case OS.LVN_ITEMCHANGED : { if (fullRowSelect) { fullRowSelect = false; org.eclipse.swt.widgets.OS.DefWindowProc(handle, OS.WM_SETREDRAW, 1, 0); org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_SETEXTENDEDLISTVIEWSTYLE, OS.LVS_EX_FULLROWSELECT, 0); } if (!(ignoreSelect)) { org.eclipse.swt.widgets.NMLISTVIEW pnmlv = new org.eclipse.swt.widgets.NMLISTVIEW(); org.eclipse.swt.widgets.OS.MoveMemory(pnmlv, lParam, NMLISTVIEW.sizeof); if (((pnmlv.uChanged) & (OS.LVIF_STATE)) != 0) { if ((pnmlv.iItem) == (-1)) { wasSelected = true; } else { boolean oldSelected = ((pnmlv.uOldState) & (OS.LVIS_SELECTED)) != 0; boolean newSelected = ((pnmlv.uNewState) & (OS.LVIS_SELECTED)) != 0; if (oldSelected != newSelected) wasSelected = true; } } } if ((hooks(SWT.EraseItem)) || (hooks(SWT.PaintItem))) { int hwndHeader = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_GETHEADER, 0, 0); int count = ((int) (org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0))); if (count != 0) { forceResize(); org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); org.eclipse.swt.widgets.OS.GetClientRect(handle, rect); org.eclipse.swt.widgets.NMLISTVIEW pnmlv = new org.eclipse.swt.widgets.NMLISTVIEW(); org.eclipse.swt.widgets.OS.MoveMemory(pnmlv, lParam, NMLISTVIEW.sizeof); if ((pnmlv.iItem) != (-1)) { org.eclipse.swt.widgets.RECT itemRect = new org.eclipse.swt.widgets.RECT(); itemRect.left = OS.LVIR_BOUNDS; ignoreCustomDraw = true; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_GETITEMRECT, pnmlv.iItem, itemRect); ignoreCustomDraw = false; org.eclipse.swt.widgets.RECT headerRect = new org.eclipse.swt.widgets.RECT(); int index = ((int) (org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_ORDERTOINDEX, (count - 1), 0))); org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEMRECT, index, headerRect); org.eclipse.swt.widgets.OS.MapWindowPoints(hwndHeader, handle, headerRect, 2); rect.left = headerRect.right; rect.top = itemRect.top; rect.bottom = itemRect.bottom; org.eclipse.swt.widgets.OS.InvalidateRect(handle, rect, true); } } } break; } case OS.NM_RECOGNIZEGESTURE : if (OS.IsPPC) { boolean hasMenu = ((menu) != null) && (!(menu.isDisposed())); if ((!hasMenu) && (!(hooks(SWT.MenuDetect)))) return LRESULT.ONE; } break; case OS.GN_CONTEXTMENU : if (OS.IsPPC) { boolean hasMenu = ((menu) != null) && (!(menu.isDisposed())); if (hasMenu || (hooks(SWT.MenuDetect))) { org.eclipse.swt.widgets.NMRGINFO nmrg = new org.eclipse.swt.widgets.NMRGINFO(); org.eclipse.swt.widgets.OS.MoveMemory(nmrg, lParam, NMRGINFO.sizeof); showMenu(nmrg.x, nmrg.y); return LRESULT.ONE; } } break; } return super.wmNotifyChild(hdr, wParam, lParam); }
public org.eclipse.swt.widgets.Rectangle computeTrim(int x, int y, int width, int height) { checkWidget(); org.eclipse.swt.widgets.Rectangle trim = super.computeTrim(x, y, width, height); int trimWidth = trimWidth(); int trimHeight = trimHeight(); trim.x -= trimWidth / 2; trim.y -= trimHeight - (trimWidth / 2); trim.width += trimWidth; trim.height += trimHeight; if ((menuBar) != null) { forceResize(); int menuBarHeight = org.eclipse.swt.widgets.OS.GTK_WIDGET_HEIGHT(menuBar.handle); trim.y -= menuBarHeight; trim.height += menuBarHeight; } return trim; }
void keyDown(org.eclipse.swt.custom.Event event) { switch (event.character) { case SWT.CR : notifyListeners(SWT.DefaultSelection, new org.eclipse.swt.custom.Event()); return; } switch (event.keyCode) { case SWT.ARROW_UP : setRowColumn(((row) - 1), column, true); break; case SWT.ARROW_DOWN : setRowColumn(((row) + 1), column, true); break; case SWT.ARROW_LEFT : case SWT.ARROW_RIGHT : { int leadKey = (((getStyle()) & (SWT.RIGHT_TO_LEFT)) != 0) ? SWT.ARROW_RIGHT : SWT.ARROW_LEFT; if ((event.keyCode) == leadKey) { setRowColumn(row, ((column) - 1), true); } else { setRowColumn(row, ((column) + 1), true); } break; } case SWT.HOME : setRowColumn(0, column, true); break; case SWT.END : { int row = (table.getItemCount()) - 1; setRowColumn(row, column, true); break; } case SWT.PAGE_UP : { int index = table.getTopIndex(); if (index == (row)) { org.eclipse.swt.custom.Rectangle rect = table.getClientArea(); org.eclipse.swt.custom.TableItem item = table.getItem(index); org.eclipse.swt.custom.Rectangle itemRect = item.getBounds(0); rect.height -= itemRect.y; int height = table.getItemHeight(); int page = java.lang.Math.max(1, ((rect.height) / height)); index = java.lang.Math.max(0, ((index - page) + 1)); } setRowColumn(index, column, true); break; } case SWT.PAGE_DOWN : { int index = table.getTopIndex(); org.eclipse.swt.custom.Rectangle rect = table.getClientArea(); org.eclipse.swt.custom.TableItem item = table.getItem(index); org.eclipse.swt.custom.Rectangle itemRect = item.getBounds(0); rect.height -= itemRect.y; int height = table.getItemHeight(); int page = java.lang.Math.max(1, ((rect.height) / height)); int end = (table.getItemCount()) - 1; index = java.lang.Math.min(end, ((index + page) - 1)); if (index == (row)) { index = java.lang.Math.min(end, ((index + page) - 1)); } setRowColumn(index, column, true); break; } } }
public java.lang.String open() { java.lang.String directoryPath = null; org.eclipse.swt.widgets.NSOpenPanel panel = org.eclipse.swt.widgets.NSOpenPanel.openPanel(); org.eclipse.swt.widgets.OS.objc_msgSend(panel.id, OS.sel_setShowsHiddenFiles_, true); panel.setCanCreateDirectories(true); panel.setAllowsMultipleSelection((((style) & (SWT.MULTI)) != 0)); panel.setTitle(org.eclipse.swt.widgets.NSString.stringWith(((title) != null ? title : ""))); panel.setMessage(org.eclipse.swt.widgets.NSString.stringWith(((message) != null ? message : ""))); panel.setCanChooseFiles(false); panel.setCanChooseDirectories(true); org.eclipse.swt.widgets.NSApplication application = org.eclipse.swt.widgets.NSApplication.sharedApplication(); if (((parent) != null) && (((style) & (SWT.SHEET)) != 0)) { application.beginSheet(panel, parent.view.window(), null, 0, 0); } org.eclipse.swt.widgets.Display display = ((parent) != null) ? parent.getDisplay() : org.eclipse.swt.widgets.Display.getCurrent(); display.setModalDialog(this); org.eclipse.swt.widgets.NSString dir = (((filterPath) != null) && ((filterPath.length()) > 0)) ? org.eclipse.swt.widgets.NSString.stringWith(filterPath) : null; int response = panel.runModalForDirectory(dir, null); if (((parent) != null) && (((style) & (SWT.SHEET)) != 0)) { application.endSheet(panel, 0); } display.setModalDialog(null); if (response == (OS.NSFileHandlingPanelOKButton)) { org.eclipse.swt.widgets.NSString filename = panel.filename(); directoryPath = filterPath = filename.getString(); } return directoryPath; }
void writeStyledLine(java.lang.String line, int lineOffset, int[] ranges, org.eclipse.swt.custom.StyleRange[] styles, org.eclipse.swt.custom.Color lineBackground, int indent, int alignment, boolean justify) { int lineLength = line.length(); int startOffset = getStart(); int writeOffset = startOffset - lineOffset; if (writeOffset >= lineLength) return; int lineIndex = java.lang.Math.max(0, writeOffset); write("\\fi"); write(indent); switch (alignment) { case SWT.LEFT : write("\\ql"); break; case SWT.CENTER : write("\\qc"); break; case SWT.RIGHT : write("\\qr"); break; } if (justify) write("\\qj"); write(" "); if (lineBackground != null) { write("{\\highlight"); write(getColorIndex(lineBackground, org.eclipse.swt.custom.StyledText.RTFWriter.DEFAULT_BACKGROUND)); write(" "); } int endOffset = startOffset + (super.getCharCount()); int lineEndOffset = java.lang.Math.min(lineLength, (endOffset - lineOffset)); for (int i = 0; i < (styles.length); i++) { org.eclipse.swt.custom.StyleRange style = styles[i]; int start; int end; if (ranges != null) { start = (ranges[(i << 1)]) - lineOffset; end = start + (ranges[((i << 1) + 1)]); } else { start = (style.start) - lineOffset; end = start + (style.length); } if (end < writeOffset) { continue; } if (start >= lineEndOffset) { break; } if (lineIndex < start) { write(line, lineIndex, start); lineIndex = start; } write("{\\cf"); write(getColorIndex(style.foreground, org.eclipse.swt.custom.StyledText.RTFWriter.DEFAULT_FOREGROUND)); int colorIndex = getColorIndex(style.background, org.eclipse.swt.custom.StyledText.RTFWriter.DEFAULT_BACKGROUND); if (colorIndex != (org.eclipse.swt.custom.StyledText.RTFWriter.DEFAULT_BACKGROUND)) { write("\\highlight"); write(colorIndex); } org.eclipse.swt.custom.Font font = style.font; if (font != null) { int fontIndex = getFontIndex(font); write("\\f"); write(fontIndex); org.eclipse.swt.custom.FontData fontData = font.getFontData()[0]; write("\\fs"); write(((fontData.getHeight()) * 2)); } else { if (((style.fontStyle) & (SWT.BOLD)) != 0) { write("\\b"); } if (((style.fontStyle) & (SWT.ITALIC)) != 0) { write("\\i"); } } if (style.underline) { write("\\ul"); } if (style.strikeout) { write("\\strike"); } write(" "); int copyEnd = java.lang.Math.min(end, lineEndOffset); copyEnd = java.lang.Math.max(copyEnd, lineIndex); write(line, lineIndex, copyEnd); if (font == null) { if (((style.fontStyle) & (SWT.BOLD)) != 0) { write("\\b0"); } if (((style.fontStyle) & (SWT.ITALIC)) != 0) { write("\\i0"); } } if (style.underline) { write("\\ul0"); } if (style.strikeout) { write("\\strike0"); } write("}"); lineIndex = copyEnd; } if (lineIndex < lineEndOffset) { write(line, lineIndex, lineEndOffset); } if (lineBackground != null) write("}"); }
public org.eclipse.swt.widgets.Tray getSystemTray() { checkDevice(); if ((tray) != null) return tray; return tray = new org.eclipse.swt.widgets.Tray(this, SWT.NONE); }
public boolean isFocusControl() { checkWidget(); int focusHwnd = org.eclipse.swt.ole.win32.OS.GetFocus(); if (focusHwnd == (handle)) return (objIOleInPlaceObject) == null; if ((objIOleInPlaceObject) == null) return false; int[] phwnd = new int[1]; objIOleInPlaceObject.GetWindow(phwnd); if ((phwnd[0]) == 0) return false; do { if ((phwnd[0]) == focusHwnd) return true; } while ((focusHwnd = org.eclipse.swt.ole.win32.OS.GetParent(focusHwnd)) != 0 ); return false; }
void createHandle() { super.createHandle(); state &= ~(CANVAS); if (((style) & (SWT.FLAT)) != 0) { if (((OS.COMCTL32_MAJOR) < 6) || (!(org.eclipse.swt.widgets.OS.IsAppThemed()))) { int bits = org.eclipse.swt.widgets.OS.GetWindowLong(handle, OS.GWL_STYLE); bits &= ~(OS.TBSTYLE_TRANSPARENT); org.eclipse.swt.widgets.OS.SetWindowLong(handle, OS.GWL_STYLE, bits); } } int hFont = org.eclipse.swt.widgets.OS.GetStockObject(OS.SYSTEM_FONT); org.eclipse.swt.widgets.OS.SendMessage(handle, OS.WM_SETFONT, hFont, 0); org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TB_BUTTONSTRUCTSIZE, TBBUTTON.sizeof, 0); org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TB_SETBITMAPSIZE, 0, 0); org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TB_SETBUTTONSIZE, 0, 0); int bits = ((OS.TBSTYLE_EX_DRAWDDARROWS) | (OS.TBSTYLE_EX_MIXEDBUTTONS)) | (OS.TBSTYLE_EX_HIDECLIPPEDBUTTONS); if ((OS.COMCTL32_MAJOR) >= 6) bits |= OS.TBSTYLE_EX_DOUBLEBUFFER; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TB_SETEXTENDEDSTYLE, 0, bits); }
public boolean getEnabled() { checkWidget(); int topHandle = topHandle(); return org.eclipse.swt.widgets.OS.GTK_WIDGET_SENSITIVE(topHandle); }
public org.eclipse.swt.widgets.Point computeSize(int wHint, int hHint, boolean changed) { checkWidget(); if ((wHint != (SWT.DEFAULT)) && (wHint < 0)) wHint = 0; if ((hHint != (SWT.DEFAULT)) && (hHint < 0)) hHint = 0; int width; int height; if ((OS.COMCTL32_MAJOR) >= 6) { int hDC = org.eclipse.swt.widgets.OS.GetDC(handle); int newFont = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.WM_GETFONT, 0, 0); int oldFont = org.eclipse.swt.widgets.OS.SelectObject(hDC, newFont); if ((text.length()) > 0) { org.eclipse.swt.widgets.TCHAR buffer = new org.eclipse.swt.widgets.TCHAR(getCodePage(), parse(text), false); org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); int flags = (OS.DT_CALCRECT) | (OS.DT_NOPREFIX); if (wHint != (SWT.DEFAULT)) { flags |= OS.DT_WORDBREAK; rect.right = wHint; } org.eclipse.swt.widgets.OS.DrawText(hDC, buffer, buffer.length(), rect, flags); width = (rect.right) - (rect.left); height = rect.bottom; } else { org.eclipse.swt.widgets.TEXTMETRIC lptm = (OS.IsUnicode) ? ((org.eclipse.swt.widgets.TEXTMETRIC) (new org.eclipse.swt.widgets.TEXTMETRICW())) : new org.eclipse.swt.widgets.TEXTMETRICA(); org.eclipse.swt.widgets.OS.GetTextMetrics(hDC, lptm); width = 0; height = lptm.tmHeight; } if (newFont != 0) org.eclipse.swt.widgets.OS.SelectObject(hDC, oldFont); org.eclipse.swt.widgets.OS.ReleaseDC(handle, hDC); } else { int layoutWidth = layout.getWidth(); if (wHint == 0) { layout.setWidth(1); org.eclipse.swt.widgets.Rectangle rect = layout.getBounds(); width = 0; height = rect.height; } else { layout.setWidth(wHint); org.eclipse.swt.widgets.Rectangle rect = layout.getBounds(); width = rect.width; height = rect.height; } layout.setWidth(layoutWidth); } if (wHint != (SWT.DEFAULT)) width = wHint; if (hHint != (SWT.DEFAULT)) height = hHint; int border = getBorderWidth(); width += border * 2; height += border * 2; return new org.eclipse.swt.widgets.Point(width, height); }
public TextLayout(org.eclipse.swt.graphics.Device device) { if (device == null) device = org.eclipse.swt.graphics.Device.getDevice(); if (device == null) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NULL_ARGUMENT); this.device = device; int[] buffer = new int[1]; org.eclipse.swt.graphics.OS.ATSUCreateTextLayout(buffer); if ((buffer[0]) == 0) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NO_HANDLES); layout = buffer[0]; int ptr = org.eclipse.swt.graphics.OS.NewPtr(4); buffer[0] = OS.kATSLineUseDeviceMetrics; org.eclipse.swt.graphics.OS.memcpy(ptr, buffer, 4); int[] tags = new int[]{ OS.kATSULineLayoutOptionsTag }; int[] sizes = new int[]{ 4 }; int[] values = new int[]{ ptr }; org.eclipse.swt.graphics.OS.ATSUSetLayoutControls(layout, tags.length, tags, sizes, values); org.eclipse.swt.graphics.OS.DisposePtr(ptr); org.eclipse.swt.graphics.OS.ATSUSetHighlightingMethod(layout, 1, new org.eclipse.swt.graphics.ATSUUnhighlightData()); ascent = descent = -1; text = ""; styles = new org.eclipse.swt.graphics.TextLayout.StyleItem[2]; styles[0] = new org.eclipse.swt.graphics.TextLayout.StyleItem(); styles[1] = new org.eclipse.swt.graphics.TextLayout.StyleItem(); }
void setBounds(int x, int y, int width, int height, int flags) { if (((flags & (OS.SWP_NOSIZE)) == 0) && (width != 0)) { org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); org.eclipse.swt.widgets.OS.GetWindowRect(handle, rect); if (((rect.right) - (rect.left)) == 0) { int[] start = new int[1]; int[] end = new int[1]; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.EM_GETSEL, start, end); if (((start[0]) != 0) || ((end[0]) != 0)) { flags |= ((OS.SWP_NOZORDER) | (OS.SWP_DRAWFRAME)) | (OS.SWP_NOACTIVATE); org.eclipse.swt.widgets.OS.SetWindowPos(handle, 0, x, y, width, height, flags); org.eclipse.swt.widgets.OS.SendMessage(handle, OS.EM_SETSEL, 0, 0); org.eclipse.swt.widgets.OS.SendMessage(handle, OS.EM_SETSEL, start[0], end[0]); return; } } } super.setBounds(x, y, width, height, flags); }
public org.eclipse.swt.printing.PrinterData open() { org.eclipse.swt.printing.Control parent = getParent(); int style = getStyle(); int hwndOwner = parent.handle; int hwndParent = parent.handle; boolean enabled = false; if ((!(OS.IsWinCE)) && ((OS.WIN32_VERSION) >= (org.eclipse.swt.printing.OS.VERSION(4, 10)))) { int dialogOrientation = style & ((SWT.LEFT_TO_RIGHT) | (SWT.RIGHT_TO_LEFT)); int parentOrientation = (parent.getStyle()) & ((SWT.LEFT_TO_RIGHT) | (SWT.RIGHT_TO_LEFT)); if (dialogOrientation != parentOrientation) { int exStyle = OS.WS_EX_NOINHERITLAYOUT; if (dialogOrientation == (SWT.RIGHT_TO_LEFT)) exStyle |= OS.WS_EX_LAYOUTRTL; hwndOwner = org.eclipse.swt.printing.OS.CreateWindowEx(exStyle, org.eclipse.swt.printing.PrintDialog.DialogClass, null, 0, OS.CW_USEDEFAULT, 0, OS.CW_USEDEFAULT, 0, hwndParent, 0, org.eclipse.swt.printing.OS.GetModuleHandle(null), null); enabled = org.eclipse.swt.printing.OS.IsWindowEnabled(hwndParent); if (enabled) org.eclipse.swt.printing.OS.EnableWindow(hwndParent, false); } } org.eclipse.swt.printing.PrinterData data = null; org.eclipse.swt.printing.PRINTDLG pd = new org.eclipse.swt.printing.PRINTDLG(); pd.lStructSize = PRINTDLG.sizeof; pd.hwndOwner = hwndOwner; pd.Flags = OS.PD_RETURNDEFAULT; if (org.eclipse.swt.printing.OS.PrintDlg(pd)) { int lpInitData = 0; int hHeap = org.eclipse.swt.printing.OS.GetProcessHeap(); byte[] devmodeData = printerData.otherData; if ((devmodeData != null) && ((devmodeData.length) != 0)) { lpInitData = org.eclipse.swt.printing.OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, devmodeData.length); org.eclipse.swt.printing.OS.MoveMemory(lpInitData, devmodeData, devmodeData.length); if ((pd.hDevMode) != 0) org.eclipse.swt.printing.OS.GlobalFree(pd.hDevMode); pd.hDevMode = lpInitData; } int hMem = pd.hDevMode; int ptr = org.eclipse.swt.printing.OS.GlobalLock(hMem); org.eclipse.swt.printing.DEVMODE devmode = (OS.IsUnicode) ? ((org.eclipse.swt.printing.DEVMODE) (new org.eclipse.swt.printing.DEVMODEW())) : new org.eclipse.swt.printing.DEVMODEA(); org.eclipse.swt.printing.OS.MoveMemory(devmode, ptr, (OS.IsUnicode ? org.eclipse.swt.printing.OS.DEVMODEW_sizeof() : org.eclipse.swt.printing.OS.DEVMODEA_sizeof())); devmode.dmFields |= OS.DM_ORIENTATION; devmode.dmOrientation = ((printerData.orientation) == (PrinterData.PORTRAIT)) ? OS.DMORIENT_PORTRAIT : OS.DMORIENT_LANDSCAPE; if ((printerData.copyCount) != 1) { devmode.dmFields |= OS.DM_COPIES; devmode.dmCopies = ((short) (printerData.copyCount)); } if ((printerData.collate) != false) { devmode.dmFields |= OS.DM_COLLATE; devmode.dmCollate = OS.DMCOLLATE_TRUE; } org.eclipse.swt.printing.OS.MoveMemory(ptr, devmode, (OS.IsUnicode ? org.eclipse.swt.printing.OS.DEVMODEW_sizeof() : org.eclipse.swt.printing.OS.DEVMODEA_sizeof())); org.eclipse.swt.printing.OS.GlobalUnlock(hMem); pd.Flags = OS.PD_USEDEVMODECOPIESANDCOLLATE; if (printerData.printToFile) pd.Flags |= OS.PD_PRINTTOFILE; switch (printerData.scope) { case PrinterData.PAGE_RANGE : pd.Flags |= OS.PD_PAGENUMS; break; case PrinterData.SELECTION : pd.Flags |= OS.PD_SELECTION; break; default : pd.Flags |= OS.PD_ALLPAGES; } pd.nMinPage = 1; pd.nMaxPage = -1; pd.nFromPage = ((short) (java.lang.Math.min(65535, java.lang.Math.max(1, printerData.startPage)))); pd.nToPage = ((short) (java.lang.Math.min(65535, java.lang.Math.max(1, printerData.endPage)))); org.eclipse.swt.printing.Display display = parent.getDisplay(); org.eclipse.swt.printing.Shell[] shells = display.getShells(); if (((getStyle()) & ((SWT.APPLICATION_MODAL) | (SWT.SYSTEM_MODAL))) != 0) { for (int i = 0; i < (shells.length); i++) { if ((shells[i].isEnabled()) && ((shells[i]) != parent)) { shells[i].setEnabled(false); } else { shells[i] = null; } } } java.lang.String key = "org.eclipse.swt.internal.win32.runMessagesInIdle"; java.lang.Object oldValue = display.getData(key); display.setData(key, new java.lang.Boolean(true)); boolean success = org.eclipse.swt.printing.OS.PrintDlg(pd); display.setData(key, oldValue); if (((getStyle()) & ((SWT.APPLICATION_MODAL) | (SWT.SYSTEM_MODAL))) != 0) { for (int i = 0; i < (shells.length); i++) { if (((shells[i]) != null) && (!(shells[i].isDisposed()))) { shells[i].setEnabled(true); } } } if (success) { hMem = pd.hDevNames; int size = ((org.eclipse.swt.printing.OS.GlobalSize(hMem)) / (TCHAR.sizeof)) * (TCHAR.sizeof); ptr = org.eclipse.swt.printing.OS.GlobalLock(hMem); short[] offsets = new short[4]; org.eclipse.swt.printing.OS.MoveMemory(offsets, ptr, (2 * (offsets.length))); org.eclipse.swt.printing.TCHAR buffer = new org.eclipse.swt.printing.TCHAR(0, size); org.eclipse.swt.printing.OS.MoveMemory(buffer, ptr, size); org.eclipse.swt.printing.OS.GlobalUnlock(hMem); if ((pd.hDevNames) != 0) org.eclipse.swt.printing.OS.GlobalFree(pd.hDevNames); int driverOffset = offsets[0]; int i = 0; while ((driverOffset + i) < size) { if ((buffer.tcharAt((driverOffset + i))) == 0) break; i++; } java.lang.String driver = buffer.toString(driverOffset, i); int deviceOffset = offsets[1]; i = 0; while ((deviceOffset + i) < size) { if ((buffer.tcharAt((deviceOffset + i))) == 0) break; i++; } java.lang.String device = buffer.toString(deviceOffset, i); int outputOffset = offsets[2]; i = 0; while ((outputOffset + i) < size) { if ((buffer.tcharAt((outputOffset + i))) == 0) break; i++; } java.lang.String output = buffer.toString(outputOffset, i); data = new org.eclipse.swt.printing.PrinterData(driver, device); if (((pd.Flags) & (OS.PD_PAGENUMS)) != 0) { data.scope = PrinterData.PAGE_RANGE; data.startPage = (pd.nFromPage) & 65535; data.endPage = (pd.nToPage) & 65535; } else if (((pd.Flags) & (OS.PD_SELECTION)) != 0) { data.scope = PrinterData.SELECTION; } data.printToFile = ((pd.Flags) & (OS.PD_PRINTTOFILE)) != 0; if (data.printToFile) data.fileName = output; data.copyCount = pd.nCopies; data.collate = ((pd.Flags) & (OS.PD_COLLATE)) != 0; hMem = pd.hDevMode; size = org.eclipse.swt.printing.OS.GlobalSize(hMem); ptr = org.eclipse.swt.printing.OS.GlobalLock(hMem); data.otherData = new byte[size]; org.eclipse.swt.printing.OS.MoveMemory(data.otherData, ptr, size); devmode = (OS.IsUnicode) ? ((org.eclipse.swt.printing.DEVMODE) (new org.eclipse.swt.printing.DEVMODEW())) : new org.eclipse.swt.printing.DEVMODEA(); org.eclipse.swt.printing.OS.MoveMemory(devmode, ptr, (OS.IsUnicode ? org.eclipse.swt.printing.OS.DEVMODEW_sizeof() : org.eclipse.swt.printing.OS.DEVMODEA_sizeof())); if (((devmode.dmFields) & (OS.DM_ORIENTATION)) != 0) { int dmOrientation = devmode.dmOrientation; data.orientation = (dmOrientation == (OS.DMORIENT_LANDSCAPE)) ? PrinterData.LANDSCAPE : PrinterData.PORTRAIT; } org.eclipse.swt.printing.OS.GlobalUnlock(hMem); if ((pd.hDevMode) != 0) org.eclipse.swt.printing.OS.GlobalFree(pd.hDevMode); if (lpInitData != 0) org.eclipse.swt.printing.OS.HeapFree(hHeap, 0, lpInitData); printerData = data; } } if (hwndParent != hwndOwner) { if (enabled) org.eclipse.swt.printing.OS.EnableWindow(hwndParent, true); org.eclipse.swt.printing.OS.SetActiveWindow(hwndParent); org.eclipse.swt.printing.OS.DestroyWindow(hwndOwner); } return data; }
float computePoints(org.eclipse.swt.graphics.LOGFONT logFont, int hFont) { int hDC = internal_new_GC(null); int logPixelsY = org.eclipse.swt.graphics.OS.GetDeviceCaps(hDC, OS.LOGPIXELSY); int pixels = 0; if ((logFont.lfHeight) > 0) { int oldFont = org.eclipse.swt.graphics.OS.SelectObject(hDC, hFont); org.eclipse.swt.graphics.TEXTMETRIC lptm = (OS.IsUnicode) ? ((org.eclipse.swt.graphics.TEXTMETRIC) (new org.eclipse.swt.graphics.TEXTMETRICW())) : new org.eclipse.swt.graphics.TEXTMETRICA(); org.eclipse.swt.graphics.OS.GetTextMetrics(hDC, lptm); org.eclipse.swt.graphics.OS.SelectObject(hDC, oldFont); pixels = (logFont.lfHeight) - (lptm.tmInternalLeading); } else { pixels = -(logFont.lfHeight); } internal_dispose_GC(hDC, null); return (pixels * 72.0F) / logPixelsY; }
int hitTest(int id, int sel, org.eclipse.swt.widgets.NSPoint point) { if (((state) & (DISABLED)) != 0) return 0; if (!(isActive())) return 0; if ((regionPath) != null) { org.eclipse.swt.widgets.NSView superview = new org.eclipse.swt.widgets.NSView(id).superview(); if (superview != null) { org.eclipse.swt.widgets.NSPoint pt = superview.convertPoint_toView_(point, view); if (!(regionPath.containsPoint(pt))) return 0; } } return super.hitTest(id, sel, point); }
static org.eclipse.swt.browser.Browser findBrowser(org.eclipse.swt.browser.nsIDOMWindow aDOMWindow) { int[] result = new int[1]; int rc = org.eclipse.swt.browser.XPCOM.NS_GetServiceManager(result); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); if ((result[0]) == 0) org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); org.eclipse.swt.browser.nsIServiceManager serviceManager = new org.eclipse.swt.browser.nsIServiceManager(result[0]); result[0] = 0; byte[] aContractID = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_WINDOWWATCHER_CONTRACTID, true); rc = serviceManager.GetServiceByContractID(aContractID, nsIWindowWatcher.NS_IWINDOWWATCHER_IID, result); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); if ((result[0]) == 0) org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); serviceManager.Release(); org.eclipse.swt.browser.nsIWindowWatcher windowWatcher = new org.eclipse.swt.browser.nsIWindowWatcher(result[0]); result[0] = 0; rc = aDOMWindow.GetTop(result); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); if ((result[0]) == 0) org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); int topDOMWindow = result[0]; result[0] = 0; rc = windowWatcher.GetChromeForWindow(topDOMWindow, result); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); new org.eclipse.swt.browser.nsISupports(topDOMWindow).Release(); windowWatcher.Release(); if ((result[0]) == 0) return null; org.eclipse.swt.browser.nsIWebBrowserChrome webBrowserChrome = new org.eclipse.swt.browser.nsIWebBrowserChrome(result[0]); result[0] = 0; rc = webBrowserChrome.QueryInterface(nsIEmbeddingSiteWindow.NS_IEMBEDDINGSITEWINDOW_IID, result); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); if ((result[0]) == 0) org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); webBrowserChrome.Release(); org.eclipse.swt.browser.nsIEmbeddingSiteWindow embeddingSiteWindow = new org.eclipse.swt.browser.nsIEmbeddingSiteWindow(result[0]); result[0] = 0; rc = embeddingSiteWindow.GetSiteWindow(result); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); if ((result[0]) == 0) org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); embeddingSiteWindow.Release(); return org.eclipse.swt.browser.Mozilla.findBrowser(result[0]); }
int gtk_key_press_event(int widget, int event) { int result = super.gtk_key_press_event(widget, event); if (result != 0) return result; if (((state) & (CANVAS)) != 0) { org.eclipse.swt.widgets.GdkEventKey keyEvent = new org.eclipse.swt.widgets.GdkEventKey(); org.eclipse.swt.widgets.OS.memmove(keyEvent, event, GdkEventKey.sizeof); int key = keyEvent.keyval; switch (key) { case OS.GDK_Return : case OS.GDK_KP_Enter : return 1; } } return result; }
public void setRedraw(boolean redraw) { checkWidget(); if (redraw) { if ((--(drawCount)) == 0) { invalidateVisibleRegion(); redrawWidget(view, true); } } else { if ((drawCount) == 0) { invalidateVisibleRegion(); } (drawCount)++; } }
void createHandle() { state |= CANVAS; if ((window) != null) { } else { window = ((org.eclipse.swt.widgets.NSWindow) (new org.eclipse.swt.widgets.NSWindow().alloc())); org.eclipse.swt.widgets.NSRect rect = new org.eclipse.swt.widgets.NSRect(); org.eclipse.swt.widgets.Monitor monitor = getMonitor(); org.eclipse.swt.widgets.Rectangle clientArea = monitor.getClientArea(); rect.width = ((clientArea.width) * 5) / 8; rect.height = ((clientArea.height) * 5) / 8; int styleMask = OS.NSBorderlessWindowMask; if (((style) & (org.eclipse.swt.SWT.NO_TRIM)) == 0) { styleMask = OS.NSTitledWindowMask; if (((style) & (org.eclipse.swt.SWT.CLOSE)) != 0) styleMask |= OS.NSClosableWindowMask; if (((style) & (org.eclipse.swt.SWT.MIN)) != 0) styleMask |= OS.NSMiniaturizableWindowMask; if (((style) & (org.eclipse.swt.SWT.RESIZE)) != 0) styleMask |= OS.NSResizableWindowMask; } window = window.initWithContentRect_styleMask_backing_defer_(rect, styleMask, OS.NSBackingStoreBuffered, false); display.cascade = window.cascadeTopLeftFromPoint(display.cascade); if (((style) & (org.eclipse.swt.SWT.ON_TOP)) != 0) { window.setLevel(OS.NSFloatingWindowLevel); } } createHandle(null); window.setContentView(view); windowDelegate = ((org.eclipse.swt.widgets.SWTWindowDelegate) (new org.eclipse.swt.widgets.SWTWindowDelegate().alloc().init())); windowDelegate.setTag(jniRef); window.setDelegate(windowDelegate); }
public org.eclipse.swt.widgets.Point computeSize(int wHint, int hHint, boolean changed) { checkWidget(); int width = org.eclipse.swt.widgets.OS.GTK_WIDGET_WIDTH(fixedHandle); int height = org.eclipse.swt.widgets.OS.GTK_WIDGET_HEIGHT(fixedHandle); org.eclipse.swt.widgets.OS.gtk_widget_set_size_request(handle, wHint, hHint); org.eclipse.swt.widgets.GtkRequisition requisition = new org.eclipse.swt.widgets.GtkRequisition(); org.eclipse.swt.widgets.OS.gtk_widget_size_request(handle, requisition); org.eclipse.swt.widgets.GtkRequisition entryRequesition = new org.eclipse.swt.widgets.GtkRequisition(); org.eclipse.swt.widgets.OS.gtk_widget_size_request(entryHandle, entryRequesition); org.eclipse.swt.widgets.GtkRequisition listRequesition = new org.eclipse.swt.widgets.GtkRequisition(); int listParent = org.eclipse.swt.widgets.OS.gtk_widget_get_parent(listHandle); org.eclipse.swt.widgets.OS.gtk_widget_size_request((listParent != 0 ? listParent : listHandle), listRequesition); org.eclipse.swt.widgets.OS.gtk_widget_set_size_request(handle, width, height); width = (((requisition.width) - (entryRequesition.width)) + (listRequesition.width)) + 2; width = (wHint == (SWT.DEFAULT)) ? width : wHint; height = (hHint == (SWT.DEFAULT)) ? requisition.height : hHint; return new org.eclipse.swt.widgets.Point(width, height); }
protected void init() { this.dpi = getDPI(); if ((xDisplay) != 0) { int[] event_basep = new int[1]; int[] error_basep = new int[1]; if (org.eclipse.swt.graphics.OS.XRenderQueryExtension(xDisplay, event_basep, error_basep)) { int[] major_versionp = new int[1]; int[] minor_versionp = new int[1]; org.eclipse.swt.graphics.OS.XRenderQueryVersion(xDisplay, major_versionp, minor_versionp); useXRender = ((major_versionp[0]) > 0) || (((major_versionp[0]) == 0) && ((minor_versionp[0]) >= 8)); } } if (((OS.GTK_VERSION) > (org.eclipse.swt.graphics.OS.VERSION(2, 17, 0))) && ((java.lang.System.getProperty("org.eclipse.swt.internal.gtk.useCairo")) != null)) { useCairo = true; } boolean fixAIX = (OS.IsAIX) && ((OS.PTR_SIZEOF) == 8); if ((debug) || fixAIX) { if ((xDisplay) != 0) { java.lang.Class clazz = getClass(); synchronized(clazz) { int index = 0; while (index < (org.eclipse.swt.graphics.Device.Devices.length)) { if ((org.eclipse.swt.graphics.Device.Devices[index]) != null) break; index++; } if (index == (org.eclipse.swt.graphics.Device.Devices.length)) { org.eclipse.swt.graphics.Device.XErrorCallback = new org.eclipse.swt.graphics.Callback(clazz, "XErrorProc", 2); org.eclipse.swt.graphics.Device.XNullErrorProc = org.eclipse.swt.graphics.Device.XErrorCallback.getAddress(); if ((org.eclipse.swt.graphics.Device.XNullErrorProc) == 0) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NO_MORE_CALLBACKS); org.eclipse.swt.graphics.Device.XIOErrorCallback = new org.eclipse.swt.graphics.Callback(clazz, "XIOErrorProc", 1); org.eclipse.swt.graphics.Device.XNullIOErrorProc = org.eclipse.swt.graphics.Device.XIOErrorCallback.getAddress(); if ((org.eclipse.swt.graphics.Device.XNullIOErrorProc) == 0) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NO_MORE_CALLBACKS); org.eclipse.swt.graphics.Device.XErrorProc = org.eclipse.swt.graphics.OS.XSetErrorHandler(org.eclipse.swt.graphics.Device.XNullErrorProc); org.eclipse.swt.graphics.Device.XIOErrorProc = org.eclipse.swt.graphics.OS.XSetIOErrorHandler(org.eclipse.swt.graphics.Device.XNullIOErrorProc); } } if (debug) org.eclipse.swt.graphics.OS.XSynchronize(xDisplay, true); } } if ((xDisplay) != 0) { logCallback = new org.eclipse.swt.graphics.Callback(this, "logProc", 4); logProc = logCallback.getAddress(); if ((logProc) == 0) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NO_MORE_CALLBACKS); if (debug) { int flags = ((OS.G_LOG_LEVEL_MASK) | (OS.G_LOG_FLAG_FATAL)) | (OS.G_LOG_FLAG_RECURSION); for (int i = 0; i < (log_domains.length); i++) { byte[] log_domain = org.eclipse.swt.graphics.Converter.wcsToMbcs(null, log_domains[i], true); handler_ids[i] = org.eclipse.swt.graphics.OS.g_log_set_handler(log_domain, flags, logProc, 0); } } } COLOR_BLACK = new org.eclipse.swt.graphics.Color(this, 0, 0, 0); COLOR_DARK_RED = new org.eclipse.swt.graphics.Color(this, 128, 0, 0); COLOR_DARK_GREEN = new org.eclipse.swt.graphics.Color(this, 0, 128, 0); COLOR_DARK_YELLOW = new org.eclipse.swt.graphics.Color(this, 128, 128, 0); COLOR_DARK_BLUE = new org.eclipse.swt.graphics.Color(this, 0, 0, 128); COLOR_DARK_MAGENTA = new org.eclipse.swt.graphics.Color(this, 128, 0, 128); COLOR_DARK_CYAN = new org.eclipse.swt.graphics.Color(this, 0, 128, 128); COLOR_GRAY = new org.eclipse.swt.graphics.Color(this, 192, 192, 192); COLOR_DARK_GRAY = new org.eclipse.swt.graphics.Color(this, 128, 128, 128); COLOR_RED = new org.eclipse.swt.graphics.Color(this, 255, 0, 0); COLOR_GREEN = new org.eclipse.swt.graphics.Color(this, 0, 255, 0); COLOR_YELLOW = new org.eclipse.swt.graphics.Color(this, 255, 255, 0); COLOR_BLUE = new org.eclipse.swt.graphics.Color(this, 0, 0, 255); COLOR_MAGENTA = new org.eclipse.swt.graphics.Color(this, 255, 0, 255); COLOR_CYAN = new org.eclipse.swt.graphics.Color(this, 0, 255, 255); COLOR_WHITE = new org.eclipse.swt.graphics.Color(this, 255, 255, 255); emptyTab = org.eclipse.swt.graphics.OS.pango_tab_array_new(1, false); if ((emptyTab) == 0) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NO_HANDLES); org.eclipse.swt.graphics.OS.pango_tab_array_set_tab(emptyTab, 0, OS.PANGO_TAB_LEFT, 1); shellHandle = org.eclipse.swt.graphics.OS.gtk_window_new(OS.GTK_WINDOW_TOPLEVEL); if ((shellHandle) == 0) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NO_HANDLES); org.eclipse.swt.graphics.OS.gtk_widget_realize(shellHandle); systemFont = getSystemFont(); }
public void setLayoutDeferred(boolean defer) { checkWidget(); if (!defer) { if ((--(layoutCount)) == 0) { if ((((state) & (LAYOUT_CHILD)) != 0) || (((state) & (LAYOUT_NEEDED)) != 0)) { updateLayout(true); } } } else { (layoutCount)++; } }
void updateCursorRects(boolean enabled) { super.updateCursorRects(enabled); if ((scrollView) == null) return; updateCursorRects(enabled, scrollView); org.eclipse.swt.widgets.NSClipView contentView = scrollView.contentView(); updateCursorRects(enabled, contentView); contentView.setDocumentCursor((enabled ? org.eclipse.swt.widgets.NSCursor.arrowCursor() : null)); }
public void setMaximum(int value) { checkWidget(); org.eclipse.swt.widgets.OS.PtSetResource(handle, OS.Pt_ARG_MAXIMUM, (value - 1), 0); }
public void setFullScreen(boolean fullScreen) { checkWidget(); if ((this.fullScreen) == fullScreen) return; this.fullScreen = fullScreen; if (fullScreen) { normalBounds = getBounds(); org.eclipse.swt.internal.carbon.OS.ChangeWindowAttributes(shellHandle, OS.kWindowNoTitleBarAttribute, ((org.eclipse.swt.internal.carbon.OS.kWindowResizableAttribute) | (org.eclipse.swt.internal.carbon.OS.kWindowLiveResizeAttribute))); updateSystemUIMode(); org.eclipse.swt.widgets.Rectangle screen = getMonitor().getBounds(); if (((menuBar) != null) && (getMonitor().equals(display.getPrimaryMonitor()))) { org.eclipse.swt.internal.carbon.Rect rect = new org.eclipse.swt.internal.carbon.Rect(); int gdevice = org.eclipse.swt.internal.carbon.OS.GetMainDevice(); org.eclipse.swt.internal.carbon.OS.GetAvailableWindowPositioningBounds(gdevice, rect); screen.height -= rect.top; screen.y += rect.top; } org.eclipse.swt.internal.carbon.Rect rect = new org.eclipse.swt.internal.carbon.Rect(); org.eclipse.swt.internal.carbon.OS.SetRect(rect, ((short) (screen.x)), ((short) (screen.y)), ((short) ((screen.x) + (screen.width))), ((short) ((screen.y) + (screen.height)))); org.eclipse.swt.internal.carbon.OS.SetWindowBounds(shellHandle, ((short) (OS.kWindowStructureRgn)), rect); } else { int attributes = 0; if (((style) & (org.eclipse.swt.SWT.RESIZE)) != 0) { attributes |= org.eclipse.swt.internal.carbon.OS.kWindowResizableAttribute; if (((style) & (org.eclipse.swt.SWT.TITLE)) == 0) attributes |= org.eclipse.swt.internal.carbon.OS.kWindowLiveResizeAttribute; if (!(org.eclipse.swt.internal.carbon.OS.__BIG_ENDIAN__())) attributes |= org.eclipse.swt.internal.carbon.OS.kWindowLiveResizeAttribute; } org.eclipse.swt.internal.carbon.OS.ChangeWindowAttributes(shellHandle, attributes, OS.kWindowNoTitleBarAttribute); org.eclipse.swt.internal.carbon.OS.SetSystemUIMode(OS.kUIModeNormal, 0); if (maximized) { setMaximized(true); } else { org.eclipse.swt.internal.carbon.Rect rect = new org.eclipse.swt.internal.carbon.Rect(); if ((normalBounds) != null) org.eclipse.swt.internal.carbon.OS.SetRect(rect, ((short) (normalBounds.x)), ((short) (normalBounds.y)), ((short) ((normalBounds.x) + (normalBounds.width))), ((short) ((normalBounds.y) + (normalBounds.height)))); org.eclipse.swt.internal.carbon.OS.SetWindowBounds(shellHandle, ((short) (OS.kWindowStructureRgn)), rect); } normalBounds = null; } }
public void setImage(org.eclipse.swt.widgets.Image image) { checkWidget(); if (((style) & (SWT.SEPARATOR)) != 0) return; super.setImage(image); if (OS.IsWinCE) { if (((OS.IsPPC) || (OS.IsSP)) && ((parent.hwndCB) != 0)) { int hwndCB = parent.hwndCB; org.eclipse.swt.widgets.TBBUTTONINFO info = new org.eclipse.swt.widgets.TBBUTTONINFO(); info.cbSize = TBBUTTONINFO.sizeof; info.dwMask = OS.TBIF_IMAGE; info.iImage = parent.imageIndex(image); org.eclipse.swt.widgets.OS.SendMessage(hwndCB, OS.TB_SETBUTTONINFO, id, info); } return; } if ((OS.WIN32_VERSION) < (org.eclipse.swt.widgets.OS.VERSION(4, 10))) return; org.eclipse.swt.widgets.MENUITEMINFO info = new org.eclipse.swt.widgets.MENUITEMINFO(); info.cbSize = MENUITEMINFO.sizeof; info.fMask = OS.MIIM_BITMAP; if ((parent.foreground) != (-1)) { info.hbmpItem = OS.HBMMENU_CALLBACK; } else { if ((!(OS.IsWinCE)) && ((OS.WIN32_VERSION) >= (org.eclipse.swt.widgets.OS.VERSION(6, 0)))) { if ((hBitmap) != 0) org.eclipse.swt.widgets.OS.DeleteObject(hBitmap); info.hbmpItem = hBitmap = (image != null) ? org.eclipse.swt.widgets.Display.create32bitDIB(image) : 0; } else { info.hbmpItem = (image != null) ? OS.HBMMENU_CALLBACK : 0; } } int hMenu = parent.handle; org.eclipse.swt.widgets.OS.SetMenuItemInfo(hMenu, id, false, info); parent.redraw(); }
void createHandle() { state |= THEME_BACKGROUND; if (((style) & (SWT.SEPARATOR)) != 0) { handle = org.eclipse.swt.widgets.OS.gcnew_UserControl(); if ((handle) == 0) error(SWT.ERROR_NO_HANDLES); int separator = org.eclipse.swt.widgets.OS.gcnew_Label(); if (separator == 0) error(SWT.ERROR_NO_HANDLES); org.eclipse.swt.widgets.OS.ContentControl_Content(handle, separator); if (((style) & (SWT.VERTICAL)) != 0) { org.eclipse.swt.widgets.OS.FrameworkElement_Width(separator, org.eclipse.swt.widgets.OS.SystemParameters_ThinVerticalBorderWidth()); org.eclipse.swt.widgets.OS.Control_HorizontalContentAlignment(handle, OS.HorizontalAlignment_Center); org.eclipse.swt.widgets.OS.Control_VerticalContentAlignment(handle, OS.VerticalAlignment_Stretch); } else { org.eclipse.swt.widgets.OS.FrameworkElement_Height(separator, org.eclipse.swt.widgets.OS.SystemParameters_ThinHorizontalBorderHeight()); org.eclipse.swt.widgets.OS.Control_HorizontalContentAlignment(handle, OS.HorizontalAlignment_Stretch); org.eclipse.swt.widgets.OS.Control_VerticalContentAlignment(handle, OS.VerticalAlignment_Center); } int brush = org.eclipse.swt.widgets.OS.SystemColors_ActiveBorderBrush(); org.eclipse.swt.widgets.OS.Control_Background(separator, brush); org.eclipse.swt.widgets.OS.GCHandle_Free(brush); org.eclipse.swt.widgets.OS.GCHandle_Free(separator); } else { handle = org.eclipse.swt.widgets.OS.gcnew_Label(); if ((handle) == 0) error(SWT.ERROR_NO_HANDLES); int value = OS.HorizontalAlignment_Left; if (((style) & (SWT.CENTER)) != 0) value = OS.HorizontalAlignment_Center; if (((style) & (SWT.RIGHT)) != 0) value = OS.HorizontalAlignment_Right; org.eclipse.swt.widgets.OS.Control_HorizontalContentAlignment(handle, value); int margin = org.eclipse.swt.widgets.OS.gcnew_Thickness(0, 0, 0, 0); org.eclipse.swt.widgets.OS.Control_Padding(handle, margin); org.eclipse.swt.widgets.OS.GCHandle_Free(margin); } }
public void setWidth(int width) { checkLayout(); if ((width < (-1)) || (width == 0)) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_INVALID_ARGUMENT); if (width == (getWidth())) return; freeRuns(); setLayoutControl(OS.kATSULineWidthTag, org.eclipse.swt.graphics.OS.Long2Fix(java.lang.Math.max(0, width)), 4); }
void showWidget() { super.showWidget(); if ((socketHandle) != 0) { org.eclipse.swt.widgets.OS.gtk_widget_show(socketHandle); embeddedHandle = org.eclipse.swt.widgets.OS.gtk_socket_get_id(socketHandle); } }
public static byte[] wcsToMbcs(java.lang.String codePage, char[] buffer, boolean terminate) { if (buffer == null) { return terminate ? org.eclipse.swt.internal.Converter.NULL_BYTE_ARRAY : org.eclipse.swt.internal.Converter.EMPTY_BYTE_ARRAY; } int length = buffer.length; if (length == 0) { return terminate ? org.eclipse.swt.internal.Converter.NULL_BYTE_ARRAY : org.eclipse.swt.internal.Converter.EMPTY_BYTE_ARRAY; } byte[] mbcs = new byte[terminate ? length + 1 : length]; for (int i = 0; i < length; i++) { if (((buffer[i]) & 65535) <= 127) { mbcs[i] = ((byte) (buffer[i])); } else { synchronized(org.eclipse.swt.internal.Converter.LOCK) { java.lang.String cp = (codePage != null) ? codePage : org.eclipse.swt.internal.Converter.CodePage; if (((org.eclipse.swt.internal.Converter.LastWCToMB) != 0) && (!(cp.equals(org.eclipse.swt.internal.Converter.LastWCToMBCodePage)))) { org.eclipse.swt.internal.OS.iconv_close(org.eclipse.swt.internal.Converter.LastWCToMB); org.eclipse.swt.internal.Converter.LastWCToMB = 0; } if ((org.eclipse.swt.internal.Converter.LastWCToMB) == 0) { org.eclipse.swt.internal.Converter.LastWCToMBCodePage = cp; org.eclipse.swt.internal.Converter.LastWCToMB = org.eclipse.swt.internal.OS.iconv_open(org.eclipse.swt.internal.Converter.getAsciiBytes(cp), org.eclipse.swt.internal.Converter.Unicode); if ((org.eclipse.swt.internal.Converter.LastWCToMB) == (-1)) org.eclipse.swt.internal.Converter.LastWCToMB = 0; } int cd = org.eclipse.swt.internal.Converter.LastWCToMB; if (cd == 0) return terminate ? org.eclipse.swt.internal.Converter.NULL_BYTE_ARRAY : org.eclipse.swt.internal.Converter.EMPTY_BYTE_ARRAY; int inBytes = length * 2; int outBytes = length * 4; int ptr1; int ptr2; if (length <= (org.eclipse.swt.internal.Converter.BufferSize)) { ptr1 = org.eclipse.swt.internal.Converter.BufferTimes2; ptr2 = org.eclipse.swt.internal.Converter.BufferTimes4; } else { ptr1 = org.eclipse.swt.internal.OS.XtMalloc(inBytes); ptr2 = org.eclipse.swt.internal.OS.XtMalloc(outBytes); } int[] inBuf = new int[]{ ptr1 }; int[] inBytesLeft = new int[]{ inBytes }; int[] outBuf = new int[]{ ptr2 }; int[] outBytesLeft = new int[]{ outBytes }; org.eclipse.swt.internal.OS.memmove(ptr1, buffer, inBytes); while ((inBytesLeft[0]) > 0) { org.eclipse.swt.internal.OS.iconv(cd, inBuf, inBytesLeft, outBuf, outBytesLeft); if ((inBytesLeft[0]) != 0) { inBuf[0] += 2; inBytesLeft[0] -= 2; } } outBytes = (outBuf[0]) - ptr2; mbcs = new byte[terminate ? outBytes + 1 : outBytes]; org.eclipse.swt.internal.OS.memmove(mbcs, ptr2, outBytes); if (ptr1 != (org.eclipse.swt.internal.Converter.BufferTimes2)) org.eclipse.swt.internal.OS.XtFree(ptr1); if (ptr2 != (org.eclipse.swt.internal.Converter.BufferTimes4)) org.eclipse.swt.internal.OS.XtFree(ptr2); } return mbcs; } } return mbcs; }
int gtk_focus_out_event(int widget, int event) { int result = super.gtk_focus_out_event(widget, event); if ((handle) == 0) return 0; if ((((style) & (SWT.PUSH)) != 0) && (!(org.eclipse.swt.widgets.OS.GTK_WIDGET_HAS_DEFAULT(handle)))) { org.eclipse.swt.widgets.Decorations menuShell = menuShell(); if ((menuShell.defaultButton) == (this)) { menuShell.defaultButton = null; } } return result; }
public void widgetSelected(org.eclipse.swt.examples.controlexample.SelectionEvent event) { if ((event.detail) == (SWT.ARROW)) { if ((menu) != null) { menu.dispose(); menu = null; return; } org.eclipse.swt.examples.controlexample.CoolItem coolItem = ((org.eclipse.swt.examples.controlexample.CoolItem) (event.widget)); org.eclipse.swt.examples.controlexample.Rectangle itemBounds = coolItem.getBounds(); org.eclipse.swt.examples.controlexample.Point pt = coolBar.toDisplay(new org.eclipse.swt.examples.controlexample.Point(itemBounds.x, itemBounds.y)); itemBounds.x = pt.x; itemBounds.y = pt.y; org.eclipse.swt.examples.controlexample.ToolBar toolBar = ((org.eclipse.swt.examples.controlexample.ToolBar) (coolItem.getControl())); org.eclipse.swt.examples.controlexample.ToolItem[] tools = toolBar.getItems(); int toolCount = tools.length; int i = 0; while (i < toolCount) { org.eclipse.swt.examples.controlexample.Rectangle toolBounds = tools[i].getBounds(); pt = toolBar.toDisplay(new org.eclipse.swt.examples.controlexample.Point(toolBounds.x, toolBounds.y)); toolBounds.x = pt.x; toolBounds.y = pt.y; org.eclipse.swt.examples.controlexample.Rectangle intersection = itemBounds.intersection(toolBounds); if (!(intersection.equals(toolBounds))) break; i++; } menu = new org.eclipse.swt.examples.controlexample.Menu(coolBar); for (int j = i; j < toolCount; j++) { org.eclipse.swt.examples.controlexample.ToolItem tool = tools[j]; org.eclipse.swt.examples.controlexample.Image image = tool.getImage(); if (image == null) { new org.eclipse.swt.examples.controlexample.MenuItem(menu, SWT.SEPARATOR); } else { if (((tool.getStyle()) & (SWT.DROP_DOWN)) != 0) { org.eclipse.swt.examples.controlexample.MenuItem menuItem = new org.eclipse.swt.examples.controlexample.MenuItem(menu, SWT.CASCADE); menuItem.setImage(image); org.eclipse.swt.examples.controlexample.Menu m = new org.eclipse.swt.examples.controlexample.Menu(menu); menuItem.setMenu(m); for (int k = 0; k < 9; ++k) { java.lang.String text = org.eclipse.swt.examples.controlexample.ControlExample.getResourceString(("DropDownData_" + k)); if ((text.length()) != 0) { org.eclipse.swt.examples.controlexample.MenuItem mi = new org.eclipse.swt.examples.controlexample.MenuItem(m, SWT.NONE); mi.setText(text); } else { new org.eclipse.swt.examples.controlexample.MenuItem(m, SWT.SEPARATOR); } } } else { org.eclipse.swt.examples.controlexample.MenuItem menuItem = new org.eclipse.swt.examples.controlexample.MenuItem(menu, SWT.NONE); menuItem.setImage(image); } } } pt = coolBar.toDisplay(new org.eclipse.swt.examples.controlexample.Point(event.x, event.y)); menu.setLocation(pt.x, pt.y); menu.setVisible(true); org.eclipse.swt.examples.controlexample.Display display = coolBar.getDisplay(); while (((menu) != null) && (menu.isVisible())) { if (!(display.readAndDispatch())) display.sleep(); } if ((menu) != null) { menu.dispose(); menu = null; } } }
public void create(org.eclipse.swt.browser.Composite parent, int style) { delegate = new org.eclipse.swt.browser.MozillaDelegate(browser); org.eclipse.swt.browser.Display display = parent.getDisplay(); int[] result = new int[1]; if (!(org.eclipse.swt.browser.Mozilla.Initialized)) { boolean initLoaded = false; org.eclipse.swt.browser.Mozilla.IsXULRunner = false; java.lang.String mozillaPath = java.lang.System.getProperty(org.eclipse.swt.browser.Mozilla.XULRUNNER_PATH); if (mozillaPath == null) { try { org.eclipse.swt.browser.Library.loadLibrary("swt-xpcominit"); initLoaded = true; } catch (java.lang.UnsatisfiedLinkError e) { try { org.eclipse.swt.browser.Library.loadLibrary("swt-xpcominit-gcc3"); initLoaded = true; } catch (java.lang.UnsatisfiedLinkError ex) { } } } else { mozillaPath += (org.eclipse.swt.browser.Mozilla.SEPARATOR_OS) + (delegate.getLibraryName()); java.lang.String xulrunnerInitialized = java.lang.System.getProperty(org.eclipse.swt.browser.Mozilla.XULRUNNER_INITIALIZED); if ("true".equals(xulrunnerInitialized)) { org.eclipse.swt.browser.Mozilla.Initialized = true; } org.eclipse.swt.browser.Mozilla.IsXULRunner = true; } if (initLoaded) { org.eclipse.swt.browser.GREVersionRange range = new org.eclipse.swt.browser.GREVersionRange(); byte[] bytes = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.GRERANGE_LOWER, true); int lower = org.eclipse.swt.browser.C.malloc(bytes.length); org.eclipse.swt.browser.C.memmove(lower, bytes, bytes.length); range.lower = lower; range.lowerInclusive = org.eclipse.swt.browser.Mozilla.LowerRangeInclusive; bytes = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.GRERANGE_UPPER, true); int upper = org.eclipse.swt.browser.C.malloc(bytes.length); org.eclipse.swt.browser.C.memmove(upper, bytes, bytes.length); range.upper = upper; range.upperInclusive = org.eclipse.swt.browser.Mozilla.UpperRangeInclusive; int length = XPCOMInit.PATH_MAX; int greBuffer = org.eclipse.swt.browser.C.malloc(length); int propertiesPtr = org.eclipse.swt.browser.C.malloc((2 * (C.PTR_SIZEOF))); int rc = org.eclipse.swt.browser.XPCOMInit.GRE_GetGREPathWithProperties(range, 1, propertiesPtr, 0, greBuffer, length); if (rc != (XPCOM.NS_OK)) { org.eclipse.swt.browser.C.free(lower); bytes = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.GRERANGE_LOWER_FALLBACK, true); lower = org.eclipse.swt.browser.C.malloc(bytes.length); org.eclipse.swt.browser.C.memmove(lower, bytes, bytes.length); range.lower = lower; rc = org.eclipse.swt.browser.XPCOMInit.GRE_GetGREPathWithProperties(range, 1, propertiesPtr, 0, greBuffer, length); } org.eclipse.swt.browser.C.free(lower); org.eclipse.swt.browser.C.free(upper); org.eclipse.swt.browser.C.free(propertiesPtr); if (rc == (XPCOM.NS_OK)) { length = org.eclipse.swt.browser.C.strlen(greBuffer); bytes = new byte[length]; org.eclipse.swt.browser.C.memmove(bytes, greBuffer, length); mozillaPath = new java.lang.String(org.eclipse.swt.browser.MozillaDelegate.mbcsToWcs(null, bytes)); org.eclipse.swt.browser.Mozilla.IsXULRunner = (mozillaPath.length()) > 0; if (org.eclipse.swt.browser.Mozilla.IsXULRunner) { byte[] path = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, mozillaPath, true); rc = org.eclipse.swt.browser.XPCOMInit.XPCOMGlueStartup(path); if (rc != (XPCOM.NS_OK)) { org.eclipse.swt.browser.Mozilla.IsXULRunner = false; mozillaPath = mozillaPath.substring(0, mozillaPath.lastIndexOf(org.eclipse.swt.browser.Mozilla.SEPARATOR_OS)); if (Device.DEBUG) java.lang.System.out.println(("cannot use detected XULRunner: " + mozillaPath)); } else { org.eclipse.swt.browser.XPCOMInit.XPCOMGlueShutdown(); } } } org.eclipse.swt.browser.C.free(greBuffer); } if (org.eclipse.swt.browser.Mozilla.IsXULRunner) { if (Device.DEBUG) java.lang.System.out.println(("XULRunner path: " + mozillaPath)); try { org.eclipse.swt.browser.Library.loadLibrary("swt-xulrunner"); } catch (java.lang.UnsatisfiedLinkError e) { try { org.eclipse.swt.browser.Library.loadLibrary("swt-xulrunner-gcc3"); } catch (java.lang.UnsatisfiedLinkError ex) { browser.dispose(); org.eclipse.swt.browser.SWT.error(SWT.ERROR_NO_HANDLES, e); } } byte[] path = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, mozillaPath, true); int rc = org.eclipse.swt.browser.XPCOM.XPCOMGlueStartup(path); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } mozillaPath = mozillaPath.substring(0, mozillaPath.lastIndexOf(org.eclipse.swt.browser.Mozilla.SEPARATOR_OS)); } else { if ((style & (SWT.MOZILLA)) != 0) { browser.dispose(); java.lang.String errorString = ((mozillaPath != null) && ((mozillaPath.length()) > 0)) ? (" [Failed to use detected XULRunner: " + mozillaPath) + "]" : " [Could not detect registered XULRunner to use]"; org.eclipse.swt.browser.SWT.error(SWT.ERROR_NO_HANDLES, null, errorString); } int ptr = org.eclipse.swt.browser.C.getenv(org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.MOZILLA_FIVE_HOME, true)); if (ptr != 0) { int length = org.eclipse.swt.browser.C.strlen(ptr); byte[] buffer = new byte[length]; org.eclipse.swt.browser.C.memmove(buffer, ptr, length); mozillaPath = new java.lang.String(org.eclipse.swt.browser.MozillaDelegate.mbcsToWcs(null, buffer)); } else { browser.dispose(); org.eclipse.swt.browser.SWT.error(SWT.ERROR_NO_HANDLES, null, " [Unknown Mozilla path (MOZILLA_FIVE_HOME not set)]"); } if (Device.DEBUG) java.lang.System.out.println(("Mozilla path: " + mozillaPath)); java.io.File file = new java.io.File(mozillaPath, "components/libwidget_gtk.so"); if (file.exists()) { browser.dispose(); org.eclipse.swt.browser.SWT.error(SWT.ERROR_NO_HANDLES, null, " [Mozilla GTK2 required (GTK1.2 detected)]"); } try { org.eclipse.swt.browser.Library.loadLibrary("swt-mozilla"); } catch (java.lang.UnsatisfiedLinkError e) { try { org.eclipse.swt.browser.Library.loadLibrary("swt-mozilla-gcc3"); } catch (java.lang.UnsatisfiedLinkError ex) { browser.dispose(); org.eclipse.swt.browser.SWT.error(SWT.ERROR_NO_HANDLES, e); } } } if (!(org.eclipse.swt.browser.Mozilla.Initialized)) { int[] retVal = new int[1]; org.eclipse.swt.browser.nsEmbedString pathString = new org.eclipse.swt.browser.nsEmbedString(mozillaPath); int rc = org.eclipse.swt.browser.XPCOM.NS_NewLocalFile(pathString.getAddress(), true, retVal); pathString.dispose(); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((retVal[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_ERROR_NULL_POINTER); } org.eclipse.swt.browser.Mozilla.LocationProvider = new org.eclipse.swt.browser.AppFileLocProvider(mozillaPath); org.eclipse.swt.browser.Mozilla.LocationProvider.AddRef(); org.eclipse.swt.browser.nsIFile localFile = new org.eclipse.swt.browser.nsILocalFile(retVal[0]); rc = org.eclipse.swt.browser.XPCOM.NS_InitXPCOM2(0, localFile.getAddress(), org.eclipse.swt.browser.Mozilla.LocationProvider.getAddress()); localFile.Release(); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.SWT.error(SWT.ERROR_NO_HANDLES, null, ((((" [MOZILLA_FIVE_HOME may not point at an embeddable GRE] [NS_InitEmbedding " + mozillaPath) + " error ") + rc) + "]")); } java.lang.System.setProperty(org.eclipse.swt.browser.Mozilla.XULRUNNER_PATH, mozillaPath); java.lang.System.setProperty(org.eclipse.swt.browser.Mozilla.XULRUNNER_INITIALIZED, "true"); } if (org.eclipse.swt.browser.Mozilla.IsXULRunner) { try { java.lang.Class clazz = java.lang.Class.forName("org.mozilla.xpcom.Mozilla"); java.lang.reflect.Method method = clazz.getMethod("getInstance", new java.lang.Class[0]); java.lang.Object mozilla = method.invoke(null, new java.lang.Object[0]); method = clazz.getMethod("getComponentManager", new java.lang.Class[0]); try { method.invoke(mozilla, new java.lang.Object[0]); } catch (java.lang.reflect.InvocationTargetException e) { method = clazz.getMethod("initialize", new java.lang.Class[]{ java.lang.Class.forName("java.io.File") }); method.invoke(mozilla, new java.lang.Object[]{ new java.io.File(mozillaPath) }); } } catch (java.lang.ClassNotFoundException e) { } catch (java.lang.NoSuchMethodException e) { } catch (java.lang.IllegalArgumentException e) { } catch (java.lang.IllegalAccessException e) { } catch (java.lang.reflect.InvocationTargetException e) { } } int rc = org.eclipse.swt.browser.XPCOM.NS_GetComponentManager(result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } org.eclipse.swt.browser.nsIComponentManager componentManager = new org.eclipse.swt.browser.nsIComponentManager(result[0]); result[0] = 0; rc = componentManager.CreateInstance(XPCOM.NS_APPSHELL_CID, 0, nsIAppShell.NS_IAPPSHELL_IID, result); if (rc != (XPCOM.NS_ERROR_NO_INTERFACE)) { if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } org.eclipse.swt.browser.Mozilla.AppShell = new org.eclipse.swt.browser.nsIAppShell(result[0]); rc = org.eclipse.swt.browser.Mozilla.AppShell.Create(0, null); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } rc = org.eclipse.swt.browser.Mozilla.AppShell.Spinup(); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } } result[0] = 0; org.eclipse.swt.browser.Mozilla.WindowCreator = new org.eclipse.swt.browser.WindowCreator2(); org.eclipse.swt.browser.Mozilla.WindowCreator.AddRef(); rc = org.eclipse.swt.browser.XPCOM.NS_GetServiceManager(result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } org.eclipse.swt.browser.nsIServiceManager serviceManager = new org.eclipse.swt.browser.nsIServiceManager(result[0]); result[0] = 0; byte[] aContractID = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_WINDOWWATCHER_CONTRACTID, true); rc = serviceManager.GetServiceByContractID(aContractID, nsIWindowWatcher.NS_IWINDOWWATCHER_IID, result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } org.eclipse.swt.browser.nsIWindowWatcher windowWatcher = new org.eclipse.swt.browser.nsIWindowWatcher(result[0]); result[0] = 0; rc = windowWatcher.SetWindowCreator(org.eclipse.swt.browser.Mozilla.WindowCreator.getAddress()); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } windowWatcher.Release(); if ((org.eclipse.swt.browser.Mozilla.LocationProvider) != null) { byte[] buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_DIRECTORYSERVICE_CONTRACTID, true); rc = serviceManager.GetServiceByContractID(buffer, nsIDirectoryService.NS_IDIRECTORYSERVICE_IID, result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } org.eclipse.swt.browser.nsIDirectoryService directoryService = new org.eclipse.swt.browser.nsIDirectoryService(result[0]); result[0] = 0; rc = directoryService.QueryInterface(nsIProperties.NS_IPROPERTIES_IID, result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } directoryService.Release(); org.eclipse.swt.browser.nsIProperties properties = new org.eclipse.swt.browser.nsIProperties(result[0]); result[0] = 0; buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_APP_APPLICATION_REGISTRY_DIR, true); rc = properties.Get(buffer, nsIFile.NS_IFILE_IID, result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } properties.Release(); org.eclipse.swt.browser.nsIFile profileDir = new org.eclipse.swt.browser.nsIFile(result[0]); result[0] = 0; int path = org.eclipse.swt.browser.XPCOM.nsEmbedCString_new(); rc = profileDir.GetNativePath(path); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } int length = org.eclipse.swt.browser.XPCOM.nsEmbedCString_Length(path); int ptr = org.eclipse.swt.browser.XPCOM.nsEmbedCString_get(path); buffer = new byte[length]; org.eclipse.swt.browser.XPCOM.memmove(buffer, ptr, length); java.lang.String profilePath = (new java.lang.String(org.eclipse.swt.browser.MozillaDelegate.mbcsToWcs(null, buffer))) + (org.eclipse.swt.browser.Mozilla.PROFILE_DIR); org.eclipse.swt.browser.Mozilla.LocationProvider.setProfilePath(profilePath); org.eclipse.swt.browser.XPCOM.nsEmbedCString_delete(path); profileDir.Release(); buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_OBSERVER_CONTRACTID, true); rc = serviceManager.GetServiceByContractID(buffer, nsIObserverService.NS_IOBSERVERSERVICE_IID, result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } org.eclipse.swt.browser.nsIObserverService observerService = new org.eclipse.swt.browser.nsIObserverService(result[0]); result[0] = 0; buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.PROFILE_DO_CHANGE, true); length = org.eclipse.swt.browser.Mozilla.STARTUP.length(); char[] chars = new char[length + 1]; org.eclipse.swt.browser.Mozilla.STARTUP.getChars(0, length, chars, 0); rc = observerService.NotifyObservers(0, buffer, chars); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.PROFILE_AFTER_CHANGE, true); rc = observerService.NotifyObservers(0, buffer, chars); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } observerService.Release(); display.addListener(SWT.Dispose, new org.eclipse.swt.browser.Listener() { public void handleEvent(org.eclipse.swt.browser.Event event) { int[] result = new int[1]; int rc = org.eclipse.swt.browser.XPCOM.NS_GetServiceManager(result); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); if ((result[0]) == 0) org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); org.eclipse.swt.browser.nsIServiceManager serviceManager = new org.eclipse.swt.browser.nsIServiceManager(result[0]); result[0] = 0; byte[] buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_OBSERVER_CONTRACTID, true); rc = serviceManager.GetServiceByContractID(buffer, nsIObserverService.NS_IOBSERVERSERVICE_IID, result); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); if ((result[0]) == 0) org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); serviceManager.Release(); org.eclipse.swt.browser.nsIObserverService observerService = new org.eclipse.swt.browser.nsIObserverService(result[0]); result[0] = 0; buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.PROFILE_BEFORE_CHANGE, true); int length = org.eclipse.swt.browser.Mozilla.SHUTDOWN_PERSIST.length(); char[] chars = new char[length + 1]; org.eclipse.swt.browser.Mozilla.SHUTDOWN_PERSIST.getChars(0, length, chars, 0); rc = observerService.NotifyObservers(0, buffer, chars); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); observerService.Release(); } }); } aContractID = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_PREFSERVICE_CONTRACTID, true); rc = serviceManager.GetServiceByContractID(aContractID, nsIPrefService.NS_IPREFSERVICE_IID, result); serviceManager.Release(); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } org.eclipse.swt.browser.nsIPrefService prefService = new org.eclipse.swt.browser.nsIPrefService(result[0]); result[0] = 0; byte[] buffer = new byte[1]; rc = prefService.GetBranch(buffer, result); prefService.Release(); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } org.eclipse.swt.browser.nsIPrefBranch prefBranch = new org.eclipse.swt.browser.nsIPrefBranch(result[0]); result[0] = 0; java.lang.String prefLocales = null; org.eclipse.swt.browser.nsIPrefLocalizedString localizedString = null; buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.PREFERENCE_LANGUAGES, true); rc = prefBranch.GetComplexValue(buffer, nsIPrefLocalizedString.NS_IPREFLOCALIZEDSTRING_IID, result); if (rc != (XPCOM.NS_OK)) { prefLocales = "en-us,en" + (org.eclipse.swt.browser.Mozilla.TOKENIZER_LOCALE); } else { if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } localizedString = new org.eclipse.swt.browser.nsIPrefLocalizedString(result[0]); result[0] = 0; rc = localizedString.ToString(result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } int length = org.eclipse.swt.browser.XPCOM.strlen_PRUnichar(result[0]); char[] dest = new char[length]; org.eclipse.swt.browser.XPCOM.memmove(dest, result[0], (length * 2)); prefLocales = (new java.lang.String(dest)) + (org.eclipse.swt.browser.Mozilla.TOKENIZER_LOCALE); } result[0] = 0; java.util.Locale locale = java.util.Locale.getDefault(); java.lang.String language = locale.getLanguage(); java.lang.String country = locale.getCountry(); java.lang.StringBuffer stringBuffer = new java.lang.StringBuffer(language); stringBuffer.append(org.eclipse.swt.browser.Mozilla.SEPARATOR_LOCALE); stringBuffer.append(country.toLowerCase()); stringBuffer.append(org.eclipse.swt.browser.Mozilla.TOKENIZER_LOCALE); stringBuffer.append(language); stringBuffer.append(org.eclipse.swt.browser.Mozilla.TOKENIZER_LOCALE); java.lang.String newLocales = stringBuffer.toString(); java.util.StringTokenizer tokenzier = new java.util.StringTokenizer(prefLocales, org.eclipse.swt.browser.Mozilla.TOKENIZER_LOCALE); while (tokenzier.hasMoreTokens()) { java.lang.String token = ((tokenzier.nextToken()) + (org.eclipse.swt.browser.Mozilla.TOKENIZER_LOCALE)).trim(); if ((newLocales.indexOf(token)) == (-1)) { stringBuffer.append(token); } } newLocales = stringBuffer.toString(); if (!(newLocales.equals(prefLocales))) { newLocales = newLocales.substring(0, ((newLocales.length()) - (org.eclipse.swt.browser.Mozilla.TOKENIZER_LOCALE.length()))); int length = newLocales.length(); char[] charBuffer = new char[length + 1]; newLocales.getChars(0, length, charBuffer, 0); if (localizedString == null) { byte[] contractID = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_PREFLOCALIZEDSTRING_CONTRACTID, true); rc = componentManager.CreateInstanceByContractID(contractID, 0, nsIPrefLocalizedString.NS_IPREFLOCALIZEDSTRING_IID, result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } localizedString = new org.eclipse.swt.browser.nsIPrefLocalizedString(result[0]); result[0] = 0; } localizedString.SetDataWithLength(length, charBuffer); rc = prefBranch.SetComplexValue(buffer, nsIPrefLocalizedString.NS_IPREFLOCALIZEDSTRING_IID, localizedString.getAddress()); } if (localizedString != null) { localizedString.Release(); localizedString = null; } java.lang.String prefCharset = null; buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.PREFERENCE_CHARSET, true); rc = prefBranch.GetComplexValue(buffer, nsIPrefLocalizedString.NS_IPREFLOCALIZEDSTRING_IID, result); if (rc != (XPCOM.NS_OK)) { prefCharset = "ISO-8859-1"; } else { if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } localizedString = new org.eclipse.swt.browser.nsIPrefLocalizedString(result[0]); result[0] = 0; rc = localizedString.ToString(result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } int length = org.eclipse.swt.browser.XPCOM.strlen_PRUnichar(result[0]); char[] dest = new char[length]; org.eclipse.swt.browser.XPCOM.memmove(dest, result[0], (length * 2)); prefCharset = new java.lang.String(dest); } result[0] = 0; java.lang.String newCharset = java.lang.System.getProperty("file.encoding"); if (!(newCharset.equals(prefCharset))) { int length = newCharset.length(); char[] charBuffer = new char[length + 1]; newCharset.getChars(0, length, charBuffer, 0); if (localizedString == null) { byte[] contractID = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_PREFLOCALIZEDSTRING_CONTRACTID, true); rc = componentManager.CreateInstanceByContractID(contractID, 0, nsIPrefLocalizedString.NS_IPREFLOCALIZEDSTRING_IID, result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } localizedString = new org.eclipse.swt.browser.nsIPrefLocalizedString(result[0]); result[0] = 0; } localizedString.SetDataWithLength(length, charBuffer); rc = prefBranch.SetComplexValue(buffer, nsIPrefLocalizedString.NS_IPREFLOCALIZEDSTRING_IID, localizedString.getAddress()); } if (localizedString != null) localizedString.Release(); buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.PREFERENCE_DISABLEOPENDURINGLOAD, true); rc = prefBranch.SetBoolPref(buffer, 0); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.PREFERENCE_DISABLEWINDOWSTATUSCHANGE, true); rc = prefBranch.SetBoolPref(buffer, 0); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } prefBranch.Release(); org.eclipse.swt.browser.PromptServiceFactory factory = new org.eclipse.swt.browser.PromptServiceFactory(); factory.AddRef(); rc = componentManager.QueryInterface(nsIComponentRegistrar.NS_ICOMPONENTREGISTRAR_IID, result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } org.eclipse.swt.browser.nsIComponentRegistrar componentRegistrar = new org.eclipse.swt.browser.nsIComponentRegistrar(result[0]); result[0] = 0; aContractID = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_PROMPTSERVICE_CONTRACTID, true); byte[] aClassName = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, "Prompt Service", true); rc = componentRegistrar.RegisterFactory(XPCOM.NS_PROMPTSERVICE_CID, aClassName, aContractID, factory.getAddress()); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } factory.Release(); org.eclipse.swt.browser.HelperAppLauncherDialogFactory dialogFactory = new org.eclipse.swt.browser.HelperAppLauncherDialogFactory(); dialogFactory.AddRef(); aContractID = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_HELPERAPPLAUNCHERDIALOG_CONTRACTID, true); aClassName = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, "Helper App Launcher Dialog", true); rc = componentRegistrar.RegisterFactory(XPCOM.NS_HELPERAPPLAUNCHERDIALOG_CID, aClassName, aContractID, dialogFactory.getAddress()); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } dialogFactory.Release(); org.eclipse.swt.browser.DownloadFactory downloadFactory = new org.eclipse.swt.browser.DownloadFactory(); downloadFactory.AddRef(); aContractID = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_DOWNLOAD_CONTRACTID, true); aClassName = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, "Download", true); rc = componentRegistrar.RegisterFactory(XPCOM.NS_DOWNLOAD_CID, aClassName, aContractID, downloadFactory.getAddress()); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } downloadFactory.Release(); org.eclipse.swt.browser.DownloadFactory_1_8 downloadFactory_1_8 = new org.eclipse.swt.browser.DownloadFactory_1_8(); downloadFactory_1_8.AddRef(); aContractID = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_TRANSFER_CONTRACTID, true); aClassName = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, "Transfer", true); rc = componentRegistrar.RegisterFactory(XPCOM.NS_DOWNLOAD_CID, aClassName, aContractID, downloadFactory_1_8.getAddress()); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } downloadFactory_1_8.Release(); org.eclipse.swt.browser.FilePickerFactory pickerFactory = (org.eclipse.swt.browser.Mozilla.IsXULRunner) ? new org.eclipse.swt.browser.FilePickerFactory_1_8() : new org.eclipse.swt.browser.FilePickerFactory(); pickerFactory.AddRef(); aContractID = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_FILEPICKER_CONTRACTID, true); aClassName = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, "FilePicker", true); rc = componentRegistrar.RegisterFactory(XPCOM.NS_FILEPICKER_CID, aClassName, aContractID, pickerFactory.getAddress()); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } pickerFactory.Release(); componentRegistrar.Release(); componentManager.Release(); org.eclipse.swt.browser.Mozilla.Is_1_8 = org.eclipse.swt.browser.Mozilla.IsXULRunner; org.eclipse.swt.browser.Mozilla.Initialized = true; } (org.eclipse.swt.browser.Mozilla.BrowserCount)++; int rc = org.eclipse.swt.browser.XPCOM.NS_GetComponentManager(result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } org.eclipse.swt.browser.nsIComponentManager componentManager = new org.eclipse.swt.browser.nsIComponentManager(result[0]); result[0] = 0; org.eclipse.swt.browser.nsID NS_IWEBBROWSER_CID = new org.eclipse.swt.browser.nsID("F1EAC761-87E9-11d3-AF80-00A024FFC08C"); rc = componentManager.CreateInstance(NS_IWEBBROWSER_CID, 0, nsIWebBrowser.NS_IWEBBROWSER_IID, result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } componentManager.Release(); webBrowser = new org.eclipse.swt.browser.nsIWebBrowser(result[0]); result[0] = 0; createCOMInterfaces(); AddRef(); if (!(org.eclipse.swt.browser.Mozilla.Is_1_8)) { rc = webBrowser.QueryInterface(nsIWebBrowserStream.NS_IWEBBROWSERSTREAM_IID, result); if ((rc == (XPCOM.NS_OK)) && ((result[0]) != 0)) { org.eclipse.swt.browser.Mozilla.Is_1_8 = true; new org.eclipse.swt.browser.nsISupports(result[0]).Release(); result[0] = 0; } } rc = webBrowser.SetContainerWindow(webBrowserChrome.getAddress()); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } rc = webBrowser.QueryInterface(nsIBaseWindow.NS_IBASEWINDOW_IID, result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_ERROR_NO_INTERFACE); } org.eclipse.swt.browser.nsIBaseWindow baseWindow = new org.eclipse.swt.browser.nsIBaseWindow(result[0]); result[0] = 0; org.eclipse.swt.browser.Rectangle rect = browser.getClientArea(); if (rect.isEmpty()) { rect.width = 1; rect.height = 1; } embedHandle = delegate.getHandle(); rc = baseWindow.InitWindow(embedHandle, 0, 0, 0, rect.width, rect.height); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_ERROR_FAILURE); } rc = baseWindow.Create(); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_ERROR_FAILURE); } rc = baseWindow.SetVisibility(true); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_ERROR_FAILURE); } baseWindow.Release(); rc = webBrowser.AddWebBrowserListener(weakReference.getAddress(), nsIWebProgressListener.NS_IWEBPROGRESSLISTENER_IID); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } rc = webBrowser.SetParentURIContentListener(uriContentListener.getAddress()); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } listener = new org.eclipse.swt.browser.Listener() { public void handleEvent(org.eclipse.swt.browser.Event event) { switch (event.type) { case SWT.Dispose : { if (ignoreDispose) { ignoreDispose = false; break; } ignoreDispose = true; browser.notifyListeners(event.type, event); event.type = SWT.NONE; onDispose(event.display); break; } case SWT.Resize : onResize(); break; case SWT.FocusIn : Activate(); break; case SWT.Activate : Activate(); break; case SWT.Deactivate : { org.eclipse.swt.browser.Display display = event.display; if ((org.eclipse.swt.browser.Mozilla.this.browser) == (display.getFocusControl())) Deactivate(); break; } case SWT.Show : { org.eclipse.swt.browser.Display display = event.display; display.asyncExec(new java.lang.Runnable() { public void run() { if (browser.isDisposed()) return; onResize(); } }); break; } } } }; int[] folderEvents = new int[]{ SWT.Dispose, SWT.Resize, SWT.FocusIn, SWT.Activate, SWT.Deactivate, SWT.Show, SWT.KeyDown }; for (int i = 0; i < (folderEvents.length); i++) { browser.addListener(folderEvents[i], listener); } }
org.eclipse.swt.widgets.LRESULT WM_SETFOCUS(int wParam, int lParam) { org.eclipse.swt.widgets.LRESULT result = super.WM_SETFOCUS(wParam, lParam); if (((caret) != null) && (caret.isFocusCaret())) caret.setFocus(); return result; }
java.lang.String verifyText(java.lang.String string, int start, int end) { if (((string.length()) == 0) && (start == end)) return null; org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); event.text = string; event.start = start; event.end = end; int eventPtr = org.eclipse.swt.widgets.OS.gtk_get_current_event(); if (eventPtr != 0) { org.eclipse.swt.widgets.GdkEventKey gdkEvent = new org.eclipse.swt.widgets.GdkEventKey(); org.eclipse.swt.widgets.OS.memmove(gdkEvent, eventPtr, GdkEventKey.sizeof); switch (gdkEvent.type) { case OS.GDK_KEY_PRESS : setKeyState(event, gdkEvent); break; } org.eclipse.swt.widgets.OS.gdk_event_free(eventPtr); } sendEvent(SWT.Verify, event); if ((!(event.doit)) || (isDisposed())) return null; return event.text; }
public boolean setUrl(java.lang.String url, java.lang.String postData, java.lang.String[] headers) { html = uncRedirect = null; if (((_getUrl().length()) == 0) && (!(org.eclipse.swt.browser.IE.ABOUT_BLANK.equalsIgnoreCase(url)))) { pendingText = null; pendingUrl = new java.lang.Object[]{ url, postData, headers }; performingInitialNavigate = true; navigate(org.eclipse.swt.browser.IE.ABOUT_BLANK, null, null, true); return true; } if (url.endsWith(".xml")) { int[] rgdispid = auto.getIDsOfNames(new java.lang.String[]{ "Stop" }); auto.invoke(rgdispid[0]); } return navigate(url, postData, headers, false); }
org.eclipse.swt.graphics.TextLayout.StyleItem[] merge(int items, int itemCount) { int count = 0; int start = 0; int end = segmentsText.length(); int itemIndex = 0; int styleIndex = 0; org.eclipse.swt.graphics.TextLayout.StyleItem[] runs = new org.eclipse.swt.graphics.TextLayout.StyleItem[itemCount + (styles.length)]; org.eclipse.swt.graphics.SCRIPT_ITEM scriptItem = new org.eclipse.swt.graphics.SCRIPT_ITEM(); boolean linkBefore = false; while (start < end) { org.eclipse.swt.graphics.TextLayout.StyleItem item = new org.eclipse.swt.graphics.TextLayout.StyleItem(); item.start = start; item.style = styles[styleIndex].style; runs[(count++)] = item; org.eclipse.swt.graphics.OS.MoveMemory(scriptItem, (items + (itemIndex * (SCRIPT_ITEM.sizeof))), SCRIPT_ITEM.sizeof); item.analysis = scriptItem.a; if (linkBefore) { item.analysis.fLinkBefore = true; linkBefore = false; } scriptItem.a = new org.eclipse.swt.graphics.SCRIPT_ANALYSIS(); org.eclipse.swt.graphics.OS.MoveMemory(scriptItem, (items + ((itemIndex + 1) * (SCRIPT_ITEM.sizeof))), SCRIPT_ITEM.sizeof); int itemLimit = scriptItem.iCharPos; int styleLimit = translateOffset(styles[(styleIndex + 1)].start); if (styleLimit <= itemLimit) { styleIndex++; start = styleLimit; if (((start < itemLimit) && (0 < start)) && (start < end)) { char pChar = segmentsText.charAt((start - 1)); char tChar = segmentsText.charAt(start); if ((org.eclipse.swt.graphics.Compatibility.isLetter(pChar)) && (org.eclipse.swt.graphics.Compatibility.isLetter(tChar))) { item.analysis.fLinkAfter = true; linkBefore = true; } } } if (itemLimit <= styleLimit) { itemIndex++; start = itemLimit; } item.length = start - (item.start); } org.eclipse.swt.graphics.TextLayout.StyleItem item = new org.eclipse.swt.graphics.TextLayout.StyleItem(); item.start = end; org.eclipse.swt.graphics.OS.MoveMemory(scriptItem, (items + (itemCount * (SCRIPT_ITEM.sizeof))), SCRIPT_ITEM.sizeof); item.analysis = scriptItem.a; runs[(count++)] = item; if ((runs.length) != count) { org.eclipse.swt.graphics.TextLayout.StyleItem[] result = new org.eclipse.swt.graphics.TextLayout.StyleItem[count]; java.lang.System.arraycopy(runs, 0, result, 0, count); return result; } return runs; }
org.eclipse.swt.widgets.LRESULT wmNotifyChild(org.eclipse.swt.widgets.NMHDR hdr, int wParam, int lParam) { switch (hdr.code) { case OS.TVN_GETDISPINFOA : case OS.TVN_GETDISPINFOW : { org.eclipse.swt.widgets.NMTVDISPINFO lptvdi = new org.eclipse.swt.widgets.NMTVDISPINFO(); org.eclipse.swt.widgets.OS.MoveMemory(lptvdi, lParam, NMTVDISPINFO.sizeof); if (((style) & (SWT.VIRTUAL)) != 0) { boolean checkVisible = true; if (!(ignoreShrink)) { if (((items) != null) && ((lptvdi.lParam) != (-1))) { if (((items[lptvdi.lParam]) != null) && (items[lptvdi.lParam].cached)) { checkVisible = false; } } } if (checkVisible) { if (((drawCount) != 0) || (!(org.eclipse.swt.widgets.OS.IsWindowVisible(handle)))) break; org.eclipse.swt.widgets.RECT itemRect = new org.eclipse.swt.widgets.RECT(); itemRect.left = lptvdi.hItem; if ((org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETITEMRECT, 0, itemRect)) == 0) { break; } org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); org.eclipse.swt.widgets.OS.GetClientRect(handle, rect); if (!(org.eclipse.swt.widgets.OS.IntersectRect(rect, rect, itemRect))) break; if (ignoreShrink) { org.eclipse.swt.widgets.OS.InvalidateRect(handle, rect, true); break; } } } if ((items) == null) break; int id = lptvdi.lParam; if (((style) & (SWT.VIRTUAL)) != 0) { if (id == (-1)) { org.eclipse.swt.widgets.TVITEM tvItem = new org.eclipse.swt.widgets.TVITEM(); tvItem.mask = (OS.TVIF_HANDLE) | (OS.TVIF_PARAM); tvItem.hItem = lptvdi.hItem; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETITEM, 0, tvItem); id = tvItem.lParam; } } org.eclipse.swt.widgets.TreeItem item = _getItem(lptvdi.hItem, id); if (item == null) break; if (item.isDisposed()) break; if (!(item.cached)) { if (((style) & (SWT.VIRTUAL)) != 0) { if (!(checkData(item, false))) break; } if (painted) item.cached = true; } int index = 0; if ((hwndHeader) != 0) { index = org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_ORDERTOINDEX, 0, 0); } if (((lptvdi.mask) & (OS.TVIF_TEXT)) != 0) { java.lang.String string = null; if (index == 0) { string = item.text; } else { java.lang.String[] strings = item.strings; if (strings != null) string = strings[index]; } if (string != null) { org.eclipse.swt.widgets.TCHAR buffer = new org.eclipse.swt.widgets.TCHAR(getCodePage(), string, false); int byteCount = (java.lang.Math.min(buffer.length(), ((lptvdi.cchTextMax) - 1))) * (TCHAR.sizeof); org.eclipse.swt.widgets.OS.MoveMemory(lptvdi.pszText, buffer, byteCount); org.eclipse.swt.widgets.OS.MoveMemory(((lptvdi.pszText) + byteCount), new byte[TCHAR.sizeof], TCHAR.sizeof); lptvdi.cchTextMax = java.lang.Math.min(lptvdi.cchTextMax, ((string.length()) + 1)); } } if (((lptvdi.mask) & ((OS.TVIF_IMAGE) | (OS.TVIF_SELECTEDIMAGE))) != 0) { org.eclipse.swt.widgets.Image image = null; if (index == 0) { image = item.image; } else { org.eclipse.swt.widgets.Image[] images = item.images; if (images != null) image = images[index]; } lptvdi.iImage = lptvdi.iSelectedImage = OS.I_IMAGENONE; if (image != null) { lptvdi.iImage = lptvdi.iSelectedImage = imageIndex(image, index); } } org.eclipse.swt.widgets.OS.MoveMemory(lParam, lptvdi, NMTVDISPINFO.sizeof); break; } case OS.NM_CUSTOMDRAW : { if ((hdr.hwndFrom) == (hwndHeader)) break; if (hooks(SWT.MeasureItem)) { if ((hwndHeader) == 0) createParent(); } if ((!(customDraw)) && ((findImageControl()) == null)) { if (((OS.COMCTL32_MAJOR) >= 6) && (org.eclipse.swt.widgets.OS.IsAppThemed())) { if (((sortColumn) == null) || ((sortDirection) == (SWT.NONE))) { break; } } } org.eclipse.swt.widgets.NMTVCUSTOMDRAW nmcd = new org.eclipse.swt.widgets.NMTVCUSTOMDRAW(); org.eclipse.swt.widgets.OS.MoveMemory(nmcd, lParam, NMTVCUSTOMDRAW.sizeof); switch (nmcd.dwDrawStage) { case OS.CDDS_PREPAINT : return CDDS_PREPAINT(nmcd, wParam, lParam); case OS.CDDS_ITEMPREPAINT : return CDDS_ITEMPREPAINT(nmcd, wParam, lParam); case OS.CDDS_ITEMPOSTPAINT : return CDDS_ITEMPOSTPAINT(nmcd, wParam, lParam); case OS.CDDS_POSTPAINT : return CDDS_POSTPAINT(nmcd, wParam, lParam); } break; } case OS.NM_DBLCLK : { if (hooks(SWT.DefaultSelection)) { org.eclipse.swt.widgets.POINT pt = new org.eclipse.swt.widgets.POINT(); int pos = org.eclipse.swt.widgets.OS.GetMessagePos(); pt.x = ((short) (pos & 65535)); pt.y = ((short) (pos >> 16)); org.eclipse.swt.widgets.OS.ScreenToClient(handle, pt); org.eclipse.swt.widgets.TVHITTESTINFO lpht = new org.eclipse.swt.widgets.TVHITTESTINFO(); lpht.x = pt.x; lpht.y = pt.y; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_HITTEST, 0, lpht); if (((lpht.hItem) != 0) && (((lpht.flags) & (OS.TVHT_ONITEM)) != 0)) { return LRESULT.ONE; } } break; } case OS.TVN_ITEMCHANGINGA : case OS.TVN_ITEMCHANGINGW : { if ((!(OS.IsWinCE)) && ((OS.WIN32_VERSION) >= (org.eclipse.swt.widgets.OS.VERSION(6, 0)))) { if (((style) & (SWT.MULTI)) != 0) { if ((hSelect) != 0) { org.eclipse.swt.widgets.NMTVITEMCHANGE pnm = new org.eclipse.swt.widgets.NMTVITEMCHANGE(); org.eclipse.swt.widgets.OS.MoveMemory(pnm, lParam, NMTVITEMCHANGE.sizeof); if ((hSelect) == (pnm.hItem)) break; return LRESULT.ONE; } } } break; } case OS.TVN_SELCHANGINGA : case OS.TVN_SELCHANGINGW : { if (((style) & (SWT.MULTI)) != 0) { if (lockSelection) { org.eclipse.swt.widgets.TVITEM tvItem = new org.eclipse.swt.widgets.TVITEM(); int offset1 = (NMHDR.sizeof) + 4; org.eclipse.swt.widgets.OS.MoveMemory(tvItem, (lParam + offset1), TVITEM.sizeof); oldSelected = ((tvItem.state) & (OS.TVIS_SELECTED)) != 0; int offset2 = ((NMHDR.sizeof) + 4) + (TVITEM.sizeof); org.eclipse.swt.widgets.OS.MoveMemory(tvItem, (lParam + offset2), TVITEM.sizeof); newSelected = ((tvItem.state) & (OS.TVIS_SELECTED)) != 0; } } if ((!(ignoreSelect)) && (!(ignoreDeselect))) { hAnchor = 0; if (((style) & (SWT.MULTI)) != 0) deselectAll(); } break; } case OS.TVN_SELCHANGEDA : case OS.TVN_SELCHANGEDW : { if (((style) & (SWT.MULTI)) != 0) { if (lockSelection) { if (oldSelected) { org.eclipse.swt.widgets.TVITEM tvItem = new org.eclipse.swt.widgets.TVITEM(); int offset = (NMHDR.sizeof) + 4; org.eclipse.swt.widgets.OS.MoveMemory(tvItem, (lParam + offset), TVITEM.sizeof); tvItem.mask = OS.TVIF_STATE; tvItem.stateMask = OS.TVIS_SELECTED; tvItem.state = OS.TVIS_SELECTED; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_SETITEM, 0, tvItem); } if ((!(newSelected)) && (ignoreSelect)) { org.eclipse.swt.widgets.TVITEM tvItem = new org.eclipse.swt.widgets.TVITEM(); int offset = ((NMHDR.sizeof) + 4) + (TVITEM.sizeof); org.eclipse.swt.widgets.OS.MoveMemory(tvItem, (lParam + offset), TVITEM.sizeof); tvItem.mask = OS.TVIF_STATE; tvItem.stateMask = OS.TVIS_SELECTED; tvItem.state = 0; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_SETITEM, 0, tvItem); } } } if (!(ignoreSelect)) { org.eclipse.swt.widgets.TVITEM tvItem = new org.eclipse.swt.widgets.TVITEM(); int offset = ((NMHDR.sizeof) + 4) + (TVITEM.sizeof); org.eclipse.swt.widgets.OS.MoveMemory(tvItem, (lParam + offset), TVITEM.sizeof); hAnchor = tvItem.hItem; org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); event.item = _getItem(tvItem.hItem, tvItem.lParam); postEvent(SWT.Selection, event); } updateScrollBar(); break; } case OS.TVN_ITEMEXPANDINGA : case OS.TVN_ITEMEXPANDINGW : { boolean runExpanded = false; if (((style) & (SWT.VIRTUAL)) != 0) style &= ~(SWT.DOUBLE_BUFFERED); if ((hooks(SWT.EraseItem)) || (hooks(SWT.PaintItem))) style &= ~(SWT.DOUBLE_BUFFERED); if ((((findImageControl()) != null) && ((drawCount) == 0)) && (org.eclipse.swt.widgets.OS.IsWindowVisible(handle))) { org.eclipse.swt.widgets.OS.DefWindowProc(handle, OS.WM_SETREDRAW, 0, 0); } if ((hInsert) != 0) { org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_SETINSERTMARK, 0, 0); } if (!(ignoreExpand)) { org.eclipse.swt.widgets.TVITEM tvItem = new org.eclipse.swt.widgets.TVITEM(); int offset = ((NMHDR.sizeof) + 4) + (TVITEM.sizeof); org.eclipse.swt.widgets.OS.MoveMemory(tvItem, (lParam + offset), TVITEM.sizeof); if ((items) == null) break; org.eclipse.swt.widgets.TreeItem item = _getItem(tvItem.hItem, tvItem.lParam); if (item == null) break; org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); event.item = item; int[] action = new int[1]; org.eclipse.swt.widgets.OS.MoveMemory(action, (lParam + (NMHDR.sizeof)), 4); switch (action[0]) { case OS.TVE_EXPAND : if (((tvItem.state) & (OS.TVIS_EXPANDED)) == 0) { sendEvent(SWT.Expand, event); if (isDisposed()) return LRESULT.ZERO; } break; case OS.TVE_COLLAPSE : sendEvent(SWT.Collapse, event); if (isDisposed()) return LRESULT.ZERO; break; } int hFirstItem = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETNEXTITEM, OS.TVGN_CHILD, tvItem.hItem); runExpanded = hFirstItem == 0; } if (!runExpanded) break; } case OS.TVN_ITEMEXPANDEDA : case OS.TVN_ITEMEXPANDEDW : { if (((style) & (SWT.VIRTUAL)) != 0) style |= SWT.DOUBLE_BUFFERED; if ((hooks(SWT.EraseItem)) || (hooks(SWT.PaintItem))) style |= SWT.DOUBLE_BUFFERED; if (((findImageControl()) != null) && ((drawCount) == 0)) { org.eclipse.swt.widgets.OS.DefWindowProc(handle, OS.WM_SETREDRAW, 1, 0); org.eclipse.swt.widgets.OS.InvalidateRect(handle, null, true); } if ((hInsert) != 0) { org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_SETINSERTMARK, (insertAfter ? 1 : 0), hInsert); } updateScrollBar(); break; } case OS.TVN_BEGINDRAGA : case OS.TVN_BEGINDRAGW : case OS.TVN_BEGINRDRAGA : case OS.TVN_BEGINRDRAGW : { org.eclipse.swt.widgets.TVITEM tvItem = new org.eclipse.swt.widgets.TVITEM(); int offset = ((NMHDR.sizeof) + 4) + (TVITEM.sizeof); org.eclipse.swt.widgets.OS.MoveMemory(tvItem, (lParam + offset), TVITEM.sizeof); if (((tvItem.hItem) != 0) && (((tvItem.state) & (OS.TVIS_SELECTED)) == 0)) { hSelect = tvItem.hItem; ignoreSelect = ignoreDeselect = true; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_SELECTITEM, OS.TVGN_CARET, tvItem.hItem); ignoreSelect = ignoreDeselect = false; hSelect = 0; } dragStarted = true; break; } case OS.NM_RECOGNIZEGESTURE : { if (OS.IsPPC) { boolean hasMenu = ((menu) != null) && (!(menu.isDisposed())); if ((!hasMenu) && (!(hooks(SWT.MenuDetect)))) return LRESULT.ONE; } break; } case OS.GN_CONTEXTMENU : { if (OS.IsPPC) { boolean hasMenu = ((menu) != null) && (!(menu.isDisposed())); if (hasMenu || (hooks(SWT.MenuDetect))) { org.eclipse.swt.widgets.NMRGINFO nmrg = new org.eclipse.swt.widgets.NMRGINFO(); org.eclipse.swt.widgets.OS.MoveMemory(nmrg, lParam, NMRGINFO.sizeof); showMenu(nmrg.x, nmrg.y); gestureCompleted = true; return LRESULT.ONE; } } break; } } return super.wmNotifyChild(hdr, wParam, lParam); }
void updateSelection(int startOffset, int replacedLength, int newLength) { if ((selection.y) <= startOffset) { if (wordWrap) setCaretLocation(); return; } if ((selection.x) < startOffset) { internalRedrawRange(selection.x, (startOffset - (selection.x))); } if (((selection.y) > (startOffset + replacedLength)) && ((selection.x) < (startOffset + replacedLength))) { int netNewLength = newLength - replacedLength; int redrawStart = startOffset + newLength; internalRedrawRange(redrawStart, (((selection.y) + netNewLength) - redrawStart)); } if (((selection.y) > startOffset) && ((selection.x) < (startOffset + replacedLength))) { setSelection((startOffset + newLength), 0, true); } else { setSelection((((selection.x) + newLength) - replacedLength), ((selection.y) - (selection.x)), true); } setCaretLocation(); }
void insertBlockSelectionText(char key, int action) { if ((key == (SWT.CR)) || (key == (SWT.LF))) return; org.eclipse.swt.custom.Rectangle rect = getBlockSelectonPosition(); int firstLine = rect.y; int lastLine = rect.height; int left = rect.x; int right = rect.width; int[] trailing = new int[1]; int offset = 0; int delta = 0; java.lang.String text = (key != 0) ? new java.lang.String(new char[]{ key }) : ""; int length = text.length(); for (int lineIndex = firstLine; lineIndex <= lastLine; lineIndex++) { java.lang.String line = content.getLine(lineIndex); int lineOffset = content.getOffsetAtLine(lineIndex); int lineEndOffset = lineOffset + (line.length()); int linePixel = getLinePixel(lineIndex); int start = getOffsetAtPoint(left, linePixel, trailing, true); boolean outOfLine = start == (-1); if (outOfLine) { start = (left < (leftMargin)) ? lineOffset : lineEndOffset; } else { start += trailing[0]; } int end = getOffsetAtPoint(right, linePixel, trailing, true); if (end == (-1)) { end = (right < (leftMargin)) ? lineOffset : lineEndOffset; } else { end += trailing[0]; } if ((start == end) && (!outOfLine)) { switch (action) { case ST.DELETE_PREVIOUS : if (start > lineOffset) start = getClusterPrevious(start, lineIndex); break; case ST.DELETE_NEXT : if (end < lineEndOffset) end = getClusterNext(end, lineIndex); break; } } if (outOfLine) { if ((line.length()) >= delta) { delta = line.length(); offset = lineEndOffset + length; } } else { offset = start + length; delta = content.getCharCount(); } org.eclipse.swt.custom.Event event = new org.eclipse.swt.custom.Event(); event.text = text; event.start = start; event.end = end; sendKeyEvent(event); } int x = getPointAtOffset(offset).x; int verticalScrollOffset = getVerticalScrollOffset(); setBlockSelectionLocation(x, ((blockYAnchor) - verticalScrollOffset), x, ((blockYLocation) - verticalScrollOffset), false); }
void handleMouseDown(org.eclipse.swt.custom.Event event) { forceFocus(); if ((dragDetect) && (checkDragDetect(event))) return; if ((event.button) == 2) { java.lang.String text = ((java.lang.String) (getClipboardContent(DND.SELECTION_CLIPBOARD))); if ((text != null) && ((text.length()) > 0)) { doMouseLocationChange(event.x, event.y, false); org.eclipse.swt.custom.Event e = new org.eclipse.swt.custom.Event(); e.start = selection.x; e.end = selection.y; e.text = getModelDelimitedText(text); sendKeyEvent(e); } } if (((event.button) != 1) || ((org.eclipse.swt.custom.StyledText.IS_MAC) && (((event.stateMask) & (SWT.MOD4)) != 0))) { return; } clickCount = event.count; if ((clickCount) == 1) { boolean select = ((event.stateMask) & (SWT.MOD2)) != 0; doMouseLocationChange(event.x, event.y, select); } else { if (doubleClickEnabled) { boolean wordSelect = ((clickCount) & 1) == 0; int offset = getOffsetAtPoint(event.x, event.y, null); int lineIndex = content.getLineAtOffset(offset); int lineOffset = content.getOffsetAtLine(lineIndex); if (wordSelect) { int min = (blockSelection) ? lineOffset : 0; int max = (blockSelection) ? lineOffset + (content.getLine(lineIndex).length()) : content.getCharCount(); int start = java.lang.Math.max(min, getWordPrevious(offset, SWT.MOVEMENT_WORD_START)); int end = java.lang.Math.min(max, getWordNext(start, SWT.MOVEMENT_WORD_END)); setSelection(start, (end - start), false, true); sendSelectionEvent(); } else { if (blockSelection) { setBlockSelectionLocation(leftMargin, event.y, ((clientAreaWidth) - (rightMargin)), event.y, true); } else { int lineEnd = content.getCharCount(); if ((lineIndex + 1) < (content.getLineCount())) { lineEnd = content.getOffsetAtLine((lineIndex + 1)); } setSelection(lineOffset, (lineEnd - lineOffset), false, false); sendSelectionEvent(); } } doubleClickSelection = new org.eclipse.swt.custom.Point(selection.x, selection.y); showCaret(); } } }
void createHandle(int index) { state |= (HANDLE) | (CANVAS); int type = OS.GTK_WINDOW_TOPLEVEL; if (((style) & (SWT.ON_TOP)) != 0) type = OS.GTK_WINDOW_POPUP; shellHandle = org.eclipse.swt.widgets.OS.gtk_window_new(type); if ((shellHandle) == 0) org.eclipse.swt.widgets.SWT.error(SWT.ERROR_NO_HANDLES); if ((parent) != null) { org.eclipse.swt.widgets.OS.gtk_window_set_transient_for(shellHandle, parent.topHandle()); org.eclipse.swt.widgets.OS.gtk_window_set_destroy_with_parent(shellHandle, true); } org.eclipse.swt.widgets.OS.gtk_widget_set_size_request(shellHandle, 0, 0); org.eclipse.swt.widgets.OS.gtk_window_set_resizable(shellHandle, true); createHandle(index, shellHandle, true); org.eclipse.swt.widgets.OS.gtk_widget_realize(shellHandle); int window = org.eclipse.swt.widgets.OS.GTK_WIDGET_WINDOW(shellHandle); int decorations = 0; if (((style) & (SWT.NO_TRIM)) == 0) { if (((style) & (SWT.MIN)) != 0) decorations |= OS.GDK_DECOR_MINIMIZE; if (((style) & (SWT.MAX)) != 0) decorations |= OS.GDK_DECOR_MAXIMIZE; if (((style) & (SWT.RESIZE)) != 0) decorations |= OS.GDK_DECOR_RESIZEH; if (((style) & (SWT.BORDER)) != 0) decorations |= OS.GDK_DECOR_BORDER; if (((style) & (SWT.MENU)) != 0) decorations |= OS.GDK_DECOR_MENU; if (((style) & (SWT.TITLE)) != 0) decorations |= OS.GDK_DECOR_TITLE; if (((style) & (SWT.RESIZE)) != 0) decorations |= OS.GDK_DECOR_BORDER; } org.eclipse.swt.widgets.OS.gdk_window_set_decorations(window, decorations); org.eclipse.swt.widgets.OS.gtk_window_set_title(shellHandle, new byte[1]); if (((style) & (SWT.ON_TOP)) != 0) { org.eclipse.swt.widgets.OS.gdk_window_set_override_redirect(window, true); } if (((style) & (((SWT.NO_TRIM) | (SWT.BORDER)) | (SWT.RESIZE))) == 0) { org.eclipse.swt.widgets.OS.gtk_container_set_border_width(shellHandle, 1); org.eclipse.swt.widgets.GdkColor color = new org.eclipse.swt.widgets.GdkColor(); org.eclipse.swt.widgets.OS.gtk_style_get_black(org.eclipse.swt.widgets.OS.gtk_widget_get_style(shellHandle), color); org.eclipse.swt.widgets.OS.gtk_widget_modify_bg(shellHandle, 0, color); } int bits = ((SWT.PRIMARY_MODAL) | (SWT.APPLICATION_MODAL)) | (SWT.SYSTEM_MODAL); boolean modal = ((style) & bits) != 0; if (((style) & (SWT.ON_TOP)) == 0) modal |= ((parent) != null) && (((parent.style) & bits) != 0); org.eclipse.swt.widgets.OS.gtk_window_set_modal(shellHandle, modal); }
void setMenuBar(org.eclipse.swt.widgets.Menu menu) { if (menu == null) menu = appMenuBar; if (menu == (menuBar)) return; menuBar = menu; org.eclipse.swt.widgets.NSMenu menubar = application.mainMenu(); org.eclipse.swt.widgets.OS.CancelMenuTracking(org.eclipse.swt.widgets.OS.AcquireRootMenu(), true, 0); long count = menubar.numberOfItems(); while (count > 1) { menubar.removeItemAtIndex((count - 1)); count--; } if (menu != null) { org.eclipse.swt.widgets.MenuItem[] items = menu.getItems(); for (int i = 0; i < (items.length); i++) { org.eclipse.swt.widgets.MenuItem item = items[i]; org.eclipse.swt.widgets.NSMenuItem nsItem = item.nsItem; if ((OS.VERSION) >= 4192) { org.eclipse.swt.widgets.NSMenu submenu = nsItem.submenu(); if ((submenu != null) && (submenu.title().getString().equals(org.eclipse.swt.widgets.SWT.getMessage("SWT_Help")))) { application.setHelpMenu(submenu); } } nsItem.setMenu(null); menubar.addItem(nsItem); boolean enabled = (menu.getEnabled()) && (item.getEnabled()); nsItem.setEnabled((!enabled)); nsItem.setEnabled(enabled); } } }
void shape(final int hdc, final org.eclipse.swt.graphics.TextLayout.StyleItem run) { int[] buffer = new int[1]; char[] chars = new char[run.length]; segmentsText.getChars(run.start, ((run.start) + (run.length)), chars, 0); int maxGlyphs = (((chars.length) * 3) / 2) + 16; int hHeap = org.eclipse.swt.graphics.OS.GetProcessHeap(); run.glyphs = org.eclipse.swt.graphics.OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, (maxGlyphs * 2)); run.clusters = org.eclipse.swt.graphics.OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, (maxGlyphs * 2)); run.visAttrs = org.eclipse.swt.graphics.OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, (maxGlyphs * (org.eclipse.swt.graphics.TextLayout.SCRIPT_VISATTR_SIZEOF))); run.psc = org.eclipse.swt.graphics.OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, 4); if (!(shape(hdc, run, chars, buffer, maxGlyphs))) { if ((mLangFontLink2) != 0) { int[] dwCodePages = new int[1]; int[] cchCodePages = new int[1]; org.eclipse.swt.graphics.OS.VtblCall(4, mLangFontLink2, chars, chars.length, 0, dwCodePages, cchCodePages); int[] hNewFont = new int[1]; if ((org.eclipse.swt.graphics.OS.VtblCall(10, mLangFontLink2, hdc, dwCodePages[0], chars[0], hNewFont)) == (OS.S_OK)) { int hFont = org.eclipse.swt.graphics.OS.SelectObject(hdc, hNewFont[0]); if (shape(hdc, run, chars, buffer, maxGlyphs)) { run.fallbackFont = hNewFont[0]; } else { org.eclipse.swt.graphics.OS.VtblCall(8, mLangFontLink2, hNewFont[0]); org.eclipse.swt.graphics.OS.SelectObject(hdc, hFont); org.eclipse.swt.graphics.SCRIPT_PROPERTIES properties = new org.eclipse.swt.graphics.SCRIPT_PROPERTIES(); org.eclipse.swt.graphics.OS.MoveMemory(properties, device.scripts[run.analysis.eScript], SCRIPT_PROPERTIES.sizeof); if (properties.fPrivateUseArea) { run.analysis.fNoGlyphIndex = true; } org.eclipse.swt.graphics.OS.ScriptShape(hdc, run.psc, chars, chars.length, maxGlyphs, run.analysis, run.glyphs, run.clusters, run.visAttrs, buffer); run.glyphCount = buffer[0]; } } } } int[] abc = new int[3]; run.advances = org.eclipse.swt.graphics.OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, ((run.glyphCount) * 4)); run.goffsets = org.eclipse.swt.graphics.OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, ((run.glyphCount) * (org.eclipse.swt.graphics.TextLayout.GOFFSET_SIZEOF))); org.eclipse.swt.graphics.OS.ScriptPlace(hdc, run.psc, run.glyphs, run.glyphCount, run.visAttrs, run.analysis, run.advances, run.goffsets, abc); if (((run.style) != null) && ((run.style.metrics) != null)) { org.eclipse.swt.graphics.GlyphMetrics metrics = run.style.metrics; run.width = (metrics.width) * (java.lang.Math.max(1, run.glyphCount)); run.ascent = metrics.ascent; run.descent = metrics.descent; run.leading = 0; } else { run.width = ((abc[0]) + (abc[1])) + (abc[2]); org.eclipse.swt.graphics.TEXTMETRIC lptm = (OS.IsUnicode) ? ((org.eclipse.swt.graphics.TEXTMETRIC) (new org.eclipse.swt.graphics.TEXTMETRICW())) : new org.eclipse.swt.graphics.TEXTMETRICA(); org.eclipse.swt.graphics.OS.GetTextMetrics(hdc, lptm); run.ascent = lptm.tmAscent; run.descent = lptm.tmDescent; run.leading = lptm.tmInternalLeading; } if ((run.style) != null) { run.ascent += run.style.rise; run.descent -= +(run.style.rise); } }
org.eclipse.swt.widgets.LRESULT wmNotifyChild(org.eclipse.swt.widgets.NMHDR hdr, int wParam, int lParam) { switch (hdr.code) { case OS.LVN_ODFINDITEMA : case OS.LVN_ODFINDITEMW : { if (((style) & (SWT.VIRTUAL)) != 0) return new org.eclipse.swt.widgets.LRESULT((-1)); break; } case OS.LVN_ODSTATECHANGED : { if (((style) & (SWT.VIRTUAL)) != 0) { if (!(ignoreSelect)) { org.eclipse.swt.widgets.NMLVODSTATECHANGE lpStateChange = new org.eclipse.swt.widgets.NMLVODSTATECHANGE(); org.eclipse.swt.widgets.OS.MoveMemory(lpStateChange, lParam, NMLVODSTATECHANGE.sizeof); boolean oldSelected = ((lpStateChange.uOldState) & (OS.LVIS_SELECTED)) != 0; boolean newSelected = ((lpStateChange.uNewState) & (OS.LVIS_SELECTED)) != 0; if (oldSelected != newSelected) wasSelected = true; } } break; } case OS.LVN_GETDISPINFOA : case OS.LVN_GETDISPINFOW : { org.eclipse.swt.widgets.NMLVDISPINFO plvfi = new org.eclipse.swt.widgets.NMLVDISPINFO(); org.eclipse.swt.widgets.OS.MoveMemory(plvfi, lParam, NMLVDISPINFO.sizeof); boolean[] visible = display.columnVisible; if ((visible != null) && (!(visible[plvfi.iSubItem]))) { break; } org.eclipse.swt.widgets.TableItem item = _getItem(plvfi.iItem); if (item == null) break; if (ignoreShrink) { if ((!(OS.IsWinCE)) && ((OS.WIN32_VERSION) >= (org.eclipse.swt.widgets.OS.VERSION(6, 0)))) { org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); rect.left = OS.LVIR_BOUNDS; ignoreCustomDraw = true; int code = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_GETITEMRECT, plvfi.iItem, rect); ignoreCustomDraw = false; if (code != 0) org.eclipse.swt.widgets.OS.InvalidateRect(handle, rect, true); break; } else { if ((((style) & (SWT.VIRTUAL)) != 0) && (!(item.cached))) { org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_REDRAWITEMS, plvfi.iItem, plvfi.iItem); break; } } } if (!(item.cached)) { if (((style) & (SWT.VIRTUAL)) != 0) { lastIndexOf = plvfi.iItem; if (!(checkData(item, lastIndexOf, false))) break; org.eclipse.swt.widgets.TableItem newItem = (fixScrollWidth) ? null : item; if (setScrollWidth(newItem, true)) { org.eclipse.swt.widgets.OS.InvalidateRect(handle, null, true); } } item.cached = true; } if (((plvfi.mask) & (OS.LVIF_TEXT)) != 0) { java.lang.String string = null; if ((plvfi.iSubItem) == 0) { string = item.text; } else { java.lang.String[] strings = item.strings; if (strings != null) string = strings[plvfi.iSubItem]; } if (string != null) { int length = java.lang.Math.min(string.length(), ((plvfi.cchTextMax) - 1)); if (((!(tipRequested)) && ((plvfi.iSubItem) == 0)) && (length == 0)) { string = " "; length = 1; } char[] buffer = display.tableBuffer; if ((buffer == null) || ((plvfi.cchTextMax) > (buffer.length))) { buffer = display.tableBuffer = new char[plvfi.cchTextMax]; } string.getChars(0, length, buffer, 0); buffer[(length++)] = 0; if (OS.IsUnicode) { org.eclipse.swt.widgets.OS.MoveMemory(plvfi.pszText, buffer, (length * 2)); } else { org.eclipse.swt.widgets.OS.WideCharToMultiByte(getCodePage(), 0, buffer, length, plvfi.pszText, plvfi.cchTextMax, null, null); org.eclipse.swt.widgets.OS.MoveMemory((((plvfi.pszText) + (plvfi.cchTextMax)) - 1), new byte[1], 1); } } } boolean move = false; if (((plvfi.mask) & (OS.LVIF_IMAGE)) != 0) { org.eclipse.swt.widgets.Image image = null; if ((plvfi.iSubItem) == 0) { image = item.image; } else { org.eclipse.swt.widgets.Image[] images = item.images; if (images != null) image = images[plvfi.iSubItem]; } if (image != null) { plvfi.iImage = imageIndex(image, plvfi.iSubItem); move = true; } } if (((plvfi.mask) & (OS.LVIF_STATE)) != 0) { if ((plvfi.iSubItem) == 0) { int state = 1; if (item.checked) state++; if (item.grayed) state += 2; if (!(org.eclipse.swt.widgets.OS.IsWindowEnabled(handle))) state += 4; plvfi.state = state << 12; plvfi.stateMask = OS.LVIS_STATEIMAGEMASK; move = true; } } if (((plvfi.mask) & (OS.LVIF_INDENT)) != 0) { if ((plvfi.iSubItem) == 0) { plvfi.iIndent = item.imageIndent; move = true; } } if (move) org.eclipse.swt.widgets.OS.MoveMemory(lParam, plvfi, NMLVDISPINFO.sizeof); break; } case OS.NM_CUSTOMDRAW : { int hwndHeader = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_GETHEADER, 0, 0); if ((hdr.hwndFrom) == hwndHeader) break; if ((!(customDraw)) && ((findImageControl()) == null)) { if (org.eclipse.swt.widgets.OS.IsWindowEnabled(handle)) { if ((!(explorerTheme)) || ((columnCount) != 0)) break; } } org.eclipse.swt.widgets.NMLVCUSTOMDRAW nmcd = new org.eclipse.swt.widgets.NMLVCUSTOMDRAW(); org.eclipse.swt.widgets.OS.MoveMemory(nmcd, lParam, NMLVCUSTOMDRAW.sizeof); switch (nmcd.dwDrawStage) { case OS.CDDS_PREPAINT : return CDDS_PREPAINT(nmcd, wParam, lParam); case OS.CDDS_ITEMPREPAINT : return CDDS_ITEMPREPAINT(nmcd, wParam, lParam); case OS.CDDS_ITEMPOSTPAINT : return CDDS_ITEMPOSTPAINT(nmcd, wParam, lParam); case OS.CDDS_SUBITEMPREPAINT : return CDDS_SUBITEMPREPAINT(nmcd, wParam, lParam); case OS.CDDS_SUBITEMPOSTPAINT : return CDDS_SUBITEMPOSTPAINT(nmcd, wParam, lParam); case OS.CDDS_POSTPAINT : return CDDS_POSTPAINT(nmcd, wParam, lParam); } break; } case OS.LVN_MARQUEEBEGIN : { if (((style) & (SWT.SINGLE)) != 0) return LRESULT.ONE; if ((hooks(SWT.MouseDown)) || (hooks(SWT.MouseUp))) { return LRESULT.ONE; } if (((style) & (SWT.RIGHT_TO_LEFT)) != 0) { if ((findImageControl()) != null) return LRESULT.ONE; } break; } case OS.LVN_BEGINDRAG : case OS.LVN_BEGINRDRAG : { if ((org.eclipse.swt.widgets.OS.GetKeyState(OS.VK_LBUTTON)) >= 0) break; dragStarted = true; if ((hdr.code) == (OS.LVN_BEGINDRAG)) { int pos = org.eclipse.swt.widgets.OS.GetMessagePos(); org.eclipse.swt.widgets.POINT pt = new org.eclipse.swt.widgets.POINT(); org.eclipse.swt.widgets.OS.POINTSTOPOINT(pt, pos); org.eclipse.swt.widgets.OS.ScreenToClient(handle, pt); sendDragEvent(1, pt.x, pt.y); } break; } case OS.LVN_COLUMNCLICK : { org.eclipse.swt.widgets.NMLISTVIEW pnmlv = new org.eclipse.swt.widgets.NMLISTVIEW(); org.eclipse.swt.widgets.OS.MoveMemory(pnmlv, lParam, NMLISTVIEW.sizeof); org.eclipse.swt.widgets.TableColumn column = columns[pnmlv.iSubItem]; if (column != null) { column.sendSelectionEvent(SWT.Selection); } break; } case OS.LVN_ITEMACTIVATE : { if (ignoreActivate) break; org.eclipse.swt.widgets.NMLISTVIEW pnmlv = new org.eclipse.swt.widgets.NMLISTVIEW(); org.eclipse.swt.widgets.OS.MoveMemory(pnmlv, lParam, NMLISTVIEW.sizeof); if ((pnmlv.iItem) != (-1)) { org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); event.item = _getItem(pnmlv.iItem); sendSelectionEvent(SWT.DefaultSelection, event, false); } break; } case OS.LVN_ITEMCHANGED : { if (fullRowSelect) { fullRowSelect = false; org.eclipse.swt.widgets.OS.DefWindowProc(handle, OS.WM_SETREDRAW, 1, 0); org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_SETEXTENDEDLISTVIEWSTYLE, OS.LVS_EX_FULLROWSELECT, 0); } if (!(ignoreSelect)) { org.eclipse.swt.widgets.NMLISTVIEW pnmlv = new org.eclipse.swt.widgets.NMLISTVIEW(); org.eclipse.swt.widgets.OS.MoveMemory(pnmlv, lParam, NMLISTVIEW.sizeof); if (((pnmlv.uChanged) & (OS.LVIF_STATE)) != 0) { if ((pnmlv.iItem) == (-1)) { wasSelected = true; } else { boolean oldSelected = ((pnmlv.uOldState) & (OS.LVIS_SELECTED)) != 0; boolean newSelected = ((pnmlv.uNewState) & (OS.LVIS_SELECTED)) != 0; if (oldSelected != newSelected) wasSelected = true; } } } if ((hooks(SWT.EraseItem)) || (hooks(SWT.PaintItem))) { int hwndHeader = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_GETHEADER, 0, 0); int count = ((int) (org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0))); if (count != 0) { forceResize(); org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); org.eclipse.swt.widgets.OS.GetClientRect(handle, rect); org.eclipse.swt.widgets.NMLISTVIEW pnmlv = new org.eclipse.swt.widgets.NMLISTVIEW(); org.eclipse.swt.widgets.OS.MoveMemory(pnmlv, lParam, NMLISTVIEW.sizeof); if ((pnmlv.iItem) != (-1)) { org.eclipse.swt.widgets.RECT itemRect = new org.eclipse.swt.widgets.RECT(); itemRect.left = OS.LVIR_BOUNDS; ignoreCustomDraw = true; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_GETITEMRECT, pnmlv.iItem, itemRect); ignoreCustomDraw = false; org.eclipse.swt.widgets.RECT headerRect = new org.eclipse.swt.widgets.RECT(); int index = ((int) (org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_ORDERTOINDEX, (count - 1), 0))); org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEMRECT, index, headerRect); org.eclipse.swt.widgets.OS.MapWindowPoints(hwndHeader, handle, headerRect, 2); rect.left = headerRect.right; rect.top = itemRect.top; rect.bottom = itemRect.bottom; org.eclipse.swt.widgets.OS.InvalidateRect(handle, rect, true); } } } break; } case OS.NM_RECOGNIZEGESTURE : if (OS.IsPPC) { boolean hasMenu = ((menu) != null) && (!(menu.isDisposed())); if ((!hasMenu) && (!(hooks(SWT.MenuDetect)))) return LRESULT.ONE; } break; case OS.GN_CONTEXTMENU : if (OS.IsPPC) { boolean hasMenu = ((menu) != null) && (!(menu.isDisposed())); if (hasMenu || (hooks(SWT.MenuDetect))) { org.eclipse.swt.widgets.NMRGINFO nmrg = new org.eclipse.swt.widgets.NMRGINFO(); org.eclipse.swt.widgets.OS.MoveMemory(nmrg, lParam, NMRGINFO.sizeof); showMenu(nmrg.x, nmrg.y); return LRESULT.ONE; } } break; } return super.wmNotifyChild(hdr, wParam, lParam); }
int windowProc(int hwnd, int msg, int wParam, int lParam) { if (((hwndHeader) != 0) && (hwnd == (hwndHeader))) { switch (msg) { case OS.WM_CAPTURECHANGED : { if ((OS.COMCTL32_MAJOR) < 6) { if ((lParam != 0) && (lParam != (hwndHeader))) { org.eclipse.swt.widgets.OS.InvalidateRect(hwndHeader, null, true); } } break; } case OS.WM_MOUSELEAVE : { if ((OS.COMCTL32_MAJOR) >= 6) updateHeaderToolTips(); updateHeaderToolTips(); break; } case OS.WM_NOTIFY : { org.eclipse.swt.widgets.NMHDR hdr = new org.eclipse.swt.widgets.NMHDR(); org.eclipse.swt.widgets.OS.MoveMemory(hdr, lParam, NMHDR.sizeof); switch (hdr.code) { case OS.TTN_SHOW : case OS.TTN_POP : case OS.TTN_GETDISPINFOA : case OS.TTN_GETDISPINFOW : return org.eclipse.swt.widgets.OS.SendMessage(handle, msg, wParam, lParam); } break; } case OS.WM_SETCURSOR : { if (wParam == hwnd) { int hitTest = ((short) (org.eclipse.swt.widgets.OS.LOWORD(lParam))); if (hitTest == (OS.HTCLIENT)) { org.eclipse.swt.widgets.HDHITTESTINFO pinfo = new org.eclipse.swt.widgets.HDHITTESTINFO(); int pos = org.eclipse.swt.widgets.OS.GetMessagePos(); org.eclipse.swt.widgets.POINT pt = new org.eclipse.swt.widgets.POINT(); org.eclipse.swt.widgets.OS.POINTSTOPOINT(pt, pos); org.eclipse.swt.widgets.OS.ScreenToClient(hwnd, pt); pinfo.x = pt.x; pinfo.y = pt.y; int index = ((int) (org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_HITTEST, 0, pinfo))); if (((0 <= index) && (index < (columnCount))) && (!(columns[index].resizable))) { if (((pinfo.flags) & ((OS.HHT_ONDIVIDER) | (OS.HHT_ONDIVOPEN))) != 0) { org.eclipse.swt.widgets.OS.SetCursor(org.eclipse.swt.widgets.OS.LoadCursor(0, OS.IDC_ARROW)); return 1; } } } } break; } } return callWindowProc(hwnd, msg, wParam, lParam); } if (((hwndParent) != 0) && (hwnd == (hwndParent))) { switch (msg) { case OS.WM_MOVE : { sendEvent(SWT.Move); return 0; } case OS.WM_SIZE : { setScrollWidth(); if (ignoreResize) return 0; setResizeChildren(false); int code = callWindowProc(hwnd, OS.WM_SIZE, wParam, lParam); sendEvent(SWT.Resize); if (isDisposed()) return 0; if ((layout) != null) { markLayout(false, false); updateLayout(false, false); } setResizeChildren(true); updateScrollBar(); return code; } case OS.WM_NCPAINT : { org.eclipse.swt.widgets.LRESULT result = wmNCPaint(hwnd, wParam, lParam); if (result != null) return result.value; break; } case OS.WM_PRINT : { org.eclipse.swt.widgets.LRESULT result = wmPrint(hwnd, wParam, lParam); if (result != null) return result.value; break; } case OS.WM_COMMAND : case OS.WM_NOTIFY : case OS.WM_SYSCOLORCHANGE : { return org.eclipse.swt.widgets.OS.SendMessage(handle, msg, wParam, lParam); } case OS.WM_HSCROLL : { if (((horizontalBar) != null) && ((lParam == 0) || (lParam == (hwndParent)))) { wmScroll(horizontalBar, true, hwndParent, OS.WM_HSCROLL, wParam, lParam); } setScrollWidth(); break; } case OS.WM_VSCROLL : { org.eclipse.swt.widgets.SCROLLINFO info = new org.eclipse.swt.widgets.SCROLLINFO(); info.cbSize = SCROLLINFO.sizeof; info.fMask = OS.SIF_ALL; org.eclipse.swt.widgets.OS.GetScrollInfo(hwndParent, OS.SB_VERT, info); if ((!(OS.IsWinCE)) && ((OS.WIN32_VERSION) >= (org.eclipse.swt.widgets.OS.VERSION(6, 0)))) { if ((org.eclipse.swt.widgets.OS.LOWORD(wParam)) == (OS.SB_THUMBTRACK)) { info.nPos = info.nTrackPos; } } org.eclipse.swt.widgets.OS.SetScrollInfo(handle, OS.SB_VERT, info, true); int code = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.WM_VSCROLL, wParam, lParam); org.eclipse.swt.widgets.OS.GetScrollInfo(handle, OS.SB_VERT, info); org.eclipse.swt.widgets.OS.SetScrollInfo(hwndParent, OS.SB_VERT, info, true); return code; } } return callWindowProc(hwnd, msg, wParam, lParam); } if (msg == (Display.DI_GETDRAGIMAGE)) { if (((((style) & (SWT.MULTI)) != 0) || (hooks(SWT.EraseItem))) || (hooks(SWT.PaintItem))) { int hItem = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETNEXTITEM, OS.TVGN_FIRSTVISIBLE, 0); org.eclipse.swt.widgets.TreeItem[] items = new org.eclipse.swt.widgets.TreeItem[10]; org.eclipse.swt.widgets.TVITEM tvItem = new org.eclipse.swt.widgets.TVITEM(); tvItem.mask = ((OS.TVIF_HANDLE) | (OS.TVIF_PARAM)) | (OS.TVIF_STATE); int count = getSelection(hItem, tvItem, items, 0, 10, false, true); if (count == 0) return 0; org.eclipse.swt.widgets.POINT mousePos = new org.eclipse.swt.widgets.POINT(); org.eclipse.swt.widgets.OS.POINTSTOPOINT(mousePos, org.eclipse.swt.widgets.OS.GetMessagePos()); org.eclipse.swt.widgets.OS.MapWindowPoints(0, handle, mousePos, 1); org.eclipse.swt.widgets.RECT clientRect = new org.eclipse.swt.widgets.RECT(); org.eclipse.swt.widgets.OS.GetClientRect(handle, clientRect); org.eclipse.swt.widgets.RECT rect = items[0].getBounds(0, true, true, false); if (((style) & (SWT.FULL_SELECTION)) != 0) { int width = org.eclipse.swt.widgets.Tree.DRAG_IMAGE_SIZE; rect.left = java.lang.Math.max(clientRect.left, ((mousePos.x) - (width / 2))); if ((clientRect.right) > ((rect.left) + width)) { rect.right = (rect.left) + width; } else { rect.right = clientRect.right; rect.left = java.lang.Math.max(clientRect.left, ((rect.right) - width)); } } else { rect.left = java.lang.Math.max(rect.left, clientRect.left); rect.right = java.lang.Math.min(rect.right, clientRect.right); } int hRgn = org.eclipse.swt.widgets.OS.CreateRectRgn(rect.left, rect.top, rect.right, rect.bottom); for (int i = 1; i < count; i++) { if (((rect.bottom) - (rect.top)) > (org.eclipse.swt.widgets.Tree.DRAG_IMAGE_SIZE)) break; if ((rect.bottom) > (clientRect.bottom)) break; org.eclipse.swt.widgets.RECT itemRect = items[i].getBounds(0, true, true, false); if (((style) & (SWT.FULL_SELECTION)) != 0) { itemRect.left = rect.left; itemRect.right = rect.right; } else { itemRect.left = java.lang.Math.max(itemRect.left, clientRect.left); itemRect.right = java.lang.Math.min(itemRect.right, clientRect.right); } int rectRgn = org.eclipse.swt.widgets.OS.CreateRectRgn(itemRect.left, itemRect.top, itemRect.right, itemRect.bottom); org.eclipse.swt.widgets.OS.CombineRgn(hRgn, hRgn, rectRgn, OS.RGN_OR); org.eclipse.swt.widgets.OS.DeleteObject(rectRgn); rect.bottom = itemRect.bottom; } org.eclipse.swt.widgets.OS.GetRgnBox(hRgn, rect); int hdc = org.eclipse.swt.widgets.OS.GetDC(handle); int memHdc = org.eclipse.swt.widgets.OS.CreateCompatibleDC(hdc); org.eclipse.swt.widgets.BITMAPINFOHEADER bmiHeader = new org.eclipse.swt.widgets.BITMAPINFOHEADER(); bmiHeader.biSize = BITMAPINFOHEADER.sizeof; bmiHeader.biWidth = (rect.right) - (rect.left); bmiHeader.biHeight = -((rect.bottom) - (rect.top)); bmiHeader.biPlanes = 1; bmiHeader.biBitCount = 32; bmiHeader.biCompression = OS.BI_RGB; byte[] bmi = new byte[BITMAPINFOHEADER.sizeof]; org.eclipse.swt.widgets.OS.MoveMemory(bmi, bmiHeader, BITMAPINFOHEADER.sizeof); int[] pBits = new int[1]; int memDib = org.eclipse.swt.widgets.OS.CreateDIBSection(0, bmi, OS.DIB_RGB_COLORS, pBits, 0, 0); if (memDib == 0) org.eclipse.swt.widgets.SWT.error(SWT.ERROR_NO_HANDLES); int oldMemBitmap = org.eclipse.swt.widgets.OS.SelectObject(memHdc, memDib); int colorKey = 253; org.eclipse.swt.widgets.POINT pt = new org.eclipse.swt.widgets.POINT(); org.eclipse.swt.widgets.OS.SetWindowOrgEx(memHdc, rect.left, rect.top, pt); org.eclipse.swt.widgets.OS.FillRect(memHdc, rect, findBrush(colorKey, OS.BS_SOLID)); org.eclipse.swt.widgets.OS.OffsetRgn(hRgn, (-(rect.left)), (-(rect.top))); org.eclipse.swt.widgets.OS.SelectClipRgn(memHdc, hRgn); org.eclipse.swt.widgets.OS.PrintWindow(handle, memHdc, 0); org.eclipse.swt.widgets.OS.SetWindowOrgEx(memHdc, pt.x, pt.y, null); org.eclipse.swt.widgets.OS.SelectObject(memHdc, oldMemBitmap); org.eclipse.swt.widgets.OS.DeleteDC(memHdc); org.eclipse.swt.widgets.OS.ReleaseDC(0, hdc); org.eclipse.swt.widgets.OS.DeleteObject(hRgn); org.eclipse.swt.widgets.SHDRAGIMAGE shdi = new org.eclipse.swt.widgets.SHDRAGIMAGE(); shdi.hbmpDragImage = memDib; shdi.crColorKey = colorKey; shdi.sizeDragImage.cx = bmiHeader.biWidth; shdi.sizeDragImage.cy = -(bmiHeader.biHeight); shdi.ptOffset.x = (mousePos.x) - (rect.left); shdi.ptOffset.y = (mousePos.y) - (rect.top); if (((style) & (SWT.MIRRORED)) != 0) { shdi.ptOffset.x = (shdi.sizeDragImage.cx) - (shdi.ptOffset.x); } org.eclipse.swt.widgets.OS.MoveMemory(lParam, shdi, SHDRAGIMAGE.sizeof); return 1; } } return super.windowProc(hwnd, msg, wParam, lParam); }
void destroyItem(org.eclipse.swt.widgets.TableColumn column) { int hwndHeader = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_GETHEADER, 0, 0); int count = org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0); int index = 0; while (index < count) { if ((columns[index]) == column) break; index++; } if (index == count) return; boolean first = false; if (index == 0) { first = true; if (count > 1) { index = 1; int cchTextMax = 1024; int hHeap = org.eclipse.swt.widgets.OS.GetProcessHeap(); int byteCount = cchTextMax * (TCHAR.sizeof); int pszText = org.eclipse.swt.widgets.OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, byteCount); org.eclipse.swt.widgets.LVCOLUMN lvColumn = new org.eclipse.swt.widgets.LVCOLUMN(); lvColumn.mask = (OS.LVCF_TEXT) | (OS.LVCF_WIDTH); lvColumn.pszText = pszText; lvColumn.cchTextMax = cchTextMax; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_GETCOLUMN, 1, lvColumn); lvColumn.mask |= OS.LVCF_FMT; lvColumn.fmt = OS.LVCFMT_LEFT; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_SETCOLUMN, 0, lvColumn); org.eclipse.swt.widgets.LVITEM lvItem = new org.eclipse.swt.widgets.LVITEM(); lvItem.mask = ((OS.LVIF_TEXT) | (OS.LVIF_IMAGE)) | (OS.LVIF_STATE); lvItem.pszText = pszText; lvItem.cchTextMax = cchTextMax; int itemCount = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_GETITEMCOUNT, 0, 0); for (int i = 0; i < itemCount; i++) { lvItem.iItem = i; lvItem.iSubItem = 1; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_GETITEM, 0, lvItem); lvItem.iSubItem = 0; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_SETITEM, 0, lvItem); org.eclipse.swt.widgets.TCHAR buffer = new org.eclipse.swt.widgets.TCHAR(getCodePage(), cchTextMax); org.eclipse.swt.widgets.OS.MoveMemory(buffer, pszText, byteCount); items[i].text = buffer.toString(0, buffer.strlen()); if (((imageList) != null) && ((lvItem.iImage) != (-1))) { items[i].image = imageList.get(lvItem.iImage); } } if (pszText != 0) org.eclipse.swt.widgets.OS.HeapFree(hHeap, 0, pszText); } else { int hHeap = org.eclipse.swt.widgets.OS.GetProcessHeap(); int pszText = org.eclipse.swt.widgets.OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, TCHAR.sizeof); org.eclipse.swt.widgets.LVCOLUMN lvColumn = new org.eclipse.swt.widgets.LVCOLUMN(); lvColumn.mask = OS.LVCF_TEXT; lvColumn.pszText = pszText; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_SETCOLUMN, 0, lvColumn); if (pszText != 0) org.eclipse.swt.widgets.OS.HeapFree(hHeap, 0, pszText); org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_SETCOLUMNWIDTH, 0, OS.LVSCW_AUTOSIZE); } } if (count > 1) { if ((org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_DELETECOLUMN, index, 0)) == 0) { error(SWT.ERROR_ITEM_NOT_REMOVED); } } if (first) index = 0; java.lang.System.arraycopy(columns, (index + 1), columns, index, ((--count) - index)); columns[count] = null; if ((customDraw) && ((getColumnCount()) != 0)) { int columnCount = org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0); int itemCount = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_GETITEMCOUNT, 0, 0); for (int i = 0; i < itemCount; i++) { if ((items[i].cellBackground) != null) { int[] cellBackground = items[i].cellBackground; int[] temp = new int[columnCount]; java.lang.System.arraycopy(cellBackground, 0, temp, 0, index); java.lang.System.arraycopy(cellBackground, (index + 1), temp, index, (columnCount - index)); items[i].cellBackground = temp; } if ((items[i].cellForeground) != null) { int[] cellForeground = items[i].cellForeground; int[] temp = new int[columnCount]; java.lang.System.arraycopy(cellForeground, 0, temp, 0, index); java.lang.System.arraycopy(cellForeground, (index + 1), temp, index, (columnCount - index)); items[i].cellForeground = temp; } } } }
void createHandle() { boolean embedded = ((handle) != 0) && (((state) & (FOREIGN_HANDLE)) == 0); if (((handle) == 0) || embedded) { super.createHandle(); } else { state |= CANVAS; if (((style) & ((SWT.H_SCROLL) | (SWT.V_SCROLL))) == 0) { state |= THEME_BACKGROUND; } windowProc = org.eclipse.swt.widgets.OS.GetWindowLongPtr(handle, OS.GWL_WNDPROC); } if (!embedded) { int bits = org.eclipse.swt.widgets.OS.GetWindowLong(handle, OS.GWL_STYLE); bits &= ~((OS.WS_OVERLAPPED) | (OS.WS_CAPTION)); if (!(OS.IsWinCE)) bits |= OS.WS_POPUP; if (((style) & (SWT.TITLE)) != 0) bits |= OS.WS_CAPTION; if (((style) & (SWT.NO_TRIM)) == 0) { if (((style) & ((SWT.BORDER) | (SWT.RESIZE))) == 0) bits |= OS.WS_BORDER; } org.eclipse.swt.widgets.OS.SetWindowLong(handle, OS.GWL_STYLE, bits); int flags = ((((OS.SWP_DRAWFRAME) | (OS.SWP_NOMOVE)) | (OS.SWP_NOSIZE)) | (OS.SWP_NOZORDER)) | (OS.SWP_NOACTIVATE); SetWindowPos(handle, 0, 0, 0, 0, 0, flags); if (OS.IsWinCE) _setMaximized(true); if (OS.IsPPC) { psai = new org.eclipse.swt.widgets.SHACTIVATEINFO(); psai.cbSize = SHACTIVATEINFO.sizeof; } } if (OS.IsDBLocale) { hIMC = org.eclipse.swt.widgets.OS.ImmCreateContext(); if ((hIMC) != 0) org.eclipse.swt.widgets.OS.ImmAssociateContext(handle, hIMC); } }
public void minimize(org.eclipse.swt.snippets.CTabFolderEvent event) { folder.setMinimized(true); folder.setLayoutData(new org.eclipse.swt.snippets.GridData(SWT.FILL, SWT.FILL, true, false)); shell.layout(true); }
org.eclipse.swt.widgets.LRESULT WM_CONTEXTMENU(int wParam, int lParam) { if (wParam != (handle)) return null; if (OS.IsWinCE) return null; int x = 0; int y = 0; if (lParam != (-1)) { org.eclipse.swt.widgets.POINT pt = new org.eclipse.swt.widgets.POINT(); x = pt.x = ((short) (lParam & 65535)); y = pt.y = ((short) (lParam >> 16)); org.eclipse.swt.widgets.OS.ScreenToClient(handle, pt); org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); org.eclipse.swt.widgets.OS.GetClientRect(handle, rect); if (!(org.eclipse.swt.widgets.OS.PtInRect(rect, pt))) return null; } else { int pos = org.eclipse.swt.widgets.OS.GetMessagePos(); x = ((short) (pos & 65535)); y = ((short) (pos >> 16)); } return showMenu(x, y) ? LRESULT.ZERO : null; }
void setFont(org.eclipse.swt.custom.Font font, int tabs) { org.eclipse.swt.custom.TextLayout layout = new org.eclipse.swt.custom.TextLayout(device); layout.setFont(regularFont); if (font != null) { if ((boldFont) != null) boldFont.dispose(); if ((italicFont) != null) italicFont.dispose(); if ((boldItalicFont) != null) boldItalicFont.dispose(); boldFont = italicFont = boldItalicFont = null; regularFont = font; layout.setText(" "); layout.setFont(font); layout.setStyle(new org.eclipse.swt.custom.TextStyle(getFont(SWT.NORMAL), null, null), 0, 0); layout.setStyle(new org.eclipse.swt.custom.TextStyle(getFont(SWT.BOLD), null, null), 1, 1); layout.setStyle(new org.eclipse.swt.custom.TextStyle(getFont(SWT.ITALIC), null, null), 2, 2); layout.setStyle(new org.eclipse.swt.custom.TextStyle(getFont(((org.eclipse.swt.SWT.BOLD) | (org.eclipse.swt.SWT.ITALIC))), null, null), 3, 3); org.eclipse.swt.custom.FontMetrics metrics = layout.getLineMetrics(0); ascent = (metrics.getAscent()) + (metrics.getLeading()); descent = metrics.getDescent(); lineEndSpaceWidth = layout.getBounds(0, 0).width; boldFont.dispose(); italicFont.dispose(); boldItalicFont.dispose(); boldFont = italicFont = boldItalicFont = null; } layout.dispose(); layout = new org.eclipse.swt.custom.TextLayout(device); layout.setFont(regularFont); java.lang.StringBuffer tabBuffer = new java.lang.StringBuffer(tabs); for (int i = 0; i < tabs; i++) { tabBuffer.append(' '); } layout.setText(tabBuffer.toString()); tabWidth = layout.getBounds().width; layout.dispose(); }
public void copyArea(org.eclipse.swt.graphics.Image image, int x, int y) { if ((handle) == 0) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_GRAPHIC_DISPOSED); if (image == null) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NULL_ARGUMENT); if (((image.type) != (SWT.BITMAP)) || (image.isDisposed())) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_INVALID_ARGUMENT); org.eclipse.swt.graphics.Device device = data.device; int hDC = device.internal_new_GC(null); org.eclipse.swt.graphics.Rectangle rect = image.getBounds(); int memHdc = org.eclipse.swt.graphics.OS.CreateCompatibleDC(hDC); int hOldBitmap = org.eclipse.swt.graphics.OS.SelectObject(memHdc, image.handle); org.eclipse.swt.graphics.OS.BitBlt(memHdc, 0, 0, rect.width, rect.height, handle, x, y, OS.SRCCOPY); org.eclipse.swt.graphics.OS.SelectObject(memHdc, hOldBitmap); org.eclipse.swt.graphics.OS.DeleteDC(memHdc); device.internal_dispose_GC(hDC, null); }
void onDragSash(org.eclipse.swt.custom.Event event) { if ((event.detail) == (SWT.DRAG)) { org.eclipse.swt.custom.Rectangle area = getClientArea(); if ((orientation) == (SWT.HORIZONTAL)) { event.x = java.lang.Math.min(java.lang.Math.max(org.eclipse.swt.custom.SashForm.DRAG_MINIMUM, event.x), (((area.width) - (org.eclipse.swt.custom.SashForm.DRAG_MINIMUM)) - (SASH_WIDTH))); } else { event.y = java.lang.Math.min(java.lang.Math.max(org.eclipse.swt.custom.SashForm.DRAG_MINIMUM, event.y), (((area.height) - (org.eclipse.swt.custom.SashForm.DRAG_MINIMUM)) - (SASH_WIDTH))); } return; } org.eclipse.swt.custom.Sash sash = ((org.eclipse.swt.custom.Sash) (event.widget)); int sashIndex = -1; for (int i = 0; i < (sashes.length); i++) { if ((sashes[i]) == sash) { sashIndex = i; break; } } if (sashIndex == (-1)) return; org.eclipse.swt.custom.Control c1 = controls[sashIndex]; org.eclipse.swt.custom.Control c2 = controls[(sashIndex + 1)]; org.eclipse.swt.custom.Rectangle b1 = c1.getBounds(); org.eclipse.swt.custom.Rectangle b2 = c2.getBounds(); org.eclipse.swt.custom.Rectangle sashBounds = sash.getBounds(); org.eclipse.swt.custom.Rectangle area = getClientArea(); if ((orientation) == (SWT.HORIZONTAL)) { int shift = (event.x) - (sashBounds.x); b1.width += shift; b2.x += shift; b2.width -= shift; if (((b1.width) < (org.eclipse.swt.custom.SashForm.DRAG_MINIMUM)) || ((b2.width) < (org.eclipse.swt.custom.SashForm.DRAG_MINIMUM))) { return; } c1.setData(org.eclipse.swt.custom.SashForm.LAYOUT_RATIO, new java.lang.Long(((((((long) (b1.width)) << 16) + (area.width)) - 1) / (area.width)))); c2.setData(org.eclipse.swt.custom.SashForm.LAYOUT_RATIO, new java.lang.Long(((((((long) (b2.width)) << 16) + (area.width)) - 1) / (area.width)))); } else { int shift = (event.y) - (sashBounds.y); b1.height += shift; b2.y += shift; b2.height -= shift; if (((b1.height) < (org.eclipse.swt.custom.SashForm.DRAG_MINIMUM)) || ((b2.height) < (org.eclipse.swt.custom.SashForm.DRAG_MINIMUM))) { return; } c1.setData(org.eclipse.swt.custom.SashForm.LAYOUT_RATIO, new java.lang.Long(((((((long) (b1.height)) << 16) + (area.height)) - 1) / (area.height)))); c2.setData(org.eclipse.swt.custom.SashForm.LAYOUT_RATIO, new java.lang.Long(((((((long) (b2.height)) << 16) + (area.height)) - 1) / (area.height)))); } c1.setBounds(b1); sash.setBounds(event.x, event.y, event.width, event.height); c2.setBounds(b2); }
int parentingHandle() { return clientHandle; }
public void deselect(int index) { checkWidget(); boolean isSelected = (getSelectionIndex()) == index; setItems(items, (!isSelected), (!isSelected)); }
org.eclipse.swt.widgets.LRESULT WM_LBUTTONDOWN(int wParam, int lParam) { org.eclipse.swt.widgets.TVHITTESTINFO lpht = new org.eclipse.swt.widgets.TVHITTESTINFO(); lpht.x = ((short) (lParam & 65535)); lpht.y = ((short) (lParam >> 16)); org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_HITTEST, 0, lpht); if (((lpht.hItem) == 0) || (((lpht.flags) & (OS.TVHT_ONITEMBUTTON)) != 0)) { sendMouseEvent(SWT.MouseDown, 1, handle, OS.WM_LBUTTONDOWN, wParam, lParam); boolean fixSelection = false; boolean deselected = false; if (((lpht.hItem) != 0) && (((style) & (SWT.MULTI)) != 0)) { int hSelection = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETNEXTITEM, OS.TVGN_CARET, 0); if (hSelection != 0) { org.eclipse.swt.widgets.TVITEM tvItem = new org.eclipse.swt.widgets.TVITEM(); tvItem.mask = (OS.TVIF_STATE) | (OS.TVIF_PARAM); tvItem.hItem = lpht.hItem; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETITEM, 0, tvItem); if (((tvItem.state) & (OS.TVIS_EXPANDED)) != 0) { fixSelection = true; tvItem.stateMask = OS.TVIS_SELECTED; int hParent = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETNEXTITEM, OS.TVGN_PARENT, lpht.hItem); int hLast = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETNEXTITEM, OS.TVGN_LASTVISIBLE, lpht.hItem); int hNext = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETNEXTITEM, OS.TVGN_NEXTVISIBLE, lpht.hItem); while ((hNext != 0) && (hNext != hLast)) { tvItem.hItem = hNext; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETITEM, 0, tvItem); if (((tvItem.state) & (OS.TVIS_SELECTED)) != 0) deselected = true; tvItem.state = 0; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_SETITEM, 0, tvItem); if ((hNext = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETNEXTITEM, OS.TVGN_NEXTVISIBLE, hNext)) == 0) break; if (hParent == (org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETNEXTITEM, OS.TVGN_PARENT, hNext))) break; } } } } dragStarted = gestureCompleted = false; if (fixSelection) ignoreDeselect = ignoreSelect = lockSelection = true; int code = callWindowProc(handle, OS.WM_LBUTTONDOWN, wParam, lParam); if (fixSelection) ignoreDeselect = ignoreSelect = lockSelection = false; if ((dragStarted) && ((org.eclipse.swt.widgets.OS.GetCapture()) != (handle))) org.eclipse.swt.widgets.OS.SetCapture(handle); if (deselected) { org.eclipse.swt.widgets.TVITEM tvItem = new org.eclipse.swt.widgets.TVITEM(); tvItem.mask = OS.TVIF_PARAM; tvItem.hItem = lpht.hItem; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETITEM, 0, tvItem); org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); event.item = _getItem(tvItem.hItem, tvItem.lParam); postEvent(SWT.Selection, event); } return new org.eclipse.swt.widgets.LRESULT(code); } if (((style) & (SWT.CHECK)) != 0) { if (((lpht.flags) & (OS.TVHT_ONITEMSTATEICON)) != 0) { sendMouseEvent(SWT.MouseDown, 1, handle, OS.WM_LBUTTONDOWN, wParam, lParam); if ((org.eclipse.swt.widgets.OS.GetCapture()) != (handle)) org.eclipse.swt.widgets.OS.SetCapture(handle); org.eclipse.swt.widgets.TVITEM tvItem = new org.eclipse.swt.widgets.TVITEM(); tvItem.hItem = lpht.hItem; tvItem.mask = (OS.TVIF_PARAM) | (OS.TVIF_STATE); tvItem.stateMask = OS.TVIS_STATEIMAGEMASK; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETITEM, 0, tvItem); int state = (tvItem.state) >> 12; if ((state & 1) != 0) { state++; } else { --state; } tvItem.state = state << 12; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_SETITEM, 0, tvItem); if (!(OS.IsWinCE)) { int id = tvItem.hItem; if ((OS.COMCTL32_MAJOR) >= 6) { id = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_MAPHTREEITEMTOACCID, tvItem.hItem, 0); } org.eclipse.swt.widgets.OS.NotifyWinEvent(OS.EVENT_OBJECT_FOCUS, handle, OS.OBJID_CLIENT, id); } org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); event.item = _getItem(tvItem.hItem, tvItem.lParam); event.detail = SWT.CHECK; postEvent(SWT.Selection, event); return LRESULT.ZERO; } } org.eclipse.swt.widgets.TVITEM tvItem = new org.eclipse.swt.widgets.TVITEM(); tvItem.mask = OS.TVIF_STATE; tvItem.stateMask = OS.TVIS_SELECTED; boolean hittestSelected = false; if (((style) & (SWT.MULTI)) != 0) { tvItem.hItem = lpht.hItem; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETITEM, 0, tvItem); hittestSelected = ((tvItem.state) & (OS.TVIS_SELECTED)) != 0; } int hOldItem = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETNEXTITEM, OS.TVGN_CARET, 0); if (((style) & (SWT.MULTI)) != 0) { tvItem.hItem = hOldItem; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETITEM, 0, tvItem); if (hittestSelected || ((wParam & (OS.MK_CONTROL)) != 0)) { if ((drawCount) == 0) { org.eclipse.swt.widgets.OS.UpdateWindow(handle); org.eclipse.swt.widgets.OS.DefWindowProc(handle, OS.WM_SETREDRAW, 0, 0); } } else { deselectAll(); } } sendMouseEvent(SWT.MouseDown, 1, handle, OS.WM_LBUTTONDOWN, wParam, lParam); dragStarted = gestureCompleted = false; ignoreDeselect = ignoreSelect = true; int code = callWindowProc(handle, OS.WM_LBUTTONDOWN, wParam, lParam); ignoreDeselect = ignoreSelect = false; if ((dragStarted) && ((org.eclipse.swt.widgets.OS.GetCapture()) != (handle))) org.eclipse.swt.widgets.OS.SetCapture(handle); int hNewItem = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETNEXTITEM, OS.TVGN_CARET, 0); if (((style) & (SWT.SINGLE)) != 0) { if (hOldItem == hNewItem) { tvItem.mask = OS.TVIF_STATE; tvItem.state = OS.TVIS_SELECTED; tvItem.stateMask = OS.TVIS_SELECTED; tvItem.hItem = hNewItem; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_SETITEM, 0, tvItem); } } if (((style) & (SWT.MULTI)) != 0) { if (hittestSelected || ((wParam & (OS.MK_CONTROL)) != 0)) { if ((hOldItem == hNewItem) && (hOldItem == (lpht.hItem))) { if ((wParam & (OS.MK_CONTROL)) != 0) { tvItem.state ^= OS.TVIS_SELECTED; if (dragStarted) tvItem.state = OS.TVIS_SELECTED; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_SETITEM, 0, tvItem); } } else { if (((tvItem.state) & (OS.TVIS_SELECTED)) != 0) { tvItem.state = OS.TVIS_SELECTED; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_SETITEM, 0, tvItem); } if (((wParam & (OS.MK_CONTROL)) != 0) && (!(dragStarted))) { if (hittestSelected) { tvItem.state = 0; tvItem.hItem = lpht.hItem; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_SETITEM, 0, tvItem); } } } if ((drawCount) == 0) { org.eclipse.swt.widgets.RECT rect1 = new org.eclipse.swt.widgets.RECT(); org.eclipse.swt.widgets.RECT rect2 = new org.eclipse.swt.widgets.RECT(); rect1.left = hOldItem; rect2.left = hNewItem; int bits = org.eclipse.swt.widgets.OS.GetWindowLong(handle, OS.GWL_STYLE); int fItemRect = ((bits & (OS.TVS_FULLROWSELECT)) != 0) ? 0 : 1; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETITEMRECT, fItemRect, rect1); org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETITEMRECT, fItemRect, rect2); org.eclipse.swt.widgets.OS.DefWindowProc(handle, OS.WM_SETREDRAW, 1, 0); if (OS.IsWinCE) { org.eclipse.swt.widgets.OS.InvalidateRect(handle, rect1, false); org.eclipse.swt.widgets.OS.InvalidateRect(handle, rect2, false); org.eclipse.swt.widgets.OS.UpdateWindow(handle); } else { int flags = (OS.RDW_UPDATENOW) | (OS.RDW_INVALIDATE); org.eclipse.swt.widgets.OS.RedrawWindow(handle, rect1, 0, flags); org.eclipse.swt.widgets.OS.RedrawWindow(handle, rect2, 0, flags); } } } if ((wParam & (OS.MK_CONTROL)) == 0) { if ((!hittestSelected) || (!(dragStarted))) { tvItem.state = 0; int oldProc = org.eclipse.swt.widgets.OS.GetWindowLong(handle, OS.GWL_WNDPROC); org.eclipse.swt.widgets.OS.SetWindowLong(handle, OS.GWL_WNDPROC, org.eclipse.swt.widgets.Tree.TreeProc); if (((style) & (SWT.VIRTUAL)) != 0) { int hItem = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETNEXTITEM, OS.TVGN_ROOT, 0); deselect(hItem, tvItem, hNewItem); } else { for (int i = 0; i < (items.length); i++) { org.eclipse.swt.widgets.TreeItem item = items[i]; if ((item != null) && ((item.handle) != hNewItem)) { tvItem.hItem = item.handle; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_SETITEM, 0, tvItem); } } } tvItem.hItem = hNewItem; tvItem.state = OS.TVIS_SELECTED; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_SETITEM, 0, tvItem); org.eclipse.swt.widgets.OS.SetWindowLong(handle, OS.GWL_WNDPROC, oldProc); if ((wParam & (OS.MK_SHIFT)) != 0) { org.eclipse.swt.widgets.RECT rect1 = new org.eclipse.swt.widgets.RECT(); if ((hAnchor) == 0) hAnchor = hNewItem; rect1.left = hAnchor; if ((org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETITEMRECT, 1, rect1)) != 0) { org.eclipse.swt.widgets.RECT rect2 = rect2 = new org.eclipse.swt.widgets.RECT(); rect2.left = hNewItem; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETITEMRECT, 1, rect2); int flags = ((rect1.top) < (rect2.top)) ? OS.TVGN_NEXTVISIBLE : OS.TVGN_PREVIOUSVISIBLE; tvItem.state = OS.TVIS_SELECTED; int hItem = tvItem.hItem = hAnchor; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_SETITEM, 0, tvItem); while (hItem != hNewItem) { tvItem.hItem = hItem; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_SETITEM, 0, tvItem); hItem = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETNEXTITEM, flags, hItem); } } } } } } if ((wParam & (OS.MK_SHIFT)) == 0) hAnchor = hNewItem; if (!(gestureCompleted)) { tvItem.hItem = hNewItem; tvItem.mask = OS.TVIF_PARAM; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETITEM, 0, tvItem); org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); event.item = _getItem(tvItem.hItem, tvItem.lParam); postEvent(SWT.Selection, event); } gestureCompleted = false; if (dragStarted) { org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); event.x = ((short) (lParam & 65535)); event.y = ((short) (lParam >> 16)); postEvent(SWT.DragDetect, event); } else { sendMouseEvent(SWT.MouseUp, 1, handle, OS.WM_LBUTTONUP, wParam, lParam); } dragStarted = false; return new org.eclipse.swt.widgets.LRESULT(code); }
int Alert(int aParent, int aDialogTitle, int aText) { final org.eclipse.swt.browser.Browser browser = getBrowser(aParent); int length = org.eclipse.swt.browser.XPCOM.strlen_PRUnichar(aDialogTitle); char[] dest = new char[length]; org.eclipse.swt.browser.XPCOM.memmove(dest, aDialogTitle, (length * 2)); java.lang.String titleLabel = new java.lang.String(dest); length = org.eclipse.swt.browser.XPCOM.strlen_PRUnichar(aText); dest = new char[length]; org.eclipse.swt.browser.XPCOM.memmove(dest, aText, (length * 2)); java.lang.String textLabel = new java.lang.String(dest); if (browser != null) { for (int i = 0; i < (org.eclipse.swt.browser.PromptService2.certErrorCodes.length); i++) { if ((textLabel.indexOf(org.eclipse.swt.browser.PromptService2.certErrorCodes[i])) != (-1)) { org.eclipse.swt.browser.Mozilla mozilla = ((org.eclipse.swt.browser.Mozilla) (browser.webBrowser)); mozilla.isRetrievingBadCert = true; browser.setUrl(mozilla.lastNavigateURL); return XPCOM.NS_OK; } } } org.eclipse.swt.browser.Shell shell = (browser == null) ? new org.eclipse.swt.browser.Shell() : browser.getShell(); org.eclipse.swt.browser.MessageBox messageBox = new org.eclipse.swt.browser.MessageBox(shell, ((SWT.OK) | (SWT.ICON_WARNING))); messageBox.setText(titleLabel); messageBox.setMessage(textLabel); messageBox.open(); return XPCOM.NS_OK; }
org.eclipse.swt.widgets.LRESULT wmNotifyToolTip(org.eclipse.swt.widgets.NMHDR hdr, int wParam, int lParam) { if (OS.IsWinCE) return null; if ((toolTipText) != null) return null; switch (hdr.code) { case OS.NM_CUSTOMDRAW : { org.eclipse.swt.widgets.NMTTCUSTOMDRAW nmcd = new org.eclipse.swt.widgets.NMTTCUSTOMDRAW(); org.eclipse.swt.widgets.OS.MoveMemory(nmcd, lParam, NMTTCUSTOMDRAW.sizeof); return wmNotifyToolTip(nmcd, lParam); } case OS.TTN_GETDISPINFOA : case OS.TTN_GETDISPINFOW : case OS.TTN_SHOW : { if ((hdr.code) != (OS.TTN_SHOW)) tipRequested = true; int code = callWindowProc(handle, OS.WM_NOTIFY, wParam, lParam); if ((hdr.code) != (OS.TTN_SHOW)) tipRequested = false; if (((hooks(SWT.MeasureItem)) || (hooks(SWT.EraseItem))) || (hooks(SWT.PaintItem))) { org.eclipse.swt.widgets.LVHITTESTINFO pinfo = new org.eclipse.swt.widgets.LVHITTESTINFO(); int pos = org.eclipse.swt.widgets.OS.GetMessagePos(); org.eclipse.swt.widgets.POINT pt = new org.eclipse.swt.widgets.POINT(); org.eclipse.swt.widgets.OS.POINTSTOPOINT(pt, pos); org.eclipse.swt.widgets.OS.ScreenToClient(handle, pt); pinfo.x = pt.x; pinfo.y = pt.y; if ((org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_SUBITEMHITTEST, 0, pinfo)) != (-1)) { org.eclipse.swt.widgets.TableItem item = _getItem(pinfo.iItem); int hDC = org.eclipse.swt.widgets.OS.GetDC(handle); int oldFont = 0; int newFont = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.WM_GETFONT, 0, 0); if (newFont != 0) oldFont = org.eclipse.swt.widgets.OS.SelectObject(hDC, newFont); int hFont = item.fontHandle(pinfo.iSubItem); if (hFont != (-1)) hFont = org.eclipse.swt.widgets.OS.SelectObject(hDC, hFont); org.eclipse.swt.widgets.Event event = sendMeasureItemEvent(item, pinfo.iItem, pinfo.iSubItem, hDC); if ((!(isDisposed())) && (!(item.isDisposed()))) { org.eclipse.swt.widgets.RECT itemRect = new org.eclipse.swt.widgets.RECT(); org.eclipse.swt.widgets.OS.SetRect(itemRect, event.x, event.y, ((event.x) + (event.width)), ((event.y) + (event.height))); if ((hdr.code) == (OS.TTN_SHOW)) { org.eclipse.swt.widgets.RECT toolRect = toolTipRect(itemRect); org.eclipse.swt.widgets.OS.MapWindowPoints(handle, 0, toolRect, 2); int hwndToolTip = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_GETTOOLTIPS, 0, 0); int flags = (OS.SWP_NOACTIVATE) | (OS.SWP_NOZORDER); int width = (toolRect.right) - (toolRect.left); int height = (toolRect.bottom) - (toolRect.top); SetWindowPos(hwndToolTip, 0, toolRect.left, toolRect.top, width, height, flags); } else { org.eclipse.swt.widgets.NMTTDISPINFO lpnmtdi = null; if ((hdr.code) == (OS.TTN_GETDISPINFOA)) { lpnmtdi = new org.eclipse.swt.widgets.NMTTDISPINFOA(); org.eclipse.swt.widgets.OS.MoveMemory(((org.eclipse.swt.widgets.NMTTDISPINFOA) (lpnmtdi)), lParam, NMTTDISPINFOA.sizeof); if ((lpnmtdi.lpszText) != 0) { org.eclipse.swt.widgets.OS.MoveMemory(lpnmtdi.lpszText, new byte[1], 1); org.eclipse.swt.widgets.OS.MoveMemory(lParam, ((org.eclipse.swt.widgets.NMTTDISPINFOA) (lpnmtdi)), NMTTDISPINFOA.sizeof); } } else { lpnmtdi = new org.eclipse.swt.widgets.NMTTDISPINFOW(); org.eclipse.swt.widgets.OS.MoveMemory(((org.eclipse.swt.widgets.NMTTDISPINFOW) (lpnmtdi)), lParam, NMTTDISPINFOW.sizeof); if ((lpnmtdi.lpszText) != 0) { org.eclipse.swt.widgets.OS.MoveMemory(lpnmtdi.lpszText, new char[1], 2); org.eclipse.swt.widgets.OS.MoveMemory(lParam, ((org.eclipse.swt.widgets.NMTTDISPINFOW) (lpnmtdi)), NMTTDISPINFOW.sizeof); } } org.eclipse.swt.widgets.RECT cellRect = item.getBounds(pinfo.iItem, pinfo.iSubItem, true, true, true, true, hDC); if ((itemRect.right) > (cellRect.right)) { java.lang.String string = " "; if (string != null) { org.eclipse.swt.widgets.Shell shell = getShell(); char[] chars = new char[(string.length()) + 1]; string.getChars(0, string.length(), chars, 0); if ((hdr.code) == (OS.TTN_GETDISPINFOA)) { byte[] bytes = new byte[(chars.length) * 2]; org.eclipse.swt.widgets.OS.WideCharToMultiByte(getCodePage(), 0, chars, chars.length, bytes, bytes.length, null, null); shell.setToolTipText(lpnmtdi, bytes); org.eclipse.swt.widgets.OS.MoveMemory(lParam, ((org.eclipse.swt.widgets.NMTTDISPINFOA) (lpnmtdi)), NMTTDISPINFOA.sizeof); } else { shell.setToolTipText(lpnmtdi, chars); org.eclipse.swt.widgets.OS.MoveMemory(lParam, ((org.eclipse.swt.widgets.NMTTDISPINFOW) (lpnmtdi)), NMTTDISPINFOW.sizeof); } } } } } if (hFont != (-1)) hFont = org.eclipse.swt.widgets.OS.SelectObject(hDC, hFont); if (newFont != 0) org.eclipse.swt.widgets.OS.SelectObject(hDC, oldFont); org.eclipse.swt.widgets.OS.ReleaseDC(handle, hDC); } } return new org.eclipse.swt.widgets.LRESULT(code); } } return null; }
int menuPositionProc(int menu, int x, int y, int push_in, int user_data) { org.eclipse.swt.widgets.GtkRequisition requisition = new org.eclipse.swt.widgets.GtkRequisition(); org.eclipse.swt.widgets.OS.gtk_widget_size_request(menu, requisition); int screenHeight = org.eclipse.swt.widgets.OS.gdk_screen_height(); int reqy = this.y; if (((reqy + (requisition.height)) > screenHeight) && ((reqy - (requisition.height)) >= 0)) { reqy -= requisition.height; } int screenWidth = org.eclipse.swt.widgets.OS.gdk_screen_width(); int reqx = this.x; if (((style) & (SWT.RIGHT_TO_LEFT)) != 0) { if ((reqx - (requisition.width)) >= 0) reqx -= requisition.width; } else { if ((reqx + (requisition.width)) > screenWidth) reqx -= requisition.width; } if (x != 0) org.eclipse.swt.widgets.OS.memmove(x, new int[]{ reqx }, 4); if (y != 0) org.eclipse.swt.widgets.OS.memmove(y, new int[]{ reqy }, 4); if (push_in != 0) org.eclipse.swt.widgets.OS.memmove(push_in, new int[]{ 1 }, 4); return 0; }
private java.util.Vector getDirectionRuns(int logicalStart, int length) { java.util.Vector directionRuns = new java.util.Vector(); int logicalEnd = (logicalStart + length) - 1; int segmentLogicalStart = logicalStart; int segmentLogicalEnd = segmentLogicalStart; if (logicalEnd < (getTextLength())) { int bidiSegmentIndex = 0; int bidiSegmentEnd = bidiSegments[(bidiSegmentIndex + 1)]; while ((bidiSegmentIndex < ((bidiSegments.length) - 2)) && (bidiSegmentEnd <= logicalStart)) { bidiSegmentIndex++; bidiSegmentEnd = bidiSegments[(bidiSegmentIndex + 1)]; } while (segmentLogicalEnd <= logicalEnd) { boolean isRightToLeftSegment = isRightToLeft(segmentLogicalStart); while (((segmentLogicalEnd < logicalEnd) && ((isRightToLeftSegment && (((order[(segmentLogicalEnd + 1)]) + 1) == (order[segmentLogicalEnd]))) || ((isRightToLeftSegment == false) && (((order[(segmentLogicalEnd + 1)]) - 1) == (order[segmentLogicalEnd]))))) && ((segmentLogicalEnd + 1) < bidiSegmentEnd)) { segmentLogicalEnd++; } directionRuns.addElement(new org.eclipse.swt.custom.StyledTextBidi.DirectionRun(segmentLogicalStart, segmentLogicalEnd)); segmentLogicalStart = ++segmentLogicalEnd; if ((segmentLogicalEnd == bidiSegmentEnd) && (bidiSegmentIndex < ((bidiSegments.length) - 2))) { bidiSegmentIndex++; bidiSegmentEnd = bidiSegments[(bidiSegmentIndex + 1)]; } } } return directionRuns; }
void addLast(org.eclipse.swt.widgets.RunnableLock lock) { boolean wake = false; synchronized(messageLock) { if ((messages) == null) messages = new org.eclipse.swt.widgets.RunnableLock[4]; if ((messageCount) == (messages.length)) { org.eclipse.swt.widgets.RunnableLock[] newMessages = new org.eclipse.swt.widgets.RunnableLock[(messageCount) + 4]; java.lang.System.arraycopy(messages, 0, newMessages, 0, messageCount); messages = newMessages; } messages[((messageCount)++)] = lock; wake = (messageCount) == 1; } if (wake) display.wakeThread(); }
public void setVisible(boolean visible) { checkWidget(); if ((drawCount) != 0) { if ((((state) & (HIDDEN)) == 0) == visible) return; } else { if (visible == (org.eclipse.swt.widgets.OS.IsWindowVisible(handle))) return; } if (visible) { sendEvent(SWT.Show); if (isDisposed()) return; if (OS.IsHPC) { if ((menuBar) != null) { int hwndCB = menuBar.hwndCB; org.eclipse.swt.widgets.OS.CommandBar_DrawMenuBar(hwndCB, 0); } } if ((drawCount) != 0) { state &= ~(HIDDEN); } else { if (OS.IsWinCE) { org.eclipse.swt.widgets.OS.ShowWindow(handle, OS.SW_SHOW); } else { if ((menuBar) != null) { display.removeBar(menuBar); org.eclipse.swt.widgets.OS.DrawMenuBar(handle); } org.eclipse.swt.widgets.STARTUPINFO lpStartUpInfo = Display.lpStartupInfo; if ((lpStartUpInfo != null) && (((lpStartUpInfo.dwFlags) & (OS.STARTF_USESHOWWINDOW)) != 0)) { org.eclipse.swt.widgets.OS.ShowWindow(handle, lpStartUpInfo.wShowWindow); } else { org.eclipse.swt.widgets.OS.ShowWindow(handle, swFlags); } } if (isDisposed()) return; opened = true; if (!(moved)) { moved = true; org.eclipse.swt.widgets.Point location = getLocation(); oldX = location.x; oldY = location.y; } if (!(resized)) { resized = true; org.eclipse.swt.widgets.Rectangle rect = getClientArea(); oldWidth = rect.width; oldHeight = rect.height; } boolean update = true; if (((!(OS.IsWinCE)) && ((OS.WIN32_VERSION) >= (org.eclipse.swt.widgets.OS.VERSION(6, 0)))) && (!(org.eclipse.swt.widgets.OS.IsAppThemed()))) { update = !(org.eclipse.swt.widgets.OS.IsHungAppWindow(handle)); } if (update) org.eclipse.swt.widgets.OS.UpdateWindow(handle); } } else { if (!(OS.IsWinCE)) { if (org.eclipse.swt.widgets.OS.IsIconic(handle)) { swFlags = OS.SW_SHOWMINNOACTIVE; } else { if (org.eclipse.swt.widgets.OS.IsZoomed(handle)) { swFlags = OS.SW_SHOWMAXIMIZED; } else { swFlags = OS.SW_SHOWNOACTIVATE; } } } if ((drawCount) != 0) { state |= HIDDEN; } else { org.eclipse.swt.widgets.OS.ShowWindow(handle, OS.SW_HIDE); } if (isDisposed()) return; sendEvent(SWT.Hide); } }
public org.eclipse.swt.widgets.Rectangle getClientArea() { checkWidget(); if ((scrollView) != null) { org.eclipse.swt.widgets.NSSize size = scrollView.contentSize(); return new org.eclipse.swt.widgets.Rectangle(0, 0, ((int) (size.width)), ((int) (size.height))); } else { org.eclipse.swt.widgets.NSRect rect = view.bounds(); return new org.eclipse.swt.widgets.Rectangle(0, 0, ((int) (rect.width)), ((int) (rect.height))); } }
org.eclipse.swt.widgets.LRESULT sendMouseDownEvent(int type, int button, int msg, int wParam, int lParam) { org.eclipse.swt.widgets.LVHITTESTINFO pinfo = new org.eclipse.swt.widgets.LVHITTESTINFO(); pinfo.x = ((short) (lParam & 65535)); pinfo.y = ((short) (lParam >> 16)); org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_HITTEST, 0, pinfo); org.eclipse.swt.widgets.Display display = this.display; display.captureChanged = false; if (!(sendMouseEvent(type, button, handle, msg, wParam, lParam))) { if ((!(display.captureChanged)) && (!(isDisposed()))) { if ((org.eclipse.swt.widgets.OS.GetCapture()) != (handle)) org.eclipse.swt.widgets.OS.SetCapture(handle); } return LRESULT.ZERO; } org.eclipse.swt.widgets.OS.SetFocus(handle); if (((((style) & (SWT.SINGLE)) != 0) || (hooks(SWT.MouseDown))) || (hooks(SWT.MouseUp))) { if ((pinfo.iItem) == (-1)) { if ((!(display.captureChanged)) && (!(isDisposed()))) { if ((org.eclipse.swt.widgets.OS.GetCapture()) != (handle)) org.eclipse.swt.widgets.OS.SetCapture(handle); } return LRESULT.ZERO; } } boolean forceSelect = false; int count = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_GETSELECTEDCOUNT, 0, 0); if ((count == 1) && ((pinfo.iItem) != (-1))) { org.eclipse.swt.widgets.LVITEM lvItem = new org.eclipse.swt.widgets.LVITEM(); lvItem.mask = OS.LVIF_STATE; lvItem.stateMask = OS.LVIS_SELECTED; lvItem.iItem = pinfo.iItem; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_GETITEM, 0, lvItem); if (((lvItem.state) & (OS.LVIS_SELECTED)) != 0) { forceSelect = true; } } boolean dragDetect = (((state) & (DRAG_DETECT)) != 0) && (hooks(SWT.DragDetect)); if (!dragDetect) { int flags = (OS.LVHT_ONITEMICON) | (OS.LVHT_ONITEMLABEL); dragDetect = ((pinfo.iItem) == (-1)) || (((pinfo.flags) & flags) == 0); } if (!dragDetect) display.runDragDrop = false; int code = callWindowProc(handle, msg, wParam, lParam, forceSelect); if (!dragDetect) display.runDragDrop = true; if ((dragStarted) || (!dragDetect)) { if ((!(display.captureChanged)) && (!(isDisposed()))) { if ((org.eclipse.swt.widgets.OS.GetCapture()) != (handle)) org.eclipse.swt.widgets.OS.SetCapture(handle); } } else { int flags = (OS.LVHT_ONITEMLABEL) | (OS.LVHT_ONITEMICON); boolean fakeMouseUp = ((pinfo.flags) & flags) != 0; if ((!fakeMouseUp) && (((style) & (SWT.MULTI)) != 0)) { fakeMouseUp = ((pinfo.flags) & (OS.LVHT_ONITEMSTATEICON)) == 0; } if (fakeMouseUp) { sendMouseEvent(SWT.MouseUp, button, handle, msg, wParam, lParam); } } dragStarted = false; return new org.eclipse.swt.widgets.LRESULT(code); }
void arrowEvent(org.eclipse.swt.custom.Event event) { switch (event.type) { case SWT.FocusIn : { handleFocus(SWT.FocusIn); break; } case SWT.MouseDown : { org.eclipse.swt.custom.Event mouseEvent = new org.eclipse.swt.custom.Event(); mouseEvent.button = event.button; mouseEvent.count = event.count; mouseEvent.stateMask = event.stateMask; mouseEvent.time = event.time; mouseEvent.x = event.x; mouseEvent.y = event.y; notifyListeners(SWT.MouseDown, mouseEvent); event.doit = mouseEvent.doit; break; } case SWT.MouseUp : { org.eclipse.swt.custom.Event mouseEvent = new org.eclipse.swt.custom.Event(); mouseEvent.button = event.button; mouseEvent.count = event.count; mouseEvent.stateMask = event.stateMask; mouseEvent.time = event.time; mouseEvent.x = event.x; mouseEvent.y = event.y; notifyListeners(SWT.MouseUp, mouseEvent); event.doit = mouseEvent.doit; break; } case SWT.Selection : { text.setFocus(); dropDown((!(isDropped()))); break; } } }
void createHandle() { org.eclipse.swt.widgets.SWTBox widget = ((org.eclipse.swt.widgets.SWTBox) (new org.eclipse.swt.widgets.SWTBox().alloc())); widget.initWithFrame(new org.eclipse.swt.widgets.NSRect()); widget.setTag(jniRef); widget.setTitle(org.eclipse.swt.widgets.NSString.stringWith("")); if (((style) & (SWT.SEPARATOR)) != 0) { widget.setBoxType(OS.NSBoxSeparator); } else { widget.setBorderType(OS.NSNoBorder); org.eclipse.swt.widgets.NSImageView imageWidget = ((org.eclipse.swt.widgets.NSImageView) (new org.eclipse.swt.widgets.SWTImageView().alloc())); imageWidget.initWithFrame(new org.eclipse.swt.widgets.NSRect()); imageWidget.setTag(jniRef); org.eclipse.swt.widgets.NSTextField textWidget = ((org.eclipse.swt.widgets.NSTextField) (new org.eclipse.swt.widgets.NSTextField().alloc())); textWidget.initWithFrame(new org.eclipse.swt.widgets.NSRect()); textWidget.setBordered(false); textWidget.setEditable(false); textWidget.setDrawsBackground(false); textWidget.setTag(jniRef); if (((style) & (SWT.WRAP)) != 0) { org.eclipse.swt.widgets.NSTextFieldCell cell = new org.eclipse.swt.widgets.NSTextFieldCell(textWidget.cell()); cell.setWraps(true); } widget.addSubview_(imageWidget); widget.addSubview_(textWidget); widget.setContentView(textWidget); imageView = imageWidget; textView = textWidget; } view = widget; parent.contentView().addSubview_(widget); }
org.eclipse.swt.widgets.LRESULT WM_SYSKEYDOWN(int wParam, int lParam) { org.eclipse.swt.widgets.Display display = getDisplay(); if (wParam != (OS.VK_F10)) { if ((lParam & 536870912) == 0) return null; } if (!(OS.IsWinCE)) { if ((org.eclipse.swt.widgets.OS.MapVirtualKey(wParam, 2)) != 0) return null; } switch (wParam) { case OS.VK_SHIFT : case OS.VK_MENU : case OS.VK_CONTROL : case OS.VK_CAPITAL : case OS.VK_NUMLOCK : case OS.VK_SCROLL : if ((lParam & 1073741824) != 0) return null; } display.lastAscii = 0; display.lastKey = wParam; display.lastVirtual = true; display.lastNull = false; if (!(sendKeyEvent(SWT.KeyDown, OS.WM_SYSKEYDOWN, wParam, lParam))) { return LRESULT.ZERO; } return null; }
private AccessibleFactory(int widgetType) { super(); if ((org.eclipse.swt.accessibility.AccessibleFactory.DefaultParentType) == 0) return; widgetTypeName = org.eclipse.swt.accessibility.OS.g_type_name(widgetType); int widgetTypeNameLength = (org.eclipse.swt.accessibility.OS.strlen(widgetTypeName)) + 1; byte[] buffer = new byte[widgetTypeNameLength]; org.eclipse.swt.accessibility.OS.memmove(buffer, widgetTypeName, widgetTypeNameLength); byte[] factoryName = new byte[((org.eclipse.swt.accessibility.AccessibleFactory.FACTORY_TYPENAME.length) + widgetTypeNameLength) - 1]; java.lang.System.arraycopy(org.eclipse.swt.accessibility.AccessibleFactory.FACTORY_TYPENAME, 0, factoryName, 0, org.eclipse.swt.accessibility.AccessibleFactory.FACTORY_TYPENAME.length); java.lang.System.arraycopy(buffer, 0, factoryName, ((org.eclipse.swt.accessibility.AccessibleFactory.FACTORY_TYPENAME.length) - 1), widgetTypeNameLength); if ((org.eclipse.swt.accessibility.OS.g_type_from_name(factoryName)) == 0) { int registry = org.eclipse.swt.accessibility.ATK.atk_get_default_registry(); int previousFactory = org.eclipse.swt.accessibility.ATK.atk_registry_get_factory(registry, widgetType); objectParentType = org.eclipse.swt.accessibility.ATK.atk_object_factory_get_accessible_type(previousFactory); if ((objectParentType) == 0) objectParentType = org.eclipse.swt.accessibility.AccessibleFactory.DefaultParentType; int factoryParentType = org.eclipse.swt.accessibility.OS.g_type_from_name(org.eclipse.swt.accessibility.AccessibleFactory.FACTORY_PARENTTYPENAME); gTypeInfo_base_init_factory = new org.eclipse.swt.accessibility.Callback(this, "gTypeInfo_base_init_factory", 1); int address = gTypeInfo_base_init_factory.getAddress(); if (address == 0) org.eclipse.swt.accessibility.SWT.error(SWT.ERROR_NO_MORE_CALLBACKS); org.eclipse.swt.accessibility.GTypeInfo typeInfo = new org.eclipse.swt.accessibility.GTypeInfo(); typeInfo.base_init = address; typeInfo.class_size = ((short) (org.eclipse.swt.accessibility.ATK.AtkObjectFactoryClass_sizeof())); typeInfo.instance_size = ((short) (org.eclipse.swt.accessibility.ATK.AtkObjectFactory_sizeof())); handle = org.eclipse.swt.accessibility.OS.g_malloc(GTypeInfo.sizeof); org.eclipse.swt.accessibility.OS.memmove(handle, typeInfo, GTypeInfo.sizeof); int swtFactory = org.eclipse.swt.accessibility.OS.g_type_register_static(factoryParentType, factoryName, handle, 0); org.eclipse.swt.accessibility.ATK.atk_registry_set_factory_type(registry, widgetType, swtFactory); } }
void createSurface() { if ((surface) != 0) return; if ((transparentPixel) != (-1)) createMask(); int[] w = new int[1]; int[] h = new int[1]; if ((OS.GTK_VERSION) >= (org.eclipse.swt.graphics.OS.VERSION(2, 24, 0))) { org.eclipse.swt.graphics.OS.gdk_pixmap_get_size(pixmap, w, h); } else { org.eclipse.swt.graphics.OS.gdk_drawable_get_size(pixmap, w, h); } int width = w[0]; int height = h[0]; this.width = width; this.height = height; if ((((mask) != 0) || ((alpha) != (-1))) || ((alphaData) != null)) { int pixbuf = org.eclipse.swt.graphics.OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, true, 8, width, height); if (pixbuf == 0) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NO_HANDLES); int colormap = org.eclipse.swt.graphics.OS.gdk_colormap_get_system(); org.eclipse.swt.graphics.OS.gdk_pixbuf_get_from_drawable(pixbuf, pixmap, colormap, 0, 0, 0, 0, width, height); int stride = org.eclipse.swt.graphics.OS.gdk_pixbuf_get_rowstride(pixbuf); int pixels = org.eclipse.swt.graphics.OS.gdk_pixbuf_get_pixels(pixbuf); byte[] line = new byte[stride]; int oa; int or; int og; int ob; if (OS.BIG_ENDIAN) { oa = 0; or = 1; og = 2; ob = 3; } else { oa = 3; or = 2; og = 1; ob = 0; } if (((mask) != 0) && ((org.eclipse.swt.graphics.OS.gdk_drawable_get_depth(mask)) == 1)) { int maskPixbuf = org.eclipse.swt.graphics.OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, false, 8, width, height); if (maskPixbuf == 0) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NO_HANDLES); org.eclipse.swt.graphics.OS.gdk_pixbuf_get_from_drawable(maskPixbuf, mask, 0, 0, 0, 0, 0, width, height); int maskStride = org.eclipse.swt.graphics.OS.gdk_pixbuf_get_rowstride(maskPixbuf); int maskPixels = org.eclipse.swt.graphics.OS.gdk_pixbuf_get_pixels(maskPixbuf); byte[] maskLine = new byte[maskStride]; int offset = pixels; int maskOffset = maskPixels; for (int y = 0; y < height; y++) { org.eclipse.swt.graphics.OS.memmove(line, offset, stride); org.eclipse.swt.graphics.OS.memmove(maskLine, maskOffset, maskStride); for (int x = 0, offset1 = 0; x < width; x++ , offset1 += 4) { if ((maskLine[(x * 3)]) == 0) { line[(offset1 + 0)] = line[(offset1 + 1)] = line[(offset1 + 2)] = line[(offset1 + 3)] = 0; } else { byte r = line[(offset1 + 0)]; byte g = line[(offset1 + 1)]; byte b = line[(offset1 + 2)]; line[(offset1 + oa)] = ((byte) (255)); line[(offset1 + or)] = r; line[(offset1 + og)] = g; line[(offset1 + ob)] = b; } } org.eclipse.swt.graphics.OS.memmove(offset, line, stride); offset += stride; maskOffset += maskStride; } org.eclipse.swt.graphics.OS.g_object_unref(maskPixbuf); } else if ((alpha) != (-1)) { int offset = pixels; for (int y = 0; y < height; y++) { org.eclipse.swt.graphics.OS.memmove(line, offset, stride); for (int x = 0, offset1 = 0; x < width; x++ , offset1 += 4) { int r = (((line[(offset1 + 0)]) & 255) * (alpha)) + 128; r = (r + (r >> 8)) >> 8; int g = (((line[(offset1 + 1)]) & 255) * (alpha)) + 128; g = (g + (g >> 8)) >> 8; int b = (((line[(offset1 + 2)]) & 255) * (alpha)) + 128; b = (b + (b >> 8)) >> 8; line[(offset1 + oa)] = ((byte) (alpha)); line[(offset1 + or)] = ((byte) (r)); line[(offset1 + og)] = ((byte) (g)); line[(offset1 + ob)] = ((byte) (b)); } org.eclipse.swt.graphics.OS.memmove(offset, line, stride); offset += stride; } } else if ((alphaData) != null) { int offset = pixels; for (int y = 0; y < (h[0]); y++) { org.eclipse.swt.graphics.OS.memmove(line, offset, stride); for (int x = 0, offset1 = 0; x < width; x++ , offset1 += 4) { int alpha = (alphaData[((y * (w[0])) + x)]) & 255; int r = (((line[(offset1 + 0)]) & 255) * alpha) + 128; r = (r + (r >> 8)) >> 8; int g = (((line[(offset1 + 1)]) & 255) * alpha) + 128; g = (g + (g >> 8)) >> 8; int b = (((line[(offset1 + 2)]) & 255) * alpha) + 128; b = (b + (b >> 8)) >> 8; line[(offset1 + oa)] = ((byte) (alpha)); line[(offset1 + or)] = ((byte) (r)); line[(offset1 + og)] = ((byte) (g)); line[(offset1 + ob)] = ((byte) (b)); } org.eclipse.swt.graphics.OS.memmove(offset, line, stride); offset += stride; } } else { int offset = pixels; for (int y = 0; y < (h[0]); y++) { org.eclipse.swt.graphics.OS.memmove(line, offset, stride); for (int x = 0, offset1 = 0; x < width; x++ , offset1 += 4) { byte r = line[(offset1 + 0)]; byte g = line[(offset1 + 1)]; byte b = line[(offset1 + 2)]; line[(offset1 + oa)] = ((byte) (255)); line[(offset1 + or)] = r; line[(offset1 + og)] = g; line[(offset1 + ob)] = b; } org.eclipse.swt.graphics.OS.memmove(offset, line, stride); offset += stride; } } surface = org.eclipse.swt.graphics.Cairo.cairo_image_surface_create(Cairo.CAIRO_FORMAT_ARGB32, width, height); int data = org.eclipse.swt.graphics.Cairo.cairo_image_surface_get_data(surface); org.eclipse.swt.graphics.OS.memmove(data, pixels, (stride * height)); org.eclipse.swt.graphics.Cairo.cairo_surface_mark_dirty(surface); org.eclipse.swt.graphics.OS.g_object_unref(pixbuf); } else { int xDisplay = org.eclipse.swt.graphics.OS.gdk_x11_display_get_xdisplay(org.eclipse.swt.graphics.OS.gdk_display_get_default()); int xDrawable = org.eclipse.swt.graphics.OS.GDK_PIXMAP_XID(pixmap); int xVisual = org.eclipse.swt.graphics.OS.gdk_x11_visual_get_xvisual(org.eclipse.swt.graphics.OS.gdk_visual_get_system()); surface = org.eclipse.swt.graphics.Cairo.cairo_xlib_surface_create(xDisplay, xDrawable, xVisual, width, height); } if (((transparentPixel) != (-1)) && ((memGC) != null)) destroyMask(); }
void setPen(int newColor, int newWidth, int lineStyle, int capStyle, int joinStyle, int[] dashes) { boolean extPen = false; boolean changed = false; int style; int color; int width; int size; int hPen = org.eclipse.swt.graphics.OS.GetCurrentObject(handle, OS.OBJ_PEN); if ((size = org.eclipse.swt.graphics.OS.GetObject(hPen, 0, ((org.eclipse.swt.graphics.LOGPEN) (null)))) == (LOGPEN.sizeof)) { org.eclipse.swt.graphics.LOGPEN logPen = new org.eclipse.swt.graphics.LOGPEN(); org.eclipse.swt.graphics.OS.GetObject(hPen, LOGPEN.sizeof, logPen); color = logPen.lopnColor; width = logPen.x; style = logPen.lopnStyle; if ((width < 1) && ((newWidth >= 1) || (lineStyle == (OS.PS_USERSTYLE)))) { if (capStyle == (-1)) capStyle = OS.PS_ENDCAP_FLAT; if (joinStyle == (-1)) joinStyle = OS.PS_JOIN_MITER; } } else { org.eclipse.swt.graphics.EXTLOGPEN logPen = new org.eclipse.swt.graphics.EXTLOGPEN(); if (size <= (EXTLOGPEN.sizeof)) { org.eclipse.swt.graphics.OS.GetObject(hPen, size, logPen); } else { int hHeap = org.eclipse.swt.graphics.OS.GetProcessHeap(); int ptr = org.eclipse.swt.graphics.OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, size); org.eclipse.swt.graphics.OS.GetObject(hPen, size, ptr); org.eclipse.swt.graphics.OS.MoveMemory(logPen, ptr, EXTLOGPEN.sizeof); org.eclipse.swt.graphics.OS.HeapFree(hHeap, 0, ptr); } color = logPen.elpColor; width = logPen.elpWidth; style = logPen.elpPenStyle; extPen = true; if (newWidth == 0) { if (((dashes == null) && ((style & (OS.PS_ENDCAP_MASK)) == (OS.PS_ENDCAP_FLAT))) && ((style & (OS.PS_JOIN_MASK)) == (OS.PS_JOIN_MITER))) { style &= ~(((OS.PS_ENDCAP_MASK) | (OS.PS_JOIN_MASK)) | (OS.PS_TYPE_MASK)); extPen = false; } } } if (newColor != (-1)) { if (newColor != color) { color = newColor; changed = true; } } if (newWidth != (-1)) { if (newWidth != width) { width = newWidth; changed = true; } } if (lineStyle != (-1)) { if (((style & (OS.PS_STYLE_MASK)) != lineStyle) || ((style & (OS.PS_STYLE_MASK)) == (OS.PS_USERSTYLE))) { style = (style & (~(OS.PS_STYLE_MASK))) | lineStyle; changed = true; } } if (capStyle != (-1)) { if ((style & (OS.PS_ENDCAP_MASK)) != capStyle) { style = (style & (~(OS.PS_ENDCAP_MASK))) | capStyle; changed = true; } } if (joinStyle != (-1)) { if ((style & (OS.PS_JOIN_MASK)) != joinStyle) { style = (style & (~(OS.PS_JOIN_MASK))) | joinStyle; changed = true; } } if (!changed) return; if ((style & (OS.PS_STYLE_MASK)) != (OS.PS_USERSTYLE)) dashes = null; int newPen; if ((!(OS.IsWinCE)) && ((extPen || (width >= 1)) || ((style & (OS.PS_STYLE_MASK)) == (OS.PS_USERSTYLE)))) { org.eclipse.swt.graphics.LOGBRUSH logBrush = new org.eclipse.swt.graphics.LOGBRUSH(); logBrush.lbStyle = OS.BS_SOLID; logBrush.lbColor = color; newPen = org.eclipse.swt.graphics.OS.ExtCreatePen((style | (OS.PS_GEOMETRIC)), java.lang.Math.max(1, width), logBrush, (dashes != null ? dashes.length : 0), dashes); } else { newPen = org.eclipse.swt.graphics.OS.CreatePen(style, width, color); } org.eclipse.swt.graphics.OS.SelectObject(handle, newPen); if ((data.hPen) != 0) org.eclipse.swt.graphics.OS.DeleteObject(data.hPen); data.hPen = newPen; data.lineWidth = width; if ((data.gdipPen) != 0) { org.eclipse.swt.graphics.Gdip.Pen_delete(data.gdipPen); data.gdipPen = 0; } }
void updateBar(int selection, int minimum, int maximum, int thumb) { org.eclipse.swt.widgets.NSScroller widget = ((org.eclipse.swt.widgets.NSScroller) (view)); selection = java.lang.Math.max(minimum, java.lang.Math.min((maximum - thumb), selection)); int range = (maximum - thumb) - minimum; float fraction = (range <= 0) ? 1 : ((float) (selection - minimum)) / range; float knob = (range <= 0) ? 1 : ((float) (thumb)) / (maximum - minimum); widget.setFloatValue(fraction, knob); widget.setEnabled((range > 0)); }
public void handleEvent(org.eclipse.swt.browser.Event e) { switch (e.type) { case SWT.Dispose : { if (ignoreDispose) { ignoreDispose = false; break; } ignoreDispose = true; notifyListeners(e.type, e); e.type = SWT.NONE; org.eclipse.swt.browser.Shell shell = getShell(); shell.removeListener(SWT.Resize, this); shell.removeListener(SWT.Show, this); shell.removeListener(SWT.Hide, this); org.eclipse.swt.browser.Control c = this; do { c.removeListener(SWT.Show, this); c.removeListener(SWT.Hide, this); c = c.getParent(); } while (c != shell ); e.display.setData(org.eclipse.swt.browser.Browser.ADD_WIDGET_KEY, new java.lang.Object[]{ new java.lang.Integer(webViewHandle), null }); org.eclipse.swt.browser.WebKit.objc_msgSend(webView, WebKit.S_setFrameLoadDelegate, 0); org.eclipse.swt.browser.WebKit.objc_msgSend(webView, WebKit.S_setResourceLoadDelegate, 0); org.eclipse.swt.browser.WebKit.objc_msgSend(webView, WebKit.S_setUIDelegate, 0); org.eclipse.swt.browser.WebKit.objc_msgSend(webView, WebKit.S_setPolicyDelegate, 0); org.eclipse.swt.browser.WebKit.objc_msgSend(notificationCenter, WebKit.S_removeObserver, delegate); org.eclipse.swt.browser.WebKit.objc_msgSend(delegate, WebKit.S_release); if (OS.HIVIEW) org.eclipse.swt.browser.OS.DisposeControl(webViewHandle); html = null; break; } case SWT.Hide : { org.eclipse.swt.browser.CGRect bounds = new org.eclipse.swt.browser.CGRect(); bounds.x = bounds.y = -(org.eclipse.swt.browser.Browser.MIN_SIZE); bounds.width = bounds.height = org.eclipse.swt.browser.Browser.MIN_SIZE; org.eclipse.swt.browser.OS.HIViewSetFrame(webViewHandle, bounds); break; } case SWT.Show : { org.eclipse.swt.browser.Shell shell = getShell(); org.eclipse.swt.browser.Composite parent = this; while ((parent != shell) && ((parent.getVisible()) || (parent == (e.widget)))) { parent = parent.getParent(); } if (!((parent.getVisible()) || (parent == (e.widget)))) return; org.eclipse.swt.browser.CGRect bounds = new org.eclipse.swt.browser.CGRect(); if (OS.HIVIEW) { org.eclipse.swt.browser.OS.HIViewGetBounds(handle, bounds); int[] contentView = new int[1]; org.eclipse.swt.browser.OS.HIViewFindByID(org.eclipse.swt.browser.OS.HIViewGetRoot(org.eclipse.swt.browser.OS.GetControlOwner(handle)), org.eclipse.swt.browser.OS.kHIViewWindowContentID(), contentView); org.eclipse.swt.browser.OS.HIViewConvertRect(bounds, handle, contentView[0]); } else { org.eclipse.swt.browser.OS.HIViewGetFrame(handle, bounds); } if ((bounds.width) <= (org.eclipse.swt.browser.Browser.MIN_SIZE)) bounds.width = org.eclipse.swt.browser.Browser.MIN_SIZE; if ((bounds.height) <= (org.eclipse.swt.browser.Browser.MIN_SIZE)) bounds.height = org.eclipse.swt.browser.Browser.MIN_SIZE; org.eclipse.swt.browser.OS.HIViewSetFrame(webViewHandle, bounds); break; } case SWT.Resize : { if (!(isVisible())) return; org.eclipse.swt.browser.CGRect bounds = new org.eclipse.swt.browser.CGRect(); if (OS.HIVIEW) { org.eclipse.swt.browser.OS.HIViewGetBounds(handle, bounds); int[] contentView = new int[1]; org.eclipse.swt.browser.OS.HIViewFindByID(org.eclipse.swt.browser.OS.HIViewGetRoot(org.eclipse.swt.browser.OS.GetControlOwner(handle)), org.eclipse.swt.browser.OS.kHIViewWindowContentID(), contentView); org.eclipse.swt.browser.OS.HIViewConvertRect(bounds, handle, contentView[0]); } else { org.eclipse.swt.browser.OS.HIViewGetFrame(handle, bounds); } if ((bounds.width) <= (org.eclipse.swt.browser.Browser.MIN_SIZE)) bounds.width = org.eclipse.swt.browser.Browser.MIN_SIZE; if ((bounds.height) <= (org.eclipse.swt.browser.Browser.MIN_SIZE)) bounds.height = org.eclipse.swt.browser.Browser.MIN_SIZE; if ((e.widget) == (getShell())) { (bounds.x)++; org.eclipse.swt.browser.OS.HIViewSetFrame(webViewHandle, bounds); (bounds.x)--; } org.eclipse.swt.browser.OS.HIViewSetFrame(webViewHandle, bounds); break; } } }
void handleKey(org.eclipse.swt.custom.Event event) { int action; mouseDoubleClick = false; if ((event.keyCode) != 0) { action = getKeyBinding(((event.keyCode) | (event.stateMask))); } else { action = getKeyBinding(((event.character) | (event.stateMask))); if (action == (org.eclipse.swt.SWT.NULL)) { if (((((event.stateMask) & (org.eclipse.swt.SWT.CTRL)) != 0) && ((event.character) >= 0)) && ((event.character) <= 31)) { int c = (event.character) + 64; action = getKeyBinding((c | (event.stateMask))); } } } if (action == (org.eclipse.swt.SWT.NULL)) { boolean ignore = false; if (isCarbon) { ignore = (((event.stateMask) ^ (org.eclipse.swt.SWT.COMMAND)) == 0) || (((event.stateMask) ^ ((org.eclipse.swt.SWT.COMMAND) | (org.eclipse.swt.SWT.SHIFT))) == 0); } else { ignore = (((((event.stateMask) ^ (org.eclipse.swt.SWT.ALT)) == 0) || (((event.stateMask) ^ (org.eclipse.swt.SWT.CTRL)) == 0)) || (((event.stateMask) ^ ((org.eclipse.swt.SWT.ALT) | (org.eclipse.swt.SWT.SHIFT))) == 0)) || (((event.stateMask) ^ ((org.eclipse.swt.SWT.CTRL) | (org.eclipse.swt.SWT.SHIFT))) == 0); } if ((((((!ignore) && ((event.character) > 31)) && ((event.character) != (org.eclipse.swt.SWT.DEL))) || ((event.character) == (org.eclipse.swt.SWT.CR))) || ((event.character) == (org.eclipse.swt.SWT.LF))) || ((event.character) == (org.eclipse.swt.custom.StyledText.TAB))) { doContent(event.character); } } else { invokeAction(action); } }
org.eclipse.swt.widgets.LRESULT WM_PRINTCLIENT(int wParam, int lParam) { org.eclipse.swt.widgets.LRESULT result = super.WM_PRINTCLIENT(wParam, lParam); if (result != null) return result; if (((OS.COMCTL32_MAJOR) >= 6) && (org.eclipse.swt.widgets.OS.IsAppThemed())) { int nSavedDC = org.eclipse.swt.widgets.OS.SaveDC(wParam); int code = callWindowProc(handle, OS.WM_PRINTCLIENT, wParam, lParam); org.eclipse.swt.widgets.OS.RestoreDC(wParam, nSavedDC); return new org.eclipse.swt.widgets.LRESULT(code); } return result; }
org.eclipse.swt.widgets.LRESULT WM_SIZE(int wParam, int lParam) { int oldIndex = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LB_GETTOPINDEX, 0, 0); org.eclipse.swt.widgets.LRESULT result = super.WM_SIZE(wParam, lParam); if (!(isDisposed())) { org.eclipse.swt.widgets.SCROLLINFO info = new org.eclipse.swt.widgets.SCROLLINFO(); info.cbSize = SCROLLINFO.sizeof; info.fMask = OS.SIF_POS; if (org.eclipse.swt.widgets.OS.GetScrollInfo(handle, OS.SB_HORZ, info)) { if ((info.nPos) != 0) org.eclipse.swt.widgets.OS.InvalidateRect(handle, null, true); } int newIndex = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LB_GETTOPINDEX, 0, 0); if (oldIndex != newIndex) org.eclipse.swt.widgets.OS.InvalidateRect(handle, null, true); } return result; }
public void handleEvent(org.eclipse.swt.custom.Event event) { switch (event.type) { case SWT.Dispose : onDispose(event); break; case SWT.DragDetect : onDragDetect(event); break; case SWT.FocusIn : onFocus(event); break; case SWT.FocusOut : onFocus(event); break; case SWT.KeyDown : onKeyDown(event); break; case SWT.MenuDetect : onMenuDetect(event); break; case SWT.MouseDoubleClick : onMouseDoubleClick(event); break; case SWT.MouseDown : onMouse(event); break; case SWT.MouseEnter : onMouse(event); break; case SWT.MouseExit : onMouse(event); break; case SWT.MouseHover : onMouse(event); break; case SWT.MouseMove : onMouse(event); break; case SWT.MouseUp : onMouse(event); break; case SWT.Paint : onPaint(event); break; case SWT.Resize : onResize(event); break; case SWT.Traverse : onTraverse(event); break; case SWT.Selection : onSelection(event); break; } }
public void setSelection(int index) { checkWidget(); if ((index < 0) || (index >= (items.length))) return; if ((selectedIndex) == index) { showItem(items[index]); return; } int oldIndex = selectedIndex; selectedIndex = index; if (oldIndex != (-1)) { items[oldIndex].closeImageState = org.eclipse.swt.custom.CTabFolder.NONE; } items[selectedIndex].closeImageState = org.eclipse.swt.custom.CTabFolder.NORMAL; org.eclipse.swt.custom.Control control = items[index].control; if ((control != null) && (!(control.isDisposed()))) { control.setBounds(getClientArea()); control.setVisible(true); } if (oldIndex != (-1)) { control = items[oldIndex].control; if ((control != null) && (!(control.isDisposed()))) { control.setVisible(false); } } showItem(items[index]); redraw(); }
public Image(org.eclipse.swt.graphics.Device device, java.lang.String filename) { super(device); device = this.device; if (filename == null) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NULL_ARGUMENT); boolean gdip = true; try { device.checkGDIP(); } catch (org.eclipse.swt.graphics.SWTException e) { gdip = false; } if ((gdip && ((OS.PTR_SIZEOF) == 8)) && (filename.toLowerCase().endsWith(".gif"))) gdip = false; if (gdip) { int length = filename.length(); char[] chars = new char[length + 1]; filename.getChars(0, length, chars, 0); int bitmap = org.eclipse.swt.graphics.Gdip.Bitmap_new(chars, false); if (bitmap != 0) { int error = SWT.ERROR_NO_HANDLES; int status = org.eclipse.swt.graphics.Gdip.Image_GetLastStatus(bitmap); if (status == 0) { if (filename.toLowerCase().endsWith(".ico")) { this.type = SWT.ICON; int[] hicon = new int[1]; status = org.eclipse.swt.graphics.Gdip.Bitmap_GetHICON(bitmap, hicon); this.handle = hicon[0]; } else { this.type = SWT.BITMAP; int width = org.eclipse.swt.graphics.Gdip.Image_GetWidth(bitmap); int height = org.eclipse.swt.graphics.Gdip.Image_GetHeight(bitmap); int pixelFormat = org.eclipse.swt.graphics.Gdip.Image_GetPixelFormat(bitmap); switch (pixelFormat) { case Gdip.PixelFormat16bppRGB555 : case Gdip.PixelFormat16bppRGB565 : this.handle = org.eclipse.swt.graphics.Image.createDIB(width, height, 16); break; case Gdip.PixelFormat24bppRGB : this.handle = org.eclipse.swt.graphics.Image.createDIB(width, height, 24); break; case Gdip.PixelFormat32bppRGB : case Gdip.PixelFormat16bppGrayScale : case Gdip.PixelFormat48bppRGB : case Gdip.PixelFormat32bppPARGB : case Gdip.PixelFormat64bppARGB : case Gdip.PixelFormat64bppPARGB : this.handle = org.eclipse.swt.graphics.Image.createDIB(width, height, 32); break; } if ((this.handle) != 0) { int hDC = device.internal_new_GC(null); int srcHDC = org.eclipse.swt.graphics.OS.CreateCompatibleDC(hDC); int oldSrcBitmap = org.eclipse.swt.graphics.OS.SelectObject(srcHDC, this.handle); int graphics = org.eclipse.swt.graphics.Gdip.Graphics_new(srcHDC); if (graphics != 0) { org.eclipse.swt.graphics.Rect rect = new org.eclipse.swt.graphics.Rect(); rect.Width = width; rect.Height = height; status = org.eclipse.swt.graphics.Gdip.Graphics_DrawImage(graphics, bitmap, rect, 0, 0, width, height, Gdip.UnitPixel, 0, 0, 0); if (status != 0) { error = SWT.ERROR_INVALID_IMAGE; org.eclipse.swt.graphics.OS.DeleteObject(handle); this.handle = 0; } org.eclipse.swt.graphics.Gdip.Graphics_delete(graphics); } org.eclipse.swt.graphics.OS.SelectObject(srcHDC, oldSrcBitmap); org.eclipse.swt.graphics.OS.DeleteDC(srcHDC); device.internal_dispose_GC(hDC, null); } else { int lockedBitmapData = org.eclipse.swt.graphics.Gdip.BitmapData_new(); if (lockedBitmapData != 0) { status = org.eclipse.swt.graphics.Gdip.Bitmap_LockBits(bitmap, 0, 0, pixelFormat, lockedBitmapData); if (status == 0) { org.eclipse.swt.graphics.BitmapData bitmapData = new org.eclipse.swt.graphics.BitmapData(); org.eclipse.swt.graphics.Gdip.MoveMemory(bitmapData, lockedBitmapData); int stride = bitmapData.Stride; int pixels = bitmapData.Scan0; int depth = 0; int scanlinePad = 4; int transparentPixel = -1; switch (bitmapData.PixelFormat) { case Gdip.PixelFormat1bppIndexed : depth = 1; break; case Gdip.PixelFormat4bppIndexed : depth = 4; break; case Gdip.PixelFormat8bppIndexed : depth = 8; break; case Gdip.PixelFormat16bppARGB1555 : case Gdip.PixelFormat16bppRGB555 : case Gdip.PixelFormat16bppRGB565 : depth = 16; break; case Gdip.PixelFormat24bppRGB : depth = 24; break; case Gdip.PixelFormat32bppRGB : case Gdip.PixelFormat32bppARGB : depth = 32; break; } if (depth != 0) { org.eclipse.swt.graphics.PaletteData paletteData = null; switch (bitmapData.PixelFormat) { case Gdip.PixelFormat1bppIndexed : case Gdip.PixelFormat4bppIndexed : case Gdip.PixelFormat8bppIndexed : int paletteSize = org.eclipse.swt.graphics.Gdip.Image_GetPaletteSize(bitmap); int hHeap = org.eclipse.swt.graphics.OS.GetProcessHeap(); int palette = org.eclipse.swt.graphics.OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, paletteSize); if (palette == 0) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NO_HANDLES); org.eclipse.swt.graphics.Gdip.Image_GetPalette(bitmap, palette, paletteSize); org.eclipse.swt.graphics.ColorPalette colorPalette = new org.eclipse.swt.graphics.ColorPalette(); org.eclipse.swt.graphics.Gdip.MoveMemory(colorPalette, palette, ColorPalette.sizeof); int[] entries = new int[colorPalette.Count]; org.eclipse.swt.graphics.OS.MoveMemory(entries, (palette + 8), ((entries.length) * 4)); org.eclipse.swt.graphics.OS.HeapFree(hHeap, 0, palette); org.eclipse.swt.graphics.RGB[] rgbs = new org.eclipse.swt.graphics.RGB[colorPalette.Count]; paletteData = new org.eclipse.swt.graphics.PaletteData(rgbs); for (int i = 0; i < (entries.length); i++) { if (((((entries[i]) >> 24) & 255) == 0) && (((colorPalette.Flags) & (Gdip.PaletteFlagsHasAlpha)) != 0)) { transparentPixel = i; } rgbs[i] = new org.eclipse.swt.graphics.RGB((((entries[i]) & 16711680) >> 16), (((entries[i]) & 65280) >> 8), (((entries[i]) & 255) >> 0)); } break; case Gdip.PixelFormat16bppARGB1555 : case Gdip.PixelFormat16bppRGB555 : paletteData = new org.eclipse.swt.graphics.PaletteData(31744, 992, 31); break; case Gdip.PixelFormat16bppRGB565 : paletteData = new org.eclipse.swt.graphics.PaletteData(63488, 2016, 31); break; case Gdip.PixelFormat24bppRGB : paletteData = new org.eclipse.swt.graphics.PaletteData(255, 65280, 16711680); break; case Gdip.PixelFormat32bppRGB : case Gdip.PixelFormat32bppARGB : paletteData = new org.eclipse.swt.graphics.PaletteData(65280, 16711680, -16777216); break; } byte[] data = new byte[stride * height]; byte[] alphaData = null; org.eclipse.swt.graphics.OS.MoveMemory(data, pixels, data.length); switch (bitmapData.PixelFormat) { case Gdip.PixelFormat16bppARGB1555 : alphaData = new byte[width * height]; for (int i = 1, j = 0; i < (data.length); i += 2 , j++) { alphaData[j] = ((byte) ((((data[i]) & 128) != 0) ? 255 : 0)); } break; case Gdip.PixelFormat32bppARGB : alphaData = new byte[width * height]; for (int i = 3, j = 0; i < (data.length); i += 4 , j++) { alphaData[j] = data[i]; } break; } org.eclipse.swt.graphics.ImageData img = new org.eclipse.swt.graphics.ImageData(width, height, depth, paletteData, scanlinePad, data); img.transparentPixel = transparentPixel; img.alphaData = alphaData; init(img); } org.eclipse.swt.graphics.Gdip.Bitmap_UnlockBits(bitmap, lockedBitmapData); } else { error = SWT.ERROR_INVALID_IMAGE; } org.eclipse.swt.graphics.Gdip.BitmapData_delete(lockedBitmapData); } } } } org.eclipse.swt.graphics.Gdip.Bitmap_delete(bitmap); if (status == 0) { if ((this.handle) == 0) org.eclipse.swt.graphics.SWT.error(error); return; } } } init(new org.eclipse.swt.graphics.ImageData(filename)); init(); }
org.eclipse.swt.layout.Point layout(org.eclipse.swt.layout.Composite composite, boolean move, int x, int y, int width, int height, boolean flushCache) { if ((numColumns) < 1) { return new org.eclipse.swt.layout.Point((((marginLeft) + ((marginWidth) * 2)) + (marginRight)), (((marginTop) + ((marginHeight) * 2)) + (marginBottom))); } int count = 0; org.eclipse.swt.layout.Control[] children = composite.getChildren(); for (int i = 0; i < (children.length); i++) { org.eclipse.swt.layout.Control control = children[i]; org.eclipse.swt.layout.GridData data = ((org.eclipse.swt.layout.GridData) (control.getLayoutData())); if ((data == null) || (!(data.exclude))) { children[(count++)] = children[i]; } } for (int i = 0; i < count; i++) { org.eclipse.swt.layout.Control child = children[i]; org.eclipse.swt.layout.GridData data = ((org.eclipse.swt.layout.GridData) (child.getLayoutData())); if (data == null) child.setLayoutData((data = new org.eclipse.swt.layout.GridData())); if (flushCache) data.flushCache(); data.computeSize(child, data.widthHint, data.heightHint, flushCache); if ((data.grabExcessHorizontalSpace) && ((data.minimumWidth) > 0)) { if ((data.cacheWidth) < (data.minimumWidth)) { int trim = 0; if (child instanceof org.eclipse.swt.layout.Scrollable) { org.eclipse.swt.layout.Rectangle rect = ((org.eclipse.swt.layout.Scrollable) (child)).computeTrim(0, 0, 0, 0); trim = rect.width; } else { trim = (child.getBorderWidth()) * 2; } data.cacheWidth = data.cacheHeight = SWT.DEFAULT; data.computeSize(child, java.lang.Math.max(0, ((data.minimumWidth) - trim)), data.heightHint, false); } } if ((data.grabExcessVerticalSpace) && ((data.minimumHeight) > 0)) { data.cacheHeight = java.lang.Math.max(data.cacheHeight, data.minimumHeight); } } int row = 0; int column = 0; int rowCount = 0; int columnCount = numColumns; org.eclipse.swt.layout.Control[][] grid = new org.eclipse.swt.layout.Control[4][columnCount]; for (int i = 0; i < count; i++) { org.eclipse.swt.layout.Control child = children[i]; org.eclipse.swt.layout.GridData data = ((org.eclipse.swt.layout.GridData) (child.getLayoutData())); int hSpan = java.lang.Math.max(1, java.lang.Math.min(data.horizontalSpan, columnCount)); int vSpan = java.lang.Math.max(1, data.verticalSpan); while (true) { int lastRow = row + vSpan; if (lastRow >= (grid.length)) { org.eclipse.swt.layout.Control[][] newGrid = new org.eclipse.swt.layout.Control[lastRow + 4][columnCount]; java.lang.System.arraycopy(grid, 0, newGrid, 0, grid.length); grid = newGrid; } if ((grid[row]) == null) { grid[row] = new org.eclipse.swt.layout.Control[columnCount]; } while ((column < columnCount) && ((grid[row][column]) != null)) { column++; } int endCount = column + hSpan; if (endCount <= columnCount) { int index = column; while ((index < endCount) && ((grid[row][index]) == null)) { index++; } if (index == endCount) break; column = index; } if ((column + hSpan) >= columnCount) { column = 0; row++; } } for (int j = 0; j < vSpan; j++) { if ((grid[(row + j)]) == null) { grid[(row + j)] = new org.eclipse.swt.layout.Control[columnCount]; } for (int k = 0; k < hSpan; k++) { grid[(row + j)][(column + k)] = child; } } rowCount = java.lang.Math.max(rowCount, (row + vSpan)); column += hSpan; } int availableWidth = (width - ((horizontalSpacing) * (columnCount - 1))) - (((marginLeft) + ((marginWidth) * 2)) + (marginRight)); int expandCount = 0; int[] widths = new int[columnCount]; int[] minWidths = new int[columnCount]; boolean[] expandColumn = new boolean[columnCount]; for (int j = 0; j < columnCount; j++) { for (int i = 0; i < rowCount; i++) { org.eclipse.swt.layout.GridData data = getData(grid, i, j, rowCount, columnCount, true); if (data != null) { int hSpan = java.lang.Math.max(1, java.lang.Math.min(data.horizontalSpan, columnCount)); if (hSpan == 1) { int w = (data.cacheWidth) + (data.horizontalIndent); widths[j] = java.lang.Math.max(widths[j], w); if (data.grabExcessHorizontalSpace) { if (!(expandColumn[j])) expandCount++; expandColumn[j] = true; } if ((!(data.grabExcessHorizontalSpace)) || ((data.minimumWidth) != 0)) { w = ((!(data.grabExcessHorizontalSpace)) || ((data.minimumWidth) == (SWT.DEFAULT))) ? data.cacheWidth : data.minimumWidth; w += data.horizontalIndent; minWidths[j] = java.lang.Math.max(minWidths[j], w); } } } } for (int i = 0; i < rowCount; i++) { org.eclipse.swt.layout.GridData data = getData(grid, i, j, rowCount, columnCount, false); if (data != null) { int hSpan = java.lang.Math.max(1, java.lang.Math.min(data.horizontalSpan, columnCount)); if (hSpan > 1) { int spanWidth = 0; int spanMinWidth = 0; int spanExpandCount = 0; for (int k = 0; k < hSpan; k++) { spanWidth += widths[(j - k)]; spanMinWidth += minWidths[(j - k)]; if (expandColumn[(j - k)]) spanExpandCount++; } if ((data.grabExcessHorizontalSpace) && (spanExpandCount == 0)) { expandCount++; expandColumn[j] = true; } int w = (((data.cacheWidth) + (data.horizontalIndent)) - spanWidth) - ((hSpan - 1) * (horizontalSpacing)); if (w > 0) { if (makeColumnsEqualWidth) { int equalWidth = (w + spanWidth) / hSpan; int remainder = (w + spanWidth) % hSpan; int last = -1; for (int k = 0; k < hSpan; k++) { widths[(last = j - k)] = java.lang.Math.max(equalWidth, widths[(j - k)]); } if (last > (-1)) widths[last] += remainder; } else { if (spanExpandCount == 0) { widths[j] += w; } else { int delta = w / spanExpandCount; int remainder = w % spanExpandCount; int last = -1; for (int k = 0; k < hSpan; k++) { if (expandColumn[(j - k)]) { widths[(last = j - k)] += delta; } } if (last > (-1)) widths[last] += remainder; } } } if ((!(data.grabExcessHorizontalSpace)) || ((data.minimumWidth) != 0)) { w = ((!(data.grabExcessHorizontalSpace)) || ((data.minimumWidth) == (SWT.DEFAULT))) ? data.cacheWidth : data.minimumWidth; w += ((data.horizontalIndent) - spanMinWidth) - ((hSpan - 1) * (horizontalSpacing)); if (w > 0) { if (spanExpandCount == 0) { minWidths[j] += w; } else { int delta = w / spanExpandCount; int remainder = w % spanExpandCount; int last = -1; for (int k = 0; k < hSpan; k++) { if (expandColumn[(j - k)]) { minWidths[(last = j - k)] += delta; } } if (last > (-1)) minWidths[last] += remainder; } } } } } } } if (makeColumnsEqualWidth) { int minColumnWidth = 0; int columnWidth = 0; for (int i = 0; i < columnCount; i++) { minColumnWidth = java.lang.Math.max(minColumnWidth, minWidths[i]); columnWidth = java.lang.Math.max(columnWidth, widths[i]); } columnWidth = ((width == (SWT.DEFAULT)) || (expandCount == 0)) ? columnWidth : java.lang.Math.max(minColumnWidth, (availableWidth / columnCount)); for (int i = 0; i < columnCount; i++) { expandColumn[i] = expandCount > 0; widths[i] = columnWidth; } } else { if ((width != (SWT.DEFAULT)) && (expandCount > 0)) { int totalWidth = 0; for (int i = 0; i < columnCount; i++) { totalWidth += widths[i]; } int c = expandCount; int delta = (availableWidth - totalWidth) / c; int remainder = (availableWidth - totalWidth) % c; int last = -1; while (totalWidth != availableWidth) { for (int j = 0; j < columnCount; j++) { if (expandColumn[j]) { if (((widths[j]) + delta) > (minWidths[j])) { widths[(last = j)] = (widths[j]) + delta; } else { widths[j] = minWidths[j]; expandColumn[j] = false; c--; } } } if (last > (-1)) widths[last] += remainder; for (int j = 0; j < columnCount; j++) { for (int i = 0; i < rowCount; i++) { org.eclipse.swt.layout.GridData data = getData(grid, i, j, rowCount, columnCount, false); if (data != null) { int hSpan = java.lang.Math.max(1, java.lang.Math.min(data.horizontalSpan, columnCount)); if (hSpan > 1) { if ((!(data.grabExcessHorizontalSpace)) || ((data.minimumWidth) != 0)) { int spanWidth = 0; int spanExpandCount = 0; for (int k = 0; k < hSpan; k++) { spanWidth += widths[(j - k)]; if (expandColumn[(j - k)]) spanExpandCount++; } int w = ((!(data.grabExcessHorizontalSpace)) || ((data.minimumWidth) == (SWT.DEFAULT))) ? data.cacheWidth : data.minimumWidth; w += ((data.horizontalIndent) - spanWidth) - ((hSpan - 1) * (horizontalSpacing)); if (w > 0) { if (spanExpandCount == 0) { widths[j] += w; } else { int delta2 = w / spanExpandCount; int remainder2 = w % spanExpandCount; int last2 = -1; for (int k = 0; k < hSpan; k++) { if (expandColumn[(j - k)]) { widths[(last2 = j - k)] += delta2; } } if (last2 > (-1)) widths[last2] += remainder2; } } } } } } } if (c == 0) break; totalWidth = 0; for (int i = 0; i < columnCount; i++) { totalWidth += widths[i]; } delta = (availableWidth - totalWidth) / c; remainder = (availableWidth - totalWidth) % c; last = -1; } } } org.eclipse.swt.layout.GridData[] flush = null; int flushLength = 0; if (width != (SWT.DEFAULT)) { for (int j = 0; j < columnCount; j++) { for (int i = 0; i < rowCount; i++) { org.eclipse.swt.layout.GridData data = getData(grid, i, j, rowCount, columnCount, false); if (data != null) { if ((data.heightHint) == (SWT.DEFAULT)) { org.eclipse.swt.layout.Control child = grid[i][j]; int hSpan = java.lang.Math.max(1, java.lang.Math.min(data.horizontalSpan, columnCount)); int currentWidth = 0; for (int k = 0; k < hSpan; k++) { currentWidth += widths[(j - k)]; } currentWidth += ((hSpan - 1) * (horizontalSpacing)) - (data.horizontalIndent); if (((currentWidth != (data.cacheWidth)) && ((data.horizontalAlignment) == (SWT.FILL))) || ((data.cacheWidth) > currentWidth)) { int trim = 0; if (child instanceof org.eclipse.swt.layout.Scrollable) { org.eclipse.swt.layout.Rectangle rect = ((org.eclipse.swt.layout.Scrollable) (child)).computeTrim(0, 0, 0, 0); trim = rect.width; } else { trim = (child.getBorderWidth()) * 2; } data.cacheWidth = data.cacheHeight = SWT.DEFAULT; data.computeSize(child, java.lang.Math.max(0, (currentWidth - trim)), data.heightHint, false); if ((data.grabExcessVerticalSpace) && ((data.minimumHeight) > 0)) { data.cacheHeight = java.lang.Math.max(data.cacheHeight, data.minimumHeight); } if (flush == null) flush = new org.eclipse.swt.layout.GridData[count]; flush[(flushLength++)] = data; } } } } } } int availableHeight = (height - ((verticalSpacing) * (rowCount - 1))) - (((marginTop) + ((marginHeight) * 2)) + (marginBottom)); expandCount = 0; int[] heights = new int[rowCount]; int[] minHeights = new int[rowCount]; boolean[] expandRow = new boolean[rowCount]; for (int i = 0; i < rowCount; i++) { for (int j = 0; j < columnCount; j++) { org.eclipse.swt.layout.GridData data = getData(grid, i, j, rowCount, columnCount, true); if (data != null) { int vSpan = java.lang.Math.max(1, java.lang.Math.min(data.verticalSpan, rowCount)); if (vSpan == 1) { int h = (data.cacheHeight) + (data.verticalIndent); heights[i] = java.lang.Math.max(heights[i], h); if (data.grabExcessVerticalSpace) { if (!(expandRow[i])) expandCount++; expandRow[i] = true; } if ((!(data.grabExcessVerticalSpace)) || ((data.minimumHeight) != 0)) { h = ((!(data.grabExcessVerticalSpace)) || ((data.minimumHeight) == (SWT.DEFAULT))) ? data.cacheHeight : data.minimumHeight; h += data.verticalIndent; minHeights[i] = java.lang.Math.max(minHeights[i], h); } } } } for (int j = 0; j < columnCount; j++) { org.eclipse.swt.layout.GridData data = getData(grid, i, j, rowCount, columnCount, false); if (data != null) { int vSpan = java.lang.Math.max(1, java.lang.Math.min(data.verticalSpan, rowCount)); if (vSpan > 1) { int spanHeight = 0; int spanMinHeight = 0; int spanExpandCount = 0; for (int k = 0; k < vSpan; k++) { spanHeight += heights[(i - k)]; spanMinHeight += minHeights[(i - k)]; if (expandRow[(i - k)]) spanExpandCount++; } if ((data.grabExcessVerticalSpace) && (spanExpandCount == 0)) { expandCount++; expandRow[i] = true; } int h = (((data.cacheHeight) + (data.verticalIndent)) - spanHeight) - ((vSpan - 1) * (verticalSpacing)); if (h > 0) { if (spanExpandCount == 0) { heights[i] += h; } else { int delta = h / spanExpandCount; int remainder = h % spanExpandCount; int last = -1; for (int k = 0; k < vSpan; k++) { if (expandRow[(i - k)]) { heights[(last = i - k)] += delta; } } if (last > (-1)) heights[last] += remainder; } } if ((!(data.grabExcessVerticalSpace)) || ((data.minimumHeight) != 0)) { h = ((!(data.grabExcessVerticalSpace)) || ((data.minimumHeight) == (SWT.DEFAULT))) ? data.cacheHeight : data.minimumHeight; h += ((data.verticalIndent) - spanMinHeight) - ((vSpan - 1) * (verticalSpacing)); if (h > 0) { if (spanExpandCount == 0) { minHeights[i] += h; } else { int delta = h / spanExpandCount; int remainder = h % spanExpandCount; int last = -1; for (int k = 0; k < vSpan; k++) { if (expandRow[(i - k)]) { minHeights[(last = i - k)] += delta; } } if (last > (-1)) minHeights[last] += remainder; } } } } } } } if ((height != (SWT.DEFAULT)) && (expandCount > 0)) { int totalHeight = 0; for (int i = 0; i < rowCount; i++) { totalHeight += heights[i]; } int c = expandCount; int delta = (availableHeight - totalHeight) / c; int remainder = (availableHeight - totalHeight) % c; int last = -1; while (totalHeight != availableHeight) { for (int i = 0; i < rowCount; i++) { if (expandRow[i]) { if (((heights[i]) + delta) > (minHeights[i])) { heights[(last = i)] = (heights[i]) + delta; } else { heights[i] = minHeights[i]; expandRow[i] = false; c--; } } } if (last > (-1)) heights[last] += remainder; for (int i = 0; i < rowCount; i++) { for (int j = 0; j < columnCount; j++) { org.eclipse.swt.layout.GridData data = getData(grid, i, j, rowCount, columnCount, false); if (data != null) { int vSpan = java.lang.Math.max(1, java.lang.Math.min(data.verticalSpan, rowCount)); if (vSpan > 1) { if ((!(data.grabExcessVerticalSpace)) || ((data.minimumHeight) != 0)) { int spanHeight = 0; int spanExpandCount = 0; for (int k = 0; k < vSpan; k++) { spanHeight += heights[(i - k)]; if (expandRow[(i - k)]) spanExpandCount++; } int h = ((!(data.grabExcessVerticalSpace)) || ((data.minimumHeight) == (SWT.DEFAULT))) ? data.cacheHeight : data.minimumHeight; h += ((data.verticalIndent) - spanHeight) - ((vSpan - 1) * (verticalSpacing)); if (h > 0) { if (spanExpandCount == 0) { heights[i] += h; } else { int delta2 = h / spanExpandCount; int remainder2 = h % spanExpandCount; int last2 = -1; for (int k = 0; k < vSpan; k++) { if (expandRow[(i - k)]) { heights[(last2 = i - k)] += delta2; } } if (last2 > (-1)) heights[last2] += remainder2; } } } } } } } if (c == 0) break; totalHeight = 0; for (int i = 0; i < rowCount; i++) { totalHeight += heights[i]; } delta = (availableHeight - totalHeight) / c; remainder = (availableHeight - totalHeight) % c; last = -1; } } if (move) { int gridY = (y + (marginTop)) + (marginHeight); for (int i = 0; i < rowCount; i++) { int gridX = (x + (marginLeft)) + (marginWidth); for (int j = 0; j < columnCount; j++) { org.eclipse.swt.layout.GridData data = getData(grid, i, j, rowCount, columnCount, true); if (data != null) { int hSpan = java.lang.Math.max(1, java.lang.Math.min(data.horizontalSpan, columnCount)); int vSpan = java.lang.Math.max(1, data.verticalSpan); int cellWidth = 0; int cellHeight = 0; for (int k = 0; k < hSpan; k++) { cellWidth += widths[(j + k)]; } for (int k = 0; k < vSpan; k++) { cellHeight += heights[(i + k)]; } cellWidth += (horizontalSpacing) * (hSpan - 1); int childX = gridX + (data.horizontalIndent); int childWidth = java.lang.Math.min(data.cacheWidth, cellWidth); switch (data.horizontalAlignment) { case SWT.CENTER : case GridData.CENTER : childX += java.lang.Math.max(0, (((cellWidth - (data.horizontalIndent)) - childWidth) / 2)); break; case SWT.RIGHT : case SWT.END : case GridData.END : childX += java.lang.Math.max(0, ((cellWidth - (data.horizontalIndent)) - childWidth)); break; case SWT.FILL : childWidth = cellWidth - (data.horizontalIndent); break; } cellHeight += (verticalSpacing) * (vSpan - 1); int childY = gridY + (data.verticalIndent); int childHeight = java.lang.Math.min(data.cacheHeight, cellHeight); switch (data.verticalAlignment) { case SWT.CENTER : case GridData.CENTER : childY += java.lang.Math.max(0, (((cellHeight - (data.verticalIndent)) - childHeight) / 2)); break; case SWT.BOTTOM : case SWT.END : case GridData.END : childY += java.lang.Math.max(0, ((cellHeight - (data.verticalIndent)) - childHeight)); break; case SWT.FILL : childHeight = cellHeight - (data.verticalIndent); break; } org.eclipse.swt.layout.Control child = grid[i][j]; if (child != null) { child.setBounds(childX, childY, childWidth, childHeight); } } gridX += (widths[j]) + (horizontalSpacing); } gridY += (heights[i]) + (verticalSpacing); } } for (int i = 0; i < flushLength; i++) { flush[i].cacheWidth = flush[i].cacheHeight = -1; } int totalDefaultWidth = 0; int totalDefaultHeight = 0; for (int i = 0; i < columnCount; i++) { totalDefaultWidth += widths[i]; } for (int i = 0; i < rowCount; i++) { totalDefaultHeight += heights[i]; } totalDefaultWidth += ((((horizontalSpacing) * (columnCount - 1)) + (marginLeft)) + ((marginWidth) * 2)) + (marginRight); totalDefaultHeight += ((((verticalSpacing) * (rowCount - 1)) + (marginTop)) + ((marginHeight) * 2)) + (marginBottom); return new org.eclipse.swt.layout.Point(totalDefaultWidth, totalDefaultHeight); }
public int internal_new_GC(org.eclipse.swt.widgets.GCData data) { checkWidget(); org.eclipse.swt.widgets.NSView view = paintView(); int context = 0; if ((data != null) && ((data.paintRect) != null)) { org.eclipse.swt.widgets.NSGraphicsContext graphicsContext = org.eclipse.swt.widgets.NSGraphicsContext.currentContext(); context = graphicsContext.id; if (!(view.isFlipped())) data.state &= ~(org.eclipse.swt.widgets.Control.VISIBLE_REGION); } else { org.eclipse.swt.widgets.NSWindow window = view.window(); if ((window.windowNumber()) <= 0) { float alpha = window.alphaValue(); window.setAlphaValue(0); window.orderBack(null); window.orderOut(null); window.setAlphaValue(alpha); } org.eclipse.swt.widgets.NSGraphicsContext graphicsContext = org.eclipse.swt.widgets.NSGraphicsContext.graphicsContextWithWindow(window); org.eclipse.swt.widgets.NSGraphicsContext flippedContext = org.eclipse.swt.widgets.NSGraphicsContext.graphicsContextWithGraphicsPort(graphicsContext.graphicsPort(), true); graphicsContext = flippedContext; context = graphicsContext.id; if (data != null) { data.flippedContext = flippedContext; data.state &= ~(org.eclipse.swt.widgets.Control.VISIBLE_REGION); data.visibleRgn = getVisibleRegion(); display.addContext(data); } } if (data != null) { int mask = (SWT.LEFT_TO_RIGHT) | (SWT.RIGHT_TO_LEFT); if (((data.style) & mask) == 0) { data.style |= (style) & (mask | (SWT.MIRRORED)); } data.device = display; data.thread = display.thread; data.view = view; data.view.retain(); data.view.window().retain(); data.foreground = getForegroundColor().handle; org.eclipse.swt.widgets.Control control = findBackgroundControl(); if (control == null) control = this; data.background = control.getBackgroundColor().handle; data.font = ((font) != null) ? font : defaultFont(); } return context; }
void createHandle() { state |= ((CANVAS) | (GRAB)) | (HIDDEN); int attributes = org.eclipse.swt.internal.carbon.OS.kWindowStandardHandlerAttribute; attributes |= org.eclipse.swt.internal.carbon.OS.kWindowCompositingAttribute; if (((style) & (org.eclipse.swt.SWT.NO_TRIM)) == 0) { if (((style) & (org.eclipse.swt.SWT.CLOSE)) != 0) attributes |= org.eclipse.swt.internal.carbon.OS.kWindowCloseBoxAttribute; if (((style) & (org.eclipse.swt.SWT.MIN)) != 0) attributes |= org.eclipse.swt.internal.carbon.OS.kWindowCollapseBoxAttribute; if (((style) & (org.eclipse.swt.SWT.MAX)) != 0) attributes |= org.eclipse.swt.internal.carbon.OS.kWindowFullZoomAttribute; if (((style) & (org.eclipse.swt.SWT.RESIZE)) != 0) { attributes |= org.eclipse.swt.internal.carbon.OS.kWindowResizableAttribute; if (((style) & (org.eclipse.swt.SWT.TITLE)) == 0) attributes |= org.eclipse.swt.internal.carbon.OS.kWindowLiveResizeAttribute; if (!(org.eclipse.swt.internal.carbon.OS.__BIG_ENDIAN__())) attributes |= org.eclipse.swt.internal.carbon.OS.kWindowLiveResizeAttribute; } } else { if (((style) & (org.eclipse.swt.SWT.TOOL)) == 0) attributes |= org.eclipse.swt.internal.carbon.OS.kWindowNoShadowAttribute; } int windowClass = org.eclipse.swt.internal.carbon.OS.kDocumentWindowClass; if (((style) & ((org.eclipse.swt.SWT.CLOSE) | (org.eclipse.swt.SWT.TITLE))) == 0) windowClass = org.eclipse.swt.internal.carbon.OS.kSheetWindowClass; if (((style) & (((org.eclipse.swt.SWT.APPLICATION_MODAL) | (org.eclipse.swt.SWT.PRIMARY_MODAL)) | (org.eclipse.swt.SWT.SYSTEM_MODAL))) != 0) { if (((style) & (((org.eclipse.swt.SWT.CLOSE) | (org.eclipse.swt.SWT.MAX)) | (org.eclipse.swt.SWT.MIN))) == 0) { windowClass = (((style) & (org.eclipse.swt.SWT.TITLE)) != 0) ? org.eclipse.swt.internal.carbon.OS.kMovableModalWindowClass : org.eclipse.swt.internal.carbon.OS.kModalWindowClass; } } if ((shellHandle) == 0) { org.eclipse.swt.widgets.Monitor monitor = getMonitor(); org.eclipse.swt.widgets.Rectangle rect = monitor.getClientArea(); int width = ((rect.width) * 5) / 8; int height = ((rect.height) * 5) / 8; org.eclipse.swt.internal.carbon.Rect bounds = new org.eclipse.swt.internal.carbon.Rect(); org.eclipse.swt.internal.carbon.OS.SetRect(bounds, ((short) (0)), ((short) (0)), ((short) (width)), ((short) (height))); int[] outWindow = new int[1]; attributes &= org.eclipse.swt.internal.carbon.OS.GetAvailableWindowAttributes(windowClass); org.eclipse.swt.internal.carbon.OS.CreateNewWindow(windowClass, attributes, bounds, outWindow); if ((outWindow[0]) == 0) error(SWT.ERROR_NO_HANDLES); shellHandle = outWindow[0]; org.eclipse.swt.internal.carbon.OS.RepositionWindow(shellHandle, 0, OS.kWindowCascadeOnMainScreen); int[] theRoot = new int[1]; org.eclipse.swt.internal.carbon.OS.HIViewFindByID(org.eclipse.swt.internal.carbon.OS.HIViewGetRoot(shellHandle), org.eclipse.swt.internal.carbon.OS.kHIViewWindowContentID(), theRoot); if ((theRoot[0]) == 0) org.eclipse.swt.internal.carbon.OS.GetRootControl(shellHandle, theRoot); if ((theRoot[0]) == 0) error(SWT.ERROR_NO_HANDLES); if (((style) & ((org.eclipse.swt.SWT.H_SCROLL) | (org.eclipse.swt.SWT.V_SCROLL))) != 0) { createScrolledHandle(theRoot[0]); } else { createHandle(theRoot[0]); } org.eclipse.swt.internal.carbon.OS.SetControlVisibility(topHandle(), false, false); } else { int[] theRoot = new int[1]; org.eclipse.swt.internal.carbon.OS.HIViewFindByID(shellHandle, org.eclipse.swt.internal.carbon.OS.kHIViewWindowContentID(), theRoot); if ((theRoot[0]) == 0) org.eclipse.swt.internal.carbon.OS.GetRootControl(shellHandle, theRoot); handle = org.eclipse.swt.internal.carbon.OS.HIViewGetFirstSubview(theRoot[0]); if ((handle) == 0) error(SWT.ERROR_NO_HANDLES); if (org.eclipse.swt.internal.carbon.OS.IsWindowVisible(shellHandle)) state &= ~(HIDDEN); } int[] outGroup = new int[1]; org.eclipse.swt.internal.carbon.OS.CreateWindowGroup(OS.kWindowGroupAttrHideOnCollapse, outGroup); if ((outGroup[0]) == 0) error(SWT.ERROR_NO_HANDLES); windowGroup = outGroup[0]; int parentGroup; if (((style) & (org.eclipse.swt.SWT.ON_TOP)) != 0) { parentGroup = org.eclipse.swt.internal.carbon.OS.GetWindowGroupOfClass(OS.kFloatingWindowClass); } else { if ((parent) != null) { parentGroup = parent.getShell().windowGroup; } else { parentGroup = org.eclipse.swt.internal.carbon.OS.GetWindowGroupOfClass(OS.kDocumentWindowClass); } } org.eclipse.swt.internal.carbon.OS.SetWindowGroup(shellHandle, parentGroup); org.eclipse.swt.internal.carbon.OS.SetWindowGroupParent(windowGroup, parentGroup); org.eclipse.swt.internal.carbon.OS.SetWindowGroupOwner(windowGroup, shellHandle); org.eclipse.swt.internal.carbon.CGPoint inMinLimits = new org.eclipse.swt.internal.carbon.CGPoint(); org.eclipse.swt.internal.carbon.CGPoint inMaxLimits = new org.eclipse.swt.internal.carbon.CGPoint(); org.eclipse.swt.internal.carbon.OS.GetWindowResizeLimits(shellHandle, inMinLimits, inMaxLimits); if ((org.eclipse.swt.widgets.Shell.DEFAULT_CLIENT_WIDTH) == (-1)) org.eclipse.swt.widgets.Shell.DEFAULT_CLIENT_WIDTH = ((int) (inMinLimits.x)); if ((org.eclipse.swt.widgets.Shell.DEFAULT_CLIENT_HEIGHT) == (-1)) org.eclipse.swt.widgets.Shell.DEFAULT_CLIENT_HEIGHT = 0; inMinLimits.y = ((int) (0)); int trim = (((org.eclipse.swt.SWT.TITLE) | (org.eclipse.swt.SWT.CLOSE)) | (org.eclipse.swt.SWT.MIN)) | (org.eclipse.swt.SWT.MAX); if ((((style) & (org.eclipse.swt.SWT.NO_TRIM)) != 0) || (((style) & trim) == 0)) { inMinLimits.x = ((int) (0)); } org.eclipse.swt.internal.carbon.OS.SetWindowResizeLimits(shellHandle, inMinLimits, inMaxLimits); int[] docID = new int[1]; org.eclipse.swt.internal.carbon.OS.NewTSMDocument(((short) (1)), new int[]{ org.eclipse.swt.internal.carbon.OS.kUnicodeDocument }, docID, 0); if ((docID[0]) == 0) error(SWT.ERROR_NO_HANDLES); imHandle = docID[0]; }
public org.eclipse.swt.widgets.Point computeSize(int wHint, int hHint, boolean changed) { checkWidget(); int width = 0; int height = 0; int tmInternalLeading = 0; if (wHint == (SWT.DEFAULT)) { int newFont; int oldFont = 0; int hDC = org.eclipse.swt.widgets.OS.GetDC(handle); newFont = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.WM_GETFONT, 0, 0); if (newFont != 0) oldFont = org.eclipse.swt.widgets.OS.SelectObject(hDC, newFont); int count = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.CB_GETCOUNT, 0, 0); org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); int flags = (OS.DT_CALCRECT) | (OS.DT_NOPREFIX); if (((style) & (SWT.READ_ONLY)) == 0) flags |= OS.DT_EDITCONTROL; int length = org.eclipse.swt.widgets.OS.GetWindowTextLength(handle); int cp = getCodePage(); org.eclipse.swt.widgets.TCHAR buffer = new org.eclipse.swt.widgets.TCHAR(cp, (length + 1)); org.eclipse.swt.widgets.OS.GetWindowText(handle, buffer, (length + 1)); org.eclipse.swt.widgets.OS.DrawText(hDC, buffer, length, rect, flags); width = java.lang.Math.max(width, ((rect.right) - (rect.left))); for (int i = 0; i < count; i++) { length = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.CB_GETLBTEXTLEN, i, 0); if (length != (OS.CB_ERR)) { if ((length + 1) > (buffer.length())) buffer = new org.eclipse.swt.widgets.TCHAR(cp, (length + 1)); int result = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.CB_GETLBTEXT, i, buffer); if (result != (OS.CB_ERR)) { org.eclipse.swt.widgets.OS.DrawText(hDC, buffer, length, rect, flags); width = java.lang.Math.max(width, ((rect.right) - (rect.left))); } } } if (((style) & (SWT.READ_ONLY)) != 0) { org.eclipse.swt.widgets.TEXTMETRIC tm = (OS.IsUnicode) ? ((org.eclipse.swt.widgets.TEXTMETRIC) (new org.eclipse.swt.widgets.TEXTMETRICW())) : new org.eclipse.swt.widgets.TEXTMETRICA(); org.eclipse.swt.widgets.OS.GetTextMetrics(hDC, tm); tmInternalLeading = tm.tmInternalLeading; } if (newFont != 0) org.eclipse.swt.widgets.OS.SelectObject(hDC, oldFont); org.eclipse.swt.widgets.OS.ReleaseDC(handle, hDC); } if (hHint == (SWT.DEFAULT)) { if (((style) & (SWT.SIMPLE)) != 0) { int count = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.CB_GETCOUNT, 0, 0); int itemHeight = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.CB_GETITEMHEIGHT, 0, 0); height = count * itemHeight; } } if (width == 0) width = DEFAULT_WIDTH; if (height == 0) height = DEFAULT_HEIGHT; if (wHint != (SWT.DEFAULT)) width = wHint; if (hHint != (SWT.DEFAULT)) height = hHint; if (((style) & (SWT.READ_ONLY)) != 0) { width += tmInternalLeading * 2; } else { int hwndText = org.eclipse.swt.widgets.OS.GetDlgItem(handle, org.eclipse.swt.widgets.Combo.CBID_EDIT); if (hwndText != 0) { int margins = org.eclipse.swt.widgets.OS.SendMessage(hwndText, OS.EM_GETMARGINS, 0, 0); int marginWidth = (margins & 65535) + ((margins >> 16) & 65535); width += marginWidth + 3; } } org.eclipse.swt.widgets.COMBOBOXINFO pcbi = new org.eclipse.swt.widgets.COMBOBOXINFO(); pcbi.cbSize = COMBOBOXINFO.sizeof; if (((((style) & (SWT.SIMPLE)) == 0) && (!(OS.IsWinCE))) && (org.eclipse.swt.widgets.OS.GetComboBoxInfo(handle, pcbi))) { width += (pcbi.itemLeft) + ((pcbi.buttonRight) - (pcbi.buttonLeft)); height = ((pcbi.buttonBottom) - (pcbi.buttonTop)) + ((pcbi.buttonTop) * 2); } else { int border = org.eclipse.swt.widgets.OS.GetSystemMetrics(OS.SM_CXEDGE); width += (org.eclipse.swt.widgets.OS.GetSystemMetrics(OS.SM_CXVSCROLL)) + (border * 2); int textHeight = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.CB_GETITEMHEIGHT, (-1), 0); if (((style) & (SWT.DROP_DOWN)) != 0) { height = textHeight + 6; } else { height += textHeight + 10; } } return new org.eclipse.swt.widgets.Point(width, height); }
public Image(org.eclipse.swt.graphics.Device device, java.lang.String filename) { if (device == null) device = org.eclipse.swt.graphics.Device.getDevice(); if (device == null) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NULL_ARGUMENT); if (filename == null) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NULL_ARGUMENT); this.device = device; boolean gdip = true; try { device.checkGDIP(); } catch (org.eclipse.swt.graphics.SWTException e) { gdip = false; } if ((gdip && ((OS.PTR_SIZEOF) == 8)) && (filename.toLowerCase().endsWith(".gif"))) gdip = false; if (gdip) { int length = filename.length(); char[] chars = new char[length + 1]; filename.getChars(0, length, chars, 0); int bitmap = org.eclipse.swt.graphics.Gdip.Bitmap_new(chars, false); if (bitmap != 0) { int error = SWT.ERROR_NO_HANDLES; int status = org.eclipse.swt.graphics.Gdip.Image_GetLastStatus(bitmap); if (status == 0) { if (filename.toLowerCase().endsWith(".ico")) { this.type = SWT.ICON; int[] hicon = new int[1]; org.eclipse.swt.graphics.Gdip.Bitmap_GetHICON(bitmap, hicon); this.handle = hicon[0]; } else { this.type = SWT.BITMAP; int width = org.eclipse.swt.graphics.Gdip.Image_GetWidth(bitmap); int height = org.eclipse.swt.graphics.Gdip.Image_GetHeight(bitmap); int pixelFormat = org.eclipse.swt.graphics.Gdip.Image_GetPixelFormat(bitmap); switch (pixelFormat) { case Gdip.PixelFormat16bppRGB555 : case Gdip.PixelFormat16bppRGB565 : this.handle = org.eclipse.swt.graphics.Image.createDIB(width, height, 16); break; case Gdip.PixelFormat24bppRGB : this.handle = org.eclipse.swt.graphics.Image.createDIB(width, height, 24); break; case Gdip.PixelFormat32bppRGB : case Gdip.PixelFormat16bppGrayScale : case Gdip.PixelFormat48bppRGB : case Gdip.PixelFormat32bppPARGB : case Gdip.PixelFormat64bppARGB : case Gdip.PixelFormat64bppPARGB : this.handle = org.eclipse.swt.graphics.Image.createDIB(width, height, 32); break; } if ((this.handle) != 0) { int hDC = device.internal_new_GC(null); int srcHDC = org.eclipse.swt.graphics.OS.CreateCompatibleDC(hDC); int oldSrcBitmap = org.eclipse.swt.graphics.OS.SelectObject(srcHDC, this.handle); int graphics = org.eclipse.swt.graphics.Gdip.Graphics_new(srcHDC); if (graphics != 0) { org.eclipse.swt.graphics.Rect rect = new org.eclipse.swt.graphics.Rect(); rect.Width = width; rect.Height = height; status = org.eclipse.swt.graphics.Gdip.Graphics_DrawImage(graphics, bitmap, rect, 0, 0, width, height, Gdip.UnitPixel, 0, 0, 0); if (status != 0) { error = SWT.ERROR_INVALID_IMAGE; org.eclipse.swt.graphics.OS.DeleteObject(handle); this.handle = 0; } org.eclipse.swt.graphics.Gdip.Graphics_delete(graphics); } org.eclipse.swt.graphics.OS.SelectObject(srcHDC, oldSrcBitmap); org.eclipse.swt.graphics.OS.DeleteDC(srcHDC); device.internal_dispose_GC(hDC, null); } else { int lockedBitmapData = org.eclipse.swt.graphics.Gdip.BitmapData_new(); if (lockedBitmapData != 0) { org.eclipse.swt.graphics.Gdip.Bitmap_LockBits(bitmap, 0, 0, pixelFormat, lockedBitmapData); org.eclipse.swt.graphics.BitmapData bitmapData = new org.eclipse.swt.graphics.BitmapData(); org.eclipse.swt.graphics.Gdip.MoveMemory(bitmapData, lockedBitmapData); int stride = bitmapData.Stride; int pixels = bitmapData.Scan0; int depth = 0; int scanlinePad = 4; int transparentPixel = -1; switch (bitmapData.PixelFormat) { case Gdip.PixelFormat1bppIndexed : depth = 1; break; case Gdip.PixelFormat4bppIndexed : depth = 4; break; case Gdip.PixelFormat8bppIndexed : depth = 8; break; case Gdip.PixelFormat16bppARGB1555 : case Gdip.PixelFormat16bppRGB555 : case Gdip.PixelFormat16bppRGB565 : depth = 16; break; case Gdip.PixelFormat24bppRGB : depth = 24; break; case Gdip.PixelFormat32bppRGB : case Gdip.PixelFormat32bppARGB : depth = 32; break; } if (depth != 0) { org.eclipse.swt.graphics.PaletteData paletteData = null; switch (bitmapData.PixelFormat) { case Gdip.PixelFormat1bppIndexed : case Gdip.PixelFormat4bppIndexed : case Gdip.PixelFormat8bppIndexed : int paletteSize = org.eclipse.swt.graphics.Gdip.Image_GetPaletteSize(bitmap); int hHeap = org.eclipse.swt.graphics.OS.GetProcessHeap(); int palette = org.eclipse.swt.graphics.OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, paletteSize); if (palette == 0) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NO_HANDLES); org.eclipse.swt.graphics.Gdip.Image_GetPalette(bitmap, palette, paletteSize); org.eclipse.swt.graphics.ColorPalette colorPalette = new org.eclipse.swt.graphics.ColorPalette(); org.eclipse.swt.graphics.Gdip.MoveMemory(colorPalette, palette, ColorPalette.sizeof); int[] entries = new int[colorPalette.Count]; org.eclipse.swt.graphics.OS.MoveMemory(entries, (palette + 8), ((entries.length) * 4)); org.eclipse.swt.graphics.OS.HeapFree(hHeap, 0, palette); org.eclipse.swt.graphics.RGB[] rgbs = new org.eclipse.swt.graphics.RGB[colorPalette.Count]; paletteData = new org.eclipse.swt.graphics.PaletteData(rgbs); for (int i = 0; i < (entries.length); i++) { if (((((entries[i]) >> 24) & 255) == 0) && (((colorPalette.Flags) & (Gdip.PaletteFlagsHasAlpha)) != 0)) { transparentPixel = i; } rgbs[i] = new org.eclipse.swt.graphics.RGB((((entries[i]) & 16711680) >> 16), (((entries[i]) & 65280) >> 8), (((entries[i]) & 255) >> 0)); } break; case Gdip.PixelFormat16bppARGB1555 : case Gdip.PixelFormat16bppRGB555 : paletteData = new org.eclipse.swt.graphics.PaletteData(31744, 992, 31); break; case Gdip.PixelFormat16bppRGB565 : paletteData = new org.eclipse.swt.graphics.PaletteData(63488, 2016, 31); break; case Gdip.PixelFormat24bppRGB : paletteData = new org.eclipse.swt.graphics.PaletteData(255, 65280, 16711680); break; case Gdip.PixelFormat32bppRGB : case Gdip.PixelFormat32bppARGB : paletteData = new org.eclipse.swt.graphics.PaletteData(65280, 16711680, -16777216); break; } byte[] data = new byte[stride * height]; byte[] alphaData = null; org.eclipse.swt.graphics.OS.MoveMemory(data, pixels, data.length); switch (bitmapData.PixelFormat) { case Gdip.PixelFormat16bppARGB1555 : alphaData = new byte[width * height]; for (int i = 1, j = 0; i < (data.length); i += 2 , j++) { alphaData[j] = ((byte) ((((data[i]) & 128) != 0) ? 255 : 0)); } break; case Gdip.PixelFormat32bppARGB : alphaData = new byte[width * height]; for (int i = 3, j = 0; i < (data.length); i += 4 , j++) { alphaData[j] = data[i]; } break; } org.eclipse.swt.graphics.Gdip.Bitmap_UnlockBits(bitmap, lockedBitmapData); org.eclipse.swt.graphics.Gdip.BitmapData_delete(lockedBitmapData); org.eclipse.swt.graphics.ImageData img = new org.eclipse.swt.graphics.ImageData(width, height, depth, paletteData, scanlinePad, data); img.transparentPixel = transparentPixel; img.alphaData = alphaData; init(device, img); } } } } } org.eclipse.swt.graphics.Gdip.Bitmap_delete(bitmap); if (status == 0) { if ((this.handle) == 0) org.eclipse.swt.graphics.SWT.error(error); return; } } } init(device, new org.eclipse.swt.graphics.ImageData(filename)); if (device.tracking) device.new_Object(this); }
org.eclipse.swt.widgets.LRESULT WM_LBUTTONDBLCLK(int wParam, int lParam) { if (((style) & (SWT.CHECK)) != 0) { org.eclipse.swt.widgets.TVHITTESTINFO lpht = new org.eclipse.swt.widgets.TVHITTESTINFO(); lpht.x = ((short) (lParam & 65535)); lpht.y = ((short) (lParam >> 16)); org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_HITTEST, 0, lpht); if (((lpht.flags) & (OS.TVHT_ONITEMSTATEICON)) != 0) { sendMouseEvent(SWT.MouseDown, 1, handle, OS.WM_LBUTTONDOWN, wParam, lParam); sendMouseEvent(SWT.MouseDoubleClick, 1, handle, OS.WM_LBUTTONDBLCLK, wParam, lParam); if ((org.eclipse.swt.widgets.OS.GetCapture()) != (handle)) org.eclipse.swt.widgets.OS.SetCapture(handle); org.eclipse.swt.widgets.TVITEM tvItem = new org.eclipse.swt.widgets.TVITEM(); tvItem.hItem = lpht.hItem; tvItem.mask = (OS.TVIF_PARAM) | (OS.TVIF_STATE); tvItem.stateMask = OS.TVIS_STATEIMAGEMASK; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETITEM, 0, tvItem); int state = (tvItem.state) >> 12; if ((state & 1) != 0) { state++; } else { --state; } tvItem.state = state << 12; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_SETITEM, 0, tvItem); if (!(OS.IsWinCE)) { int id = tvItem.hItem; if ((OS.COMCTL32_MAJOR) >= 6) { id = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_MAPHTREEITEMTOACCID, tvItem.hItem, 0); } org.eclipse.swt.widgets.OS.NotifyWinEvent(OS.EVENT_OBJECT_FOCUS, handle, OS.OBJID_CLIENT, id); } org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); event.item = items[tvItem.lParam]; event.detail = SWT.CHECK; postEvent(SWT.Selection, event); return LRESULT.ZERO; } } org.eclipse.swt.widgets.LRESULT result = super.WM_LBUTTONDBLCLK(wParam, lParam); if (!(ignoreSelect)) { if (((hwndHeader) != 0) && (((style) & (SWT.FULL_SELECTION)) != 0)) { org.eclipse.swt.widgets.TVHITTESTINFO lpht = new org.eclipse.swt.widgets.TVHITTESTINFO(); lpht.x = ((short) (lParam & 65535)); lpht.y = ((short) (lParam >> 16)); org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_HITTEST, 0, lpht); if (((lpht.hItem) != 0) && (((lpht.flags) & (OS.TVHT_ONITEM)) == 0)) { org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); org.eclipse.swt.widgets.TVITEM tvItem = new org.eclipse.swt.widgets.TVITEM(); tvItem.hItem = lpht.hItem; tvItem.mask = OS.TVIF_PARAM; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETITEM, 0, tvItem); event.item = items[tvItem.lParam]; postEvent(SWT.DefaultSelection, event); } } } return result; }
int xFocusOut(org.eclipse.swt.widgets.XFocusChangeEvent xEvent) { int focusHandle = org.eclipse.swt.widgets.OS.XtWindowToWidget(xEvent.display, xEvent.window); if (!(hasIMSupport())) org.eclipse.swt.widgets.OS.XmImUnsetFocus(focusHandle); if (!(OS.IsAIX)) { int fontList = defaultFont().handle; if ((font.handle) != fontList) { int[] argList2 = new int[]{ OS.XmNfontList, fontList }; org.eclipse.swt.widgets.OS.XmImSetValues(focusHandle, argList2, ((argList2.length) / 2)); } } if (display.postFocusOut) { postEvent(SWT.FocusOut); } else { sendEvent(SWT.FocusOut); } if ((handle) == 0) return 0; if (((style) & (SWT.NO_FOCUS)) != 0) { int[] argList = new int[]{ OS.XmNtraversalOn, 0 }; org.eclipse.swt.widgets.OS.XtGetValues(focusHandle, argList, ((argList.length) / 2)); if (((argList[1]) != 0) && (((state) & (FOCUS_FORCED)) != 0)) { argList[1] = 0; org.eclipse.swt.widgets.OS.XtSetValues(focusHandle, argList, ((argList.length) / 2)); } } return 0; }
public static void main(java.lang.String[] args) { org.eclipse.swt.snippets.Display display = new org.eclipse.swt.snippets.Display(); org.eclipse.swt.snippets.Shell shell = new org.eclipse.swt.snippets.Shell(display); org.eclipse.swt.snippets.Image image = null; final org.eclipse.swt.snippets.ToolTip tip = new org.eclipse.swt.snippets.ToolTip(shell, ((SWT.BALLOON) | (SWT.ICON_INFORMATION))); tip.setMessage("Here is message for the user. When the message is too long it wraps. I should say something cool but nothing comes to my mind."); org.eclipse.swt.snippets.Tray tray = display.getSystemTray(); if (tray != null) { org.eclipse.swt.snippets.TrayItem item = new org.eclipse.swt.snippets.TrayItem(tray, SWT.NONE); image = new org.eclipse.swt.snippets.Image(display, org.eclipse.swt.snippets.Snippet225.class.getResourceAsStream("eclipse.png")); item.setImage(image); tip.setText("Notification from a tray item"); item.setToolTip(tip); } else { tip.setText("Notification from anywhere"); tip.setLocation(400, 400); } org.eclipse.swt.snippets.Button button = new org.eclipse.swt.snippets.Button(shell, SWT.PUSH); button.setText("Press for balloon tip"); button.addListener(SWT.Selection, new org.eclipse.swt.snippets.Listener() { public void handleEvent(org.eclipse.swt.snippets.Event event) { tip.setVisible(true); } }); button.pack(); shell.setBounds(50, 50, 300, 200); shell.open(); while (!(shell.isDisposed())) { if (!(display.readAndDispatch())) display.sleep(); } if (image != null) image.dispose(); display.dispose(); }
boolean sendMouseEvent(int type, short button, int count, int detail, boolean send, int chord, short x, short y, int modifiers) { boolean result = super.sendMouseEvent(type, button, count, detail, send, chord, x, y, modifiers); org.eclipse.swt.internal.carbon.Rect rect = new org.eclipse.swt.internal.carbon.Rect(); org.eclipse.swt.internal.carbon.OS.GetControlBounds(handle, rect); int controlX = rect.left; int controlY = rect.top; int width = (rect.right) - (rect.left); int height = (rect.bottom) - (rect.top); org.eclipse.swt.internal.carbon.OS.GetControlBounds(parent.handle, rect); if (!(org.eclipse.swt.internal.carbon.OS.HIVIEW)) { controlX -= rect.left; controlY -= rect.top; } int parentWidth = (rect.right) - (rect.left); int parentHeight = (rect.bottom) - (rect.top); switch (type) { case SWT.MouseDown : if ((button != 1) || (count != 1)) break; startX = x; startY = y; org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); event.x = controlX; event.y = controlY; event.width = width; event.height = height; sendEvent(SWT.Selection, event); if (isDisposed()) return result; if (event.doit) { lastX = event.x; lastY = event.y; dragging = true; setBounds(event.x, event.y, width, height); } break; case SWT.MouseUp : if (!(dragging)) break; dragging = false; event = new org.eclipse.swt.widgets.Event(); event.x = lastX; event.y = lastY; event.width = width; event.height = height; sendEvent(SWT.Selection, event); if (isDisposed()) return result; if (event.doit) { setBounds(event.x, event.y, width, height); } break; case SWT.MouseMove : if (!(dragging)) break; int newX = lastX; int newY = lastY; if (((style) & (SWT.VERTICAL)) != 0) { newX = java.lang.Math.min(java.lang.Math.max(0, ((x + controlX) - (startX))), (parentWidth - width)); } else { newY = java.lang.Math.min(java.lang.Math.max(0, ((y + controlY) - (startY))), (parentHeight - height)); } if ((newX == (lastX)) && (newY == (lastY))) return result; event = new org.eclipse.swt.widgets.Event(); event.x = newX; event.y = newY; event.width = width; event.height = height; sendEvent(SWT.Selection, event); if (isDisposed()) return result; if (event.doit) { lastX = event.x; lastY = event.y; setBounds(event.x, event.y, width, height); } break; } return result; }
static int checkStyle(int style) { if ((style & (SWT.SINGLE)) != 0) { style &= ~((((SWT.H_SCROLL) | (SWT.V_SCROLL)) | (SWT.WRAP)) | (SWT.MULTI)); } else { style |= SWT.MULTI; if ((style & (SWT.WRAP)) != 0) { style &= ~(SWT.H_SCROLL); } } style |= ((SWT.NO_REDRAW_RESIZE) | (SWT.DOUBLE_BUFFERED)) | (SWT.NO_BACKGROUND); return style; }
int gtk_preedit_changed(int imcontext) { if (!(isInlineEnabled())) return 0; ranges = null; styles = null; commitCount = 0; int imHandle = imHandle(); int[] preeditString = new int[1]; int[] pangoAttrs = new int[1]; int[] cursorPos = new int[1]; org.eclipse.swt.widgets.OS.gtk_im_context_get_preedit_string(imHandle, preeditString, pangoAttrs, cursorPos); caretOffset = cursorPos[0]; char[] chars = null; if ((preeditString[0]) != 0) { int length = org.eclipse.swt.widgets.OS.strlen(preeditString[0]); byte[] buffer = new byte[length]; org.eclipse.swt.widgets.OS.memmove(buffer, preeditString[0], length); chars = org.eclipse.swt.widgets.Converter.mbcsToWcs(null, buffer); if ((pangoAttrs[0]) != 0) { int count = 0; int iterator = org.eclipse.swt.widgets.OS.pango_attr_list_get_iterator(pangoAttrs[0]); while (org.eclipse.swt.widgets.OS.pango_attr_iterator_next(iterator)) count++; org.eclipse.swt.widgets.OS.pango_attr_iterator_destroy(iterator); ranges = new int[count * 2]; styles = new org.eclipse.swt.widgets.TextStyle[count]; iterator = org.eclipse.swt.widgets.OS.pango_attr_list_get_iterator(pangoAttrs[0]); org.eclipse.swt.widgets.PangoAttrColor attrColor = new org.eclipse.swt.widgets.PangoAttrColor(); org.eclipse.swt.widgets.PangoAttrInt attrInt = new org.eclipse.swt.widgets.PangoAttrInt(); int[] start = new int[1]; int[] end = new int[1]; for (int i = 0; i < count; i++) { org.eclipse.swt.widgets.OS.pango_attr_iterator_range(iterator, start, end); ranges[(i * 2)] = ((int) (org.eclipse.swt.widgets.OS.g_utf8_pointer_to_offset(preeditString[0], ((preeditString[0]) + (start[0]))))); ranges[((i * 2) + 1)] = ((int) (org.eclipse.swt.widgets.OS.g_utf8_pointer_to_offset(preeditString[0], ((preeditString[0]) + (end[0]))))) - 1; styles[i] = new org.eclipse.swt.widgets.TextStyle(null, null, null); int attr = org.eclipse.swt.widgets.OS.pango_attr_iterator_get(iterator, OS.PANGO_ATTR_FOREGROUND); if (attr != 0) { org.eclipse.swt.widgets.OS.memmove(attrColor, attr, PangoAttrColor.sizeof); org.eclipse.swt.widgets.GdkColor color = new org.eclipse.swt.widgets.GdkColor(); color.red = attrColor.color_red; color.green = attrColor.color_green; color.blue = attrColor.color_blue; styles[i].foreground = org.eclipse.swt.widgets.Color.gtk_new(display, color); } attr = org.eclipse.swt.widgets.OS.pango_attr_iterator_get(iterator, OS.PANGO_ATTR_BACKGROUND); if (attr != 0) { org.eclipse.swt.widgets.OS.memmove(attrColor, attr, PangoAttrColor.sizeof); org.eclipse.swt.widgets.GdkColor color = new org.eclipse.swt.widgets.GdkColor(); color.red = attrColor.color_red; color.green = attrColor.color_green; color.blue = attrColor.color_blue; styles[i].background = org.eclipse.swt.widgets.Color.gtk_new(display, color); } attr = org.eclipse.swt.widgets.OS.pango_attr_iterator_get(iterator, OS.PANGO_ATTR_UNDERLINE); if (attr != 0) { org.eclipse.swt.widgets.OS.memmove(attrInt, attr, PangoAttrInt.sizeof); styles[i].underline = (attrInt.value) != (OS.PANGO_UNDERLINE_NONE); styles[i].underlineStyle = SWT.UNDERLINE_SINGLE; switch (attrInt.value) { case OS.PANGO_UNDERLINE_DOUBLE : styles[i].underlineStyle = SWT.UNDERLINE_DOUBLE; break; case OS.PANGO_UNDERLINE_ERROR : styles[i].underlineStyle = SWT.UNDERLINE_ERROR; break; } if (styles[i].underline) { attr = org.eclipse.swt.widgets.OS.pango_attr_iterator_get(iterator, OS.PANGO_ATTR_UNDERLINE_COLOR); if (attr != 0) { org.eclipse.swt.widgets.OS.memmove(attrColor, attr, PangoAttrColor.sizeof); org.eclipse.swt.widgets.GdkColor color = new org.eclipse.swt.widgets.GdkColor(); color.red = attrColor.color_red; color.green = attrColor.color_green; color.blue = attrColor.color_blue; styles[i].underlineColor = org.eclipse.swt.widgets.Color.gtk_new(display, color); } } } org.eclipse.swt.widgets.OS.pango_attr_iterator_next(iterator); } org.eclipse.swt.widgets.OS.pango_attr_iterator_destroy(iterator); org.eclipse.swt.widgets.OS.pango_attr_list_unref(pangoAttrs[0]); } org.eclipse.swt.widgets.OS.g_free(preeditString[0]); } if (chars != null) { if ((text.length()) == 0) { if ((chars.length) == 0) return 0; startOffset = -1; } int end = (startOffset) + (text.length()); if ((startOffset) == (-1)) { org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); event.detail = SWT.COMPOSITION_SELECTION; sendEvent(SWT.ImeComposition, event); startOffset = event.start; end = event.end; } inComposition = true; org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); event.detail = SWT.COMPOSITION_CHANGED; event.start = startOffset; event.end = end; event.text = text = (chars != null) ? new java.lang.String(chars) : ""; sendEvent(SWT.ImeComposition, event); } return 1; }
protected org.eclipse.swt.custom.Rectangle computeTrim(int part, int state, int x, int y, int width, int height) { int borderLeft = (parent.borderVisible) ? 1 : 0; int borderRight = borderLeft; int borderTop = (parent.onBottom) ? borderLeft : 0; int borderBottom = (parent.onBottom) ? 0 : borderLeft; int tabHeight = parent.tabHeight; switch (part) { case org.eclipse.swt.custom.CTabFolderRenderer.PART_BODY : int style = parent.getStyle(); int highlight_header = ((style & (SWT.FLAT)) != 0) ? 1 : 3; int highlight_margin = ((style & (SWT.FLAT)) != 0) ? 0 : 2; if ((((parent.fixedTabHeight) == 0) && ((style & (SWT.FLAT)) != 0)) && ((style & (SWT.BORDER)) == 0)) { highlight_header = 0; } int marginWidth = parent.marginWidth; int marginHeight = parent.marginHeight; x = ((x - marginWidth) - highlight_margin) - borderLeft; width = (((width + borderLeft) + borderRight) + (2 * marginWidth)) + (2 * highlight_margin); if (parent.minimized) { y = (parent.onBottom) ? y - borderTop : ((y - highlight_header) - tabHeight) - borderTop; height = ((borderTop + borderBottom) + tabHeight) + highlight_header; } else { y = (parent.onBottom) ? ((y - marginHeight) - highlight_margin) - borderTop : (((y - marginHeight) - highlight_header) - tabHeight) - borderTop; height = (((((height + borderTop) + borderBottom) + (2 * marginHeight)) + tabHeight) + highlight_header) + highlight_margin; } break; case org.eclipse.swt.custom.CTabFolderRenderer.PART_HEADER : break; case org.eclipse.swt.custom.CTabFolderRenderer.PART_MAX_BUTTON : case org.eclipse.swt.custom.CTabFolderRenderer.PART_MIN_BUTTON : case org.eclipse.swt.custom.CTabFolderRenderer.PART_CLOSE_BUTTON : case org.eclipse.swt.custom.CTabFolderRenderer.PART_CHEVRON_BUTTON : x -= org.eclipse.swt.custom.CTabFolderRenderer.BUTTON_TRIM; y -= org.eclipse.swt.custom.CTabFolderRenderer.BUTTON_TRIM; width += (org.eclipse.swt.custom.CTabFolderRenderer.BUTTON_TRIM) * 2; height += (org.eclipse.swt.custom.CTabFolderRenderer.BUTTON_TRIM) * 2; break; case org.eclipse.swt.custom.CTabFolderRenderer.PART_BORDER : x = x - borderLeft; width = (width + borderLeft) + borderRight; if (!(parent.simple)) width += 2; y = y - borderTop; height = (height + borderTop) + borderBottom; break; default : if ((0 <= part) && (part < (parent.getItemCount()))) { updateCurves(); x = x - (org.eclipse.swt.custom.CTabFolderRenderer.ITEM_LEFT_MARGIN); width = (width + (org.eclipse.swt.custom.CTabFolderRenderer.ITEM_LEFT_MARGIN)) + (org.eclipse.swt.custom.CTabFolderRenderer.ITEM_RIGHT_MARGIN); if (((!(parent.simple)) && (!(parent.single))) && ((state & (SWT.SELECTED)) != 0)) { width += (curveWidth) - (curveIndent); } y = y - (org.eclipse.swt.custom.CTabFolderRenderer.ITEM_TOP_MARGIN); height = (height + (org.eclipse.swt.custom.CTabFolderRenderer.ITEM_TOP_MARGIN)) + (org.eclipse.swt.custom.CTabFolderRenderer.ITEM_BOTTOM_MARGIN); } break; } return new org.eclipse.swt.custom.Rectangle(x, y, width, height); }
public void setSelection(int value) { checkWidget(); int state = 0; boolean fixSelection = false; if ((!(OS.IsWinCE)) && ((OS.WIN32_VERSION) >= (org.eclipse.swt.widgets.OS.VERSION(6, 0)))) { int minumum = ((int) (org.eclipse.swt.widgets.OS.SendMessage(handle, OS.PBM_GETRANGE, 1, 0))); int selection = ((int) (org.eclipse.swt.widgets.OS.SendMessage(handle, OS.PBM_GETPOS, 0, 0))); if (selection == minumum) { fixSelection = true; state = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.PBM_GETSTATE, 0, 0); org.eclipse.swt.widgets.OS.SendMessage(handle, OS.PBM_SETSTATE, OS.PBST_NORMAL, 0); } } org.eclipse.swt.widgets.OS.SendMessage(handle, OS.PBM_SETPOS, value, 0); if ((!(OS.IsWinCE)) && ((OS.WIN32_VERSION) >= (org.eclipse.swt.widgets.OS.VERSION(6, 0)))) { if (fixSelection) org.eclipse.swt.widgets.OS.SendMessage(handle, OS.PBM_SETSTATE, state, 0); } }
public void setSelection(org.eclipse.swt.widgets.TreeItem[] items) { checkWidget(); if (items == null) error(SWT.ERROR_NULL_ARGUMENT); org.eclipse.swt.widgets.OS.gtk_signal_handler_block_by_data(handle, SWT.Selection); if (((style) & (SWT.MULTI)) != 0) { org.eclipse.swt.widgets.OS.gtk_ctree_unselect_recursive(handle, 0); } int index = 0; int length = items.length; while (index < length) { org.eclipse.swt.widgets.TreeItem item = items[index]; if (item != null) { if (item.isDisposed()) break; org.eclipse.swt.widgets.OS.gtk_ctree_select(handle, item.handle); } index++; } org.eclipse.swt.widgets.OS.gtk_signal_handler_unblock_by_data(handle, SWT.Selection); index = 0; while (index < length) { org.eclipse.swt.widgets.TreeItem item = items[index]; if ((item != null) && (!(item.isDisposed()))) { showItem(item); return; } index++; } }
public boolean hooks(int eventType) { if ((types) == null) return false; for (int i = 0; i < (types.length); i++) { if (((types[i]) == eventType) || ((types[i]) == (-eventType))) return true; } return false; }
public void handleEvent(org.eclipse.swt.browser.Event e) { switch (e.type) { case SWT.Dispose : { if (ignoreDispose) { ignoreDispose = false; break; } ignoreDispose = true; browser.notifyListeners(e.type, e); e.type = SWT.NONE; browser.getShell().removeListener(SWT.Activate, this); org.eclipse.swt.browser.OS.RemoveEventHandler(windowBoundsHandler); windowBoundsHandler = 0; e.display.setData(org.eclipse.swt.browser.Safari.ADD_WIDGET_KEY, new java.lang.Object[]{ new java.lang.Integer(webViewHandle), null }); org.eclipse.swt.browser.Cocoa.objc_msgSend(webView, Cocoa.S_setFrameLoadDelegate, 0); org.eclipse.swt.browser.Cocoa.objc_msgSend(webView, Cocoa.S_setResourceLoadDelegate, 0); org.eclipse.swt.browser.Cocoa.objc_msgSend(webView, Cocoa.S_setUIDelegate, 0); org.eclipse.swt.browser.Cocoa.objc_msgSend(webView, Cocoa.S_setPolicyDelegate, 0); org.eclipse.swt.browser.Cocoa.objc_msgSend(webView, Cocoa.S_setDownloadDelegate, 0); org.eclipse.swt.browser.Cocoa.objc_msgSend(notificationCenter, Cocoa.S_removeObserver, delegate); org.eclipse.swt.browser.Cocoa.objc_msgSend(delegate, Cocoa.S_release); org.eclipse.swt.browser.OS.DisposeControl(webViewHandle); html = null; lastHoveredLinkURL = null; break; } case SWT.Activate : { org.eclipse.swt.browser.Cocoa.objc_msgSend(org.eclipse.swt.browser.Cocoa.objc_msgSend(org.eclipse.swt.browser.Cocoa.HIWebViewGetWebView(webViewHandle), Cocoa.S_window), Cocoa.S_makeKeyWindow); break; } case SWT.FocusIn : { hasNewFocusElement = true; org.eclipse.swt.browser.OS.SetKeyboardFocus(org.eclipse.swt.browser.OS.GetControlOwner(browser.handle), webViewHandle, ((short) (-1))); break; } } }
public org.eclipse.swt.widgets.Rectangle getBounds() { checkWidget(); parent.forceResize(); int topHandle = topHandle(); int x; int y; int width; int height; if ((((OS.GTK_VERSION) < (org.eclipse.swt.widgets.OS.VERSION(2, 4, 0))) && ((control) != null)) && (!(control.isDisposed()))) { int border = org.eclipse.swt.widgets.OS.gtk_container_get_border_width(parent.handle); byte[] shadowType = org.eclipse.swt.widgets.Converter.wcsToMbcs(null, "shadow_type", true); int[] shadow = new int[1]; org.eclipse.swt.widgets.OS.gtk_widget_style_get(parent.handle, shadowType, shadow, 0); if ((shadow[0]) != (OS.GTK_SHADOW_NONE)) { border += org.eclipse.swt.widgets.OS.gtk_style_get_xthickness(org.eclipse.swt.widgets.OS.gtk_widget_get_style(parent.handle)); } if (((parent.style) & (SWT.VERTICAL)) != 0) { x = border; y = (org.eclipse.swt.widgets.OS.GTK_WIDGET_Y(topHandle)) + border; width = (org.eclipse.swt.widgets.OS.GTK_WIDGET_WIDTH(parent.handle)) - (border * 2); height = org.eclipse.swt.widgets.OS.GTK_WIDGET_HEIGHT(topHandle); } else { x = (org.eclipse.swt.widgets.OS.GTK_WIDGET_X(topHandle)) + border; y = border; width = org.eclipse.swt.widgets.OS.GTK_WIDGET_WIDTH(topHandle); height = (org.eclipse.swt.widgets.OS.GTK_WIDGET_HEIGHT(parent.handle)) - (border * 2); } } else { x = org.eclipse.swt.widgets.OS.GTK_WIDGET_X(topHandle); y = org.eclipse.swt.widgets.OS.GTK_WIDGET_Y(topHandle); width = org.eclipse.swt.widgets.OS.GTK_WIDGET_WIDTH(topHandle); height = org.eclipse.swt.widgets.OS.GTK_WIDGET_HEIGHT(topHandle); } return new org.eclipse.swt.widgets.Rectangle(x, y, width, height); }
boolean translateMnemonic(int keyval, org.eclipse.swt.widgets.GdkEventKey gdkEvent) { int key = org.eclipse.swt.widgets.OS.gdk_keyval_to_unicode(keyval); if (key < 32) return false; if ((gdkEvent.state) == 0) { int code = traversalCode(keyval, gdkEvent); if ((code & (SWT.TRAVERSE_MNEMONIC)) == 0) return false; } else { org.eclipse.swt.widgets.Shell shell = _getShell(); int mask = ((OS.GDK_CONTROL_MASK) | (OS.GDK_SHIFT_MASK)) | (OS.GDK_MOD1_MASK); if (((gdkEvent.state) & mask) != (org.eclipse.swt.widgets.OS.gtk_window_get_mnemonic_modifier(shell.shellHandle))) return false; } org.eclipse.swt.widgets.Decorations shell = menuShell(); if ((shell.isVisible()) && (shell.isEnabled())) { org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); event.detail = SWT.TRAVERSE_MNEMONIC; if (setKeyState(event, gdkEvent)) { return (translateMnemonic(event, null)) || (shell.translateMnemonic(event, this)); } } return false; }
int get_hyperlink(int index, int ppHyperlink) { if (org.eclipse.swt.accessibility.Accessible.DEBUG) org.eclipse.swt.accessibility.Accessible.print(((this) + ".IAccessibleHypertext::get_hyperlink")); org.eclipse.swt.accessibility.AccessibleTextEvent event = new org.eclipse.swt.accessibility.AccessibleTextEvent(this); event.index = index; for (int i = 0; i < (accessibleTextExtendedListeners.size()); i++) { org.eclipse.swt.accessibility.AccessibleTextExtendedListener listener = ((org.eclipse.swt.accessibility.AccessibleTextExtendedListener) (accessibleTextExtendedListeners.elementAt(i))); listener.getHyperlink(event); } org.eclipse.swt.accessibility.Accessible accessible = event.accessible; if (accessible == null) { setIntVARIANT(ppHyperlink, COM.VT_EMPTY, 0); return COM.E_INVALIDARG; } accessible.AddRef(); setPtrVARIANT(ppHyperlink, COM.VT_DISPATCH, accessible.getAddress()); return COM.S_OK; }
void mouseDown(org.eclipse.swt.widgets.Event event) { int hitItemIndex; org.eclipse.swt.widgets.TreeItem hitItem; org.eclipse.swt.widgets.SelectableItem selectionItem = getLastSelection(); int itemAction; hitItemIndex = (event.y) / (getItemHeight()); hitItem = getRoot().getVisibleItem((hitItemIndex + (getTopIndex()))); if (hitItem == null) { return; } if (!(hasFocus())) forceFocus(); switch (itemAction = itemAction(hitItem, event.x, event.y)) { case org.eclipse.swt.widgets.Tree.ActionExpandCollapse : if ((event.button) != 1) return; if ((hitItem.getExpanded()) == true) { collapse(hitItem, true); } else { expand(hitItem, true); } break; case org.eclipse.swt.widgets.Tree.ActionSelect : doMouseSelect(hitItem, (hitItemIndex + (getTopIndex())), event.stateMask, event.button); break; case org.eclipse.swt.widgets.Tree.ActionCheck : if ((event.button) != 1) return; doCheckItem(hitItem); break; } if ((itemAction != (org.eclipse.swt.widgets.Tree.ActionSelect)) && (selectionItem == null)) { selectionItem = getRoot().getVisibleItem(getTopIndex()); selectNotify(selectionItem); } }
void init(org.eclipse.swt.graphics.Device device, java.lang.String name, float height, int style, byte[] fontString) { if (name == null) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NULL_ARGUMENT); if (height < 0) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_INVALID_ARGUMENT); this.device = device; if (fontString != null) { handle = org.eclipse.swt.graphics.OS.pango_font_description_from_string(fontString); if ((handle) == 0) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NO_HANDLES); } else { handle = org.eclipse.swt.graphics.OS.pango_font_description_new(); if ((handle) == 0) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NO_HANDLES); byte[] buffer = org.eclipse.swt.graphics.Converter.wcsToMbcs(null, name, true); org.eclipse.swt.graphics.OS.pango_font_description_set_family(handle, buffer); if (height > 0) { org.eclipse.swt.graphics.OS.pango_font_description_set_size(handle, ((int) (0.5F + (height * (OS.PANGO_SCALE))))); } org.eclipse.swt.graphics.OS.pango_font_description_set_stretch(handle, OS.PANGO_STRETCH_NORMAL); int pangoStyle = OS.PANGO_STYLE_NORMAL; int pangoWeight = OS.PANGO_WEIGHT_NORMAL; if ((style & (SWT.ITALIC)) != 0) pangoStyle = OS.PANGO_STYLE_ITALIC; if ((style & (SWT.ROMAN)) != 0) pangoStyle = OS.PANGO_STYLE_OBLIQUE; if ((style & (SWT.BOLD)) != 0) pangoWeight = OS.PANGO_WEIGHT_BOLD; org.eclipse.swt.graphics.OS.pango_font_description_set_style(handle, pangoStyle); org.eclipse.swt.graphics.OS.pango_font_description_set_weight(handle, pangoWeight); } }
void print() { org.eclipse.swt.custom.StyledTextContent content = renderer.getContent(); org.eclipse.swt.custom.Color background = gc.getBackground(); org.eclipse.swt.custom.Color foreground = gc.getForeground(); int lineHeight = renderer.getLineHeight(); int lineCount = content.getLineCount(); int paintY = clientArea.y; int page = startPage; if (singleLine) { lineCount = 1; } for (int i = startLine; (i <= (endLine)) && (page <= (endPage)); i++ , paintY += lineHeight) { java.lang.String line = content.getLine(i); if (paintY == (clientArea.y)) { startPage(page); } renderer.drawLine(line, i, paintY, gc, background, foreground, true); if ((paintY + (lineHeight * 2)) > ((clientArea.y) + (clientArea.height))) { endPage(page); paintY = (clientArea.y) - lineHeight; page++; if ((page > (endPage)) || (i == (lineCount - 1))) { break; } } } if ((paintY > (clientArea.y)) && (paintY <= ((clientArea.y) + (clientArea.height)))) { endPage(page); } }
public void drawFocus(int x, int y, int width, int height) { if ((handle) == 0) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_GRAPHIC_DISPOSED); int style = org.eclipse.swt.graphics.OS.gtk_widget_get_style(data.device.shellHandle); org.eclipse.swt.graphics.OS.gtk_paint_focus(style, data.drawable, OS.GTK_STATE_NORMAL, null, data.device.shellHandle, new byte[1], x, y, width, height); }
public void addWordMovementListener(org.eclipse.swt.custom.MovementListener movementListener) { checkWidget(); if (movementListener == null) org.eclipse.swt.custom.SWT.error(SWT.ERROR_NULL_ARGUMENT); addListener(org.eclipse.swt.custom.StyledText.WordNext, new org.eclipse.swt.custom.StyledTextListener(movementListener)); addListener(org.eclipse.swt.custom.StyledText.WordPrevious, new org.eclipse.swt.custom.StyledTextListener(movementListener)); }
void drawImageXRender(org.eclipse.swt.graphics.Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple, int imgWidth, int imgHeight, int maskPixmap, int maskType) { int translateX = 0; int translateY = 0; int drawable = data.drawable; if (((data.image) == null) && (!(data.realDrawable))) { int[] x = new int[1]; int[] y = new int[1]; int[] real_drawable = new int[1]; org.eclipse.swt.graphics.OS.gdk_window_get_internal_paint_info(drawable, real_drawable, x, y); drawable = real_drawable[0]; translateX = -(x[0]); translateY = -(y[0]); } int xDisplay = org.eclipse.swt.graphics.OS.GDK_DISPLAY(); int maskPict = 0; if (maskPixmap != 0) { int attribCount = 0; org.eclipse.swt.graphics.XRenderPictureAttributes attrib = null; if ((srcImage.alpha) != (-1)) { attribCount = 1; attrib = new org.eclipse.swt.graphics.XRenderPictureAttributes(); attrib.repeat = true; } maskPict = org.eclipse.swt.graphics.OS.XRenderCreatePicture(xDisplay, org.eclipse.swt.graphics.OS.gdk_x11_drawable_get_xid(maskPixmap), org.eclipse.swt.graphics.OS.XRenderFindStandardFormat(xDisplay, maskType), attribCount, attrib); if (maskPict == 0) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NO_HANDLES); } int format = org.eclipse.swt.graphics.OS.XRenderFindVisualFormat(xDisplay, org.eclipse.swt.graphics.OS.gdk_x11_visual_get_xvisual(org.eclipse.swt.graphics.OS.gdk_visual_get_system())); int destPict = org.eclipse.swt.graphics.OS.XRenderCreatePicture(xDisplay, org.eclipse.swt.graphics.OS.gdk_x11_drawable_get_xid(drawable), format, 0, null); if (destPict == 0) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NO_HANDLES); int srcPict = org.eclipse.swt.graphics.OS.XRenderCreatePicture(xDisplay, org.eclipse.swt.graphics.OS.gdk_x11_drawable_get_xid(srcImage.pixmap), format, 0, null); if (srcPict == 0) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NO_HANDLES); if ((srcWidth != destWidth) || (srcHeight != destHeight)) { int[] transform = new int[]{ ((int) ((((float) (srcWidth)) / destWidth) * 65536)), 0, 0, 0, ((int) ((((float) (srcHeight)) / destHeight) * 65536)), 0, 0, 0, 65536 }; org.eclipse.swt.graphics.OS.XRenderSetPictureTransform(xDisplay, srcPict, transform); if (maskPict != 0) org.eclipse.swt.graphics.OS.XRenderSetPictureTransform(xDisplay, maskPict, transform); srcX *= destWidth / ((float) (srcWidth)); srcY *= destHeight / ((float) (srcHeight)); } int clipping = data.clipRgn; if ((data.damageRgn) != 0) { if (clipping == 0) { clipping = data.damageRgn; } else { clipping = org.eclipse.swt.graphics.OS.gdk_region_new(); org.eclipse.swt.graphics.OS.gdk_region_union(clipping, data.clipRgn); org.eclipse.swt.graphics.OS.gdk_region_intersect(clipping, data.damageRgn); } } if (clipping != 0) { int[] nRects = new int[1]; int[] rects = new int[1]; org.eclipse.swt.graphics.OS.gdk_region_get_rectangles(clipping, rects, nRects); org.eclipse.swt.graphics.GdkRectangle rect = new org.eclipse.swt.graphics.GdkRectangle(); short[] xRects = new short[(nRects[0]) * 4]; for (int i = 0, j = 0; i < (nRects[0]); i++ , j += 4) { org.eclipse.swt.graphics.OS.memmove(rect, ((rects[0]) + (i * (GdkRectangle.sizeof))), GdkRectangle.sizeof); xRects[j] = ((short) (translateX + (rect.x))); xRects[(j + 1)] = ((short) (translateY + (rect.y))); xRects[(j + 2)] = ((short) (rect.width)); xRects[(j + 3)] = ((short) (rect.height)); } org.eclipse.swt.graphics.OS.XRenderSetPictureClipRectangles(xDisplay, destPict, 0, 0, xRects, nRects[0]); if ((clipping != (data.clipRgn)) && (clipping != (data.damageRgn))) { org.eclipse.swt.graphics.OS.gdk_region_destroy(clipping); } if ((rects[0]) != 0) org.eclipse.swt.graphics.OS.g_free(rects[0]); } org.eclipse.swt.graphics.OS.XRenderComposite(xDisplay, (maskPict != 0 ? OS.PictOpOver : OS.PictOpSrc), srcPict, maskPict, destPict, srcX, srcY, srcX, srcY, (destX + translateX), (destY + translateY), destWidth, destHeight); org.eclipse.swt.graphics.OS.XRenderFreePicture(xDisplay, destPict); org.eclipse.swt.graphics.OS.XRenderFreePicture(xDisplay, srcPict); if (maskPict != 0) org.eclipse.swt.graphics.OS.XRenderFreePicture(xDisplay, maskPict); }
void createItem(org.eclipse.swt.widgets.CoolItem item, int index) { int count = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.RB_GETBANDCOUNT, 0, 0); if (!((0 <= index) && (index <= count))) error(SWT.ERROR_INVALID_RANGE); int id = 0; while ((id < (items.length)) && ((items[id]) != null)) id++; if (id == (items.length)) { org.eclipse.swt.widgets.CoolItem[] newItems = new org.eclipse.swt.widgets.CoolItem[(items.length) + 4]; java.lang.System.arraycopy(items, 0, newItems, 0, items.length); items = newItems; } int hHeap = org.eclipse.swt.widgets.OS.GetProcessHeap(); int lpText = org.eclipse.swt.widgets.OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, TCHAR.sizeof); org.eclipse.swt.widgets.REBARBANDINFO rbBand = new org.eclipse.swt.widgets.REBARBANDINFO(); rbBand.cbSize = REBARBANDINFO.sizeof; rbBand.fMask = ((OS.RBBIM_TEXT) | (OS.RBBIM_STYLE)) | (OS.RBBIM_ID); rbBand.fStyle = (OS.RBBS_VARIABLEHEIGHT) | (OS.RBBS_GRIPPERALWAYS); if (((item.style) & (SWT.DROP_DOWN)) != 0) { rbBand.fStyle |= OS.RBBS_USECHEVRON; } rbBand.lpText = lpText; rbBand.wID = id; int lastIndex = getLastIndexOfRow((index - 1)); if (index == (lastIndex + 1)) { resizeToPreferredWidth(lastIndex); rbBand.fMask |= OS.RBBIM_SIZE; rbBand.cx = org.eclipse.swt.widgets.CoolBar.MAX_WIDTH; } if ((index == 0) && (count > 0)) { getItem(0).setWrap(false); } if ((org.eclipse.swt.widgets.OS.SendMessage(handle, OS.RB_INSERTBAND, index, rbBand)) == 0) { error(SWT.ERROR_ITEM_NOT_ADDED); } org.eclipse.swt.widgets.OS.HeapFree(hHeap, 0, lpText); items[(item.id = id)] = item; int length = originalItems.length; org.eclipse.swt.widgets.CoolItem[] newOriginals = new org.eclipse.swt.widgets.CoolItem[length + 1]; java.lang.System.arraycopy(originalItems, 0, newOriginals, 0, index); java.lang.System.arraycopy(originalItems, index, newOriginals, (index + 1), (length - index)); newOriginals[index] = item; originalItems = newOriginals; }
void updateParent(boolean visible) { if (visible) { if (((parent) != null) && (parent.getVisible())) { ((org.eclipse.swt.widgets.Shell) (parent)).window.addChildWindow(window, OS.NSWindowAbove); if (((style) & (org.eclipse.swt.SWT.ON_TOP)) != 0) { window.setLevel(OS.NSStatusWindowLevel); } } } else { org.eclipse.swt.widgets.NSWindow parentWindow = window.parentWindow(); if (parentWindow != null) parentWindow.removeChildWindow(window); } org.eclipse.swt.widgets.Shell[] shells = getShells(); for (int i = 0; i < (shells.length); i++) { org.eclipse.swt.widgets.Shell shell = shells[i]; if (((shell.parent) == (this)) && (shell.getVisible())) { shell.updateParent(visible); } } }
int OnLocationChange(int aWebProgress, int aRequest, int aLocation) { if (((request) != 0) && ((request) != aRequest)) request = aRequest; if ((locationListeners.length) == 0) return XPCOM.NS_OK; org.eclipse.swt.browser.nsIWebProgress webProgress = new org.eclipse.swt.browser.nsIWebProgress(aWebProgress); int[] aDOMWindow = new int[1]; int rc = webProgress.GetDOMWindow(aDOMWindow); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Browser.error(rc); if ((aDOMWindow[0]) == 0) org.eclipse.swt.browser.Browser.error(XPCOM.NS_ERROR_NO_INTERFACE); org.eclipse.swt.browser.nsIDOMWindow domWindow = new org.eclipse.swt.browser.nsIDOMWindow(aDOMWindow[0]); int[] aTop = new int[1]; rc = domWindow.GetTop(aTop); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Browser.error(rc); if ((aTop[0]) == 0) org.eclipse.swt.browser.Browser.error(XPCOM.NS_ERROR_NO_INTERFACE); domWindow.Release(); org.eclipse.swt.browser.nsIDOMWindow topWindow = new org.eclipse.swt.browser.nsIDOMWindow(aTop[0]); topWindow.Release(); org.eclipse.swt.browser.nsIURI location = new org.eclipse.swt.browser.nsIURI(aLocation); int aSpec = org.eclipse.swt.browser.XPCOM.nsEmbedCString_new(); location.GetSpec(aSpec); int length = org.eclipse.swt.browser.XPCOM.nsEmbedCString_Length(aSpec); int buffer = org.eclipse.swt.browser.XPCOM.nsEmbedCString_get(aSpec); byte[] dest = new byte[length]; org.eclipse.swt.browser.XPCOM.memmove(dest, buffer, length); org.eclipse.swt.browser.XPCOM.nsEmbedCString_delete(aSpec); org.eclipse.swt.browser.LocationEvent event = new org.eclipse.swt.browser.LocationEvent(this); event.display = getDisplay(); event.widget = this; event.location = new java.lang.String(dest); event.top = (aTop[0]) == (aDOMWindow[0]); for (int i = 0; i < (locationListeners.length); i++) locationListeners[i].changed(event); return XPCOM.NS_OK; }
void applicationDidBecomeActive(int id, int sel, int notification) { org.eclipse.swt.widgets.NSWindow keyWindow = application.keyWindow(); if (keyWindow != null) { keyWindow.orderFrontRegardless(); } checkFocus(); checkEnterExit(findControl(true), null, false); }
public void dispose() { if ((handle) == 0) return; if (device.isDisposed()) return; if ((handle) != 0) org.eclipse.swt.graphics.OS.pango_font_description_free(handle); handle = 0; if (device.tracking) device.dispose_Object(this); device = null; }
void destroyItem(org.eclipse.swt.widgets.TreeColumn column) { int index = 0; while (index < (columnCount)) { if ((columns[index]) == column) break; index++; } for (int i = 0; i < (items.length); i++) { org.eclipse.swt.widgets.TreeItem item = items[i]; if (item != null) { if ((columnCount) <= 1) { item.strings = null; item.images = null; item.cellBackground = null; item.cellForeground = null; item.cellFont = null; } else { if ((item.strings) != null) { java.lang.String[] strings = item.strings; if (index == 0) { item.text = ((strings[1]) != null) ? strings[1] : ""; } java.lang.String[] temp = new java.lang.String[(columnCount) - 1]; java.lang.System.arraycopy(strings, 0, temp, 0, index); java.lang.System.arraycopy(strings, (index + 1), temp, index, (((columnCount) - 1) - index)); item.strings = temp; } else { if (index == 0) item.text = ""; } if ((item.images) != null) { org.eclipse.swt.widgets.Image[] images = item.images; if (index == 0) item.image = images[1]; org.eclipse.swt.widgets.Image[] temp = new org.eclipse.swt.widgets.Image[(columnCount) - 1]; java.lang.System.arraycopy(images, 0, temp, 0, index); java.lang.System.arraycopy(images, (index + 1), temp, index, (((columnCount) - 1) - index)); item.images = temp; } else { if (index == 0) item.image = null; } if ((item.cellBackground) != null) { org.eclipse.swt.widgets.Color[] cellBackground = item.cellBackground; org.eclipse.swt.widgets.Color[] temp = new org.eclipse.swt.widgets.Color[(columnCount) - 1]; java.lang.System.arraycopy(cellBackground, 0, temp, 0, index); java.lang.System.arraycopy(cellBackground, (index + 1), temp, index, (((columnCount) - 1) - index)); item.cellBackground = temp; } if ((item.cellForeground) != null) { org.eclipse.swt.widgets.Color[] cellForeground = item.cellForeground; org.eclipse.swt.widgets.Color[] temp = new org.eclipse.swt.widgets.Color[(columnCount) - 1]; java.lang.System.arraycopy(cellForeground, 0, temp, 0, index); java.lang.System.arraycopy(cellForeground, (index + 1), temp, index, (((columnCount) - 1) - index)); item.cellForeground = temp; } if ((item.cellFont) != null) { org.eclipse.swt.widgets.Font[] cellFont = item.cellFont; org.eclipse.swt.widgets.Font[] temp = new org.eclipse.swt.widgets.Font[(columnCount) - 1]; java.lang.System.arraycopy(cellFont, 0, temp, 0, index); java.lang.System.arraycopy(cellFont, (index + 1), temp, index, (((columnCount) - 1) - index)); item.cellFont = temp; } } } } if ((columnCount) == 1) { firstColumn = column.nsColumn; firstColumn.setWidth(0); } else { if (index == 0) { ((org.eclipse.swt.widgets.NSOutlineView) (view)).setOutlineTableColumn(columns[1].nsColumn); } ((org.eclipse.swt.widgets.NSOutlineView) (view)).removeTableColumn(column.nsColumn); } java.lang.System.arraycopy(columns, (index + 1), columns, index, ((--(columnCount)) - index)); columns[columnCount] = null; for (int i = index; i < (columnCount); i++) { columns[i].sendEvent(SWT.Move); } }
int accessibilityAttributeNames(int id, int sel) { if ((accessible) != null) { if ((((this.textView) != null) && ((id == (this.textView.id)) || (id == (this.textView.cell().id)))) || (((this.imageView) != null) && ((id == (this.imageView.id)) || (id == (this.imageView.cell().id))))) { org.eclipse.swt.widgets.NSMutableArray extraAttributes = org.eclipse.swt.widgets.NSMutableArray.arrayWithCapacity(3); extraAttributes.addObject(OS.NSAccessibilityHelpAttribute); extraAttributes.addObject(OS.NSAccessibilityDescriptionAttribute); extraAttributes.addObject(OS.NSAccessibilityTitleAttribute); for (int i = (extraAttributes.count()) - 1; i >= 0; i--) { org.eclipse.swt.widgets.NSString attribute = new org.eclipse.swt.widgets.NSString(extraAttributes.objectAtIndex(i).id); if ((accessible.internal_accessibilityAttributeValue(attribute, ACC.CHILDID_SELF)) == null) { extraAttributes.removeObjectAtIndex(i); } } if ((extraAttributes.count()) > 0) { int superResult = super.accessibilityAttributeNames(id, sel); org.eclipse.swt.widgets.NSArray baseAttributes = new org.eclipse.swt.widgets.NSArray(superResult); org.eclipse.swt.widgets.NSMutableArray mutableAttributes = org.eclipse.swt.widgets.NSMutableArray.arrayWithCapacity(((baseAttributes.count()) + 1)); mutableAttributes.addObjectsFromArray(baseAttributes); for (int i = 0; i < (extraAttributes.count()); i++) { org.eclipse.swt.widgets.id currAttribute = extraAttributes.objectAtIndex(i); if (!(mutableAttributes.containsObject(currAttribute))) { mutableAttributes.addObject(currAttribute); } } return mutableAttributes.id; } } } return super.accessibilityAttributeNames(id, sel); }
boolean dragDetect(int x, int y, boolean filter, boolean[] consume) { if (((style) & (SWT.READ_ONLY)) == 0) { org.eclipse.swt.widgets.NSText fieldEditor = ((org.eclipse.swt.widgets.NSControl) (view)).currentEditor(); if (fieldEditor != null) { org.eclipse.swt.widgets.NSRange selectedRange = fieldEditor.selectedRange(); if ((selectedRange.length) > 0) { org.eclipse.swt.widgets.NSPoint mouseLocation = org.eclipse.swt.widgets.NSEvent.mouseLocation(); org.eclipse.swt.widgets.NSTextView feAsTextView = new org.eclipse.swt.widgets.NSTextView(fieldEditor); int charPosition = feAsTextView.characterIndexForInsertionAtPoint(mouseLocation); if (((charPosition != (OS.NSNotFound)) && (charPosition >= (selectedRange.location))) && (charPosition < ((selectedRange.location) + (selectedRange.length)))) { if (super.dragDetect(x, y, filter, consume)) { if (consume != null) consume[0] = true; return true; } } } } return false; } return super.dragDetect(x, y, filter, consume); }
public int internal_new_GC(org.eclipse.swt.printing.GCData data) { if (isDisposed()) org.eclipse.swt.printing.SWT.error(SWT.ERROR_GRAPHIC_DISPOSED); setupNewPage(); if (data != null) { if (isGCCreated) org.eclipse.swt.printing.SWT.error(SWT.ERROR_INVALID_ARGUMENT); data.device = this; data.background = getSystemColor(SWT.COLOR_WHITE).handle; data.foreground = getSystemColor(SWT.COLOR_BLACK).handle; data.font = getSystemFont(); isGCCreated = true; } return context; }
int GetExternal(int ppDispatch) { return COM.E_NOTIMPL; }
int imContext() { if (((style) & (SWT.SINGLE)) != 0) { return org.eclipse.swt.widgets.OS.gtk_editable_get_editable(handle) ? org.eclipse.swt.widgets.OS.GTK_ENTRY_IM_CONTEXT(handle) : 0; } return org.eclipse.swt.widgets.OS.GTK_TEXTVIEW_IM_CONTEXT(handle); }
public org.eclipse.swt.widgets.FontData open() { int handle; byte[] titleBytes; titleBytes = org.eclipse.swt.widgets.Converter.wcsToMbcs(null, title, true); handle = org.eclipse.swt.widgets.OS.gtk_font_selection_dialog_new(titleBytes); if ((parent) != null) { int shellHandle = parent.topHandle(); org.eclipse.swt.widgets.OS.gtk_window_set_transient_for(handle, shellHandle); int pixbufs = org.eclipse.swt.widgets.OS.gtk_window_get_icon_list(shellHandle); if (pixbufs != 0) { org.eclipse.swt.widgets.OS.gtk_window_set_icon_list(handle, pixbufs); org.eclipse.swt.widgets.OS.g_list_free(pixbufs); } } if ((fontData) != null) { org.eclipse.swt.widgets.Display display = ((parent) != null) ? parent.display : org.eclipse.swt.widgets.Display.getCurrent(); org.eclipse.swt.widgets.Font font = new org.eclipse.swt.widgets.Font(display, fontData); int fontName = org.eclipse.swt.widgets.OS.pango_font_description_to_string(font.handle); int length = org.eclipse.swt.widgets.OS.strlen(fontName); byte[] buffer = new byte[length + 1]; org.eclipse.swt.widgets.OS.memmove(buffer, fontName, length); font.dispose(); org.eclipse.swt.widgets.OS.g_free(fontName); org.eclipse.swt.widgets.OS.gtk_font_selection_dialog_set_font_name(handle, buffer); } int response = org.eclipse.swt.widgets.OS.gtk_dialog_run(handle); boolean success = response == (OS.GTK_RESPONSE_OK); if (success) { int fontName = org.eclipse.swt.widgets.OS.gtk_font_selection_dialog_get_font_name(handle); int length = org.eclipse.swt.widgets.OS.strlen(fontName); byte[] buffer = new byte[length + 1]; org.eclipse.swt.widgets.OS.memmove(buffer, fontName, length); org.eclipse.swt.widgets.OS.g_free(fontName); int fontDesc = org.eclipse.swt.widgets.OS.pango_font_description_from_string(buffer); org.eclipse.swt.widgets.Display display = ((parent) != null) ? parent.display : org.eclipse.swt.widgets.Display.getCurrent(); org.eclipse.swt.widgets.Font font = org.eclipse.swt.widgets.Font.gtk_new(display, fontDesc); fontData = font.getFontData()[0]; org.eclipse.swt.widgets.OS.pango_font_description_free(fontDesc); } org.eclipse.swt.widgets.OS.gtk_widget_destroy(handle); if (!success) return null; return fontData; }
public void setSelection(int value) { checkWidget(); int state = 0; boolean fixSelection = false; if ((!(OS.IsWinCE)) && ((OS.WIN32_VERSION) >= (org.eclipse.swt.widgets.OS.VERSION(6, 0)))) { int minumum = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.PBM_GETRANGE, 1, 0); int selection = ((int) (org.eclipse.swt.widgets.OS.SendMessage(handle, OS.PBM_GETPOS, 0, 0))); if (selection == minumum) { fixSelection = true; state = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.PBM_GETSTATE, 0, 0); org.eclipse.swt.widgets.OS.SendMessage(handle, OS.PBM_SETSTATE, OS.PBST_NORMAL, 0); } } org.eclipse.swt.widgets.OS.SendMessage(handle, OS.PBM_SETPOS, value, 0); if ((!(OS.IsWinCE)) && ((OS.WIN32_VERSION) >= (org.eclipse.swt.widgets.OS.VERSION(6, 0)))) { if (fixSelection) org.eclipse.swt.widgets.OS.SendMessage(handle, OS.PBM_SETSTATE, state, 0); } }
public void setRedraw(boolean redraw) { checkWidget(); int hItem = 0; if (redraw) { if ((drawCount) == 1) { int count = ((int) (org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETCOUNT, 0, 0))); if (count == 0) { org.eclipse.swt.widgets.TVINSERTSTRUCT tvInsert = new org.eclipse.swt.widgets.TVINSERTSTRUCT(); tvInsert.hInsertAfter = OS.TVI_FIRST; hItem = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_INSERTITEM, 0, tvInsert); } org.eclipse.swt.widgets.OS.DefWindowProc(handle, OS.WM_SETREDRAW, 1, 0); updateScrollBar(); } } super.setRedraw(redraw); if (!redraw) { if ((drawCount) == 1) org.eclipse.swt.widgets.OS.DefWindowProc(handle, OS.WM_SETREDRAW, 0, 0); } if (hItem != 0) { ignoreShrink = true; org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_DELETEITEM, 0, hItem); ignoreShrink = false; } }
int[] createGdipImage() { switch (type) { case SWT.BITMAP : { if ((((alpha) != (-1)) || ((alphaData) != null)) || ((transparentPixel) != (-1))) { org.eclipse.swt.graphics.BITMAP bm = new org.eclipse.swt.graphics.BITMAP(); org.eclipse.swt.graphics.OS.GetObject(handle, BITMAP.sizeof, bm); int imgWidth = bm.bmWidth; int imgHeight = bm.bmHeight; int hDC = device.internal_new_GC(null); int srcHdc = org.eclipse.swt.graphics.OS.CreateCompatibleDC(hDC); int oldSrcBitmap = org.eclipse.swt.graphics.OS.SelectObject(srcHdc, handle); int memHdc = org.eclipse.swt.graphics.OS.CreateCompatibleDC(hDC); int memDib = org.eclipse.swt.graphics.Image.createDIB(imgWidth, imgHeight, 32); if (memDib == 0) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NO_HANDLES); int oldMemBitmap = org.eclipse.swt.graphics.OS.SelectObject(memHdc, memDib); org.eclipse.swt.graphics.BITMAP dibBM = new org.eclipse.swt.graphics.BITMAP(); org.eclipse.swt.graphics.OS.GetObject(memDib, BITMAP.sizeof, dibBM); int sizeInBytes = (dibBM.bmWidthBytes) * (dibBM.bmHeight); org.eclipse.swt.graphics.OS.BitBlt(memHdc, 0, 0, imgWidth, imgHeight, srcHdc, 0, 0, OS.SRCCOPY); byte red = 0; byte green = 0; byte blue = 0; if ((transparentPixel) != (-1)) { if ((bm.bmBitsPixel) <= 8) { byte[] color = new byte[4]; org.eclipse.swt.graphics.OS.GetDIBColorTable(srcHdc, transparentPixel, 1, color); blue = color[0]; green = color[1]; red = color[2]; } else { switch (bm.bmBitsPixel) { case 16 : blue = ((byte) (((transparentPixel) & 31) << 3)); green = ((byte) (((transparentPixel) & 992) >> 2)); red = ((byte) (((transparentPixel) & 31744) >> 7)); break; case 24 : blue = ((byte) (((transparentPixel) & 16711680) >> 16)); green = ((byte) (((transparentPixel) & 65280) >> 8)); red = ((byte) ((transparentPixel) & 255)); break; case 32 : blue = ((byte) (((transparentPixel) & -16777216) >>> 24)); green = ((byte) (((transparentPixel) & 16711680) >> 16)); red = ((byte) (((transparentPixel) & 65280) >> 8)); break; } } } org.eclipse.swt.graphics.OS.SelectObject(srcHdc, oldSrcBitmap); org.eclipse.swt.graphics.OS.SelectObject(memHdc, oldMemBitmap); org.eclipse.swt.graphics.OS.DeleteObject(srcHdc); org.eclipse.swt.graphics.OS.DeleteObject(memHdc); byte[] srcData = new byte[sizeInBytes]; org.eclipse.swt.graphics.OS.MoveMemory(srcData, dibBM.bmBits, sizeInBytes); org.eclipse.swt.graphics.OS.DeleteObject(memDib); device.internal_dispose_GC(hDC, null); if ((alpha) != (-1)) { for (int y = 0, dp = 0; y < imgHeight; ++y) { for (int x = 0; x < imgWidth; ++x) { srcData[(dp + 3)] = ((byte) (alpha)); dp += 4; } } } else if ((alphaData) != null) { for (int y = 0, dp = 0, ap = 0; y < imgHeight; ++y) { for (int x = 0; x < imgWidth; ++x) { srcData[(dp + 3)] = alphaData[(ap++)]; dp += 4; } } } else if ((transparentPixel) != (-1)) { for (int y = 0, dp = 0; y < imgHeight; ++y) { for (int x = 0; x < imgWidth; ++x) { if ((((srcData[dp]) == blue) && ((srcData[(dp + 1)]) == green)) && ((srcData[(dp + 2)]) == red)) { srcData[(dp + 3)] = ((byte) (0)); } else { srcData[(dp + 3)] = ((byte) (255)); } dp += 4; } } } int hHeap = org.eclipse.swt.graphics.OS.GetProcessHeap(); int pixels = org.eclipse.swt.graphics.OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, srcData.length); org.eclipse.swt.graphics.OS.MoveMemory(pixels, srcData, sizeInBytes); return new int[]{ org.eclipse.swt.graphics.Gdip.Bitmap_new(imgWidth, imgHeight, dibBM.bmWidthBytes, Gdip.PixelFormat32bppARGB, pixels), pixels }; } return new int[]{ org.eclipse.swt.graphics.Gdip.Bitmap_new(handle, 0), 0 }; } case SWT.ICON : { org.eclipse.swt.graphics.ICONINFO iconInfo = new org.eclipse.swt.graphics.ICONINFO(); if (OS.IsWinCE) { org.eclipse.swt.graphics.Image.GetIconInfo(this, iconInfo); } else { org.eclipse.swt.graphics.OS.GetIconInfo(handle, iconInfo); } int hBitmap = iconInfo.hbmColor; if (hBitmap == 0) hBitmap = iconInfo.hbmMask; org.eclipse.swt.graphics.BITMAP bm = new org.eclipse.swt.graphics.BITMAP(); org.eclipse.swt.graphics.OS.GetObject(hBitmap, BITMAP.sizeof, bm); int imgWidth = bm.bmWidth; int imgHeight = (hBitmap == (iconInfo.hbmMask)) ? (bm.bmHeight) / 2 : bm.bmHeight; int img = 0; int pixels = 0; if (imgWidth > imgHeight) { int hDC = device.internal_new_GC(null); int srcHdc = org.eclipse.swt.graphics.OS.CreateCompatibleDC(hDC); int oldSrcBitmap = org.eclipse.swt.graphics.OS.SelectObject(srcHdc, hBitmap); int memHdc = org.eclipse.swt.graphics.OS.CreateCompatibleDC(hDC); int memDib = org.eclipse.swt.graphics.Image.createDIB(imgWidth, imgHeight, 32); if (memDib == 0) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NO_HANDLES); int oldMemBitmap = org.eclipse.swt.graphics.OS.SelectObject(memHdc, memDib); org.eclipse.swt.graphics.BITMAP dibBM = new org.eclipse.swt.graphics.BITMAP(); org.eclipse.swt.graphics.OS.GetObject(memDib, BITMAP.sizeof, dibBM); org.eclipse.swt.graphics.OS.BitBlt(memHdc, 0, 0, imgWidth, imgHeight, srcHdc, 0, (hBitmap == (iconInfo.hbmMask) ? imgHeight : 0), OS.SRCCOPY); org.eclipse.swt.graphics.OS.SelectObject(memHdc, oldMemBitmap); org.eclipse.swt.graphics.OS.DeleteObject(memHdc); byte[] srcData = new byte[(dibBM.bmWidthBytes) * (dibBM.bmHeight)]; org.eclipse.swt.graphics.OS.MoveMemory(srcData, dibBM.bmBits, srcData.length); org.eclipse.swt.graphics.OS.DeleteObject(memDib); org.eclipse.swt.graphics.OS.SelectObject(srcHdc, iconInfo.hbmMask); for (int y = 0, dp = 0; y < imgHeight; ++y) { for (int x = 0; x < imgWidth; ++x) { if ((org.eclipse.swt.graphics.OS.GetPixel(srcHdc, x, y)) != 0) { srcData[(dp + 3)] = ((byte) (0)); } else { srcData[(dp + 3)] = ((byte) (255)); } dp += 4; } } org.eclipse.swt.graphics.OS.SelectObject(srcHdc, oldSrcBitmap); org.eclipse.swt.graphics.OS.DeleteObject(srcHdc); device.internal_dispose_GC(hDC, null); int hHeap = org.eclipse.swt.graphics.OS.GetProcessHeap(); pixels = org.eclipse.swt.graphics.OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, srcData.length); org.eclipse.swt.graphics.OS.MoveMemory(pixels, srcData, srcData.length); img = org.eclipse.swt.graphics.Gdip.Bitmap_new(imgWidth, imgHeight, dibBM.bmWidthBytes, Gdip.PixelFormat32bppARGB, pixels); } else { img = org.eclipse.swt.graphics.Gdip.Bitmap_new(handle); } if ((iconInfo.hbmColor) != 0) org.eclipse.swt.graphics.OS.DeleteObject(iconInfo.hbmColor); if ((iconInfo.hbmMask) != 0) org.eclipse.swt.graphics.OS.DeleteObject(iconInfo.hbmMask); return new int[]{ img, pixels }; } default : org.eclipse.swt.graphics.SWT.error(SWT.ERROR_UNSUPPORTED_FORMAT); } return null; }
public org.eclipse.swt.widgets.Point computeSize(int wHint, int hHint, boolean changed) { checkWidget(); if (((style) & (SWT.ARROW)) != 0) { int width = (wHint != (SWT.DEFAULT)) ? wHint : 14; int height = (hHint != (SWT.DEFAULT)) ? hHint : 14; return new org.eclipse.swt.widgets.Point(width, height); } org.eclipse.swt.widgets.NSSize size = ((org.eclipse.swt.widgets.NSButton) (view)).cell().cellSize(); int width = ((int) (java.lang.Math.ceil(size.width))); int height = ((int) (java.lang.Math.ceil(size.height))); if (wHint != (SWT.DEFAULT)) width = wHint; if (hHint != (SWT.DEFAULT)) height = hHint; if (((display.smallFonts) && (((style) & ((SWT.PUSH) | (SWT.TOGGLE))) != 0)) && (((style) & (SWT.FLAT)) == 0)) { height += org.eclipse.swt.widgets.Button.EXTRA_HEIGHT; } if ((((style) & ((SWT.PUSH) | (SWT.TOGGLE))) != 0) && (((style) & (SWT.FLAT)) == 0)) { width += org.eclipse.swt.widgets.Button.EXTRA_WIDTH; } return new org.eclipse.swt.widgets.Point(width, height); }
public static java.awt.Frame new_Frame(final org.eclipse.swt.widgets.Composite parent) { if (parent == null) org.eclipse.swt.awt.SWT.error(SWT.ERROR_NULL_ARGUMENT); if (((parent.getStyle()) & (SWT.EMBEDDED)) == 0) { org.eclipse.swt.awt.SWT.error(SWT.ERROR_INVALID_ARGUMENT); } int handle = parent.embeddedHandle; java.lang.Class clazz = null; try { java.lang.String className = ((org.eclipse.swt.awt.SWT_AWT.embeddedFrameClass) != null) ? org.eclipse.swt.awt.SWT_AWT.embeddedFrameClass : "sun.awt.X11.XEmbeddedFrame"; clazz = java.lang.Class.forName(className); } catch (java.lang.Throwable e) { org.eclipse.swt.awt.SWT.error(SWT.ERROR_NOT_IMPLEMENTED, e, " [need JDK 1.5 or greater]"); } org.eclipse.swt.awt.SWT_AWT.initializeSwing(); java.lang.Object value = null; java.lang.reflect.Constructor constructor = null; try { constructor = clazz.getConstructor(new java.lang.Class[]{ int.class }); value = constructor.newInstance(new java.lang.Object[]{ new java.lang.Integer(((int) (handle))) }); } catch (java.lang.Throwable e1) { try { constructor = clazz.getConstructor(new java.lang.Class[]{ long.class }); value = constructor.newInstance(new java.lang.Object[]{ new java.lang.Long(handle) }); } catch (java.lang.Throwable e2) { org.eclipse.swt.awt.SWT.error(SWT.ERROR_NOT_IMPLEMENTED, e2); } } final java.awt.Frame frame = ((java.awt.Frame) (value)); try { java.lang.reflect.Method method = clazz.getMethod("registerListeners", null); if (method != null) method.invoke(value, null); } catch (java.lang.Throwable e) { } parent.addListener(SWT.Dispose, new org.eclipse.swt.widgets.Listener() { public void handleEvent(org.eclipse.swt.widgets.Event event) { parent.setVisible(false); java.awt.EventQueue.invokeLater(new java.lang.Runnable() { public void run() { frame.dispose(); } }); } }); parent.getDisplay().asyncExec(new java.lang.Runnable() { public void run() { if (parent.isDisposed()) return; final org.eclipse.swt.graphics.Rectangle clientArea = parent.getClientArea(); java.awt.EventQueue.invokeLater(new java.lang.Runnable() { public void run() { frame.setSize(clientArea.width, clientArea.height); frame.validate(); } }); } }); return frame; }
public java.lang.String open() { int hHeap = org.eclipse.swt.widgets.OS.GetProcessHeap(); int hwndOwner = 0; if ((parent) != null) hwndOwner = parent.handle; if ((title) == null) title = ""; org.eclipse.swt.widgets.TCHAR buffer3 = new org.eclipse.swt.widgets.TCHAR(0, title, true); int byteCount3 = (buffer3.length()) * (TCHAR.sizeof); int lpstrTitle = org.eclipse.swt.widgets.OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, byteCount3); org.eclipse.swt.widgets.OS.MoveMemory(lpstrTitle, buffer3, byteCount3); java.lang.String strFilter = ""; if ((filterNames) == null) filterNames = new java.lang.String[0]; if ((filterExtensions) == null) filterExtensions = new java.lang.String[0]; for (int i = 0; i < (filterExtensions.length); i++) { java.lang.String filterName = filterExtensions[i]; if (i < (filterNames.length)) filterName = filterNames[i]; strFilter = (((strFilter + filterName) + '\u0000') + (filterExtensions[i])) + '\u0000'; } if ((filterExtensions.length) == 0) { strFilter = (((strFilter + (org.eclipse.swt.widgets.FileDialog.FILTER)) + '\u0000') + (org.eclipse.swt.widgets.FileDialog.FILTER)) + '\u0000'; } org.eclipse.swt.widgets.TCHAR buffer4 = new org.eclipse.swt.widgets.TCHAR(0, strFilter, true); int byteCount4 = (buffer4.length()) * (TCHAR.sizeof); int lpstrFilter = org.eclipse.swt.widgets.OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, byteCount4); org.eclipse.swt.widgets.OS.MoveMemory(lpstrFilter, buffer4, byteCount4); if ((fileName) == null) fileName = ""; org.eclipse.swt.widgets.TCHAR name = new org.eclipse.swt.widgets.TCHAR(0, fileName, true); if (!(OS.IsWinCE)) { if ((org.eclipse.swt.widgets.OS.GetFileTitle(name, null, ((short) (0)))) < 0) { name = new org.eclipse.swt.widgets.TCHAR(0, "", true); } } int nMaxFile = 256; if (((style) & (SWT.MULTI)) != 0) nMaxFile = java.lang.Math.max(nMaxFile, org.eclipse.swt.widgets.FileDialog.BUFFER_SIZE); int byteCount = nMaxFile * (TCHAR.sizeof); int lpstrFile = org.eclipse.swt.widgets.OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, byteCount); int byteCountFile = java.lang.Math.min(((name.length()) * (TCHAR.sizeof)), (byteCount - (TCHAR.sizeof))); org.eclipse.swt.widgets.OS.MoveMemory(lpstrFile, name, byteCountFile); if ((filterPath) == null) filterPath = ""; org.eclipse.swt.widgets.TCHAR path = new org.eclipse.swt.widgets.TCHAR(0, filterPath, true); int lpstrInitialDir = org.eclipse.swt.widgets.OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, byteCount); int byteCountDir = java.lang.Math.min(((path.length()) * (TCHAR.sizeof)), (byteCount - (TCHAR.sizeof))); org.eclipse.swt.widgets.OS.MoveMemory(lpstrInitialDir, path, byteCountDir); org.eclipse.swt.widgets.OPENFILENAME struct = new org.eclipse.swt.widgets.OPENFILENAME(); struct.lStructSize = OPENFILENAME.sizeof; struct.Flags = (OS.OFN_HIDEREADONLY) | (OS.OFN_NOCHANGEDIR); if (((style) & (SWT.MULTI)) != 0) { struct.Flags |= (OS.OFN_ALLOWMULTISELECT) | (OS.OFN_EXPLORER); } struct.hwndOwner = hwndOwner; struct.lpstrTitle = lpstrTitle; struct.lpstrFile = lpstrFile; struct.nMaxFile = nMaxFile; struct.lpstrInitialDir = lpstrInitialDir; struct.lpstrFilter = lpstrFilter; struct.nFilterIndex = 0; int hwndFocus = org.eclipse.swt.widgets.OS.GetFocus(); int hCursor = org.eclipse.swt.widgets.OS.GetCursor(); boolean save = ((style) & (SWT.SAVE)) != 0; boolean success = (save) ? org.eclipse.swt.widgets.OS.GetSaveFileName(struct) : org.eclipse.swt.widgets.OS.GetOpenFileName(struct); if ((org.eclipse.swt.widgets.OS.CommDlgExtendedError()) == (OS.FNERR_INVALIDFILENAME)) { org.eclipse.swt.widgets.OS.MoveMemory(lpstrFile, new org.eclipse.swt.widgets.TCHAR(0, "", true), TCHAR.sizeof); success = (save) ? org.eclipse.swt.widgets.OS.GetSaveFileName(struct) : org.eclipse.swt.widgets.OS.GetOpenFileName(struct); } fullPath = null; if (success) { org.eclipse.swt.widgets.TCHAR buffer = new org.eclipse.swt.widgets.TCHAR(0, struct.nMaxFile); int byteCount1 = (buffer.length()) * (TCHAR.sizeof); org.eclipse.swt.widgets.OS.MoveMemory(buffer, lpstrFile, byteCount1); int nFileOffset = struct.nFileOffset; if ((OS.IsWinCE) && (nFileOffset == 0)) { int index = 0; while (index < (buffer.length())) { int ch = buffer.tcharAt(index); if (ch == 0) break; if (ch == '\\') nFileOffset = index + 1; index++; } } if (nFileOffset != 0) { org.eclipse.swt.widgets.TCHAR prefix = new org.eclipse.swt.widgets.TCHAR(0, (nFileOffset - 1)); int byteCount2 = (prefix.length()) * (TCHAR.sizeof); org.eclipse.swt.widgets.OS.MoveMemory(prefix, lpstrFile, byteCount2); filterPath = prefix.toString(0, prefix.length()); int count = 0; fileNames = new java.lang.String[((style) & (SWT.MULTI)) != 0 ? 4 : 1]; int start = nFileOffset; do { int end = start; while ((end < (buffer.length())) && ((buffer.tcharAt(end)) != 0)) end++; java.lang.String string = buffer.toString(start, (end - start)); start = end; if (count == (fileNames.length)) { java.lang.String[] newFileNames = new java.lang.String[(fileNames.length) + 4]; java.lang.System.arraycopy(fileNames, 0, newFileNames, 0, fileNames.length); fileNames = newFileNames; } fileNames[(count++)] = string; if (((style) & (SWT.MULTI)) == 0) break; start++; } while ((start < (buffer.length())) && ((buffer.tcharAt(start)) != 0) ); if ((fileNames.length) > 0) fileName = fileNames[0]; java.lang.String separator = ""; int length = filterPath.length(); if ((length > 0) && ((filterPath.charAt((length - 1))) != '\\')) { separator = "\\"; } fullPath = ((filterPath) + separator) + (fileName); if (count < (fileNames.length)) { java.lang.String[] newFileNames = new java.lang.String[count]; java.lang.System.arraycopy(fileNames, 0, newFileNames, 0, count); fileNames = newFileNames; } } } org.eclipse.swt.widgets.OS.HeapFree(hHeap, 0, lpstrFile); org.eclipse.swt.widgets.OS.HeapFree(hHeap, 0, lpstrFilter); org.eclipse.swt.widgets.OS.HeapFree(hHeap, 0, lpstrInitialDir); org.eclipse.swt.widgets.OS.HeapFree(hHeap, 0, lpstrTitle); org.eclipse.swt.widgets.OS.SetCursor(hCursor); org.eclipse.swt.widgets.OS.SetFocus(hwndFocus); return fullPath; }
public void setLineAttributes(org.eclipse.swt.graphics.LineAttributes attributes) { if ((handle) == 0) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_GRAPHIC_DISPOSED); if (attributes == null) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NULL_ARGUMENT); int mask = 0; float lineWidth = attributes.width; if (lineWidth != (data.lineWidth)) { mask |= (org.eclipse.swt.graphics.GC.LINE_WIDTH) | (org.eclipse.swt.graphics.GC.DRAW_OFFSET); } int lineStyle = attributes.style; if (lineStyle != (data.lineStyle)) { mask |= org.eclipse.swt.graphics.GC.LINE_STYLE; switch (lineStyle) { case SWT.LINE_SOLID : case SWT.LINE_DASH : case SWT.LINE_DOT : case SWT.LINE_DASHDOT : case SWT.LINE_DASHDOTDOT : break; case SWT.LINE_CUSTOM : if ((attributes.dash) == null) lineStyle = SWT.LINE_SOLID; break; default : org.eclipse.swt.graphics.SWT.error(SWT.ERROR_INVALID_ARGUMENT); } } int join = attributes.join; if (join != (data.lineJoin)) { mask |= org.eclipse.swt.graphics.GC.LINE_JOIN; switch (join) { case SWT.CAP_ROUND : case SWT.CAP_FLAT : case SWT.CAP_SQUARE : break; default : org.eclipse.swt.graphics.SWT.error(SWT.ERROR_INVALID_ARGUMENT); } } int cap = attributes.join; if (cap != (data.lineCap)) { mask |= org.eclipse.swt.graphics.GC.LINE_CAP; switch (cap) { case SWT.JOIN_MITER : case SWT.JOIN_ROUND : case SWT.JOIN_BEVEL : break; default : org.eclipse.swt.graphics.SWT.error(SWT.ERROR_INVALID_ARGUMENT); } } float[] dashes = attributes.dash; float[] lineDashes = data.lineDashes; if ((dashes != null) && ((dashes.length) > 0)) { boolean changed = (lineDashes == null) || ((lineDashes.length) != (dashes.length)); for (int i = 0; i < (dashes.length); i++) { float dash = dashes[i]; if (dash <= 0) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_INVALID_ARGUMENT); if ((!changed) && ((lineDashes[i]) != dash)) changed = true; } if (changed) { float[] newDashes = new float[dashes.length]; java.lang.System.arraycopy(dashes, 0, newDashes, 0, dashes.length); dashes = newDashes; mask |= org.eclipse.swt.graphics.GC.LINE_STYLE; } else { dashes = lineDashes; } } else { if ((lineDashes != null) && ((lineDashes.length) > 0)) { mask |= org.eclipse.swt.graphics.GC.LINE_STYLE; } else { dashes = lineDashes; } } float dashOffset = attributes.dashOffset; if (dashOffset != (data.lineDashesOffset)) { mask |= org.eclipse.swt.graphics.GC.LINE_STYLE; } float miterLimit = attributes.miterLimit; if (miterLimit != (data.lineMiterLimit)) { mask |= org.eclipse.swt.graphics.GC.LINE_MITERLIMIT; } if (mask == 0) return; data.lineWidth = lineWidth; data.lineStyle = lineStyle; data.lineCap = cap; data.lineJoin = join; data.lineDashes = dashes; data.lineDashesOffset = dashOffset; data.lineMiterLimit = miterLimit; data.state &= ~mask; }
boolean gestureEvent(int id, int eventPtr, int detail) { if (!(display.sendEvent)) return true; display.sendEvent = false; if (touchEnabled) return true; if (!(isEventView(id))) return true; if ((!(hooks(SWT.Gesture))) && (!(filters(SWT.Gesture)))) return true; org.eclipse.swt.widgets.NSEvent nsEvent = new org.eclipse.swt.widgets.NSEvent(eventPtr); org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); org.eclipse.swt.widgets.NSPoint windowPoint; org.eclipse.swt.widgets.NSView view = eventView(); windowPoint = nsEvent.locationInWindow(); org.eclipse.swt.widgets.NSPoint point = view.convertPoint_fromView_(windowPoint, null); if (!(view.isFlipped())) { point.y = (view.bounds().height) - (point.y); } event.x = ((int) (point.x)); event.y = ((int) (point.y)); setInputState(event, nsEvent, SWT.Gesture); event.detail = detail; if (detail == (SWT.GESTURE_BEGIN)) { display.rotation = 0.0; display.magnification = 1.0; display.gestureActive = true; } else if (detail == (SWT.GESTURE_END)) { display.gestureActive = false; } switch (detail) { case SWT.GESTURE_SWIPE : event.xDirection = ((int) (-(nsEvent.deltaX()))); event.yDirection = ((int) (-(nsEvent.deltaY()))); break; case SWT.GESTURE_ROTATE : { display.rotation += nsEvent.rotation(); event.rotation = display.rotation; break; } case SWT.GESTURE_MAGNIFY : display.magnification *= 1.0 + (nsEvent.magnification()); event.magnification = display.magnification; break; case SWT.GESTURE_PAN : if (display.gestureActive) { event.xDirection = ((int) (-(nsEvent.deltaX()))); event.yDirection = ((int) (-(nsEvent.deltaY()))); if (((event.xDirection) == 0) && ((event.yDirection) == 0)) return true; } break; } sendEvent(SWT.Gesture, event); return event.doit; }
org.eclipse.swt.widgets.LRESULT WM_LBUTTONDOWN(int wParam, int lParam) { if (!(OS.IsPPC)) { return super.WM_LBUTTONDOWN(wParam, lParam); } sendMouseEvent(SWT.MouseDown, 1, OS.WM_LBUTTONDOWN, wParam, lParam); boolean hasMenu = ((menu) != null) && (!(menu.isDisposed())); if (hasMenu || (hooks(SWT.MenuDetect))) { int x = ((short) (lParam & 65535)); int y = ((short) (lParam >> 16)); org.eclipse.swt.widgets.SHRGINFO shrg = new org.eclipse.swt.widgets.SHRGINFO(); shrg.cbSize = SHRGINFO.sizeof; shrg.hwndClient = handle; shrg.ptDown_x = x; shrg.ptDown_y = y; shrg.dwFlags = OS.SHRG_RETURNCMD; int type = org.eclipse.swt.widgets.OS.SHRecognizeGesture(shrg); if (type == (OS.GN_CONTEXTMENU)) { showMenu(x, y); return LRESULT.ONE; } } int result = callWindowProc(OS.WM_LBUTTONDOWN, wParam, lParam); return new org.eclipse.swt.widgets.LRESULT(result); }
static void createAccessible(org.eclipse.swt.accessibility.Accessible accessible) { int controlHandle = accessible.getControlHandle(); org.eclipse.swt.accessibility.OS.gtk_widget_get_accessible(controlHandle); }
void createItem(org.eclipse.swt.widgets.TreeColumn column, int index) { if ((hwndHeader) == 0) createParent(); int columnCount = org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0); if (!((0 <= index) && (index <= columnCount))) error(SWT.ERROR_INVALID_RANGE); if (columnCount == (columns.length)) { org.eclipse.swt.widgets.TreeColumn[] newColumns = new org.eclipse.swt.widgets.TreeColumn[(columns.length) + 4]; java.lang.System.arraycopy(columns, 0, newColumns, 0, columns.length); columns = newColumns; } for (int i = 0; i < (items.length); i++) { org.eclipse.swt.widgets.TreeItem item = items[i]; if (item != null) { java.lang.String[] strings = item.strings; if (strings != null) { java.lang.String[] temp = new java.lang.String[columnCount + 1]; java.lang.System.arraycopy(strings, 0, temp, 0, index); java.lang.System.arraycopy(strings, index, temp, (index + 1), (columnCount - index)); item.strings = temp; } org.eclipse.swt.widgets.Image[] images = item.images; if (images != null) { org.eclipse.swt.widgets.Image[] temp = new org.eclipse.swt.widgets.Image[columnCount + 1]; java.lang.System.arraycopy(images, 0, temp, 0, index); java.lang.System.arraycopy(images, index, temp, (index + 1), (columnCount - index)); item.images = temp; } if (index == 0) { if (columnCount != 0) { if (strings == null) { item.strings = new java.lang.String[columnCount + 1]; item.strings[1] = item.text; } item.text = ""; if (images == null) { item.images = new org.eclipse.swt.widgets.Image[columnCount + 1]; item.images[1] = item.image; } item.image = null; } } if ((item.cellBackground) != null) { int[] cellBackground = item.cellBackground; int[] temp = new int[columnCount + 1]; java.lang.System.arraycopy(cellBackground, 0, temp, 0, index); java.lang.System.arraycopy(cellBackground, index, temp, (index + 1), (columnCount - index)); temp[index] = -1; item.cellBackground = temp; } if ((item.cellForeground) != null) { int[] cellForeground = item.cellForeground; int[] temp = new int[columnCount + 1]; java.lang.System.arraycopy(cellForeground, 0, temp, 0, index); java.lang.System.arraycopy(cellForeground, index, temp, (index + 1), (columnCount - index)); temp[index] = -1; item.cellForeground = temp; } if ((item.cellFont) != null) { int[] cellFont = item.cellFont; int[] temp = new int[columnCount + 1]; java.lang.System.arraycopy(cellFont, 0, temp, 0, index); java.lang.System.arraycopy(cellFont, index, temp, (index + 1), (columnCount - index)); temp[index] = -1; item.cellFont = temp; } } } java.lang.System.arraycopy(columns, index, columns, (index + 1), (columnCount - index)); columns[index] = column; int hHeap = org.eclipse.swt.widgets.OS.GetProcessHeap(); int pszText = org.eclipse.swt.widgets.OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, TCHAR.sizeof); org.eclipse.swt.widgets.HDITEM hdItem = new org.eclipse.swt.widgets.HDITEM(); hdItem.mask = (OS.HDI_TEXT) | (OS.HDI_FORMAT); hdItem.pszText = pszText; if (((column.style) & (SWT.LEFT)) == (SWT.LEFT)) hdItem.fmt = OS.HDF_LEFT; if (((column.style) & (SWT.CENTER)) == (SWT.CENTER)) hdItem.fmt = OS.HDF_CENTER; if (((column.style) & (SWT.RIGHT)) == (SWT.RIGHT)) hdItem.fmt = OS.HDF_RIGHT; org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_INSERTITEM, index, hdItem); if (pszText != 0) org.eclipse.swt.widgets.OS.HeapFree(hHeap, 0, pszText); if (columnCount == 0) { int bits = org.eclipse.swt.widgets.OS.GetWindowLong(handle, OS.GWL_STYLE); bits |= OS.TVS_NOHSCROLL; org.eclipse.swt.widgets.OS.SetWindowLong(handle, OS.GWL_STYLE, bits); int count = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETCOUNT, 0, 0); if (count != 0) { if (!(OS.IsWinCE)) org.eclipse.swt.widgets.OS.ShowScrollBar(handle, OS.SB_HORZ, false); } } setScrollWidth(); updateImageList(); updateScrollBar(); if ((columnCount == 0) && ((org.eclipse.swt.widgets.OS.SendMessage(handle, OS.TVM_GETCOUNT, 0, 0)) != 0)) { org.eclipse.swt.widgets.OS.InvalidateRect(handle, null, true); } if ((headerToolTipHandle) != 0) { org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); if ((org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEMRECT, index, rect)) != 0) { org.eclipse.swt.widgets.TOOLINFO lpti = new org.eclipse.swt.widgets.TOOLINFO(); lpti.cbSize = TOOLINFO.sizeof; lpti.uFlags = OS.TTF_SUBCLASS; lpti.hwnd = hwndHeader; lpti.uId = column.id = (display.nextToolTipId)++; lpti.left = rect.left; lpti.top = rect.top; lpti.right = rect.right; lpti.bottom = rect.bottom; lpti.lpszText = OS.LPSTR_TEXTCALLBACK; org.eclipse.swt.widgets.OS.SendMessage(headerToolTipHandle, OS.TTM_ADDTOOL, 0, lpti); } } }
public void drawLine(int x1, int y1, int x2, int y2) { if ((handle) == null) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_GRAPHIC_DISPOSED); if (((x1 == x2) && (y1 == y2)) && ((data.lineWidth) <= 1)) { drawPoint(x1, y1); return; } org.eclipse.swt.graphics.NSAutoreleasePool pool = checkGC(org.eclipse.swt.graphics.GC.DRAW); try { org.eclipse.swt.graphics.NSBezierPath path = data.path; org.eclipse.swt.graphics.NSPoint pt = new org.eclipse.swt.graphics.NSPoint(); pt.x = x1 + (data.drawXOffset); pt.y = y1 + (data.drawYOffset); path.moveToPoint(pt); pt.x = x2 + (data.drawXOffset); pt.y = y2 + (data.drawYOffset); path.lineToPoint(pt); org.eclipse.swt.graphics.Pattern pattern = data.foregroundPattern; if ((pattern != null) && ((pattern.gradient) != null)) { strokePattern(path, pattern); } else { path.stroke(); } path.removeAllPoints(); } finally { uncheckGC(pool); } }
org.eclipse.swt.widgets.LRESULT wmSysKeyDown(int hwnd, int wParam, int lParam) { if (wParam != (OS.VK_F10)) { if ((lParam & 536870912) == 0) return null; } switch (wParam) { case OS.VK_F4 : { int hwndShell = hwnd; while ((org.eclipse.swt.widgets.OS.GetParent(hwndShell)) != 0) { if ((org.eclipse.swt.widgets.OS.GetWindow(hwndShell, OS.GW_OWNER)) != 0) break; hwndShell = org.eclipse.swt.widgets.OS.GetParent(hwndShell); } int bits = org.eclipse.swt.widgets.OS.GetWindowLong(hwndShell, OS.GWL_STYLE); if ((bits & (OS.WS_SYSMENU)) != 0) return null; } } switch (wParam) { case OS.VK_SHIFT : case OS.VK_MENU : case OS.VK_CONTROL : case OS.VK_CAPITAL : case OS.VK_NUMLOCK : case OS.VK_SCROLL : if ((lParam & 1073741824) != 0) return null; } display.lastAscii = display.lastKey = 0; display.lastVirtual = display.lastNull = display.lastDead = false; int mapKey = 0; if (OS.IsWinCE) { switch (wParam) { case OS.VK_BACK : mapKey = SWT.BS; break; case OS.VK_RETURN : mapKey = SWT.CR; break; case OS.VK_DELETE : mapKey = SWT.DEL; break; case OS.VK_ESCAPE : mapKey = SWT.ESC; break; case OS.VK_TAB : mapKey = SWT.TAB; break; } } else { mapKey = org.eclipse.swt.widgets.OS.MapVirtualKey(wParam, 2); } display.lastVirtual = (mapKey == 0) || ((display.numpadKey(wParam)) != 0); if (display.lastVirtual) { display.lastKey = wParam; if ((display.lastKey) == (OS.VK_DELETE)) display.lastAscii = 127; if (((OS.VK_NUMPAD0) <= (display.lastKey)) && ((display.lastKey) <= (OS.VK_DIVIDE))) { if ((display.asciiKey(display.lastKey)) != 0) return null; display.lastAscii = display.numpadKey(display.lastKey); } } else { display.lastKey = org.eclipse.swt.widgets.OS.CharLower(((short) (mapKey))); if (OS.IsWinNT) return null; if (wParam != (OS.VK_RETURN)) return null; display.lastAscii = '\r'; } if (!(sendKeyEvent(SWT.KeyDown, OS.WM_SYSKEYDOWN, wParam, lParam))) { return LRESULT.ONE; } return null; }
boolean setScrollWidth(org.eclipse.swt.widgets.TableItem item, boolean force) { if (ignoreRedraw) return false; if ((!force) && (((drawCount) != 0) || (!(org.eclipse.swt.widgets.OS.IsWindowVisible(handle))))) { fixScrollWidth = true; return false; } fixScrollWidth = false; int hwndHeader = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_GETHEADER, 0, 0); int count = org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0); if ((count == 1) && ((columns[0]) == null)) { if (((style) & (SWT.VIRTUAL)) != 0) { int newWidth = 0; count = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_GETITEMCOUNT, 0, 0); int index = 0; while (index < count) { java.lang.String string = null; if (item != null) { string = item.text; } else { if ((items[index]) != null) string = items[index].text; } if ((string != null) && ((string.length()) != 0)) { org.eclipse.swt.widgets.TCHAR buffer = new org.eclipse.swt.widgets.TCHAR(getCodePage(), string, true); newWidth = java.lang.Math.max(newWidth, org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_GETSTRINGWIDTH, 0, buffer)); } if (item != null) break; index++; } int hStateList = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_GETIMAGELIST, OS.LVSIL_STATE, 0); if (hStateList != 0) { int[] cx = new int[1]; int[] cy = new int[1]; org.eclipse.swt.widgets.OS.ImageList_GetIconSize(hStateList, cx, cy); newWidth += (cx[0]) + 4; } int hImageList = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_GETIMAGELIST, OS.LVSIL_SMALL, 0); if (hImageList != 0) { int[] cx = new int[1]; int[] cy = new int[1]; org.eclipse.swt.widgets.OS.ImageList_GetIconSize(hImageList, cx, cy); newWidth += cx[0]; } newWidth += 8; int oldWidth = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_GETCOLUMNWIDTH, 0, 0); if (newWidth > oldWidth) { org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_SETCOLUMNWIDTH, 0, newWidth); return true; } } else { org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_SETCOLUMNWIDTH, 0, OS.LVSCW_AUTOSIZE); if ((imageList) == null) { int width = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_GETCOLUMNWIDTH, 0, 0); org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_SETCOLUMNWIDTH, 0, (width + 2)); } return true; } } return false; }
static int checkStyle(int style) { if ((style & (SWT.SEPARATOR)) != 0) { style = checkBits(style, SWT.VERTICAL, SWT.HORIZONTAL, 0, 0, 0, 0); return checkBits(style, SWT.SHADOW_NONE, SWT.SHADOW_IN, SWT.SHADOW_OUT, 0, 0, 0); } return checkBits(style, SWT.LEFT, SWT.CENTER, SWT.RIGHT, 0, 0, 0); }
public static org.eclipse.swt.program.Program[] getPrograms() { org.eclipse.swt.program.NSAutoreleasePool pool = ((org.eclipse.swt.program.NSAutoreleasePool) (new org.eclipse.swt.program.NSAutoreleasePool().alloc().init())); try { java.util.Vector vector = new java.util.Vector(); org.eclipse.swt.program.NSWorkspace workspace = org.eclipse.swt.program.NSWorkspace.sharedWorkspace(); org.eclipse.swt.program.NSArray array = new org.eclipse.swt.program.NSArray(org.eclipse.swt.program.OS.NSSearchPathForDirectoriesInDomains(OS.NSAllApplicationsDirectory, OS.NSAllDomainsMask, true)); int count = ((int) (array.count())); for (int i = 0; i < count; i++) { org.eclipse.swt.program.NSString path = new org.eclipse.swt.program.NSString(array.objectAtIndex(i)); org.eclipse.swt.program.NSFileManager fileManager = org.eclipse.swt.program.NSFileManager.defaultManager(); org.eclipse.swt.program.NSDirectoryEnumerator enumerator = fileManager.enumeratorAtPath(path); if (enumerator != null) { org.eclipse.swt.program.id id; while ((id = enumerator.nextObject()) != null) { enumerator.skipDescendents(); org.eclipse.swt.program.NSString fullPath = path.stringByAppendingPathComponent(new org.eclipse.swt.program.NSString(id.id)); if (workspace.isFilePackageAtPath(fullPath)) { org.eclipse.swt.program.NSBundle bundle = org.eclipse.swt.program.NSBundle.bundleWithPath(fullPath); if (bundle != null) vector.addElement(org.eclipse.swt.program.Program.getProgram(bundle)); } } } } org.eclipse.swt.program.Program[] programs = new org.eclipse.swt.program.Program[vector.size()]; vector.copyInto(programs); return programs; } finally { pool.release(); } }
void resizeClientArea() { int[] outMetric = new int[1]; org.eclipse.swt.internal.carbon.OS.GetThemeMetric(OS.kThemeMetricLittleArrowsWidth, outMetric); int buttonWidth = (outMetric[0]) + (org.eclipse.swt.widgets.Spinner.GAP); org.eclipse.swt.internal.carbon.OS.GetThemeMetric(OS.kThemeMetricLittleArrowsHeight, outMetric); int buttonHeight = outMetric[0]; org.eclipse.swt.internal.carbon.Rect rect = new org.eclipse.swt.internal.carbon.Rect(); org.eclipse.swt.internal.carbon.OS.GetControlBounds(handle, rect); org.eclipse.swt.internal.carbon.Rect inset = inset(); int width = java.lang.Math.max(0, (((((rect.right) - (rect.left)) - (inset.left)) - (inset.right)) - buttonWidth)); int height = java.lang.Math.max(0, ((((rect.bottom) - (rect.top)) - (inset.top)) - (inset.bottom))); buttonHeight = java.lang.Math.min(buttonHeight, ((rect.bottom) - (rect.top))); setBounds(textHandle, inset.left, inset.top, width, height, true, true, false); setBounds(buttonHandle, ((((inset.left) + (inset.right)) + width) + (org.eclipse.swt.widgets.Spinner.GAP)), ((inset.top) + ((height - buttonHeight) / 2)), buttonWidth, buttonHeight, true, true, false); }
void checkGDIP() { if ((gdipToken) != null) return; if (OS.IsWinCE) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NOT_IMPLEMENTED); int oldErrorMode = org.eclipse.swt.graphics.OS.SetErrorMode(OS.SEM_FAILCRITICALERRORS); try { int[] token = new int[1]; org.eclipse.swt.graphics.GdiplusStartupInput input = new org.eclipse.swt.graphics.GdiplusStartupInput(); input.GdiplusVersion = 1; if ((org.eclipse.swt.graphics.Gdip.GdiplusStartup(token, input, 0)) == 0) { gdipToken = token; } } catch (java.lang.Throwable t) { org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NO_GRAPHICS_LIBRARY, t, " [GDI+ is required]"); } finally { org.eclipse.swt.graphics.OS.SetErrorMode(oldErrorMode); } }
static int atkHypertext_get_n_links(int atkObject) { if (org.eclipse.swt.accessibility.AccessibleObject.DEBUG) java.lang.System.out.println("-->atkHypertext_get_n_links"); return 1; }
static int[] init(org.eclipse.swt.graphics.Device device, org.eclipse.swt.graphics.Image image, org.eclipse.swt.graphics.ImageData i) { if (image != null) image.device = device; if ((((i.depth) == 1) && ((i.getTransparencyType()) != (SWT.TRANSPARENCY_MASK))) || ((i.depth) == 2)) { org.eclipse.swt.graphics.ImageData img = new org.eclipse.swt.graphics.ImageData(i.width, i.height, 4, i.palette); org.eclipse.swt.graphics.ImageData.blit(ImageData.BLIT_SRC, i.data, i.depth, i.bytesPerLine, i.getByteOrder(), 0, 0, i.width, i.height, null, null, null, ImageData.ALPHA_OPAQUE, null, 0, 0, 0, img.data, img.depth, img.bytesPerLine, i.getByteOrder(), 0, 0, img.width, img.height, null, null, null, false, false); img.transparentPixel = i.transparentPixel; img.maskPad = i.maskPad; img.maskData = i.maskData; img.alpha = i.alpha; img.alphaData = i.alphaData; i = img; } if (i.palette.isDirect) { final org.eclipse.swt.graphics.PaletteData palette = i.palette; final int redMask = palette.redMask; final int greenMask = palette.greenMask; final int blueMask = palette.blueMask; int newDepth = i.depth; int newOrder = ImageData.MSB_FIRST; org.eclipse.swt.graphics.PaletteData newPalette = null; switch (i.depth) { case 8 : newDepth = 16; newOrder = ImageData.LSB_FIRST; newPalette = new org.eclipse.swt.graphics.PaletteData(31744, 992, 31); break; case 16 : newOrder = ImageData.LSB_FIRST; if (!(((redMask == 31744) && (greenMask == 992)) && (blueMask == 31))) { newPalette = new org.eclipse.swt.graphics.PaletteData(31744, 992, 31); } break; case 24 : if (!(((redMask == 255) && (greenMask == 65280)) && (blueMask == 16711680))) { newPalette = new org.eclipse.swt.graphics.PaletteData(255, 65280, 16711680); } break; case 32 : if (!(((redMask == 255) && (greenMask == 65280)) && (blueMask == 16711680))) { newPalette = new org.eclipse.swt.graphics.PaletteData(65280, 16711680, -16777216); } break; default : org.eclipse.swt.graphics.SWT.error(SWT.ERROR_UNSUPPORTED_DEPTH); } if (newPalette != null) { org.eclipse.swt.graphics.ImageData img = new org.eclipse.swt.graphics.ImageData(i.width, i.height, newDepth, newPalette); org.eclipse.swt.graphics.ImageData.blit(ImageData.BLIT_SRC, i.data, i.depth, i.bytesPerLine, i.getByteOrder(), 0, 0, i.width, i.height, redMask, greenMask, blueMask, ImageData.ALPHA_OPAQUE, null, 0, 0, 0, img.data, img.depth, img.bytesPerLine, newOrder, 0, 0, img.width, img.height, newPalette.redMask, newPalette.greenMask, newPalette.blueMask, false, false); if ((i.transparentPixel) != (-1)) { img.transparentPixel = newPalette.getPixel(palette.getRGB(i.transparentPixel)); } img.maskPad = i.maskPad; img.maskData = i.maskData; img.alpha = i.alpha; img.alphaData = i.alphaData; i = img; } } org.eclipse.swt.graphics.RGB[] rgbs = i.palette.getRGBs(); byte[] bmi; boolean useBitfields = (OS.IsWinCE) && (((i.depth) == 16) || ((i.depth) == 32)); if (i.palette.isDirect) bmi = new byte[40 + (useBitfields ? 12 : 0)]; else bmi = new byte[40 + ((rgbs.length) * 4)]; bmi[0] = 40; bmi[1] = 0; bmi[2] = 0; bmi[3] = 0; bmi[4] = ((byte) ((i.width) & 255)); bmi[5] = ((byte) (((i.width) >> 8) & 255)); bmi[6] = ((byte) (((i.width) >> 16) & 255)); bmi[7] = ((byte) (((i.width) >> 24) & 255)); int height = -(i.height); bmi[8] = ((byte) (height & 255)); bmi[9] = ((byte) ((height >> 8) & 255)); bmi[10] = ((byte) ((height >> 16) & 255)); bmi[11] = ((byte) ((height >> 24) & 255)); bmi[12] = 1; bmi[13] = 0; bmi[14] = ((byte) ((i.depth) & 255)); bmi[15] = ((byte) (((i.depth) >> 8) & 255)); if (useBitfields) { bmi[16] = 3; bmi[17] = bmi[18] = bmi[19] = 0; } else { bmi[16] = bmi[17] = bmi[18] = bmi[19] = 0; } bmi[20] = bmi[21] = bmi[22] = bmi[23] = 0; bmi[24] = bmi[25] = bmi[26] = bmi[27] = 0; bmi[28] = bmi[29] = bmi[30] = bmi[31] = 0; if (rgbs == null) { bmi[32] = bmi[33] = bmi[34] = bmi[35] = 0; } else { bmi[32] = ((byte) ((rgbs.length) & 255)); bmi[33] = ((byte) (((rgbs.length) >> 8) & 255)); bmi[34] = ((byte) (((rgbs.length) >> 16) & 255)); bmi[35] = ((byte) (((rgbs.length) >> 24) & 255)); } bmi[36] = bmi[37] = bmi[38] = bmi[39] = 0; int offset = 40; if (i.palette.isDirect) { if (useBitfields) { org.eclipse.swt.graphics.PaletteData palette = i.palette; int redMask = palette.redMask; int greenMask = palette.greenMask; int blueMask = palette.blueMask; bmi[40] = ((byte) ((redMask & 255) >> 0)); bmi[41] = ((byte) ((redMask & 65280) >> 8)); bmi[42] = ((byte) ((redMask & 16711680) >> 16)); bmi[43] = ((byte) ((redMask & -16777216) >> 24)); bmi[44] = ((byte) ((greenMask & 255) >> 0)); bmi[45] = ((byte) ((greenMask & 65280) >> 8)); bmi[46] = ((byte) ((greenMask & 16711680) >> 16)); bmi[47] = ((byte) ((greenMask & -16777216) >> 24)); bmi[48] = ((byte) ((blueMask & 255) >> 0)); bmi[49] = ((byte) ((blueMask & 65280) >> 8)); bmi[50] = ((byte) ((blueMask & 16711680) >> 16)); bmi[51] = ((byte) ((blueMask & -16777216) >> 24)); } } else { for (int j = 0; j < (rgbs.length); j++) { bmi[offset] = ((byte) (rgbs[j].blue)); bmi[(offset + 1)] = ((byte) (rgbs[j].green)); bmi[(offset + 2)] = ((byte) (rgbs[j].red)); bmi[(offset + 3)] = 0; offset += 4; } } int[] pBits = new int[1]; int hDib = org.eclipse.swt.graphics.OS.CreateDIBSection(0, bmi, OS.DIB_RGB_COLORS, pBits, 0, 0); if (hDib == 0) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NO_HANDLES); byte[] data = i.data; if (((i.scanlinePad) != 4) && (((i.bytesPerLine) % 4) != 0)) { int newBpl = (i.bytesPerLine) + (4 - ((i.bytesPerLine) % 4)); byte[] newData = new byte[(i.height) * newBpl]; int srcPtr = 0; int destPtr = 0; for (int y = 0; y < (i.height); y++) { java.lang.System.arraycopy(data, srcPtr, newData, destPtr, i.bytesPerLine); srcPtr += i.bytesPerLine; destPtr += newBpl; } data = newData; } org.eclipse.swt.graphics.OS.MoveMemory(pBits[0], data, data.length); int[] result = null; if ((i.getTransparencyType()) == (SWT.TRANSPARENCY_MASK)) { int hDC = device.internal_new_GC(null); int hdcSrc = org.eclipse.swt.graphics.OS.CreateCompatibleDC(hDC); org.eclipse.swt.graphics.OS.SelectObject(hdcSrc, hDib); int hBitmap = org.eclipse.swt.graphics.OS.CreateCompatibleBitmap(hDC, i.width, i.height); if (hBitmap == 0) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NO_HANDLES); int hdcDest = org.eclipse.swt.graphics.OS.CreateCompatibleDC(hDC); org.eclipse.swt.graphics.OS.SelectObject(hdcDest, hBitmap); org.eclipse.swt.graphics.OS.BitBlt(hdcDest, 0, 0, i.width, i.height, hdcSrc, 0, 0, OS.SRCCOPY); device.internal_dispose_GC(hDC, null); int hMask = org.eclipse.swt.graphics.OS.CreateBitmap(i.width, i.height, 1, 1, i.maskData); if (hMask == 0) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NO_HANDLES); org.eclipse.swt.graphics.OS.SelectObject(hdcSrc, hMask); org.eclipse.swt.graphics.OS.PatBlt(hdcSrc, 0, 0, i.width, i.height, OS.DSTINVERT); org.eclipse.swt.graphics.OS.DeleteDC(hdcSrc); org.eclipse.swt.graphics.OS.DeleteDC(hdcDest); org.eclipse.swt.graphics.OS.DeleteObject(hDib); if (image == null) { result = new int[]{ hBitmap, hMask }; } else { org.eclipse.swt.graphics.ICONINFO info = new org.eclipse.swt.graphics.ICONINFO(); info.fIcon = true; info.hbmColor = hBitmap; info.hbmMask = hMask; int hIcon = org.eclipse.swt.graphics.OS.CreateIconIndirect(info); if (hIcon == 0) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NO_HANDLES); org.eclipse.swt.graphics.OS.DeleteObject(hBitmap); org.eclipse.swt.graphics.OS.DeleteObject(hMask); image.handle = hIcon; image.type = SWT.ICON; if (OS.IsWinCE) image.data = i; } } else { if (image == null) { result = new int[]{ hDib }; } else { image.handle = hDib; image.type = SWT.BITMAP; image.transparentPixel = i.transparentPixel; if ((image.transparentPixel) == (-1)) { image.alpha = i.alpha; if (((i.alpha) == (-1)) && ((i.alphaData) != null)) { int length = i.alphaData.length; image.alphaData = new byte[length]; java.lang.System.arraycopy(i.alphaData, 0, image.alphaData, 0, length); } } } } return result; }
public org.eclipse.swt.widgets.Monitor getMonitor() { checkWidget(); org.eclipse.swt.widgets.Monitor monitor = null; int screen = org.eclipse.swt.widgets.OS.gdk_screen_get_default(); if (screen != 0) { int monitorNumber = org.eclipse.swt.widgets.OS.gdk_screen_get_monitor_at_window(screen, paintWindow()); org.eclipse.swt.widgets.GdkRectangle dest = new org.eclipse.swt.widgets.GdkRectangle(); org.eclipse.swt.widgets.OS.gdk_screen_get_monitor_geometry(screen, monitorNumber, dest); monitor = new org.eclipse.swt.widgets.Monitor(); monitor.handle = monitorNumber; monitor.x = dest.x; monitor.y = dest.y; monitor.width = dest.width; monitor.height = dest.height; org.eclipse.swt.widgets.Rectangle workArea = null; if (monitorNumber == 0) workArea = display.getWorkArea(); if (workArea != null) { monitor.clientX = workArea.x; monitor.clientY = workArea.y; monitor.clientWidth = workArea.width; monitor.clientHeight = workArea.height; } else { monitor.clientX = monitor.x; monitor.clientY = monitor.y; monitor.clientWidth = monitor.width; monitor.clientHeight = monitor.height; } } else { monitor = display.getPrimaryMonitor(); } return monitor; }
public StyledText(org.eclipse.swt.custom.Composite parent, int style) { super(parent, org.eclipse.swt.custom.StyledText.checkStyle(((style | (SWT.NO_REDRAW_RESIZE)) | (SWT.NO_BACKGROUND)))); super.setForeground(getForeground()); super.setBackground(getBackground()); org.eclipse.swt.custom.Display display = getDisplay(); isMirrored = ((super.getStyle()) & (SWT.MIRRORED)) != 0; isBidi = (org.eclipse.swt.custom.BidiUtil.isBidiPlatform()) || (isMirrored); if ((style & (SWT.READ_ONLY)) != 0) { setEditable(false); } leftMargin = rightMargin = (isBidi()) ? (org.eclipse.swt.custom.StyledText.BIDI_CARET_WIDTH) - 1 : 0; if (((style & (SWT.SINGLE)) != 0) && ((style & (SWT.BORDER)) != 0)) { leftMargin = topMargin = rightMargin = bottomMargin = 2; } clipboard = new org.eclipse.swt.custom.Clipboard(display); installDefaultContent(); initializeRenderer(); if ((style & (SWT.WRAP)) != 0) { setWordWrap(true); } else { lineCache = new org.eclipse.swt.custom.StyledText.ContentWidthCache(this, content); } if (isBidi) createCaretBitmaps(); new org.eclipse.swt.custom.Caret(this, SWT.NULL); if (isBidi) { java.lang.Runnable runnable = new java.lang.Runnable() { public void run() { int direction = ((org.eclipse.swt.custom.BidiUtil.getKeyboardLanguage()) == (BidiUtil.KEYBOARD_BIDI)) ? SWT.RIGHT : SWT.LEFT; if (direction == (caretDirection)) return; int newCaretX = (direction == (SWT.LEFT)) ? ((columnX) + (getCaretWidth())) - 1 : columnX; setCaretLocation(newCaretX, getCaretLine(), direction); } }; org.eclipse.swt.custom.BidiUtil.addLanguageListener(handle, runnable); } calculateScrollBars(); createKeyBindings(); ibeamCursor = new org.eclipse.swt.custom.Cursor(display, SWT.CURSOR_IBEAM); setCursor(ibeamCursor); installListeners(); installDefaultLineStyler(); initializeAccessible(); }
public void setImage(org.eclipse.swt.widgets.Image image) { checkWidget(); if ((image != null) && (image.isDisposed())) { error(SWT.ERROR_INVALID_ARGUMENT); } if (((style) & (SWT.ARROW)) != 0) return; this.image = image; if (((style) & ((SWT.RADIO) | (SWT.CHECK))) == 0) { ((org.eclipse.swt.widgets.NSButton) (view)).setImage((image != null ? image.handle : null)); view.setNeedsDisplay(true); } else { ((org.eclipse.swt.widgets.NSButton) (view)).setAttributedTitle(createString()); } updateAlignment(); }
public static void removeLanguageListener(int hwnd) { org.eclipse.swt.internal.BidiUtil.map.remove(new java.lang.Integer(hwnd)); java.lang.Integer proc = ((java.lang.Integer) (org.eclipse.swt.internal.BidiUtil.oldProcMap.remove(new java.lang.Integer(hwnd)))); if (proc == null) return; org.eclipse.swt.internal.win32.OS.SetWindowLong(hwnd, OS.GWL_WNDPROC, proc.intValue()); }
public void handleEvent(org.eclipse.swt.browser.Event event) { if (((event.detail) & ((org.eclipse.swt.SWT.TRAVERSE_TAB_NEXT) | (org.eclipse.swt.SWT.TRAVERSE_TAB_PREVIOUS))) == 0) return; long[] result = new long[1]; int rc = org.eclipse.swt.browser.XPCOM.NS_GetServiceManager(result); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); if ((result[0]) == 0) org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); org.eclipse.swt.browser.nsIServiceManager serviceManager = new org.eclipse.swt.browser.nsIServiceManager(result[0]); result[0] = 0; byte[] aContractID = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_FOCUSMANAGER_CONTRACTID, true); rc = serviceManager.GetServiceByContractID(aContractID, nsIFocusManager.NS_IFOCUSMANAGER_10_IID, result); serviceManager.Release(); if ((rc == (XPCOM.NS_OK)) && ((result[0]) != 0)) { org.eclipse.swt.browser.nsIFocusManager focusManager = new org.eclipse.swt.browser.nsIFocusManager(result[0]); result[0] = 0; rc = focusManager.GetFocusedElement(result); focusManager.Release(); event.doit = (result[0]) == 0; if ((rc == (XPCOM.NS_OK)) && ((result[0]) != 0)) { new org.eclipse.swt.browser.nsISupports(result[0]).Release(); } } }
void keyDown(int id, int sel, int theEvent) { if ((view.window().firstResponder().id) == id) { if (((state) & (CANVAS)) != 0) { org.eclipse.swt.widgets.NSArray array = org.eclipse.swt.widgets.NSArray.arrayWithObject(new org.eclipse.swt.widgets.NSEvent(theEvent)); keyInputHappened = false; view.interpretKeyEvents(array); if (!(keyInputHappened)) { org.eclipse.swt.widgets.NSEvent nsEvent = new org.eclipse.swt.widgets.NSEvent(theEvent); boolean[] consume = new boolean[1]; if (translateTraversal(nsEvent.keyCode(), nsEvent, consume)) return; if (isDisposed()) return; if (!(sendKeyEvent(nsEvent, SWT.KeyDown))) return; if (consume[0]) return; } return; } } super.keyDown(id, sel, theEvent); }
boolean translateMnemonic(char key, int keysym, org.eclipse.swt.widgets.XKeyEvent xEvent) { if (key < 32) return false; if ((xEvent.state) == 0) { int code = traversalCode(key, xEvent); if ((code & (SWT.TRAVERSE_MNEMONIC)) == 0) return false; } else { int mask = ((OS.ControlMask) | (OS.ShiftMask)) | (OS.Mod1Mask); if (((xEvent.state) & mask) != (OS.Mod1Mask)) return false; } org.eclipse.swt.widgets.Decorations shell = menuShell(); if ((shell.isVisible()) && (shell.isEnabled())) { org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); event.time = xEvent.time; event.detail = SWT.TRAVERSE_MNEMONIC; event.character = key; event.keyCode = keysym; if (setInputState(event, xEvent.state)) { return (translateMnemonic(event, null)) || (shell.translateMnemonic(event, this)); } } return false; }
boolean checkDragDetect(org.eclipse.swt.custom.Event event) { if (!(isListening(SWT.DragDetect))) return false; if (org.eclipse.swt.custom.StyledText.IS_MOTIF) { if ((event.button) != 2) return false; } else { if ((event.button) != 1) return false; } if ((selection.x) == (selection.y)) return false; int offset = getOffsetAtPoint(event.x, event.y, null); if (((selection.x) <= offset) && (offset < (selection.y))) { return dragDetect(event); } return false; }
org.eclipse.swt.widgets.LRESULT WM_NOTIFY(int wParam, int lParam) { org.eclipse.swt.widgets.NMHDR hdr = new org.eclipse.swt.widgets.NMHDR(); org.eclipse.swt.widgets.OS.MoveMemory(hdr, lParam, NMHDR.sizeof); if (((hwndHeader) != 0) && ((hdr.hwndFrom) == (hwndHeader))) { switch (hdr.code) { case OS.HDN_BEGINTRACKW : case OS.HDN_BEGINTRACKA : case OS.HDN_DIVIDERDBLCLICKW : case OS.HDN_DIVIDERDBLCLICKA : { org.eclipse.swt.widgets.NMHEADER phdn = new org.eclipse.swt.widgets.NMHEADER(); org.eclipse.swt.widgets.OS.MoveMemory(phdn, lParam, NMHEADER.sizeof); org.eclipse.swt.widgets.TreeColumn column = columns[phdn.iItem]; if ((column != null) && (!(column.getResizable()))) { return LRESULT.ONE; } ignoreColumnMove = true; switch (hdr.code) { case OS.HDN_DIVIDERDBLCLICKW : case OS.HDN_DIVIDERDBLCLICKA : if (column != null) column.pack(); } break; } case OS.NM_RELEASEDCAPTURE : { if (!(ignoreColumnMove)) { int count = org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0); for (int i = 0; i < count; i++) { org.eclipse.swt.widgets.TreeColumn column = columns[i]; column.updateToolTip(i); } updateImageList(); } ignoreColumnMove = false; break; } case OS.HDN_BEGINDRAG : { if (ignoreColumnMove) return LRESULT.ONE; org.eclipse.swt.widgets.NMHEADER phdn = new org.eclipse.swt.widgets.NMHEADER(); org.eclipse.swt.widgets.OS.MoveMemory(phdn, lParam, NMHEADER.sizeof); if ((phdn.iItem) != (-1)) { org.eclipse.swt.widgets.TreeColumn column = columns[phdn.iItem]; if ((column != null) && (!(column.getMoveable()))) { ignoreColumnMove = true; return LRESULT.ONE; } } break; } case OS.HDN_ENDDRAG : { org.eclipse.swt.widgets.NMHEADER phdn = new org.eclipse.swt.widgets.NMHEADER(); org.eclipse.swt.widgets.OS.MoveMemory(phdn, lParam, NMHEADER.sizeof); if (((phdn.iItem) != (-1)) && ((phdn.pitem) != 0)) { org.eclipse.swt.widgets.HDITEM pitem = new org.eclipse.swt.widgets.HDITEM(); org.eclipse.swt.widgets.OS.MoveMemory(pitem, phdn.pitem, HDITEM.sizeof); if ((((pitem.mask) & (OS.HDI_ORDER)) != 0) && ((pitem.iOrder) != (-1))) { int count = org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0); int[] order = new int[count]; org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETORDERARRAY, count, order); int index = 0; while (index < (order.length)) { if ((order[index]) == (phdn.iItem)) break; index++; } if (index == (order.length)) index = 0; if (index == (pitem.iOrder)) break; int start = java.lang.Math.min(index, pitem.iOrder); int end = java.lang.Math.max(index, pitem.iOrder); org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); org.eclipse.swt.widgets.RECT headerRect = new org.eclipse.swt.widgets.RECT(); org.eclipse.swt.widgets.OS.GetClientRect(handle, rect); org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEMRECT, order[start], headerRect); rect.left = java.lang.Math.max(rect.left, headerRect.left); org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEMRECT, order[end], headerRect); rect.right = java.lang.Math.min(rect.right, headerRect.right); org.eclipse.swt.widgets.OS.InvalidateRect(handle, rect, true); ignoreColumnMove = false; for (int i = start; i <= end; i++) { org.eclipse.swt.widgets.TreeColumn column = columns[order[i]]; if (!(column.isDisposed())) { column.postEvent(SWT.Move); } } } } break; } case OS.HDN_ITEMCHANGINGW : case OS.HDN_ITEMCHANGINGA : { org.eclipse.swt.widgets.NMHEADER phdn = new org.eclipse.swt.widgets.NMHEADER(); org.eclipse.swt.widgets.OS.MoveMemory(phdn, lParam, NMHEADER.sizeof); if ((phdn.pitem) != 0) { org.eclipse.swt.widgets.HDITEM newItem = new org.eclipse.swt.widgets.HDITEM(); org.eclipse.swt.widgets.OS.MoveMemory(newItem, phdn.pitem, HDITEM.sizeof); if (((newItem.mask) & (OS.HDI_WIDTH)) != 0) { org.eclipse.swt.widgets.RECT rect = new org.eclipse.swt.widgets.RECT(); org.eclipse.swt.widgets.OS.GetClientRect(handle, rect); org.eclipse.swt.widgets.RECT headerRect = new org.eclipse.swt.widgets.RECT(); int count = org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0); int index = org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_ORDERTOINDEX, (count - 1), 0); org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEMRECT, index, headerRect); rect.right = java.lang.Math.max(rect.right, headerRect.right); org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEMRECT, phdn.iItem, headerRect); int gridWidth = (getLinesVisible()) ? org.eclipse.swt.widgets.Tree.GRID_WIDTH : 0; rect.left = (headerRect.right) - gridWidth; if ((findImageControl()) != null) { org.eclipse.swt.widgets.OS.InvalidateRect(handle, rect, true); } else { org.eclipse.swt.widgets.HDITEM oldItem = new org.eclipse.swt.widgets.HDITEM(); oldItem.mask = OS.HDI_WIDTH; org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEM, phdn.iItem, oldItem); int deltaX = (newItem.cxy) - (oldItem.cxy); int flags = (OS.SW_INVALIDATE) | (OS.SW_ERASE); org.eclipse.swt.widgets.OS.ScrollWindowEx(handle, deltaX, 0, rect, null, 0, null, flags); } if ((org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_ORDERTOINDEX, phdn.iItem, 0)) != 0) { rect.left = headerRect.left; rect.right = headerRect.right; org.eclipse.swt.widgets.OS.InvalidateRect(handle, rect, true); } setScrollWidth(); } } break; } case OS.HDN_ITEMCHANGEDW : case OS.HDN_ITEMCHANGEDA : { org.eclipse.swt.widgets.NMHEADER phdn = new org.eclipse.swt.widgets.NMHEADER(); org.eclipse.swt.widgets.OS.MoveMemory(phdn, lParam, NMHEADER.sizeof); if ((phdn.pitem) != 0) { org.eclipse.swt.widgets.HDITEM pitem = new org.eclipse.swt.widgets.HDITEM(); org.eclipse.swt.widgets.OS.MoveMemory(pitem, phdn.pitem, HDITEM.sizeof); if (((pitem.mask) & (OS.HDI_WIDTH)) != 0) { if (((style) & (SWT.DOUBLE_BUFFERED)) == 0) { if (ignoreColumnMove) { int oldStyle = style; style |= SWT.DOUBLE_BUFFERED; org.eclipse.swt.widgets.OS.UpdateWindow(handle); style = oldStyle; } } org.eclipse.swt.widgets.TreeColumn column = columns[phdn.iItem]; if (column != null) { column.updateToolTip(phdn.iItem); column.sendEvent(SWT.Resize); if (isDisposed()) return LRESULT.ZERO; int count = org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0); org.eclipse.swt.widgets.TreeColumn[] newColumns = new org.eclipse.swt.widgets.TreeColumn[count]; java.lang.System.arraycopy(columns, 0, newColumns, 0, count); int[] order = new int[count]; org.eclipse.swt.widgets.OS.SendMessage(hwndHeader, OS.HDM_GETORDERARRAY, count, order); boolean moved = false; for (int i = 0; i < count; i++) { org.eclipse.swt.widgets.TreeColumn nextColumn = newColumns[order[i]]; if (moved && (!(nextColumn.isDisposed()))) { nextColumn.updateToolTip(order[i]); nextColumn.sendEvent(SWT.Move); } if (nextColumn == column) moved = true; } } } setScrollWidth(); } break; } case OS.HDN_ITEMCLICKW : case OS.HDN_ITEMCLICKA : { org.eclipse.swt.widgets.NMHEADER phdn = new org.eclipse.swt.widgets.NMHEADER(); org.eclipse.swt.widgets.OS.MoveMemory(phdn, lParam, NMHEADER.sizeof); org.eclipse.swt.widgets.TreeColumn column = columns[phdn.iItem]; if (column != null) { column.postEvent(SWT.Selection); } break; } case OS.HDN_ITEMDBLCLICKW : case OS.HDN_ITEMDBLCLICKA : { org.eclipse.swt.widgets.NMHEADER phdn = new org.eclipse.swt.widgets.NMHEADER(); org.eclipse.swt.widgets.OS.MoveMemory(phdn, lParam, NMHEADER.sizeof); org.eclipse.swt.widgets.TreeColumn column = columns[phdn.iItem]; if (column != null) { column.postEvent(SWT.DefaultSelection); } break; } } } return super.WM_NOTIFY(wParam, lParam); }
void fixFocus(org.eclipse.swt.widgets.Control focusControl) { org.eclipse.swt.widgets.Shell shell = getShell(); org.eclipse.swt.widgets.Control control = this; while ((control != shell) && ((control = control.parent) != null)) { if (control.setFocus()) return; } shell.setSavedFocus(focusControl); int focusHandle = shell.fixedHandle; org.eclipse.swt.widgets.OS.GTK_WIDGET_SET_FLAGS(focusHandle, OS.GTK_CAN_FOCUS); org.eclipse.swt.widgets.OS.gtk_widget_grab_focus(focusHandle); org.eclipse.swt.widgets.OS.GTK_WIDGET_UNSET_FLAGS(focusHandle, OS.GTK_CAN_FOCUS); }
int kEventMenuDrawItemContent(int nextHandler, int theEvent, int userData) { short[] index = new short[1]; org.eclipse.swt.internal.carbon.OS.GetEventParameter(theEvent, OS.kEventParamMenuItemIndex, OS.typeMenuItemIndex, null, 2, null, index); org.eclipse.swt.widgets.MenuItem item = items[((index[0]) - 1)]; if ((item.accelerator) == 0) { int accelIndex = item.text.indexOf('\t'); if (accelIndex != (-1)) { java.lang.String accelText = item.text.substring((accelIndex + 1)); int length = accelText.length(); if (length != 0) { int result = org.eclipse.swt.internal.carbon.OS.CallNextEventHandler(nextHandler, theEvent); org.eclipse.swt.internal.carbon.Rect rect = new org.eclipse.swt.internal.carbon.Rect(); org.eclipse.swt.internal.carbon.OS.GetEventParameter(theEvent, OS.kEventParamMenuItemBounds, OS.typeQDRectangle, null, Rect.sizeof, null, rect); int[] context = new int[1]; org.eclipse.swt.internal.carbon.OS.GetEventParameter(theEvent, OS.kEventParamCGContextRef, OS.typeCGContextRef, null, 4, null, context); int modifierIndex = modifierIndex(accelText); char[] buffer = new char[(length - modifierIndex) - 1]; accelText.getChars((modifierIndex + 1), length, buffer, 0); int font = org.eclipse.swt.internal.carbon.OS.kThemeMenuItemFont; if ((buffer.length) > 1) font = org.eclipse.swt.internal.carbon.OS.kThemeMenuItemCmdKeyFont; byte[] family = new byte[256]; short[] size = new short[1]; byte[] style = new byte[1]; org.eclipse.swt.internal.carbon.OS.GetThemeFont(((short) (font)), ((short) (OS.smSystemScript)), family, size, style); org.eclipse.swt.internal.carbon.FontInfo info = new org.eclipse.swt.internal.carbon.FontInfo(); org.eclipse.swt.internal.carbon.OS.FetchFontInfo(family[0], size[0], style[0], info); int[] metric = new int[1]; org.eclipse.swt.internal.carbon.OS.GetThemeMetric(OS.kThemeMetricMenuIconTrailingEdgeMargin, metric); int str = org.eclipse.swt.internal.carbon.OS.CFStringCreateWithCharacters(OS.kCFAllocatorDefault, buffer, buffer.length); org.eclipse.swt.internal.carbon.Point size1 = new org.eclipse.swt.internal.carbon.Point(); org.eclipse.swt.internal.carbon.OS.GetThemeTextDimensions(str, ((short) (font)), 0, false, size1, null); rect.left = ((short) (((rect.right) - (java.lang.Math.max(info.widMax, size1.h))) - (metric[0]))); org.eclipse.swt.internal.carbon.OS.DrawThemeTextBox(str, ((short) (font)), OS.kThemeStateActive, false, rect, ((short) (OS.teFlushLeft)), context[0]); org.eclipse.swt.internal.carbon.OS.CFRelease(str); if (modifierIndex != (-1)) { buffer = new char[modifierIndex + 1]; accelText.getChars(0, buffer.length, buffer, 0); str = org.eclipse.swt.internal.carbon.OS.CFStringCreateWithCharacters(OS.kCFAllocatorDefault, buffer, buffer.length); org.eclipse.swt.internal.carbon.OS.GetThemeTextDimensions(str, ((short) (OS.kThemeMenuItemCmdKeyFont)), 0, false, size1, null); rect.right = rect.left; rect.left = ((short) ((rect.right) - (size1.h))); org.eclipse.swt.internal.carbon.OS.DrawThemeTextBox(str, ((short) (OS.kThemeMenuItemCmdKeyFont)), OS.kThemeStateActive, false, rect, ((short) (OS.teFlushLeft)), context[0]); org.eclipse.swt.internal.carbon.OS.CFRelease(str); } return result; } } } return org.eclipse.swt.internal.carbon.OS.eventNotHandledErr; }
public org.eclipse.swt.widgets.Point computeSize(int wHint, int hHint, boolean changed) { checkWidget(); int xborder = 0; int yborder = 0; int[] w = new int[1]; int[] h = new int[1]; if (((style) & (SWT.SINGLE)) != 0) { int layout = org.eclipse.swt.widgets.OS.gtk_entry_get_layout(handle); org.eclipse.swt.widgets.OS.pango_layout_get_size(layout, w, h); if (((style) & (SWT.BORDER)) != 0) { org.eclipse.swt.widgets.GtkStyle style = new org.eclipse.swt.widgets.GtkStyle(); org.eclipse.swt.widgets.OS.memmove(style, org.eclipse.swt.widgets.OS.gtk_widget_get_style(handle)); xborder += style.xthickness; yborder += style.ythickness; } xborder += org.eclipse.swt.widgets.Text.INNER_BORDER; yborder += org.eclipse.swt.widgets.Text.INNER_BORDER; } else { byte[] start = new byte[org.eclipse.swt.widgets.Text.ITER_SIZEOF]; byte[] end = new byte[org.eclipse.swt.widgets.Text.ITER_SIZEOF]; org.eclipse.swt.widgets.OS.gtk_text_buffer_get_bounds(bufferHandle, start, end); int text = org.eclipse.swt.widgets.OS.gtk_text_buffer_get_text(bufferHandle, start, end, true); int layout = org.eclipse.swt.widgets.OS.gtk_widget_create_pango_layout(handle, text); org.eclipse.swt.widgets.OS.g_free(text); org.eclipse.swt.widgets.OS.pango_layout_set_width(layout, (wHint * (OS.PANGO_SCALE))); org.eclipse.swt.widgets.OS.pango_layout_get_size(layout, w, h); org.eclipse.swt.widgets.OS.g_object_unref(layout); int borderWidth = org.eclipse.swt.widgets.OS.gtk_container_get_border_width(handle); xborder += borderWidth; yborder += borderWidth; } int[] property = new int[1]; org.eclipse.swt.widgets.OS.gtk_widget_style_get(handle, OS.interior_focus, property, 0); if ((property[0]) != 0) { org.eclipse.swt.widgets.OS.gtk_widget_style_get(handle, OS.focus_line_width, property, 0); xborder += property[0]; yborder += property[0]; } int width = org.eclipse.swt.widgets.OS.PANGO_PIXELS(w[0]); int height = org.eclipse.swt.widgets.OS.PANGO_PIXELS(h[0]); width = (wHint == (SWT.DEFAULT)) ? width : wHint; height = (hHint == (SWT.DEFAULT)) ? height : hHint; width += 2 * xborder; height += 2 * yborder; org.eclipse.swt.widgets.Rectangle trim = computeTrim(0, 0, width, height); return new org.eclipse.swt.widgets.Point(trim.width, trim.height); }
void printWidget(int hwnd, int hdc, org.eclipse.swt.widgets.GC gc) { boolean success = false; if (!((org.eclipse.swt.widgets.OS.GetDeviceCaps(gc.handle, OS.TECHNOLOGY)) == (OS.DT_RASPRINTER))) { int hwndParent = org.eclipse.swt.widgets.OS.GetParent(hwnd); int hwndShell = hwndParent; while ((org.eclipse.swt.widgets.OS.GetParent(hwndShell)) != 0) { if ((org.eclipse.swt.widgets.OS.GetWindow(hwndShell, OS.GW_OWNER)) != 0) break; hwndShell = org.eclipse.swt.widgets.OS.GetParent(hwndShell); } org.eclipse.swt.widgets.RECT rect1 = new org.eclipse.swt.widgets.RECT(); org.eclipse.swt.widgets.OS.GetWindowRect(hwnd, rect1); boolean fixPrintWindow = !(org.eclipse.swt.widgets.OS.IsWindowVisible(hwnd)); if (!fixPrintWindow) { org.eclipse.swt.widgets.RECT rect2 = new org.eclipse.swt.widgets.RECT(); org.eclipse.swt.widgets.OS.GetWindowRect(hwndShell, rect2); org.eclipse.swt.widgets.OS.IntersectRect(rect2, rect1, rect2); fixPrintWindow = !(org.eclipse.swt.widgets.OS.EqualRect(rect2, rect1)); } if (!fixPrintWindow) { int rgn = org.eclipse.swt.widgets.OS.CreateRectRgn(0, 0, 0, 0); int parent = org.eclipse.swt.widgets.OS.GetParent(hwnd); while ((parent != hwndShell) && (!fixPrintWindow)) { if ((org.eclipse.swt.widgets.OS.GetWindowRgn(parent, rgn)) != 0) { fixPrintWindow = true; } parent = org.eclipse.swt.widgets.OS.GetParent(parent); } org.eclipse.swt.widgets.OS.DeleteObject(rgn); } int bits1 = org.eclipse.swt.widgets.OS.GetWindowLong(hwnd, OS.GWL_STYLE); int bits2 = org.eclipse.swt.widgets.OS.GetWindowLong(hwnd, OS.GWL_EXSTYLE); int hwndInsertAfter = org.eclipse.swt.widgets.OS.GetWindow(hwnd, OS.GW_HWNDPREV); if ((hwndInsertAfter == 0) || (hwndInsertAfter == hwnd)) { hwndInsertAfter = OS.HWND_TOP; } if (fixPrintWindow) { int x = org.eclipse.swt.widgets.OS.GetSystemMetrics(OS.SM_XVIRTUALSCREEN); int y = org.eclipse.swt.widgets.OS.GetSystemMetrics(OS.SM_YVIRTUALSCREEN); int width = org.eclipse.swt.widgets.OS.GetSystemMetrics(OS.SM_CXVIRTUALSCREEN); int height = org.eclipse.swt.widgets.OS.GetSystemMetrics(OS.SM_CYVIRTUALSCREEN); int flags = (((OS.SWP_NOSIZE) | (OS.SWP_NOZORDER)) | (OS.SWP_NOACTIVATE)) | (OS.SWP_DRAWFRAME); if ((bits1 & (OS.WS_VISIBLE)) != 0) { org.eclipse.swt.widgets.OS.DefWindowProc(hwnd, OS.WM_SETREDRAW, 0, 0); } SetWindowPos(hwnd, 0, (x + width), (y + height), 0, 0, flags); if ((!(OS.IsWinCE)) && ((OS.WIN32_VERSION) >= (org.eclipse.swt.widgets.OS.VERSION(6, 0)))) { org.eclipse.swt.widgets.OS.SetWindowLong(hwnd, OS.GWL_STYLE, ((bits1 & (~(OS.WS_CHILD))) | (OS.WS_POPUP))); org.eclipse.swt.widgets.OS.SetWindowLong(hwnd, OS.GWL_EXSTYLE, (bits2 | (OS.WS_EX_TOOLWINDOW))); } org.eclipse.swt.widgets.Shell shell = getShell(); org.eclipse.swt.widgets.Control savedFocus = shell.savedFocus; org.eclipse.swt.widgets.OS.SetParent(hwnd, 0); shell.setSavedFocus(savedFocus); if ((bits1 & (OS.WS_VISIBLE)) != 0) { org.eclipse.swt.widgets.OS.DefWindowProc(hwnd, OS.WM_SETREDRAW, 1, 0); } } if ((bits1 & (OS.WS_VISIBLE)) == 0) { org.eclipse.swt.widgets.OS.ShowWindow(hwnd, OS.SW_SHOW); } success = org.eclipse.swt.widgets.OS.PrintWindow(hwnd, hdc, 0); if ((bits1 & (OS.WS_VISIBLE)) == 0) { org.eclipse.swt.widgets.OS.ShowWindow(hwnd, OS.SW_HIDE); } if (fixPrintWindow) { if ((bits1 & (OS.WS_VISIBLE)) != 0) { org.eclipse.swt.widgets.OS.DefWindowProc(hwnd, OS.WM_SETREDRAW, 0, 0); } if ((!(OS.IsWinCE)) && ((OS.WIN32_VERSION) >= (org.eclipse.swt.widgets.OS.VERSION(6, 0)))) { org.eclipse.swt.widgets.OS.SetWindowLong(hwnd, OS.GWL_STYLE, bits1); org.eclipse.swt.widgets.OS.SetWindowLong(hwnd, OS.GWL_EXSTYLE, bits2); } org.eclipse.swt.widgets.OS.SetParent(hwnd, hwndParent); org.eclipse.swt.widgets.OS.MapWindowPoints(0, hwndParent, rect1, 2); int flags = ((OS.SWP_NOSIZE) | (OS.SWP_NOACTIVATE)) | (OS.SWP_DRAWFRAME); SetWindowPos(hwnd, hwndInsertAfter, rect1.left, rect1.top, ((rect1.right) - (rect1.left)), ((rect1.bottom) - (rect1.top)), flags); if ((bits1 & (OS.WS_VISIBLE)) != 0) { org.eclipse.swt.widgets.OS.DefWindowProc(hwnd, OS.WM_SETREDRAW, 1, 0); } } } if (!success) { int flags = (((OS.PRF_CLIENT) | (OS.PRF_NONCLIENT)) | (OS.PRF_ERASEBKGND)) | (OS.PRF_CHILDREN); org.eclipse.swt.widgets.OS.SendMessage(hwnd, OS.WM_PRINT, hdc, flags); } }
void setItemCount(org.eclipse.swt.widgets.TreeItem parentItem, int count) { int itemCount = getItemCount(parentItem); if (count == itemCount) return; setRedraw(false); int[] top = new int[1]; int[] left = new int[1]; org.eclipse.swt.internal.carbon.OS.GetDataBrowserScrollPosition(handle, top, left); org.eclipse.swt.internal.carbon.DataBrowserCallbacks callbacks = new org.eclipse.swt.internal.carbon.DataBrowserCallbacks(); org.eclipse.swt.internal.carbon.OS.GetDataBrowserCallbacks(handle, callbacks); callbacks.v1_itemNotificationCallback = 0; callbacks.v1_itemCompareCallback = 0; org.eclipse.swt.internal.carbon.OS.SetDataBrowserCallbacks(handle, callbacks); int[] ids = (parentItem == null) ? childIds : parentItem.childIds; int removeCount = 0; if (count < itemCount) { int[] removeIds = new int[itemCount - count]; for (int index = (ids.length) - 1; index >= count; index--) { int id = ids[index]; if (id != 0) { org.eclipse.swt.widgets.TreeItem item = _getItem(id, false); if ((item != null) && (!(item.isDisposed()))) { item.dispose(); } else { if ((parentItem == null) || (parentItem.getExpanded())) { removeIds[(((removeIds.length) - removeCount) - 1)] = id; removeCount++; (visibleCount)--; } } } } if ((removeCount != 0) && (removeCount != (removeIds.length))) { int[] tmp = new int[removeCount]; java.lang.System.arraycopy(removeIds, ((removeIds.length) - removeCount), tmp, 0, removeCount); removeIds = tmp; } if ((removeCount != 0) && ((org.eclipse.swt.internal.carbon.OS.RemoveDataBrowserItems(handle, OS.kDataBrowserNoItem, removeCount, removeIds, 0)) != (org.eclipse.swt.internal.carbon.OS.noErr))) { error(SWT.ERROR_ITEM_NOT_REMOVED); } int lastIndex = items.length; for (int i = items.length; i > 0; i--) { if ((items[(i - 1)]) != null) { lastIndex = i; break; } } if (lastIndex < ((items.length) - 4)) { int length = java.lang.Math.max(4, (((lastIndex + 3) / 4) * 4)); org.eclipse.swt.widgets.TreeItem[] newItems = new org.eclipse.swt.widgets.TreeItem[length]; java.lang.System.arraycopy(items, 0, newItems, 0, java.lang.Math.min(items.length, lastIndex)); items = newItems; } } if (parentItem != null) parentItem.itemCount = count; int length = java.lang.Math.max(4, (((count + 3) / 4) * 4)); int[] newIds = new int[length]; if (ids != null) { java.lang.System.arraycopy(ids, 0, newIds, 0, java.lang.Math.min(count, itemCount)); } ids = newIds; if (parentItem == null) { childIds = newIds; } else { parentItem.childIds = newIds; } if (count > itemCount) { if (((getStyle()) & (SWT.VIRTUAL)) == 0) { int delta = java.lang.Math.max(4, ((((count - itemCount) + 3) / 4) * 4)); org.eclipse.swt.widgets.TreeItem[] newItems = new org.eclipse.swt.widgets.TreeItem[(items.length) + delta]; java.lang.System.arraycopy(items, 0, newItems, 0, items.length); items = newItems; for (int i = itemCount; i < count; i++) { items[i] = new org.eclipse.swt.widgets.TreeItem(this, parentItem, SWT.NONE, i, true); } } else { if ((parentItem == null) || (parentItem.getExpanded())) { int parentID = (parentItem == null) ? org.eclipse.swt.internal.carbon.OS.kDataBrowserNoItem : parentItem.id; int[] addIds = _getIds((count - itemCount)); if ((org.eclipse.swt.internal.carbon.OS.AddDataBrowserItems(handle, parentID, addIds.length, addIds, OS.kDataBrowserItemNoProperty)) != (org.eclipse.swt.internal.carbon.OS.noErr)) { error(SWT.ERROR_ITEM_NOT_ADDED); } visibleCount += count - itemCount; java.lang.System.arraycopy(addIds, 0, ids, itemCount, addIds.length); } } } callbacks.v1_itemNotificationCallback = display.itemNotificationProc; callbacks.v1_itemCompareCallback = display.itemCompareProc; org.eclipse.swt.internal.carbon.OS.SetDataBrowserCallbacks(handle, callbacks); if ((((((style) & (SWT.VIRTUAL)) != 0) && ((sortColumn) != null)) && (!(sortColumn.isDisposed()))) && ((sortDirection) == (SWT.DOWN))) { org.eclipse.swt.internal.carbon.OS.UpdateDataBrowserItems(handle, 0, 0, null, OS.kDataBrowserItemNoProperty, OS.kDataBrowserNoItem); } setRedraw(true); if ((itemCount == 0) && (parentItem != null)) parentItem.redraw(OS.kDataBrowserNoItem); if (removeCount != 0) fixScrollBar(); }
org.eclipse.swt.graphics.TextLayout.StyleItem[] itemize() { segmentsText = getSegmentsText(); int length = segmentsText.length(); org.eclipse.swt.graphics.SCRIPT_CONTROL scriptControl = new org.eclipse.swt.graphics.SCRIPT_CONTROL(); org.eclipse.swt.graphics.SCRIPT_STATE scriptState = new org.eclipse.swt.graphics.SCRIPT_STATE(); final int MAX_ITEM = length + 1; if (((orientation) & (SWT.RIGHT_TO_LEFT)) != 0) { scriptState.uBidiLevel = 1; scriptState.fArabicNumContext = true; } org.eclipse.swt.graphics.OS.ScriptApplyDigitSubstitution(null, scriptControl, scriptState); int hHeap = org.eclipse.swt.graphics.OS.GetProcessHeap(); int pItems = org.eclipse.swt.graphics.OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, (MAX_ITEM * (SCRIPT_ITEM.sizeof))); if (pItems == 0) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NO_HANDLES); int[] pcItems = new int[1]; char[] chars = new char[length]; segmentsText.getChars(0, length, chars, 0); org.eclipse.swt.graphics.OS.ScriptItemize(chars, length, MAX_ITEM, scriptControl, scriptState, pItems, pcItems); org.eclipse.swt.graphics.TextLayout.StyleItem[] runs = merge(pItems, pcItems[0]); org.eclipse.swt.graphics.OS.HeapFree(hHeap, 0, pItems); return runs; }
public boolean print(org.eclipse.swt.widgets.GC gc) { checkWidget(); if (gc == null) error(SWT.ERROR_NULL_ARGUMENT); if (gc.isDisposed()) error(SWT.ERROR_INVALID_ARGUMENT); org.eclipse.swt.widgets.NSGraphicsContext.static_saveGraphicsState(); org.eclipse.swt.widgets.NSGraphicsContext.setCurrentContext(gc.handle); org.eclipse.swt.widgets.NSAffineTransform transform = org.eclipse.swt.widgets.NSAffineTransform.transform(); transform.translateXBy(0, view.bounds().height); transform.scaleXBy(1, (-1)); transform.concat(); view.displayRectIgnoringOpacity(view.bounds(), gc.handle); org.eclipse.swt.widgets.NSGraphicsContext.static_restoreGraphicsState(); return true; }
public org.eclipse.swt.widgets.RGB open() { byte[] buffer = org.eclipse.swt.widgets.Converter.wcsToMbcs(null, title, true); long handle = 0; if ((OS.GTK_VERSION) >= (org.eclipse.swt.widgets.OS.VERSION(3, 4, 0))) { handle = org.eclipse.swt.widgets.OS.gtk_color_chooser_dialog_new(buffer, parent.topHandle()); } else { handle = org.eclipse.swt.widgets.OS.gtk_color_selection_dialog_new(buffer); } org.eclipse.swt.widgets.Display display = ((parent) != null) ? parent.getDisplay() : org.eclipse.swt.widgets.Display.getCurrent(); long colorsel = 0; org.eclipse.swt.widgets.GdkColor color = new org.eclipse.swt.widgets.GdkColor(); org.eclipse.swt.widgets.GdkRGBA rgba = new org.eclipse.swt.widgets.GdkRGBA(); if ((OS.GTK_VERSION) <= (org.eclipse.swt.widgets.OS.VERSION(3, 4, 0))) { if ((parent) != null) { long shellHandle = parent.topHandle(); org.eclipse.swt.widgets.OS.gtk_window_set_transient_for(handle, shellHandle); long pixbufs = org.eclipse.swt.widgets.OS.gtk_window_get_icon_list(shellHandle); if (pixbufs != 0) { org.eclipse.swt.widgets.OS.gtk_window_set_icon_list(handle, pixbufs); org.eclipse.swt.widgets.OS.g_list_free(pixbufs); } } if ((OS.GTK_VERSION) >= (org.eclipse.swt.widgets.OS.VERSION(2, 10, 0))) { long group = org.eclipse.swt.widgets.OS.gtk_window_get_group(0); org.eclipse.swt.widgets.OS.gtk_window_group_add_window(group, handle); } org.eclipse.swt.widgets.OS.gtk_window_set_modal(handle, true); if ((OS.GTK_VERSION) >= (org.eclipse.swt.widgets.OS.VERSION(2, 14, 0))) { colorsel = org.eclipse.swt.widgets.OS.gtk_color_selection_dialog_get_color_selection(handle); } else { org.eclipse.swt.widgets.GtkColorSelectionDialog dialog = new org.eclipse.swt.widgets.GtkColorSelectionDialog(); org.eclipse.swt.widgets.OS.memmove(dialog, handle); colorsel = dialog.colorsel; } if ((rgb) != null) { color.red = ((short) (((rgb.red) & 255) | (((rgb.red) & 255) << 8))); color.green = ((short) (((rgb.green) & 255) | (((rgb.green) & 255) << 8))); color.blue = ((short) (((rgb.blue) & 255) | (((rgb.blue) & 255) << 8))); org.eclipse.swt.widgets.OS.gtk_color_selection_set_current_color(colorsel, color); } org.eclipse.swt.widgets.OS.gtk_color_selection_set_has_palette(colorsel, true); } else { if ((rgb) != null) { rgba.red = ((double) (rgb.red)) / 255; rgba.green = ((double) (rgb.green)) / 255; rgba.blue = ((double) (rgb.blue)) / 255; } org.eclipse.swt.widgets.OS.gtk_color_chooser_set_use_alpha(handle, false); org.eclipse.swt.widgets.OS.gtk_color_chooser_set_rgba(handle, rgba); } if ((rgbs) != null) { long colors = org.eclipse.swt.widgets.OS.g_malloc(((GdkColor.sizeof) * (rgbs.length))); for (int i = 0; i < (rgbs.length); i++) { org.eclipse.swt.widgets.RGB rgb = rgbs[i]; if (rgb != null) { color.red = ((short) (((rgb.red) & 255) | (((rgb.red) & 255) << 8))); color.green = ((short) (((rgb.green) & 255) | (((rgb.green) & 255) << 8))); color.blue = ((short) (((rgb.blue) & 255) | (((rgb.blue) & 255) << 8))); org.eclipse.swt.widgets.OS.memmove((colors + (i * (GdkColor.sizeof))), color, GdkColor.sizeof); } } long strPtr = org.eclipse.swt.widgets.OS.gtk_color_selection_palette_to_string(colors, rgbs.length); int length = org.eclipse.swt.widgets.OS.strlen(strPtr); buffer = new byte[length]; org.eclipse.swt.widgets.OS.memmove(buffer, strPtr, length); java.lang.String paletteString = new java.lang.String(org.eclipse.swt.widgets.Converter.mbcsToWcs(null, buffer)); buffer = org.eclipse.swt.widgets.Converter.wcsToMbcs(null, paletteString, true); org.eclipse.swt.widgets.OS.g_free(colors); long settings = org.eclipse.swt.widgets.OS.gtk_settings_get_default(); if (settings != 0) { org.eclipse.swt.widgets.OS.gtk_settings_set_string_property(settings, OS.gtk_color_palette, buffer, org.eclipse.swt.widgets.Converter.wcsToMbcs(null, "gtk_color_selection_palette_to_string", true)); } } display.addIdleProc(); org.eclipse.swt.widgets.Dialog oldModal = null; if (org.eclipse.swt.widgets.OS.gtk_window_get_modal(handle)) { oldModal = display.getModalDialog(); display.setModalDialog(this); } int signalId = 0; long hookId = 0; if (((style) & (SWT.RIGHT_TO_LEFT)) != 0) { signalId = org.eclipse.swt.widgets.OS.g_signal_lookup(OS.map, org.eclipse.swt.widgets.OS.GTK_TYPE_WIDGET()); hookId = org.eclipse.swt.widgets.OS.g_signal_add_emission_hook(signalId, 0, display.emissionProc, handle, 0); } int response = org.eclipse.swt.widgets.OS.gtk_dialog_run(handle); org.eclipse.swt.widgets.OS.gdk_threads_leave(); if (((style) & (SWT.RIGHT_TO_LEFT)) != 0) { org.eclipse.swt.widgets.OS.g_signal_remove_emission_hook(signalId, hookId); } if (org.eclipse.swt.widgets.OS.gtk_window_get_modal(handle)) { display.setModalDialog(oldModal); } boolean success = response == (OS.GTK_RESPONSE_OK); if (success) { int red = 0; int green = 0; int blue = 0; if ((OS.GTK_VERSION) >= (org.eclipse.swt.widgets.OS.VERSION(3, 4, 0))) { org.eclipse.swt.widgets.OS.gtk_color_chooser_get_rgba(handle, rgba); red = ((int) ((rgba.red) * 255)); green = ((int) ((rgba.green) * 255)); blue = ((int) ((rgba.blue) * 255)); } else { org.eclipse.swt.widgets.OS.gtk_color_selection_get_current_color(colorsel, color); red = ((color.red) >> 8) & 255; green = ((color.green) >> 8) & 255; blue = ((color.blue) >> 8) & 255; } rgb = new org.eclipse.swt.widgets.RGB(red, green, blue); } long settings = org.eclipse.swt.widgets.OS.gtk_settings_get_default(); if (settings != 0) { long[] ptr = new long[1]; org.eclipse.swt.widgets.OS.g_object_get(settings, OS.gtk_color_palette, ptr, 0); if ((ptr[0]) != 0) { int length = org.eclipse.swt.widgets.OS.strlen(ptr[0]); buffer = new byte[length]; org.eclipse.swt.widgets.OS.memmove(buffer, ptr[0], length); org.eclipse.swt.widgets.OS.g_free(ptr[0]); java.lang.String[] gdkColorStrings = null; if (length > 0) { java.lang.String gtk_color_palette = new java.lang.String(org.eclipse.swt.widgets.Converter.mbcsToWcs(null, buffer)); gdkColorStrings = org.eclipse.swt.widgets.ColorDialog.splitString(gtk_color_palette, ':'); length = gdkColorStrings.length; } rgbs = new org.eclipse.swt.widgets.RGB[length]; for (int i = 0; i < length; i++) { java.lang.String colorString = gdkColorStrings[i]; buffer = org.eclipse.swt.widgets.Converter.wcsToMbcs(null, colorString, true); org.eclipse.swt.widgets.OS.gdk_color_parse(buffer, color); int red = ((color.red) >> 8) & 255; int green = ((color.green) >> 8) & 255; int blue = ((color.blue) >> 8) & 255; rgbs[i] = new org.eclipse.swt.widgets.RGB(red, green, blue); } } } display.removeIdleProc(); org.eclipse.swt.widgets.OS.gtk_widget_destroy(handle); if (!success) return null; return rgb; }
void handleCutCopy() { cachedStyles = new java.util.Vector(); org.eclipse.swt.examples.texteditor.Point sel = text.getSelectionRange(); int startX = sel.x; for (int i = sel.x; i <= (((sel.x) + (sel.y)) - 1); i++) { org.eclipse.swt.examples.texteditor.StyleRange style = text.getStyleRangeAtOffset(i); if (style != null) { style.start = (style.start) - startX; if (!(cachedStyles.isEmpty())) { org.eclipse.swt.examples.texteditor.StyleRange lastStyle = ((org.eclipse.swt.examples.texteditor.StyleRange) (cachedStyles.lastElement())); if ((lastStyle.similarTo(style)) && (((lastStyle.start) + (lastStyle.length)) == (style.start))) { (lastStyle.length)++; } else { cachedStyles.addElement(style); } } else { cachedStyles.addElement(style); } } } }
public boolean equals(java.lang.Object object) { if (object == (this)) { return true; } if (object instanceof org.eclipse.swt.ole.win32.OleAutomation) { if ((this.objIDispatch) == null) { return false; } org.eclipse.swt.ole.win32.OleAutomation oleAutomation = ((org.eclipse.swt.ole.win32.OleAutomation) (object)); if ((oleAutomation.objIDispatch) == null) { return false; } int address1 = this.objIDispatch.getAddress(); int address2 = oleAutomation.objIDispatch.getAddress(); return address1 == address2; } return false; }
int windowProc(int hwnd, int msg, int wParam, int lParam) { if ((handle) == 0) return 0; if (hwnd != (handle)) { int hwndText = org.eclipse.swt.widgets.OS.GetDlgItem(handle, org.eclipse.swt.widgets.Combo.CBID_EDIT); int hwndList = org.eclipse.swt.widgets.OS.GetDlgItem(handle, org.eclipse.swt.widgets.Combo.CBID_LIST); if (((hwndText != 0) && (hwnd == hwndText)) || ((hwndList != 0) && (hwnd == hwndList))) { org.eclipse.swt.widgets.LRESULT result = null; switch (msg) { case OS.WM_CHAR : result = wmChar(hwnd, wParam, lParam); break; case OS.WM_IME_CHAR : result = wmIMEChar(hwnd, wParam, lParam); break; case OS.WM_KEYDOWN : result = wmKeyDown(hwnd, wParam, lParam); break; case OS.WM_KEYUP : result = wmKeyUp(hwnd, wParam, lParam); break; case OS.WM_SYSCHAR : result = wmSysChar(hwnd, wParam, lParam); break; case OS.WM_SYSKEYDOWN : result = wmSysKeyDown(hwnd, wParam, lParam); break; case OS.WM_SYSKEYUP : result = wmSysKeyUp(hwnd, wParam, lParam); break; case OS.WM_CAPTURECHANGED : result = wmCaptureChanged(hwnd, wParam, lParam); break; case OS.WM_LBUTTONDBLCLK : result = wmLButtonDblClk(hwnd, wParam, lParam); break; case OS.WM_LBUTTONDOWN : result = wmLButtonDown(hwnd, wParam, lParam); break; case OS.WM_LBUTTONUP : result = wmLButtonUp(hwnd, wParam, lParam); break; case OS.WM_MBUTTONDBLCLK : result = wmMButtonDblClk(hwnd, wParam, lParam); break; case OS.WM_MBUTTONDOWN : result = wmMButtonDown(hwnd, wParam, lParam); break; case OS.WM_MBUTTONUP : result = wmMButtonUp(hwnd, wParam, lParam); break; case OS.WM_MOUSEHOVER : result = wmMouseHover(hwnd, wParam, lParam); break; case OS.WM_MOUSELEAVE : result = wmMouseLeave(hwnd, wParam, lParam); break; case OS.WM_MOUSEMOVE : result = wmMouseMove(hwnd, wParam, lParam); break; case OS.WM_RBUTTONDBLCLK : result = wmRButtonDblClk(hwnd, wParam, lParam); break; case OS.WM_RBUTTONDOWN : result = wmRButtonDown(hwnd, wParam, lParam); break; case OS.WM_RBUTTONUP : result = wmRButtonUp(hwnd, wParam, lParam); break; case OS.WM_XBUTTONDBLCLK : result = wmXButtonDblClk(hwnd, wParam, lParam); break; case OS.WM_XBUTTONDOWN : result = wmXButtonDown(hwnd, wParam, lParam); break; case OS.WM_XBUTTONUP : result = wmXButtonUp(hwnd, wParam, lParam); break; case OS.WM_PAINT : result = wmPaint(hwnd, wParam, lParam); break; case OS.WM_CONTEXTMENU : result = wmContextMenu(hwnd, wParam, lParam); break; case OS.WM_CLEAR : case OS.WM_CUT : case OS.WM_PASTE : case OS.WM_UNDO : case OS.EM_UNDO : case OS.WM_SETTEXT : if (hwnd == hwndText) { result = wmClipboard(hwnd, msg, wParam, lParam); } break; } if (result != null) return result.value; return callWindowProc(hwnd, msg, wParam, lParam); } } if (msg == (OS.CB_SETCURSEL)) { if (((style) & (SWT.READ_ONLY)) != 0) { if ((hooks(SWT.Verify)) || (filters(SWT.Verify))) { java.lang.String oldText = getText(); java.lang.String newText = null; if (wParam == (-1)) { newText = ""; } else { if ((0 <= wParam) && (wParam < (getItemCount()))) { newText = getItem(wParam); } } if ((newText != null) && (!(newText.equals(oldText)))) { int length = org.eclipse.swt.widgets.OS.GetWindowTextLength(handle); oldText = newText; newText = verifyText(newText, 0, length, null); if (newText == null) return 0; if (!(newText.equals(oldText))) { int index = indexOf(newText); if ((index != (-1)) && (index != wParam)) { return callWindowProc(handle, OS.CB_SETCURSEL, index, lParam); } } } } } } return super.windowProc(hwnd, msg, wParam, lParam); }
public org.eclipse.swt.widgets.Rectangle computeTrim(int x, int y, int width, int height) { checkWidget(); org.eclipse.swt.widgets.Rectangle trim = super.computeTrim(x, y, width, height); int trimWidth = trimWidth(); int trimHeight = trimHeight(); trim.x -= trimWidth / 2; trim.y -= trimHeight - (trimWidth / 2); trim.width += trimWidth; trim.height += trimHeight; if ((menuBar) != null) { int menuBarHeight = org.eclipse.swt.widgets.OS.GTK_WIDGET_HEIGHT(menuBar.handle); trim.y -= menuBarHeight; trim.height += menuBarHeight; } return trim; }
public org.eclipse.swt.widgets.Point computeSize(int wHint, int hHint, boolean changed) { checkWidget(); int width = 0; if (wHint == (SWT.DEFAULT)) { org.eclipse.swt.widgets.GC gc = new org.eclipse.swt.widgets.GC(this); int columnCount = java.lang.Math.max(this.columnCount, 1); for (int j = 0; j < columnCount; j++) { int columnWidth = ((this.columnCount) != 0) ? columns[j].getWidth() : 0; for (int i = 0; i < (itemCount); i++) { org.eclipse.swt.widgets.TableItem item = items[i]; if (item != null) { columnWidth = java.lang.Math.max(columnWidth, item.calculateWidth(j, gc)); } } width += columnWidth + (org.eclipse.swt.widgets.Table.EXTRA_WIDTH); } gc.dispose(); if (((style) & (SWT.CHECK)) != 0) width += org.eclipse.swt.widgets.Table.CHECK_COLUMN_WIDTH; } else { width = wHint; } if (width <= 0) width = DEFAULT_WIDTH; int height = 0; if (hHint == (SWT.DEFAULT)) { height = ((itemCount) * (getItemHeight())) + (getHeaderHeight()); } else { height = hHint; } if (height <= 0) height = DEFAULT_HEIGHT; org.eclipse.swt.widgets.Rectangle rect = computeTrim(0, 0, width, height); return new org.eclipse.swt.widgets.Point(rect.width, rect.height); }
void listEvent(org.eclipse.swt.custom.Event event) { switch (event.type) { case SWT.Dispose : if ((getShell()) != (popup.getParent())) { java.lang.String[] items = list.getItems(); int selectionIndex = list.getSelectionIndex(); popup = null; list = null; createPopup(items, selectionIndex); } break; case SWT.FocusIn : { handleFocus(SWT.FocusIn); break; } case SWT.MouseUp : { if ((event.button) != 1) return; dropDown(false); break; } case SWT.Selection : { int index = list.getSelectionIndex(); if (index == (-1)) return; text.setText(list.getItem(index)); text.selectAll(); list.setSelection(index); org.eclipse.swt.custom.Event e = new org.eclipse.swt.custom.Event(); e.time = event.time; e.stateMask = event.stateMask; e.doit = event.doit; notifyListeners(SWT.Selection, e); event.doit = e.doit; break; } case SWT.Traverse : { switch (event.detail) { case SWT.TRAVERSE_RETURN : case SWT.TRAVERSE_ESCAPE : case SWT.TRAVERSE_ARROW_PREVIOUS : case SWT.TRAVERSE_ARROW_NEXT : event.doit = false; break; case SWT.TRAVERSE_TAB_NEXT : case SWT.TRAVERSE_TAB_PREVIOUS : event.doit = text.traverse(event.detail); event.detail = SWT.TRAVERSE_NONE; if (event.doit) dropDown(false); return; } org.eclipse.swt.custom.Event e = new org.eclipse.swt.custom.Event(); e.time = event.time; e.detail = event.detail; e.doit = event.doit; e.character = event.character; e.keyCode = event.keyCode; notifyListeners(SWT.Traverse, e); event.doit = e.doit; event.detail = e.detail; break; } case SWT.KeyUp : { org.eclipse.swt.custom.Event e = new org.eclipse.swt.custom.Event(); e.time = event.time; e.character = event.character; e.keyCode = event.keyCode; e.stateMask = event.stateMask; notifyListeners(SWT.KeyUp, e); break; } case SWT.KeyDown : { if ((event.character) == (SWT.ESC)) { dropDown(false); } if ((((event.stateMask) & (SWT.ALT)) != 0) && (((event.keyCode) == (SWT.ARROW_UP)) || ((event.keyCode) == (SWT.ARROW_DOWN)))) { dropDown(false); } if ((event.character) == (SWT.CR)) { dropDown(false); org.eclipse.swt.custom.Event e = new org.eclipse.swt.custom.Event(); e.time = event.time; e.stateMask = event.stateMask; notifyListeners(SWT.DefaultSelection, e); } if (isDisposed()) break; org.eclipse.swt.custom.Event e = new org.eclipse.swt.custom.Event(); e.time = event.time; e.character = event.character; e.keyCode = event.keyCode; e.stateMask = event.stateMask; notifyListeners(SWT.KeyDown, e); break; } } }
public static void error(int code, java.lang.Throwable throwable, java.lang.String detail) { if (code != (org.eclipse.swt.SWT.ERROR_FAILED_EXEC)) { if (throwable instanceof org.eclipse.swt.SWTError) throw ((org.eclipse.swt.SWTError) (throwable)); if (throwable instanceof org.eclipse.swt.SWTException) throw ((org.eclipse.swt.SWTException) (throwable)); } java.lang.String message = org.eclipse.swt.SWT.findErrorText(code); if (detail != null) message += detail; switch (code) { case org.eclipse.swt.SWT.ERROR_NULL_ARGUMENT : case org.eclipse.swt.SWT.ERROR_CANNOT_BE_ZERO : case org.eclipse.swt.SWT.ERROR_INVALID_ARGUMENT : case org.eclipse.swt.SWT.ERROR_MENU_NOT_BAR : case org.eclipse.swt.SWT.ERROR_MENU_NOT_DROP_DOWN : case org.eclipse.swt.SWT.ERROR_MENU_NOT_POP_UP : case org.eclipse.swt.SWT.ERROR_MENUITEM_NOT_CASCADE : case org.eclipse.swt.SWT.ERROR_INVALID_PARENT : case org.eclipse.swt.SWT.ERROR_INVALID_RANGE : { throw new java.lang.IllegalArgumentException(message); } case org.eclipse.swt.SWT.ERROR_INVALID_SUBCLASS : case org.eclipse.swt.SWT.ERROR_THREAD_INVALID_ACCESS : case org.eclipse.swt.SWT.ERROR_WIDGET_DISPOSED : case org.eclipse.swt.SWT.ERROR_GRAPHIC_DISPOSED : case org.eclipse.swt.SWT.ERROR_DEVICE_DISPOSED : case org.eclipse.swt.SWT.ERROR_INVALID_IMAGE : case org.eclipse.swt.SWT.ERROR_UNSUPPORTED_DEPTH : case org.eclipse.swt.SWT.ERROR_UNSUPPORTED_FORMAT : case org.eclipse.swt.SWT.ERROR_FAILED_EXEC : case org.eclipse.swt.SWT.ERROR_CANNOT_INVERT_MATRIX : case org.eclipse.swt.SWT.ERROR_NO_GRAPHICS_LIBRARY : case org.eclipse.swt.SWT.ERROR_IO : { org.eclipse.swt.SWTException exception = new org.eclipse.swt.SWTException(code, message); exception.throwable = throwable; throw exception; } case org.eclipse.swt.SWT.ERROR_CANNOT_GET_COUNT : case org.eclipse.swt.SWT.ERROR_CANNOT_GET_ENABLED : case org.eclipse.swt.SWT.ERROR_CANNOT_GET_ITEM : case org.eclipse.swt.SWT.ERROR_CANNOT_GET_ITEM_HEIGHT : case org.eclipse.swt.SWT.ERROR_CANNOT_GET_SELECTION : case org.eclipse.swt.SWT.ERROR_CANNOT_GET_TEXT : case org.eclipse.swt.SWT.ERROR_CANNOT_SET_ENABLED : case org.eclipse.swt.SWT.ERROR_CANNOT_SET_MENU : case org.eclipse.swt.SWT.ERROR_CANNOT_SET_SELECTION : case org.eclipse.swt.SWT.ERROR_CANNOT_SET_TEXT : case org.eclipse.swt.SWT.ERROR_ITEM_NOT_ADDED : case org.eclipse.swt.SWT.ERROR_ITEM_NOT_REMOVED : case org.eclipse.swt.SWT.ERROR_NO_HANDLES : case org.eclipse.swt.SWT.ERROR_FAILED_LOAD_LIBRARY : case org.eclipse.swt.SWT.ERROR_NO_MORE_CALLBACKS : case org.eclipse.swt.SWT.ERROR_NOT_IMPLEMENTED : case org.eclipse.swt.SWT.ERROR_UNSPECIFIED : { org.eclipse.swt.SWTError error = new org.eclipse.swt.SWTError(code, message); error.throwable = throwable; throw error; } } org.eclipse.swt.SWTError error = new org.eclipse.swt.SWTError(code, message); error.throwable = throwable; throw error; }
public void setWordWrap(boolean wrap) { checkWidget(); if (((getStyle()) & (org.eclipse.swt.SWT.SINGLE)) != 0) return; if (wrap != (wordWrap)) { org.eclipse.swt.custom.ScrollBar horizontalBar = getHorizontalBar(); wordWrap = wrap; if (wordWrap) { logicalContent = content; content = new org.eclipse.swt.custom.WrappedContent(renderer, logicalContent); } else { content = logicalContent; } calculateContentWidth(); horizontalScrollOffset = 0; if (horizontalBar != null) { horizontalBar.setVisible((!(wordWrap))); } setScrollBars(); setCaretLocation(); super.redraw(); } }
public org.eclipse.swt.graphics.FontMetrics getFontMetrics() { if ((handle) == 0) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_GRAPHIC_DISPOSED); int xDisplay = data.display; int fontList = data.fontList; int[] buffer = new int[1]; if (!(org.eclipse.swt.graphics.OS.XmFontListInitFontContext(buffer, fontList))) { org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NO_HANDLES); } int context = buffer[0]; int ascent = 0; int descent = 0; int averageCharWidth = 0; int numAverageCharWidth = 0; int leading = 0; int height = 0; org.eclipse.swt.graphics.XFontStruct fontStruct = new org.eclipse.swt.graphics.XFontStruct(); int fontListEntry; int[] fontStructPtr = new int[1]; int[] fontNamePtr = new int[1]; while ((fontListEntry = org.eclipse.swt.graphics.OS.XmFontListNextEntry(context)) != 0) { int fontPtr = org.eclipse.swt.graphics.OS.XmFontListEntryGetFont(fontListEntry, buffer); if ((buffer[0]) == 0) { org.eclipse.swt.graphics.OS.memmove(fontStruct, fontPtr, XFontStruct.sizeof); ascent = (ascent > (fontStruct.max_bounds_ascent)) ? ascent : fontStruct.max_bounds_ascent; descent = (descent > (fontStruct.descent)) ? descent : fontStruct.descent; int tmp = (fontStruct.ascent) + (fontStruct.descent); height = (height > tmp) ? height : tmp; tmp = (fontStruct.ascent) - (fontStruct.max_bounds_ascent); leading = (leading > tmp) ? leading : tmp; int propPtr = fontStruct.properties; for (int i = 0; i < (fontStruct.n_properties); i++) { int[] prop = new int[2]; org.eclipse.swt.graphics.OS.memmove(prop, propPtr, 8); if ((prop[0]) == (OS.XA_FONT)) { java.lang.StringBuffer stringBuffer = new java.lang.StringBuffer(); int ptr = org.eclipse.swt.graphics.OS.XmGetAtomName(xDisplay, prop[1]); int strPtr = ptr; byte[] c = new byte[1]; org.eclipse.swt.graphics.OS.memmove(c, strPtr, 1); while ((c[0]) != 0) { stringBuffer.append(((char) (c[0]))); strPtr++; org.eclipse.swt.graphics.OS.memmove(c, strPtr, 1); } java.lang.String xlfd = stringBuffer.toString().toLowerCase(); int avg = (org.eclipse.swt.graphics.FontData.motif_new(xlfd).averageWidth) / 10; org.eclipse.swt.graphics.OS.XtFree(ptr); if (avg == 0) { int perCharPtr = fontStruct.per_char; if (perCharPtr == 0) { averageCharWidth = fontStruct.max_bounds_width; } else { int sum = 0; int count = 0; int cols = ((fontStruct.max_char_or_byte2) - (fontStruct.min_char_or_byte2)) + 1; org.eclipse.swt.graphics.XCharStruct struct = new org.eclipse.swt.graphics.XCharStruct(); for (int index = 0; index < cols; index++) { org.eclipse.swt.graphics.OS.memmove(struct, (perCharPtr + (index * (XCharStruct.sizeof))), XCharStruct.sizeof); int w = struct.width; if (w != 0) { sum += w; count++; } } averageCharWidth += sum / count; } } else { averageCharWidth += avg; } numAverageCharWidth++; break; } propPtr += 8; } } else { int nFonts = org.eclipse.swt.graphics.OS.XFontsOfFontSet(fontPtr, fontStructPtr, fontNamePtr); int[] fontStructs = new int[nFonts]; org.eclipse.swt.graphics.OS.memmove(fontStructs, fontStructPtr[0], (nFonts * 4)); for (int i = 0; i < nFonts; i++) { org.eclipse.swt.graphics.OS.memmove(fontStruct, fontStructs[i], XFontStruct.sizeof); ascent = (ascent > (fontStruct.max_bounds_ascent)) ? ascent : fontStruct.max_bounds_ascent; descent = (descent > (fontStruct.descent)) ? descent : fontStruct.descent; int tmp = (fontStruct.ascent) + (fontStruct.descent); height = (height > tmp) ? height : tmp; tmp = (fontStruct.ascent) - (fontStruct.max_bounds_ascent); leading = (leading > tmp) ? leading : tmp; int propPtr = fontStruct.properties; for (int j = 0; j < (fontStruct.n_properties); j++) { int[] prop = new int[2]; org.eclipse.swt.graphics.OS.memmove(prop, propPtr, 8); if ((prop[0]) == (OS.XA_FONT)) { java.lang.StringBuffer stringBuffer = new java.lang.StringBuffer(); int ptr = org.eclipse.swt.graphics.OS.XmGetAtomName(xDisplay, prop[1]); int strPtr = ptr; byte[] c = new byte[1]; org.eclipse.swt.graphics.OS.memmove(c, strPtr, 1); while ((c[0]) != 0) { stringBuffer.append(((char) (c[0]))); strPtr++; org.eclipse.swt.graphics.OS.memmove(c, strPtr, 1); } java.lang.String xlfd = stringBuffer.toString().toLowerCase(); int avg = (org.eclipse.swt.graphics.FontData.motif_new(xlfd).averageWidth) / 10; org.eclipse.swt.graphics.OS.XFree(ptr); if (avg == 0) { int perCharPtr = fontStruct.per_char; if (perCharPtr == 0) { averageCharWidth = fontStruct.max_bounds_width; } else { int sum = 0; int count = 0; int cols = ((fontStruct.max_char_or_byte2) - (fontStruct.min_char_or_byte2)) + 1; org.eclipse.swt.graphics.XCharStruct struct = new org.eclipse.swt.graphics.XCharStruct(); for (int index = 0; index < cols; index++) { org.eclipse.swt.graphics.OS.memmove(struct, (perCharPtr + (index * (XCharStruct.sizeof))), XCharStruct.sizeof); int w = struct.width; if (w != 0) { sum += w; count++; } } averageCharWidth += sum / count; } } else { averageCharWidth += avg; } numAverageCharWidth++; break; } propPtr += 8; } } } } org.eclipse.swt.graphics.OS.XmFontListFreeFontContext(context); return org.eclipse.swt.graphics.FontMetrics.motif_new(ascent, descent, (averageCharWidth / numAverageCharWidth), leading, height); }
void releaseDisplay() { windowCallback2.dispose(); windowCallback2 = null; windowCallback3.dispose(); windowCallback3 = null; windowCallback4.dispose(); windowCallback4 = null; windowCallback5.dispose(); windowCallback5 = null; windowProc2 = windowProc3 = windowProc4 = windowProc5 = 0; if ((filterProc) != 0) org.eclipse.swt.widgets.OS.gdk_window_remove_filter(0, filterProc, 0); filterCallback.dispose(); filterCallback = null; filterProc = 0; checkIfEventCallback.dispose(); checkIfEventCallback = null; checkIfEventProc = 0; if ((preeditWindow) != 0) org.eclipse.swt.widgets.OS.gtk_widget_destroy(preeditWindow); imControl = null; menuPositionCallback.dispose(); menuPositionCallback = null; menuPositionProc = 0; sizeAllocateCallback.dispose(); sizeAllocateCallback = null; sizeAllocateProc = 0; sizeRequestCallback.dispose(); sizeRequestCallback = null; sizeRequestProc = 0; shellMapCallback.dispose(); shellMapCallback = null; shellMapProc = 0; idleCallback.dispose(); idleCallback = null; idleProc = 0; if ((idleHandle) != 0) org.eclipse.swt.widgets.OS.g_source_remove(idleHandle); idleHandle = 0; treeSelectionCallback.dispose(); treeSelectionCallback = null; treeSelectionProc = 0; cellDataCallback.dispose(); cellDataCallback = null; cellDataProc = 0; setDirectionCallback.dispose(); setDirectionCallback = null; setDirectionProc = 0; allChildrenCallback.dispose(); allChildrenCallback = null; allChildrenProc = 0; if ((caretId) != 0) org.eclipse.swt.widgets.OS.gtk_timeout_remove(caretId); caretId = 0; caretProc = 0; caretCallback.dispose(); caretCallback = null; for (int i = 0; i < (Widget.LAST_SIGNAL); i++) { if ((closures[i]) != 0) org.eclipse.swt.widgets.OS.g_closure_unref(closures[i]); } if ((shellMapProcClosure) != 0) org.eclipse.swt.widgets.OS.g_closure_unref(shellMapProcClosure); if ((timerIds) != null) { for (int i = 0; i < (timerIds.length); i++) { if ((timerIds[i]) != 0) org.eclipse.swt.widgets.OS.gtk_timeout_remove(timerIds[i]); } } timerIds = null; timerList = null; timerProc = 0; timerCallback.dispose(); timerCallback = null; windowTimerProc = 0; windowTimerCallback.dispose(); windowTimerCallback = null; if ((mouseHoverId) != 0) org.eclipse.swt.widgets.OS.gtk_timeout_remove(mouseHoverId); mouseHoverId = 0; mouseHoverHandle = mouseHoverProc = 0; mouseHoverCallback.dispose(); mouseHoverCallback = null; if ((systemFont) != null) systemFont.dispose(); systemFont = null; if ((errorImage) != null) errorImage.dispose(); if ((infoImage) != null) infoImage.dispose(); if ((questionImage) != null) questionImage.dispose(); if ((warningImage) != null) warningImage.dispose(); errorImage = infoImage = questionImage = warningImage = null; for (int i = 0; i < (cursors.length); i++) { if ((cursors[i]) != null) cursors[i].dispose(); } cursors = null; if ((resources) != null) { for (int i = 0; i < (resources.length); i++) { if ((resources[i]) != null) resources[i].dispose(); } resources = null; } COLOR_WIDGET_DARK_SHADOW = COLOR_WIDGET_NORMAL_SHADOW = COLOR_WIDGET_LIGHT_SHADOW = COLOR_WIDGET_HIGHLIGHT_SHADOW = COLOR_WIDGET_BACKGROUND = COLOR_WIDGET_BORDER = COLOR_LIST_FOREGROUND = COLOR_LIST_BACKGROUND = COLOR_LIST_SELECTION = COLOR_LIST_SELECTION_TEXT = COLOR_INFO_BACKGROUND = COLOR_INFO_FOREGROUND = null; org.eclipse.swt.widgets.OS.gdk_event_handler_set(0, 0, 0); eventCallback.dispose(); eventCallback = null; if ((shellHandle) != 0) org.eclipse.swt.widgets.OS.gtk_widget_destroy(shellHandle); shellHandle = 0; styleSetCallback.dispose(); styleSetCallback = null; styleSetProc = 0; max_priority = timeout = null; if ((fds) != 0) org.eclipse.swt.widgets.OS.g_free(fds); fds = 0; popups = null; thread = null; activeShell = null; lastWidget = null; indexTable = null; widgetTable = null; }
public org.eclipse.swt.graphics.Rectangle getBounds(int start, int end) { checkLayout(); computeRuns(null); int length = text.length(); if (length == 0) return new org.eclipse.swt.graphics.Rectangle(0, 0, 0, 0); if (start > end) return new org.eclipse.swt.graphics.Rectangle(0, 0, 0, 0); start = java.lang.Math.min(java.lang.Math.max(0, start), (length - 1)); end = java.lang.Math.min(java.lang.Math.max(0, end), (length - 1)); start = translateOffset(start); end = translateOffset(end); int left = 2147483647; int right = 0; int top = 2147483647; int bottom = 0; int lineIndex = 0; boolean isRTL = ((orientation) & (SWT.RIGHT_TO_LEFT)) != 0; for (int i = 0; i < ((allRuns.length) - 1); i++) { org.eclipse.swt.graphics.TextLayout.StyleItem run = allRuns[i]; int runEnd = (run.start) + (run.length); if (run.lineBreak) lineIndex++; if (runEnd <= start) continue; if ((run.start) > end) break; int runLead = run.x; int runTrail = (run.x) + (run.width); if (((run.start) <= start) && (start < runEnd)) { int cx = 0; if (!(run.tab)) { int[] piX = new int[1]; org.eclipse.swt.graphics.OS.ScriptCPtoX((start - (run.start)), false, run.length, run.glyphCount, run.clusters, run.visAttrs, run.advances, run.analysis, piX); cx = (isRTL) ? (run.width) - (piX[0]) : piX[0]; } if ((run.analysis.fRTL) ^ isRTL) { runTrail = (run.x) + cx; } else { runLead = (run.x) + cx; } } if (((run.start) <= end) && (end < runEnd)) { int cx = run.width; if (!(run.tab)) { int[] piX = new int[1]; org.eclipse.swt.graphics.OS.ScriptCPtoX((end - (run.start)), true, run.length, run.glyphCount, run.clusters, run.visAttrs, run.advances, run.analysis, piX); cx = (isRTL) ? (run.width) - (piX[0]) : piX[0]; } if ((run.analysis.fRTL) ^ isRTL) { runLead = (run.x) + cx; } else { runTrail = (run.x) + cx; } } left = java.lang.Math.min(left, runLead); right = java.lang.Math.max(right, runTrail); top = java.lang.Math.min(top, lineY[(run.lineBreak ? lineIndex - 1 : lineIndex)]); bottom = java.lang.Math.max(bottom, lineY[(run.lineBreak ? lineIndex : lineIndex + 1)]); } return new org.eclipse.swt.graphics.Rectangle(left, top, (right - left), (bottom - top)); }
byte[] readApplicationExtension() { try { inputStream.read(); byte[] application = new byte[8]; inputStream.read(application); byte[] authentication = new byte[3]; inputStream.read(authentication); byte[] data = new byte[0]; byte[] block = new byte[255]; int size = inputStream.read(); while ((size > 0) && ((inputStream.read(block, 0, size)) != (-1))) { byte[] oldData = data; data = new byte[(oldData.length) + size]; java.lang.System.arraycopy(oldData, 0, data, 0, oldData.length); java.lang.System.arraycopy(block, 0, data, oldData.length, size); size = inputStream.read(); } boolean netscape = ((((((((application[0]) == 'N') && ((application[1]) == 'E')) && ((application[2]) == 'T')) && ((application[3]) == 'S')) && ((application[4]) == 'C')) && ((application[5]) == 'A')) && ((application[6]) == 'P')) && ((application[7]) == 'E'); boolean authentic = (((authentication[0]) == '2') && ((authentication[1]) == '.')) && ((authentication[7]) == '0'); if ((netscape && authentic) && ((data[0]) == 1)) { repeatCount = ((data[1]) & 255) | (((data[2]) & 255) << 8); loader.repeatCount = repeatCount; } return data; } catch (java.lang.Exception e) { org.eclipse.swt.internal.image.SWT.error(SWT.ERROR_IO, e); return null; } }
boolean canBecomeKeyWindow(int id, int sel) { if (isPopup) return false; if ((window) != null) { int styleMask = window.styleMask(); if ((styleMask == (OS.NSBorderlessWindowMask)) || ((styleMask & (OS.NSNonactivatingPanelMask)) != 0)) return true; } return super.canBecomeKeyWindow(id, sel); }
public void setBackground(org.eclipse.swt.graphics.Color color) { if ((handle) == 0) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_GRAPHIC_DISPOSED); if (color == null) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NULL_ARGUMENT); if (color.isDisposed()) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_INVALID_ARGUMENT); if ((data.backgroundPattern) != null) { if ((data.gdipBrush) != 0) { destroyGdipBrush(data.gdipBrush); data.gdipBrush = 0; } data.backgroundPattern = null; } if ((org.eclipse.swt.graphics.OS.GetBkColor(handle)) == (color.handle)) return; data.background = color.handle; org.eclipse.swt.graphics.OS.SetBkColor(handle, color.handle); int newBrush = org.eclipse.swt.graphics.OS.CreateSolidBrush(color.handle); org.eclipse.swt.graphics.OS.SelectObject(handle, newBrush); if ((data.hBrush) != 0) org.eclipse.swt.graphics.OS.DeleteObject(data.hBrush); data.hBrush = newBrush; if ((data.gdipBrush) != 0) { destroyGdipBrush(data.gdipBrush); data.gdipBrush = 0; } }
void free() { int hHeap = org.eclipse.swt.graphics.OS.GetProcessHeap(); if ((psc) != 0) { org.eclipse.swt.graphics.OS.ScriptFreeCache(psc); org.eclipse.swt.graphics.OS.HeapFree(hHeap, 0, psc); psc = 0; } if ((glyphs) != 0) { org.eclipse.swt.graphics.OS.HeapFree(hHeap, 0, glyphs); glyphs = 0; glyphCount = 0; } if ((clusters) != 0) { org.eclipse.swt.graphics.OS.HeapFree(hHeap, 0, clusters); clusters = 0; } if ((visAttrs) != 0) { org.eclipse.swt.graphics.OS.HeapFree(hHeap, 0, visAttrs); visAttrs = 0; } if ((advances) != 0) { org.eclipse.swt.graphics.OS.HeapFree(hHeap, 0, advances); advances = 0; } if ((goffsets) != 0) { org.eclipse.swt.graphics.OS.HeapFree(hHeap, 0, goffsets); goffsets = 0; } if ((psla) != 0) { org.eclipse.swt.graphics.OS.HeapFree(hHeap, 0, psla); psla = 0; } if ((fallbackFont) != 0) { org.eclipse.swt.graphics.OS.DeleteObject(fallbackFont); fallbackFont = 0; } analysis = null; style = null; width = ascent = descent = 0; lineBreak = softBreak = false; }
boolean translateAccelerator(int key, int keysym, org.eclipse.swt.widgets.XKeyEvent xEvent) { if (OS.IsSunOS) { if (((menuBar) != null) && (menuBar.getEnabled())) { switch (keysym) { case OS.XK_Control_L : case OS.XK_Control_R : case OS.XK_Alt_L : case OS.XK_Alt_R : case OS.XK_Shift_L : case OS.XK_Shift_R : return false; } if (keysym != 0) { switch (keysym) { case 268828432 : keysym = OS.XK_F11; key = 0; break; case 268828433 : keysym = OS.XK_F12; key = 0; break; } keysym &= 65535; } switch (keysym) { case OS.XK_ISO_Left_Tab : key = '\t'; break; case OS.XK_space : key = ' '; break; } int accelerator = org.eclipse.swt.widgets.Display.translateKey(keysym); if (accelerator == 0) accelerator = key; if (accelerator == 0) return false; if (((xEvent.state) & (OS.Mod1Mask)) != 0) accelerator |= SWT.ALT; if (((xEvent.state) & (OS.ShiftMask)) != 0) accelerator |= SWT.SHIFT; if (((xEvent.state) & (OS.ControlMask)) != 0) accelerator |= SWT.CONTROL; return menuBar.translateAccelerator(accelerator); } } return false; }
public void setToolTipText(java.lang.String string) { checkWidget(); toolTipText = string; view.setToolTip((string != null ? org.eclipse.swt.widgets.NSString.stringWith(string) : null)); }
int XFocusChange(int w, int client_data, int call_data, int continue_to_dispatch) { org.eclipse.swt.widgets.XFocusChangeEvent xEvent = new org.eclipse.swt.widgets.XFocusChangeEvent(); org.eclipse.swt.widgets.OS.memmove(xEvent, call_data, XFocusChangeEvent.sizeof); if ((xEvent.mode) != (OS.NotifyNormal)) return 0; if ((((xEvent.detail) != (OS.NotifyAncestor)) && ((xEvent.detail) != (OS.NotifyInferior))) && ((xEvent.detail) != (OS.NotifyNonlinear))) return 0; int xDisplay = xEvent.display; if (xDisplay == 0) return 0; int[] unused = new int[1]; int[] xWindow = new int[1]; org.eclipse.swt.widgets.OS.XGetInputFocus(xDisplay, xWindow, unused); if ((xWindow[0]) != 0) { int widget = org.eclipse.swt.widgets.OS.XtWindowToWidget(xDisplay, xWindow[0]); if ((widget != 0) && ((org.eclipse.swt.widgets.OS.XtClass(widget)) == (org.eclipse.swt.widgets.OS.xmMenuShellWidgetClass()))) return 0; } org.eclipse.swt.widgets.Display display = this.display; org.eclipse.swt.widgets.Shell shell = getShell(); switch (xEvent.type) { case OS.FocusIn : xFocusIn(xEvent); if (!(shell.isDisposed())) { shell.setActiveControl(this); } break; case OS.FocusOut : xFocusOut(xEvent); if (!(shell.isDisposed())) { if (shell != (display.getActiveShell())) { shell.setActiveControl(null); } } break; } return 0; }
public void setFont(org.eclipse.swt.widgets.Font font) { checkWidget(); super.setFont(font); setScrollWidth(); int hwndHeader = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_GETHEADER, 0, 0); if (OS.IsWinCE) { org.eclipse.swt.widgets.OS.InvalidateRect(hwndHeader, null, true); } else { int flags = ((OS.RDW_ERASE) | (OS.RDW_FRAME)) | (OS.RDW_INVALIDATE); org.eclipse.swt.widgets.OS.RedrawWindow(hwndHeader, null, 0, flags); } int bits = org.eclipse.swt.widgets.OS.SendMessage(handle, OS.LVM_GETEXTENDEDLISTVIEWSTYLE, 0, 0); if ((bits & (OS.LVS_EX_GRIDLINES)) == 0) return; bits = org.eclipse.swt.widgets.OS.GetWindowLong(handle, OS.GWL_STYLE); if ((bits & (OS.LVS_NOCOLUMNHEADER)) != 0) return; setRowHeight(); }
public void draw(org.eclipse.swt.graphics.GC gc, int x, int y, int selectionStart, int selectionEnd, org.eclipse.swt.graphics.Color selectionForeground, org.eclipse.swt.graphics.Color selectionBackground, int flags) { checkLayout(); computeRuns(gc); if (gc == null) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_NULL_ARGUMENT); if (gc.isDisposed()) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_INVALID_ARGUMENT); if ((selectionForeground != null) && (selectionForeground.isDisposed())) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_INVALID_ARGUMENT); if ((selectionBackground != null) && (selectionBackground.isDisposed())) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_INVALID_ARGUMENT); int length = text.length(); if ((length == 0) && (flags == 0)) return; int hdc = gc.handle; org.eclipse.swt.graphics.Rectangle clip = gc.getClipping(); org.eclipse.swt.graphics.GCData data = gc.data; int gdipGraphics = data.gdipGraphics; int foreground = data.foreground; int alpha = data.alpha; boolean gdip = gdipGraphics != 0; org.eclipse.swt.graphics.Rect gdipRect = new org.eclipse.swt.graphics.Rect(); int foregroundBrush = 0; int state = 0; if (gdip) { gc.checkGC(GC.FOREGROUND); foregroundBrush = gc.getFgBrush(); } else { state = org.eclipse.swt.graphics.OS.SaveDC(hdc); if (((data.style) & (SWT.MIRRORED)) != 0) { org.eclipse.swt.graphics.OS.SetLayout(hdc, ((org.eclipse.swt.graphics.OS.GetLayout(hdc)) | (OS.LAYOUT_RTL))); } } boolean hasSelection = ((selectionStart <= selectionEnd) && (selectionStart != (-1))) && (selectionEnd != (-1)); if (hasSelection || ((flags & (SWT.LAST_LINE_SELECTION)) != 0)) { selectionStart = java.lang.Math.min(java.lang.Math.max(0, selectionStart), (length - 1)); selectionEnd = java.lang.Math.min(java.lang.Math.max(0, selectionEnd), (length - 1)); if (selectionForeground == null) selectionForeground = device.getSystemColor(SWT.COLOR_LIST_SELECTION_TEXT); if (selectionBackground == null) selectionBackground = device.getSystemColor(SWT.COLOR_LIST_SELECTION); selectionStart = translateOffset(selectionStart); selectionEnd = translateOffset(selectionEnd); } org.eclipse.swt.graphics.RECT rect = new org.eclipse.swt.graphics.RECT(); int selBrush = 0; int selPen = 0; int selBrushFg = 0; int gdipFont = 0; int lastHFont = 0; if (hasSelection || ((flags & (SWT.LAST_LINE_SELECTION)) != 0)) { if (gdip) { int bg = selectionBackground.handle; int argb = ((((alpha & 255) << 24) | ((bg >> 16) & 255)) | (bg & 65280)) | ((bg & 255) << 16); int color = org.eclipse.swt.graphics.Gdip.Color_new(argb); selBrush = org.eclipse.swt.graphics.Gdip.SolidBrush_new(color); org.eclipse.swt.graphics.Gdip.Color_delete(color); int fg = selectionForeground.handle; argb = ((((alpha & 255) << 24) | ((fg >> 16) & 255)) | (fg & 65280)) | ((fg & 255) << 16); color = org.eclipse.swt.graphics.Gdip.Color_new(argb); selBrushFg = org.eclipse.swt.graphics.Gdip.SolidBrush_new(color); selPen = org.eclipse.swt.graphics.Gdip.Pen_new(selBrushFg, 1); org.eclipse.swt.graphics.Gdip.Color_delete(color); } else { selBrush = org.eclipse.swt.graphics.OS.CreateSolidBrush(selectionBackground.handle); selPen = org.eclipse.swt.graphics.OS.CreatePen(OS.PS_SOLID, 1, selectionForeground.handle); } } int offset = (((orientation) & (SWT.RIGHT_TO_LEFT)) != 0) ? -1 : 0; org.eclipse.swt.graphics.OS.SetBkMode(hdc, OS.TRANSPARENT); for (int line = 0; line < (runs.length); line++) { int drawX = x + (getLineIndent(line)); int drawY = y + (lineY[line]); org.eclipse.swt.graphics.TextLayout.StyleItem[] lineRuns = runs[line]; int lineHeight = ((lineY[(line + 1)]) - (lineY[line])) - (lineSpacing); if ((flags != 0) && (hasSelection || ((flags & (SWT.LAST_LINE_SELECTION)) != 0))) { boolean extents = false; if ((line == ((runs.length) - 1)) && ((flags & (SWT.LAST_LINE_SELECTION)) != 0)) { extents = true; } else { org.eclipse.swt.graphics.TextLayout.StyleItem run = lineRuns[((lineRuns.length) - 1)]; if ((run.lineBreak) && (!(run.softBreak))) { if ((selectionStart <= (run.start)) && ((run.start) <= selectionEnd)) extents = true; } else { int endOffset = ((run.start) + (run.length)) - 1; if (((selectionStart <= endOffset) && (endOffset < selectionEnd)) && ((flags & (SWT.FULL_SELECTION)) != 0)) { extents = true; } } } if (extents) { int width; if ((flags & (SWT.FULL_SELECTION)) != 0) { width = (OS.IsWin95) ? 32767 : 117440511; } else { width = lineHeight / 3; } if (gdip) { org.eclipse.swt.graphics.Gdip.Graphics_FillRectangle(gdipGraphics, selBrush, (drawX + (lineWidth[line])), drawY, width, lineHeight); } else { org.eclipse.swt.graphics.OS.SelectObject(hdc, selBrush); org.eclipse.swt.graphics.OS.PatBlt(hdc, (drawX + (lineWidth[line])), drawY, width, lineHeight, OS.PATCOPY); } } } if (drawX > ((clip.x) + (clip.width))) continue; if ((drawX + (lineWidth[line])) < (clip.x)) continue; int baseline = java.lang.Math.max(0, this.ascent); int lineUnderlinePos = 0; for (int i = 0; i < (lineRuns.length); i++) { baseline = java.lang.Math.max(baseline, lineRuns[i].ascent); lineUnderlinePos = java.lang.Math.min(lineUnderlinePos, lineRuns[i].underlinePos); } int alignmentX = drawX; for (int i = 0; i < (lineRuns.length); i++) { org.eclipse.swt.graphics.TextLayout.StyleItem run = lineRuns[i]; if ((run.length) == 0) continue; if (drawX > ((clip.x) + (clip.width))) break; if ((drawX + (run.width)) >= (clip.x)) { if ((!(run.lineBreak)) || (run.softBreak)) { int end = ((run.start) + (run.length)) - 1; boolean fullSelection = (hasSelection && (selectionStart <= (run.start))) && (selectionEnd >= end); if (fullSelection) { if (gdip) { org.eclipse.swt.graphics.Gdip.Graphics_FillRectangle(gdipGraphics, selBrush, drawX, drawY, run.width, lineHeight); } else { org.eclipse.swt.graphics.OS.SelectObject(hdc, selBrush); org.eclipse.swt.graphics.OS.PatBlt(hdc, drawX, drawY, run.width, lineHeight, OS.PATCOPY); } } else { if (((run.style) != null) && ((run.style.background) != null)) { int bg = run.style.background.handle; if (gdip) { int argb = ((((alpha & 255) << 24) | ((bg >> 16) & 255)) | (bg & 65280)) | ((bg & 255) << 16); int color = org.eclipse.swt.graphics.Gdip.Color_new(argb); int brush = org.eclipse.swt.graphics.Gdip.SolidBrush_new(color); org.eclipse.swt.graphics.Gdip.Graphics_FillRectangle(gdipGraphics, brush, drawX, drawY, run.width, lineHeight); org.eclipse.swt.graphics.Gdip.Color_delete(color); org.eclipse.swt.graphics.Gdip.SolidBrush_delete(brush); } else { int hBrush = org.eclipse.swt.graphics.OS.CreateSolidBrush(bg); int oldBrush = org.eclipse.swt.graphics.OS.SelectObject(hdc, hBrush); org.eclipse.swt.graphics.OS.PatBlt(hdc, drawX, drawY, run.width, lineHeight, OS.PATCOPY); org.eclipse.swt.graphics.OS.SelectObject(hdc, oldBrush); org.eclipse.swt.graphics.OS.DeleteObject(hBrush); } } boolean partialSelection = hasSelection && (!((selectionStart > end) || ((run.start) > selectionEnd))); if (partialSelection) { int selStart = (java.lang.Math.max(selectionStart, run.start)) - (run.start); int selEnd = (java.lang.Math.min(selectionEnd, end)) - (run.start); int cChars = run.length; int gGlyphs = run.glyphCount; int[] piX = new int[1]; int advances = ((run.justify) != 0) ? run.justify : run.advances; org.eclipse.swt.graphics.OS.ScriptCPtoX(selStart, false, cChars, gGlyphs, run.clusters, run.visAttrs, advances, run.analysis, piX); int runX = (((orientation) & (SWT.RIGHT_TO_LEFT)) != 0) ? (run.width) - (piX[0]) : piX[0]; rect.left = drawX + runX; rect.top = drawY; org.eclipse.swt.graphics.OS.ScriptCPtoX(selEnd, true, cChars, gGlyphs, run.clusters, run.visAttrs, advances, run.analysis, piX); runX = (((orientation) & (SWT.RIGHT_TO_LEFT)) != 0) ? (run.width) - (piX[0]) : piX[0]; rect.right = drawX + runX; rect.bottom = drawY + lineHeight; if (gdip) { if ((rect.left) > (rect.right)) { int tmp = rect.left; rect.left = rect.right; rect.right = tmp; } org.eclipse.swt.graphics.Gdip.Graphics_FillRectangle(gdipGraphics, selBrush, rect.left, rect.top, ((rect.right) - (rect.left)), ((rect.bottom) - (rect.top))); } else { org.eclipse.swt.graphics.OS.SelectObject(hdc, selBrush); org.eclipse.swt.graphics.OS.PatBlt(hdc, rect.left, rect.top, ((rect.right) - (rect.left)), ((rect.bottom) - (rect.top)), OS.PATCOPY); } } } } } drawX += run.width; } org.eclipse.swt.graphics.RECT borderClip = null; drawX = alignmentX; for (int i = 0; i < (lineRuns.length); i++) { org.eclipse.swt.graphics.TextLayout.StyleItem run = lineRuns[i]; if ((run.length) == 0) continue; if (drawX > ((clip.x) + (clip.width))) break; if ((drawX + (run.width)) >= (clip.x)) { boolean drawTab = run.tab; if (((run.style) != null) && ((run.style.underline) || ((run.style.borderStyle) != (SWT.NONE)))) drawTab = false; if (((!drawTab) && ((!(run.lineBreak)) || (run.softBreak))) && (!(((run.style) != null) && ((run.style.metrics) != null)))) { int end = ((run.start) + (run.length)) - 1; boolean fullSelection = (hasSelection && (selectionStart <= (run.start))) && (selectionEnd >= end); boolean partialSelection = (hasSelection && (!fullSelection)) && (!((selectionStart > end) || ((run.start) > selectionEnd))); int hFont = getItemFont(run); org.eclipse.swt.graphics.OS.SelectObject(hdc, hFont); if (partialSelection) { int selStart = (java.lang.Math.max(selectionStart, run.start)) - (run.start); int selEnd = (java.lang.Math.min(selectionEnd, end)) - (run.start); int cChars = run.length; int gGlyphs = run.glyphCount; int[] piX = new int[1]; int advances = ((run.justify) != 0) ? run.justify : run.advances; org.eclipse.swt.graphics.OS.ScriptCPtoX(selStart, false, cChars, gGlyphs, run.clusters, run.visAttrs, advances, run.analysis, piX); int runX = (((orientation) & (SWT.RIGHT_TO_LEFT)) != 0) ? (run.width) - (piX[0]) : piX[0]; rect.left = drawX + runX; rect.top = drawY; org.eclipse.swt.graphics.OS.ScriptCPtoX(selEnd, true, cChars, gGlyphs, run.clusters, run.visAttrs, advances, run.analysis, piX); runX = (((orientation) & (SWT.RIGHT_TO_LEFT)) != 0) ? (run.width) - (piX[0]) : piX[0]; rect.right = drawX + runX; rect.bottom = drawY + lineHeight; } if (gdip) { int drawRunY = drawY + baseline; int brush = foregroundBrush; if (fullSelection) { brush = selBrushFg; } else { if (((run.style) != null) && ((run.style.foreground) != null)) { int fg = run.style.foreground.handle; int argb = ((((alpha & 255) << 24) | ((fg >> 16) & 255)) | (fg & 65280)) | ((fg & 255) << 16); int color = org.eclipse.swt.graphics.Gdip.Color_new(argb); brush = org.eclipse.swt.graphics.Gdip.SolidBrush_new(color); org.eclipse.swt.graphics.Gdip.Color_delete(color); } } int gstate = 0; if (partialSelection) { gdipRect.X = rect.left; gdipRect.Y = rect.top; gdipRect.Width = (rect.right) - (rect.left); gdipRect.Height = (rect.bottom) - (rect.top); gstate = org.eclipse.swt.graphics.Gdip.Graphics_Save(gdipGraphics); org.eclipse.swt.graphics.Gdip.Graphics_SetClip(gdipGraphics, gdipRect, Gdip.CombineModeExclude); } org.eclipse.swt.graphics.PointF pt = new org.eclipse.swt.graphics.PointF(); pt.X = drawX; pt.Y = drawRunY; int gstate2 = 0; if (((data.style) & (SWT.MIRRORED)) != 0) { gstate2 = org.eclipse.swt.graphics.Gdip.Graphics_Save(gdipGraphics); org.eclipse.swt.graphics.Gdip.Graphics_ScaleTransform(gdipGraphics, (-1), 1, Gdip.MatrixOrderPrepend); org.eclipse.swt.graphics.Gdip.Graphics_TranslateTransform(gdipGraphics, (((-2) * drawX) - (run.width)), 0, Gdip.MatrixOrderPrepend); } if (hFont != lastHFont) { lastHFont = hFont; if (gdipFont != 0) org.eclipse.swt.graphics.Gdip.Font_delete(gdipFont); gdipFont = org.eclipse.swt.graphics.GC.createGdipFont(hdc, hFont); } org.eclipse.swt.graphics.Gdip.Graphics_DrawDriverString(gdipGraphics, run.glyphs, run.glyphCount, gdipFont, brush, pt, Gdip.DriverStringOptionsRealizedAdvance, 0); if (((data.style) & (SWT.MIRRORED)) != 0) { org.eclipse.swt.graphics.Gdip.Graphics_Restore(gdipGraphics, gstate2); } drawLines(gdip, gdipGraphics, x, (drawY + baseline), lineUnderlinePos, (drawY + lineHeight), lineRuns, i, brush, null, alpha); if (partialSelection) { org.eclipse.swt.graphics.Gdip.Graphics_Restore(gdipGraphics, gstate); gstate = org.eclipse.swt.graphics.Gdip.Graphics_Save(gdipGraphics); org.eclipse.swt.graphics.Gdip.Graphics_SetClip(gdipGraphics, gdipRect, Gdip.CombineModeIntersect); if (((data.style) & (SWT.MIRRORED)) != 0) { gstate2 = org.eclipse.swt.graphics.Gdip.Graphics_Save(gdipGraphics); org.eclipse.swt.graphics.Gdip.Graphics_ScaleTransform(gdipGraphics, (-1), 1, Gdip.MatrixOrderPrepend); org.eclipse.swt.graphics.Gdip.Graphics_TranslateTransform(gdipGraphics, (((-2) * drawX) - (run.width)), 0, Gdip.MatrixOrderPrepend); } org.eclipse.swt.graphics.Gdip.Graphics_DrawDriverString(gdipGraphics, run.glyphs, run.glyphCount, gdipFont, selBrushFg, pt, Gdip.DriverStringOptionsRealizedAdvance, 0); if (((data.style) & (SWT.MIRRORED)) != 0) { org.eclipse.swt.graphics.Gdip.Graphics_Restore(gdipGraphics, gstate2); } drawLines(gdip, gdipGraphics, x, (drawY + baseline), lineUnderlinePos, (drawY + lineHeight), lineRuns, i, selBrushFg, rect, alpha); org.eclipse.swt.graphics.Gdip.Graphics_Restore(gdipGraphics, gstate); } borderClip = drawBorder(gdip, gdipGraphics, x, drawY, lineHeight, foregroundBrush, selBrushFg, fullSelection, borderClip, (partialSelection ? rect : null), alpha, lineRuns, i, selectionStart, selectionEnd); if ((brush != selBrushFg) && (brush != foregroundBrush)) org.eclipse.swt.graphics.Gdip.SolidBrush_delete(brush); } else { int drawRunY = drawY + (baseline - (run.ascent)); int fg = foreground; if (fullSelection) { fg = selectionForeground.handle; } else { if (((run.style) != null) && ((run.style.foreground) != null)) fg = run.style.foreground.handle; } org.eclipse.swt.graphics.OS.SetTextColor(hdc, fg); org.eclipse.swt.graphics.OS.ScriptTextOut(hdc, run.psc, (drawX + offset), drawRunY, 0, null, run.analysis, 0, 0, run.glyphs, run.glyphCount, run.advances, run.justify, run.goffsets); drawLines(gdip, hdc, x, (drawY + baseline), lineUnderlinePos, (drawY + lineHeight), lineRuns, i, fg, null, alpha); if (partialSelection && (fg != (selectionForeground.handle))) { org.eclipse.swt.graphics.OS.SetTextColor(hdc, selectionForeground.handle); org.eclipse.swt.graphics.OS.ScriptTextOut(hdc, run.psc, (drawX + offset), drawRunY, OS.ETO_CLIPPED, rect, run.analysis, 0, 0, run.glyphs, run.glyphCount, run.advances, run.justify, run.goffsets); drawLines(gdip, hdc, x, (drawY + baseline), lineUnderlinePos, (drawY + lineHeight), lineRuns, i, selectionForeground.handle, rect, alpha); } int selForeground = (selectionForeground != null) ? selectionForeground.handle : 0; borderClip = drawBorder(gdip, hdc, x, drawY, lineHeight, foreground, selForeground, fullSelection, borderClip, (partialSelection ? rect : null), alpha, lineRuns, i, selectionStart, selectionEnd); } } } drawX += run.width; } } if (gdip) { if (selBrush != 0) org.eclipse.swt.graphics.Gdip.SolidBrush_delete(selBrush); if (selBrushFg != 0) org.eclipse.swt.graphics.Gdip.SolidBrush_delete(selBrushFg); if (selPen != 0) org.eclipse.swt.graphics.Gdip.Pen_delete(selPen); if (gdipFont != 0) org.eclipse.swt.graphics.Gdip.Font_delete(gdipFont); } else { org.eclipse.swt.graphics.OS.RestoreDC(hdc, state); if (gdipGraphics != 0) org.eclipse.swt.graphics.Gdip.Graphics_ReleaseHDC(gdipGraphics, hdc); if (selBrush != 0) org.eclipse.swt.graphics.OS.DeleteObject(selBrush); if (selPen != 0) org.eclipse.swt.graphics.OS.DeleteObject(selPen); } }
void dropDown(boolean drop) { if (drop == (isDropped())) return; if (!drop) { popup.setVisible(false); if ((!(isDisposed())) && (arrow.isFocusControl())) { text.setFocus(); } return; } if ((getShell()) != (popup.getParent())) { java.lang.String[] items = list.getItems(); int selectionIndex = list.getSelectionIndex(); list.removeListener(SWT.Dispose, listener); popup.dispose(); popup = null; list = null; createPopup(items, selectionIndex); } org.eclipse.swt.custom.Point size = getSize(); int itemCount = list.getItemCount(); itemCount = (itemCount == 0) ? visibleItemCount : java.lang.Math.min(visibleItemCount, itemCount); int itemHeight = (list.getItemHeight()) * itemCount; org.eclipse.swt.custom.Point listSize = list.computeSize(SWT.DEFAULT, itemHeight, false); list.setBounds(1, 1, java.lang.Math.max(((size.x) - 2), listSize.x), listSize.y); int index = list.getSelectionIndex(); if (index != (-1)) list.setTopIndex(index); org.eclipse.swt.custom.Display display = getDisplay(); org.eclipse.swt.custom.Rectangle listRect = list.getBounds(); org.eclipse.swt.custom.Rectangle parentRect = display.map(getParent(), null, getBounds()); org.eclipse.swt.custom.Point comboSize = getSize(); org.eclipse.swt.custom.Rectangle displayRect = getMonitor().getClientArea(); int width = java.lang.Math.max(comboSize.x, ((listRect.width) + 2)); int height = (listRect.height) + 2; int x = parentRect.x; int y = (parentRect.y) + (comboSize.y); if ((y + height) > ((displayRect.y) + (displayRect.height))) y = (parentRect.y) - height; popup.setBounds(x, y, width, height); popup.setVisible(true); list.setFocus(); }
public void setXORMode(boolean xor) { if ((handle) == 0) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_GRAPHIC_DISPOSED); data.xorMode = xor; if ((OS.VERSION) >= 4160) { org.eclipse.swt.graphics.OS.CGContextSetBlendMode(handle, (xor ? OS.kCGBlendModeDifference : OS.kCGBlendModeNormal)); } }
void listEvent(org.eclipse.swt.custom.Event event) { switch (event.type) { case SWT.Dispose : if ((getShell()) != (popup.getParent())) { java.lang.String[] items = list.getItems(); int selectionIndex = list.getSelectionIndex(); popup = null; list = null; createPopup(items, selectionIndex); } break; case SWT.FocusIn : { handleFocus(SWT.FocusIn); break; } case SWT.MouseUp : { if ((event.button) != 1) return; dropDown(false); break; } case SWT.Selection : { int index = list.getSelectionIndex(); if (index == (-1)) return; text.setText(list.getItem(index)); text.selectAll(); list.setSelection(index); org.eclipse.swt.custom.Event e = new org.eclipse.swt.custom.Event(); e.time = event.time; e.stateMask = event.stateMask; e.doit = event.doit; notifyListeners(SWT.Selection, e); event.doit = e.doit; break; } case SWT.Traverse : { switch (event.detail) { case SWT.TRAVERSE_RETURN : case SWT.TRAVERSE_ESCAPE : case SWT.TRAVERSE_ARROW_PREVIOUS : case SWT.TRAVERSE_ARROW_NEXT : event.doit = false; break; case SWT.TRAVERSE_TAB_NEXT : case SWT.TRAVERSE_TAB_PREVIOUS : event.doit = text.traverse(event.detail); event.detail = SWT.TRAVERSE_NONE; if (event.doit) dropDown(false); return; } org.eclipse.swt.custom.Event e = new org.eclipse.swt.custom.Event(); e.time = event.time; e.detail = event.detail; e.doit = event.doit; e.character = event.character; e.keyCode = event.keyCode; e.keyLocation = event.keyLocation; notifyListeners(SWT.Traverse, e); event.doit = e.doit; event.detail = e.detail; break; } case SWT.KeyUp : { org.eclipse.swt.custom.Event e = new org.eclipse.swt.custom.Event(); e.time = event.time; e.character = event.character; e.keyCode = event.keyCode; e.keyLocation = event.keyLocation; e.stateMask = event.stateMask; notifyListeners(SWT.KeyUp, e); event.doit = e.doit; break; } case SWT.KeyDown : { if ((event.character) == (SWT.ESC)) { dropDown(false); } if ((((event.stateMask) & (SWT.ALT)) != 0) && (((event.keyCode) == (SWT.ARROW_UP)) || ((event.keyCode) == (SWT.ARROW_DOWN)))) { dropDown(false); } if ((event.character) == (SWT.CR)) { dropDown(false); org.eclipse.swt.custom.Event e = new org.eclipse.swt.custom.Event(); e.time = event.time; e.stateMask = event.stateMask; notifyListeners(SWT.DefaultSelection, e); } if (isDisposed()) break; org.eclipse.swt.custom.Event e = new org.eclipse.swt.custom.Event(); e.time = event.time; e.character = event.character; e.keyCode = event.keyCode; e.keyLocation = event.keyLocation; e.stateMask = event.stateMask; notifyListeners(SWT.KeyDown, e); event.doit = e.doit; break; } } }
public java.lang.String open() { java.lang.String fullPath = null; fileNames = new java.lang.String[0]; int method = 0; int methodImpl = 0; org.eclipse.swt.widgets.Callback callback = null; if (((style) & (SWT.SAVE)) != 0) { org.eclipse.swt.widgets.NSSavePanel savePanel = org.eclipse.swt.widgets.NSSavePanel.savePanel(); panel = savePanel; if (!(overwrite)) { callback = new org.eclipse.swt.widgets.Callback(this, "_overwriteExistingFileCheck", 3); int proc = callback.getAddress(); if (proc == 0) error(SWT.ERROR_NO_MORE_CALLBACKS); method = org.eclipse.swt.widgets.OS.class_getInstanceMethod(OS.class_NSSavePanel, OS.sel_overwriteExistingFileCheck); if (method != 0) methodImpl = org.eclipse.swt.widgets.OS.method_setImplementation(method, proc); } } else { org.eclipse.swt.widgets.NSOpenPanel openPanel = org.eclipse.swt.widgets.NSOpenPanel.openPanel(); openPanel.setAllowsMultipleSelection((((style) & (SWT.MULTI)) != 0)); panel = openPanel; } panel.setCanCreateDirectories(true); int jniRef = 0; org.eclipse.swt.widgets.SWTPanelDelegate delegate = null; if (((filterExtensions) != null) && ((filterExtensions.length) != 0)) { delegate = ((org.eclipse.swt.widgets.SWTPanelDelegate) (new org.eclipse.swt.widgets.SWTPanelDelegate().alloc().init())); jniRef = org.eclipse.swt.widgets.OS.NewGlobalRef(this); if (jniRef == 0) org.eclipse.swt.widgets.SWT.error(SWT.ERROR_NO_HANDLES); org.eclipse.swt.widgets.OS.object_setInstanceVariable(delegate.id, Display.SWT_OBJECT, jniRef); panel.setDelegate(delegate); org.eclipse.swt.widgets.NSPopUpButton widget = ((org.eclipse.swt.widgets.NSPopUpButton) (new org.eclipse.swt.widgets.NSPopUpButton().alloc())); widget.initWithFrame(new org.eclipse.swt.widgets.NSRect(), false); widget.setTarget(delegate); widget.setAction(OS.sel_sendSelection_); org.eclipse.swt.widgets.NSMenu menu = widget.menu(); menu.setAutoenablesItems(false); for (int i = 0; i < (filterExtensions.length); i++) { java.lang.String str = filterExtensions[i]; if (((filterNames) != null) && ((filterNames.length) > i)) { str = filterNames[i]; } org.eclipse.swt.widgets.NSMenuItem nsItem = ((org.eclipse.swt.widgets.NSMenuItem) (new org.eclipse.swt.widgets.NSMenuItem().alloc())); nsItem.initWithTitle(org.eclipse.swt.widgets.NSString.stringWith(str), 0, org.eclipse.swt.widgets.NSString.stringWith("")); menu.addItem(nsItem); nsItem.release(); } widget.selectItemAtIndex(((0 <= (filterIndex)) && ((filterIndex) < (filterExtensions.length)) ? filterIndex : 0)); widget.sizeToFit(); panel.setAccessoryView(widget); popup = widget; } panel.setTitle(org.eclipse.swt.widgets.NSString.stringWith(((title) != null ? title : ""))); org.eclipse.swt.widgets.NSApplication application = org.eclipse.swt.widgets.NSApplication.sharedApplication(); if (((parent) != null) && (((style) & (SWT.SHEET)) != 0)) { application.beginSheet(panel, parent.window, null, 0, 0); } org.eclipse.swt.widgets.NSString dir = ((filterPath) != null) ? org.eclipse.swt.widgets.NSString.stringWith(filterPath) : null; org.eclipse.swt.widgets.NSString file = ((fileName) != null) ? org.eclipse.swt.widgets.NSString.stringWith(fileName) : null; int response = panel.runModalForDirectory(dir, file); if (((parent) != null) && (((style) & (SWT.SHEET)) != 0)) { application.endSheet(panel, 0); } if (!(overwrite)) { if (method != 0) org.eclipse.swt.widgets.OS.method_setImplementation(method, methodImpl); if (callback != null) callback.dispose(); } if (response == (OS.NSFileHandlingPanelOKButton)) { org.eclipse.swt.widgets.NSString filename = panel.filename(); fullPath = filename.getString(); if (((style) & (SWT.SAVE)) == 0) { org.eclipse.swt.widgets.NSArray filenames = ((org.eclipse.swt.widgets.NSOpenPanel) (panel)).filenames(); int count = ((int) (filenames.count())); fileNames = new java.lang.String[count]; for (int i = 0; i < count; i++) { filename = new org.eclipse.swt.widgets.NSString(filenames.objectAtIndex(i)); org.eclipse.swt.widgets.NSString filenameOnly = filename.lastPathComponent(); org.eclipse.swt.widgets.NSString pathOnly = filename.stringByDeletingLastPathComponent(); if (i == 0) { filterPath = pathOnly.getString(); fileName = fileNames[0] = filenameOnly.getString(); } else { if (pathOnly.getString().equals(filterPath)) { fileNames[i] = filenameOnly.getString(); } else { fileNames[i] = filename.getString(); } } } } filterIndex = -1; } if ((popup) != null) { filterIndex = ((int) (popup.indexOfSelectedItem())); panel.setAccessoryView(null); popup.release(); popup = null; } if (delegate != null) { panel.setDelegate(null); delegate.release(); } if (jniRef != 0) org.eclipse.swt.widgets.OS.DeleteGlobalRef(jniRef); panel = null; return fullPath; }
void drag_data_received(int widget, int context, int x, int y, int data, int info, int time) { org.eclipse.swt.dnd.DNDEvent event = new org.eclipse.swt.dnd.DNDEvent(); if ((data == 0) || (!(setEventData(context, x, y, time, event)))) { keyOperation = -1; return; } keyOperation = -1; int allowedOperations = event.operations; java.lang.Object object = null; org.eclipse.swt.dnd.TransferData transferData = new org.eclipse.swt.dnd.TransferData(); org.eclipse.swt.dnd.GtkSelectionData selectionData = new org.eclipse.swt.dnd.GtkSelectionData(); org.eclipse.swt.dnd.OS.memmove(selectionData, data, GtkSelectionData.sizeof); if ((selectionData.data) != 0) { transferData.type = selectionData.type; transferData.length = selectionData.length; transferData.pValue = selectionData.data; transferData.format = selectionData.format; for (int i = 0; i < (transferAgents.length); i++) { if (transferAgents[i].isSupportedType(transferData)) { object = transferAgents[i].nativeToJava(transferData); break; } } } if (object == null) { selectedOperation = DND.DROP_NONE; } event.detail = selectedOperation; event.dataType = transferData; event.data = object; selectedOperation = DND.DROP_NONE; notifyListeners(DND.Drop, event); if ((allowedOperations & (event.detail)) == (event.detail)) { selectedOperation = event.detail; } org.eclipse.swt.dnd.OS.g_signal_stop_emission_by_name(widget, OS.drag_data_received); org.eclipse.swt.dnd.OS.gtk_drag_finish(context, ((selectedOperation) != (DND.DROP_NONE)), ((selectedOperation) == (DND.DROP_MOVE)), time); return; }
org.eclipse.swt.custom.TextLayout getTextLayout(java.lang.String line, int lineOffset) { org.eclipse.swt.custom.TextLayout layout = createTextLayout(lineOffset); layout.setFont(regularFont); layout.setAscent(ascent); layout.setDescent(descent); layout.setText(line); layout.setOrientation(getOrientation()); layout.setSegments(getBidiSegments(lineOffset, line)); layout.setTabs(new int[]{ tabWidth }); int length = line.length(); org.eclipse.swt.custom.StyledTextEvent event = getLineStyleData(lineOffset, line); org.eclipse.swt.custom.StyleRange[] styles = (event != null) ? event.styles : null; int lastOffset = 0; if (styles != null) { for (int styleIndex = 0; styleIndex < (styles.length); styleIndex++) { org.eclipse.swt.custom.StyleRange style = styles[styleIndex]; if (style.isUnstyled()) continue; int start; int end; if (lineOffset > (style.start)) { start = 0; end = java.lang.Math.min(length, (((style.length) - lineOffset) + (style.start))); } else { start = (style.start) - lineOffset; end = java.lang.Math.min(length, (start + (style.length))); } if (start >= length) break; if (lastOffset < start) { layout.setStyle(null, lastOffset, (start - 1)); } org.eclipse.swt.custom.TextStyle textStyle = new org.eclipse.swt.custom.TextStyle(getFont(style.fontStyle), style.foreground, style.background); layout.setStyle(textStyle, start, (end - 1)); lastOffset = java.lang.Math.max(lastOffset, end); } } if (lastOffset < length) layout.setStyle(null, lastOffset, length); return layout; }
org.eclipse.swt.custom.TextLayout getTextLayout(int lineIndex, int orientation, int width, int lineSpacing) { org.eclipse.swt.custom.TextLayout layout = null; if ((styledText) != null) { int topIndex = ((styledText.topIndex) > 0) ? (styledText.topIndex) - 1 : 0; if (((layouts) == null) || (topIndex != (this.topIndex))) { org.eclipse.swt.custom.TextLayout[] newLayouts = new org.eclipse.swt.custom.TextLayout[org.eclipse.swt.custom.StyledTextRenderer.CACHE_SIZE]; if ((layouts) != null) { for (int i = 0; i < (layouts.length); i++) { if ((layouts[i]) != null) { int layoutIndex = (i + (this.topIndex)) - topIndex; if ((0 <= layoutIndex) && (layoutIndex < (newLayouts.length))) { newLayouts[layoutIndex] = layouts[i]; } else { layouts[i].dispose(); } } } } if ((((bullets) != null) && ((bulletsIndices) != null)) && (topIndex != (this.topIndex))) { int delta = topIndex - (this.topIndex); if (delta > 0) { if (delta < (bullets.length)) { java.lang.System.arraycopy(bullets, delta, bullets, 0, ((bullets.length) - delta)); java.lang.System.arraycopy(bulletsIndices, delta, bulletsIndices, 0, ((bulletsIndices.length) - delta)); } int startIndex = java.lang.Math.max(0, ((bullets.length) - delta)); for (int i = startIndex; i < (bullets.length); i++) bullets[i] = null; } else { if ((-delta) < (bullets.length)) { java.lang.System.arraycopy(bullets, 0, bullets, (-delta), ((bullets.length) + delta)); java.lang.System.arraycopy(bulletsIndices, 0, bulletsIndices, (-delta), ((bulletsIndices.length) + delta)); } int endIndex = java.lang.Math.min(bullets.length, (-delta)); for (int i = 0; i < endIndex; i++) bullets[i] = null; } } this.topIndex = topIndex; layouts = newLayouts; } if ((layouts) != null) { int layoutIndex = lineIndex - topIndex; if ((0 <= layoutIndex) && (layoutIndex < (layouts.length))) { layout = layouts[layoutIndex]; if (layout != null) { if ((lineWidth[lineIndex]) != (-1)) return layout; } else { layout = layouts[layoutIndex] = new org.eclipse.swt.custom.TextLayout(device); } } } } if (layout == null) layout = new org.eclipse.swt.custom.TextLayout(device); java.lang.String line = content.getLine(lineIndex); int lineOffset = content.getOffsetAtLine(lineIndex); int[] segments = null; int indent = 0; int alignment = org.eclipse.swt.SWT.LEFT; boolean justify = false; org.eclipse.swt.custom.Bullet bullet = null; int[] ranges = null; org.eclipse.swt.custom.StyleRange[] styles = null; int rangeStart = 0; int styleCount = 0; org.eclipse.swt.custom.StyledTextEvent event = null; if ((styledText) != null) { event = styledText.getLineStyleData(lineOffset, line); segments = styledText.getBidiSegments(lineOffset, line); indent = styledText.indent; alignment = styledText.alignment; justify = styledText.justify; } if (event != null) { indent = event.indent; alignment = event.alignment; justify = event.justify; bullet = event.bullet; ranges = event.ranges; styles = event.styles; if (styles != null) { styleCount = styles.length; if (styledText.isFixedLineHeight()) { for (int i = 0; i < styleCount; i++) { if (styles[i].isVariableHeight()) { styledText.verticalScrollOffset = -1; styledText.setVariableLineHeight(); styledText.redraw(); break; } } } } if (((bullets) == null) || ((bulletsIndices) == null)) { bullets = new org.eclipse.swt.custom.Bullet[org.eclipse.swt.custom.StyledTextRenderer.CACHE_SIZE]; bulletsIndices = new int[org.eclipse.swt.custom.StyledTextRenderer.CACHE_SIZE]; } int index = lineIndex - (topIndex); if ((0 <= index) && (index < (org.eclipse.swt.custom.StyledTextRenderer.CACHE_SIZE))) { bullets[index] = bullet; bulletsIndices[index] = event.bulletIndex; } } else { if ((lines) != null) { org.eclipse.swt.custom.StyledTextRenderer.LineInfo info = lines[lineIndex]; if (info != null) { if (((info.flags) & (org.eclipse.swt.custom.StyledTextRenderer.INDENT)) != 0) indent = info.indent; if (((info.flags) & (org.eclipse.swt.custom.StyledTextRenderer.ALIGNMENT)) != 0) alignment = info.alignment; if (((info.flags) & (org.eclipse.swt.custom.StyledTextRenderer.JUSTIFY)) != 0) justify = info.justify; if (((info.flags) & (org.eclipse.swt.custom.StyledTextRenderer.SEGMENTS)) != 0) segments = info.segments; } } if ((bulletsIndices) != null) { bullets = null; bulletsIndices = null; } if ((bullets) != null) { for (int i = 0; i < (bullets.length); i++) { if ((bullets[i].indexOf(lineIndex)) != (-1)) { bullet = bullets[i]; break; } } } ranges = this.ranges; styles = this.styles; styleCount = this.styleCount; if (ranges != null) { rangeStart = getRangeIndex(lineOffset, (-1), (styleCount << 1)); } else { rangeStart = getRangeIndex(lineOffset, (-1), styleCount); } } if (bullet != null) { org.eclipse.swt.custom.StyleRange style = bullet.style; org.eclipse.swt.custom.GlyphMetrics metrics = style.metrics; indent += metrics.width; } layout.setFont(regularFont); layout.setAscent(ascent); layout.setDescent(descent); layout.setText(line); layout.setOrientation(orientation); layout.setSegments(segments); layout.setWidth(width); layout.setSpacing(lineSpacing); layout.setTabs(new int[]{ tabWidth }); layout.setIndent(indent); layout.setAlignment(alignment); layout.setJustify(justify); int lastOffset = 0; int length = line.length(); if (styles != null) { if (ranges != null) { int rangeCount = styleCount << 1; for (int i = rangeStart; i < rangeCount; i += 2) { int start; int end; if (lineOffset > (ranges[i])) { start = 0; end = java.lang.Math.min(length, (((ranges[(i + 1)]) - lineOffset) + (ranges[i]))); } else { start = (ranges[i]) - lineOffset; end = java.lang.Math.min(length, (start + (ranges[(i + 1)]))); } if (start >= length) break; if (lastOffset < start) { layout.setStyle(null, lastOffset, (start - 1)); } layout.setStyle(getStyleRange(styles[(i >> 1)]), start, end); lastOffset = java.lang.Math.max(lastOffset, end); } } else { for (int i = rangeStart; i < styleCount; i++) { int start; int end; if (lineOffset > (styles[i].start)) { start = 0; end = java.lang.Math.min(length, (((styles[i].length) - lineOffset) + (styles[i].start))); } else { start = (styles[i].start) - lineOffset; end = java.lang.Math.min(length, (start + (styles[i].length))); } if (start >= length) break; if (lastOffset < start) { layout.setStyle(null, lastOffset, (start - 1)); } layout.setStyle(getStyleRange(styles[i]), start, end); lastOffset = java.lang.Math.max(lastOffset, end); } } } if (lastOffset < length) layout.setStyle(null, lastOffset, length); if (styledText.isFixedLineHeight()) { int height = layout.getBounds().height; if (height > (getLineHeight())) { org.eclipse.swt.custom.FontMetrics metrics = layout.getLineMetrics(0); ascent = (metrics.getAscent()) + (metrics.getLeading()); descent = metrics.getDescent(); if ((layouts) != null) { for (int i = 0; i < (layouts.length); i++) { if (((layouts[i]) != null) && ((layouts[i]) != layout)) { layouts[i].setAscent(ascent); layouts[i].setDescent(descent); } } } if ((styledText.verticalScrollOffset) != 0) { int topIndex = styledText.topIndex; int topIndexY = styledText.topIndexY; int lineHeight = getLineHeight(); if (topIndexY >= 0) { styledText.verticalScrollOffset = (((topIndex - 1) * lineHeight) + lineHeight) - topIndexY; } else { styledText.verticalScrollOffset = (topIndex * lineHeight) - topIndexY; } } styledText.calculateScrollBars(); if (styledText.isBidiCaret()) styledText.createCaretBitmaps(); styledText.caretDirection = org.eclipse.swt.SWT.NULL; styledText.setCaretLocation(); styledText.redraw(); } } return layout; }
public static org.eclipse.swt.printing.PrinterData getDefaultPrinterData() { java.lang.String deviceName = null; int length = 1024; org.eclipse.swt.printing.TCHAR buf = new org.eclipse.swt.printing.TCHAR(0, length); org.eclipse.swt.printing.TCHAR nullBuf = new org.eclipse.swt.printing.TCHAR(0, 1); int n = org.eclipse.swt.printing.OS.GetProfileString(org.eclipse.swt.printing.Printer.appName, org.eclipse.swt.printing.Printer.keyName, nullBuf, buf, length); if (n == 0) return null; int commaIndex = 0; while (((buf.tcharAt(commaIndex)) != ',') && (commaIndex < length)) commaIndex++; if (commaIndex < length) { deviceName = buf.toString(0, commaIndex); } if (deviceName == null) return null; java.lang.String driver = ""; if ((org.eclipse.swt.printing.OS.GetProfileString(org.eclipse.swt.printing.Printer.profile, new org.eclipse.swt.printing.TCHAR(0, deviceName, true), nullBuf, buf, length)) > 0) { commaIndex = 0; while (((buf.tcharAt(commaIndex)) != ',') && (commaIndex < length)) commaIndex++; if (commaIndex < length) { driver = buf.toString(0, commaIndex); } } return new org.eclipse.swt.printing.PrinterData(driver, deviceName); }
int gtk_motion_notify_event(int widget, int event) { if (widget == (shellHandle)) { if (isCustomResize()) { org.eclipse.swt.widgets.GdkEventMotion gdkEvent = new org.eclipse.swt.widgets.GdkEventMotion(); org.eclipse.swt.widgets.OS.memmove(gdkEvent, event, GdkEventMotion.sizeof); if (((gdkEvent.state) & (OS.GDK_BUTTON1_MASK)) != 0) { int border = org.eclipse.swt.widgets.OS.gtk_container_get_border_width(shellHandle); int dx = ((int) ((gdkEvent.x_root) - (display.resizeLocationX))); int dy = ((int) ((gdkEvent.y_root) - (display.resizeLocationY))); int x = display.resizeBoundsX; int y = display.resizeBoundsY; int width = display.resizeBoundsWidth; int height = display.resizeBoundsHeight; int newWidth = java.lang.Math.max((width - dx), java.lang.Math.max(minWidth, (border + border))); int newHeight = java.lang.Math.max((height - dy), java.lang.Math.max(minHeight, (border + border))); switch (display.resizeMode) { case OS.GDK_LEFT_SIDE : x += width - newWidth; width = newWidth; break; case OS.GDK_TOP_LEFT_CORNER : x += width - newWidth; width = newWidth; y += height - newHeight; height = newHeight; break; case OS.GDK_TOP_SIDE : y += height - newHeight; height = newHeight; break; case OS.GDK_TOP_RIGHT_CORNER : width = java.lang.Math.max((width + dx), java.lang.Math.max(minWidth, (border + border))); y += height - newHeight; height = newHeight; break; case OS.GDK_RIGHT_SIDE : width = java.lang.Math.max((width + dx), java.lang.Math.max(minWidth, (border + border))); break; case OS.GDK_BOTTOM_RIGHT_CORNER : width = java.lang.Math.max((width + dx), java.lang.Math.max(minWidth, (border + border))); height = java.lang.Math.max((height + dy), java.lang.Math.max(minHeight, (border + border))); break; case OS.GDK_BOTTOM_SIDE : height = java.lang.Math.max((height + dy), java.lang.Math.max(minHeight, (border + border))); break; case OS.GDK_BOTTOM_LEFT_CORNER : x += width - newWidth; width = newWidth; height = java.lang.Math.max((height + dy), java.lang.Math.max(minHeight, (border + border))); break; } if ((x != (display.resizeBoundsX)) || (y != (display.resizeBoundsY))) { org.eclipse.swt.widgets.OS.gdk_window_move_resize(org.eclipse.swt.widgets.OS.GTK_WIDGET_WINDOW(shellHandle), x, y, width, height); } else { org.eclipse.swt.widgets.OS.gtk_window_resize(shellHandle, width, height); } } else { int mode = getResizeMode(gdkEvent.x, gdkEvent.y); if (mode != (display.resizeMode)) { int window = org.eclipse.swt.widgets.OS.GTK_WIDGET_WINDOW(shellHandle); int cursor = org.eclipse.swt.widgets.OS.gdk_cursor_new(mode); org.eclipse.swt.widgets.OS.gdk_window_set_cursor(window, cursor); org.eclipse.swt.widgets.OS.gdk_cursor_destroy(cursor); display.resizeMode = mode; } } } return 0; } return super.gtk_motion_notify_event(widget, event); }
void resizeBounds(int width, int height, boolean notify) { if ((redrawWindow) != 0) { org.eclipse.swt.widgets.OS.gdk_window_resize(redrawWindow, width, height); } if ((enableWindow) != 0) { org.eclipse.swt.widgets.OS.gdk_window_resize(enableWindow, width, height); } int border = org.eclipse.swt.widgets.OS.gtk_container_get_border_width(shellHandle); int boxWidth = width - (2 * border); int boxHeight = height - (2 * border); if ((!(OS.GTK3)) || (((style) & (SWT.RESIZE)) == 0)) { org.eclipse.swt.widgets.OS.gtk_widget_set_size_request(vboxHandle, boxWidth, boxHeight); } forceResize(boxWidth, boxHeight); if (notify) { resized = true; sendEvent(SWT.Resize); if (isDisposed()) return; if ((layout) != null) { markLayout(false, false); updateLayout(false); } } }
java.lang.String parse(java.lang.String string) { int length = string.length(); offsets = new org.eclipse.swt.widgets.Point[length / 4]; ids = new java.lang.String[length / 4]; mnemonics = new int[(length / 4) + 1]; java.lang.StringBuffer result = new java.lang.StringBuffer(); char[] buffer = new char[length]; string.getChars(0, string.length(), buffer, 0); int index = 0; int state = 0; int linkIndex = 0; int start = 0; int tagStart = 0; int linkStart = 0; int endtagStart = 0; int refStart = 0; while (index < length) { char c = java.lang.Character.toLowerCase(buffer[index]); switch (state) { case 0 : if (c == '<') { tagStart = index; state++; } break; case 1 : if (c == 'a') state++; break; case 2 : switch (c) { case 'h' : state = 7; break; case '>' : linkStart = index + 1; state++; break; default : if (java.lang.Character.isWhitespace(c)) break; else state = 13; } break; case 3 : if (c == '<') { endtagStart = index; state++; } break; case 4 : state = (c == '/') ? state + 1 : 3; break; case 5 : state = (c == 'a') ? state + 1 : 3; break; case 6 : if (c == '>') { mnemonics[linkIndex] = parseMnemonics(buffer, start, tagStart, result); int offset = result.length(); parseMnemonics(buffer, linkStart, endtagStart, result); offsets[linkIndex] = new org.eclipse.swt.widgets.Point(offset, ((result.length()) - 1)); if ((ids[linkIndex]) == null) { ids[linkIndex] = new java.lang.String(buffer, linkStart, (endtagStart - linkStart)); } linkIndex++; start = tagStart = linkStart = endtagStart = refStart = index + 1; state = 0; } else { state = 3; } break; case 7 : state = (c == 'r') ? state + 1 : 0; break; case 8 : state = (c == 'e') ? state + 1 : 0; break; case 9 : state = (c == 'f') ? state + 1 : 0; break; case 10 : state = (c == '=') ? state + 1 : 0; break; case 11 : if (c == '"') { state++; refStart = index + 1; } else { state = 0; } break; case 12 : if (c == '"') { ids[linkIndex] = new java.lang.String(buffer, refStart, (index - refStart)); state = 2; } break; case 13 : if (java.lang.Character.isWhitespace(c)) { state = 0; } else if (c == '=') { state++; } break; case 14 : state = (c == '"') ? state + 1 : 0; break; case 15 : if (c == '"') state = 2; break; default : state = 0; break; } index++; } if (start < length) { int tmp = parseMnemonics(buffer, start, tagStart, result); int mnemonic = parseMnemonics(buffer, java.lang.Math.max(tagStart, linkStart), length, result); if (mnemonic == (-1)) mnemonic = tmp; mnemonics[linkIndex] = mnemonic; } else { mnemonics[linkIndex] = -1; } if ((offsets.length) != linkIndex) { org.eclipse.swt.widgets.Point[] newOffsets = new org.eclipse.swt.widgets.Point[linkIndex]; java.lang.System.arraycopy(offsets, 0, newOffsets, 0, linkIndex); offsets = newOffsets; java.lang.String[] newIDs = new java.lang.String[linkIndex]; java.lang.System.arraycopy(ids, 0, newIDs, 0, linkIndex); ids = newIDs; int[] newMnemonics = new int[linkIndex + 1]; java.lang.System.arraycopy(mnemonics, 0, newMnemonics, 0, (linkIndex + 1)); mnemonics = newMnemonics; } return result.toString(); }
void createRenderers(int columnHandle, int modelIndex, boolean check, int columnStyle) { org.eclipse.swt.widgets.OS.gtk_tree_view_column_clear(columnHandle); if ((((style) & (SWT.CHECK)) != 0) && check) { org.eclipse.swt.widgets.OS.gtk_tree_view_column_pack_start(columnHandle, checkRenderer, false); org.eclipse.swt.widgets.OS.gtk_tree_view_column_add_attribute(columnHandle, checkRenderer, "active", org.eclipse.swt.widgets.Table.CHECKED_COLUMN); org.eclipse.swt.widgets.OS.gtk_tree_view_column_add_attribute(columnHandle, checkRenderer, "cell-background-gdk", org.eclipse.swt.widgets.Table.BACKGROUND_COLUMN); if (((org.eclipse.swt.widgets.OS.gtk_major_version()) > 2) || (((org.eclipse.swt.widgets.OS.gtk_major_version()) == 2) && ((org.eclipse.swt.widgets.OS.gtk_minor_version()) >= 2))) { org.eclipse.swt.widgets.OS.gtk_tree_view_column_add_attribute(columnHandle, checkRenderer, "inconsistent", org.eclipse.swt.widgets.Table.GRAYED_COLUMN); } } int pixbufRenderer = org.eclipse.swt.widgets.OS.gtk_cell_renderer_pixbuf_new(); if (pixbufRenderer == 0) error(SWT.ERROR_NO_HANDLES); int textRenderer = org.eclipse.swt.widgets.OS.gtk_cell_renderer_text_new(); if (textRenderer == 0) error(SWT.ERROR_NO_HANDLES); if ((((style) & (SWT.CHECK)) != 0) && check) { org.eclipse.swt.widgets.OS.g_object_set(pixbufRenderer, OS.mode, OS.GTK_CELL_RENDERER_MODE_ACTIVATABLE, 0); } if ((columnStyle & (SWT.RIGHT)) != 0) { org.eclipse.swt.widgets.OS.g_object_set(textRenderer, OS.xalign, 1.0F, 0); org.eclipse.swt.widgets.OS.gtk_tree_view_column_pack_start(columnHandle, pixbufRenderer, false); org.eclipse.swt.widgets.OS.gtk_tree_view_column_pack_start(columnHandle, textRenderer, true); org.eclipse.swt.widgets.OS.gtk_tree_view_column_set_alignment(columnHandle, 1.0F); } else if ((columnStyle & (SWT.CENTER)) != 0) { org.eclipse.swt.widgets.OS.g_object_set(textRenderer, OS.xalign, 0.5F, 0); org.eclipse.swt.widgets.OS.gtk_tree_view_column_pack_start(columnHandle, pixbufRenderer, false); org.eclipse.swt.widgets.OS.gtk_tree_view_column_pack_end(columnHandle, textRenderer, true); org.eclipse.swt.widgets.OS.gtk_tree_view_column_set_alignment(columnHandle, 0.5F); } else { org.eclipse.swt.widgets.OS.gtk_tree_view_column_pack_start(columnHandle, pixbufRenderer, false); org.eclipse.swt.widgets.OS.gtk_tree_view_column_pack_start(columnHandle, textRenderer, true); org.eclipse.swt.widgets.OS.gtk_tree_view_column_set_alignment(columnHandle, 0.0F); } org.eclipse.swt.widgets.OS.gtk_tree_view_column_add_attribute(columnHandle, pixbufRenderer, "pixbuf", modelIndex); org.eclipse.swt.widgets.OS.gtk_tree_view_column_add_attribute(columnHandle, pixbufRenderer, "cell-background-gdk", org.eclipse.swt.widgets.Table.BACKGROUND_COLUMN); org.eclipse.swt.widgets.OS.gtk_tree_view_column_add_attribute(columnHandle, textRenderer, "text", (modelIndex + 1)); org.eclipse.swt.widgets.OS.gtk_tree_view_column_add_attribute(columnHandle, textRenderer, "foreground-gdk", org.eclipse.swt.widgets.Table.FOREGROUND_COLUMN); org.eclipse.swt.widgets.OS.gtk_tree_view_column_add_attribute(columnHandle, textRenderer, "background-gdk", org.eclipse.swt.widgets.Table.BACKGROUND_COLUMN); org.eclipse.swt.widgets.OS.gtk_tree_view_column_add_attribute(columnHandle, textRenderer, "font-desc", org.eclipse.swt.widgets.Table.FONT_COLUMN); boolean customDraw = firstCustomDraw; if ((columnCount) != 0) { for (int i = 0; i < (columnCount); i++) { if ((columns[i].handle) == columnHandle) { customDraw = columns[i].customDraw; break; } } } if ((((style) & (SWT.VIRTUAL)) != 0) || customDraw) { org.eclipse.swt.widgets.OS.gtk_tree_view_column_set_cell_data_func(columnHandle, textRenderer, display.textCellDataProc, handle, 0); org.eclipse.swt.widgets.OS.gtk_tree_view_column_set_cell_data_func(columnHandle, pixbufRenderer, display.pixbufCellDataProc, handle, 0); } }
void createHandle(int index) { state |= (HANDLE) | (MENU); fixedHandle = org.eclipse.swt.widgets.OS.g_object_new(display.gtk_fixed_get_type(), 0); if ((fixedHandle) == 0) error(SWT.ERROR_NO_HANDLES); gtk_widget_set_has_window(fixedHandle, true); long oldList = org.eclipse.swt.widgets.OS.gtk_window_list_toplevels(); if (((style) & (SWT.READ_ONLY)) != 0) { if (OS.GTK3) { handle = org.eclipse.swt.widgets.OS.gtk_combo_box_text_new(); } else { handle = org.eclipse.swt.widgets.OS.gtk_combo_box_new_text(); } if ((handle) == 0) error(SWT.ERROR_NO_HANDLES); cellHandle = org.eclipse.swt.widgets.OS.gtk_bin_get_child(handle); if ((cellHandle) == 0) error(SWT.ERROR_NO_HANDLES); } else { if (OS.GTK3) { handle = org.eclipse.swt.widgets.OS.gtk_combo_box_text_new_with_entry(); } else { handle = org.eclipse.swt.widgets.OS.gtk_combo_box_entry_new_text(); } if ((handle) == 0) error(SWT.ERROR_NO_HANDLES); entryHandle = org.eclipse.swt.widgets.OS.gtk_bin_get_child(handle); if ((entryHandle) == 0) error(SWT.ERROR_NO_HANDLES); if (OS.GTK3) { imContext = org.eclipse.swt.widgets.OS.imContextLast(); } } popupHandle = findPopupHandle(oldList); org.eclipse.swt.widgets.OS.gtk_container_add(fixedHandle, handle); textRenderer = org.eclipse.swt.widgets.OS.gtk_cell_renderer_text_new(); if ((textRenderer) == 0) error(SWT.ERROR_NO_HANDLES); int pad = 0; org.eclipse.swt.widgets.OS.g_object_set(textRenderer, OS.ypad, pad, 0); boolean warnings = display.getWarnings(); display.setWarnings(false); org.eclipse.swt.widgets.OS.gtk_cell_layout_clear(handle); display.setWarnings(warnings); org.eclipse.swt.widgets.OS.gtk_cell_layout_pack_start(handle, textRenderer, true); org.eclipse.swt.widgets.OS.gtk_cell_layout_set_attributes(handle, textRenderer, OS.text, 0, 0); if ((OS.GTK_VERSION) < (org.eclipse.swt.widgets.OS.VERSION(2, 8, 0))) { gtk_widget_get_preferred_size(handle, new org.eclipse.swt.widgets.GtkRequisition()); } menuHandle = findMenuHandle(); if ((menuHandle) != 0) org.eclipse.swt.widgets.OS.g_object_ref(menuHandle); buttonHandle = findButtonHandle(); if ((buttonHandle) != 0) org.eclipse.swt.widgets.OS.g_object_ref(buttonHandle); if ((((style) & (SWT.READ_ONLY)) != 0) && ((buttonHandle) != 0)) { gtk_widget_set_receives_default(buttonHandle, false); } }
void setWindowVisible(boolean visible, boolean key) { if (visible) { if (((state) & (HIDDEN)) == 0) return; state &= ~(HIDDEN); } else { if (((state) & (HIDDEN)) != 0) return; state |= HIDDEN; } if (((window) != null) && ((window.isVisible()) == visible)) return; if (visible) { display.clearPool(); if ((center) && (!(moved))) { if (isDisposed()) return; center(); } sendEvent(SWT.Show); if (isDisposed()) return; topView().setHidden(false); invalidateVisibleRegion(); if (((style) & (org.eclipse.swt.SWT.SHEET)) != 0) { org.eclipse.swt.widgets.NSApplication application = org.eclipse.swt.widgets.NSApplication.sharedApplication(); application.beginSheet(window, ((org.eclipse.swt.widgets.Shell) (parent)).window, null, 0, 0); if (((OS.VERSION) <= 4192) && (window.respondsToSelector(OS.sel__setNeedsToUseHeartBeatWindow_))) { org.eclipse.swt.widgets.OS.objc_msgSend(window.id, OS.sel__setNeedsToUseHeartBeatWindow_, 0); } } else { boolean parentMinimized = ((parent) != null) && (((org.eclipse.swt.widgets.Shell) (parent)).window.isMiniaturized()); if (!parentMinimized) { if (key) { makeKeyAndOrderFront(); } else { window.orderFront(null); } } } updateParent(visible); opened = true; if (!(moved)) { moved = true; sendEvent(SWT.Move); if (isDisposed()) return; } if (!(resized)) { resized = true; sendEvent(SWT.Resize); if (isDisposed()) return; if ((layout) != null) { markLayout(false, false); updateLayout(false); } } } else { updateParent(visible); if (((style) & (org.eclipse.swt.SWT.SHEET)) != 0) { org.eclipse.swt.widgets.NSApplication application = org.eclipse.swt.widgets.NSApplication.sharedApplication(); application.endSheet(window, 0); } else { window.orderOut(null); } topView().setHidden(true); invalidateVisibleRegion(); sendEvent(SWT.Hide); } display.updateQuitMenu(); }
void initXPCOM(java.lang.String mozillaPath, boolean isXULRunner) { long[] result = new long[1]; org.eclipse.swt.browser.nsEmbedString pathString = new org.eclipse.swt.browser.nsEmbedString(mozillaPath); int rc = org.eclipse.swt.browser.XPCOM.NS_NewLocalFile(pathString.getAddress(), 1, result); pathString.dispose(); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_ERROR_NULL_POINTER); } org.eclipse.swt.browser.nsIFile localFile = new org.eclipse.swt.browser.nsIFile(result[0]); result[0] = 0; if (isXULRunner) { int size = org.eclipse.swt.browser.XPCOM.nsDynamicFunctionLoad_sizeof(); long ptr = org.eclipse.swt.browser.C.malloc((size * 2)); org.eclipse.swt.browser.C.memset(ptr, 0, (size * 2)); org.eclipse.swt.browser.nsDynamicFunctionLoad functionLoad = new org.eclipse.swt.browser.nsDynamicFunctionLoad(); byte[] bytes = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, "XRE_InitEmbedding2", true); functionLoad.functionName = org.eclipse.swt.browser.C.malloc(bytes.length); org.eclipse.swt.browser.C.memmove(functionLoad.functionName, bytes, bytes.length); functionLoad.function = org.eclipse.swt.browser.C.malloc(C.PTR_SIZEOF); org.eclipse.swt.browser.C.memmove(functionLoad.function, new long[]{ 0 }, C.PTR_SIZEOF); org.eclipse.swt.browser.XPCOM.memmove(ptr, functionLoad, org.eclipse.swt.browser.XPCOM.nsDynamicFunctionLoad_sizeof()); rc = org.eclipse.swt.browser.XPCOM.XPCOMGlueLoadXULFunctions(ptr); if (rc == (XPCOM.NS_OK)) { result[0] = 0; rc = localFile.QueryInterface(nsIFile.NS_IFILE_17_IID, result); if (rc == (XPCOM.NS_OK)) { nsISupports.IsXULRunner17 = true; } else { rc = localFile.QueryInterface(nsILocalFile.NS_ILOCALFILE_IID, result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } org.eclipse.swt.browser.Mozilla.IsPre_17 = true; nsISupports.IsXULRunner10 = true; } if ((result[0]) != 0) new org.eclipse.swt.browser.nsISupports(result[0]).Release(); result[0] = 0; } else { org.eclipse.swt.browser.C.free(functionLoad.functionName); bytes = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, "XRE_InitEmbedding", true); functionLoad.functionName = org.eclipse.swt.browser.C.malloc(bytes.length); org.eclipse.swt.browser.C.memmove(functionLoad.functionName, bytes, bytes.length); org.eclipse.swt.browser.XPCOM.memmove(ptr, functionLoad, org.eclipse.swt.browser.XPCOM.nsDynamicFunctionLoad_sizeof()); rc = org.eclipse.swt.browser.XPCOM.XPCOMGlueLoadXULFunctions(ptr); org.eclipse.swt.browser.Mozilla.IsPre_4 = org.eclipse.swt.browser.Mozilla.IsPre_17 = true; } org.eclipse.swt.browser.C.memmove(result, functionLoad.function, C.PTR_SIZEOF); long functionPtr = result[0]; result[0] = 0; org.eclipse.swt.browser.C.free(functionLoad.function); org.eclipse.swt.browser.C.free(functionLoad.functionName); org.eclipse.swt.browser.C.free(ptr); if (functionPtr == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_ERROR_NULL_POINTER); } if (org.eclipse.swt.browser.Mozilla.IsPre_4) { rc = org.eclipse.swt.browser.XPCOM.Call(functionPtr, localFile.getAddress(), localFile.getAddress(), org.eclipse.swt.browser.Mozilla.LocationProvider.getAddress(), 0, 0); } else { rc = org.eclipse.swt.browser.XPCOM.Call(functionPtr, localFile.getAddress(), localFile.getAddress(), org.eclipse.swt.browser.Mozilla.LocationProvider.getAddress()); } if (rc == (XPCOM.NS_OK)) { java.lang.System.setProperty(org.eclipse.swt.browser.Mozilla.XULRUNNER_PATH, mozillaPath); } } else { rc = org.eclipse.swt.browser.XPCOM.NS_InitXPCOM2(0, localFile.getAddress(), org.eclipse.swt.browser.Mozilla.LocationProvider.getAddress()); } localFile.Release(); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.SWT.error(SWT.ERROR_NO_HANDLES, null, ((((" [MOZILLA_FIVE_HOME may not point at an embeddable GRE] [NS_InitEmbedding " + mozillaPath) + " error ") + rc) + "]")); } java.lang.System.setProperty(org.eclipse.swt.browser.Mozilla.GRE_INITIALIZED, org.eclipse.swt.browser.Mozilla.TRUE); }
int kEventWindowActivated(int nextHandler, int theEvent, int userData) { int result = super.kEventWindowActivated(nextHandler, theEvent, userData); if (result == (org.eclipse.swt.internal.carbon.OS.noErr)) return result; int[] outScope = new int[1]; org.eclipse.swt.internal.carbon.OS.GetWindowActivationScope(shellHandle, outScope); if ((outScope[0]) == (org.eclipse.swt.internal.carbon.OS.kWindowActivationScopeNone)) return result; if (!(active)) { active = true; display.setMenuBar(menuBar); if ((menuBar) != null) org.eclipse.swt.internal.carbon.OS.DrawMenuBar(); activate = true; sendEvent(SWT.Activate); if (isDisposed()) return result; if ((!(restoreFocus())) && (!(traverseGroup(true)))) setFocus(); activate = false; } return result; }
void setCairoClip(int damageRgn, int clipRgn) { int cairo = data.cairo; org.eclipse.swt.graphics.Cairo.cairo_reset_clip(cairo); if (damageRgn != 0) { double[] matrix = new double[6]; org.eclipse.swt.graphics.Cairo.cairo_get_matrix(cairo, matrix); org.eclipse.swt.graphics.Cairo.cairo_set_matrix(cairo, identity()); org.eclipse.swt.graphics.GC.setCairoRegion(cairo, damageRgn); org.eclipse.swt.graphics.Cairo.cairo_clip(cairo); org.eclipse.swt.graphics.Cairo.cairo_set_matrix(cairo, matrix); } if (clipRgn != 0) { org.eclipse.swt.graphics.GC.setCairoRegion(cairo, clipRgn); org.eclipse.swt.graphics.Cairo.cairo_clip(cairo); } }
int callPaintEventHandler(int control, int damageRgn, int visibleRgn, int theEvent, int nextHandler) { int[] context = null; if (((style) & (SWT.ARROW)) != 0) { boolean invert = false; if ((OS.VERSION) == 4176) { invert = (((style) & (SWT.UP)) != 0) || (((style) & (SWT.LEFT)) != 0); } else { invert = ((style) & (SWT.UP)) != 0; } if (invert) { context = new int[1]; org.eclipse.swt.widgets.OS.GetEventParameter(theEvent, OS.kEventParamCGContextRef, OS.typeCGContextRef, null, 4, null, context); org.eclipse.swt.widgets.OS.CGContextSaveGState(context[0]); org.eclipse.swt.widgets.CGRect rect = new org.eclipse.swt.widgets.CGRect(); org.eclipse.swt.widgets.OS.HIViewGetBounds(handle, rect); org.eclipse.swt.widgets.OS.CGContextRotateCTM(context[0], ((float) (Compatibility.PI))); org.eclipse.swt.widgets.OS.CGContextTranslateCTM(context[0], (-(rect.width)), (-(rect.height))); } } int result = super.callPaintEventHandler(control, damageRgn, visibleRgn, theEvent, nextHandler); if (context != null) org.eclipse.swt.widgets.OS.CGContextRestoreGState(context[0]); return result; }
protected void layout(org.eclipse.swt.custom.Composite composite, boolean flushCache) { org.eclipse.swt.custom.Control[] children = composite.getChildren(); org.eclipse.swt.custom.Rectangle rect = composite.getClientArea(); rect.x += marginWidth; rect.y += marginHeight; rect.width -= 2 * (marginWidth); rect.height -= 2 * (marginHeight); for (int i = 0; i < (children.length); i++) { children[i].setVisible(((children[i]) == (topControl))); } if ((topControl) != null) topControl.setBounds(rect); }
org.eclipse.swt.widgets.Control findControl(boolean checkTrim, org.eclipse.swt.widgets.NSView[] hitView) { org.eclipse.swt.widgets.NSView view = null; org.eclipse.swt.widgets.NSPoint screenLocation = org.eclipse.swt.widgets.NSEvent.mouseLocation(); if ((OS.VERSION) >= 4192) { int hitWindowNumber = org.eclipse.swt.widgets.NSWindow.windowNumberAtPoint(screenLocation, 0); org.eclipse.swt.widgets.NSWindow window = application.windowWithWindowNumber(hitWindowNumber); if (window != null) { org.eclipse.swt.widgets.NSView contentView = window.contentView(); if (contentView != null) contentView = contentView.superview(); if (contentView != null) { org.eclipse.swt.widgets.NSPoint location = window.convertScreenToBase(screenLocation); view = contentView.hitTest(location); if ((view == null) && (!checkTrim)) { view = contentView; } } } } else { int[] outCount = new int[1]; org.eclipse.swt.widgets.OS.NSCountWindows(outCount); int[] windowIDs = new int[((int) (outCount[0]))]; org.eclipse.swt.widgets.OS.NSWindowList(outCount[0], windowIDs); for (int i = 0, count = windowIDs.length; (i < count) && (view == null); i++) { org.eclipse.swt.widgets.NSWindow window = application.windowWithWindowNumber(windowIDs[i]); if (window != null) { org.eclipse.swt.widgets.NSView contentView = window.contentView(); if (contentView != null) contentView = contentView.superview(); if ((contentView != null) && (org.eclipse.swt.widgets.OS.NSPointInRect(screenLocation, window.frame()))) { org.eclipse.swt.widgets.NSPoint location = window.convertScreenToBase(screenLocation); view = contentView.hitTest(location); if ((view == null) && (!checkTrim)) { view = contentView; } break; } } } } org.eclipse.swt.widgets.Control control = null; if (view != null) { do { org.eclipse.swt.widgets.Widget widget = getWidget(view); if (widget instanceof org.eclipse.swt.widgets.Control) { control = ((org.eclipse.swt.widgets.Control) (widget)); break; } view = view.superview(); } while (view != null ); } if (checkTrim) { if ((control != null) && (control.isTrim(view))) control = null; } if ((control != null) && (hitView != null)) hitView[0] = view; return control; }
int coreEventProc(int theAppleEvent, int reply, int handlerRefcon) { if (!(disposing)) { org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); sendEvent(SWT.Close, event); if (event.doit) { dispose(); } else { return org.eclipse.swt.internal.carbon.OS.userCanceledErr; } } return org.eclipse.swt.internal.carbon.OS.noErr; }
int TranslateAccelerator(int lpMsg, int pguidCmdGroup, int nCmdID) { org.eclipse.swt.browser.Menu menubar = getShell().getMenuBar(); if (((menubar != null) && (!(menubar.isDisposed()))) && (menubar.isEnabled())) { org.eclipse.swt.browser.Shell shell = menubar.getShell(); int hwnd = shell.handle; int hAccel = org.eclipse.swt.browser.OS.SendMessage(hwnd, ((OS.WM_APP) + 1), 0, 0); if (hAccel != 0) { org.eclipse.swt.browser.MSG msg = new org.eclipse.swt.browser.MSG(); org.eclipse.swt.browser.OS.MoveMemory(msg, lpMsg, MSG.sizeof); if ((org.eclipse.swt.browser.OS.TranslateAccelerator(hwnd, hAccel, msg)) != 0) return COM.S_OK; } } return COM.S_FALSE; }
public int Init(int aSource, int aTarget, int aDisplayName, int aMIMEInfo, int startTime1, int startTime2, int aPersist) { org.eclipse.swt.browser.nsIURI source = new org.eclipse.swt.browser.nsIURI(aSource); int aSpec = org.eclipse.swt.browser.XPCOM.nsEmbedCString_new(); source.GetHost(aSpec); int length = org.eclipse.swt.browser.XPCOM.nsEmbedCString_Length(aSpec); int buffer = org.eclipse.swt.browser.XPCOM.nsEmbedCString_get(aSpec); byte[] dest = new byte[length]; org.eclipse.swt.browser.XPCOM.memmove(dest, buffer, length); org.eclipse.swt.browser.XPCOM.nsEmbedCString_delete(aSpec); java.lang.String url = new java.lang.String(dest); org.eclipse.swt.browser.nsILocalFile target = new org.eclipse.swt.browser.nsILocalFile(aTarget); int aNativeTarget = org.eclipse.swt.browser.XPCOM.nsEmbedCString_new(); target.GetNativeLeafName(aNativeTarget); length = org.eclipse.swt.browser.XPCOM.nsEmbedCString_Length(aSpec); buffer = org.eclipse.swt.browser.XPCOM.nsEmbedCString_get(aSpec); dest = new byte[length]; org.eclipse.swt.browser.XPCOM.memmove(dest, buffer, length); org.eclipse.swt.browser.XPCOM.nsEmbedCString_delete(aNativeTarget); java.lang.String file = new java.lang.String(dest); org.eclipse.swt.browser.Listener listener = new org.eclipse.swt.browser.Listener() { public void handleEvent(org.eclipse.swt.browser.Event event) { if ((event.widget) == (cancel)) { shell.close(); } if ((helperAppLauncher) != null) { helperAppLauncher.Cancel(); helperAppLauncher.Release(); } shell = null; helperAppLauncher = null; } }; shell = new org.eclipse.swt.browser.Shell(org.eclipse.swt.SWT.DIALOG_TRIM); shell.setText(((org.eclipse.swt.browser.Download.DOWNLOAD) + file)); org.eclipse.swt.browser.GridLayout gridLayout = new org.eclipse.swt.browser.GridLayout(); gridLayout.marginHeight = 15; gridLayout.marginWidth = 15; gridLayout.verticalSpacing = 20; shell.setLayout(gridLayout); new org.eclipse.swt.browser.Label(shell, org.eclipse.swt.SWT.SIMPLE).setText(((((org.eclipse.swt.browser.Download.SAVING) + file) + (org.eclipse.swt.browser.Download.FROM)) + url)); status = new org.eclipse.swt.browser.Label(shell, org.eclipse.swt.SWT.SIMPLE); status.setText(org.eclipse.swt.browser.Download.DOWNLOAD); org.eclipse.swt.browser.GridData data = new org.eclipse.swt.browser.GridData(); data.grabExcessHorizontalSpace = true; data.grabExcessVerticalSpace = true; status.setLayoutData(data); cancel = new org.eclipse.swt.browser.Button(shell, org.eclipse.swt.SWT.PUSH); cancel.setText(org.eclipse.swt.SWT.getMessage("SWT_Cancel")); data = new org.eclipse.swt.browser.GridData(); data.horizontalAlignment = GridData.CENTER; cancel.setLayoutData(data); cancel.addListener(SWT.Selection, listener); shell.addListener(SWT.Close, listener); shell.pack(); shell.open(); return XPCOM.NS_OK; }
void setItemCount(org.eclipse.swt.widgets.TreeItem parentItem, int count) { int itemCount = getItemCount(parentItem); if (count == itemCount) return; org.eclipse.swt.widgets.TreeItem[] children = (parentItem == null) ? items : parentItem.items; if (count < itemCount) { for (int index = count; index < itemCount; index++) { org.eclipse.swt.widgets.TreeItem item = children[index]; if ((item != null) && (!(item.isDisposed()))) item.release(false); } } if (count > itemCount) { if (((getStyle()) & (SWT.VIRTUAL)) == 0) { for (int i = itemCount; i < count; i++) { new org.eclipse.swt.widgets.TreeItem(this, parentItem, SWT.NONE, i, true); } return; } } int length = java.lang.Math.max(4, (((count + 3) / 4) * 4)); org.eclipse.swt.widgets.TreeItem[] newItems = new org.eclipse.swt.widgets.TreeItem[length]; if (children != null) { java.lang.System.arraycopy(children, 0, newItems, 0, java.lang.Math.min(count, itemCount)); } children = newItems; if (parentItem == null) { this.items = newItems; this.itemCount = count; } else { parentItem.items = newItems; parentItem.itemCount = count; } ((org.eclipse.swt.widgets.NSOutlineView) (view)).reloadItem_reloadChildren_((parentItem != null ? parentItem.handle : null), true); }
public boolean open() { checkWidget(); org.eclipse.swt.widgets.Display display = this.display; cancelled = false; tracking = true; window = ((org.eclipse.swt.widgets.NSWindow) (new org.eclipse.swt.widgets.NSWindow().alloc())); org.eclipse.swt.widgets.NSArray screens = org.eclipse.swt.widgets.NSScreen.screens(); float minX = java.lang.Float.MAX_VALUE; float maxX = java.lang.Float.MIN_VALUE; float minY = java.lang.Float.MAX_VALUE; float maxY = java.lang.Float.MIN_VALUE; int count = ((int) (screens.count())); for (int i = 0; i < count; i++) { org.eclipse.swt.widgets.NSScreen screen = new org.eclipse.swt.widgets.NSScreen(screens.objectAtIndex(i)); org.eclipse.swt.widgets.NSRect frame = screen.frame(); float x1 = frame.x; float x2 = (frame.x) + (frame.width); float y1 = frame.y; float y2 = (frame.y) + (frame.height); if (x1 < minX) minX = x1; if (x2 < minX) minX = x2; if (x1 > maxX) maxX = x1; if (x2 > maxX) maxX = x2; if (y1 < minY) minY = y1; if (y2 < minY) minY = y2; if (y1 > maxY) maxY = y1; if (y2 > maxY) maxY = y2; } org.eclipse.swt.widgets.NSRect frame = new org.eclipse.swt.widgets.NSRect(); frame.x = minX; frame.y = minY; frame.width = maxX - minX; frame.height = maxY - minY; window = window.initWithContentRect(frame, OS.NSBorderlessWindowMask, OS.NSBackingStoreBuffered, false); window.setOpaque(false); window.setLevel(OS.NSStatusWindowLevel); window.setContentView(null); window.setBackgroundColor(org.eclipse.swt.widgets.NSColor.clearColor()); org.eclipse.swt.widgets.NSGraphicsContext context = window.graphicsContext(); org.eclipse.swt.widgets.NSGraphicsContext.static_saveGraphicsState(); org.eclipse.swt.widgets.NSGraphicsContext.setCurrentContext(context); context.setCompositingOperation(OS.NSCompositeClear); frame.x = frame.y = 0; org.eclipse.swt.widgets.NSBezierPath.fillRect(frame); org.eclipse.swt.widgets.NSGraphicsContext.static_restoreGraphicsState(); window.orderFrontRegardless(); drawRectangles(window, rectangles, false); int vStyle = (style) & ((SWT.UP) | (SWT.DOWN)); if ((vStyle == (SWT.UP)) || (vStyle == (SWT.DOWN))) { cursorOrientation |= vStyle; } int hStyle = (style) & ((SWT.LEFT) | (SWT.RIGHT)); if ((hStyle == (SWT.LEFT)) || (hStyle == (SWT.RIGHT))) { cursorOrientation |= hStyle; } org.eclipse.swt.widgets.Point cursorPos; boolean down = false; org.eclipse.swt.widgets.NSApplication application = org.eclipse.swt.widgets.NSApplication.sharedApplication(); org.eclipse.swt.widgets.NSEvent currentEvent = application.currentEvent(); if (currentEvent != null) { switch (((int) (currentEvent.type()))) { case OS.NSLeftMouseDown : case OS.NSLeftMouseDragged : case OS.NSRightMouseDown : case OS.NSRightMouseDragged : case OS.NSOtherMouseDown : case OS.NSOtherMouseDragged : down = true; } } if (down) { cursorPos = display.getCursorLocation(); } else { if (((style) & (SWT.RESIZE)) != 0) { cursorPos = adjustResizeCursor(true); } else { cursorPos = adjustMoveCursor(); } } if (cursorPos != null) { oldX = cursorPos.x; oldY = cursorPos.y; } org.eclipse.swt.widgets.Control oldTrackingControl = display.trackingControl; display.trackingControl = null; while ((tracking) && (!(cancelled))) { display.addPool(); try { org.eclipse.swt.widgets.NSEvent event = application.nextEventMatchingMask(0, org.eclipse.swt.widgets.NSDate.distantFuture(), OS.NSDefaultRunLoopMode, true); if (event == null) continue; int type = ((int) (event.type())); switch (type) { case OS.NSLeftMouseUp : case OS.NSRightMouseUp : case OS.NSOtherMouseUp : case OS.NSMouseMoved : case OS.NSLeftMouseDragged : case OS.NSRightMouseDragged : case OS.NSOtherMouseDragged : mouse(event); break; case OS.NSKeyDown : case OS.NSKeyUp : case OS.NSFlagsChanged : key(event); break; } boolean dispatch = true; switch (type) { case OS.NSLeftMouseDown : case OS.NSLeftMouseUp : case OS.NSRightMouseDown : case OS.NSRightMouseUp : case OS.NSOtherMouseDown : case OS.NSOtherMouseUp : case OS.NSMouseMoved : case OS.NSLeftMouseDragged : case OS.NSRightMouseDragged : case OS.NSOtherMouseDragged : case OS.NSMouseEntered : case OS.NSMouseExited : case OS.NSKeyDown : case OS.NSKeyUp : case OS.NSFlagsChanged : dispatch = false; } if (dispatch) application.sendEvent(event); if (((clientCursor) != null) && ((resizeCursor) == null)) { display.lockCursor = false; clientCursor.handle.set(); display.lockCursor = true; } } finally { display.removePool(); } } if ((resizeCursor) != null) resizeCursor.dispose(); resizeCursor = null; if ((oldTrackingControl != null) && (!(oldTrackingControl.isDisposed()))) { display.trackingControl = oldTrackingControl; } display.setCursor(display.findControl(true)); if (!(isDisposed())) { drawRectangles(window, rectangles, true); } if ((window) != null) window.close(); tracking = false; window = null; return !(cancelled); }
public void setExpanded(boolean expanded) { checkWidget(); if ((items.length) == 0) return; if ((this.expanded) == expanded) return; this.expanded = expanded; if ((tableItem) == null) return; parent.setRedraw(false); for (int i = 0; i < (items.length); i++) { items[i].setVisible(expanded); } org.eclipse.swt.custom.Image image = (expanded) ? parent.getMinusImage() : parent.getPlusImage(); tableItem.setImage(0, image); parent.setRedraw(true); }
org.eclipse.swt.custom.TextLayout getTextLayout(int lineIndex, int orientation, int width, int lineSpacing) { org.eclipse.swt.custom.TextLayout layout = null; if ((styledText) != null) { int topIndex = ((styledText.topIndex) > 0) ? (styledText.topIndex) - 1 : 0; if (((layouts) == null) || (topIndex != (this.topIndex))) { org.eclipse.swt.custom.TextLayout[] newLayouts = new org.eclipse.swt.custom.TextLayout[org.eclipse.swt.custom.StyledTextRenderer.CACHE_SIZE]; if ((layouts) != null) { for (int i = 0; i < (layouts.length); i++) { if ((layouts[i]) != null) { int layoutIndex = (i + (this.topIndex)) - topIndex; if ((0 <= layoutIndex) && (layoutIndex < (newLayouts.length))) { newLayouts[layoutIndex] = layouts[i]; } else { layouts[i].dispose(); } } } } if ((((bullets) != null) && ((bulletsIndices) != null)) && (topIndex != (this.topIndex))) { int delta = topIndex - (this.topIndex); if (delta > 0) { if (delta < (bullets.length)) { java.lang.System.arraycopy(bullets, delta, bullets, 0, ((bullets.length) - delta)); java.lang.System.arraycopy(bulletsIndices, delta, bulletsIndices, 0, ((bulletsIndices.length) - delta)); } int startIndex = java.lang.Math.max(0, ((bullets.length) - delta)); for (int i = startIndex; i < (bullets.length); i++) bullets[i] = null; } else { if ((-delta) < (bullets.length)) { java.lang.System.arraycopy(bullets, 0, bullets, (-delta), ((bullets.length) + delta)); java.lang.System.arraycopy(bulletsIndices, 0, bulletsIndices, (-delta), ((bulletsIndices.length) + delta)); } int endIndex = java.lang.Math.min(bullets.length, (-delta)); for (int i = 0; i < endIndex; i++) bullets[i] = null; } } this.topIndex = topIndex; layouts = newLayouts; } if ((layouts) != null) { int layoutIndex = lineIndex - topIndex; if ((0 <= layoutIndex) && (layoutIndex < (layouts.length))) { layout = layouts[layoutIndex]; if (layout != null) { if ((lineWidth[lineIndex]) != (-1)) return layout; } else { layout = layouts[layoutIndex] = new org.eclipse.swt.custom.TextLayout(device); } } } } if (layout == null) layout = new org.eclipse.swt.custom.TextLayout(device); java.lang.String line = content.getLine(lineIndex); int lineOffset = content.getOffsetAtLine(lineIndex); int[] segments = null; int indent = 0; int alignment = org.eclipse.swt.SWT.LEFT; boolean justify = false; org.eclipse.swt.custom.Bullet bullet = null; int[] ranges = null; org.eclipse.swt.custom.StyleRange[] styles = null; int rangeStart = 0; int styleCount = 0; org.eclipse.swt.custom.StyledTextEvent event = null; if ((styledText) != null) { event = styledText.getLineStyleData(lineOffset, line); segments = styledText.getBidiSegments(lineOffset, line); indent = styledText.indent; alignment = styledText.alignment; justify = styledText.justify; } if (event != null) { indent = event.indent; alignment = event.alignment; justify = event.justify; bullet = event.bullet; ranges = event.ranges; styles = event.styles; if (styles != null) { styleCount = styles.length; if (styledText.isFixedLineHeight()) { for (int i = 0; i < styleCount; i++) { if (styles[i].isVariableHeight()) { styledText.verticalScrollOffset = -1; styledText.setVariableLineHeight(); styledText.redraw(); break; } } } } if (((bullets) == null) || ((bulletsIndices) == null)) { bullets = new org.eclipse.swt.custom.Bullet[org.eclipse.swt.custom.StyledTextRenderer.CACHE_SIZE]; bulletsIndices = new int[org.eclipse.swt.custom.StyledTextRenderer.CACHE_SIZE]; } int index = lineIndex - (topIndex); if ((0 <= index) && (index < (org.eclipse.swt.custom.StyledTextRenderer.CACHE_SIZE))) { bullets[index] = bullet; bulletsIndices[index] = event.bulletIndex; } } else { if ((lines) != null) { org.eclipse.swt.custom.StyledTextRenderer.LineInfo info = lines[lineIndex]; if (info != null) { if (((info.flags) & (org.eclipse.swt.custom.StyledTextRenderer.INDENT)) != 0) indent = info.indent; if (((info.flags) & (org.eclipse.swt.custom.StyledTextRenderer.ALIGNMENT)) != 0) alignment = info.alignment; if (((info.flags) & (org.eclipse.swt.custom.StyledTextRenderer.JUSTIFY)) != 0) justify = info.justify; if (((info.flags) & (org.eclipse.swt.custom.StyledTextRenderer.SEGMENTS)) != 0) segments = info.segments; } } if ((bulletsIndices) != null) { bullets = null; bulletsIndices = null; } if ((bullets) != null) { for (int i = 0; i < (bullets.length); i++) { if ((bullets[i].indexOf(lineIndex)) != (-1)) { bullet = bullets[i]; break; } } } ranges = this.ranges; styles = this.styles; styleCount = this.styleCount; if (ranges != null) { rangeStart = getRangeIndex(lineOffset, (-1), (styleCount << 1)); } else { rangeStart = getRangeIndex(lineOffset, (-1), styleCount); } } if (bullet != null) { org.eclipse.swt.custom.StyleRange style = bullet.style; org.eclipse.swt.custom.GlyphMetrics metrics = style.metrics; indent += metrics.width; } layout.setFont(regularFont); layout.setAscent(ascent); layout.setDescent(descent); layout.setText(line); layout.setOrientation(orientation); layout.setSegments(segments); layout.setWidth(width); layout.setSpacing(lineSpacing); layout.setTabs(new int[]{ tabWidth }); layout.setIndent(indent); layout.setAlignment(alignment); layout.setJustify(justify); int lastOffset = 0; int length = line.length(); if (styles != null) { if (ranges != null) { int rangeCount = styleCount << 1; for (int i = rangeStart; i < rangeCount; i += 2) { int start; int end; if (lineOffset > (ranges[i])) { start = 0; end = java.lang.Math.min(length, (((ranges[(i + 1)]) - lineOffset) + (ranges[i]))); } else { start = (ranges[i]) - lineOffset; end = java.lang.Math.min(length, (start + (ranges[(i + 1)]))); } if (start >= length) break; if (lastOffset < start) { layout.setStyle(null, lastOffset, (start - 1)); } layout.setStyle(getStyleRange(styles[(i >> 1)]), start, end); lastOffset = java.lang.Math.max(lastOffset, end); } } else { for (int i = rangeStart; i < styleCount; i++) { int start; int end; if (lineOffset > (styles[i].start)) { start = 0; end = java.lang.Math.min(length, (((styles[i].length) - lineOffset) + (styles[i].start))); } else { start = (styles[i].start) - lineOffset; end = java.lang.Math.min(length, (start + (styles[i].length))); } if (start >= length) break; if (lastOffset < start) { layout.setStyle(null, lastOffset, (start - 1)); } layout.setStyle(getStyleRange(styles[i]), start, end); lastOffset = java.lang.Math.max(lastOffset, end); } } } if (lastOffset < length) layout.setStyle(null, lastOffset, length); if (styledText.isFixedLineHeight()) { int height = layout.getBounds().height; if (height > (getLineHeight())) { org.eclipse.swt.custom.FontMetrics metrics = layout.getLineMetrics(0); ascent = (metrics.getAscent()) + (metrics.getLeading()); descent = metrics.getDescent(); if ((layouts) != null) { for (int i = 0; i < (layouts.length); i++) { if (((layouts[i]) != null) && ((layouts[i]) != layout)) { layouts[i].setAscent(ascent); layouts[i].setDescent(descent); } } } if ((styledText.verticalScrollOffset) != 0) { int topIndex = styledText.topIndex; int topIndexY = styledText.topIndexY; int lineHeight = getLineHeight(); if (topIndexY >= 0) { styledText.verticalScrollOffset = (((topIndex - 1) * lineHeight) + lineHeight) - topIndexY; } else { styledText.verticalScrollOffset = (topIndex * lineHeight) - topIndexY; } } if (styledText.isBidiCaret()) { styledText.createCaretBitmaps(); styledText.caretDirection = org.eclipse.swt.SWT.NULL; } styledText.setCaretLocation(); styledText.redraw(); } } return layout; }
void createHandle() { if (((style) & (SWT.PUSH)) == 0) state |= THEME_BACKGROUND; org.eclipse.swt.widgets.NSButton widget = ((org.eclipse.swt.widgets.NSButton) (new org.eclipse.swt.widgets.SWTButton().alloc())); widget.init(); org.eclipse.swt.widgets.NSButtonCell cell = ((org.eclipse.swt.widgets.NSButtonCell) (new org.eclipse.swt.widgets.SWTButtonCell().alloc().init())); widget.setCell(cell); cell.release(); int type = OS.NSMomentaryLightButton; if (((style) & (SWT.PUSH)) != 0) { boolean flat = ((style) & (SWT.FLAT)) != 0; if (!flat) { org.eclipse.swt.widgets.NSView superview = widget.superview(); while (superview != null) { if (superview.isKindOfClass(OS.class_NSTableView)) { flat = true; break; } superview = superview.superview(); } } if (flat) { widget.setBezelStyle(OS.NSShadowlessSquareBezelStyle); } else { widget.setBezelStyle(OS.NSRoundedBezelStyle); } } else if (((style) & (SWT.CHECK)) != 0) { type = OS.NSSwitchButton; } else if (((style) & (SWT.RADIO)) != 0) { type = OS.NSRadioButton; } else if (((style) & (SWT.TOGGLE)) != 0) { type = OS.NSPushOnPushOffButton; if (((style) & (SWT.FLAT)) != 0) { widget.setBezelStyle(OS.NSShadowlessSquareBezelStyle); } else { widget.setBezelStyle(OS.NSRoundedBezelStyle); } } else if (((style) & (SWT.ARROW)) != 0) { widget.setBezelStyle(OS.NSShadowlessSquareBezelStyle); } widget.setButtonType(type); widget.setTitle(org.eclipse.swt.widgets.NSString.stringWith("")); widget.setImagePosition(OS.NSImageLeft); widget.setTarget(widget); widget.setAction(OS.sel_sendSelection); view = widget; _setAlignment(style); }
int getCaretPosition(int logicalOffset, int direction) { int caretX; if (((getTextLength()) == 0) || (logicalOffset < 0)) { return StyledText.XINSET; } if (logicalOffset >= (order.length)) { logicalOffset = java.lang.Math.min(logicalOffset, ((order.length) - 1)); int visualOffset = order[logicalOffset]; if (isRightToLeft(logicalOffset)) { caretX = renderPositions[visualOffset]; } else { caretX = (renderPositions[visualOffset]) + (dx[visualOffset]); } } else if (logicalOffset == 0) { int visualOffset = order[logicalOffset]; if (isRightToLeft(logicalOffset)) { caretX = (renderPositions[visualOffset]) + (dx[visualOffset]); } else { caretX = renderPositions[visualOffset]; } } else if ((direction == (ST.COLUMN_NEXT)) && ((((isRightToLeft(logicalOffset)) != (isRightToLeft((logicalOffset - 1)))) || ((isLocalNumber(logicalOffset)) != (isLocalNumber((logicalOffset - 1))))) || (isStartOfBidiSegment(logicalOffset)))) { int visualOffset = order[(logicalOffset - 1)]; if (isRightToLeft((logicalOffset - 1))) { caretX = renderPositions[visualOffset]; } else { caretX = (renderPositions[visualOffset]) + (dx[visualOffset]); } } else if ((direction == (ST.COLUMN_PREVIOUS)) && ((isRightToLeftInput(logicalOffset)) != (isRightToLeftInput((logicalOffset - 1))))) { int visualOffset = order[logicalOffset]; if (isRightToLeftInput((logicalOffset - 1))) { caretX = renderPositions[visualOffset]; } else { caretX = (renderPositions[visualOffset]) + (dx[visualOffset]); } } else if (isRightToLeft(logicalOffset)) { int visualOffset = order[logicalOffset]; caretX = (renderPositions[visualOffset]) + (dx[visualOffset]); } else { caretX = renderPositions[order[logicalOffset]]; } return caretX; }
int gtk_hide(int widget) { if (((style) & (SWT.POP_UP)) != 0) { display.activeShell = getShell(); } if ((OS.GTK_VERSION) >= (org.eclipse.swt.widgets.OS.VERSION(2, 6, 0))) { sendEvent(SWT.Hide); } else { postEvent(SWT.Hide); } return 0; }
protected int getStyledTextWidth(java.lang.String text, int textStartOffset, org.eclipse.swt.custom.StyleRange[] lineStyles, int paintX, org.eclipse.swt.custom.GC gc) { java.lang.String textSegment; int textLength = text.length(); int textIndex = 0; org.eclipse.swt.custom.GC boldGC = null; org.eclipse.swt.custom.GC normalGC = null; int fontStyle = getCurrentFontStyle(); if (fontStyle == (org.eclipse.swt.SWT.NORMAL)) normalGC = gc; else boldGC = gc; for (int styleIndex = 0; styleIndex < (lineStyles.length); styleIndex++) { org.eclipse.swt.custom.StyleRange style = lineStyles[styleIndex]; int textEnd; int styleSegmentStart = (style.start) - textStartOffset; if ((styleSegmentStart + (style.length)) < 0) { continue; } if ((textIndex > 0) && (styleSegmentStart < textIndex)) { continue; } if (styleSegmentStart >= textLength) { break; } if (textIndex < styleSegmentStart) { textSegment = text.substring(textIndex, styleSegmentStart); if (normalGC == null) { normalGC = getGC(); normalGC.setFont(regularFont); } paintX += normalGC.stringExtent(textSegment).x; textIndex = styleSegmentStart; } textEnd = java.lang.Math.min(textLength, (styleSegmentStart + (style.length))); textSegment = text.substring(textIndex, textEnd); if ((style.fontStyle) == (org.eclipse.swt.SWT.NORMAL)) { if (normalGC == null) { normalGC = getGC(); normalGC.setFont(regularFont); } paintX += normalGC.stringExtent(textSegment).x; } else { if (boldGC == null) { boldGC = getGC(); boldGC.setFont(boldFont); } paintX += boldGC.stringExtent(textSegment).x; } textIndex = textEnd; } if (textIndex < textLength) { textSegment = text.substring(textIndex, textLength); if (normalGC == null) { normalGC = getGC(); normalGC.setFont(regularFont); } paintX += normalGC.stringExtent(textSegment).x; } if (fontStyle == (org.eclipse.swt.SWT.NORMAL)) { if (boldGC != null) disposeGC(boldGC); } else { if (normalGC != null) disposeGC(normalGC); } return paintX; }
public SelectionEvent(org.eclipse.swt.events.Event e) { super(e); this.item = e.item; this.x = e.x; this.y = e.y; this.width = e.width; this.height = e.height; this.detail = e.detail; this.stateMask = e.stateMask; this.text = e.text; this.doit = e.doit; }
public org.eclipse.swt.widgets.Image getImage(int index) { checkWidget(); if (!((0 <= index) && (index <= (parent.columnCount)))) return null; if (index == 0) return super.getImage(); int parentHandle = parent.handle; int column = org.eclipse.swt.widgets.OS.gtk_tree_view_get_column(parentHandle, index); if (column == 0) return null; int[] ptr = new int[1]; int modelIndex = ((parent.columnCount) == 0) ? Table.FIRST_COLUMN : parent.columns[index].modelIndex; org.eclipse.swt.widgets.OS.gtk_tree_model_get(parent.modelHandle, handle, modelIndex, ptr, (-1)); if ((ptr[0]) == 0) return null; org.eclipse.swt.widgets.ImageList imageList = parent.imageList; int imageIndex = imageList.indexOf(ptr[0]); if (imageIndex == (-1)) return null; return imageList.get(imageIndex); }
public ImageList(int style) { this.style = style; int flags = OS.ILC_MASK; if (OS.IsWinCE) { flags |= OS.ILC_COLOR; } else { if (((OS.COMCTL32_MAJOR) >= 6) && (org.eclipse.swt.widgets.OS.IsAppThemed())) { flags |= OS.ILC_COLOR32; } else { int hDC = org.eclipse.swt.widgets.OS.GetDC(0); int bits = org.eclipse.swt.widgets.OS.GetDeviceCaps(hDC, OS.BITSPIXEL); int planes = org.eclipse.swt.widgets.OS.GetDeviceCaps(hDC, OS.PLANES); org.eclipse.swt.widgets.OS.ReleaseDC(0, hDC); int depth = bits * planes; switch (depth) { case 4 : flags |= OS.ILC_COLOR4; break; case 8 : flags |= OS.ILC_COLOR8; break; case 16 : flags |= OS.ILC_COLOR16; break; case 24 : flags |= OS.ILC_COLOR24; break; case 32 : flags |= OS.ILC_COLOR32; break; default : flags |= OS.ILC_COLOR; break; } } } if ((style & (SWT.RIGHT_TO_LEFT)) != 0) flags |= OS.ILC_MIRROR; handle = org.eclipse.swt.widgets.OS.ImageList_Create(32, 32, flags, 16, 16); images = new org.eclipse.swt.widgets.Image[4]; }
public void timerExec(int milliseconds, java.lang.Runnable runnable) { checkDevice(); if (runnable == null) error(SWT.ERROR_NULL_ARGUMENT); if ((timerList) == null) timerList = new java.lang.Runnable[4]; if ((nsTimers) == null) nsTimers = new org.eclipse.swt.widgets.NSTimer[4]; int index = 0; while (index < (timerList.length)) { if ((timerList[index]) == runnable) break; index++; } if (index != (timerList.length)) { org.eclipse.swt.widgets.NSTimer timer = nsTimers[index]; if (timer == null) { timerList[index] = null; } else { if (milliseconds < 0) { timer.invalidate(); timer.release(); timerList[index] = null; nsTimers[index] = null; } else { timer.setFireDate(org.eclipse.swt.widgets.NSDate.dateWithTimeIntervalSinceNow((milliseconds / 1000.0))); } return; } } if (milliseconds < 0) return; index = 0; while (index < (timerList.length)) { if ((timerList[index]) == null) break; index++; } if (index == (timerList.length)) { java.lang.Runnable[] newTimerList = new java.lang.Runnable[(timerList.length) + 4]; java.lang.System.arraycopy(timerList, 0, newTimerList, 0, timerList.length); timerList = newTimerList; org.eclipse.swt.widgets.NSTimer[] newTimerIds = new org.eclipse.swt.widgets.NSTimer[(nsTimers.length) + 4]; java.lang.System.arraycopy(nsTimers, 0, newTimerIds, 0, nsTimers.length); nsTimers = newTimerIds; } org.eclipse.swt.widgets.NSNumber userInfo = org.eclipse.swt.widgets.NSNumber.numberWithInt(index); org.eclipse.swt.widgets.NSTimer timer = org.eclipse.swt.widgets.NSTimer.scheduledTimerWithTimeInterval((milliseconds / 1000.0), timerDelegate, OS.sel_timerProc_, userInfo, false); org.eclipse.swt.widgets.NSRunLoop.currentRunLoop().addTimer(timer, OS.NSEventTrackingRunLoopMode); timer.retain(); if (timer != null) { nsTimers[index] = timer; timerList[index] = runnable; } }
void setUnicode() { final java.lang.String Win95 = "windows 95"; final java.lang.String Win98 = "windows 98"; final java.lang.String WinME = "windows me"; final java.lang.String WinNT = "windows nt"; java.lang.String osName = java.lang.System.getProperty("os.name").toLowerCase(); java.lang.String osVersion = java.lang.System.getProperty("os.version"); int majorVersion = 0; if ((osName.startsWith(WinNT)) && (osVersion != null)) { int majorIndex = osVersion.indexOf('.'); if (majorIndex != (-1)) { osVersion = osVersion.substring(0, majorIndex); try { majorVersion = java.lang.Integer.parseInt(osVersion); } catch (java.lang.NumberFormatException exception) { } } } if (((((osName != null) && ((osName.startsWith(Win95)) == false)) && ((osName.startsWith(Win98)) == false)) && ((osName.startsWith(WinME)) == false)) && (((osName.startsWith(WinNT)) == false) || (majorVersion > 4))) { WriteUnicode = true; } else { WriteUnicode = false; } }
public void drawFocus(int x, int y, int width, int height) { if ((handle) == 0) org.eclipse.swt.graphics.SWT.error(SWT.ERROR_GRAPHIC_DISPOSED); org.eclipse.swt.graphics.GtkStyle style = new org.eclipse.swt.graphics.GtkStyle(); org.eclipse.swt.graphics.OS.memmove(style, org.eclipse.swt.graphics.OS.gtk_widget_get_default_style()); org.eclipse.swt.graphics.GdkColor color = new org.eclipse.swt.graphics.GdkColor(); color.pixel = style.fg0_pixel; color.red = style.fg0_red; color.green = style.fg0_green; color.blue = style.fg0_blue; org.eclipse.swt.graphics.GdkGCValues values = new org.eclipse.swt.graphics.GdkGCValues(); org.eclipse.swt.graphics.OS.gdk_gc_get_values(handle, values); org.eclipse.swt.graphics.OS.gdk_gc_set_foreground(handle, color); org.eclipse.swt.graphics.OS.gdk_draw_rectangle(data.drawable, handle, 0, x, y, width, height); color.pixel = values.foreground_pixel; color.red = values.foreground_red; color.green = values.foreground_green; color.blue = values.foreground_blue; org.eclipse.swt.graphics.OS.gdk_gc_set_foreground(handle, color); }
org.eclipse.swt.accessibility.AccessibleObject getChildByID(int childId) { if (childId == (ACC.CHILDID_SELF)) return this; if ((childId == (ACC.CHILDID_NONE)) || (childId == (ACC.CHILDID_MULTIPLE))) return null; if ((children) != null) { for (int i = 0; i < (children.length); i++) { org.eclipse.swt.accessibility.AccessibleObject child = children[i]; if ((child != null) && ((child.id) == childId)) return child; } } return null; }
public org.eclipse.swt.custom.Point computeSize(int wHint, int hHint, boolean changed) { checkWidget(); int lineCount = (((getStyle()) & (SWT.SINGLE)) != 0) ? 1 : content.getLineCount(); int width = 0; int height = 0; if ((wHint == (SWT.DEFAULT)) || (hHint == (SWT.DEFAULT))) { org.eclipse.swt.custom.Display display = getDisplay(); int maxHeight = display.getClientArea().height; for (int lineIndex = 0; lineIndex < lineCount; lineIndex++) { org.eclipse.swt.custom.TextLayout layout = renderer.getTextLayout(lineIndex); int wrapWidth = layout.getWidth(); if (wordWrap) layout.setWidth((wHint == 0 ? 1 : wHint)); org.eclipse.swt.custom.Rectangle rect = layout.getBounds(); height += rect.height; width = java.lang.Math.max(width, rect.width); layout.setWidth(wrapWidth); renderer.disposeTextLayout(layout); if ((isFixedLineHeight()) && (height > maxHeight)) break; } if (isFixedLineHeight()) { height = lineCount * (renderer.getLineHeight()); } } if (width == 0) width = org.eclipse.swt.custom.StyledText.DEFAULT_WIDTH; if (height == 0) height = org.eclipse.swt.custom.StyledText.DEFAULT_HEIGHT; if (wHint != (SWT.DEFAULT)) width = wHint; if (hHint != (SWT.DEFAULT)) height = hHint; int wTrim = ((leftMargin) + (rightMargin)) + (getCaretWidth()); int hTrim = (topMargin) + (bottomMargin); org.eclipse.swt.custom.Rectangle rect = computeTrim(0, 0, (width + wTrim), (height + hTrim)); return new org.eclipse.swt.custom.Point(rect.width, rect.height); }
void gtk_render_check(long style, long window, int state_type, int shadow_type, long widget, byte[] detail, int x, int y, int width, int height) { if ((OS.GTK_VERSION) >= (org.eclipse.swt.internal.theme.OS.VERSION(3, 0, 0))) { long cairo = org.eclipse.swt.internal.theme.OS.gdk_cairo_create(window); long context = org.eclipse.swt.internal.theme.OS.gtk_widget_get_style_context(style); org.eclipse.swt.internal.theme.OS.gtk_render_check(context, cairo, context, y, width, height); org.eclipse.swt.internal.cairo.Cairo.cairo_destroy(cairo); } else { org.eclipse.swt.internal.theme.OS.gtk_paint_check(style, window, state_type, shadow_type, null, widget, detail, x, y, width, height); } }
public int getCaretLineNumber() { checkWidget(); if (((style) & (SWT.SINGLE)) != 0) return 1; byte[] position = new byte[org.eclipse.swt.widgets.Text.ITER_SIZEOF]; int mark = org.eclipse.swt.widgets.OS.gtk_text_buffer_get_insert(bufferHandle); org.eclipse.swt.widgets.OS.gtk_text_buffer_get_iter_at_mark(bufferHandle, position, mark); return org.eclipse.swt.widgets.OS.gtk_text_iter_get_line(position); }
int kEventTextInputUnicodeForKeyEvent(int nextHandler, int theEvent, int userData) { int[] keyboardEvent = new int[1]; org.eclipse.swt.internal.carbon.OS.GetEventParameter(theEvent, OS.kEventParamTextInputSendKeyboardEvent, OS.typeEventRef, null, ((keyboardEvent.length) * 4), null, keyboardEvent); int[] keyCode = new int[1]; org.eclipse.swt.internal.carbon.OS.GetEventParameter(keyboardEvent[0], OS.kEventParamKeyCode, OS.typeUInt32, null, ((keyCode.length) * 4), null, keyCode); boolean[] consume = new boolean[1]; if (translateTraversal(keyCode[0], keyboardEvent[0], consume)) return org.eclipse.swt.internal.carbon.OS.noErr; if (isDisposed()) return org.eclipse.swt.internal.carbon.OS.noErr; if ((keyCode[0]) == 114) { org.eclipse.swt.widgets.Control control = this; while (control != null) { if (control.hooks(SWT.Help)) { control.postEvent(SWT.Help); break; } control = control.parent; } } int result = kEventUnicodeKeyPressed(nextHandler, theEvent, userData); if ((result == (org.eclipse.swt.internal.carbon.OS.noErr)) || (consume[0])) return org.eclipse.swt.internal.carbon.OS.noErr; if (!(isDisposed())) { org.eclipse.swt.widgets.Control focusControl = display.getFocusControl(); if (focusControl != (this)) { int window = org.eclipse.swt.internal.carbon.OS.GetControlOwner(handle); int newWindow = 0; if (focusControl != null) { newWindow = org.eclipse.swt.internal.carbon.OS.GetControlOwner(focusControl.handle); } display.ignoreFocus = true; if (window != newWindow) org.eclipse.swt.internal.carbon.OS.SetUserFocusWindow(window); org.eclipse.swt.internal.carbon.OS.SetKeyboardFocus(window, focusHandle(), ((short) (focusPart()))); display.ignoreFocus = false; result = org.eclipse.swt.internal.carbon.OS.CallNextEventHandler(nextHandler, theEvent); display.ignoreFocus = true; if ((window != newWindow) && (newWindow != 0)) org.eclipse.swt.internal.carbon.OS.SetUserFocusWindow(newWindow); if ((window == newWindow) && (focusControl != null)) { org.eclipse.swt.internal.carbon.OS.SetKeyboardFocus(window, focusControl.focusHandle(), ((short) (focusControl.focusPart()))); } else { org.eclipse.swt.internal.carbon.OS.ClearKeyboardFocus(window); } display.ignoreFocus = false; return org.eclipse.swt.internal.carbon.OS.noErr; } } return result; }
org.eclipse.swt.accessibility.id getStringForRangeAttribute(org.eclipse.swt.accessibility.id parameter, int childID) { org.eclipse.swt.accessibility.id returnValue = null; org.eclipse.swt.accessibility.NSValue parameterObject = new org.eclipse.swt.accessibility.NSValue(parameter.id); org.eclipse.swt.accessibility.NSRange range = parameterObject.rangeValue(); org.eclipse.swt.accessibility.AccessibleControlEvent event = new org.eclipse.swt.accessibility.AccessibleControlEvent(this); event.childID = childID; event.result = null; for (int i = 0; i < (accessibleControlListeners.size()); i++) { org.eclipse.swt.accessibility.AccessibleControlListener listener = ((org.eclipse.swt.accessibility.AccessibleControlListener) (accessibleControlListeners.elementAt(i))); listener.getValue(event); } java.lang.String appValue = event.result; if (appValue != null) { returnValue = org.eclipse.swt.accessibility.NSString.stringWith(appValue.substring(range.location, ((range.location) + (range.length)))); } return returnValue; }
public static java.awt.Frame new_Frame(final org.eclipse.swt.widgets.Composite parent) { if (parent == null) org.eclipse.swt.SWT.error(SWT.ERROR_NULL_ARGUMENT); if (((parent.getStyle()) & (org.eclipse.swt.SWT.EMBEDDED)) == 0) { org.eclipse.swt.SWT.error(SWT.ERROR_INVALID_ARGUMENT); } final int handle = parent.handle; java.lang.Class clazz = null; try { java.lang.String className = ((org.eclipse.swt.awt.SWT_AWT.embeddedFrameClass) != null) ? org.eclipse.swt.awt.SWT_AWT.embeddedFrameClass : "apple.awt.CHIViewEmbeddedFrame"; if ((org.eclipse.swt.awt.SWT_AWT.embeddedFrameClass) == null) { clazz = java.lang.Class.forName(className, true, java.lang.ClassLoader.getSystemClassLoader()); } else { clazz = java.lang.Class.forName(className); } } catch (java.lang.Throwable e) { org.eclipse.swt.SWT.error(SWT.ERROR_NOT_IMPLEMENTED, e, " [need SWT compatibility pack from Apple]"); } java.lang.Object value = null; java.lang.reflect.Constructor constructor = null; try { constructor = clazz.getConstructor(new java.lang.Class[]{ long.class }); value = constructor.newInstance(new java.lang.Object[]{ new java.lang.Long(handle) }); } catch (java.lang.Throwable e) { org.eclipse.swt.SWT.error(SWT.ERROR_NOT_IMPLEMENTED, e); } final java.awt.Frame frame = ((java.awt.Frame) (value)); parent.setData(org.eclipse.swt.awt.SWT_AWT.EMBEDDED_FRAME_KEY, frame); org.eclipse.swt.widgets.Listener listener = new org.eclipse.swt.widgets.Listener() { public void handleEvent(org.eclipse.swt.widgets.Event e) { switch (e.type) { case org.eclipse.swt.SWT.Dispose : { parent.setVisible(false); java.awt.EventQueue.invokeLater(new java.lang.Runnable() { public void run() { frame.dispose(); } }); break; } } } }; parent.addListener(SWT.Dispose, listener); return frame; }
public void select(int index) { checkWidget(); int itemCount = _getItemCount(); if (!((0 <= index) && (index < itemCount))) { error(SWT.ERROR_INVALID_RANGE); } if ((menuHandle) != 0) { int selected = (org.eclipse.swt.widgets.OS.GetControlValue(handle)) - 1; if (index != selected) { org.eclipse.swt.widgets.OS.SetControl32BitValue(handle, (index + 1)); sendEvent(SWT.Modify); } } else { java.lang.String string = _getItem(index); _setText(string); _selectAll(); } }
int setBounds(int x, int y, int width, int height, boolean move, boolean resize) { int newHeight = height; if (resize) newHeight = java.lang.Math.max(getTextHeight(), height); return super.setBounds(x, y, width, newHeight, move, resize); }
public int internal_new_GC(org.eclipse.swt.widgets.GCData data) { checkWidget(); int context = 0; if ((data != null) && ((data.paintRect) != null)) { context = org.eclipse.swt.widgets.NSGraphicsContext.currentContext().id; } else { org.eclipse.swt.widgets.NSGraphicsContext graphicsContext = org.eclipse.swt.widgets.NSGraphicsContext.graphicsContextWithWindow(view.window()); org.eclipse.swt.widgets.NSGraphicsContext flippedContext = org.eclipse.swt.widgets.NSGraphicsContext.graphicsContextWithGraphicsPort(graphicsContext.graphicsPort(), true); graphicsContext = flippedContext; display.addContext(graphicsContext); context = graphicsContext.id; } if (data != null) { int mask = (SWT.LEFT_TO_RIGHT) | (SWT.RIGHT_TO_LEFT); if (((data.style) & mask) == 0) { data.style |= (style) & (mask | (SWT.MIRRORED)); } data.device = display; data.thread = display.thread; data.view = view; data.foreground = getForegroundColor().handle; org.eclipse.swt.widgets.Control control = findBackgroundControl(); if (control == null) control = this; data.background = control.getBackgroundColor().handle; data.font = ((font) != null) ? font : defaultFont(); } return context; }
void handleKey(org.eclipse.swt.custom.Event event) { int action; if ((event.keyCode) != 0) { action = getKeyBinding(((event.keyCode) | (event.stateMask))); } else { action = getKeyBinding(((event.character) | (event.stateMask))); } if (action == (SWT.NULL)) { if (((((((event.character) > 31) && ((event.character) != (SWT.DEL))) && ((event.stateMask) != (SWT.ALT))) || ((event.character) == (SWT.CR))) || ((event.character) == (SWT.LF))) || ((event.character) == (org.eclipse.swt.custom.StyledText.TAB))) { doContent(event.character); } } else { invokeAction(action); } }
void updateScrollBarValue(org.eclipse.swt.widgets.ScrollBar bar) { parent.redrawBackgroundImage(); }
public void create(org.eclipse.swt.browser.Composite parent, int style) { delegate = new org.eclipse.swt.browser.MozillaDelegate(browser); org.eclipse.swt.browser.Display display = parent.getDisplay(); int[] result = new int[1]; if (!(org.eclipse.swt.browser.Mozilla.Initialized)) { boolean initLoaded = false; org.eclipse.swt.browser.Mozilla.IsXULRunner = false; java.lang.String mozillaPath = java.lang.System.getProperty(org.eclipse.swt.browser.Mozilla.XULRUNNER_PATH); if (mozillaPath == null) { try { org.eclipse.swt.browser.Library.loadLibrary("swt-xpcominit"); initLoaded = true; } catch (java.lang.UnsatisfiedLinkError e) { try { org.eclipse.swt.browser.Library.loadLibrary("swt-xpcominit-gcc3"); initLoaded = true; } catch (java.lang.UnsatisfiedLinkError ex) { } } } else { mozillaPath += (org.eclipse.swt.browser.Mozilla.SEPARATOR_OS) + (delegate.getLibraryName()); java.lang.String xulrunnerInitialized = java.lang.System.getProperty(org.eclipse.swt.browser.Mozilla.XULRUNNER_INITIALIZED); if ("true".equals(xulrunnerInitialized)) { org.eclipse.swt.browser.Mozilla.Initialized = true; } org.eclipse.swt.browser.Mozilla.IsXULRunner = true; } if (initLoaded) { org.eclipse.swt.browser.GREVersionRange range = new org.eclipse.swt.browser.GREVersionRange(); byte[] bytes = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.GRERANGE_LOWER, true); int lower = org.eclipse.swt.browser.C.malloc(bytes.length); org.eclipse.swt.browser.C.memmove(lower, bytes, bytes.length); range.lower = lower; range.lowerInclusive = org.eclipse.swt.browser.Mozilla.LowerRangeInclusive; bytes = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.GRERANGE_UPPER, true); int upper = org.eclipse.swt.browser.C.malloc(bytes.length); org.eclipse.swt.browser.C.memmove(upper, bytes, bytes.length); range.upper = upper; range.upperInclusive = org.eclipse.swt.browser.Mozilla.UpperRangeInclusive; int length = XPCOMInit.PATH_MAX; int greBuffer = org.eclipse.swt.browser.C.malloc(length); int propertiesPtr = org.eclipse.swt.browser.C.malloc((2 * (C.PTR_SIZEOF))); int rc = org.eclipse.swt.browser.XPCOMInit.GRE_GetGREPathWithProperties(range, 1, propertiesPtr, 0, greBuffer, length); if (rc != (XPCOM.NS_OK)) { org.eclipse.swt.browser.C.free(lower); bytes = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.GRERANGE_LOWER_FALLBACK, true); lower = org.eclipse.swt.browser.C.malloc(bytes.length); org.eclipse.swt.browser.C.memmove(lower, bytes, bytes.length); range.lower = lower; rc = org.eclipse.swt.browser.XPCOMInit.GRE_GetGREPathWithProperties(range, 1, propertiesPtr, 0, greBuffer, length); } org.eclipse.swt.browser.C.free(lower); org.eclipse.swt.browser.C.free(upper); org.eclipse.swt.browser.C.free(propertiesPtr); if (rc == (XPCOM.NS_OK)) { length = org.eclipse.swt.browser.C.strlen(greBuffer); bytes = new byte[length]; org.eclipse.swt.browser.C.memmove(bytes, greBuffer, length); mozillaPath = new java.lang.String(org.eclipse.swt.browser.MozillaDelegate.mbcsToWcs(null, bytes)); org.eclipse.swt.browser.Mozilla.IsXULRunner = (mozillaPath.length()) > 0; if (org.eclipse.swt.browser.Mozilla.IsXULRunner) { byte[] path = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, mozillaPath, true); rc = org.eclipse.swt.browser.XPCOMInit.XPCOMGlueStartup(path); if (rc != (XPCOM.NS_OK)) { org.eclipse.swt.browser.Mozilla.IsXULRunner = false; mozillaPath = mozillaPath.substring(0, mozillaPath.lastIndexOf(org.eclipse.swt.browser.Mozilla.SEPARATOR_OS)); if (Device.DEBUG) java.lang.System.out.println(("cannot use detected XULRunner: " + mozillaPath)); } else { org.eclipse.swt.browser.XPCOMInit.XPCOMGlueShutdown(); } } } org.eclipse.swt.browser.C.free(greBuffer); } if (org.eclipse.swt.browser.Mozilla.IsXULRunner) { if (Device.DEBUG) java.lang.System.out.println(("XULRunner path: " + mozillaPath)); try { org.eclipse.swt.browser.Library.loadLibrary("swt-xulrunner"); } catch (java.lang.UnsatisfiedLinkError e) { try { org.eclipse.swt.browser.Library.loadLibrary("swt-xulrunner-gcc3"); } catch (java.lang.UnsatisfiedLinkError ex) { browser.dispose(); org.eclipse.swt.browser.SWT.error(SWT.ERROR_NO_HANDLES, e); } } byte[] path = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, mozillaPath, true); int rc = org.eclipse.swt.browser.XPCOM.XPCOMGlueStartup(path); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } mozillaPath = mozillaPath.substring(0, mozillaPath.lastIndexOf(org.eclipse.swt.browser.Mozilla.SEPARATOR_OS)); } else { if ((style & (SWT.MOZILLA)) != 0) { browser.dispose(); java.lang.String errorString = ((mozillaPath != null) && ((mozillaPath.length()) > 0)) ? (" [Failed to use detected XULRunner: " + mozillaPath) + "]" : " [Could not detect registered XULRunner to use]"; org.eclipse.swt.browser.SWT.error(SWT.ERROR_NO_HANDLES, null, errorString); } int ptr = org.eclipse.swt.browser.C.getenv(org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.MOZILLA_FIVE_HOME, true)); if (ptr != 0) { int length = org.eclipse.swt.browser.C.strlen(ptr); byte[] buffer = new byte[length]; org.eclipse.swt.browser.C.memmove(buffer, ptr, length); mozillaPath = new java.lang.String(org.eclipse.swt.browser.MozillaDelegate.mbcsToWcs(null, buffer)); } else { browser.dispose(); org.eclipse.swt.browser.SWT.error(SWT.ERROR_NO_HANDLES, null, " [Unknown Mozilla path (MOZILLA_FIVE_HOME not set)]"); } if (Device.DEBUG) java.lang.System.out.println(("Mozilla path: " + mozillaPath)); java.io.File file = new java.io.File(mozillaPath, "components/libwidget_gtk.so"); if (file.exists()) { browser.dispose(); org.eclipse.swt.browser.SWT.error(SWT.ERROR_NO_HANDLES, null, " [Mozilla GTK2 required (GTK1.2 detected)]"); } try { org.eclipse.swt.browser.Library.loadLibrary("swt-mozilla"); } catch (java.lang.UnsatisfiedLinkError e) { try { org.eclipse.swt.browser.Library.loadLibrary("swt-mozilla-gcc3"); } catch (java.lang.UnsatisfiedLinkError ex) { browser.dispose(); org.eclipse.swt.browser.SWT.error(SWT.ERROR_NO_HANDLES, e); } } } if (!(org.eclipse.swt.browser.Mozilla.Initialized)) { int[] retVal = new int[1]; org.eclipse.swt.browser.nsEmbedString pathString = new org.eclipse.swt.browser.nsEmbedString(mozillaPath); int rc = org.eclipse.swt.browser.XPCOM.NS_NewLocalFile(pathString.getAddress(), true, retVal); pathString.dispose(); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((retVal[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_ERROR_NULL_POINTER); } org.eclipse.swt.browser.Mozilla.LocationProvider = new org.eclipse.swt.browser.AppFileLocProvider(mozillaPath); org.eclipse.swt.browser.Mozilla.LocationProvider.AddRef(); org.eclipse.swt.browser.nsIFile localFile = new org.eclipse.swt.browser.nsILocalFile(retVal[0]); rc = org.eclipse.swt.browser.XPCOM.NS_InitXPCOM2(0, localFile.getAddress(), org.eclipse.swt.browser.Mozilla.LocationProvider.getAddress()); localFile.Release(); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.SWT.error(SWT.ERROR_NO_HANDLES, null, ((((" [MOZILLA_FIVE_HOME may not point at an embeddable GRE] [NS_InitEmbedding " + mozillaPath) + " error ") + rc) + "]")); } java.lang.System.setProperty(org.eclipse.swt.browser.Mozilla.XULRUNNER_PATH, mozillaPath); java.lang.System.setProperty(org.eclipse.swt.browser.Mozilla.XULRUNNER_INITIALIZED, "true"); } if (org.eclipse.swt.browser.Mozilla.IsXULRunner) { try { java.lang.Class clazz = java.lang.Class.forName("org.mozilla.xpcom.Mozilla"); java.lang.reflect.Method method = clazz.getMethod("getInstance", new java.lang.Class[0]); java.lang.Object mozilla = method.invoke(null, new java.lang.Object[0]); method = clazz.getMethod("getComponentManager", new java.lang.Class[0]); try { method.invoke(mozilla, new java.lang.Object[0]); } catch (java.lang.reflect.InvocationTargetException e) { method = clazz.getMethod("initialize", new java.lang.Class[]{ java.lang.Class.forName("java.io.File") }); method.invoke(mozilla, new java.lang.Object[]{ new java.io.File(mozillaPath) }); } } catch (java.lang.ClassNotFoundException e) { } catch (java.lang.NoSuchMethodException e) { } catch (java.lang.IllegalArgumentException e) { } catch (java.lang.IllegalAccessException e) { } catch (java.lang.reflect.InvocationTargetException e) { } } int rc = org.eclipse.swt.browser.XPCOM.NS_GetComponentManager(result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } org.eclipse.swt.browser.nsIComponentManager componentManager = new org.eclipse.swt.browser.nsIComponentManager(result[0]); result[0] = 0; rc = componentManager.CreateInstance(XPCOM.NS_APPSHELL_CID, 0, nsIAppShell.NS_IAPPSHELL_IID, result); if (rc != (XPCOM.NS_ERROR_NO_INTERFACE)) { if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } org.eclipse.swt.browser.Mozilla.AppShell = new org.eclipse.swt.browser.nsIAppShell(result[0]); rc = org.eclipse.swt.browser.Mozilla.AppShell.Create(0, null); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } rc = org.eclipse.swt.browser.Mozilla.AppShell.Spinup(); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } } result[0] = 0; org.eclipse.swt.browser.Mozilla.WindowCreator = new org.eclipse.swt.browser.WindowCreator2(); org.eclipse.swt.browser.Mozilla.WindowCreator.AddRef(); rc = org.eclipse.swt.browser.XPCOM.NS_GetServiceManager(result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } org.eclipse.swt.browser.nsIServiceManager serviceManager = new org.eclipse.swt.browser.nsIServiceManager(result[0]); result[0] = 0; byte[] aContractID = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_WINDOWWATCHER_CONTRACTID, true); rc = serviceManager.GetServiceByContractID(aContractID, nsIWindowWatcher.NS_IWINDOWWATCHER_IID, result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } org.eclipse.swt.browser.nsIWindowWatcher windowWatcher = new org.eclipse.swt.browser.nsIWindowWatcher(result[0]); result[0] = 0; rc = windowWatcher.SetWindowCreator(org.eclipse.swt.browser.Mozilla.WindowCreator.getAddress()); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } windowWatcher.Release(); if ((org.eclipse.swt.browser.Mozilla.LocationProvider) != null) { byte[] buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_DIRECTORYSERVICE_CONTRACTID, true); rc = serviceManager.GetServiceByContractID(buffer, nsIDirectoryService.NS_IDIRECTORYSERVICE_IID, result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } org.eclipse.swt.browser.nsIDirectoryService directoryService = new org.eclipse.swt.browser.nsIDirectoryService(result[0]); result[0] = 0; rc = directoryService.QueryInterface(nsIProperties.NS_IPROPERTIES_IID, result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } directoryService.Release(); org.eclipse.swt.browser.nsIProperties properties = new org.eclipse.swt.browser.nsIProperties(result[0]); result[0] = 0; buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_APP_APPLICATION_REGISTRY_DIR, true); rc = properties.Get(buffer, nsIFile.NS_IFILE_IID, result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } properties.Release(); org.eclipse.swt.browser.nsIFile profileDir = new org.eclipse.swt.browser.nsIFile(result[0]); result[0] = 0; int path = org.eclipse.swt.browser.XPCOM.nsEmbedCString_new(); rc = profileDir.GetNativePath(path); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } int length = org.eclipse.swt.browser.XPCOM.nsEmbedCString_Length(path); int ptr = org.eclipse.swt.browser.XPCOM.nsEmbedCString_get(path); buffer = new byte[length]; org.eclipse.swt.browser.XPCOM.memmove(buffer, ptr, length); java.lang.String profilePath = (new java.lang.String(org.eclipse.swt.browser.MozillaDelegate.mbcsToWcs(null, buffer))) + (org.eclipse.swt.browser.Mozilla.PROFILE_DIR); org.eclipse.swt.browser.Mozilla.LocationProvider.setProfilePath(profilePath); org.eclipse.swt.browser.XPCOM.nsEmbedCString_delete(path); profileDir.Release(); buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_OBSERVER_CONTRACTID, true); rc = serviceManager.GetServiceByContractID(buffer, nsIObserverService.NS_IOBSERVERSERVICE_IID, result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } org.eclipse.swt.browser.nsIObserverService observerService = new org.eclipse.swt.browser.nsIObserverService(result[0]); result[0] = 0; buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.PROFILE_DO_CHANGE, true); length = org.eclipse.swt.browser.Mozilla.STARTUP.length(); char[] chars = new char[length + 1]; org.eclipse.swt.browser.Mozilla.STARTUP.getChars(0, length, chars, 0); rc = observerService.NotifyObservers(0, buffer, chars); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.PROFILE_AFTER_CHANGE, true); rc = observerService.NotifyObservers(0, buffer, chars); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } observerService.Release(); display.addListener(SWT.Dispose, new org.eclipse.swt.browser.Listener() { public void handleEvent(org.eclipse.swt.browser.Event event) { int[] result = new int[1]; int rc = org.eclipse.swt.browser.XPCOM.NS_GetServiceManager(result); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); if ((result[0]) == 0) org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); org.eclipse.swt.browser.nsIServiceManager serviceManager = new org.eclipse.swt.browser.nsIServiceManager(result[0]); result[0] = 0; byte[] buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_OBSERVER_CONTRACTID, true); rc = serviceManager.GetServiceByContractID(buffer, nsIObserverService.NS_IOBSERVERSERVICE_IID, result); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); if ((result[0]) == 0) org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); serviceManager.Release(); org.eclipse.swt.browser.nsIObserverService observerService = new org.eclipse.swt.browser.nsIObserverService(result[0]); result[0] = 0; buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.PROFILE_BEFORE_CHANGE, true); int length = org.eclipse.swt.browser.Mozilla.SHUTDOWN_PERSIST.length(); char[] chars = new char[length + 1]; org.eclipse.swt.browser.Mozilla.SHUTDOWN_PERSIST.getChars(0, length, chars, 0); rc = observerService.NotifyObservers(0, buffer, chars); if (rc != (XPCOM.NS_OK)) org.eclipse.swt.browser.Mozilla.error(rc); observerService.Release(); } }); } aContractID = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_PREFSERVICE_CONTRACTID, true); rc = serviceManager.GetServiceByContractID(aContractID, nsIPrefService.NS_IPREFSERVICE_IID, result); serviceManager.Release(); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } org.eclipse.swt.browser.nsIPrefService prefService = new org.eclipse.swt.browser.nsIPrefService(result[0]); result[0] = 0; byte[] buffer = new byte[1]; rc = prefService.GetBranch(buffer, result); prefService.Release(); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } org.eclipse.swt.browser.nsIPrefBranch prefBranch = new org.eclipse.swt.browser.nsIPrefBranch(result[0]); result[0] = 0; java.lang.String prefLocales = null; org.eclipse.swt.browser.nsIPrefLocalizedString localizedString = null; buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.PREFERENCE_LANGUAGES, true); rc = prefBranch.GetComplexValue(buffer, nsIPrefLocalizedString.NS_IPREFLOCALIZEDSTRING_IID, result); if (rc != (XPCOM.NS_OK)) { prefLocales = "en-us,en" + (org.eclipse.swt.browser.Mozilla.TOKENIZER_LOCALE); } else { if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } localizedString = new org.eclipse.swt.browser.nsIPrefLocalizedString(result[0]); result[0] = 0; rc = localizedString.ToString(result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } int length = org.eclipse.swt.browser.XPCOM.strlen_PRUnichar(result[0]); char[] dest = new char[length]; org.eclipse.swt.browser.XPCOM.memmove(dest, result[0], (length * 2)); prefLocales = (new java.lang.String(dest)) + (org.eclipse.swt.browser.Mozilla.TOKENIZER_LOCALE); } result[0] = 0; java.util.Locale locale = java.util.Locale.getDefault(); java.lang.String language = locale.getLanguage(); java.lang.String country = locale.getCountry(); java.lang.StringBuffer stringBuffer = new java.lang.StringBuffer(language); stringBuffer.append(org.eclipse.swt.browser.Mozilla.SEPARATOR_LOCALE); stringBuffer.append(country.toLowerCase()); stringBuffer.append(org.eclipse.swt.browser.Mozilla.TOKENIZER_LOCALE); stringBuffer.append(language); stringBuffer.append(org.eclipse.swt.browser.Mozilla.TOKENIZER_LOCALE); java.lang.String newLocales = stringBuffer.toString(); java.util.StringTokenizer tokenzier = new java.util.StringTokenizer(prefLocales, org.eclipse.swt.browser.Mozilla.TOKENIZER_LOCALE); while (tokenzier.hasMoreTokens()) { java.lang.String token = ((tokenzier.nextToken()) + (org.eclipse.swt.browser.Mozilla.TOKENIZER_LOCALE)).trim(); if ((newLocales.indexOf(token)) == (-1)) { stringBuffer.append(token); } } newLocales = stringBuffer.toString(); if (!(newLocales.equals(prefLocales))) { newLocales = newLocales.substring(0, ((newLocales.length()) - (org.eclipse.swt.browser.Mozilla.TOKENIZER_LOCALE.length()))); int length = newLocales.length(); char[] charBuffer = new char[length + 1]; newLocales.getChars(0, length, charBuffer, 0); if (localizedString == null) { byte[] contractID = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_PREFLOCALIZEDSTRING_CONTRACTID, true); rc = componentManager.CreateInstanceByContractID(contractID, 0, nsIPrefLocalizedString.NS_IPREFLOCALIZEDSTRING_IID, result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } localizedString = new org.eclipse.swt.browser.nsIPrefLocalizedString(result[0]); result[0] = 0; } localizedString.SetDataWithLength(length, charBuffer); rc = prefBranch.SetComplexValue(buffer, nsIPrefLocalizedString.NS_IPREFLOCALIZEDSTRING_IID, localizedString.getAddress()); } if (localizedString != null) { localizedString.Release(); localizedString = null; } java.lang.String prefCharset = null; buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.PREFERENCE_CHARSET, true); rc = prefBranch.GetComplexValue(buffer, nsIPrefLocalizedString.NS_IPREFLOCALIZEDSTRING_IID, result); if (rc != (XPCOM.NS_OK)) { prefCharset = "ISO-8859-1"; } else { if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } localizedString = new org.eclipse.swt.browser.nsIPrefLocalizedString(result[0]); result[0] = 0; rc = localizedString.ToString(result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } int length = org.eclipse.swt.browser.XPCOM.strlen_PRUnichar(result[0]); char[] dest = new char[length]; org.eclipse.swt.browser.XPCOM.memmove(dest, result[0], (length * 2)); prefCharset = new java.lang.String(dest); } result[0] = 0; java.lang.String newCharset = java.lang.System.getProperty("file.encoding"); if (!(newCharset.equals(prefCharset))) { int length = newCharset.length(); char[] charBuffer = new char[length + 1]; newCharset.getChars(0, length, charBuffer, 0); if (localizedString == null) { byte[] contractID = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_PREFLOCALIZEDSTRING_CONTRACTID, true); rc = componentManager.CreateInstanceByContractID(contractID, 0, nsIPrefLocalizedString.NS_IPREFLOCALIZEDSTRING_IID, result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } localizedString = new org.eclipse.swt.browser.nsIPrefLocalizedString(result[0]); result[0] = 0; } localizedString.SetDataWithLength(length, charBuffer); rc = prefBranch.SetComplexValue(buffer, nsIPrefLocalizedString.NS_IPREFLOCALIZEDSTRING_IID, localizedString.getAddress()); } if (localizedString != null) localizedString.Release(); buffer = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, org.eclipse.swt.browser.Mozilla.PREFERENCE_DISABLEOPENDURINGLOAD, true); rc = prefBranch.SetBoolPref(buffer, 0); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } prefBranch.Release(); org.eclipse.swt.browser.PromptServiceFactory factory = new org.eclipse.swt.browser.PromptServiceFactory(); factory.AddRef(); rc = componentManager.QueryInterface(nsIComponentRegistrar.NS_ICOMPONENTREGISTRAR_IID, result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } org.eclipse.swt.browser.nsIComponentRegistrar componentRegistrar = new org.eclipse.swt.browser.nsIComponentRegistrar(result[0]); result[0] = 0; aContractID = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_PROMPTSERVICE_CONTRACTID, true); byte[] aClassName = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, "Prompt Service", true); rc = componentRegistrar.RegisterFactory(XPCOM.NS_PROMPTSERVICE_CID, aClassName, aContractID, factory.getAddress()); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } factory.Release(); org.eclipse.swt.browser.HelperAppLauncherDialogFactory dialogFactory = new org.eclipse.swt.browser.HelperAppLauncherDialogFactory(); dialogFactory.AddRef(); aContractID = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_HELPERAPPLAUNCHERDIALOG_CONTRACTID, true); aClassName = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, "Helper App Launcher Dialog", true); rc = componentRegistrar.RegisterFactory(XPCOM.NS_HELPERAPPLAUNCHERDIALOG_CID, aClassName, aContractID, dialogFactory.getAddress()); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } dialogFactory.Release(); org.eclipse.swt.browser.DownloadFactory downloadFactory = new org.eclipse.swt.browser.DownloadFactory(); downloadFactory.AddRef(); aContractID = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_DOWNLOAD_CONTRACTID, true); aClassName = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, "Download", true); rc = componentRegistrar.RegisterFactory(XPCOM.NS_DOWNLOAD_CID, aClassName, aContractID, downloadFactory.getAddress()); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } downloadFactory.Release(); org.eclipse.swt.browser.DownloadFactory_1_8 downloadFactory_1_8 = new org.eclipse.swt.browser.DownloadFactory_1_8(); downloadFactory_1_8.AddRef(); aContractID = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_TRANSFER_CONTRACTID, true); aClassName = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, "Transfer", true); rc = componentRegistrar.RegisterFactory(XPCOM.NS_DOWNLOAD_CID, aClassName, aContractID, downloadFactory_1_8.getAddress()); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } downloadFactory_1_8.Release(); org.eclipse.swt.browser.FilePickerFactory pickerFactory = (org.eclipse.swt.browser.Mozilla.IsXULRunner) ? new org.eclipse.swt.browser.FilePickerFactory_1_8() : new org.eclipse.swt.browser.FilePickerFactory(); pickerFactory.AddRef(); aContractID = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, XPCOM.NS_FILEPICKER_CONTRACTID, true); aClassName = org.eclipse.swt.browser.MozillaDelegate.wcsToMbcs(null, "FilePicker", true); rc = componentRegistrar.RegisterFactory(XPCOM.NS_FILEPICKER_CID, aClassName, aContractID, pickerFactory.getAddress()); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } pickerFactory.Release(); componentRegistrar.Release(); componentManager.Release(); org.eclipse.swt.browser.Mozilla.Initialized = true; } (org.eclipse.swt.browser.Mozilla.BrowserCount)++; int rc = org.eclipse.swt.browser.XPCOM.NS_GetComponentManager(result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } org.eclipse.swt.browser.nsIComponentManager componentManager = new org.eclipse.swt.browser.nsIComponentManager(result[0]); result[0] = 0; org.eclipse.swt.browser.nsID NS_IWEBBROWSER_CID = new org.eclipse.swt.browser.nsID("F1EAC761-87E9-11d3-AF80-00A024FFC08C"); rc = componentManager.CreateInstance(NS_IWEBBROWSER_CID, 0, nsIWebBrowser.NS_IWEBBROWSER_IID, result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_NOINTERFACE); } componentManager.Release(); webBrowser = new org.eclipse.swt.browser.nsIWebBrowser(result[0]); createCOMInterfaces(); AddRef(); rc = webBrowser.SetContainerWindow(webBrowserChrome.getAddress()); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } rc = webBrowser.QueryInterface(nsIBaseWindow.NS_IBASEWINDOW_IID, result); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } if ((result[0]) == 0) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_ERROR_NO_INTERFACE); } org.eclipse.swt.browser.nsIBaseWindow baseWindow = new org.eclipse.swt.browser.nsIBaseWindow(result[0]); result[0] = 0; org.eclipse.swt.browser.Rectangle rect = browser.getClientArea(); if (rect.isEmpty()) { rect.width = 1; rect.height = 1; } embedHandle = delegate.getHandle(); rc = baseWindow.InitWindow(embedHandle, 0, 0, 0, rect.width, rect.height); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_ERROR_FAILURE); } rc = baseWindow.Create(); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_ERROR_FAILURE); } rc = baseWindow.SetVisibility(true); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(XPCOM.NS_ERROR_FAILURE); } baseWindow.Release(); rc = webBrowser.AddWebBrowserListener(weakReference.getAddress(), nsIWebProgressListener.NS_IWEBPROGRESSLISTENER_IID); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } rc = webBrowser.SetParentURIContentListener(uriContentListener.getAddress()); if (rc != (XPCOM.NS_OK)) { browser.dispose(); org.eclipse.swt.browser.Mozilla.error(rc); } org.eclipse.swt.browser.Listener listener = new org.eclipse.swt.browser.Listener() { public void handleEvent(org.eclipse.swt.browser.Event event) { switch (event.type) { case SWT.Dispose : { if (ignoreDispose) { ignoreDispose = false; break; } ignoreDispose = true; browser.notifyListeners(event.type, event); event.type = SWT.NONE; onDispose(event.display); break; } case SWT.Resize : onResize(); break; case SWT.FocusIn : Activate(); break; case SWT.Activate : Activate(); break; case SWT.Deactivate : { org.eclipse.swt.browser.Display display = event.display; if ((org.eclipse.swt.browser.Mozilla.this.browser) == (display.getFocusControl())) Deactivate(); break; } case SWT.Show : { org.eclipse.swt.browser.Display display = event.display; display.asyncExec(new java.lang.Runnable() { public void run() { if (browser.isDisposed()) return; onResize(); } }); break; } } } }; int[] folderEvents = new int[]{ SWT.Dispose, SWT.Resize, SWT.FocusIn, SWT.Activate, SWT.Deactivate, SWT.Show, SWT.KeyDown }; for (int i = 0; i < (folderEvents.length); i++) { browser.addListener(folderEvents[i], listener); } }
void onPaint(org.eclipse.swt.custom.PaintEvent event) { org.eclipse.swt.custom.Rectangle rect = getClientArea(); if (((rect.width) == 0) || ((rect.height) == 0)) return; boolean shortenText = false; java.lang.String t = text; org.eclipse.swt.custom.Image img = image; int availableWidth = java.lang.Math.max(0, ((rect.width) - (2 * (hIndent)))); org.eclipse.swt.custom.Point extent = getTotalSize(img, t); if ((extent.x) > availableWidth) { img = null; extent = getTotalSize(img, t); if ((extent.x) > availableWidth) { shortenText = true; } } org.eclipse.swt.custom.GC gc = event.gc; java.lang.String[] lines = ((text) == null) ? null : splitString(text); if (shortenText) { extent.x = 0; for (int i = 0; i < (lines.length); i++) { org.eclipse.swt.custom.Point e = gc.textExtent(lines[i], org.eclipse.swt.custom.CLabel.DRAW_FLAGS); if ((e.x) > availableWidth) { lines[i] = shortenText(gc, lines[i], availableWidth); extent.x = java.lang.Math.max(extent.x, getTotalSize(null, lines[i]).x); } else { extent.x = java.lang.Math.max(extent.x, e.x); } } if ((appToolTipText) == null) { super.setToolTipText(text); } } else { super.setToolTipText(appToolTipText); } int x = (rect.x) + (hIndent); if ((align) == (SWT.CENTER)) { x = ((rect.width) - (extent.x)) / 2; } if ((align) == (SWT.RIGHT)) { x = ((rect.width) - (hIndent)) - (extent.x); } try { if ((backgroundImage) != null) { org.eclipse.swt.custom.Rectangle imageRect = backgroundImage.getBounds(); gc.setBackground(getBackground()); gc.fillRectangle(rect); int xPos = 0; while (xPos < (rect.width)) { int yPos = 0; while (yPos < (rect.height)) { gc.drawImage(backgroundImage, xPos, yPos); yPos += imageRect.height; } xPos += imageRect.width; } } else if ((gradientColors) != null) { final org.eclipse.swt.custom.Color oldBackground = gc.getBackground(); if ((gradientColors.length) == 1) { if ((gradientColors[0]) != null) gc.setBackground(gradientColors[0]); gc.fillRectangle(0, 0, rect.width, rect.height); } else { final org.eclipse.swt.custom.Color oldForeground = gc.getForeground(); org.eclipse.swt.custom.Color lastColor = gradientColors[0]; if (lastColor == null) lastColor = oldBackground; int pos = 0; for (int i = 0; i < (gradientPercents.length); ++i) { gc.setForeground(lastColor); lastColor = gradientColors[(i + 1)]; if (lastColor == null) lastColor = oldBackground; gc.setBackground(lastColor); if (gradientVertical) { final int gradientHeight = (((gradientPercents[i]) * (rect.height)) / 100) - pos; gc.fillGradientRectangle(0, pos, rect.width, gradientHeight, true); pos += gradientHeight; } else { final int gradientWidth = (((gradientPercents[i]) * (rect.width)) / 100) - pos; gc.fillGradientRectangle(pos, 0, gradientWidth, rect.height, false); pos += gradientWidth; } } if ((gradientVertical) && (pos < (rect.height))) { gc.setBackground(getBackground()); gc.fillRectangle(0, pos, rect.width, ((rect.height) - pos)); } if ((!(gradientVertical)) && (pos < (rect.width))) { gc.setBackground(getBackground()); gc.fillRectangle(pos, 0, ((rect.width) - pos), rect.height); } gc.setForeground(oldForeground); } gc.setBackground(oldBackground); } else { if (((getStyle()) & (SWT.NO_BACKGROUND)) != 0) { gc.setBackground(getBackground()); gc.fillRectangle(rect); } } } catch (org.eclipse.swt.custom.SWTException e) { if (((getStyle()) & (SWT.NO_BACKGROUND)) != 0) { gc.setBackground(getBackground()); gc.fillRectangle(rect); } } int style = getStyle(); if (((style & (SWT.SHADOW_IN)) != 0) || ((style & (SWT.SHADOW_OUT)) != 0)) { paintBorder(gc, rect); } if (img != null) { org.eclipse.swt.custom.Rectangle imageRect = img.getBounds(); gc.drawImage(img, 0, 0, imageRect.width, imageRect.height, x, (((rect.height) - (imageRect.height)) / 2), imageRect.width, imageRect.height); x += (imageRect.width) + (org.eclipse.swt.custom.CLabel.GAP); extent.x -= (imageRect.width) + (org.eclipse.swt.custom.CLabel.GAP); } if (lines != null) { int lineHeight = gc.getFontMetrics().getHeight(); int textHeight = (lines.length) * lineHeight; int lineY = java.lang.Math.max(vIndent, ((rect.y) + (((rect.height) - textHeight) / 2))); gc.setForeground(getForeground()); for (int i = 0; i < (lines.length); i++) { int lineX = x; if ((lines.length) > 1) { if ((align) == (SWT.CENTER)) { int lineWidth = gc.textExtent(lines[i], org.eclipse.swt.custom.CLabel.DRAW_FLAGS).x; lineX = x + (java.lang.Math.max(0, (((extent.x) - lineWidth) / 2))); } if ((align) == (SWT.RIGHT)) { int lineWidth = gc.textExtent(lines[i], org.eclipse.swt.custom.CLabel.DRAW_FLAGS).x; lineX = java.lang.Math.max(x, ((((rect.x) + (rect.width)) - (hIndent)) - lineWidth)); } } gc.drawText(lines[i], lineX, lineY, org.eclipse.swt.custom.CLabel.DRAW_FLAGS); lineY += lineHeight; } } }
void createHandle(int index) { state |= (HANDLE) | (CANVAS); if ((handle) == 0) { int type = OS.GTK_WINDOW_TOPLEVEL; if (((style) & (SWT.ON_TOP)) != 0) type = OS.GTK_WINDOW_POPUP; shellHandle = org.eclipse.swt.widgets.OS.gtk_window_new(type); } else { shellHandle = org.eclipse.swt.widgets.OS.gtk_plug_new(handle); } if ((shellHandle) == 0) org.eclipse.swt.widgets.SWT.error(SWT.ERROR_NO_HANDLES); if ((parent) != null) { org.eclipse.swt.widgets.OS.gtk_window_set_transient_for(shellHandle, parent.topHandle()); org.eclipse.swt.widgets.OS.gtk_window_set_destroy_with_parent(shellHandle, true); org.eclipse.swt.widgets.OS.gtk_window_set_type_hint(shellHandle, OS.GDK_WINDOW_TYPE_HINT_DIALOG); } org.eclipse.swt.widgets.OS.gtk_widget_set_size_request(shellHandle, 0, 0); org.eclipse.swt.widgets.OS.gtk_window_set_resizable(shellHandle, true); createHandle(index, shellHandle, true); org.eclipse.swt.widgets.OS.gtk_widget_realize(shellHandle); int window = org.eclipse.swt.widgets.OS.GTK_WIDGET_WINDOW(shellHandle); int decorations = 0; if (((style) & (SWT.NO_TRIM)) == 0) { if (((style) & (SWT.MIN)) != 0) decorations |= OS.GDK_DECOR_MINIMIZE; if (((style) & (SWT.MAX)) != 0) decorations |= OS.GDK_DECOR_MAXIMIZE; if (((style) & (SWT.RESIZE)) != 0) decorations |= OS.GDK_DECOR_RESIZEH; if (((style) & (SWT.BORDER)) != 0) decorations |= OS.GDK_DECOR_BORDER; if (((style) & (SWT.MENU)) != 0) decorations |= OS.GDK_DECOR_MENU; if (((style) & (SWT.TITLE)) != 0) decorations |= OS.GDK_DECOR_TITLE; if (((style) & (SWT.RESIZE)) != 0) decorations |= OS.GDK_DECOR_BORDER; } org.eclipse.swt.widgets.OS.gdk_window_set_decorations(window, decorations); org.eclipse.swt.widgets.OS.gtk_window_set_title(shellHandle, new byte[1]); if (((style) & (SWT.ON_TOP)) != 0) { org.eclipse.swt.widgets.OS.gdk_window_set_override_redirect(window, true); } if (((style) & (((SWT.NO_TRIM) | (SWT.BORDER)) | (SWT.RESIZE))) == 0) { org.eclipse.swt.widgets.OS.gtk_container_set_border_width(shellHandle, 1); org.eclipse.swt.widgets.GdkColor color = new org.eclipse.swt.widgets.GdkColor(); org.eclipse.swt.widgets.OS.gtk_style_get_black(org.eclipse.swt.widgets.OS.gtk_widget_get_style(shellHandle), color); org.eclipse.swt.widgets.OS.gtk_widget_modify_bg(shellHandle, OS.GTK_STATE_NORMAL, color); } int bits = ((SWT.PRIMARY_MODAL) | (SWT.APPLICATION_MODAL)) | (SWT.SYSTEM_MODAL); boolean modal = ((style) & bits) != 0; if (((style) & (SWT.ON_TOP)) == 0) modal |= ((parent) != null) && (((parent.style) & bits) != 0); org.eclipse.swt.widgets.OS.gtk_window_set_modal(shellHandle, modal); }
long imContext() { if ((imContext) != 0) return imContext; if (((style) & (SWT.SINGLE)) != 0) { return org.eclipse.swt.widgets.OS.gtk_editable_get_editable(handle) ? org.eclipse.swt.widgets.OS.GTK_ENTRY_IM_CONTEXT(handle) : 0; } return org.eclipse.swt.widgets.OS.GTK_TEXTVIEW_IM_CONTEXT(handle); }
@java.lang.Override public long isReady(long tid, org.apache.accumulo.master.Master master) throws java.lang.Exception { if (force) { return 0; } if (!(requestedShutdown)) { master.shutdownTServer(server); requestedShutdown = true; } if (master.onlineTabletServers().contains(server)) { org.apache.accumulo.server.master.LiveTServerSet.TServerConnection connection = master.getConnection(server); if (connection != null) { try { org.apache.accumulo.core.master.thrift.TabletServerStatus status = connection.getTableMap(false); if (((status.tableMap) != null) && (status.tableMap.isEmpty())) { org.apache.accumulo.master.tserverOps.ShutdownTServer.log.info(("tablet server hosts no tablets " + (server))); connection.halt(master.getMasterLock()); org.apache.accumulo.master.tserverOps.ShutdownTServer.log.info(("tablet server asked to halt " + (server))); return 0; } } catch (org.apache.thrift.transport.TTransportException ex) { } catch (java.lang.Exception ex) { org.apache.accumulo.master.tserverOps.ShutdownTServer.log.error(((("Error talking to tablet server " + (server)) + ": ") + ex)); } return 1000; } } return 0; }
public boolean config(java.lang.String... args) { org.apache.accumulo.core.util.shell.ShellOptionsJC options = new org.apache.accumulo.core.util.shell.ShellOptionsJC(); com.beust.jcommander.JCommander jc = new com.beust.jcommander.JCommander(); jc.setProgramName("accumulo shell"); jc.addObject(options); try { jc.parse(args); } catch (com.beust.jcommander.ParameterException e) { configError = true; } if (options.isHelpEnabled()) { configError = true; } if ((!(configError)) && ((options.getUnrecognizedOptions()) != null)) { configError = true; logError(("Unrecognized Options: " + (options.getUnrecognizedOptions().toString()))); } if (configError) { jc.usage(); return true; } org.apache.accumulo.core.util.shell.Shell.setDebugging(options.isDebugEnabled()); authTimeout = java.util.concurrent.TimeUnit.MINUTES.toNanos(options.getAuthTimeout()); disableAuthTimeout = options.isAuthTimeoutDisabled(); java.lang.String user = options.getUsername(); java.lang.String password = options.getPassword(); tabCompletion = !(options.isTabCompletionDisabled()); setInstance(options); token = options.getAuthenticationToken(); java.util.Map<java.lang.String, java.lang.String> loginOptions = options.getTokenProperties(); try { boolean hasToken = (token) != null; boolean hasTokenOptions = !(loginOptions.isEmpty()); if (hasToken && (password != null)) { throw new com.beust.jcommander.ParameterException("Can not supply '--pass' option with '--tokenClass' option"); } java.lang.Runtime.getRuntime().addShutdownHook(new java.lang.Thread() { @java.lang.Override public void run() { reader.getTerminal().setEchoEnabled(true); } }); if (hasToken != hasTokenOptions) { throw new com.beust.jcommander.ParameterException("Must supply either both or neither of '--tokenClass' and '--tokenProperty'"); } else if (hasToken) { org.apache.accumulo.core.client.security.tokens.AuthenticationToken.Properties props; props = new org.apache.accumulo.core.client.security.tokens.AuthenticationToken.Properties(); props.putAllStrings(loginOptions); token.init(props); } else { if (("stdin".equals(password)) || (password == null)) { password = reader.readLine("Password: ", '*'); } if (password == null) { throw new com.beust.jcommander.ParameterException("No password or token option supplied"); } else { this.token = new org.apache.accumulo.core.client.security.tokens.PasswordToken(password); } } if (!(options.isFake())) { org.apache.accumulo.fate.zookeeper.ZooReader zr = new org.apache.accumulo.fate.zookeeper.ZooReader(instance.getZooKeepers(), instance.getZooKeepersSessionTimeOut()); org.apache.accumulo.core.trace.DistributedTrace.enable(instance, zr, "shell", java.net.InetAddress.getLocalHost().getHostName()); } this.setTableName(""); this.principal = user; connector = instance.getConnector(this.principal, token); } catch (java.lang.Exception e) { printException(e); configError = true; } if ((options.getExecFile()) != null) { execFile = options.getExecFile(); verbose = false; } else if ((options.getExecFileVerbose()) != null) { execFile = options.getExecFileVerbose(); verbose = true; } execCommand = options.getExecCommand(); if ((execCommand) != null) { verbose = false; } rootToken = new org.apache.accumulo.core.util.shell.Token(); org.apache.accumulo.core.util.shell.Shell.Command[] dataCommands = new org.apache.accumulo.core.util.shell.Shell.Command[]{ new org.apache.accumulo.core.util.shell.commands.DeleteCommand(), new org.apache.accumulo.core.util.shell.commands.DeleteManyCommand(), new org.apache.accumulo.core.util.shell.commands.DeleteRowsCommand(), new org.apache.accumulo.core.util.shell.commands.EGrepCommand(), new org.apache.accumulo.core.util.shell.commands.FormatterCommand(), new org.apache.accumulo.core.util.shell.commands.InterpreterCommand(), new org.apache.accumulo.core.util.shell.commands.GrepCommand(), new org.apache.accumulo.core.util.shell.commands.ImportDirectoryCommand(), new org.apache.accumulo.core.util.shell.commands.InsertCommand(), new org.apache.accumulo.core.util.shell.commands.MaxRowCommand(), new org.apache.accumulo.core.util.shell.commands.ScanCommand() }; org.apache.accumulo.core.util.shell.Shell.Command[] debuggingCommands = new org.apache.accumulo.core.util.shell.Shell.Command[]{ new org.apache.accumulo.core.util.shell.commands.ClasspathCommand(), new org.apache.accumulo.core.util.shell.commands.DebugCommand(), new org.apache.accumulo.core.util.shell.commands.ListScansCommand(), new org.apache.accumulo.core.util.shell.commands.ListCompactionsCommand(), new org.apache.accumulo.core.util.shell.commands.TraceCommand(), new org.apache.accumulo.core.util.shell.commands.PingCommand() }; org.apache.accumulo.core.util.shell.Shell.Command[] execCommands = new org.apache.accumulo.core.util.shell.Shell.Command[]{ new org.apache.accumulo.core.util.shell.commands.ExecfileCommand(), new org.apache.accumulo.core.util.shell.commands.HistoryCommand(), new org.apache.accumulo.core.util.shell.commands.ExtensionCommand(), new org.apache.accumulo.core.util.shell.commands.ScriptCommand() }; org.apache.accumulo.core.util.shell.Shell.Command[] exitCommands = new org.apache.accumulo.core.util.shell.Shell.Command[]{ new org.apache.accumulo.core.util.shell.commands.ByeCommand(), new org.apache.accumulo.core.util.shell.commands.ExitCommand(), new org.apache.accumulo.core.util.shell.commands.QuitCommand() }; org.apache.accumulo.core.util.shell.Shell.Command[] helpCommands = new org.apache.accumulo.core.util.shell.Shell.Command[]{ new org.apache.accumulo.core.util.shell.commands.AboutCommand(), new org.apache.accumulo.core.util.shell.commands.HelpCommand(), new org.apache.accumulo.core.util.shell.commands.InfoCommand(), new org.apache.accumulo.core.util.shell.commands.QuestionCommand() }; org.apache.accumulo.core.util.shell.Shell.Command[] iteratorCommands = new org.apache.accumulo.core.util.shell.Shell.Command[]{ new org.apache.accumulo.core.util.shell.commands.DeleteIterCommand(), new org.apache.accumulo.core.util.shell.commands.DeleteScanIterCommand(), new org.apache.accumulo.core.util.shell.commands.ListIterCommand(), new org.apache.accumulo.core.util.shell.commands.SetIterCommand(), new org.apache.accumulo.core.util.shell.commands.SetScanIterCommand(), new org.apache.accumulo.core.util.shell.commands.SetShellIterCommand(), new org.apache.accumulo.core.util.shell.commands.ListShellIterCommand(), new org.apache.accumulo.core.util.shell.commands.DeleteShellIterCommand() }; org.apache.accumulo.core.util.shell.Shell.Command[] otherCommands = new org.apache.accumulo.core.util.shell.Shell.Command[]{ new org.apache.accumulo.core.util.shell.commands.HiddenCommand() }; org.apache.accumulo.core.util.shell.Shell.Command[] permissionsCommands = new org.apache.accumulo.core.util.shell.Shell.Command[]{ new org.apache.accumulo.core.util.shell.commands.GrantCommand(), new org.apache.accumulo.core.util.shell.commands.RevokeCommand(), new org.apache.accumulo.core.util.shell.commands.SystemPermissionsCommand(), new org.apache.accumulo.core.util.shell.commands.TablePermissionsCommand(), new org.apache.accumulo.core.util.shell.commands.UserPermissionsCommand(), new org.apache.accumulo.core.util.shell.commands.NamespacePermissionsCommand() }; org.apache.accumulo.core.util.shell.Shell.Command[] stateCommands = new org.apache.accumulo.core.util.shell.Shell.Command[]{ new org.apache.accumulo.core.util.shell.commands.AuthenticateCommand(), new org.apache.accumulo.core.util.shell.commands.ClsCommand(), new org.apache.accumulo.core.util.shell.commands.ClearCommand(), new org.apache.accumulo.core.util.shell.commands.FateCommand(), new org.apache.accumulo.core.util.shell.commands.NoTableCommand(), new org.apache.accumulo.core.util.shell.commands.SleepCommand(), new org.apache.accumulo.core.util.shell.commands.TableCommand(), new org.apache.accumulo.core.util.shell.commands.UserCommand(), new org.apache.accumulo.core.util.shell.commands.WhoAmICommand() }; org.apache.accumulo.core.util.shell.Shell.Command[] tableCommands = new org.apache.accumulo.core.util.shell.Shell.Command[]{ new org.apache.accumulo.core.util.shell.commands.CloneTableCommand(), new org.apache.accumulo.core.util.shell.commands.ConfigCommand(), new org.apache.accumulo.core.util.shell.commands.CreateTableCommand(), new org.apache.accumulo.core.util.shell.commands.DeleteTableCommand(), new org.apache.accumulo.core.util.shell.commands.DropTableCommand(), new org.apache.accumulo.core.util.shell.commands.DUCommand(), new org.apache.accumulo.core.util.shell.commands.ExportTableCommand(), new org.apache.accumulo.core.util.shell.commands.ImportTableCommand(), new org.apache.accumulo.core.util.shell.commands.OfflineCommand(), new org.apache.accumulo.core.util.shell.commands.OnlineCommand(), new org.apache.accumulo.core.util.shell.commands.RenameTableCommand(), new org.apache.accumulo.core.util.shell.commands.TablesCommand(), new org.apache.accumulo.core.util.shell.commands.NamespacesCommand(), new org.apache.accumulo.core.util.shell.commands.CreateNamespaceCommand(), new org.apache.accumulo.core.util.shell.commands.DeleteNamespaceCommand(), new org.apache.accumulo.core.util.shell.commands.RenameNamespaceCommand() }; org.apache.accumulo.core.util.shell.Shell.Command[] tableControlCommands = new org.apache.accumulo.core.util.shell.Shell.Command[]{ new org.apache.accumulo.core.util.shell.commands.AddSplitsCommand(), new org.apache.accumulo.core.util.shell.commands.CompactCommand(), new org.apache.accumulo.core.util.shell.commands.ConstraintCommand(), new org.apache.accumulo.core.util.shell.commands.FlushCommand(), new org.apache.accumulo.core.util.shell.commands.GetGroupsCommand(), new org.apache.accumulo.core.util.shell.commands.GetSplitsCommand(), new org.apache.accumulo.core.util.shell.commands.MergeCommand(), new org.apache.accumulo.core.util.shell.commands.SetGroupsCommand() }; org.apache.accumulo.core.util.shell.Shell.Command[] userCommands = new org.apache.accumulo.core.util.shell.Shell.Command[]{ new org.apache.accumulo.core.util.shell.commands.AddAuthsCommand(), new org.apache.accumulo.core.util.shell.commands.CreateUserCommand(), new org.apache.accumulo.core.util.shell.commands.DeleteUserCommand(), new org.apache.accumulo.core.util.shell.commands.DropUserCommand(), new org.apache.accumulo.core.util.shell.commands.GetAuthsCommand(), new org.apache.accumulo.core.util.shell.commands.PasswdCommand(), new org.apache.accumulo.core.util.shell.commands.SetAuthsCommand(), new org.apache.accumulo.core.util.shell.commands.UsersCommand() }; commandGrouping.put("-- Writing, Reading, and Removing Data --", dataCommands); commandGrouping.put("-- Debugging Commands -------------------", debuggingCommands); commandGrouping.put("-- Shell Execution Commands -------------", execCommands); commandGrouping.put("-- Exiting Commands ---------------------", exitCommands); commandGrouping.put("-- Help Commands ------------------------", helpCommands); commandGrouping.put("-- Iterator Configuration ---------------", iteratorCommands); commandGrouping.put("-- Permissions Administration Commands --", permissionsCommands); commandGrouping.put("-- Shell State Commands -----------------", stateCommands); commandGrouping.put("-- Table Administration Commands --------", tableCommands); commandGrouping.put("-- Table Control Commands ---------------", tableControlCommands); commandGrouping.put("-- User Administration Commands ---------", userCommands); for (org.apache.accumulo.core.util.shell.Shell.Command[] cmds : commandGrouping.values()) { for (org.apache.accumulo.core.util.shell.Shell.Command cmd : cmds) commandFactory.put(cmd.getName(), cmd); } for (org.apache.accumulo.core.util.shell.Shell.Command cmd : otherCommands) { commandFactory.put(cmd.getName(), cmd); } return configError; }
public java.util.Map<java.lang.String, java.lang.String> getAllPropertiesWithPrefix(org.apache.accumulo.core.client.ClientConfiguration.ClientProperty property) { checkType(property, PropertyType.PREFIX); java.util.Map<java.lang.String, java.lang.String> propMap = new java.util.HashMap<>(); java.lang.String prefix = property.getKey(); if (prefix.endsWith(".")) { prefix = prefix.substring(0, ((prefix.length()) - 1)); } java.util.Iterator<?> iter = this.getKeys(prefix); while (iter.hasNext()) { java.lang.String p = ((java.lang.String) (iter.next())); propMap.put(p, getString(p)); } return propMap; }
@java.lang.Override public void deleteRows(java.lang.String tableName, Text start, Text end) throws org.apache.accumulo.core.client.AccumuloException, org.apache.accumulo.core.client.AccumuloSecurityException, org.apache.accumulo.core.client.TableNotFoundException { if (!(exists(tableName))) throw new org.apache.accumulo.core.client.TableNotFoundException(tableName, tableName, ""); org.apache.accumulo.core.client.mock.MockTable t = acu.tables.get(tableName); Text startText = (start != null) ? new Text(start) : new Text(); Text endText = (end != null) ? new Text(end) : new Text(t.table.lastKey().getRow().getBytes()); startText.append(org.apache.accumulo.core.client.mock.MockTableOperations.ZERO, 0, 1); endText.append(org.apache.accumulo.core.client.mock.MockTableOperations.ZERO, 0, 1); java.util.Set<org.apache.accumulo.core.data.Key> keep = new java.util.TreeSet<org.apache.accumulo.core.data.Key>(t.table.subMap(new org.apache.accumulo.core.data.Key(startText), new org.apache.accumulo.core.data.Key(endText)).keySet()); t.table.keySet().removeAll(keep); }
private void findTop() throws java.io.IOException { if (super.hasTop()) { workKey.set(super.getTopKey()); if ((combiners.isEmpty()) || (combiners.contains(workKey))) { if (workKey.isDeleted()) return; topKey = workKey; java.util.Iterator<org.apache.accumulo.core.data.Value> viter = new org.apache.accumulo.core.iterators.Combiner.ValueIterator(getSource()); topValue = reduce(topKey, viter); while (viter.hasNext()) viter.next(); } } }
public void printVerboseInfo() throws java.io.IOException { java.lang.StringBuilder sb = new java.lang.StringBuilder("-\n"); sb.append("- Current user: ").append(connector.whoami()).append("\n"); if ((execFile) != null) sb.append("- Executing commands from: ").append(execFile).append("\n"); if (disableAuthTimeout) sb.append("- Authorization timeout: disabled\n"); else sb.append("- Authorization timeout: ").append(java.lang.String.format("%.2fs%n", java.util.concurrent.TimeUnit.NANOSECONDS.toSeconds(authTimeout))); sb.append("- Debug: ").append((org.apache.accumulo.core.util.shell.Shell.isDebuggingEnabled() ? "on" : "off")).append("\n"); if (!(scanIteratorOptions.isEmpty())) { for (java.util.Map.Entry<java.lang.String, java.util.List<org.apache.accumulo.core.client.IteratorSetting>> entry : scanIteratorOptions.entrySet()) { sb.append("- Session scan iterators for table ").append(entry.getKey()).append(":\n"); for (org.apache.accumulo.core.client.IteratorSetting setting : entry.getValue()) { sb.append("- Iterator ").append(setting.getName()).append(" options:\n"); sb.append("- ").append("iteratorPriority").append(" = ").append(setting.getPriority()).append("\n"); sb.append("- ").append("iteratorClassName").append(" = ").append(setting.getIteratorClass()).append("\n"); for (java.util.Map.Entry<java.lang.String, java.lang.String> optEntry : setting.getOptions().entrySet()) { sb.append("- ").append(optEntry.getKey()).append(" = ").append(optEntry.getValue()).append("\n"); } } } } sb.append("-\n"); reader.printString(sb.toString()); }
@java.lang.Override public java.lang.String createBatchScanner(java.nio.ByteBuffer login, java.lang.String tableName, org.apache.accumulo.proxy.thrift.BatchScanOptions opts) throws org.apache.thrift.TException { try { org.apache.accumulo.core.client.Connector connector = getConnector(login); int threads = 10; org.apache.accumulo.core.security.Authorizations auth; if ((opts != null) && (opts.isSetAuthorizations())) { auth = getAuthorizations(opts.authorizations); } else { auth = connector.securityOperations().getUserAuthorizations(connector.whoami()); } if ((opts != null) && ((opts.threads) > 0)) threads = opts.threads; org.apache.accumulo.core.client.BatchScanner scanner = connector.createBatchScanner(tableName, auth, threads); if (opts != null) { if ((opts.iterators) != null) { for (org.apache.accumulo.proxy.thrift.IteratorSetting iter : opts.iterators) { org.apache.accumulo.core.client.IteratorSetting is = new org.apache.accumulo.core.client.IteratorSetting(iter.getPriority(), iter.getName(), iter.getIteratorClass(), iter.getProperties()); scanner.addScanIterator(is); } } java.util.ArrayList<org.apache.accumulo.core.data.Range> ranges = new java.util.ArrayList<org.apache.accumulo.core.data.Range>(); if ((opts.ranges) == null) { ranges.add(new org.apache.accumulo.core.data.Range()); } else { for (org.apache.accumulo.proxy.thrift.Range range : opts.ranges) { org.apache.accumulo.core.data.Range aRange = new org.apache.accumulo.core.data.Range(((range.getStart()) == null ? null : org.apache.accumulo.proxy.Util.fromThrift(range.getStart())), true, ((range.getStop()) == null ? null : org.apache.accumulo.proxy.Util.fromThrift(range.getStop())), false); ranges.add(aRange); } } scanner.setRanges(ranges); if ((opts.columns) != null) { for (org.apache.accumulo.proxy.thrift.ScanColumn col : opts.columns) { if (col.isSetColQualifier()) scanner.fetchColumn(org.apache.accumulo.core.util.ByteBufferUtil.toText(col.colFamily), org.apache.accumulo.core.util.ByteBufferUtil.toText(col.colQualifier)); else scanner.fetchColumnFamily(org.apache.accumulo.core.util.ByteBufferUtil.toText(col.colFamily)); } } } java.util.UUID uuid = java.util.UUID.randomUUID(); org.apache.accumulo.proxy.ProxyServer.ScannerPlusIterator spi = new org.apache.accumulo.proxy.ProxyServer.ScannerPlusIterator(); spi.scanner = scanner; spi.iterator = scanner.iterator(); scannerCache.put(uuid, spi); return uuid.toString(); } catch (java.lang.Exception e) { throw translateException(e); } }
public MiniAccumuloCluster(org.apache.accumulo.minicluster.MiniAccumuloConfig config) throws java.io.IOException { if ((config.getDir().exists()) && (!(config.getDir().isDirectory()))) throw new java.lang.IllegalArgumentException((("Must pass in directory, " + (config.getDir())) + " is a file")); if ((config.getDir().exists()) && ((config.getDir().list().length) != 0)) throw new java.lang.IllegalArgumentException((("Directory " + (config.getDir())) + " is not empty")); this.config = config; libDir = new java.io.File(config.getDir(), "lib"); libExtDir = new java.io.File(libDir, "ext"); confDir = new java.io.File(config.getDir(), "conf"); accumuloDir = new java.io.File(config.getDir(), "accumulo"); zooKeeperDir = new java.io.File(config.getDir(), "zookeeper"); logDir = new java.io.File(config.getDir(), "logs"); walogDir = new java.io.File(config.getDir(), "walogs"); confDir.mkdirs(); accumuloDir.mkdirs(); zooKeeperDir.mkdirs(); logDir.mkdirs(); walogDir.mkdirs(); libDir.mkdirs(); libExtDir.mkdirs(); zooKeeperPort = org.apache.accumulo.server.util.PortUtils.getRandomFreePort(); java.io.File siteFile = new java.io.File(confDir, "accumulo-site.xml"); java.io.OutputStreamWriter fileWriter = new java.io.OutputStreamWriter(new java.io.FileOutputStream(siteFile), org.apache.accumulo.core.Constants.UTF8); fileWriter.append("<configuration>\n"); java.util.HashMap<java.lang.String, java.lang.String> siteConfig = new java.util.HashMap<java.lang.String, java.lang.String>(config.getSiteConfig()); appendProp(fileWriter, Property.INSTANCE_DFS_URI, "file:///", siteConfig); appendProp(fileWriter, Property.INSTANCE_DFS_DIR, accumuloDir.getAbsolutePath(), siteConfig); appendProp(fileWriter, Property.INSTANCE_ZK_HOST, ("localhost:" + (zooKeeperPort)), siteConfig); appendProp(fileWriter, Property.INSTANCE_SECRET, org.apache.accumulo.minicluster.MiniAccumuloCluster.INSTANCE_SECRET, siteConfig); appendProp(fileWriter, Property.TSERV_PORTSEARCH, "true", siteConfig); appendProp(fileWriter, Property.LOGGER_DIR, walogDir.getAbsolutePath(), siteConfig); appendProp(fileWriter, Property.TSERV_DATACACHE_SIZE, "10M", siteConfig); appendProp(fileWriter, Property.TSERV_INDEXCACHE_SIZE, "10M", siteConfig); appendProp(fileWriter, Property.TSERV_MAXMEM, "50M", siteConfig); appendProp(fileWriter, Property.TSERV_WALOG_MAX_SIZE, "100M", siteConfig); appendProp(fileWriter, Property.TSERV_NATIVEMAP_ENABLED, "false", siteConfig); appendProp(fileWriter, ((org.apache.accumulo.core.conf.Property.TRACE_TOKEN_PROPERTY_PREFIX) + ".password"), config.getRootPassword(), siteConfig); appendProp(fileWriter, Property.GC_CYCLE_DELAY, "4s", siteConfig); appendProp(fileWriter, Property.GC_CYCLE_START, "0s", siteConfig); mergePropWithRandomPort(siteConfig, Property.MASTER_CLIENTPORT.getKey()); mergePropWithRandomPort(siteConfig, Property.TRACE_PORT.getKey()); mergePropWithRandomPort(siteConfig, Property.TSERV_CLIENTPORT.getKey()); mergePropWithRandomPort(siteConfig, Property.MONITOR_PORT.getKey()); mergePropWithRandomPort(siteConfig, Property.GC_PORT.getKey()); mergePropWithRandomPort(siteConfig, Property.MONITOR_LOG4J_PORT.getKey()); appendProp(fileWriter, Property.TSERV_MAJC_DELAY, "3", siteConfig); appendProp(fileWriter, Property.GENERAL_CLASSPATHS, ((libDir.getAbsolutePath()) + "/[^.].*.jar"), siteConfig); appendProp(fileWriter, Property.GENERAL_DYNAMIC_CLASSPATHS, ((libExtDir.getAbsolutePath()) + "/[^.].*.jar"), siteConfig); for (java.util.Map.Entry<java.lang.String, java.lang.String> entry : siteConfig.entrySet()) fileWriter.append((((("<property><name>" + (entry.getKey())) + "</name><value>") + (entry.getValue())) + "</value></property>\n")); fileWriter.append("</configuration>\n"); fileWriter.close(); zooCfgFile = new java.io.File(confDir, "zoo.cfg"); fileWriter = new java.io.OutputStreamWriter(new java.io.FileOutputStream(zooCfgFile), org.apache.accumulo.core.Constants.UTF8); java.util.Properties zooCfg = new java.util.Properties(); zooCfg.setProperty("tickTime", "1000"); zooCfg.setProperty("initLimit", "10"); zooCfg.setProperty("syncLimit", "5"); zooCfg.setProperty("clientPort", ((zooKeeperPort) + "")); zooCfg.setProperty("maxClientCnxns", "100"); zooCfg.setProperty("dataDir", zooKeeperDir.getAbsolutePath()); zooCfg.store(fileWriter, null); fileWriter.close(); }
static org.apache.commons.vfs2.FileObject[] resolve(org.apache.commons.vfs2.FileSystemManager vfs, java.lang.String uris, java.util.ArrayList<org.apache.commons.vfs2.FileObject> pathsToMonitor) throws org.apache.commons.vfs2.FileSystemException { if (uris == null) return new org.apache.commons.vfs2.FileObject[0]; java.util.ArrayList<org.apache.commons.vfs2.FileObject> classpath = new java.util.ArrayList<org.apache.commons.vfs2.FileObject>(); pathsToMonitor.clear(); for (java.lang.String path : uris.split(",")) { path = path.trim(); if (path.equals("")) continue; path = org.apache.accumulo.start.classloader.AccumuloClassLoader.replaceEnvVars(path, java.lang.System.getenv()); org.apache.commons.vfs2.FileObject fo = vfs.resolveFile(path); switch (fo.getType()) { case FILE : classpath.add(fo); pathsToMonitor.add(fo); break; case FOLDER : pathsToMonitor.add(fo); for (org.apache.commons.vfs2.FileObject child : fo.getChildren()) { classpath.add(child); } break; case IMAGINARY : java.lang.String pattern = fo.getName().getBaseName(); if (((fo.getParent()) != null) && ((fo.getParent().getType()) == (org.apache.commons.vfs2.FileType.FOLDER))) { pathsToMonitor.add(fo.getParent()); org.apache.commons.vfs2.FileObject[] children = fo.getParent().getChildren(); for (org.apache.commons.vfs2.FileObject child : children) { if (((child.getType()) == (org.apache.commons.vfs2.FileType.FILE)) && (child.getName().getBaseName().matches(pattern))) { classpath.add(child); } } } else { org.apache.accumulo.start.classloader.vfs.AccumuloVFSClassLoader.log.warn(("ignoring classpath entry " + fo)); } break; default : org.apache.accumulo.start.classloader.vfs.AccumuloVFSClassLoader.log.warn(("ignoring classpath entry " + fo)); break; } } return classpath.toArray(new org.apache.commons.vfs2.FileObject[classpath.size()]); }
private int updateAuthKeys(java.lang.String path) throws java.lang.InterruptedException, org.apache.zookeeper.KeeperException { int keysAdded = 0; for (java.lang.String child : zk.getChildren(path, this)) { java.lang.String childPath = (path + "/") + child; try { org.apache.accumulo.server.security.delegation.AuthenticationKey key = deserializeKey(zk.getData(childPath, this, null)); secretManager.addKey(key); keysAdded++; } catch (org.apache.zookeeper.KeeperException.NoNodeException e) { org.apache.accumulo.server.security.delegation.ZooAuthenticationKeyWatcher.log.trace("{} was deleted when we tried to access it", childPath); } } return keysAdded; }
private void addCellsToWriter(java.util.Map<java.nio.ByteBuffer, java.util.List<org.apache.accumulo.proxy.thrift.ColumnUpdate>> cells, org.apache.accumulo.proxy.ProxyServer.BatchWriterPlusException bwpe) { if ((bwpe.exception) != null) return; java.util.HashMap<org.apache.hadoop.io.Text, org.apache.accumulo.core.security.ColumnVisibility> vizMap = new java.util.HashMap<org.apache.hadoop.io.Text, org.apache.accumulo.core.security.ColumnVisibility>(); for (java.util.Map.Entry<java.nio.ByteBuffer, java.util.List<org.apache.accumulo.proxy.thrift.ColumnUpdate>> entry : cells.entrySet()) { org.apache.accumulo.core.data.Mutation m = new org.apache.accumulo.core.data.Mutation(org.apache.accumulo.core.util.ByteBufferUtil.toBytes(entry.getKey())); for (org.apache.accumulo.proxy.thrift.ColumnUpdate update : entry.getValue()) { org.apache.accumulo.core.security.ColumnVisibility viz = org.apache.accumulo.proxy.ProxyServer.EMPTY_VIS; if (update.isSetColVisibility()) { org.apache.hadoop.io.Text vizText = new org.apache.hadoop.io.Text(update.getColVisibility()); viz = vizMap.get(vizText); if (viz == null) { vizMap.put(vizText, (viz = new org.apache.accumulo.core.security.ColumnVisibility(vizText))); } } byte[] value = new byte[0]; if (update.isSetValue()) value = update.getValue(); if (update.isSetTimestamp()) { if ((update.isSetDeleteCell()) && (update.isDeleteCell())) { m.putDelete(update.getColFamily(), update.getColQualifier(), viz, update.getTimestamp()); } else { m.put(new org.apache.hadoop.io.Text(update.getColFamily()), new org.apache.hadoop.io.Text(update.getColQualifier()), viz, update.getTimestamp(), new org.apache.accumulo.core.data.Value(value)); } } else { if ((update.isSetDeleteCell()) && (update.isDeleteCell())) { m.putDelete(new org.apache.hadoop.io.Text(update.getColFamily()), new org.apache.hadoop.io.Text(update.getColQualifier()), viz); } else { m.put(new org.apache.hadoop.io.Text(update.getColFamily()), new org.apache.hadoop.io.Text(update.getColQualifier()), viz, new org.apache.accumulo.core.data.Value(value)); } } } try { bwpe.writer.addMutation(m); } catch (org.apache.accumulo.core.client.MutationsRejectedException mre) { bwpe.exception = mre; } } }
private org.apache.accumulo.core.file.FileOperations findFileFactory(java.lang.String file) { org.apache.hadoop.fs.Path p = new org.apache.hadoop.fs.Path(file); java.lang.String name = p.getName(); if (name.startsWith(((org.apache.accumulo.core.Constants.MAPFILE_EXTENSION) + "_"))) { return new org.apache.accumulo.core.file.map.MapFileOperations(); } java.lang.String[] sp = name.split("\\."); if ((sp.length) < 2) { throw new java.lang.IllegalArgumentException((("File name " + name) + " has no extension")); } java.lang.String extension = sp[((sp.length) - 1)]; if ((extension.equals(Constants.MAPFILE_EXTENSION)) || (extension.equals(((org.apache.accumulo.core.Constants.MAPFILE_EXTENSION) + "_tmp")))) { return new org.apache.accumulo.core.file.map.MapFileOperations(); } else if ((extension.equals(RFile.EXTENSION)) || (extension.equals(((org.apache.accumulo.core.file.rfile.RFile.EXTENSION) + "_tmp")))) { return new org.apache.accumulo.core.file.rfile.RFileOperations(); } else { throw new java.lang.IllegalArgumentException((("File type " + extension) + " not supported")); } }
protected org.apache.accumulo.core.data.Key buildDocKey() { if (log.isTraceEnabled()) log.trace(((("building doc key for " + (currentPartition)) + " ") + (currentDocID))); int zeroIndex = currentDocID.find("\u0000"); if (zeroIndex < 0) throw new java.lang.IllegalArgumentException("bad current docID"); org.apache.hadoop.io.Text colf = new org.apache.hadoop.io.Text(org.apache.accumulo.core.iterators.FamilyIntersectingIterator.docColf); colf.append(org.apache.accumulo.core.iterators.FamilyIntersectingIterator.nullByte, 0, 1); colf.append(currentDocID.getBytes(), 0, zeroIndex); org.apache.accumulo.core.iterators.FamilyIntersectingIterator.docColfSet = java.util.Collections.singleton(((org.apache.accumulo.core.data.ByteSequence) (new org.apache.accumulo.core.data.ArrayByteSequence(colf.getBytes(), 0, colf.getLength())))); if (log.isTraceEnabled()) log.trace(((zeroIndex + " ") + (currentDocID.getLength()))); org.apache.hadoop.io.Text colq = new org.apache.hadoop.io.Text(); colq.set(currentDocID.getBytes(), (zeroIndex + 1), (((currentDocID.getLength()) - zeroIndex) - 2)); org.apache.accumulo.core.data.Key k = new org.apache.accumulo.core.data.Key(currentPartition, colf, colq); if (log.isTraceEnabled()) log.trace(("built doc key for seek: " + (k.toString()))); return k; }
@java.lang.Override public boolean equals(java.lang.Object o) { if (o instanceof org.apache.accumulo.core.client.BatchWriterConfig) { org.apache.accumulo.core.client.BatchWriterConfig other = ((org.apache.accumulo.core.client.BatchWriterConfig) (o)); if (null != (this.maxMemory)) { if (!(this.maxMemory.equals(other.maxMemory))) { return false; } } else { if (null != (other.maxMemory)) { return false; } } if (null != (this.maxLatency)) { if (!(this.maxLatency.equals(other.maxLatency))) { return false; } } else { if (null != (other.maxLatency)) { return false; } } if (null != (this.maxWriteThreads)) { if (!(this.maxWriteThreads.equals(other.maxWriteThreads))) { return false; } } else { if (null != (other.maxWriteThreads)) { return false; } } if (null != (this.timeout)) { if (!(this.timeout.equals(other.timeout))) { return false; } } else { if (null != (other.timeout)) { return false; } } return true; } return false; }
@java.lang.Override protected void setupIterators(org.apache.hadoop.mapred.JobConf job, org.apache.accumulo.core.client.Scanner scanner, java.lang.String tableName, org.apache.accumulo.core.client.mapred.org.apache.accumulo.core.client.mapred.RangeInputSplit split) { java.util.List<org.apache.accumulo.core.client.IteratorSetting> iterators = null; if (null == split) { iterators = org.apache.accumulo.core.client.mapred.InputFormatBase.getIterators(job); } else { iterators = split.getIterators(); if (null == iterators) { iterators = org.apache.accumulo.core.client.mapred.InputFormatBase.getIterators(job); } } setupIterators(iterators, scanner); }
public static void printDiskUsage(org.apache.accumulo.core.conf.AccumuloConfiguration acuConf, java.util.Collection<java.lang.String> tables, org.apache.hadoop.fs.FileSystem fs, org.apache.accumulo.core.client.Connector conn, org.apache.accumulo.core.util.TableDiskUsage.Printer printer) throws java.io.IOException, org.apache.accumulo.core.client.TableNotFoundException { org.apache.accumulo.core.util.TableDiskUsage tdu = new org.apache.accumulo.core.util.TableDiskUsage(); java.util.HashSet<java.lang.String> tableIds = new java.util.HashSet<java.lang.String>(); for (java.lang.String tableName : tables) { java.lang.String tableId = conn.tableOperations().tableIdMap().get(tableName); if (tableId == null) throw new org.apache.accumulo.core.client.TableNotFoundException(null, tableName, (("Table " + tableName) + " not found")); tableIds.add(tableId); } for (java.lang.String tableId : tableIds) tdu.addTable(tableId); java.util.HashSet<java.lang.String> tablesReferenced = new java.util.HashSet<java.lang.String>(tableIds); java.util.HashSet<java.lang.String> emptyTableIds = new java.util.HashSet<java.lang.String>(); for (java.lang.String tableId : tableIds) { org.apache.accumulo.core.client.Scanner mdScanner = conn.createScanner(Constants.METADATA_TABLE_NAME, Constants.NO_AUTHS); mdScanner.fetchColumnFamily(Constants.METADATA_DATAFILE_COLUMN_FAMILY); mdScanner.setRange(new org.apache.accumulo.core.data.KeyExtent(new org.apache.hadoop.io.Text(tableId), null, null).toMetadataRange()); if (!(mdScanner.iterator().hasNext())) { emptyTableIds.add(tableId); } for (java.util.Map.Entry<org.apache.accumulo.core.data.Key, org.apache.accumulo.core.data.Value> entry : mdScanner) { java.lang.String file = entry.getKey().getColumnQualifier().toString(); if (file.startsWith("../")) { file = file.substring(2); tablesReferenced.add(file.split("\\/")[1]); } else file = ("/" + tableId) + file; tdu.linkFileAndTable(tableId, file); } } for (java.lang.String tableId : tablesReferenced) { org.apache.hadoop.fs.FileStatus[] files = fs.globStatus(new org.apache.hadoop.fs.Path(((((org.apache.accumulo.core.Constants.getTablesDir(acuConf)) + "/") + tableId) + "/*/*"))); for (org.apache.hadoop.fs.FileStatus fileStatus : files) { java.lang.String dir = fileStatus.getPath().getParent().getName(); java.lang.String name = fileStatus.getPath().getName(); tdu.addFileSize(((((("/" + tableId) + "/") + dir) + "/") + name), fileStatus.getLen()); } } java.util.HashMap<java.lang.String, java.lang.String> reverseTableIdMap = new java.util.HashMap<java.lang.String, java.lang.String>(); for (java.util.Map.Entry<java.lang.String, java.lang.String> entry : conn.tableOperations().tableIdMap().entrySet()) reverseTableIdMap.put(entry.getValue(), entry.getKey()); java.util.TreeMap<java.util.TreeSet<java.lang.String>, java.lang.Long> usage = new java.util.TreeMap<java.util.TreeSet<java.lang.String>, java.lang.Long>(new java.util.Comparator<java.util.TreeSet<java.lang.String>>() { @java.lang.Override public int compare(java.util.TreeSet<java.lang.String> o1, java.util.TreeSet<java.lang.String> o2) { int len1 = o1.size(); int len2 = o2.size(); int min = java.lang.Math.min(len1, len2); java.util.Iterator<java.lang.String> iter1 = o1.iterator(); java.util.Iterator<java.lang.String> iter2 = o2.iterator(); int count = 0; while (count < min) { java.lang.String s1 = iter1.next(); java.lang.String s2 = iter2.next(); int cmp = s1.compareTo(s2); if (cmp != 0) return cmp; count++; } return len1 - len2; } }); for (java.util.Map.Entry<java.util.List<java.lang.String>, java.lang.Long> entry : tdu.calculateUsage().entrySet()) { java.util.TreeSet<java.lang.String> tableNames = new java.util.TreeSet<java.lang.String>(); for (java.lang.String tableId : entry.getKey()) tableNames.add(reverseTableIdMap.get(tableId)); usage.put(tableNames, entry.getValue()); } if (!(emptyTableIds.isEmpty())) { java.util.TreeSet<java.lang.String> emptyTables = new java.util.TreeSet<java.lang.String>(); for (java.lang.String tableId : emptyTableIds) { emptyTables.add(reverseTableIdMap.get(tableId)); } usage.put(emptyTables, 0L); } for (java.util.Map.Entry<java.util.TreeSet<java.lang.String>, java.lang.Long> entry : usage.entrySet()) printer.print(java.lang.String.format("%,24d %s", entry.getValue(), entry.getKey())); }
public java.lang.Object restoreAfterSerialization(final java.io.Serializable serializable) { if (serializable == null) { return null; } else if ((!(storeAfterSessionReplication())) || (serializable instanceof org.apache.wicket.Page)) { return serializable; } else if (serializable instanceof org.apache.wicket.pageStore.DefaultPageStore.SerializedPage) { org.apache.wicket.pageStore.DefaultPageStore.SerializedPage page = ((org.apache.wicket.pageStore.DefaultPageStore.SerializedPage) (serializable)); if ((page.getData()) != null) { storePageData(page.getSessionId(), page.getPageId(), page.getData()); return new org.apache.wicket.pageStore.DefaultPageStore.SerializedPage(page.getSessionId(), page.getPageId(), null); } return page; } java.lang.String type = serializable.getClass().getName(); throw new java.lang.IllegalArgumentException(("Unknown object type " + type)); }
public ServletWebRequest(javax.servlet.http.HttpServletRequest httpServletRequest, java.lang.String filterPrefix, org.apache.wicket.request.Url url) { org.apache.wicket.util.lang.Args.notNull(httpServletRequest, "httpServletRequest"); org.apache.wicket.util.lang.Args.notNull(filterPrefix, "filterPrefix"); this.httpServletRequest = httpServletRequest; errorAttributes = org.apache.wicket.protocol.http.servlet.ErrorAttributes.of(httpServletRequest, filterPrefix); forwardAttributes = org.apache.wicket.protocol.http.servlet.ForwardAttributes.of(httpServletRequest, filterPrefix); if (((forwardAttributes) != null) || ((errorAttributes) != null)) { if (org.apache.wicket.protocol.http.servlet.ServletWebRequest.LOG.isDebugEnabled()) { org.apache.wicket.protocol.http.servlet.ServletWebRequest.LOG.debug("Setting filterPrefix('{}') to '' because there is either an error or a forward. {}, {}", new java.lang.Object[]{ filterPrefix, forwardAttributes, errorAttributes }); } this.filterPrefix = ""; } else { this.filterPrefix = filterPrefix; } if (url != null) { this.url = url; } else { this.url = getContextRelativeUrl(httpServletRequest.getRequestURI(), filterPrefix); } }
void setModelImpl(org.apache.wicket.model.IModel<?> model) { if (getFlag(org.apache.wicket.Component.FLAG_MODEL_SET)) { if (model != null) { data_set(0, model); if ((getFlag(org.apache.wicket.Component.FLAG_INHERITABLE_MODEL)) && (!(model instanceof org.apache.wicket.model.IComponentInheritedModel))) { setFlag(org.apache.wicket.Component.FLAG_INHERITABLE_MODEL, false); } } else { data_remove(0); setFlag(org.apache.wicket.Component.FLAG_MODEL_SET, false); } } else { if (model != null) { data_insert(0, model); setFlag(org.apache.wicket.Component.FLAG_MODEL_SET, true); } } }
public static org.apache.wicket.request.Url parse(java.lang.CharSequence _url, java.nio.charset.Charset charset) { org.apache.wicket.util.lang.Args.notNull(_url, "_url"); final org.apache.wicket.request.Url result = new org.apache.wicket.request.Url(charset); charset = result.getCharset(); java.lang.String url = _url.toString(); final java.lang.String queryString; final java.lang.String absoluteUrl; final int queryAt = url.indexOf('?'); if (queryAt == (-1)) { queryString = ""; absoluteUrl = url; } else { absoluteUrl = url.substring(0, queryAt); queryString = url.substring((queryAt + 1)); } java.lang.String relativeUrl; final int idxOfFirstSlash = absoluteUrl.indexOf('/'); final int protocolAt = absoluteUrl.indexOf("://"); if ((protocolAt > (-1)) && (protocolAt < idxOfFirstSlash)) { result.protocol = absoluteUrl.substring(0, protocolAt).toLowerCase(java.util.Locale.US); final java.lang.String afterProto = absoluteUrl.substring((protocolAt + 3)); final java.lang.String hostAndPort; int relativeAt = afterProto.indexOf('/'); if (relativeAt == (-1)) { relativeAt = afterProto.indexOf(';'); } if (relativeAt == (-1)) { relativeUrl = ""; hostAndPort = afterProto; } else { relativeUrl = afterProto.substring(relativeAt); hostAndPort = afterProto.substring(0, relativeAt); } final int portAt = hostAndPort.lastIndexOf(':'); if (portAt == (-1)) { result.host = hostAndPort; result.port = org.apache.wicket.request.Url.getDefaultPortForProtocol(result.protocol); } else { result.host = hostAndPort.substring(0, portAt); result.port = java.lang.Integer.parseInt(hostAndPort.substring((portAt + 1))); } if (relativeAt < 0) { relativeUrl = "/"; } } else { relativeUrl = absoluteUrl; } if ((relativeUrl.length()) > 0) { boolean removeLast = false; if (relativeUrl.endsWith("/")) { relativeUrl += "/x"; removeLast = true; } java.lang.String[] segmentArray = org.apache.wicket.util.string.Strings.split(relativeUrl, '/'); if (removeLast) { segmentArray[((segmentArray.length) - 1)] = null; } for (java.lang.String s : segmentArray) { if (s != null) { result.segments.add(org.apache.wicket.request.Url.decodeSegment(s, charset)); } } } if ((queryString.length()) > 0) { java.lang.String[] queryArray = org.apache.wicket.util.string.Strings.split(queryString, '&'); for (java.lang.String s : queryArray) { if ((org.apache.wicket.util.string.Strings.isEmpty(s)) == false) { result.parameters.add(org.apache.wicket.request.Url.parseQueryParameter(s, charset)); } } } return result; }
public void dequeue(org.apache.wicket.DequeueContext dequeue) { while (dequeue.isAtOpenOrOpenCloseTag()) { org.apache.wicket.markup.ComponentTag tag = dequeue.takeTag(); org.apache.wicket.Component child = get(tag.getId()); if (child == null) { child = dequeue.findComponentToDequeue(tag); if (child != null) { addDequeuedComponent(child, tag); if (child instanceof org.apache.wicket.IQueueRegion) { ((org.apache.wicket.MarkupContainer) (child)).dequeue(); } } } if ((child == null) || (!(child instanceof org.apache.wicket.MarkupContainer))) { if ((tag.isOpen()) && (!(tag.hasNoCloseTag()))) { dequeue.skipToCloseTag(); } } else { org.apache.wicket.MarkupContainer container = ((org.apache.wicket.MarkupContainer) (child)); if (container instanceof org.apache.wicket.IQueueRegion) { if (tag.isOpen()) { dequeue.skipToCloseTag(); } } else if (tag.isOpen()) { dequeue.pushContainer(container); container.dequeue(dequeue); dequeue.popContainer(); } } if ((tag.isOpen()) && (!(tag.hasNoCloseTag()))) { org.apache.wicket.markup.ComponentTag close = dequeue.takeTag(); if (!(close.closes(tag))) { throw new java.lang.IllegalStateException(java.lang.String.format("Tag '%s' should be the closing one for '%s'", close, tag)); } } } }
public static boolean isEqual(javax.servlet.http.Cookie c1, javax.servlet.http.Cookie c2) { org.apache.wicket.util.lang.Args.notNull(c1, "c1"); org.apache.wicket.util.lang.Args.notNull(c2, "c2"); return ((c1.getName().equals(c2.getName())) && ((((c1.getPath()) == null) && ((c2.getPath()) == null)) || (c1.getPath().equals(c2.getPath())))) && ((((c1.getDomain()) == null) && ((c2.getDomain()) == null)) || (c1.getDomain().equals(c2.getDomain()))); }
public org.apache.wicket.Component setDefaultModel(final org.apache.wicket.model.IModel<?> model) { org.apache.wicket.model.IModel<?> prevModel = getModelImpl(); if (prevModel != null) { prevModel.detach(); } org.apache.wicket.model.IModel<?> wrappedModel = prevModel; if (prevModel instanceof org.apache.wicket.model.IWrapModel) { wrappedModel = ((org.apache.wicket.model.IWrapModel<?>) (prevModel)).getWrappedModel(); } if (wrappedModel != model) { if (wrappedModel != null) { addStateChange(); } setModelImpl(wrap(model)); } modelChanged(); return this; }
@java.lang.Override public C convertToObject(java.lang.String value, java.util.Locale locale) { if (value == null) { return null; } java.lang.Class<C> theType = type.get(); if ("".equals(value)) { if (java.lang.String.class.equals(theType)) { return theType.cast(""); } return null; } try { C converted = org.apache.wicket.util.lang.Objects.convertValue(value, theType); if (converted != null) { return converted; } if (theType.isInstance(value)) { return theType.cast(value); } } catch (java.lang.Exception e) { throw new org.apache.wicket.util.convert.ConversionException(e.getMessage(), e).setSourceValue(value); } throw new org.apache.wicket.util.convert.ConversionException((((("Could not convert value: " + value) + " to type: ") + (theType.getName())) + ". Could not find compatible converter.")).setSourceValue(value); }
protected boolean isValidAuthority(java.lang.String authority) { if (authority == null) { return false; } java.util.regex.Matcher authorityMatcher = java.util.regex.Pattern.compile(org.apache.wicket.validation.validator.UrlValidator.AUTHORITY_PATTERN).matcher(authority); if (!(authorityMatcher.matches())) { return false; } boolean ipV4Address = false; boolean hostname = false; java.lang.String hostIP = authorityMatcher.group(org.apache.wicket.validation.validator.UrlValidator.PARSE_AUTHORITY_HOST_IP); java.util.regex.Matcher matchIPV4Pat = java.util.regex.Pattern.compile(org.apache.wicket.validation.validator.UrlValidator.IP_V4_DOMAIN_PATTERN).matcher(hostIP); ipV4Address = matchIPV4Pat.matches(); if (ipV4Address) { for (int i = 1; i <= 4; i++) { java.lang.String ipSegment = matchIPV4Pat.group(i); if ((ipSegment == null) || ((ipSegment.length()) <= 0)) { return false; } try { if ((java.lang.Integer.parseInt(ipSegment)) > 255) { return false; } } catch (java.lang.NumberFormatException e) { return false; } } } else { hostname = java.util.regex.Pattern.compile(org.apache.wicket.validation.validator.UrlValidator.DOMAIN_PATTERN).matcher(hostIP).matches(); } if (hostname) { char[] chars = hostIP.toCharArray(); int size = 1; for (char ch : chars) { if (ch == '.') { size++; } } java.lang.String[] domainSegment = new java.lang.String[size]; boolean match = true; int segmentCount = 0; int segmentLength = 0; while (match) { java.util.regex.Matcher atomMatcher = java.util.regex.Pattern.compile(org.apache.wicket.validation.validator.UrlValidator.ATOM_PATTERN).matcher(hostIP); match = atomMatcher.find(); if (match) { domainSegment[segmentCount] = atomMatcher.group(1); segmentLength = (domainSegment[segmentCount].length()) + 1; hostIP = (segmentLength >= (hostIP.length())) ? "" : hostIP.substring(segmentLength); segmentCount++; } } if (segmentCount > 1) { java.lang.String topLevel = domainSegment[(segmentCount - 1)]; if (((topLevel.length()) < 2) || ((topLevel.length()) > 4)) { return false; } java.util.regex.Matcher alphaMatcher = java.util.regex.Pattern.compile(org.apache.wicket.validation.validator.UrlValidator.ALPHA_PATTERN).matcher(topLevel.substring(0, 1)); if (!(alphaMatcher.matches())) { return false; } } } if ((!hostname) && (!ipV4Address)) { return false; } java.lang.String port = authorityMatcher.group(org.apache.wicket.validation.validator.UrlValidator.PARSE_AUTHORITY_PORT); if (port != null) { java.util.regex.Matcher portMatcher = java.util.regex.Pattern.compile(org.apache.wicket.validation.validator.UrlValidator.PORT_PATTERN).matcher(port); if (!(portMatcher.matches())) { return false; } } java.lang.String extra = authorityMatcher.group(org.apache.wicket.validation.validator.UrlValidator.PARSE_AUTHORITY_EXTRA); if (!(org.apache.wicket.validation.validator.UrlValidator.isBlankOrNull(extra))) { return false; } return true; }
@java.lang.Override public boolean equals(final java.lang.Object obj) { if (obj instanceof org.apache.wicket.util.string.StringValue) { org.apache.wicket.util.string.StringValue stringValue = ((org.apache.wicket.util.string.StringValue) (obj)); return (org.apache.wicket.util.lang.Objects.isEqual(text, stringValue.text)) && (locale.equals(stringValue.locale)); } else { return false; } }
private org.apache.wicket.request.mapper.parameter.PageParameters cleanPageParameters(final org.apache.wicket.request.mapper.parameter.PageParameters originalParameters) { org.apache.wicket.request.mapper.parameter.PageParameters cleanParameters = null; if (originalParameters != null) { cleanParameters = new org.apache.wicket.request.mapper.parameter.PageParameters(originalParameters); cleanParameters.remove(WebRequest.PARAM_AJAX); cleanParameters.remove(WebRequest.PARAM_AJAX_BASE_URL); cleanParameters.remove(WebRequest.PARAM_AJAX_REQUEST_ANTI_CACHE); if (cleanParameters.isEmpty()) { cleanParameters = null; } } return cleanParameters; }
@java.lang.SuppressWarnings("unchecked") private void readObject(final java.io.ObjectInputStream s) throws java.io.IOException, java.lang.ClassNotFoundException { modCount = new java.util.concurrent.atomic.AtomicInteger(0); s.defaultReadObject(); int numBuckets = s.readInt(); table = new org.apache.wicket.util.collections.IntHashMap.Entry[numBuckets]; init(); int size = s.readInt(); for (int i = 0; i < size; i++) { int key = s.readInt(); V value = ((V) (s.readObject())); putForCreate(key, value); } }
public final void removeAll() { if ((children) != null) { addStateChange(); int size = children_size(); for (int i = 0; i < size; i++) { java.lang.Object childObject = children_get(i, false); if (childObject instanceof org.apache.wicket.Component) { final org.apache.wicket.Component child = ((org.apache.wicket.Component) (childObject)); child.internalOnRemove(); child.detachModel(); child.setParent(null); } } children = null; } }
boolean processRequest(javax.servlet.ServletRequest request, final javax.servlet.ServletResponse response, final javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { final org.apache.wicket.ThreadContext previousThreadContext = org.apache.wicket.ThreadContext.detach(); boolean res = true; final java.lang.ClassLoader previousClassLoader = java.lang.Thread.currentThread().getContextClassLoader(); final java.lang.ClassLoader newClassLoader = getClassLoader(); try { if (previousClassLoader != newClassLoader) { java.lang.Thread.currentThread().setContextClassLoader(newClassLoader); } javax.servlet.http.HttpServletRequest httpServletRequest = ((javax.servlet.http.HttpServletRequest) (request)); javax.servlet.http.HttpServletResponse httpServletResponse = ((javax.servlet.http.HttpServletResponse) (response)); java.lang.String filterPath = getFilterPath(httpServletRequest); if (filterPath == null) { throw new java.lang.IllegalStateException("filter path was not configured"); } if (shouldIgnorePath(httpServletRequest)) { org.apache.wicket.protocol.http.WicketFilter.log.debug("Ignoring request {}", httpServletRequest.getRequestURL()); if (chain != null) { chain.doFilter(request, response); } return false; } if ("OPTIONS".equalsIgnoreCase(httpServletRequest.getMethod())) { httpServletResponse.setStatus(HttpServletResponse.SC_OK); httpServletResponse.setHeader("Allow", "GET,POST,OPTIONS,PUT,HEAD,PATCH,DELETE,TRACE"); httpServletResponse.setHeader("Content-Length", "0"); return true; } java.lang.String redirectURL = checkIfRedirectRequired(httpServletRequest); if (redirectURL == null) { org.apache.wicket.ThreadContext.setApplication(application); org.apache.wicket.request.http.WebRequest webRequest = application.createWebRequest(httpServletRequest, filterPath); org.apache.wicket.request.http.WebResponse webResponse = application.createWebResponse(webRequest, httpServletResponse); org.apache.wicket.request.cycle.RequestCycle requestCycle = application.createRequestCycle(webRequest, webResponse); res = processRequestCycle(requestCycle, webResponse, httpServletRequest, httpServletResponse, chain); } else { if ((org.apache.wicket.util.string.Strings.isEmpty(httpServletRequest.getQueryString())) == false) { redirectURL += "?" + (httpServletRequest.getQueryString()); } try { httpServletResponse.sendRedirect(httpServletResponse.encodeRedirectURL(redirectURL)); } catch (java.io.IOException e) { throw new java.lang.RuntimeException(e); } } } finally { org.apache.wicket.ThreadContext.restore(previousThreadContext); if (newClassLoader != previousClassLoader) { java.lang.Thread.currentThread().setContextClassLoader(previousClassLoader); } if (response.isCommitted()) { response.flushBuffer(); } } return res; }
public void scheduleRequestHandlerAfterCurrent(org.apache.wicket.request.IRequestHandler handler) { requestHandlerExecutor.schedule(handler); if (handler != null) listeners.onRequestHandlerScheduled(handler); }
protected void redirectTo(org.apache.wicket.request.Url url, org.apache.wicket.request.cycle.RequestCycle requestCycle) { bindSessionIfNeeded(); org.apache.wicket.request.http.WebResponse response = ((org.apache.wicket.request.http.WebResponse) (requestCycle.getResponse())); java.lang.String relativeUrl = requestCycle.getUrlRenderer().renderUrl(url); response.sendRedirect(relativeUrl); }
public OnChangeAjaxBehavior() { super(org.apache.wicket.ajax.form.OnChangeAjaxBehavior.EVENT_NAME); }
public java.lang.String getMessage(java.lang.String key) { final org.apache.wicket.markup.html.form.FormComponent<T> formComponent = this; final org.apache.wicket.Localizer localizer = formComponent.getLocalizer(); java.lang.String prefix = formComponent.getValidatorKeyPrefix(); java.lang.String message = null; java.lang.String resource = prefix(prefix, (((org.apache.wicket.markup.html.form.FormComponent.MessageSource.getId()) + ".") + key)); message = getString(localizer, resource, formComponent); if ((org.apache.wicket.util.string.Strings.isEmpty(message)) && (org.apache.wicket.util.string.Strings.isEmpty(prefix))) { resource = ((org.apache.wicket.markup.html.form.FormComponent.MessageSource.getId()) + ".") + key; message = getString(localizer, resource, formComponent); } if (org.apache.wicket.util.string.Strings.isEmpty(message)) { resource = prefix(prefix, key); message = getString(localizer, key, formComponent); } if ((org.apache.wicket.util.string.Strings.isEmpty(message)) && (org.apache.wicket.util.string.Strings.isEmpty(prefix))) { message = getString(localizer, key, formComponent); } if (org.apache.wicket.util.string.Strings.isEmpty(message)) { message = null; } return message; }
@java.lang.Override public void onInstantiation(org.apache.wicket.Component component) { java.lang.Class<? extends org.apache.wicket.Component> componentClass = component.getClass(); if ((componentClass.isAnonymousClass()) || ((componentClass.isMemberClass()) && ((java.lang.reflect.Modifier.isStatic(componentClass.getModifiers())) == false))) { org.apache.wicket.cdi.ComponentInjector.LOG.debug("Skipping non-static inner class '{}' ", componentClass); } else { inject(component); } }
public static void set() { org.apache.wicket.Session session = org.apache.wicket.Session.get(); session.bind(); org.apache.wicket.RestartResponseAtInterceptPageException.InterceptData data = new org.apache.wicket.RestartResponseAtInterceptPageException.InterceptData(); org.apache.wicket.request.Request request = org.apache.wicket.request.cycle.RequestCycle.get().getRequest(); data.originalUrl = request.getOriginalUrl(); java.util.Iterator<org.apache.wicket.request.Url.QueryParameter> itor = data.originalUrl.getQueryParameters().iterator(); while (itor.hasNext()) { org.apache.wicket.request.Url.QueryParameter parameter = itor.next(); java.lang.String parameterName = parameter.getName(); if (((WebRequest.PARAM_AJAX.equals(parameterName)) || (WebRequest.PARAM_AJAX_BASE_URL.equals(parameterName))) || (WebRequest.PARAM_AJAX_REQUEST_ANTI_CACHE.equals(parameterName))) { itor.remove(); } } data.postParameters = new java.util.HashMap<java.lang.String, java.util.List<org.apache.wicket.util.string.StringValue>>(); for (java.lang.String s : request.getPostParameters().getParameterNames()) { if (((WebRequest.PARAM_AJAX.equals(s)) || (WebRequest.PARAM_AJAX_BASE_URL.equals(s))) || (WebRequest.PARAM_AJAX_REQUEST_ANTI_CACHE.equals(s))) { continue; } data.postParameters.put(s, new java.util.ArrayList<org.apache.wicket.util.string.StringValue>(request.getPostParameters().getParameterValues(s))); } data.continueOk = false; session.setMetaData(org.apache.wicket.RestartResponseAtInterceptPageException.InterceptData.key, data); }
public void addHeader(java.lang.String name, java.lang.String value) { value = org.apache.wicket.util.lang.Args.notNull(value, "value").trim(); internalAdd(name, value); }
@java.lang.Override protected org.apache.wicket.core.request.mapper.UrlInfo parseRequest(org.apache.wicket.request.Request request) { if (org.apache.wicket.Application.exists()) { if (org.apache.wicket.Application.get().getSecuritySettings().getEnforceMounts()) { return null; } } org.apache.wicket.request.Url url = request.getUrl(); if (matches(url)) { org.apache.wicket.request.mapper.info.PageComponentInfo info = getPageComponentInfo(url); java.lang.String className = url.getSegments().get(2); java.lang.Class<? extends org.apache.wicket.request.component.IRequestablePage> pageClass = getPageClass(className); if ((pageClass != null) && (org.apache.wicket.request.component.IRequestablePage.class.isAssignableFrom(pageClass))) { org.apache.wicket.request.mapper.parameter.PageParameters pageParameters = extractPageParameters(request, 3, pageParametersEncoder); return new org.apache.wicket.core.request.mapper.UrlInfo(info, pageClass, pageParameters); } } return null; }
@java.lang.Override protected org.apache.wicket.request.Url buildUrl(org.apache.wicket.core.request.mapper.UrlInfo info) { org.apache.wicket.request.Url url = new org.apache.wicket.request.Url(); for (java.lang.String s : mountSegments) { url.getSegments().add(s); } encodePageComponentInfo(url, info.getPageComponentInfo()); org.apache.wicket.request.mapper.parameter.PageParameters copy = new org.apache.wicket.request.mapper.parameter.PageParameters(info.getPageParameters()); int dropped = 0; for (int i = 0; i < (mountSegments.length); ++i) { java.lang.String placeholder = getPlaceholder(mountSegments[i]); java.lang.String optionalPlaceholder = getOptionalPlaceholder(mountSegments[i]); if (placeholder != null) { if (!(copy.getNamedKeys().contains(placeholder))) { return null; } url.getSegments().set((i - dropped), copy.get(placeholder).toString("")); copy.remove(placeholder); } else if (optionalPlaceholder != null) { if (copy.getNamedKeys().contains(optionalPlaceholder)) { url.getSegments().set((i - dropped), copy.get(optionalPlaceholder).toString("")); copy.remove(optionalPlaceholder); } else { url.getSegments().remove((i - dropped)); dropped++; } } } return encodePageParameters(url, copy, pageParametersEncoder); }
protected java.lang.String getMinifiedName() { java.lang.String name = super.getName(); java.lang.String minifiedName; int idxOfExtension = name.lastIndexOf('.'); if (idxOfExtension > (-1)) { java.lang.String extension = name.substring(idxOfExtension); final java.lang.String baseName = name.substring(0, (((name.length()) - (extension.length())) + 1)); if ((!(".min".equals(extension))) && (!(baseName.endsWith(".min.")))) { minifiedName = (baseName + "min") + extension; } else { minifiedName = name; } } else { minifiedName = name + ".min"; } return minifiedName; }
@java.lang.SuppressWarnings("unchecked") public java.lang.Class<T> getObjectClass() { final java.lang.String expression = propertyExpression(); if (org.apache.wicket.util.string.Strings.isEmpty(expression)) { java.lang.Object target = getTarget(); return ((java.lang.Class<T>) (target != null ? target.getClass() : null)); } final java.lang.Object target = getTarget(); if (target != null) { try { return ((java.lang.Class<T>) (org.apache.wicket.util.lang.PropertyResolver.getPropertyClass(expression, target))); } catch (java.lang.Exception e) { } } else if ((this.target) instanceof org.apache.wicket.model.IObjectClassAwareModel) { try { java.lang.Class<?> targetClass = ((org.apache.wicket.model.IObjectClassAwareModel<?>) (this.target)).getObjectClass(); if (targetClass != null) { return org.apache.wicket.util.lang.PropertyResolver.getPropertyClass(expression, targetClass); } } catch (org.apache.wicket.WicketRuntimeException e) { } } return null; }
@java.lang.Override public void addCookie(final javax.servlet.http.Cookie cookie) { java.util.Iterator<javax.servlet.http.Cookie> iterator = cookies.iterator(); while (iterator.hasNext()) { javax.servlet.http.Cookie old = iterator.next(); if (((cookie.getName().equals(old.getName())) && ((((cookie.getPath()) == null) && ((old.getPath()) == null)) || (cookie.getPath().equals(old.getPath())))) && ((((cookie.getDomain()) == null) && ((old.getDomain()) == null)) || (cookie.getDomain().equals(old.getDomain())))) { iterator.remove(); } } cookies.add(cookie); }
protected final org.apache.wicket.Component getChild() { if ((childComponent) == null) { childComponent = get(childId); } if ((childComponent) == null) { childComponent = getChildComponent(new org.apache.wicket.markup.MarkupStream(getMarkup()), getEnclosureParent()); } return childComponent; }
public java.lang.String stripCommentsAndWhitespace(java.lang.String original) { org.apache.wicket.util.string.AppendingStringBuffer result = new org.apache.wicket.util.string.AppendingStringBuffer(((original.length()) / 2)); int state = org.apache.wicket.core.util.string.JavaScriptStripper.REGULAR_TEXT; boolean wasNewLineInWhitespace = false; for (int i = 0; i < (original.length()); ++i) { char c = original.charAt(i); char next = (i < ((original.length()) - 1)) ? original.charAt((i + 1)) : 0; char prev = (i > 0) ? original.charAt((i - 1)) : 0; if (state == (org.apache.wicket.core.util.string.JavaScriptStripper.WHITE_SPACE)) { if ((c == '\n') && (!wasNewLineInWhitespace)) { result.append("\n"); wasNewLineInWhitespace = true; } if ((java.lang.Character.isWhitespace(next)) == false) { state = org.apache.wicket.core.util.string.JavaScriptStripper.REGULAR_TEXT; } continue; } if (state == (org.apache.wicket.core.util.string.JavaScriptStripper.REGULAR_TEXT)) { if (((c == '/') && (next == '/')) && (prev != '\\')) { state = org.apache.wicket.core.util.string.JavaScriptStripper.LINE_COMMENT; continue; } else if ((c == '/') && (next == '*')) { state = org.apache.wicket.core.util.string.JavaScriptStripper.MULTILINE_COMMENT; ++i; continue; } else if (c == '/') { int idx = (result.length()) - 1; while (idx > 0) { char tmp = result.charAt(idx); if (java.lang.Character.isWhitespace(tmp)) { idx--; continue; } if ((((((((tmp == '=') || (tmp == '(')) || (tmp == '{')) || (tmp == ':')) || (tmp == ',')) || (tmp == '[')) || (tmp == ';')) || (tmp == '!')) { state = org.apache.wicket.core.util.string.JavaScriptStripper.REG_EXP; break; } break; } } else if ((java.lang.Character.isWhitespace(c)) && (java.lang.Character.isWhitespace(next))) { if ((c == '\n') || (next == '\n')) { c = '\n'; wasNewLineInWhitespace = true; } else { c = ' '; wasNewLineInWhitespace = false; } state = org.apache.wicket.core.util.string.JavaScriptStripper.WHITE_SPACE; } else if (c == '\'') { state = org.apache.wicket.core.util.string.JavaScriptStripper.STRING_SINGLE_QUOTE; } else if (c == '"') { state = org.apache.wicket.core.util.string.JavaScriptStripper.STRING_DOUBLE_QUOTES; } result.append(c); continue; } if (state == (org.apache.wicket.core.util.string.JavaScriptStripper.LINE_COMMENT)) { if ((c == '\n') || (c == '\r')) { state = org.apache.wicket.core.util.string.JavaScriptStripper.REGULAR_TEXT; result.append(c); continue; } } if (state == (org.apache.wicket.core.util.string.JavaScriptStripper.MULTILINE_COMMENT)) { if ((c == '*') && (next == '/')) { state = org.apache.wicket.core.util.string.JavaScriptStripper.REGULAR_TEXT; ++i; continue; } } if (state == (org.apache.wicket.core.util.string.JavaScriptStripper.STRING_SINGLE_QUOTE)) { int count = getPrevCount(original, i, '\\'); if ((c == '\'') && ((count % 2) == 0)) { state = org.apache.wicket.core.util.string.JavaScriptStripper.REGULAR_TEXT; } result.append(c); continue; } if (state == (org.apache.wicket.core.util.string.JavaScriptStripper.STRING_DOUBLE_QUOTES)) { int count = getPrevCount(original, i, '\\'); if ((c == '"') && ((count % 2) == 0)) { state = org.apache.wicket.core.util.string.JavaScriptStripper.REGULAR_TEXT; } result.append(c); continue; } if (state == (org.apache.wicket.core.util.string.JavaScriptStripper.REG_EXP)) { int count = getPrevCount(original, i, '\\'); if ((c == '/') && ((count % 2) == 0)) { state = org.apache.wicket.core.util.string.JavaScriptStripper.REGULAR_TEXT; } result.append(c); } } return result.toString(); }
@java.lang.Override public void component(final org.apache.wicket.Component component, final org.apache.wicket.util.visit.IVisit<java.lang.Void> visit) { if (component != rootComponent) { component.renderHead(headerContainer); } }
protected boolean isValidPath(java.lang.String path) { if (path == null) { return false; } java.util.regex.Matcher pathMatcher = java.util.regex.Pattern.compile(org.apache.wicket.validation.validator.UrlValidator.PATH_PATTERN).matcher(path); if (!(pathMatcher.matches())) { return false; } int slash2Count = countToken("//", path); if ((isOff(org.apache.wicket.validation.validator.UrlValidator.ALLOW_2_SLASHES)) && (slash2Count > 0)) { return false; } int slashCount = countToken("/", path); int dot2Count = countToken("..", path); if (dot2Count > 0) { if (((slashCount - slash2Count) - 1) <= dot2Count) { return false; } } return true; }
@java.lang.Override public org.apache.wicket.bean.validation.Property resolveProperty(org.apache.wicket.markup.html.form.FormComponent<?> component) { org.apache.wicket.model.IModel<?> model = component.getModel(); while (true) { if (model == null) { return null; } if (model instanceof org.apache.wicket.model.IPropertyReflectionAwareModel) { break; } if (model instanceof org.apache.wicket.model.IWrapModel<?>) { model = ((org.apache.wicket.model.IWrapModel<?>) (model)).getWrappedModel(); continue; } return null; } org.apache.wicket.model.IPropertyReflectionAwareModel<?> delegate = ((org.apache.wicket.model.IPropertyReflectionAwareModel<?>) (model)); java.lang.reflect.Field field = delegate.getPropertyField(); if (field != null) { return new org.apache.wicket.bean.validation.Property(field.getDeclaringClass(), field.getName()); } java.lang.reflect.Method getter = delegate.getPropertyGetter(); if (getter != null) { java.lang.String name = (getter.getName().substring(3, 4).toLowerCase()) + (getter.getName().substring(4)); return new org.apache.wicket.bean.validation.Property(getter.getDeclaringClass(), name); } return null; }
@java.lang.Override protected void onDetach() { super.onDetach(); renderedComponentsPerScope = null; headerResponse = null; }
private void handleHeaderItemsTag(org.apache.wicket.markup.ComponentTag tag) { if (((tag.isOpen()) || (tag.isOpenClose())) && (foundHeaderItemsTag)) { throw new org.apache.wicket.markup.MarkupException(new org.apache.wicket.markup.MarkupStream(markup), "More than one <wicket:header-items/> detected in the <head> element. Only one is allowed."); } else if (foundClosingHead) { throw new org.apache.wicket.markup.MarkupException(new org.apache.wicket.markup.MarkupStream(markup), "Detected <wicket:header-items/> after the closing </head> element."); } foundHeaderItemsTag = true; tag.setId(org.apache.wicket.markup.parser.filter.HtmlHeaderSectionHandler.HEADER_ID); tag.setAutoComponentTag(true); tag.setModified(true); tag.setAutoComponentFactory(org.apache.wicket.markup.parser.filter.HtmlHeaderSectionHandler.HTML_HEADER_ITEMS_FACTORY); }
@java.lang.Override protected final void onEvent(final org.apache.wicket.ajax.AjaxRequestTarget target) { final org.apache.wicket.markup.html.form.FormComponent<?> formComponent = getFormComponent(); if (("blur".equals(getEvent().toLowerCase())) && (disableFocusOnBlur())) { target.focusComponent(null); } try { formComponent.inputChanged(); formComponent.validate(); if (formComponent.isValid()) { formComponent.valid(); if (getUpdateModel()) { formComponent.updateModel(); } onUpdate(target); } else { formComponent.invalid(); onError(target, null); } } catch (java.lang.RuntimeException e) { onError(target, e); } }
private void resolvePageInstance(java.lang.Integer pageId, java.lang.Class<? extends org.apache.wicket.request.component.IRequestablePage> pageClass, org.apache.wicket.request.mapper.parameter.PageParameters pageParameters, java.lang.Integer renderCount) { org.apache.wicket.request.component.IRequestablePage page = null; boolean freshCreated = false; if (pageId != null) { page = getStoredPage(pageId); } if (page == null) { if (pageClass != null) { org.apache.wicket.request.mapper.parameter.PageParameters parameters; if (pageId != null) { parameters = new org.apache.wicket.request.mapper.parameter.PageParameters(); } else { parameters = pageParameters; } page = getPageSource().newPageInstance(pageClass, parameters); freshCreated = true; } } if ((page != null) && (!freshCreated)) { if ((renderCount != null) && ((page.getRenderCount()) != renderCount)) { throw new org.apache.wicket.core.request.mapper.StalePageException(page); } } pageInstanceIsFresh = freshCreated; pageInstance = page; }
public void process(org.apache.wicket.markup.html.form.IFormSubmitter submittingComponent) { final org.apache.wicket.Page page = org.apache.wicket.markup.html.form.Form.getPage(); java.lang.String hiddenFieldId = getHiddenFieldId(); if ((!(org.apache.wicket.markup.html.form.Form.isEnabledInHierarchy())) || (!(org.apache.wicket.markup.html.form.Form.isVisibleInHierarchy()))) { return; } validate(); if (hasError()) { markFormComponentsInvalid(); callOnError(submittingComponent); } else { markFormComponentsValid(); beforeUpdateFormComponentModels(); updateFormComponentModels(); onValidateModelObjects(); if (hasError()) { callOnError(submittingComponent); return; } delegateSubmit(submittingComponent); } final org.apache.wicket.request.mapper.parameter.PageParameters parameters = page.getPageParameters(); if (parameters != null) { visitFormComponents(new org.apache.wicket.util.visit.IVisitor<org.apache.wicket.markup.html.form.FormComponent<?>, java.lang.Void>() { public void component(final org.apache.wicket.markup.html.form.FormComponent<?> formComponent, final org.apache.wicket.util.visit.IVisit<java.lang.Void> visit) { parameters.remove(formComponent.getInputName()); } }); parameters.remove(hiddenFieldId); if (submittingComponent instanceof org.apache.wicket.markup.html.form.AbstractSubmitLink) { org.apache.wicket.markup.html.form.AbstractSubmitLink submitLink = ((org.apache.wicket.markup.html.form.AbstractSubmitLink) (submittingComponent)); parameters.remove(submitLink.getInputName()); } } }
public org.apache.wicket.request.mapper.parameter.PageParameters set(final java.lang.String name, final java.lang.Object value) { set(name, value, (-1)); return this; }
protected java.lang.CharSequence encode(wicket.RequestCycle requestCycle, wicket.request.target.component.IBookmarkablePageRequestTarget requestTarget) { final wicket.util.string.AppendingStringBuffer url = new wicket.util.string.AppendingStringBuffer(64); url.append(urlPrefix(requestCycle)); final java.lang.Class pageClass = requestTarget.getPageClass(); final wicket.Application application = wicket.Application.get(); java.lang.String pageMapName = requestTarget.getPageMapName(); if (pageMapName == null) { wicket.IRequestTarget currentTarget = requestCycle.getRequestTarget(); if (currentTarget instanceof wicket.request.target.component.IPageRequestTarget) { wicket.Page currentPage = ((wicket.request.target.component.IPageRequestTarget) (currentTarget)).getPage(); final wicket.PageMap pageMap = currentPage.getPageMap(); if (pageMap.isDefault()) { pageMapName = ""; } else { pageMapName = pageMap.getName(); } } else { pageMapName = ""; } } boolean firstParameter = true; if (((!(application.getHomePage().equals(pageClass))) || (!("".equals(pageMapName)))) || (requestTarget instanceof wicket.request.target.component.BookmarkableListenerInterfaceRequestTarget)) { firstParameter = false; url.append('?'); url.append(WebRequestCodingStrategy.BOOKMARKABLE_PAGE_PARAMETER_NAME); url.append('='); java.lang.String pageClassName = pageClass.getName(); try { pageClassName = java.net.URLEncoder.encode(pageClassName, "UTF-8"); } catch (java.io.UnsupportedEncodingException e) { throw new java.lang.RuntimeException(e); } url.append(((pageMapName + (wicket.Component.PATH_SEPARATOR)) + pageClassName)); } if (requestTarget instanceof wicket.request.target.component.BookmarkableListenerInterfaceRequestTarget) { wicket.request.target.component.BookmarkableListenerInterfaceRequestTarget listenerTarget = ((wicket.request.target.component.BookmarkableListenerInterfaceRequestTarget) (requestTarget)); if (firstParameter == true) { url.append("?"); } else { url.append("&"); } firstParameter = false; url.append(wicket.protocol.http.request.AbstractWebRequestCodingStrategy.INTERFACE_PARAMETER_NAME); url.append("="); url.append(Component.PATH_SEPARATOR); url.append(listenerTarget.getComponentPath()); url.append(Component.PATH_SEPARATOR); url.append(Component.PATH_SEPARATOR); url.append(listenerTarget.getInterfaceName()); } final wicket.PageParameters parameters = requestTarget.getPageParameters(); if (parameters != null) { for (java.lang.Object element : parameters.keySet()) { final java.lang.String key = ((java.lang.String) (element)); final java.lang.String value = parameters.getString(key); if (value != null) { java.lang.String escapedValue = value; try { escapedValue = java.net.URLEncoder.encode(escapedValue, application.getRequestCycleSettings().getResponseRequestEncoding()); } catch (java.io.UnsupportedEncodingException ex) { wicket.protocol.http.request.AbstractWebRequestCodingStrategy.log.error(ex.getMessage(), ex); } if (!firstParameter) { url.append('&'); } else { firstParameter = false; url.append('?'); } url.append(key); url.append('='); url.append(escapedValue); } } } return requestCycle.getOriginalResponse().encodeURL(url); }
protected boolean shouldRenderPageAndWriteResponse(org.apache.wicket.request.cycle.RequestCycle cycle, org.apache.wicket.request.Url currentUrl, org.apache.wicket.request.Url targetUrl) { if (isAjax(cycle)) { return false; } return (((org.apache.wicket.request.handler.render.WebPageRenderer.neverRedirect(getRedirectPolicy())) || (((isOnePassRender()) && (org.apache.wicket.request.handler.render.WebPageRenderer.notForcedRedirect(getRedirectPolicy()))) || ((targetUrl.equals(currentUrl)) && (org.apache.wicket.request.handler.render.WebPageRenderer.notNewAndNotStatelessPage(isNewPageInstance(), isPageStateless()))))) || ((targetUrl.equals(currentUrl)) && (isRedirectToRender()))) || ((shouldPreserveClientUrl(cycle)) && (org.apache.wicket.request.handler.render.WebPageRenderer.notForcedRedirect(getRedirectPolicy()))); }
@java.lang.Override public void sendRedirect(java.lang.String url) { try { redirect = true; url = getAbsoluteURL(url); url = encodeRedirectURL(url); disableCaching(); if (webRequest.isAjax()) { httpServletResponse.addHeader("Ajax-Location", url); httpServletResponse.getWriter().write((("<ajax-response><redirect><![CDATA[" + url) + "]]></redirect></ajax-response>")); setContentType(("text/xml;charset=" + (webRequest.getContainerRequest().getCharacterEncoding()))); } else { httpServletResponse.sendRedirect(url); } } catch (java.io.IOException e) { throw new org.apache.wicket.WicketRuntimeException(e); } }
private org.apache.wicket.validation.validator.CreditCardValidator.CreditCard isVisa(java.lang.String creditCardNumber) { if (((creditCardNumber.length()) == 13) || ((creditCardNumber.length()) == 16)) { if (creditCardNumber.startsWith("4")) { return org.apache.wicket.validation.validator.CreditCardValidator.CreditCard.SWITCH; } } return org.apache.wicket.validation.validator.CreditCardValidator.CreditCard.INVALID; }
protected java.lang.CharSequence encode(wicket.RequestCycle requestCycle, wicket.request.target.component.IBookmarkablePageRequestTarget requestTarget) { final wicket.util.string.AppendingStringBuffer url = new wicket.util.string.AppendingStringBuffer(64); url.append(urlPrefix(requestCycle)); final java.lang.Class pageClass = requestTarget.getPageClass(); final wicket.Application application = wicket.Application.get(); java.lang.String pageMapName = requestTarget.getPageMapName(); if (pageMapName == null) { wicket.IRequestTarget currentTarget = requestCycle.getRequestTarget(); if (currentTarget instanceof wicket.request.target.component.IPageRequestTarget) { wicket.Page currentPage = ((wicket.request.target.component.IPageRequestTarget) (currentTarget)).getPage(); final wicket.PageMap pageMap = currentPage.getPageMap(); if (pageMap.isDefault()) { pageMapName = ""; } else { pageMapName = pageMap.getName(); } } else { pageMapName = ""; } } boolean firstParameter = true; if ((!(application.getHomePage().equals(pageClass))) || (!("".equals(pageMapName)))) { firstParameter = false; url.append('?'); url.append(wicket.protocol.http.request.WebRequestCodingStrategy.BOOKMARKABLE_PAGE_PARAMETER_NAME); url.append('='); java.lang.String pageClassName = pageClass.getName(); try { pageClassName = java.net.URLEncoder.encode(pageClassName, "UTF-8"); } catch (java.io.UnsupportedEncodingException e) { throw new java.lang.RuntimeException(e); } url.append(((pageMapName + (wicket.Component.PATH_SEPARATOR)) + pageClassName)); } final wicket.PageParameters parameters = requestTarget.getPageParameters(); if (parameters != null) { for (final java.util.Iterator iterator = parameters.keySet().iterator(); iterator.hasNext();) { final java.lang.String key = ((java.lang.String) (iterator.next())); final java.lang.String value = parameters.getString(key); if (value != null) { java.lang.String escapedValue = value; try { escapedValue = java.net.URLEncoder.encode(escapedValue, application.getRequestCycleSettings().getResponseRequestEncoding()); } catch (java.io.UnsupportedEncodingException ex) { wicket.protocol.http.request.WebRequestCodingStrategy.log.error(ex.getMessage(), ex); } if (!firstParameter) { url.append('&'); } else { firstParameter = false; url.append('?'); } url.append(key); url.append('='); url.append(escapedValue); } } } return requestCycle.getOriginalResponse().encodeURL(url); }
@java.lang.Override public org.apache.wicket.request.Url mapHandler(final org.apache.wicket.request.IRequestHandler requestHandler) { final org.apache.wicket.request.Url url = wrappedMapper.mapHandler(requestHandler); if (url == null) { return null; } if (url.isFull()) { return url; } return encryptUrl(url); }
public java.lang.String toString(final java.util.Locale locale) { if ((getMilliseconds()) >= 0) { if ((days()) >= 1.0) { return unitString(days(), "day", locale); } if ((hours()) >= 1.0) { return unitString(hours(), "hour", locale); } if ((minutes()) >= 1.0) { return unitString(minutes(), "minute", locale); } if ((seconds()) >= 1.0) { return unitString(seconds(), "second", locale); } return unitString(getMilliseconds(), "millisecond", locale); } else { return "N/A"; } }
protected final void setAttribute(java.lang.String name, java.lang.Object value) { wicket.RequestCycle cycle = wicket.RequestCycle.get(); if (cycle == null) { throw new wicket.WicketRuntimeException("Can not set the attribute. No RequestCycle available"); } wicket.session.ISessionStore store = getSessionStore(); wicket.Request request = cycle.getRequest(); if (value == (this)) { java.lang.Object current = store.getAttribute(request, name); if (current == null) { java.lang.String id = store.getSessionId(request, false); if (id != null) { store.bind(request, ((wicket.Session) (value))); } } } java.lang.String valueTypeName = (value != null) ? value.getClass().getName() : "null"; try { final java.io.ByteArrayOutputStream out = new java.io.ByteArrayOutputStream(); new java.io.ObjectOutputStream(out).writeObject(value); wicket.Session.log.debug(((((("Stored attribute " + name) + "{ ") + valueTypeName) + "} with size: ") + (wicket.util.lang.Bytes.bytes(out.size())))); } catch (java.lang.Exception e) { throw new wicket.WicketRuntimeException(("Internal error cloning object. Make sure all dependent objects implement Serializable. Class: " + valueTypeName), e); } store.setAttribute(request, name, value); }
@java.lang.Override public void unmount(java.lang.String path) { final org.apache.wicket.request.Url url = org.apache.wicket.request.Url.parse(path); final org.apache.wicket.request.Request request = createRequest(url); for (org.apache.wicket.request.IRequestMapper mapper : this) { if (mapper instanceof org.apache.wicket.request.mapper.ICompoundRequestMapper) { org.apache.wicket.request.mapper.ICompoundRequestMapper inner = ((org.apache.wicket.request.mapper.ICompoundRequestMapper) (mapper)); inner.unmount(path); } else if ((mapper.mapRequest(request)) != null) { remove(mapper); } } }
@java.lang.Override public org.apache.wicket.bean.validation.Property resolveProperty(org.apache.wicket.markup.html.form.FormComponent<?> component) { org.apache.wicket.model.IModel<?> model = component.getModel(); while (true) { if (model == null) { return null; } if (model instanceof org.apache.wicket.model.IPropertyReflectionAwareModel) { break; } if (model instanceof org.apache.wicket.model.IWrapModel<?>) { model = ((org.apache.wicket.model.IWrapModel<?>) (model)).getWrappedModel(); continue; } return null; } org.apache.wicket.model.IPropertyReflectionAwareModel<?> delegate = ((org.apache.wicket.model.IPropertyReflectionAwareModel<?>) (model)); java.lang.reflect.Field field = delegate.getPropertyField(); if (field != null) { return new org.apache.wicket.bean.validation.Property(field.getDeclaringClass(), field.getName()); } java.lang.String name; java.lang.reflect.Method getter = delegate.getPropertyGetter(); if (getter != null) { java.lang.String methodName = getter.getName(); if (methodName.startsWith("get")) { name = (methodName.substring(3, 4).toLowerCase()) + (methodName.substring(4)); } else if (methodName.startsWith("is")) { name = (methodName.substring(2, 3).toLowerCase()) + (methodName.substring(3)); } else { throw new org.apache.wicket.WicketRuntimeException((("Invalid name for a getter method: '" + methodName) + "'. It must start either with 'get' or 'is'.")); } return new org.apache.wicket.bean.validation.Property(getter.getDeclaringClass(), name); } return null; }
public void writeTo(final org.apache.wicket.request.http.WebResponse response) { org.apache.wicket.util.lang.Args.notNull(response, "response"); java.util.Collections.sort(actions); for (org.apache.wicket.protocol.http.BufferedWebResponse.Action action : actions) { action.invoke(response); } }
public java.lang.String toString(org.apache.wicket.request.Url.StringMode mode, java.nio.charset.Charset charset) { java.lang.StringBuilder result = new java.lang.StringBuilder(); final java.lang.String path = getPath(charset); if ((org.apache.wicket.request.Url.StringMode.FULL) == mode) { if (org.apache.wicket.util.string.Strings.isEmpty(host)) { throw new java.lang.IllegalStateException((("Cannot render this url in " + (org.apache.wicket.request.Url.StringMode.FULL.name())) + " mode because it does not have a host set.")); } if ((org.apache.wicket.util.string.Strings.isEmpty(protocol)) == false) { result.append(protocol); result.append("://"); } else if ((org.apache.wicket.util.string.Strings.isEmpty(protocol)) && ((org.apache.wicket.util.string.Strings.isEmpty(host)) == false)) { result.append("//"); } result.append(host); if (((port) != null) && ((port.equals(org.apache.wicket.request.Url.getDefaultPortForProtocol(protocol))) == false)) { result.append(':'); result.append(port); } if (segments.contains("..")) { throw new java.lang.IllegalStateException(((("Cannot render this url in " + (org.apache.wicket.request.Url.StringMode.FULL.name())) + " mode because it has a `..` segment: ") + (toString()))); } if (!(path.startsWith("/"))) { result.append('/'); } } result.append(path); final java.lang.String queryString = getQueryString(charset); if (queryString != null) { result.append('?').append(queryString); } return result.toString(); }
@java.lang.Override public void component(final org.apache.wicket.markup.html.form.FormComponent<?> formComponent, final org.apache.wicket.util.visit.IVisit<java.lang.Void> visit) { org.apache.wicket.markup.html.form.Form<?> form = formComponent.getForm(); if ((!(form.isVisibleInHierarchy())) || (!(form.isEnabledInHierarchy()))) { visit.dontGoDeeper(); return; } if (((formComponent.isVisibleInHierarchy()) && (formComponent.isValid())) && (formComponent.isEnabledInHierarchy())) { validate(formComponent); } if ((formComponent.processChildren()) == false) { visit.dontGoDeeper(); } }
@java.lang.Override protected void onDetach() { if ((this.component) == null) { this.onDetach(); } }
@java.lang.Override public java.lang.String toString() { return (message) != null ? message.toString() : ""; }
@java.lang.Override public void afterRender(org.apache.wicket.Component component) { org.apache.wicket.request.Response response = component.getResponse(); for (int i = 0; i < (branches.length); i++) { if (i > 0) { response.write("</div>"); } response.write("</div>"); } }
@java.lang.Override public int getCompatibilityScore(org.apache.wicket.request.Request request) { if (urlStartsWith(request.getUrl(), mountSegments)) { int countOptional = 0; int fixedSegments = 0; for (org.apache.wicket.core.request.mapper.MountedMapper.MountPathSegment pathSegment : pathSegments) { fixedSegments += pathSegment.getFixedPartSize(); countOptional += pathSegment.getOptionalParameters(); } return ((mountSegments.length) - countOptional) + fixedSegments; } else { return 0; } }
@java.lang.Override public void postProcess(final org.apache.wicket.markup.Markup markup) { while ((stack.size()) > 0) { final org.apache.wicket.markup.ComponentTag top = stack.peek(); if (!(org.apache.wicket.markup.parser.filter.HtmlHandler.requiresCloseTag(top.getName()))) { stack.pop(); top.setHasNoCloseTag(true); } else { throw new org.apache.wicket.markup.MarkupException(markup, "Tag does not have a close tag", null); } } }
public static java.io.File getLocalFileFromUrl(java.net.URL url) { final java.net.URL location = org.apache.wicket.util.lang.Args.notNull(url, "url"); try { return org.apache.wicket.util.file.Files.getLocalFileFromUrl(java.net.URLDecoder.decode(location.toExternalForm(), "UTF-8")); } catch (java.io.UnsupportedEncodingException ex) { return null; } }
@java.lang.Override public org.apache.wicket.markup.IMarkupFragment getMarkup(final org.apache.wicket.MarkupContainer container, final org.apache.wicket.Component child) { org.apache.wicket.markup.IMarkupFragment markup = container.getMarkup(); if (markup == null) { return null; } if (child == null) { return markup; } markup = markup.find(child.getId()); if (markup != null) { return markup; } if (!(child instanceof org.apache.wicket.markup.resolver.IComponentResolver)) { markup = searchMarkupInTransparentResolvers(container, child); } return markup; }
@java.lang.Override public java.lang.Object getFieldValue(final java.lang.reflect.Field field, final java.lang.Object fieldOwner) { if (supportsField(field)) { org.apache.wicket.spring.injection.annot.SpringBean annot = field.getAnnotation(org.apache.wicket.spring.injection.annot.SpringBean.class); java.lang.String name; boolean required; if (annot != null) { name = annot.name(); required = annot.required(); } else { javax.inject.Named named = field.getAnnotation(javax.inject.Named.class); name = (named != null) ? named.value() : ""; required = false; } java.lang.String beanName = getBeanName(field, name, required); if (beanName == null) { return null; } org.apache.wicket.spring.SpringBeanLocator locator = new org.apache.wicket.spring.SpringBeanLocator(beanName, field.getType(), contextLocator); java.lang.Object cachedValue = cache.get(locator); if (cachedValue != null) { return cachedValue; } java.lang.Object target; try { target = locator.locateProxyTarget(); } catch (java.lang.IllegalStateException isx) { if (required) { throw isx; } else { return null; } } if (wrapInProxies) { target = org.apache.wicket.proxy.LazyInitProxyFactory.createProxy(field.getType(), locator); } if (locator.isSingletonBean()) { java.lang.Object tmpTarget = cache.putIfAbsent(locator, target); if (tmpTarget != null) { target = tmpTarget; } } return target; } return null; }
@java.lang.Override public void respond(org.apache.wicket.request.cycle.RequestCycle requestCycle) { org.apache.wicket.request.Url currentUrl = requestCycle.getUrlRenderer().getBaseUrl(); org.apache.wicket.request.Url targetUrl = requestCycle.mapUrlFor(getRenderPageRequestHandler()); org.apache.wicket.protocol.http.BufferedWebResponse bufferedResponse = getAndRemoveBufferedResponse(currentUrl); boolean isAjax = isAjax(requestCycle); boolean shouldPreserveClientUrl = ((org.apache.wicket.request.http.WebRequest) (requestCycle.getRequest())).shouldPreserveClientUrl(); if (bufferedResponse != null) { org.apache.wicket.request.handler.render.WebPageRenderer.logger.warn("The Buffered response should be handled by BufferedResponseRequestHandler"); bufferedResponse.writeTo(((org.apache.wicket.request.http.WebResponse) (requestCycle.getResponse()))); } else if (((((getRedirectPolicy()) == (org.apache.wicket.request.handler.RenderPageRequestHandler.RedirectPolicy.NEVER_REDIRECT)) || ((isOnePassRender()) && (isAjax == false))) || (((!isAjax) && (((targetUrl.equals(currentUrl)) && (!(getPageProvider().isNewPageInstance()))) && (!(getPage().isPageStateless())))) || ((targetUrl.equals(currentUrl)) && (isRedirectToRender())))) || shouldPreserveClientUrl) { org.apache.wicket.protocol.http.BufferedWebResponse response = renderPage(currentUrl, requestCycle); if (response != null) { response.writeTo(((org.apache.wicket.request.http.WebResponse) (requestCycle.getResponse()))); } } else if ((((!(targetUrl.equals(currentUrl))) && ((getRedirectPolicy()) == (org.apache.wicket.request.handler.RenderPageRequestHandler.RedirectPolicy.ALWAYS_REDIRECT))) || (isRedirectToRender())) || (isAjax && (targetUrl.equals(currentUrl)))) { redirectTo(targetUrl, requestCycle); } else if ((!(targetUrl.equals(currentUrl))) && ((getPageProvider().isNewPageInstance()) || ((isSessionTemporary()) && (getPage().isPageStateless())))) { redirectTo(targetUrl, requestCycle); } else if (isRedirectToBuffer()) { org.apache.wicket.protocol.http.BufferedWebResponse response = renderPage(targetUrl, requestCycle); if (response == null) { return; } org.apache.wicket.request.Url targetUrl2 = requestCycle.mapUrlFor(getRenderPageRequestHandler()); if ((targetUrl.getSegments().equals(targetUrl2.getSegments())) == false) { response = renderPage(targetUrl2, requestCycle); } if (currentUrl.equals(targetUrl2)) { response.writeTo(((org.apache.wicket.request.http.WebResponse) (requestCycle.getResponse()))); } else if ((getPage().isPageStateless()) && (!(enableRedirectForStatelessPage()))) { response.writeTo(((org.apache.wicket.request.http.WebResponse) (requestCycle.getResponse()))); } else { storeBufferedResponse(targetUrl2, response); redirectTo(targetUrl2, requestCycle); } } else { throw new java.lang.IllegalStateException("Unknown RenderStrategy."); } }
public final java.lang.Object getMarkupIdImpl() { if ((generatedMarkupId) != (-1)) { return generatedMarkupId; } java.lang.String id = getMetaData(org.apache.wicket.Component.MARKUP_ID_KEY); if ((id == null) && ((findPage()) != null)) { id = getMarkupIdFromMarkup(); } return id; }
void internalMarkRendering(boolean setRenderingFlag) { if (setRenderingFlag) { setFlag(org.apache.wicket.Component.FLAG_PREPARED_FOR_RENDER, false); setFlag(org.apache.wicket.Component.FLAG_RENDERING, true); } else { setFlag(org.apache.wicket.Component.FLAG_RENDERING, false); } }
protected N parse(java.lang.Object value, final double min, final double max, java.util.Locale locale) { if (locale == null) { locale = java.util.Locale.getDefault(); } if (value == null) { return null; } else if (value instanceof java.lang.String) { value = ((java.lang.String) (value)).replaceAll("(\\d+)\\s(?=\\d)", "$1\u00a0"); } final java.text.NumberFormat numberFormat = getNumberFormat(locale); final N number = parse(numberFormat, value, locale); if (number == null) { return null; } if ((number.doubleValue()) < min) { throw org.apache.wicket.util.convert.converter.AbstractNumberConverter.newConversionException(("Value cannot be less than " + min), value, locale).setFormat(numberFormat); } if ((number.doubleValue()) > max) { throw org.apache.wicket.util.convert.converter.AbstractNumberConverter.newConversionException(("Value cannot be greater than " + max), value, locale).setFormat(numberFormat); } return number; }
public final void postProcessRequestCycle(org.apache.wicket.protocol.http.WebRequestCycle cycle) { previousRenderedPage = lastRenderedPage; if ((cycle.getResponse()) instanceof org.apache.wicket.protocol.http.WebResponse) { final org.apache.wicket.protocol.http.MockHttpServletResponse httpResponse = ((org.apache.wicket.protocol.http.MockHttpServletResponse) (cycle.getWebResponse().getHttpServletResponse())); if (httpResponse.isRedirect()) { lastRenderedPage = generateLastRenderedPage(cycle); org.apache.wicket.protocol.http.MockHttpServletRequest newHttpRequest = new org.apache.wicket.protocol.http.MockHttpServletRequest(application, servletSession, application.getServletContext()); newHttpRequest.setRequestToRedirectString(httpResponse.getRedirectLocation()); wicketRequest = application.newWebRequest(newHttpRequest); cycle = createRequestCycle(); cycle.request(); } else { java.lang.String url = httpResponse.getHeader("Ajax-Location"); if (url != null) { org.apache.wicket.protocol.http.MockHttpServletRequest newHttpRequest = new org.apache.wicket.protocol.http.MockHttpServletRequest(application, servletSession, application.getServletContext()); newHttpRequest.setRequestToRedirectString(url); wicketRequest = application.newWebRequest(newHttpRequest); cycle = createRequestCycle(); cycle.request(); } } } lastRenderedPage = generateLastRenderedPage(cycle); org.apache.wicket.Session.set(getWicketSession()); if ((getLastRenderedPage()) instanceof org.apache.wicket.markup.html.pages.ExceptionErrorPage) { throw ((java.lang.RuntimeException) (((org.apache.wicket.markup.html.pages.ExceptionErrorPage) (getLastRenderedPage())).getThrowable())); } }
public final <C> org.apache.wicket.util.convert.IConverter<C> get(java.lang.Class<C> c) { @java.lang.SuppressWarnings("unchecked") org.apache.wicket.util.convert.IConverter<C> converter = ((org.apache.wicket.util.convert.IConverter<C>) (classToConverter.get(c.getName()))); if (converter == null) { if (java.util.Date.class.equals(c)) { converter = ((org.apache.wicket.util.convert.IConverter<C>) (new org.apache.wicket.util.convert.converter.DateConverter())); } else if (java.sql.Date.class.equals(c)) { converter = ((org.apache.wicket.util.convert.IConverter<C>) (new org.apache.wicket.util.convert.converter.SqlDateConverter())); } else if (java.sql.Time.class.equals(c)) { converter = ((org.apache.wicket.util.convert.IConverter<C>) (new org.apache.wicket.util.convert.converter.SqlTimeConverter())); } else if (java.sql.Timestamp.class.equals(c)) { converter = ((org.apache.wicket.util.convert.IConverter<C>) (new org.apache.wicket.util.convert.converter.SqlTimestampConverter())); } else if (java.util.Calendar.class.equals(c)) { converter = ((org.apache.wicket.util.convert.IConverter<C>) (new org.apache.wicket.util.convert.converter.CalendarConverter())); } } return converter; }
@java.lang.Override public org.apache.wicket.request.Url getClientUrl() { if (((errorAttributes) != null) && (!(org.apache.wicket.util.string.Strings.isEmpty(errorAttributes.getRequestUri())))) { java.lang.String problematicURI = org.apache.wicket.request.Url.parse(errorAttributes.getRequestUri(), getCharset()).toString(); return getContextRelativeUrl(problematicURI, filterPrefix); } else if (((forwardAttributes) != null) && (!(org.apache.wicket.util.string.Strings.isEmpty(forwardAttributes.getRequestUri())))) { java.lang.String forwardURI = org.apache.wicket.request.Url.parse(forwardAttributes.getRequestUri(), getCharset()).toString(); return getContextRelativeUrl(forwardURI, filterPrefix); } else if (!(isAjax())) { return getContextRelativeUrl(httpServletRequest.getRequestURI(), filterPrefix); } else { java.lang.String base = getHeader(org.apache.wicket.protocol.http.servlet.HEADER_AJAX_BASE_URL); if (base == null) { base = getRequestParameters().getParameterValue(org.apache.wicket.protocol.http.servlet.PARAM_AJAX_BASE_URL).toString(null); } if (base == null) { throw new org.apache.wicket.request.http.flow.AbortWithHttpErrorCodeException(javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST, "Current ajax request is missing the base url header or parameter"); } return setParameters(org.apache.wicket.request.Url.parse(base, getCharset())); } }
public void init(org.eclipse.ui.IWorkbench aWorkbench) { this.workbench = ((org.eclipse.ui.internal.Workbench) (aWorkbench)); setPreferenceStore(org.eclipse.ui.PlatformUI.getPreferenceStore()); final org.eclipse.ui.themes.IThemeManager themeManager = aWorkbench.getThemeManager(); themeChangeListener = new org.eclipse.jface.util.IPropertyChangeListener() { public void propertyChange(org.eclipse.jface.util.PropertyChangeEvent event) { if (event.getProperty().equals(IThemeManager.CHANGE_CURRENT_THEME)) { updateThemeInfo(themeManager); refreshCategory(); } } }; themeManager.addPropertyChangeListener(themeChangeListener); updateThemeInfo(themeManager); }
@java.lang.Override public java.lang.String getID(org.eclipse.emf.ecore.EObject eObject) { java.lang.String id = super.getID(eObject); if (id != null) { return id; } id = objectMap.get(eObject); if (id != null) { return id; } org.eclipse.e4.ui.model.application.MApplicationElement element = ((org.eclipse.e4.ui.model.application.MApplicationElement) (eObject)); id = element.getId(); if ((id != null) && ((id.length()) != 0)) { id = getUniqueId(); setID(eObject, id); return id; } id = getUniqueId(); element.setId(id); setID(eObject, id); return id; }
protected org.eclipse.swt.widgets.Composite createPageContainer(org.eclipse.swt.widgets.Composite parent) { org.eclipse.swt.widgets.Composite outer = new org.eclipse.swt.widgets.Composite(parent, org.eclipse.swt.SWT.NONE); org.eclipse.swt.layout.GridData outerData = new org.eclipse.swt.layout.GridData((((org.eclipse.swt.layout.GridData.FILL_BOTH) | (org.eclipse.swt.layout.GridData.GRAB_HORIZONTAL)) | (org.eclipse.swt.layout.GridData.GRAB_VERTICAL))); outerData.horizontalIndent = org.eclipse.jface.dialogs.IDialogConstants.HORIZONTAL_MARGIN; outer.setLayout(new org.eclipse.swt.layout.GridLayout()); outer.setLayoutData(outerData); scrolled = new org.eclipse.swt.custom.ScrolledComposite(outer, ((org.eclipse.swt.SWT.V_SCROLL) | (org.eclipse.swt.SWT.H_SCROLL))); scrolled.setShowFocusedControl(true); scrolled.setExpandHorizontal(true); scrolled.setExpandVertical(true); org.eclipse.swt.layout.GridData scrolledData = new org.eclipse.swt.layout.GridData((((org.eclipse.swt.layout.GridData.FILL_BOTH) | (org.eclipse.swt.layout.GridData.GRAB_HORIZONTAL)) | (org.eclipse.swt.layout.GridData.GRAB_VERTICAL))); scrolled.setLayoutData(scrolledData); org.eclipse.swt.widgets.Composite result = new org.eclipse.swt.widgets.Composite(scrolled, org.eclipse.swt.SWT.NONE); org.eclipse.swt.layout.GridData resultData = new org.eclipse.swt.layout.GridData((((org.eclipse.swt.layout.GridData.FILL_BOTH) | (org.eclipse.swt.layout.GridData.GRAB_HORIZONTAL)) | (org.eclipse.swt.layout.GridData.GRAB_VERTICAL))); result.setLayout(getPageLayout()); result.setLayoutData(resultData); scrolled.setContent(result); return result; }
public void select(org.eclipse.ui.presentations.IPresentablePart toSelect) { if (toSelect == (current)) { return; } if (toSelect != null) { toSelect.setVisible(true); } if ((current) != null) { current.setVisible(false); setToolbar(null); } current = toSelect; org.eclipse.ui.internal.presentations.util.AbstractTabItem selectedItem = getTab(toSelect); folder.setSelection(selectedItem); if (selectedItem != null) { selectedItem.setBold(false); initTab(selectedItem, toSelect); } else { setToolbar(null); } layout(true); }
@javax.inject.Inject void trackActivePart(@org.eclipse.e4.core.di.annotations.Optional @javax.inject.Named(org.eclipse.e4.ui.services.IServiceConstants.ACTIVE_PART) org.eclipse.e4.ui.model.application.ui.basic.MPart p) { if ((activePart) != null) { activePart.getTags().remove("active"); org.eclipse.e4.ui.model.application.ui.MUIElement parent = activePart.getParent(); if ((parent == null) && ((activePart.getCurSharedRef()) != null)) { org.eclipse.e4.ui.model.application.ui.advanced.MPlaceholder ph = activePart.getCurSharedRef(); parent = ph.getParent(); } if (parent instanceof org.eclipse.e4.ui.model.application.ui.basic.MPartStack) { parent.getTags().remove("active"); if ((parent.getWidget()) != null) setCSSInfo(parent, parent.getWidget()); } else { if ((activePart.getWidget()) != null) setCSSInfo(activePart, activePart.getWidget()); } } activePart = p; if ((activePart) != null) { activePart.getTags().add("active"); org.eclipse.e4.ui.model.application.ui.MUIElement parent = activePart.getParent(); if ((parent == null) && ((activePart.getCurSharedRef()) != null)) { org.eclipse.e4.ui.model.application.ui.advanced.MPlaceholder ph = activePart.getCurSharedRef(); parent = ph.getParent(); } if ((parent instanceof org.eclipse.e4.ui.model.application.ui.basic.MPartStack) && ((parent.getWidget()) != null)) { parent.getTags().add("active"); setCSSInfo(parent, parent.getWidget()); } else if ((activePart.getWidget()) != null) { setCSSInfo(activePart, activePart.getWidget()); } } }
public void run() { if (moveProjectAction.isEnabled()) { moveProjectAction.run(); return; } super.run(); java.util.List destinations = getDestinations(); if ((destinations != null) && ((destinations.isEmpty()) == false)) { org.eclipse.core.resources.IWorkspaceRoot root = org.eclipse.ui.internal.WorkbenchPlugin.getPluginWorkspace().getRoot(); java.util.List resources = new java.util.ArrayList(); java.util.Iterator iterator = destinations.iterator(); while (iterator.hasNext()) { org.eclipse.core.resources.IResource newResource = root.findMember(((org.eclipse.core.runtime.IPath) (iterator.next()))); if (newResource != null) resources.add(newResource); } this.viewer.setSelection(new org.eclipse.jface.viewers.StructuredSelection(resources), true); } }
private boolean validateFolderName() { java.lang.String name = folderNameField.getText(); org.eclipse.core.resources.IWorkspace workspace = container.getWorkspace(); org.eclipse.core.runtime.IStatus nameStatus = workspace.validateName(name, org.eclipse.core.resources.IResource.FOLDER); if ("".equals(name)) { updateStatus(org.eclipse.core.runtime.IStatus.ERROR, org.eclipse.ui.dialogs.WorkbenchMessages.getString("NewFolderDialog.folderNameEmpty")); return false; } if ((nameStatus.isOK()) == false) { updateStatus(nameStatus); return false; } org.eclipse.core.runtime.IPath path = new org.eclipse.core.runtime.Path(name); if ((container.getFolder(path).exists()) || (container.getFile(path).exists())) { updateStatus(org.eclipse.core.runtime.IStatus.ERROR, org.eclipse.ui.dialogs.WorkbenchMessages.format("NewFolderDialog.alreadyExists", new java.lang.Object[]{ name })); return false; } updateStatus(org.eclipse.core.runtime.IStatus.OK, ""); return true; }
protected java.lang.String defaultButtonText() { if ((resource) instanceof org.eclipse.core.resources.IWorkspaceRoot) return super.defaultButtonText(); if ((resource) instanceof org.eclipse.core.resources.IFile) { try { org.eclipse.core.runtime.content.IContentDescription description = ((org.eclipse.core.resources.IFile) (resource)).getContentDescription(); if ((description == null) || ((description.getCharset()) == null)) return org.eclipse.ui.internal.ide.IDEWorkbenchMessages.format("ResourceInfo.fileContainerEncodingFormat", new java.lang.String[]{ getDefaultEnc() }); return org.eclipse.ui.internal.ide.IDEWorkbenchMessages.format("ResourceInfo.fileContentEncodingFormat", new java.lang.String[]{ getDefaultEnc() }); } catch (org.eclipse.core.runtime.CoreException exception) { } } return org.eclipse.ui.internal.ide.IDEWorkbenchMessages.format("ResourceInfo.containerEncodingFormat", new java.lang.String[]{ getDefaultEnc() }); }
protected java.lang.Object createWidget(org.eclipse.e4.ui.model.application.MUIElement element, java.lang.Object parent) { if (((element.getId()) != null) && ((element.getId().length()) > 0)) { org.eclipse.e4.ui.workbench.swt.internal.PartRenderingEngine.RenderingRecord record = renderedWidgets.get(element.getId()); if ((record != null) && (!(record.widget.isDisposed()))) { element.setRenderer(record.renderer); record.renderer.bindWidget(element, record.widget); if (element instanceof org.eclipse.e4.ui.model.application.MContribution) ((org.eclipse.e4.ui.model.application.MContribution) (element)).setObject(record.implementation); record.widget.setParent(((org.eclipse.swt.widgets.Composite) (parent))); return record.widget; } } org.eclipse.e4.ui.workbench.swt.internal.AbstractPartRenderer renderer = getRenderer(element, parent); if (renderer != null) { java.lang.Object newWidget = renderer.createWidget(element, parent); if (newWidget != null) { renderer.bindWidget(element, newWidget); return newWidget; } } return null; }
public void fetchDeferredChildren(java.lang.Object object, org.eclipse.ui.progress.IElementCollector collector, org.eclipse.core.runtime.IProgressMonitor monitor) { if (monitor.isCanceled()) return; if ((!(view.isHierarchalMode())) || (object.equals(view.getViewerInput()))) { try { org.eclipse.core.runtime.Platform.getJobManager().beginRule(org.eclipse.core.resources.ResourcesPlugin.getWorkspace().getRoot(), monitor); buildAllMarkers(collector, monitor); } finally { org.eclipse.core.runtime.Platform.getJobManager().endRule(org.eclipse.core.resources.ResourcesPlugin.getWorkspace().getRoot()); } view.scheduleCountUpdate(); } else addChildren(object, collector, monitor); }
private void firePropertyChange(java.lang.String changeId, java.lang.Object oldValue, java.lang.Object newValue) { final org.eclipse.ui.internal.PropertyChangeEvent event = new org.eclipse.ui.internal.PropertyChangeEvent(this, changeId, oldValue, newValue); org.eclipse.swt.widgets.Display.getDefault().syncExec(new java.lang.Runnable() { public void run() { java.lang.Object[] listeners = propertyChangeListeners.getListeners(); for (int i = 0; i < (listeners.length); i++) { ((org.eclipse.ui.internal.IPropertyChangeListener) (listeners[i])).propertyChange(event); } } }); }
@java.lang.Override public boolean changed(org.eclipse.e4.core.contexts.IEclipseContext context) { if ((getManager(toolbarModel)) == null) { return false; } record.updateVisibility(parentContext.getActiveLeaf()); manager.update(true); return true; }
protected void modifyWindowShell(org.eclipse.ui.IWorkbenchWindow window) { boolean coolBarInitiallyVsible = ((org.eclipse.ui.internal.WorkbenchWindow) (window)).getCoolBarVisible(); boolean perspectiveBarInitiallyVsible = ((org.eclipse.ui.internal.WorkbenchWindow) (window)).getPerspectiveBarVisible(); if (coolBarInitiallyVsible || perspectiveBarInitiallyVsible) { org.eclipse.swt.internal.cocoa.NSToolbar dummyBar = new org.eclipse.swt.internal.cocoa.NSToolbar(); dummyBar.alloc(); dummyBar.initWithIdentifier(org.eclipse.swt.internal.cocoa.NSString.stringWith("SWTToolbar")); dummyBar.setVisible(false); org.eclipse.swt.widgets.Shell shell = window.getShell(); org.eclipse.swt.internal.cocoa.NSWindow nsWindow = shell.view.window(); nsWindow.setToolbar(dummyBar); dummyBar.release(); nsWindow.setShowsToolbarButton(true); try { java.lang.Object fieldValue = org.eclipse.ui.internal.cocoa.CocoaUIEnhancer.wrapPointer(org.eclipse.ui.internal.cocoa.CocoaUIEnhancer.NSWindowToolbarButton); org.eclipse.swt.internal.cocoa.NSButton toolbarButton = ((org.eclipse.swt.internal.cocoa.NSButton) (org.eclipse.ui.internal.cocoa.CocoaUIEnhancer.invokeMethod(org.eclipse.swt.internal.cocoa.NSWindow.class, nsWindow, "standardWindowButton", new java.lang.Object[]{ fieldValue }))); if (toolbarButton != null) { toolbarButton.setTarget(delegate); org.eclipse.ui.internal.cocoa.CocoaUIEnhancer.invokeMethod(org.eclipse.swt.internal.cocoa.NSControl.class, toolbarButton, "setAction", new java.lang.Object[]{ org.eclipse.ui.internal.cocoa.CocoaUIEnhancer.wrapPointer(org.eclipse.ui.internal.cocoa.CocoaUIEnhancer.sel_toolbarButtonClicked_) }); } } catch (java.lang.Exception e) { log(e); } } }
private static void installFont(org.eclipse.ui.internal.presentation.FontDefinition definition, org.eclipse.jface.resource.FontRegistry registry, org.eclipse.jface.preference.IPreferenceStore store) { java.lang.String id = definition.getId(); org.eclipse.swt.graphics.FontData[] prefFont = (store != null) ? org.eclipse.jface.preference.PreferenceConverter.getFontDataArray(store, id) : null; org.eclipse.swt.graphics.FontData[] defaultFont = null; if ((definition.getValue()) != null) defaultFont = new org.eclipse.swt.graphics.FontData[]{ org.eclipse.jface.resource.StringConverter.asFontData(definition.getValue(), PreferenceConverter.FONTDATA_DEFAULT_DEFAULT) }; else if ((definition.getDefaultsTo()) != null) defaultFont = registry.getFontData(definition.getDefaultsTo()); else defaultFont = org.eclipse.jface.preference.PreferenceConverter.FONTDATA_ARRAY_DEFAULT_DEFAULT; if ((prefFont == null) || (prefFont == (org.eclipse.jface.preference.PreferenceConverter.FONTDATA_ARRAY_DEFAULT_DEFAULT))) { prefFont = defaultFont; } if ((defaultFont != null) && (store != null)) { org.eclipse.jface.preference.PreferenceConverter.setDefault(store, id, defaultFont); } if (prefFont != null) { registry.put(id, prefFont); } }
private int checkReadOnlyResources(org.eclipse.core.resources.IResource[] itemsToCheck, java.util.List allSelected) throws org.eclipse.core.runtime.CoreException { if (yesToAllSelected) return org.eclipse.jface.dialogs.IDialogConstants.YES_TO_ALL_ID; boolean noneSkipped = true; java.util.List selectedChildren = new java.util.ArrayList(); for (int i = 0; i < (itemsToCheck.length); i++) { org.eclipse.core.resources.IResource resourceToCheck = itemsToCheck[i]; org.eclipse.core.resources.ResourceAttributes checkAttributes = resourceToCheck.getResourceAttributes(); if (((!(yesToAllSelected)) && (shouldCheck(resourceToCheck))) && (checkAttributes.isReadOnly())) { int action = queryYesToAllNoCancel(resourceToCheck); if (action == (org.eclipse.jface.dialogs.IDialogConstants.YES_ID)) { boolean childResult = checkAcceptedResource(resourceToCheck, selectedChildren); if (!childResult) noneSkipped = false; } if (action == (org.eclipse.jface.dialogs.IDialogConstants.NO_ID)) noneSkipped = false; if (action == (org.eclipse.jface.dialogs.IDialogConstants.CANCEL_ID)) { cancelSelected = true; return org.eclipse.jface.dialogs.IDialogConstants.CANCEL_ID; } if (action == (org.eclipse.jface.dialogs.IDialogConstants.YES_TO_ALL_ID)) { yesToAllSelected = true; selectedChildren.add(resourceToCheck); } } else { boolean childResult = checkAcceptedResource(resourceToCheck, selectedChildren); if (cancelSelected) return org.eclipse.jface.dialogs.IDialogConstants.CANCEL_ID; if (!childResult) noneSkipped = false; } } if (noneSkipped) return org.eclipse.jface.dialogs.IDialogConstants.YES_TO_ALL_ID; allSelected.addAll(selectedChildren); return org.eclipse.jface.dialogs.IDialogConstants.NO_ID; }
public final int compareTo(final java.lang.Object object) { final org.eclipse.core.commands.ParameterizedCommand command = ((org.eclipse.core.commands.ParameterizedCommand) (object)); final boolean thisDefined = this.command.isDefined(); final boolean otherDefined = command.command.isDefined(); if ((!thisDefined) || (!otherDefined)) { return org.eclipse.core.internal.commands.util.Util.compare(thisDefined, otherDefined); } try { final int compareTo = getName().compareTo(command.getName()); if (compareTo == 0) { return getId().compareTo(command.getId()); } return compareTo; } catch (final org.eclipse.core.commands.common.NotDefinedException e) { throw new java.lang.Error("Concurrent modification of a command's defined state"); } }
private void createClientSite() { if (((clientFrame) == null) || (clientFrame.isDisposed())) return; try { clientSite = new org.eclipse.swt.ole.win32.OleClientSite(clientFrame, org.eclipse.swt.SWT.NONE, source); } catch (org.eclipse.swt.SWTException exception) { org.eclipse.core.runtime.IStatus errorStatus = new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, org.eclipse.ui.internal.WorkbenchPlugin.PI_WORKBENCH, org.eclipse.core.runtime.IStatus.ERROR, org.eclipse.ui.internal.editorsupport.win32.OleEditor.OLE_CREATE_EXCEPTION_MESSAGE, exception); org.eclipse.jface.dialogs.ErrorDialog.openError(null, org.eclipse.ui.internal.editorsupport.win32.OleEditor.OLE_EXCEPTION_TITLE, errorStatus.getMessage(), errorStatus); return; } clientSite.setBackground(org.eclipse.jface.resource.JFaceColors.getBannerBackground(clientFrame.getDisplay())); }
void toggleFilter(org.eclipse.ui.internal.provisional.views.markers.MarkerFieldFilterGroup group) { java.util.Collection enabled = getEnabledFilters(); if (enabled.remove(group)) { group.setEnabled(false); return; } group.setEnabled(true); enabled.add(group); writeFiltersSettings(); }
public boolean preWindowShellClose(org.eclipse.ui.application.IWorkbenchWindowConfigurer windowConfigurer) { if ((getWorkbenchConfigurer().getWorkbench().getWorkbenchWindowCount()) > 1) { return true; } org.eclipse.jface.preference.IPreferenceStore store = org.eclipse.ui.internal.ide.IDEWorkbenchPlugin.getDefault().getPreferenceStore(); boolean promptOnExit = store.getBoolean(IDEInternalPreferences.EXIT_PROMPT_ON_CLOSE_LAST_WINDOW); if (promptOnExit) { java.lang.String message; java.lang.String productName = null; org.eclipse.ui.internal.AboutInfo about = org.eclipse.ui.internal.ide.IDEWorkbenchPlugin.getDefault().getPrimaryInfo(); if (about != null) { productName = about.getProductName(); } if (productName == null) { message = org.eclipse.ui.internal.ide.IDEWorkbenchMessages.getString("PromptOnExitDialog.message0"); } else { message = org.eclipse.ui.internal.ide.IDEWorkbenchMessages.format("PromptOnExitDialog.message1", new java.lang.Object[]{ productName }); } org.eclipse.jface.dialogs.MessageDialogWithToggle dlg = org.eclipse.jface.dialogs.MessageDialogWithToggle.openOkCancelConfirm(windowConfigurer.getWindow().getShell(), org.eclipse.ui.internal.ide.IDEWorkbenchMessages.getString("PromptOnExitDialog.shellTitle"), message, org.eclipse.ui.internal.ide.IDEWorkbenchMessages.getString("PromptOnExitDialog.choice"), false, null, null); if ((dlg.getReturnCode()) != (org.eclipse.jface.dialogs.IDialogConstants.OK_ID)) { return false; } if (dlg.getToggleState()) { store.setValue(IDEInternalPreferences.EXIT_PROMPT_ON_CLOSE_LAST_WINDOW, false); org.eclipse.ui.internal.ide.IDEWorkbenchPlugin.getDefault().savePluginPreferences(); } } return true; }
protected boolean isCoolBarLocked() { org.eclipse.jface.action.CoolBarManager cbm = getCoolBarManager(); return (cbm != null) && (cbm.getLockLayout()); }
public void setChangeButtonText(java.lang.String text) { org.eclipse.jface.util.Assert.isNotNull(text); changeButtonText = text; if ((changeButton) != null) { changeButton.setText(text); org.eclipse.swt.graphics.Point prefSize = changeButton.computeSize(SWT.DEFAULT, SWT.DEFAULT); org.eclipse.swt.layout.GridData data = ((org.eclipse.swt.layout.GridData) (changeButton.getLayoutData())); data.widthHint = java.lang.Math.max(SWT.DEFAULT, prefSize.x); } }
public void createControl(org.eclipse.ui.part.Composite parent) { pgComp = new org.eclipse.ui.part.Composite(parent, org.eclipse.swt.SWT.NULL); pgComp.setLayout(new org.eclipse.ui.part.GridLayout()); msgLabel = new org.eclipse.ui.part.Label(pgComp, ((org.eclipse.swt.SWT.LEFT) | (org.eclipse.swt.SWT.WRAP))); msgLabel.setText(message); org.eclipse.ui.part.GridData gridData = new org.eclipse.ui.part.GridData(GridData.FILL_BOTH); msgLabel.setLayoutData(gridData); }
private void showElementRecursive(org.eclipse.e4.ui.model.application.ui.MUIElement element, java.util.List<org.eclipse.e4.ui.model.application.ui.MUIElement> becomingVisible) { if (!(element.isToBeRendered())) return; if ((element instanceof org.eclipse.e4.ui.model.application.ui.advanced.MPlaceholder) && ((element.getWidget()) != null)) { org.eclipse.e4.ui.model.application.ui.advanced.MPlaceholder ph = ((org.eclipse.e4.ui.model.application.ui.advanced.MPlaceholder) (element)); org.eclipse.e4.ui.model.application.ui.MUIElement ref = ph.getRef(); ref.setCurSharedRef(ph); org.eclipse.swt.widgets.Composite phComp = ((org.eclipse.swt.widgets.Composite) (ph.getWidget())); org.eclipse.swt.widgets.Control refCtrl = ((org.eclipse.swt.widgets.Control) (ph.getRef().getWidget())); refCtrl.setParent(phComp); phComp.layout(new org.eclipse.swt.widgets.Control[]{ refCtrl }, SWT.DEFER); if ((ref instanceof org.eclipse.e4.ui.model.application.ui.basic.MPart) && ((ph.getParent().getWidget()) instanceof org.eclipse.swt.custom.CTabFolder)) { org.eclipse.e4.ui.model.application.ui.basic.MPart part = ((org.eclipse.e4.ui.model.application.ui.basic.MPart) (ref)); org.eclipse.swt.custom.CTabFolder ctf = ((org.eclipse.swt.custom.CTabFolder) (ph.getParent().getWidget())); org.eclipse.e4.ui.model.application.ui.menu.MToolBar tbModel = part.getToolbar(); if ((tbModel != null) && ((tbModel.getWidget()) != null)) { org.eclipse.swt.widgets.ToolBar oldTB = ((org.eclipse.swt.widgets.ToolBar) (tbModel.getWidget())); if ((oldTB.getParent()) instanceof org.eclipse.swt.custom.CTabFolder) { org.eclipse.swt.custom.CTabFolder oldCTF = ((org.eclipse.swt.custom.CTabFolder) (oldTB.getParent())); if ((oldCTF.getTopRight()) == oldTB) oldCTF.setTopRight(null); } org.eclipse.swt.widgets.Control curTopRight = ctf.getTopRight(); if ((curTopRight != null) && (!(curTopRight.isDisposed()))) curTopRight.dispose(); oldTB.setParent(ctf); ctf.setTopRight(oldTB); } } element = ref; } if (element instanceof org.eclipse.e4.ui.model.application.ui.MContext) { org.eclipse.e4.core.contexts.IEclipseContext context = ((org.eclipse.e4.ui.model.application.ui.MContext) (element)).getContext(); if (context != null) { org.eclipse.e4.core.contexts.IEclipseContext newParentContext = modelService.getContainingContext(element); if ((context.getParent()) != newParentContext) { context.setParent(newParentContext); } } } if ((element instanceof org.eclipse.e4.ui.model.application.ui.basic.MPartStack) && (!(element.isVisible()))) { org.eclipse.e4.ui.model.application.ui.basic.MWindow window = modelService.getTopLevelWindowFor(element); java.lang.String trimId = (element.getElementId()) + "(minimized)"; org.eclipse.e4.ui.model.application.ui.advanced.MPerspective persp = modelService.getPerspectiveFor(element); if (persp != null) trimId = (((element.getElementId()) + '(') + (persp.getElementId())) + ')'; org.eclipse.e4.ui.model.application.ui.menu.MToolControl trimCtrl = ((org.eclipse.e4.ui.model.application.ui.menu.MToolControl) (modelService.find(trimId, window))); if (trimCtrl != null) trimCtrl.setVisible(true); } if ((element instanceof org.eclipse.e4.ui.model.application.ui.basic.MWindow) && ((element.getWidget()) != null)) { int visCount = 0; for (org.eclipse.e4.ui.model.application.ui.MUIElement kid : ((org.eclipse.e4.ui.model.application.ui.basic.MWindow) (element)).getChildren()) { if ((kid.isToBeRendered()) && (kid.isVisible())) visCount++; } if (visCount > 0) element.setVisible(true); } becomingVisible.add(element); if (element instanceof org.eclipse.e4.ui.model.application.ui.MGenericStack<?>) { org.eclipse.e4.ui.model.application.ui.MGenericStack<?> container = ((org.eclipse.e4.ui.model.application.ui.MGenericStack<?>) (element)); org.eclipse.e4.ui.model.application.ui.MUIElement curSel = container.getSelectedElement(); if ((curSel == null) && ((container.getChildren().size()) > 0)) curSel = container.getChildren().get(0); if (curSel != null) showElementRecursive(curSel, becomingVisible); } else if (element instanceof org.eclipse.e4.ui.model.application.ui.MElementContainer<?>) { org.eclipse.e4.ui.model.application.ui.MElementContainer<?> container = ((org.eclipse.e4.ui.model.application.ui.MElementContainer<?>) (element)); java.util.List<org.eclipse.e4.ui.model.application.ui.MUIElement> kids = new java.util.ArrayList<org.eclipse.e4.ui.model.application.ui.MUIElement>(container.getChildren()); for (org.eclipse.e4.ui.model.application.ui.MUIElement childElement : kids) { showElementRecursive(childElement, becomingVisible); } if (element instanceof org.eclipse.e4.ui.model.application.ui.basic.MWindow) { for (org.eclipse.e4.ui.model.application.ui.basic.MWindow w : ((org.eclipse.e4.ui.model.application.ui.basic.MWindow) (element)).getWindows()) { showElementRecursive(w, becomingVisible); } } else if (element instanceof org.eclipse.e4.ui.model.application.ui.advanced.MPerspective) { for (org.eclipse.e4.ui.model.application.ui.basic.MWindow w : ((org.eclipse.e4.ui.model.application.ui.advanced.MPerspective) (element)).getWindows()) { showElementRecursive(w, becomingVisible); } } } }
protected void update() { updateWindowTitle(); updateTitleBar(); updateButtons(); if (wizard.needsProgressMonitor()) { org.eclipse.swt.layout.GridData data = ((org.eclipse.swt.layout.GridData) (progressMonitorPart.getLayoutData())); data.widthHint = org.eclipse.swt.SWT.DEFAULT; data.heightHint = org.eclipse.swt.SWT.DEFAULT; org.eclipse.swt.widgets.Shell shell = getShell(); if (shell != null) { org.eclipse.swt.graphics.Point currentSize = shell.getSize(); org.eclipse.swt.graphics.Point newSize = shell.computeSize(SWT.DEFAULT, SWT.DEFAULT); int width = java.lang.Math.max(currentSize.x, newSize.x); int height = java.lang.Math.max(currentSize.y, newSize.y); setShellSize(width, height); progressMonitorPart.getParent().layout(true); } } firePageChanged(new org.eclipse.jface.dialogs.PageChangedEvent(this, getCurrentPage())); }
public void handleListChange(ListChangeEvent event) { if (viewer.getControl().isDisposed()) { return; } org.eclipse.core.databinding.observable.list.ListDiffEntry[] differences = event.diff.getDifferences(); for (int i = 0; i < (differences.length); i++) { org.eclipse.core.databinding.observable.list.ListDiffEntry entry = differences[i]; if (entry.isAddition()) { knownElements.add(entry.getElement()); if ((viewer) instanceof org.eclipse.jface.viewers.AbstractListViewer) { ((org.eclipse.jface.viewers.AbstractListViewer) (viewer)).insert(entry.getElement(), entry.getPosition()); } else { ((org.eclipse.jface.viewers.TableViewer) (viewer)).insert(entry.getElement(), entry.getPosition()); } } else { if ((viewer) instanceof org.eclipse.jface.viewers.AbstractListViewer) { ((org.eclipse.jface.viewers.AbstractListViewer) (viewer)).remove(entry.getElement()); } else { ((org.eclipse.jface.viewers.TableViewer) (viewer)).remove(entry.getElement()); } knownElements.remove(entry.getElement()); } } }
public void dispose() { java.util.Set observables = new java.util.HashSet(); observables.addAll(managedObservables); for (java.util.Iterator it = contexts.keySet().iterator(); it.hasNext();) { org.eclipse.core.databinding.DataBindingContext context = ((org.eclipse.core.databinding.DataBindingContext) (it.next())); org.eclipse.core.internal.databinding.Pair trackModelsOrTargets = ((org.eclipse.core.internal.databinding.Pair) (contexts.get(context))); boolean disposeTargets = ((java.lang.Boolean) (trackModelsOrTargets.a)).booleanValue(); boolean disposeModels = ((java.lang.Boolean) (trackModelsOrTargets.b)).booleanValue(); for (java.util.Iterator it2 = context.getBindings().iterator(); it2.hasNext();) { org.eclipse.core.databinding.Binding binding = ((org.eclipse.core.databinding.Binding) (it2.next())); if (disposeTargets) { observables.add(binding.getTarget()); } if (disposeModels) { observables.add(binding.getModel()); } } } observables.removeAll(excludedObservables); for (java.util.Iterator it = observables.iterator(); it.hasNext();) { org.eclipse.core.databinding.observable.IObservable observable = ((org.eclipse.core.databinding.observable.IObservable) (it.next())); observable.dispose(); } }
public java.lang.Object execute(org.eclipse.core.commands.ExecutionEvent event) { org.eclipse.swt.widgets.Shell activeShell = org.eclipse.swt.widgets.Display.getDefault().getActiveShell(); if ((activeShell != null) && (((activeShell.getStyle()) & (org.eclipse.swt.SWT.CLOSE)) != 0)) { activeShell.close(); } return null; }
public org.eclipse.ui.IWorkbenchWindow openWorkbenchWindow(java.lang.String perspectiveId, org.eclipse.core.runtime.IAdaptable input) throws org.eclipse.ui.WorkbenchException { org.eclipse.ui.IPerspectiveDescriptor descriptor = getPerspectiveRegistry().findPerspectiveWithId(perspectiveId); if (descriptor == null) { throw new org.eclipse.ui.WorkbenchException(org.eclipse.osgi.util.NLS.bind(WorkbenchMessages.WorkbenchPage_ErrorCreatingPerspective, perspectiveId)); } try { org.eclipse.e4.ui.model.application.ui.basic.MWindow window = BasicFactoryImpl.eINSTANCE.createTrimmedWindow(); return openWorkbenchWindow(input, descriptor, window, true); } catch (org.eclipse.e4.core.di.InjectionException e) { throw new org.eclipse.ui.WorkbenchException(e.getMessage(), e); } }
public void run() { com.ibm.icu.util.ULocale.setDefault(new com.ibm.icu.util.ULocale(((org.eclipse.core.runtime.Platform.getNL()) + (org.eclipse.core.runtime.Platform.getNLExtensions())))); org.eclipse.ui.internal.Workbench workbench = new org.eclipse.ui.internal.Workbench(display, advisor); returnCode[0] = workbench.runUI(); }
public void buildAllMarkers(org.eclipse.core.runtime.IProgressMonitor monitor) { building = true; org.eclipse.ui.views.markers.internal.MarkerList newMarkers; try { int markerLimit = view.getMarkerLimit(); monitor.beginTask(MarkerMessages.MarkerView_19, (markerLimit == (-1) ? 60 : 100)); try { monitor.subTask(MarkerMessages.MarkerView_waiting_on_changes); if (monitor.isCanceled()) return; monitor.subTask(MarkerMessages.MarkerView_searching_for_markers); org.eclipse.core.runtime.SubProgressMonitor subMonitor = new org.eclipse.core.runtime.SubProgressMonitor(monitor, 10); newMarkers = org.eclipse.ui.views.markers.internal.MarkerList.compute(view.getEnabledFilters(), subMonitor, true); if (monitor.isCanceled()) return; view.refreshMarkerCounts(monitor); } catch (org.eclipse.core.runtime.CoreException e) { org.eclipse.ui.views.markers.internal.Util.log(e); newMarkers = new org.eclipse.ui.views.markers.internal.MarkerList(); return; } if (monitor.isCanceled()) return; org.eclipse.jface.viewers.ViewerSorter sorter = view.getViewer().getSorter(); if ((markerLimit == (-1)) || (isShowingHierarchy())) { sorter.sort(view.getViewer(), newMarkers.toArray()); } else { monitor.subTask(MarkerMessages.MarkerView_18); org.eclipse.core.runtime.SubProgressMonitor mon = new org.eclipse.core.runtime.SubProgressMonitor(monitor, 40); newMarkers = org.eclipse.ui.views.markers.internal.SortUtil.getFirst(newMarkers, ((java.util.Comparator) (sorter)), markerLimit, mon); if (monitor.isCanceled()) { return; } sorter.sort(view.getViewer(), newMarkers.toArray()); } if ((newMarkers.getSize()) == 0) { categories = new org.eclipse.ui.views.markers.internal.MarkerAdapter.MarkerCategory[0]; lastMarkers = newMarkers; monitor.done(); return; } monitor.subTask(MarkerMessages.MarkerView_queueing_updates); if (monitor.isCanceled()) return; if (isShowingHierarchy()) { org.eclipse.ui.views.markers.internal.MarkerAdapter.MarkerCategory[] newCategories = buildHierarchy(newMarkers, 0, ((newMarkers.getSize()) - 1), 0); if (monitor.isCanceled()) return; categories = newCategories; } lastMarkers = newMarkers; monitor.done(); } finally { building = false; } }
protected void initialize(org.eclipse.swt.widgets.Layout layout, int progressIndicatorHeight) { if (layout == null) { org.eclipse.swt.layout.GridLayout l = new org.eclipse.swt.layout.GridLayout(); l.marginWidth = 0; l.marginHeight = 0; layout = l; } int numColumns = 1; if (fHasStopButton) numColumns++; setLayout(layout); if (layout instanceof org.eclipse.swt.layout.GridLayout) ((org.eclipse.swt.layout.GridLayout) (layout)).numColumns = numColumns; fLabel = new org.eclipse.swt.widgets.Label(this, org.eclipse.swt.SWT.LEFT); fLabel.setLayoutData(new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL, org.eclipse.swt.layout.GridData.CENTER, true, false, numColumns, 1)); if (progressIndicatorHeight == (org.eclipse.swt.SWT.DEFAULT)) { org.eclipse.swt.graphics.GC gc = new org.eclipse.swt.graphics.GC(fLabel); org.eclipse.swt.graphics.FontMetrics fm = gc.getFontMetrics(); gc.dispose(); progressIndicatorHeight = fm.getHeight(); } fProgressIndicator = new org.eclipse.jface.dialogs.ProgressIndicator(this); org.eclipse.swt.layout.GridData gd = new org.eclipse.swt.layout.GridData(); gd.horizontalAlignment = org.eclipse.swt.layout.GridData.FILL; gd.grabExcessHorizontalSpace = true; gd.grabExcessVerticalSpace = false; gd.verticalAlignment = org.eclipse.swt.layout.GridData.CENTER; gd.heightHint = progressIndicatorHeight; fProgressIndicator.setLayoutData(gd); if (fHasStopButton) { fToolBar = new org.eclipse.swt.widgets.ToolBar(this, org.eclipse.swt.SWT.FLAT); gd = new org.eclipse.swt.layout.GridData(); gd.grabExcessHorizontalSpace = false; gd.grabExcessVerticalSpace = false; gd.verticalAlignment = org.eclipse.swt.layout.GridData.CENTER; fToolBar.setLayoutData(gd); fStopButton = new org.eclipse.swt.widgets.ToolItem(fToolBar, org.eclipse.swt.SWT.PUSH); fStopButton.addSelectionListener(new org.eclipse.swt.events.SelectionAdapter() { public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { setCanceled(true); if ((fStopButton) != null) { fStopButton.setEnabled(false); } } }); final org.eclipse.swt.graphics.Image stopImage = org.eclipse.jface.resource.ImageDescriptor.createFromFile(org.eclipse.jface.wizard.ProgressMonitorPart.class, "images/stop.gif").createImage(getDisplay()); final org.eclipse.swt.graphics.Cursor arrowCursor = new org.eclipse.swt.graphics.Cursor(this.getDisplay(), org.eclipse.swt.SWT.CURSOR_ARROW); fToolBar.setCursor(arrowCursor); fStopButton.setImage(stopImage); fStopButton.addDisposeListener(new org.eclipse.swt.events.DisposeListener() { public void widgetDisposed(org.eclipse.swt.events.DisposeEvent e) { stopImage.dispose(); arrowCursor.dispose(); } }); fStopButton.setEnabled(false); fStopButton.setToolTipText(org.eclipse.jface.resource.JFaceResources.getString("ProgressMonitorPart.cancelToolTip")); } }
public void setContainer(org.eclipse.ui.internal.ILayoutContainer container) { super.setContainer(container); if ((control) != null) control.setBorderVisible(((container == null) || (container.allowsBorder()))); }
public void notifyChanged(org.eclipse.emf.common.notify.Notification notification) { super.notifyChanged(notification); if ((notification.isTouch()) || (!((notification.getNotifier()) instanceof org.eclipse.e4.ui.model.application.MApplicationElement))) return; java.util.Map<java.lang.String, java.lang.Object> argMap = new java.util.HashMap<java.lang.String, java.lang.Object>(); java.lang.String topic = formatData(notification, argMap); if (topic != null) { org.eclipse.e4.core.services.events.IEventBroker eventManager = ((org.eclipse.e4.core.services.events.IEventBroker) (context.get(org.eclipse.e4.core.services.events.IEventBroker.class.getName()))); eventManager.send(topic, argMap); } else { java.lang.System.out.println("Event of unknown type received from the model"); } }
public void run() { if (!(winShell.isDisposed())) { winShell.layout(true, true); } }
public static org.eclipse.jface.databinding.swt.ISWTObservableValue observeText(org.eclipse.swt.widgets.Control control) { if (control instanceof org.eclipse.swt.widgets.Label) { return new org.eclipse.jface.internal.databinding.internal.swt.LabelObservableValue(((org.eclipse.swt.widgets.Label) (control))); } else if (control instanceof org.eclipse.swt.custom.CLabel) { return new org.eclipse.jface.internal.databinding.internal.swt.CLabelObservableValue(((org.eclipse.swt.custom.CLabel) (control))); } else if (control instanceof org.eclipse.swt.widgets.Combo) { return new org.eclipse.jface.internal.databinding.internal.swt.ComboObservableValue(((org.eclipse.swt.widgets.Combo) (control)), org.eclipse.jface.internal.databinding.internal.swt.SWTProperties.TEXT); } else if (control instanceof org.eclipse.swt.custom.CCombo) { return new org.eclipse.jface.internal.databinding.internal.swt.CComboObservableValue(((org.eclipse.swt.custom.CCombo) (control)), org.eclipse.jface.internal.databinding.internal.swt.SWTProperties.TEXT); } else if (control instanceof org.eclipse.swt.widgets.Shell) { return new org.eclipse.jface.internal.databinding.internal.swt.ShellObservableValue(((org.eclipse.swt.widgets.Shell) (control))); } throw new java.lang.IllegalArgumentException((("Widget [" + (control.getClass().getName())) + "] is not supported.")); }
private void runEventLoop() { long t = java.lang.System.currentTimeMillis(); if ((t - (lastTime)) < (org.eclipse.ui.internal.dialogs.EventLoopProgressMonitor.T_THRESH)) { return; } lastTime = t; org.eclipse.ui.internal.dialogs.Display disp = org.eclipse.ui.internal.dialogs.Display.getDefault(); if (disp == null) { return; } for (; ;) { if (!(disp.readAndDispatch())) { break; } if (((java.lang.System.currentTimeMillis()) - t) > (org.eclipse.ui.internal.dialogs.EventLoopProgressMonitor.T_MAX)) { break; } } }
protected void createOpenViewButtonGroup(org.eclipse.swt.widgets.Composite composite) { org.eclipse.swt.graphics.Font font = composite.getFont(); org.eclipse.swt.widgets.Group buttonComposite = new org.eclipse.swt.widgets.Group(composite, org.eclipse.swt.SWT.LEFT); buttonComposite.setText(FVG_TITLE); buttonComposite.setLayoutData(new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_HORIZONTAL)); buttonComposite.setFont(composite.getFont()); org.eclipse.swt.layout.GridLayout layout = new org.eclipse.swt.layout.GridLayout(); layout.numColumns = 2; buttonComposite.setLayout(layout); openViewModeLabel = new org.eclipse.swt.widgets.Label(buttonComposite, org.eclipse.swt.SWT.NONE); openViewModeLabel.setText(OVM_TITLE); org.eclipse.swt.layout.GridData data = new org.eclipse.swt.layout.GridData(); data.horizontalSpan = 2; openViewModeLabel.setLayoutData(data); openViewModeLabel.setFont(font); openEmbedButton = new org.eclipse.swt.widgets.Button(buttonComposite, org.eclipse.swt.SWT.RADIO); openEmbedButton.setText(OVM_EMBED); openEmbedButton.setSelection(((openViewMode) == (org.eclipse.ui.internal.IPreferenceConstants.OVM_EMBED))); openEmbedButton.addSelectionListener(new org.eclipse.swt.events.SelectionAdapter() { public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { openViewMode = org.eclipse.ui.internal.IPreferenceConstants.OVM_EMBED; } }); openEmbedButton.setFont(font); if ((openViewMode) == (org.eclipse.ui.internal.IPreferenceConstants.OVM_FLOAT)) { openViewMode = org.eclipse.ui.internal.IPreferenceConstants.OVM_FAST; } openFastButton = new org.eclipse.swt.widgets.Button(buttonComposite, org.eclipse.swt.SWT.RADIO); openFastButton.setText(OVM_FAST); openFastButton.setSelection(((openViewMode) == (org.eclipse.ui.internal.IPreferenceConstants.OVM_FAST))); openFastButton.addSelectionListener(new org.eclipse.swt.events.SelectionAdapter() { public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { openViewMode = org.eclipse.ui.internal.IPreferenceConstants.OVM_FAST; } }); openFastButton.setFont(font); createFVBHideButton(buttonComposite); }
public org.eclipse.core.runtime.IStatus runInUIThread(org.eclipse.core.runtime.IProgressMonitor monitor) { if (treeViewer.getControl().isDisposed()) { return org.eclipse.core.runtime.Status.CANCEL_STATUS; } java.lang.String text = getFilterString(); if (text == null) { return org.eclipse.core.runtime.Status.OK_STATUS; } boolean initial = ((initialText) != null) && (initialText.equals(text)); if (initial) { patternFilter.setPattern(null); } else if (text != null) { patternFilter.setPattern(text); } org.eclipse.swt.widgets.Control redrawFalseControl = ((treeComposite) != null) ? treeComposite : treeViewer.getControl(); try { redrawFalseControl.setRedraw(false); if (!(narrowingDown)) { org.eclipse.swt.widgets.TreeItem[] is = treeViewer.getTree().getItems(); for (int i = 0; i < (is.length); i++) { org.eclipse.swt.widgets.TreeItem item = is[i]; if (item.getExpanded()) { treeViewer.setExpandedState(item.getData(), false); } } } treeViewer.refresh(true); if (((text.length()) > 0) && (!initial)) { org.eclipse.swt.widgets.TreeItem[] items = getViewer().getTree().getItems(); int treeHeight = getViewer().getTree().getBounds().height; int numVisibleItems = treeHeight / (getViewer().getTree().getItemHeight()); long stopTime = (org.eclipse.ui.dialogs.FilteredTree.SOFT_MAX_EXPAND_TIME) + (java.lang.System.currentTimeMillis()); boolean cancel = false; if (((items.length) > 0) && (recursiveExpand(items, monitor, stopTime, new int[]{ numVisibleItems }))) { cancel = true; } updateToolbar(true); if (cancel) { return org.eclipse.core.runtime.Status.CANCEL_STATUS; } } else { updateToolbar(false); } } finally { org.eclipse.swt.widgets.TreeItem[] items = getViewer().getTree().getItems(); if (((items.length) > 0) && ((getViewer().getTree().getSelectionCount()) == 0)) { treeViewer.getTree().setTopItem(items[0]); } redrawFalseControl.setRedraw(true); } return org.eclipse.core.runtime.Status.OK_STATUS; }
public TabbedPropertySheetTitleProvider() { super(); org.eclipse.ui.IWorkbenchPart part = org.eclipse.ui.PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().findView(ProjectExplorer.VIEW_ID); org.eclipse.ui.navigator.INavigatorContentService contentService = ((org.eclipse.ui.navigator.INavigatorContentService) (part.getAdapter(org.eclipse.ui.navigator.INavigatorContentService.class))); if (contentService != null) { labelProvider = contentService.createCommonLabelProvider(); descriptionProvider = contentService.createCommonDescriptionProvider(); } else { org.eclipse.ui.internal.navigator.resources.plugin.WorkbenchNavigatorPlugin.log((("Could not acquire INavigatorContentService from part (\"" + (part.getTitle())) + "\")."), null); } }
public org.eclipse.swt.widgets.Shell getShell() { if ((targetControl) instanceof org.eclipse.swt.widgets.Shell) { return ((org.eclipse.swt.widgets.Shell) (targetControl)); } return (targetControl) == null ? null : targetControl.getShell(); }
public void activityManagerChanged(org.eclipse.ui.activities.ActivityManagerEvent activityManagerEvent) { clearEnabledFilters(); refreshViewer(); }
private void disposeViewRefs() { if ((this.memento) == null) { return; } org.eclipse.ui.IMemento[] views = this.memento.getChildren(IWorkbenchConstants.TAG_VIEW); for (int x = 0; x < (views.length); x++) { org.eclipse.ui.IMemento childMem = views[x]; java.lang.String id = childMem.getString(IWorkbenchConstants.TAG_ID); if (id.equals(IIntroConstants.INTRO_VIEW_ID)) { continue; } java.lang.String secondaryId = org.eclipse.ui.internal.ViewFactory.extractSecondaryId(id); if (secondaryId != null) { id = org.eclipse.ui.internal.ViewFactory.extractPrimaryId(id); } if (!("true".equals(childMem.getString(IWorkbenchConstants.TAG_REMOVED)))) { org.eclipse.ui.IViewReference ref = this.viewFactory.getView(id, secondaryId); if (ref != null) { this.viewFactory.releaseView(ref); } } } }
protected void createDefaultContents(final org.eclipse.swt.widgets.Shell shell) { defaultLayout = new org.eclipse.ui.internal.TrimLayout(); defaultLayout.setSpacing(5, 5, 2, 2); shell.setLayout(defaultLayout); org.eclipse.swt.widgets.Menu menuBar = getMenuBarManager().createMenuBar(shell); if (getWindowConfigurer().getShowMenuBar()) { shell.setMenuBar(menuBar); } topBarParent = new org.eclipse.swt.widgets.Composite(shell, org.eclipse.swt.SWT.NONE); topBarParent.setLayout(new org.eclipse.swt.layout.FormLayout()); topBar = new org.eclipse.swt.custom.CBanner(topBarParent, org.eclipse.swt.SWT.NONE); org.eclipse.swt.widgets.Control coolBar = createCoolBarControl(topBar); coolBar.addListener(SWT.Resize, new org.eclipse.swt.widgets.Listener() { public void handleEvent(org.eclipse.swt.widgets.Event event) { shell.layout(); } }); if (getWindowConfigurer().getShowCoolBar()) { topBar.setLeft(getCoolBarControl()); } org.eclipse.swt.layout.FormData topBarData = new org.eclipse.swt.layout.FormData(); topBarData.right = new org.eclipse.swt.layout.FormAttachment(100, 0); topBarData.left = new org.eclipse.swt.layout.FormAttachment(0, 0); topBarData.top = new org.eclipse.swt.layout.FormAttachment(0, 0); topBar.setLayoutData(topBarData); addPerspectiveBar(perspectiveBarStyle()); createPerspectiveBar(); createStatusLine(shell); fastViewBar = new org.eclipse.ui.internal.FastViewBar(this); fastViewBar.createControl(shell); createProgressIndicator(shell); trimDropTarget = new org.eclipse.ui.internal.TrimDropTarget(shell, this); org.eclipse.ui.internal.dnd.DragUtil.addDragTarget(shell, trimDropTarget); org.eclipse.swt.widgets.Listener listener = new org.eclipse.swt.widgets.Listener() { public void handleEvent(org.eclipse.swt.widgets.Event event) { org.eclipse.ui.internal.WorkbenchPage currentPage = getActiveWorkbenchPage(); if (currentPage != null) { if ((event.type) == (org.eclipse.swt.SWT.MouseDown)) { if ((event.widget) instanceof org.eclipse.swt.widgets.ToolBar) { org.eclipse.swt.graphics.Point pt = new org.eclipse.swt.graphics.Point(event.x, event.y); org.eclipse.swt.widgets.ToolBar toolBar = ((org.eclipse.swt.widgets.ToolBar) (event.widget)); if ((toolBar.getItem(pt)) != null) return; } currentPage.toggleFastView(null); } } } }; topBar.addListener(SWT.MouseDown, listener); getCoolBarControl().addListener(SWT.MouseDown, listener); org.eclipse.swt.widgets.Control[] children = ((org.eclipse.swt.widgets.Composite) (getStatusLineManager().getControl())).getChildren(); for (int i = 0; i < (children.length); i++) { if ((children[i]) != null) children[i].addListener(SWT.MouseDown, listener); } if ((perspectiveBar.getControl()) != null) { perspectiveBar.getControl().addListener(SWT.MouseDown, listener); } createPageComposite(shell); setLayoutDataForContents(); }
public void applyCSSPropertyBackgroundColor(java.lang.Object element, org.w3c.dom.css.CSSValue value, java.lang.String pseudo, org.eclipse.e4.ui.css.core.engine.CSSEngine engine) throws java.lang.Exception { org.eclipse.swt.widgets.Widget widget = ((org.eclipse.swt.widgets.Widget) (element)); if ((value.getCssValueType()) == (org.w3c.dom.css.CSSValue.CSS_PRIMITIVE_VALUE)) { org.eclipse.swt.graphics.Color newColor = ((org.eclipse.swt.graphics.Color) (engine.convert(value, org.eclipse.swt.graphics.Color.class, widget.getDisplay()))); if (widget instanceof org.eclipse.swt.custom.ETabItem) { org.eclipse.swt.custom.ETabFolder folder = ((org.eclipse.swt.custom.ETabFolder) (((org.eclipse.swt.custom.ETabItem) (widget)).getParent())); if ("selected".equals(pseudo)) { folder.setSelectionBackground(newColor); } else { folder.setUnselectedTabBackgroundColor(newColor); } } else if (widget instanceof org.eclipse.swt.custom.CTabItem) { org.eclipse.swt.custom.CTabFolder folder = ((org.eclipse.swt.custom.CTabItem) (widget)).getParent(); if ("selected".equals(pseudo)) { folder.setSelectionBackground(newColor); } else { folder.setBackground(newColor); } } else if (widget instanceof org.eclipse.swt.widgets.Control) { ((org.eclipse.swt.widgets.Control) (widget)).setBackground(newColor); } } else if ((value.getCssValueType()) == (org.w3c.dom.css.CSSValue.CSS_VALUE_LIST)) { org.eclipse.e4.ui.css.core.dom.properties.Gradient grad = ((org.eclipse.e4.ui.css.core.dom.properties.Gradient) (engine.convert(value, org.eclipse.e4.ui.css.core.dom.properties.Gradient.class, widget.getDisplay()))); if ((widget instanceof org.eclipse.swt.custom.CTabItem) && ("selected".equals(pseudo))) { org.eclipse.swt.custom.CTabFolder folder = ((org.eclipse.swt.custom.CTabItem) (widget)).getParent(); folder.setSelectionBackground(org.eclipse.e4.ui.css.swt.helpers.CSSSWTColorHelper.getSWTColors(grad, folder.getDisplay()), org.eclipse.e4.ui.css.swt.helpers.CSSSWTColorHelper.getPercents(grad), true); } else if (widget instanceof org.eclipse.swt.widgets.Control) { org.eclipse.e4.ui.css.swt.properties.GradientBackgroundListener.handle(((org.eclipse.swt.widgets.Control) (widget)), grad); } } }
private void runEventLoop(org.eclipse.swt.widgets.Shell loopShell) { org.eclipse.swt.widgets.Display display; if ((shell) == null) { display = org.eclipse.swt.widgets.Display.getCurrent(); } else { display = loopShell.getDisplay(); } while ((loopShell != null) && (!(loopShell.isDisposed()))) { try { if (!(display.readAndDispatch())) { display.sleep(); } } catch (java.lang.Throwable e) { org.eclipse.jface.window.Window.exceptionHandler.handleException(e); } } if (!(display.isDisposed())) display.update(); }
public void insert(org.eclipse.jface.bindings.keys.KeyStroke stroke) { if (!(stroke.isComplete())) { return; } final org.eclipse.jface.bindings.keys.KeySequence keySequence = getKeySequence(); final org.eclipse.jface.bindings.keys.KeyStroke[] oldKeyStrokes = keySequence.getKeyStrokes(); final org.eclipse.jface.bindings.keys.KeyStroke[] newKeyStrokes; if ((hasIncompleteStroke()) && (!(keySequence.isEmpty()))) { final int newKeyStrokesLength = (oldKeyStrokes.length) - 1; newKeyStrokes = new org.eclipse.jface.bindings.keys.KeyStroke[newKeyStrokesLength]; java.lang.System.arraycopy(oldKeyStrokes, 0, newKeyStrokes, 0, newKeyStrokesLength); } else { newKeyStrokes = oldKeyStrokes; } org.eclipse.jface.bindings.keys.KeyStroke[][] deletedKeyStrokes = new org.eclipse.jface.bindings.keys.KeyStroke[1][]; int index = deleteSelection(newKeyStrokes, false, deletedKeyStrokes); if (index == (-1)) { index = 0; } final org.eclipse.jface.bindings.keys.KeyStroke[] strokes = ((deletedKeyStrokes[0]) == null) ? new org.eclipse.jface.bindings.keys.KeyStroke[0] : deletedKeyStrokes[0]; final org.eclipse.jface.bindings.keys.KeyStroke[] keyStrokes = insertStrokeAt(strokes, stroke, index); keyFilter.clearInsertionIndex(); setKeySequence(org.eclipse.jface.bindings.keys.KeySequence.getInstance(keyStrokes)); }
SafeRunnableDialog(org.eclipse.core.runtime.IStatus status) { super(null, org.eclipse.jface.resource.JFaceResources.getString("error"), status.getMessage(), status, org.eclipse.core.runtime.IStatus.ERROR); setShellStyle(((((((org.eclipse.swt.SWT.DIALOG_TRIM) | (org.eclipse.swt.SWT.MODELESS)) | (org.eclipse.swt.SWT.RESIZE)) | (org.eclipse.swt.SWT.MIN)) | (org.eclipse.swt.SWT.MAX)) | (getDefaultOrientation()))); setStatus(status); statuses.add(status); setBlockOnOpen(false); java.lang.String reason = org.eclipse.jface.resource.JFaceResources.getString("SafeRunnableDialog_checkDetailsMessage"); if ((status.getException()) != null) { reason = ((status.getException().getMessage()) == null) ? status.getException().toString() : status.getException().getMessage(); } this.message = org.eclipse.jface.resource.JFaceResources.format("SafeRunnableDialog_reason", new java.lang.Object[]{ status.getMessage(), reason }); }
protected boolean transfer(org.eclipse.core.runtime.preferences.IPreferenceFilter[] transfers) { java.io.File exportFile = new java.io.File(getDestinationValue()); if (!(ensureTargetIsValid(exportFile))) { return false; } java.io.FileOutputStream fos = null; try { if ((transfers.length) > 0) { try { fos = new java.io.FileOutputStream(exportFile); } catch (java.io.FileNotFoundException e) { org.eclipse.ui.internal.WorkbenchPlugin.log(e.getMessage(), e); org.eclipse.jface.dialogs.MessageDialog.openError(getControl().getShell(), new java.lang.String(), e.getLocalizedMessage()); return false; } org.eclipse.core.runtime.preferences.IPreferencesService service = org.eclipse.core.runtime.Platform.getPreferencesService(); try { service.exportPreferences(service.getRootNode(), transfers, fos); } catch (org.eclipse.core.runtime.CoreException e) { org.eclipse.ui.internal.WorkbenchPlugin.log(e.getMessage(), e); return false; } } } finally { if (fos != null) try { fos.close(); } catch (java.io.IOException e) { org.eclipse.ui.internal.WorkbenchPlugin.log(e.getMessage(), e); } } return true; }
public ActivityEnabler(org.eclipse.ui.activities.IWorkbenchActivitySupport activitySupport, java.util.Properties strings) { this.activitySupport = activitySupport; this.strings = strings; }
public void run() { org.eclipse.ui.internal.WorkbenchPage page = ((org.eclipse.ui.internal.WorkbenchPage) (workbench.getActiveWorkbenchWindow().getActivePage())); if (page == null) { try { org.eclipse.core.resources.IContainer root = org.eclipse.ui.internal.WorkbenchPlugin.getPluginWorkspace().getRoot(); page = ((org.eclipse.ui.internal.WorkbenchPage) (workbench.getActiveWorkbenchWindow().openPage(org.eclipse.ui.internal.WorkbenchPlugin.getDefault().getPerspectiveRegistry().getDefaultPerspective(), root))); } catch (org.eclipse.ui.WorkbenchException e) { org.eclipse.jface.dialogs.MessageDialog.openError(workbench.getActiveWorkbenchWindow().getShell(), org.eclipse.ui.internal.WorkbenchMessages.getString("Problems_Opening_Page"), e.getMessage()); } } if (page == null) return; page.setEditorAreaVisible(true); org.eclipse.ui.internal.IEditorPart[] editors = page.getEditors(); for (int i = 0; i < (editors.length); i++) { if ((editors[i]) instanceof org.eclipse.ui.internal.WelcomeEditor) { page.bringToTop(editors[i]); return; } } try { page.openEditor(new org.eclipse.ui.internal.WelcomeEditorInput(), org.eclipse.ui.internal.QuickStartAction.EDITOR_ID); } catch (org.eclipse.ui.internal.PartInitException e) { org.eclipse.core.runtime.IStatus status = new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, WorkbenchPlugin.PI_WORKBENCH, 1, org.eclipse.ui.internal.WorkbenchMessages.getString("QuickStartAction.openEditorException"), e); org.eclipse.jface.dialogs.ErrorDialog.openError(workbench.getActiveWorkbenchWindow().getShell(), org.eclipse.ui.internal.WorkbenchMessages.getString("QuickStartAction.errorDialogTitle"), org.eclipse.ui.internal.WorkbenchMessages.getString("QuickStartAction.errorDialogMessage"), status); } }
public final boolean isActive(final java.lang.String commandId) { if (commandId != null) { final org.eclipse.ui.commands.ICommand command = workbench.getCommandSupport().getCommandManager().getCommand(commandId); if ((!(command.isDefined())) && (!(loggedCommandIds.contains(commandId)))) { final java.lang.StringBuffer message = new java.lang.StringBuffer(); message.append("The command '"); message.append(command.getId()); message.append("' is not defined, but is being asked if it is active. Are you using an actionDefinitionId without defining a command?"); org.eclipse.core.runtime.IStatus status = new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, org.eclipse.ui.internal.WorkbenchPlugin.PI_WORKBENCH, 0, org.eclipse.ui.internal.util.Util.translateString(org.eclipse.ui.internal.commands.ws.CommandCallback.RESOURCE_BUNDLE, "undefinedCommand.WarningMessage"), null); org.eclipse.ui.internal.WorkbenchPlugin.log(message.toString(), status); loggedCommandIds.add(commandId); command.addCommandListener(new org.eclipse.ui.commands.ICommandListener() { public final void commandChanged(final org.eclipse.ui.commands.CommandEvent commandEvent) { if (command.isDefined()) { command.removeCommandListener(this); loggedCommandIds.remove(commandId); } } }); return false; } return workbench.getActivitySupport().getActivityManager().getIdentifier(command.getId()).isEnabled(); } return true; }
protected void updateTreeFont(org.eclipse.swt.graphics.Font dialogFont) { filteredViewer.getControl().setFont(dialogFont); if ((unfilteredViewer) != null) unfilteredViewer.getControl().setFont(dialogFont); }
public org.eclipse.e4.ui.internal.workbench.E4Workbench createE4Workbench(org.eclipse.equinox.app.IApplicationContext applicationContext) { args = ((java.lang.String[]) (applicationContext.getArguments().get(org.eclipse.equinox.app.IApplicationContext.APPLICATION_ARGS))); org.eclipse.e4.core.contexts.IEclipseContext appContext = org.eclipse.e4.ui.internal.workbench.swt.E4Application.createDefaultContext(); appContext.set(org.eclipse.equinox.app.IApplicationContext.class, applicationContext); if (!(appContext.containsKey("org.eclipse.e4.ui.workbench.modeling.EModelService"))) { throw new java.lang.IllegalStateException("Core services not available. Please make sure that a declarative service implementation (such as the bundle 'org.eclipse.equinox.ds') is available!"); } org.eclipse.e4.core.services.contributions.IContributionFactory factory = ((org.eclipse.e4.core.services.contributions.IContributionFactory) (appContext.get(org.eclipse.e4.core.services.contributions.IContributionFactory.class.getName()))); java.lang.String lifeCycleURI = getArgValue(E4Workbench.LIFE_CYCLE_URI_ARG, applicationContext, false); java.lang.Object lcManager = null; if (lifeCycleURI != null) { lcManager = factory.create(lifeCycleURI, appContext); if (lcManager != null) { org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(lcManager, org.eclipse.e4.ui.workbench.lifecycle.PostContextCreate.class, appContext); } } org.eclipse.e4.ui.model.application.MApplication appModel = loadApplicationModel(applicationContext, appContext); appModel.setContext(appContext); if (!(org.eclipse.e4.ui.internal.workbench.E4Workbench.getServiceContext().containsKey(org.eclipse.e4.ui.model.application.MApplication.class.getName()))) { org.eclipse.e4.ui.internal.workbench.E4Workbench.getServiceContext().set(org.eclipse.e4.ui.model.application.MApplication.class.getName(), appModel); } appContext.set(org.eclipse.e4.ui.model.application.MApplication.class.getName(), appModel); if (lcManager != null) { org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(lcManager, org.eclipse.e4.ui.workbench.lifecycle.ProcessAdditions.class, appContext); org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(lcManager, org.eclipse.e4.ui.workbench.lifecycle.ProcessRemovals.class, appContext); } for (org.eclipse.e4.ui.model.application.MContribution addon : appModel.getAddons()) { java.lang.Object obj = factory.create(addon.getContributionURI(), appContext); addon.setObject(obj); } java.lang.String xmiURI = getArgValue(E4Workbench.XMI_URI_ARG, applicationContext, false); appContext.set(E4Workbench.XMI_URI_ARG, xmiURI); java.lang.String themeId = getArgValue(org.eclipse.e4.ui.internal.workbench.swt.E4Application.THEME_ID, applicationContext, false); appContext.set(org.eclipse.e4.ui.internal.workbench.swt.E4Application.THEME_ID, themeId); java.lang.String cssURI = getArgValue(E4Workbench.CSS_URI_ARG, applicationContext, false); if (cssURI != null) { appContext.set(E4Workbench.CSS_URI_ARG, cssURI); } if ((cssURI != null) && (!(cssURI.startsWith("platform:")))) { java.lang.System.err.println((("Warning " + cssURI) + " changed its meaning it is used now to run without theme support")); appContext.set(org.eclipse.e4.ui.internal.workbench.swt.E4Application.THEME_ID, cssURI); } java.lang.String cssResourcesURI = getArgValue(E4Workbench.CSS_RESOURCE_URI_ARG, applicationContext, false); appContext.set(E4Workbench.CSS_RESOURCE_URI_ARG, cssResourcesURI); appContext.set(E4Workbench.RENDERER_FACTORY_URI, getArgValue(E4Workbench.RENDERER_FACTORY_URI, applicationContext, false)); java.lang.String presentationURI = getArgValue(E4Workbench.PRESENTATION_URI_ARG, applicationContext, false); if (presentationURI == null) { presentationURI = PartRenderingEngine.engineURI; } appContext.set(E4Workbench.PRESENTATION_URI_ARG, presentationURI); org.eclipse.e4.ui.internal.workbench.E4Workbench workbench = new org.eclipse.e4.ui.internal.workbench.E4Workbench(appModel, appContext); return workbench; }
public void run() { java.lang.String message; int[] resultId = new int[]{ org.eclipse.jface.dialogs.IDialogConstants.YES_ID, org.eclipse.jface.dialogs.IDialogConstants.YES_TO_ALL_ID, org.eclipse.jface.dialogs.IDialogConstants.NO_ID, org.eclipse.jface.dialogs.IDialogConstants.CANCEL_ID }; java.lang.String[] labels = new java.lang.String[]{ org.eclipse.jface.dialogs.IDialogConstants.YES_LABEL, org.eclipse.jface.dialogs.IDialogConstants.YES_TO_ALL_LABEL, org.eclipse.jface.dialogs.IDialogConstants.NO_LABEL, org.eclipse.jface.dialogs.IDialogConstants.CANCEL_LABEL }; if ((destination.getType()) == (org.eclipse.core.resources.IResource.FOLDER)) { if (homogenousResources(source, destination)) { message = org.eclipse.osgi.util.NLS.bind(IDEWorkbenchMessages.CopyFilesAndFoldersOperation_overwriteMergeQuestion, destination.getFullPath().makeRelative()); } else { if (destination.isLinked()) { message = org.eclipse.osgi.util.NLS.bind(IDEWorkbenchMessages.CopyFilesAndFoldersOperation_overwriteNoMergeLinkQuestion, destination.getFullPath().makeRelative()); } else { message = org.eclipse.osgi.util.NLS.bind(IDEWorkbenchMessages.CopyFilesAndFoldersOperation_overwriteNoMergeNoLinkQuestion, destination.getFullPath().makeRelative()); } resultId = new int[]{ org.eclipse.jface.dialogs.IDialogConstants.YES_ID, org.eclipse.jface.dialogs.IDialogConstants.NO_ID, org.eclipse.jface.dialogs.IDialogConstants.CANCEL_ID }; labels = new java.lang.String[]{ org.eclipse.jface.dialogs.IDialogConstants.YES_LABEL, org.eclipse.jface.dialogs.IDialogConstants.NO_LABEL, org.eclipse.jface.dialogs.IDialogConstants.CANCEL_LABEL }; } } else { message = org.eclipse.osgi.util.NLS.bind(IDEWorkbenchMessages.CopyFilesAndFoldersOperation_overwriteQuestion, destination.getFullPath().makeRelative()); } org.eclipse.jface.dialogs.MessageDialog dialog = new org.eclipse.jface.dialogs.MessageDialog(shell, org.eclipse.ui.internal.ide.IDEWorkbenchMessages.CopyFilesAndFoldersOperation_resourceExists, null, message, org.eclipse.jface.dialogs.MessageDialog.QUESTION, labels, 0); dialog.open(); if ((dialog.getReturnCode()) == (org.eclipse.swt.SWT.DEFAULT)) { result[0] = org.eclipse.jface.dialogs.IDialogConstants.CANCEL_ID; } else { result[0] = resultId[dialog.getReturnCode()]; } }
protected void initializeDefaultPreferences(org.eclipse.jface.preference.IPreferenceStore store) { org.eclipse.jface.preference.JFacePreferences.setPreferenceStore(store); store.setDefault(IWorkbenchPreferences.SHOULD_SAVE_WORKBENCH_STATE, false); store.setDefault(IWorkbenchPreferences.SHOULD_SHOW_TITLE_BAR, true); store.setDefault(IWorkbenchPreferences.SHOULD_SHOW_MENU_BAR, true); store.setDefault(IWorkbenchPreferences.SHOULD_SHOW_COOL_BAR, true); store.setDefault(IWorkbenchPreferences.SHOULD_SHOW_SHORTCUT_BAR, false); store.setDefault(IWorkbenchPreferences.SHOULD_SHOW_FAST_VIEW_BARS, false); store.setDefault(IWorkbenchPreferences.SHOULD_SHOW_PERSPECTIVE_BAR, false); store.setDefault(IWorkbenchPreferences.SHOULD_SHOW_STATUS_LINE, true); store.setDefault(IWorkbenchPreferences.SHOULD_SHOW_PROGRESS_INDICATOR, false); store.setDefault(IPreferenceConstants.CLOSE_EDITORS_ON_EXIT, false); store.setDefault(IWorkbenchPreferenceConstants.SHOULD_PROMPT_FOR_ENABLEMENT, true); store.setDefault(IPreferenceConstants.EDITORLIST_PULLDOWN_ACTIVE, false); store.setDefault(IPreferenceConstants.EDITORLIST_DISPLAY_FULL_NAME, false); store.setDefault(IPreferenceConstants.STICKY_CYCLE, false); store.setDefault(IPreferenceConstants.REUSE_EDITORS_BOOLEAN, false); store.setDefault(IPreferenceConstants.REUSE_DIRTY_EDITORS, true); store.setDefault(IPreferenceConstants.REUSE_EDITORS, 8); store.setDefault(IPreferenceConstants.OPEN_ON_SINGLE_CLICK, false); store.setDefault(IPreferenceConstants.SELECT_ON_HOVER, false); store.setDefault(IPreferenceConstants.OPEN_AFTER_DELAY, false); store.setDefault(IPreferenceConstants.RECENT_FILES, 4); store.setDefault(IPreferenceConstants.VIEW_TAB_POSITION, SWT.TOP); store.setDefault(IPreferenceConstants.EDITOR_TAB_POSITION, SWT.TOP); store.setDefault(IPreferenceConstants.EDITOR_TAB_WIDTH, 3); store.setDefault(IPreferenceConstants.OPEN_VIEW_MODE, IPreferenceConstants.OVM_EMBED); store.setDefault(IPreferenceConstants.OPEN_PERSP_MODE, IPreferenceConstants.OPM_ACTIVE_PAGE); store.setDefault(IPreferenceConstants.ENABLED_DECORATORS, ""); store.setDefault(IPreferenceConstants.EDITORLIST_SELECTION_SCOPE, IPreferenceConstants.EDITORLIST_SET_PAGE_SCOPE); store.setDefault(IPreferenceConstants.EDITORLIST_SORT_CRITERIA, IPreferenceConstants.EDITORLIST_NAME_SORT); store.setDefault(IPreferenceConstants.COLOR_ICONS, false); store.setDefault(IPreferenceConstants.SHOW_SHORTCUT_BAR, true); store.setDefault(IPreferenceConstants.SHOW_STATUS_LINE, true); store.setDefault(IPreferenceConstants.SHOW_TOOL_BAR, true); store.setDefault(IPreferenceConstants.MULTI_KEY_ASSIST, false); store.setDefault(IPreferenceConstants.MULTI_KEY_ASSIST_TIME, 1000); org.eclipse.jface.preference.PreferenceConverter.setDefault(store, JFacePreferences.ERROR_COLOR, new org.eclipse.swt.graphics.RGB(255, 0, 0)); org.eclipse.jface.preference.PreferenceConverter.setDefault(store, JFacePreferences.HYPERLINK_COLOR, new org.eclipse.swt.graphics.RGB(0, 0, 153)); org.eclipse.jface.preference.PreferenceConverter.setDefault(store, JFacePreferences.ACTIVE_HYPERLINK_COLOR, new org.eclipse.swt.graphics.RGB(0, 0, 255)); store.setDefault("ENABLE_CONFIGURABLE_PROJECT_WIZARD", false); store.setDefault("SINGLE_CLICK_METHOD", OpenStrategy.DOUBLE_CLICK); store.setDefault("ENABLE_COOL_BARS", true); store.setDefault("ENABLE_NEW_MENUS", true); store.setDefault("DISABLE_DIALOG_FONT", false); org.eclipse.jface.resource.FontRegistry registry = org.eclipse.jface.resource.JFaceResources.getFontRegistry(); initializeFont(JFaceResources.DIALOG_FONT, registry, store); initializeFont(JFaceResources.BANNER_FONT, registry, store); initializeFont(JFaceResources.HEADER_FONT, registry, store); initializeFont(JFaceResources.TEXT_FONT, registry, store); store.addPropertyChangeListener(org.eclipse.ui.internal.themes.FontDefinition.getPreferenceListener()); store.addPropertyChangeListener(new org.eclipse.ui.internal.PlatformUIPreferenceListener()); }
private java.lang.String validateLinkedResource(org.eclipse.core.resources.IContainer destination, org.eclipse.core.resources.IResource source) { if ((source.isLinked()) && ((destination.getType()) != (org.eclipse.core.resources.IResource.PROJECT))) { return org.eclipse.ui.internal.WorkbenchMessages.format("CopyFilesAndFoldersOperation.linkCopyToNonProject", new java.lang.Object[]{ source.getName() }); } if (((source.getProject().equals(destination.getProject())) == false) && ((source.getType()) == (org.eclipse.core.resources.IResource.FOLDER))) { try { org.eclipse.core.resources.IResource[] members = destination.members(); org.eclipse.core.runtime.IPath sourceLocation = source.getLocation(); for (int j = 0; j < (members.length); j++) { if ((sourceLocation.equals(members[j].getLocation())) && (source.getName().equals(members[j].getName()))) { return org.eclipse.ui.internal.WorkbenchMessages.format("CopyFilesAndFoldersOperation.sameSourceAndDest", new java.lang.Object[]{ source.getName() }); } } } catch (org.eclipse.core.runtime.CoreException exception) { displayError(org.eclipse.ui.internal.WorkbenchMessages.format("CopyFilesAndFoldersOperation.internalError", new java.lang.Object[]{ exception.getMessage() })); } } return null; }
public void doubleClicked(org.eclipse.jface.text.ITextViewer text) { int position = text.getSelectedRange().x; if (position < 0) return; try { org.eclipse.jface.text.IDocument document = text.getDocument(); org.eclipse.jface.text.IRegion line = document.getLineInformationOfOffset(position); if (position == ((line.getOffset()) + (line.getLength()))) return; fDocIter.setDocument(document, line); java.text.BreakIterator breakIter = java.text.BreakIterator.getWordInstance(); breakIter.setText(fDocIter); int start = breakIter.preceding(position); if (start == (java.text.BreakIterator.DONE)) start = line.getOffset(); int end = breakIter.following(position); if (end == (java.text.BreakIterator.DONE)) end = (line.getOffset()) + (line.getLength()); if (breakIter.isBoundary(position)) { if ((end - position) > (position - start)) start = position; else end = position; } if (start != end) text.setSelectedRange(start, (end - start)); } catch (org.eclipse.jface.text.BadLocationException x) { } }
protected void handleCoreException(org.eclipse.core.runtime.CoreException exception) { org.eclipse.ui.internal.WorkbenchPlugin.getDefault().getLog().log(exception.getStatus()); this.enabled = false; }
public void showPage(org.eclipse.jface.wizard.IWizardPage page) { if ((page == null) || (page == (this.currentPage))) { return; } if (!(this.isMovingToPreviousPage)) { page.setPreviousPage(this.currentPage); } else { this.isMovingToPreviousPage = false; } if ((getContents()) == null) { updateForPage(page); } else { final org.eclipse.jface.wizard.IWizardPage finalPage = page; org.eclipse.swt.custom.BusyIndicator.showWhile(getContents().getDisplay(), new java.lang.Runnable() { public void run() { updateForPage(finalPage); } }); } }
public void update() { if (((fWorkbenchPart) == null) && ((fWorkbenchWindow) != null)) fWorkbenchPart = fWorkbenchWindow.getPartService().getActivePart(); if ((fWorkbenchPart) instanceof org.eclipse.ui.texteditor.ITextEditorExtension) { org.eclipse.ui.texteditor.ITextEditorExtension extension = ((org.eclipse.ui.texteditor.ITextEditorExtension) (fWorkbenchPart)); fIsTargetEditable = !(extension.isEditorInputReadOnly()); } if ((fWorkbenchPart) != null) fTarget = ((org.eclipse.jface.text.IFindReplaceTarget) (fWorkbenchPart.getAdapter(org.eclipse.jface.text.IFindReplaceTarget.class))); else fTarget = null; setEnabled((((fTarget) != null) && (fTarget.canPerformFind()))); if ((org.eclipse.ui.texteditor.FindReplaceAction.fgFindReplaceDialogStub) != null) { org.eclipse.ui.texteditor.FindReplaceDialog dialog = org.eclipse.ui.texteditor.FindReplaceAction.fgFindReplaceDialogStub.getDialog(); dialog.updateTarget(fTarget, fIsTargetEditable); } }
void dispose() { setAnimated(false); org.eclipse.ui.internal.progress.JobProgressManager.getInstance().removeListener(listener); }
public java.lang.Object getAdapter(java.lang.Class adapter) { if (adapter.equals(org.eclipse.core.resources.IMarker.class)) { return this.marker; } if ((adapter.equals(org.eclipse.core.resources.IResource.class)) && ((this.marker) != null)) { return this.marker.getResource(); } return null; }
private final void checkWindowType(final org.eclipse.swt.widgets.Shell newShell) { boolean submissionsProcessed = false; final org.eclipse.swt.widgets.Shell oldShell = activeShell; java.util.List oldSubmissions = ((java.util.List) (registeredWindows.get(oldShell))); if (oldSubmissions == null) { oldSubmissions = ((java.util.List) (registeredWindows.get(null))); if (oldSubmissions != null) { removeEnabledSubmissions(oldSubmissions); submissionsProcessed = true; } } if ((((newShell != null) && (!(newShell.isDisposed()))) && ((newShell.getParent()) != null)) && ((registeredWindows.get(newShell)) == null)) { final java.util.List newSubmissions = new java.util.ArrayList(); newSubmissions.add(new org.eclipse.ui.contexts.EnabledSubmission(null, newShell, null, CONTEXT_ID_DIALOG_AND_WINDOW)); newSubmissions.add(new org.eclipse.ui.contexts.EnabledSubmission(null, newShell, null, CONTEXT_ID_DIALOG)); addEnabledSubmissions(newSubmissions); registeredWindows.put(null, newSubmissions); submissionsProcessed = true; newShell.addDisposeListener(new org.eclipse.swt.events.DisposeListener() { public void widgetDisposed(org.eclipse.swt.events.DisposeEvent e) { registeredWindows.remove(null); removeEnabledSubmissions(newSubmissions); } }); } if (!submissionsProcessed) { processEnabledSubmissions(false, newShell); } }
public void update(java.lang.String propertyName) { if ((widget) != null) { boolean textChanged = (propertyName == null) || (propertyName.equals(IAction.TEXT)); boolean imageChanged = (propertyName == null) || (propertyName.equals(IAction.IMAGE)); boolean tooltipTextChanged = (propertyName == null) || (propertyName.equals(IAction.TOOL_TIP_TEXT)); boolean enableStateChanged = ((propertyName == null) || (propertyName.equals(IAction.ENABLED))) || (propertyName.equals(IContributionManagerOverrides.P_ENABLED)); boolean checkChanged = (((action.getStyle()) == (IAction.AS_CHECK_BOX)) || ((action.getStyle()) == (IAction.AS_RADIO_BUTTON))) && ((propertyName == null) || (propertyName.equals(IAction.CHECKED))); if ((widget) instanceof org.eclipse.swt.widgets.ToolItem) { org.eclipse.swt.widgets.ToolItem ti = ((org.eclipse.swt.widgets.ToolItem) (widget)); java.lang.String text = action.getText(); boolean showText = (text != null) && ((((getMode()) & (org.eclipse.jface.action.ActionContributionItem.MODE_FORCE_TEXT)) != 0) || (!(hasImages(action)))); if (showText && (text != null)) { text = org.eclipse.jface.action.Action.removeAcceleratorText(text); text = org.eclipse.jface.action.Action.removeMnemonics(text); } if (textChanged) { java.lang.String textToSet = (showText) ? text : ""; boolean rightStyle = ((ti.getParent().getStyle()) & (org.eclipse.swt.SWT.RIGHT)) != 0; if (rightStyle || (!(ti.getText().equals(textToSet)))) { ti.setText(textToSet); } } if (imageChanged) { updateImages((!showText)); } if (tooltipTextChanged || textChanged) { java.lang.String toolTip = action.getToolTipText(); if ((!showText) || ((toolTip != null) && (!(toolTip.equals(text))))) { ti.setToolTipText(action.getToolTipText()); } else { ti.setToolTipText(null); } } if (enableStateChanged) { boolean shouldBeEnabled = (action.isEnabled()) && (isEnabledAllowed()); if ((ti.getEnabled()) != shouldBeEnabled) ti.setEnabled(shouldBeEnabled); } if (checkChanged) { boolean bv = action.isChecked(); if ((ti.getSelection()) != bv) ti.setSelection(bv); } return; } if ((widget) instanceof org.eclipse.swt.widgets.MenuItem) { org.eclipse.swt.widgets.MenuItem mi = ((org.eclipse.swt.widgets.MenuItem) (widget)); if (textChanged) { int accelerator = 0; java.lang.String acceleratorText = null; org.eclipse.jface.action.IAction updatedAction = getAction(); java.lang.String text = null; accelerator = updatedAction.getAccelerator(); org.eclipse.jface.action.ExternalActionManager.ICallback callback = org.eclipse.jface.action.ExternalActionManager.getInstance().getCallback(); if ((accelerator != 0) && (callback.isAcceleratorInUse(accelerator))) { accelerator = 0; } java.lang.String commandId = updatedAction.getActionDefinitionId(); if (org.eclipse.swt.SWT.getPlatform().equals("gtk")) { if ((callback != null) && (commandId != null)) { java.lang.Integer commandAccelerator = callback.getAccelerator(commandId); if (commandAccelerator != null) { int accelInt = callback.getAccelerator(commandId).intValue(); if ((accelInt >= (org.eclipse.jface.action.ActionContributionItem.LOWER_GTK_ACCEL_BOUND)) && (accelInt <= (org.eclipse.jface.action.ActionContributionItem.UPPER_GTK_ACCEL_BOUND))) { accelerator = accelInt; acceleratorText = callback.getAcceleratorText(commandId); } } } } if (accelerator == 0) { if ((callback != null) && (commandId != null)) { acceleratorText = callback.getAcceleratorText(commandId); } } else { acceleratorText = org.eclipse.jface.action.Action.convertAccelerator(accelerator); } org.eclipse.jface.action.IContributionManagerOverrides overrides = null; if ((getParent()) != null) overrides = getParent().getOverrides(); if (overrides != null) text = getParent().getOverrides().getText(this); mi.setAccelerator(accelerator); if (text == null) text = updatedAction.getText(); if (text == null) text = ""; else text = org.eclipse.jface.action.Action.removeAcceleratorText(text); if (acceleratorText == null) mi.setText(text); else mi.setText(((text + '\t') + acceleratorText)); } if (imageChanged) updateImages(false); if (enableStateChanged) { boolean shouldBeEnabled = (action.isEnabled()) && (isEnabledAllowed()); if ((mi.getEnabled()) != shouldBeEnabled) mi.setEnabled(shouldBeEnabled); } if (checkChanged) { boolean bv = action.isChecked(); if ((mi.getSelection()) != bv) mi.setSelection(bv); } return; } if ((widget) instanceof org.eclipse.swt.widgets.Button) { org.eclipse.swt.widgets.Button button = ((org.eclipse.swt.widgets.Button) (widget)); if (imageChanged && (updateImages(false))) textChanged = false; if (textChanged) { java.lang.String text = action.getText(); if (text != null) button.setText(text); } if (tooltipTextChanged) button.setToolTipText(action.getToolTipText()); if (enableStateChanged) { boolean shouldBeEnabled = (action.isEnabled()) && (isEnabledAllowed()); if ((button.getEnabled()) != shouldBeEnabled) button.setEnabled(shouldBeEnabled); } if (checkChanged) { boolean bv = action.isChecked(); if ((button.getSelection()) != bv) button.setSelection(bv); } return; } } }
protected void internalExpandToLevel(org.eclipse.swt.widgets.Widget widget, int level) { if ((level == (org.eclipse.jface.viewers.AbstractTreeViewer.ALL_LEVELS)) || (level > 0)) { if (((widget instanceof org.eclipse.swt.widgets.Item) && ((widget.getData()) != null)) && (!(isExpandable(((org.eclipse.swt.widgets.Item) (widget)), null, widget.getData())))) { return; } createChildren(widget); if (widget instanceof org.eclipse.swt.widgets.Item) { setExpanded(((org.eclipse.swt.widgets.Item) (widget)), true); } if ((level == (org.eclipse.jface.viewers.AbstractTreeViewer.ALL_LEVELS)) || (level > 1)) { org.eclipse.swt.widgets.Item[] children = getChildren(widget); if (children != null) { int newLevel = (level == (org.eclipse.jface.viewers.AbstractTreeViewer.ALL_LEVELS)) ? org.eclipse.jface.viewers.AbstractTreeViewer.ALL_LEVELS : level - 1; for (int i = 0; i < (children.length); i++) { internalExpandToLevel(children[i], newLevel); } } } } }
void createPage0() { try { editor = new org.eclipse.ui.editors.text.TextEditor(); int index = addPage(editor, getEditorInput()); setPageText(index, org.eclipse.ui.examples.multipageeditor.MessageUtil.getString("Source")); } catch (org.eclipse.ui.examples.multipageeditor.PartInitException e) { org.eclipse.jface.dialogs.ErrorDialog.openError(getSite().getShell(), org.eclipse.ui.examples.multipageeditor.MessageUtil.getString("ErrorCreatingNestedEditor"), null, e.getStatus()); } }
public void keyPressed(org.eclipse.swt.events.KeyEvent e) { int keyCode = e.keyCode; int stateMask = e.stateMask; char character = e.character; int accelerator = stateMask | (keyCode != 0 ? keyCode : org.eclipse.ui.internal.CyclePartAction.convertCharacter(character)); org.eclipse.ui.keys.KeySequence keySequence = org.eclipse.ui.keys.KeySequence.getInstance(org.eclipse.ui.internal.keys.KeySupport.convertAcceleratorToKeyStroke(accelerator)); boolean acceleratorForward = false; boolean acceleratorBackward = false; org.eclipse.ui.internal.commands.CommandManager commandManager = org.eclipse.ui.internal.commands.CommandManager.getInstance(); if ((commandForward) != null) { org.eclipse.ui.commands.ICommand command = commandManager.getCommand(commandForward); if (command.isDefined()) { try { java.util.SortedSet keyBindings = command.getKeyBindings(); java.util.Iterator iterator = keyBindings.iterator(); while (iterator.hasNext()) { org.eclipse.ui.commands.IKeyBinding keyBinding = ((org.eclipse.ui.commands.IKeyBinding) (iterator.next())); if (keyBinding.getKeySequence().equals(keySequence)) { acceleratorForward = true; break; } } } catch (org.eclipse.ui.commands.NotDefinedException eNotDefined) { } } } if ((commandBackward) != null) { org.eclipse.ui.commands.ICommand command = commandManager.getCommand(commandBackward); if (command.isDefined()) { try { java.util.SortedSet keyBindings = command.getKeyBindings(); java.util.Iterator iterator = keyBindings.iterator(); while (iterator.hasNext()) { org.eclipse.ui.commands.IKeyBinding keyBinding = ((org.eclipse.ui.commands.IKeyBinding) (iterator.next())); if (keyBinding.getKeySequence().equals(keySequence)) { acceleratorBackward = true; break; } } } catch (org.eclipse.ui.commands.NotDefinedException eNotDefined) { } } } if ((character == (org.eclipse.swt.SWT.CR)) || (character == (org.eclipse.swt.SWT.LF))) ok(dialog, table); else if (acceleratorForward) { if ((firstKey) && ((e.stateMask) != 0)) quickReleaseMode = true; int index = table.getSelectionIndex(); table.setSelection(((index + 1) % (table.getItemCount()))); } else if (acceleratorBackward) { if ((firstKey) && ((e.stateMask) != 0)) quickReleaseMode = true; int index = table.getSelectionIndex(); table.setSelection((index >= 1 ? index - 1 : (table.getItemCount()) - 1)); } else if ((((((((keyCode != (org.eclipse.swt.SWT.ALT)) && (keyCode != (org.eclipse.swt.SWT.COMMAND))) && (keyCode != (org.eclipse.swt.SWT.CTRL))) && (keyCode != (org.eclipse.swt.SWT.SHIFT))) && (keyCode != (org.eclipse.swt.SWT.ARROW_DOWN))) && (keyCode != (org.eclipse.swt.SWT.ARROW_UP))) && (keyCode != (org.eclipse.swt.SWT.ARROW_LEFT))) && (keyCode != (org.eclipse.swt.SWT.ARROW_RIGHT))) cancel(dialog); firstKey = false; }
public void setGlobalActionHandler(java.lang.String actionID, org.eclipse.jface.action.IAction handler) { if (actionID == null) { org.eclipse.ui.internal.WorkbenchPlugin.log("Cannot set the global action handler for a null action id"); return; } if (handler != null) { if ((actionHandlers) == null) { actionHandlers = new java.util.HashMap(11); } actionHandlers.put(actionID, handler); if ((serviceLocator) != null) { final org.eclipse.ui.internal.handlers.IActionCommandMappingService mappingService = ((org.eclipse.ui.internal.handlers.IActionCommandMappingService) (serviceLocator.getService(org.eclipse.ui.internal.handlers.IActionCommandMappingService.class))); final java.lang.String commandId = mappingService.getCommandId(actionID); final org.eclipse.ui.handlers.IHandlerService service = ((org.eclipse.ui.handlers.IHandlerService) (serviceLocator.getService(org.eclipse.ui.handlers.IHandlerService.class))); java.util.Map activationsByActionId = null; if ((activationsByActionIdByServiceLocator) == null) { activationsByActionIdByServiceLocator = new java.util.WeakHashMap(); activationsByActionId = new java.util.HashMap(); activationsByActionIdByServiceLocator.put(serviceLocator, activationsByActionId); } else { activationsByActionId = ((java.util.Map) (activationsByActionIdByServiceLocator.get(serviceLocator))); if (activationsByActionId == null) { activationsByActionId = new java.util.HashMap(); activationsByActionIdByServiceLocator.put(serviceLocator, activationsByActionId); } else if (activationsByActionId.containsKey(actionID)) { final java.lang.Object value = activationsByActionId.remove(actionID); if (value instanceof org.eclipse.ui.handlers.IHandlerActivation) { final org.eclipse.ui.handlers.IHandlerActivation activation = ((org.eclipse.ui.handlers.IHandlerActivation) (value)); service.deactivateHandler(activation); activation.getHandler().dispose(); } } } if (commandId != null) { final org.eclipse.core.commands.IHandler actionHandler = new org.eclipse.jface.commands.ActionHandler(handler); final org.eclipse.ui.handlers.IHandlerActivation activation = service.activateHandler(commandId, actionHandler, org.eclipse.ui.SubActionBars.EXPRESSION); activationsByActionId.put(actionID, activation); } } } else { if ((actionHandlers) != null) { actionHandlers.remove(actionID); } if ((serviceLocator) != null) { final org.eclipse.ui.handlers.IHandlerService service = ((org.eclipse.ui.handlers.IHandlerService) (serviceLocator.getService(org.eclipse.ui.handlers.IHandlerService.class))); if ((activationsByActionIdByServiceLocator) != null) { final java.util.Map activationsByActionId = ((java.util.Map) (activationsByActionIdByServiceLocator.get(serviceLocator))); if ((activationsByActionId != null) && (activationsByActionId.containsKey(actionID))) { final java.lang.Object value = activationsByActionId.remove(actionID); if (value instanceof org.eclipse.ui.handlers.IHandlerActivation) { final org.eclipse.ui.handlers.IHandlerActivation activation = ((org.eclipse.ui.handlers.IHandlerActivation) (value)); service.deactivateHandler(activation); activation.getHandler().dispose(); } } } } } actionHandlersChanged = true; }
protected void onActivate() { if ((editorArea.getControl()) != null) { boolean visible = isEditorAreaVisible(); boolean inTrim = (editorAreaState) == (org.eclipse.ui.presentations.IStackPresentationSite.STATE_MINIMIZED); boolean introMaxed = getPresentation().getLayout().childObscuredByZoom(editorArea); editorArea.setVisible(((visible && (!inTrim)) && (!introMaxed))); } if ((fastViewManager) != null) { java.util.List fastViews = fastViewManager.getFastViews(null); for (int i = 0; i < (fastViews.size()); i++) { org.eclipse.ui.internal.ViewPane pane = getPane(((org.eclipse.ui.IViewReference) (fastViews.get(i)))); if (pane != null) { org.eclipse.swt.widgets.Control ctrl = pane.getControl(); if (ctrl == null) { pane.createControl(getClientComposite()); ctrl = pane.getControl(); } ctrl.setEnabled(false); } } } setAllPinsVisible(true); boolean useNewMinMax = org.eclipse.ui.internal.Perspective.useNewMinMax(this); boolean hideEditorArea = (shouldHideEditorsOnActivate) || ((editorHidden) && ((editorHolder) == null)); if (useNewMinMax && (!hideEditorArea)) { refreshEditorAreaVisibility(); } presentation.activate(getClientComposite()); final org.eclipse.jface.action.IMenuManager windowManager = page.getActionBars().getMenuManager(); allowUpdates(windowManager); windowManager.update(false); if (useNewMinMax) { fastViewManager.activate(); if ((layout) != null) { org.eclipse.jface.preference.IPreferenceStore preferenceStore = org.eclipse.ui.internal.util.PrefUtil.getAPIPreferenceStore(); boolean useAnimations = preferenceStore.getBoolean(IWorkbenchPreferenceConstants.ENABLE_ANIMATIONS); preferenceStore.setValue(IWorkbenchPreferenceConstants.ENABLE_ANIMATIONS, false); java.util.List minStacks = layout.getMinimizedStacks(); for (java.util.Iterator msIter = minStacks.iterator(); msIter.hasNext();) { org.eclipse.ui.internal.ViewStack vs = ((org.eclipse.ui.internal.ViewStack) (msIter.next())); vs.setMinimized(true); } preferenceStore.setValue(IWorkbenchPreferenceConstants.ENABLE_ANIMATIONS, useAnimations); minStacks.clear(); layout = null; } } else { org.eclipse.ui.internal.WorkbenchWindow wbw = ((org.eclipse.ui.internal.WorkbenchWindow) (page.getWorkbenchWindow())); if (wbw != null) { org.eclipse.ui.internal.layout.ITrimManager tbm = wbw.getTrimManager(); if (tbm != null) { org.eclipse.ui.internal.layout.IWindowTrim fvb = tbm.getTrim(FastViewBar.FASTVIEWBAR_ID); if (fvb instanceof org.eclipse.ui.internal.FastViewBar) { ((org.eclipse.ui.internal.FastViewBar) (fvb)).update(true); } } } } if ((!(org.eclipse.ui.internal.Perspective.useNewMinMax(this))) && ((fastViewManager) != null)) { boolean stacksWereRestored = fastViewManager.restoreAllTrimStacks(); setEditorAreaTrimVisibility(false); if (stacksWereRestored && ((presentation.getMaximizedStack()) instanceof org.eclipse.ui.internal.ViewStack)) { org.eclipse.ui.internal.ViewStack vs = ((org.eclipse.ui.internal.ViewStack) (presentation.getMaximizedStack())); vs.setPresentationState(IStackPresentationSite.STATE_RESTORED); presentation.setMaximizedStack(null); } } if (hideEditorArea) { hideEditorArea(); shouldHideEditorsOnActivate = false; if (useNewMinMax) setEditorAreaTrimVisibility(((editorAreaState) == (org.eclipse.ui.presentations.IStackPresentationSite.STATE_MINIMIZED))); } fixOrphan(); if (((page.window) != null) && ((page.window.getTrimManager()) != null)) page.window.getTrimManager().forceLayout(); }
public org.eclipse.core.runtime.IStatus saveState(org.eclipse.ui.IMemento memento) { if (isZoomed()) { zoomOut(); } hideFastView(); org.eclipse.core.runtime.MultiStatus result = new org.eclipse.core.runtime.MultiStatus(org.eclipse.ui.PlatformUI.PLUGIN_ID, org.eclipse.core.runtime.IStatus.OK, org.eclipse.osgi.util.NLS.bind(WorkbenchMessages.WorkbenchPage_unableToSavePerspective, getLabel()), null); org.eclipse.ui.IMemento childMem = memento.createChild(IWorkbenchConstants.TAG_EDITORS); result.merge(editorMgr.saveState(childMem)); childMem = memento.createChild(IWorkbenchConstants.TAG_VIEWS); result.merge(getViewFactory().saveState(childMem)); childMem = memento.createChild(IWorkbenchConstants.TAG_PERSPECTIVES); if ((getPerspective()) != null) { childMem.putString(IWorkbenchConstants.TAG_ACTIVE_PERSPECTIVE, getPerspective().getId()); } if ((getActivePart()) != null) { if ((getActivePart()) instanceof org.eclipse.ui.IViewPart) { org.eclipse.ui.IViewReference ref = ((org.eclipse.ui.IViewReference) (getReference(getActivePart()))); if (ref != null) { childMem.putString(IWorkbenchConstants.TAG_ACTIVE_PART, org.eclipse.ui.internal.ViewFactory.getKey(ref)); } } else { childMem.putString(IWorkbenchConstants.TAG_ACTIVE_PART, getActivePart().getSite().getId()); } } java.util.Iterator itr = perspList.iterator(); while (itr.hasNext()) { org.eclipse.ui.internal.Perspective persp = ((org.eclipse.ui.internal.Perspective) (itr.next())); org.eclipse.ui.IMemento gChildMem = childMem.createChild(IWorkbenchConstants.TAG_PERSPECTIVE); result.merge(persp.saveState(gChildMem)); } if ((workingSet) != null) { memento.putString(IWorkbenchConstants.TAG_WORKING_SET, workingSet.getName()); } org.eclipse.ui.IMemento workingSetMem = memento.createChild(IWorkbenchConstants.TAG_WORKING_SETS); for (int i = 0; i < (workingSets.length); i++) { workingSetMem.createChild(IWorkbenchConstants.TAG_WORKING_SET, workingSets[i].getName()); } if ((aggregateWorkingSetId) != null) { memento.putString(org.eclipse.ui.internal.WorkbenchPage.ATT_AGGREGATE_WORKING_SET_ID, aggregateWorkingSetId); } navigationHistory.saveState(memento.createChild(IWorkbenchConstants.TAG_NAVIGATION_HISTORY)); stickyViewMan.save(memento); return result; }
public java.lang.Object getVariable(java.lang.String name) { java.lang.Object obj = eclipseContext.get(name); return obj == null ? org.eclipse.core.expressions.IEvaluationContext.UNDEFINED_VARIABLE : obj; }
public java.lang.Object getUIContainer(org.eclipse.e4.ui.model.application.ui.MUIElement childElement) { org.eclipse.swt.widgets.Composite intermediate = ((org.eclipse.swt.widgets.Composite) (super.getUIContainer(childElement))); if ((intermediate == null) || (intermediate.isDisposed())) { return null; } if (intermediate instanceof org.eclipse.swt.widgets.ToolBar) { return intermediate; } org.eclipse.swt.widgets.ToolBar toolbar = findToolbar(intermediate); if (toolbar == null) { toolbar = createToolbar(childElement.getParent(), intermediate); } return toolbar; }
void doPendingWork() { org.eclipse.ui.internal.Semaphore work; while ((work = pendingWork.remove()) != null) { org.eclipse.ui.internal.Semaphore oldWork = currentWork; try { currentWork = work; java.lang.Runnable runnable = work.getRunnable(); if (runnable != null) runnable.run(); } finally { currentWork = oldWork; work.release(); } } }
public void run() { try { org.eclipse.ui.actions.WorkspaceModifyOperation op = new org.eclipse.ui.actions.WorkspaceModifyOperation() { public void execute(org.eclipse.core.runtime.IProgressMonitor monitor) { org.eclipse.ui.actions.WorkspaceAction.this.execute(monitor); } }; new org.eclipse.jface.dialogs.ProgressMonitorDialog(shell).run(true, true, op); } catch (java.lang.InterruptedException e) { return; } catch (java.lang.reflect.InvocationTargetException e) { java.lang.String msg = org.eclipse.ui.internal.WorkbenchMessages.format("WorkspaceAction.logTitle", new java.lang.Object[]{ getClass().getName(), e.getTargetException() }); org.eclipse.ui.internal.WorkbenchPlugin.log(msg, org.eclipse.ui.internal.misc.StatusUtil.newStatus(org.eclipse.core.runtime.IStatus.ERROR, null, msg, e.getTargetException())); displayError(e.getTargetException().getMessage()); } if ((errorStatus) != null) { org.eclipse.jface.dialogs.ErrorDialog.openError(shell, getProblemsTitle(), null, errorStatus); } errorStatus = null; }
private void updateMenuItem() { org.eclipse.swt.widgets.MenuItem item = ((org.eclipse.swt.widgets.MenuItem) (widget)); java.lang.String text = model.getLocalizedLabel(); org.eclipse.core.commands.ParameterizedCommand parmCmd = model.getWbCommand(); java.lang.String keyBindingText = null; if (parmCmd != null) { if (text == null) { try { text = parmCmd.getName(); } catch (org.eclipse.core.commands.common.NotDefinedException e) { } } if ((bindingService) != null) { org.eclipse.jface.bindings.TriggerSequence binding = bindingService.getBestSequenceFor(parmCmd); if (binding != null) keyBindingText = binding.format(); } } if (text != null) { if ((model) instanceof org.eclipse.e4.ui.model.application.ui.menu.MMenuElement) { java.lang.String mnemonics = ((org.eclipse.e4.ui.model.application.ui.menu.MMenuElement) (model)).getMnemonics(); if (mnemonics != null) { int idx = text.indexOf(mnemonics); if (idx != (-1)) { text = ((text.substring(0, idx)) + '&') + (text.substring(idx)); } } } if (keyBindingText == null) item.setText(text); else item.setText(((text + '\t') + keyBindingText)); } else { item.setText(""); } item.setSelection(model.isSelected()); item.setEnabled(model.isEnabled()); }
protected boolean showPage(org.eclipse.jface.preference.IPreferenceNode node) { if (node == null) return false; if ((node.getPage()) == null) node.createPage(); if ((node.getPage()) == null) return false; org.eclipse.jface.preference.IPreferencePage newPage = node.getPage(); if (newPage == (currentPage)) return true; org.eclipse.jface.preference.Control currentWindow = null; if ((currentPage) != null) { if (!(currentPage.okToLeave())) return false; } org.eclipse.jface.preference.IPreferencePage oldPage = currentPage; currentPage = newPage; currentPage.setContainer(this); if ((currentPage.getControl()) == null) currentPage.createControl(pageContainer); org.eclipse.jface.preference.Point contentSize = currentPage.computeSize(); org.eclipse.jface.preference.Shell shell = getShell(); org.eclipse.jface.preference.Point shellSize = shell.getSize(); if (oldPage != null) { org.eclipse.jface.preference.Rectangle rect = pageContainer.getClientArea(); org.eclipse.jface.preference.Point containerSize = new org.eclipse.jface.preference.Point(rect.width, rect.height); int hdiff = (contentSize.x) - (containerSize.x); int vdiff = (contentSize.y) - (containerSize.y); if ((hdiff > 0) || (vdiff > 0)) { if (shellSize.equals(lastShellSize)) { hdiff = java.lang.Math.max(0, hdiff); vdiff = java.lang.Math.max(0, vdiff); setShellSize(((shellSize.x) + hdiff), ((shellSize.y) + vdiff)); lastShellSize = shell.getSize(); } else { currentPage.setSize(containerSize); } } else if ((hdiff < 0) || (vdiff < 0)) { currentPage.setSize(containerSize); } } org.eclipse.jface.preference.Control[] children = pageContainer.getChildren(); org.eclipse.jface.preference.Control currentControl = currentPage.getControl(); for (int i = 0; i < (children.length); i++) { if ((children[i]) != currentControl) children[i].setVisible(false); } currentPage.setVisible(true); if (oldPage != null) oldPage.setVisible(false); update(); return true; }
private org.eclipse.swt.graphics.Image getOverrideImage(org.eclipse.e4.ui.model.application.ui.MUIElement element) { org.eclipse.swt.graphics.Image result = null; java.lang.Object imageObject = element.getTransientData().get(IPresentationEngine.OVERRIDE_ICON_IMAGE_KEY); if (((imageObject != null) && (imageObject instanceof org.eclipse.swt.graphics.Image)) && (!(((org.eclipse.swt.graphics.Image) (imageObject)).isDisposed()))) result = ((org.eclipse.swt.graphics.Image) (imageObject)); return result; }
public final void createPartControl(org.eclipse.swt.widgets.Composite parent) { org.eclipse.swt.widgets.Composite pageContainer = createPageContainer(parent); this.container = createContainer(pageContainer); createPages(); if ((getActivePage()) == (-1)) { setActivePage(0); org.eclipse.ui.IEditorPart part = getEditor(0); if (part != null) { final org.eclipse.ui.services.IServiceLocator serviceLocator = part.getEditorSite(); if (serviceLocator instanceof org.eclipse.ui.internal.services.INestable) { activeServiceLocator = ((org.eclipse.ui.internal.services.INestable) (serviceLocator)); activeServiceLocator.activate(); } } } }
void removeListeners() { if (isValid()) { proposalTable.removeListener(SWT.FocusOut, this); org.eclipse.swt.widgets.ScrollBar scrollbar = proposalTable.getVerticalBar(); if (scrollbar != null) scrollbar.removeListener(SWT.Selection, this); getShell().removeListener(SWT.Deactivate, this); getShell().removeListener(SWT.Close, this); } if (((control) != null) && (!(control.isDisposed()))) { control.removeListener(SWT.MouseDoubleClick, this); control.removeListener(SWT.MouseDown, this); control.removeListener(SWT.Dispose, this); control.removeListener(SWT.FocusOut, this); org.eclipse.swt.widgets.Shell controlShell = control.getShell(); controlShell.removeListener(SWT.Move, this); controlShell.removeListener(SWT.Resize, this); } }
private boolean itemExists(org.eclipse.swt.widgets.Item[] items, java.lang.Object element) { if (usingElementMap()) { org.eclipse.swt.widgets.Widget[] existingItems = findItems(element); if ((existingItems.length) == 0) { return false; } else if ((existingItems.length) == 1) { if (((items.length) > 0) && ((existingItems[0]) instanceof org.eclipse.swt.widgets.Item)) { org.eclipse.swt.widgets.Item existingItem = ((org.eclipse.swt.widgets.Item) (existingItems[0])); return (getParentItem(existingItem)) == (getParentItem(items[0])); } } } for (int i = 0; i < (items.length); i++) { if (items[i].getData().equals(element)) { return true; } } return false; }
public OperationHistoryActionHandler(org.eclipse.ui.IWorkbenchPartSite site, org.eclipse.core.commands.operations.IUndoContext context) { super(""); this.site = site; undoContext = context; site.getPage().addPartListener(partListener); getHistory().addOperationHistoryListener(this); update(); }
private void defineContexts(org.eclipse.e4.ui.model.application.commands.MBindingContext parent, org.eclipse.e4.ui.model.application.commands.MBindingContext current) { if (((current.getName()) == null) || ((current.getElementId()) == null)) { logger.error(("Binding context name or id is null for: " + current)); return; } org.eclipse.core.commands.contexts.Context context = contextManager.getContext(current.getElementId()); if (!(context.isDefined())) { java.lang.String localizedName = org.eclipse.e4.ui.model.LocalizationHelper.getLocalized(current.getName(), current, application.getContext()); java.lang.String localizedDescriptor = org.eclipse.e4.ui.model.LocalizationHelper.getLocalized(current.getDescription(), current, application.getContext()); context.define(localizedName, localizedDescriptor, (parent == null ? null : parent.getElementId())); } for (org.eclipse.e4.ui.model.application.commands.MBindingContext child : current.getChildren()) { defineContexts(current, child); } }
private void showTab(org.eclipse.e4.ui.model.application.MItemPart<?> part) { org.eclipse.swt.custom.CTabFolder ctf = ((org.eclipse.swt.custom.CTabFolder) (getParentWidget(part))); org.eclipse.swt.widgets.Control ctrl = ((org.eclipse.swt.widgets.Control) (part.getWidget())); org.eclipse.swt.custom.CTabItem cti = findItemForPart(part.getParent(), part); cti.setControl(ctrl); org.eclipse.swt.widgets.ToolBar tb = getToolbar(part); if (tb != null) { org.eclipse.swt.widgets.Control curTR = ctf.getTopRight(); if (curTR != null) curTR.dispose(); if ((tb.getSize().y) > (ctf.getTabHeight())) ctf.setTabHeight(tb.getSize().y); ctf.setTopRight(tb, SWT.RIGHT); ctf.layout(true); ctf.notifyListeners(SWT.Resize, null); } }
protected void doFillIntoGrid(org.eclipse.swt.widgets.Composite parent, int numColumns) { org.eclipse.swt.widgets.Control control = getLabelControl(parent); org.eclipse.swt.layout.GridData gd = new org.eclipse.swt.layout.GridData(); gd.horizontalSpan = numColumns - 1; control.setLayoutData(gd); org.eclipse.swt.widgets.Button colorButton = getChangeControl(parent); gd = new org.eclipse.swt.layout.GridData(); int widthHint = convertHorizontalDLUsToPixels(colorButton, IDialogConstants.BUTTON_WIDTH); gd.widthHint = java.lang.Math.max(widthHint, colorButton.computeSize(SWT.DEFAULT, SWT.DEFAULT, true).x); colorButton.setLayoutData(gd); }
private void setItemText(org.eclipse.e4.ui.model.application.ui.menu.MToolItem model, org.eclipse.swt.widgets.ToolItem item) { java.lang.String text = model.getLocalizedLabel(); if (model instanceof org.eclipse.e4.ui.model.application.ui.menu.MHandledItem) { org.eclipse.e4.ui.model.application.ui.menu.MHandledItem handledItem = ((org.eclipse.e4.ui.model.application.ui.menu.MHandledItem) (model)); org.eclipse.e4.core.contexts.IEclipseContext context = getContext(model); org.eclipse.e4.ui.bindings.EBindingService bs = ((org.eclipse.e4.ui.bindings.EBindingService) (context.get(org.eclipse.e4.ui.bindings.EBindingService.class.getName()))); org.eclipse.core.commands.ParameterizedCommand cmd = handledItem.getWbCommand(); if (cmd == null) { cmd = generateParameterizedCommand(handledItem, context); } org.eclipse.jface.bindings.TriggerSequence sequence = bs.getBestSequenceFor(handledItem.getWbCommand()); if (sequence != null) { text = (text + '\t') + (sequence.format()); } item.setText(text); } else { if (text == null) { text = ""; } item.setText(text); } }
public void run() { org.eclipse.swt.widgets.Control tree = getControl(); tree.setRedraw(false); try { removeAll(tree); tree.setData(getRoot()); internalInitializeTree(tree); } finally { tree.setRedraw(true); } }
private void disconnectFromWorkspace() { final org.eclipse.core.runtime.MultiStatus status = new org.eclipse.core.runtime.MultiStatus(IDEWorkbenchPlugin.IDE_WORKBENCH, 1, org.eclipse.ui.internal.ide.IDEWorkbenchMessages.getString("ProblemSavingWorkbench"), null); org.eclipse.jface.operation.IRunnableWithProgress runnable = new org.eclipse.jface.operation.IRunnableWithProgress() { public void run(org.eclipse.core.runtime.IProgressMonitor monitor) { try { status.merge(org.eclipse.core.resources.ResourcesPlugin.getWorkspace().save(true, monitor)); } catch (org.eclipse.core.runtime.CoreException e) { status.merge(e.getStatus()); } } }; try { new org.eclipse.ui.internal.progress.ProgressMonitorJobsDialog(null).run(false, false, runnable); } catch (java.lang.reflect.InvocationTargetException e) { status.merge(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, IDEWorkbenchPlugin.IDE_WORKBENCH, 1, org.eclipse.ui.internal.ide.IDEWorkbenchMessages.getString("InternalError"), e.getTargetException())); } catch (java.lang.InterruptedException e) { status.merge(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, IDEWorkbenchPlugin.IDE_WORKBENCH, 1, org.eclipse.ui.internal.ide.IDEWorkbenchMessages.getString("InternalError"), e)); } org.eclipse.jface.dialogs.ErrorDialog.openError(null, org.eclipse.ui.internal.ide.IDEWorkbenchMessages.getString("ProblemsSavingWorkspace"), null, status, ((org.eclipse.core.runtime.IStatus.ERROR) | (org.eclipse.core.runtime.IStatus.WARNING))); if (!(status.isOK())) { org.eclipse.ui.internal.ide.IDEWorkbenchPlugin.log(org.eclipse.ui.internal.ide.IDEWorkbenchMessages.getString("ProblemsSavingWorkspace"), status); } }
public void add(java.lang.Object[] elements) { org.eclipse.jface.viewers.ViewerComparator sorter = getComparator(); java.util.Set newItems = new java.util.HashSet(elements.length); org.eclipse.swt.widgets.Control[] existingChildren = control.getChildren(); for (int i = 0; i < (existingChildren.length); i++) { if ((existingChildren[i].getData()) != null) newItems.add(existingChildren[i].getData()); } for (int i = 0; i < (elements.length); i++) { if ((elements[i]) != null) newItems.add(elements[i]); } org.eclipse.ui.internal.progress.JobTreeElement[] infos = new org.eclipse.ui.internal.progress.JobTreeElement[newItems.size()]; newItems.toArray(infos); if (sorter != null) { sorter.sort(this, infos); } for (int i = 0; i < (existingChildren.length); i++) { ((org.eclipse.ui.internal.progress.ProgressInfoItem) (existingChildren[i])).dispose(); } for (int i = 0; i < (newItems.size()); i++) { org.eclipse.ui.internal.progress.ProgressInfoItem item = createNewItem(infos[i]); item.setColor(i); } control.layout(true); updateForShowingProgress(); }
public static org.eclipse.e4.ui.model.application.ui.menu.MToolBarElement createLegacyToolBarActionAdditions(org.eclipse.e4.ui.model.application.MApplication app, final org.eclipse.core.runtime.IConfigurationElement element) { java.lang.String cmdId = org.eclipse.ui.internal.menus.MenuHelper.getActionSetCommandId(element); final java.lang.String id = org.eclipse.ui.internal.menus.MenuHelper.getId(element); java.lang.String text = org.eclipse.ui.internal.menus.MenuHelper.getLabel(element); java.lang.String mnemonic = org.eclipse.ui.internal.menus.MenuHelper.getMnemonic(element); if ((text != null) && (mnemonic != null)) { int idx = text.indexOf(mnemonic); if (idx != (-1)) { text = ((text.substring(0, idx)) + '&') + (text.substring(idx)); } } java.lang.String iconUri = org.eclipse.ui.internal.menus.MenuHelper.getIconUrl(element, IWorkbenchRegistryConstants.ATT_ICON); org.eclipse.e4.ui.model.application.commands.MCommand cmd = org.eclipse.e4.ui.internal.workbench.ContributionsAnalyzer.getCommandById(app, cmdId); if (cmd == null) { org.eclipse.e4.core.commands.ECommandService commandService = app.getContext().get(org.eclipse.e4.core.commands.ECommandService.class); org.eclipse.core.commands.Command command = commandService.getCommand(cmdId); if (command == null) { org.eclipse.ui.commands.ICommandService ics = app.getContext().get(org.eclipse.ui.commands.ICommandService.class); command = commandService.defineCommand(cmdId, text, null, ics.getCategory(null), null); } cmd = CommandsFactoryImpl.eINSTANCE.createCommand(); cmd.setCommandName(text); cmd.setElementId(cmdId); app.getCommands().add(cmd); } final org.eclipse.e4.ui.model.application.ui.menu.MHandledToolItem item = MenuFactoryImpl.eINSTANCE.createHandledToolItem(); java.lang.String style = element.getAttribute(IWorkbenchRegistryConstants.ATT_STYLE); if ((style == null) || ((style.length()) == 0)) { item.setType(ItemType.PUSH); } else if (IWorkbenchRegistryConstants.STYLE_TOGGLE.equals(style)) { item.setType(ItemType.CHECK); org.eclipse.e4.core.contexts.IContextFunction generator = org.eclipse.ui.internal.menus.MenuHelper.createToggleFunction(element); if (generator != null) { item.getTransientData().put(ItemType.CHECK.toString(), generator); } } else if (IWorkbenchRegistryConstants.STYLE_RADIO.equals(style)) { item.setType(ItemType.RADIO); } else if (IWorkbenchRegistryConstants.STYLE_PULLDOWN.equals(style)) { org.eclipse.e4.ui.model.application.ui.menu.MRenderedMenu menu = MenuFactoryImpl.eINSTANCE.createRenderedMenu(); org.eclipse.e4.core.commands.ECommandService cs = app.getContext().get(org.eclipse.e4.core.commands.ECommandService.class); final org.eclipse.core.commands.ParameterizedCommand parmCmd = cs.createCommand(cmdId, null); org.eclipse.e4.core.contexts.IContextFunction generator = new org.eclipse.e4.core.contexts.ContextFunction() { @java.lang.Override public java.lang.Object compute(org.eclipse.e4.core.contexts.IEclipseContext context) { return new org.eclipse.jface.action.IMenuCreator() { private org.eclipse.ui.internal.handlers.ActionDelegateHandlerProxy handlerProxy; private org.eclipse.ui.internal.handlers.ActionDelegateHandlerProxy getProxy() { if ((handlerProxy) == null) { handlerProxy = new org.eclipse.ui.internal.handlers.ActionDelegateHandlerProxy(element, org.eclipse.ui.internal.registry.IWorkbenchRegistryConstants.ATT_CLASS, id, parmCmd, org.eclipse.ui.PlatformUI.getWorkbench().getActiveWorkbenchWindow(), null, null, null); } return handlerProxy; } private org.eclipse.ui.IWorkbenchWindowPulldownDelegate getDelegate() { getProxy(); if ((handlerProxy) == null) { return null; } if ((handlerProxy.getDelegate()) == null) { handlerProxy.loadDelegate(); org.eclipse.ui.ISelectionService service = org.eclipse.ui.PlatformUI.getWorkbench().getActiveWorkbenchWindow().getSelectionService(); org.eclipse.ui.IActionDelegate delegate = handlerProxy.getDelegate(); delegate.selectionChanged(handlerProxy.getAction(), service.getSelection()); } return ((org.eclipse.ui.IWorkbenchWindowPulldownDelegate) (handlerProxy.getDelegate())); } public org.eclipse.swt.widgets.Menu getMenu(org.eclipse.swt.widgets.Menu parent) { org.eclipse.ui.IWorkbenchWindowPulldownDelegate2 delegate = ((org.eclipse.ui.IWorkbenchWindowPulldownDelegate2) (getDelegate())); if (delegate == null) { return null; } return delegate.getMenu(parent); } public org.eclipse.swt.widgets.Menu getMenu(org.eclipse.swt.widgets.Control parent) { return (getDelegate()) == null ? null : getDelegate().getMenu(parent); } public void dispose() { if ((handlerProxy) != null) { handlerProxy.dispose(); handlerProxy = null; } } }; } }; menu.setContributionManager(generator); item.setMenu(menu); } else { item.setType(ItemType.PUSH); } item.setElementId(id); item.setCommand(cmd); if (iconUri == null) { item.setLabel(text); } else { item.setIconURI(iconUri); } java.lang.String tooltip = org.eclipse.ui.internal.menus.MenuHelper.getTooltip(element); item.setTooltip((tooltip == null ? text : tooltip)); return item; }
public org.eclipse.ui.IWorkbenchPage openPage(java.lang.String perspectiveId, org.eclipse.core.runtime.IAdaptable input) throws org.eclipse.ui.WorkbenchException { org.eclipse.ui.IPerspectiveDescriptor descriptor = workbench.getPerspectiveRegistry().findPerspectiveWithId(perspectiveId); if (descriptor == null) { throw new org.eclipse.ui.WorkbenchException(org.eclipse.osgi.util.NLS.bind(WorkbenchMessages.WorkbenchPage_ErrorCreatingPerspective, perspectiveId)); } if ((page) == null) { try { page = new org.eclipse.ui.internal.WorkbenchPage(this, input); } catch (org.eclipse.ui.WorkbenchException e) { org.eclipse.ui.internal.WorkbenchPlugin.log(e); } model.getContext().set(org.eclipse.ui.IWorkbenchPage.class.getName(), page); org.eclipse.e4.core.contexts.ContextInjectionFactory.inject(page, model.getContext()); firePageOpened(); partService.setPage(page); } perspective = descriptor; page.setPerspective(perspective); firePageActivated(); return page; }
@java.lang.Override public void hookControllerLogic(final org.eclipse.e4.ui.model.application.MPart<?> me) { super.hookControllerLogic(me); final org.eclipse.e4.ui.model.application.MStack sm = ((org.eclipse.e4.ui.model.application.MStack) (me)); org.eclipse.swt.custom.CTabFolder ctf = ((org.eclipse.swt.custom.CTabFolder) (me.getWidget())); ctf.addSelectionListener(new org.eclipse.swt.events.SelectionListener() { public void widgetDefaultSelected(org.eclipse.swt.events.SelectionEvent e) { } public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { org.eclipse.e4.ui.model.application.MItemPart<?> newPart = ((org.eclipse.e4.ui.model.application.MItemPart<?>) (e.item.getData(org.eclipse.e4.workbench.ui.renderers.swt.OWNING_ME))); if ((sm.getActiveChild()) != newPart) { activate(newPart); } showTab(newPart); } }); ctf.addCTabFolder2Listener(new org.eclipse.swt.custom.CTabFolder2Adapter() { public void close(org.eclipse.swt.custom.CTabFolderEvent event) { org.eclipse.e4.ui.model.application.MPart part = ((org.eclipse.e4.ui.model.application.MPart) (event.item.getData(PartFactory.OWNING_ME))); part.setVisible(false); } }); ctf.addListener(SWT.Activate, new org.eclipse.swt.widgets.Listener() { public void handleEvent(org.eclipse.swt.widgets.Event event) { org.eclipse.swt.custom.CTabFolder ctf = ((org.eclipse.swt.custom.CTabFolder) (event.widget)); org.eclipse.e4.ui.model.application.MStack stack = ((org.eclipse.e4.ui.model.application.MStack) (ctf.getData(org.eclipse.e4.workbench.ui.renderers.swt.OWNING_ME))); org.eclipse.e4.ui.model.application.MItemPart<?> part = stack.getActiveChild(); if (part != null) activate(part); } }); ((org.eclipse.emf.ecore.EObject) (me)).eAdapters().add(0, new org.eclipse.emf.common.notify.impl.AdapterImpl() { @java.lang.Override public void notifyChanged(org.eclipse.emf.common.notify.Notification msg) { if (ApplicationPackage.Literals.MPART__ACTIVE_CHILD.equals(msg.getFeature())) { org.eclipse.e4.ui.model.application.MStack sm = ((org.eclipse.e4.ui.model.application.MStack) (msg.getNotifier())); org.eclipse.e4.ui.model.application.MPart<?> selPart = sm.getActiveChild(); org.eclipse.swt.custom.CTabFolder ctf = ((org.eclipse.swt.custom.CTabFolder) (((org.eclipse.e4.ui.model.application.MStack) (msg.getNotifier())).getWidget())); org.eclipse.swt.custom.CTabItem item = findItemForPart(sm, selPart); if (item != null) { ctf.setSelection(item); } } } }); }
public boolean matches(org.eclipse.core.commands.operations.IUndoContext context) { if (children.contains(context)) return true; if ((context instanceof org.eclipse.core.commands.operations.ObjectUndoContext) && ((getObject()) != null)) return getObject().equals(((org.eclipse.core.commands.operations.ObjectUndoContext) (context)).getObject()); return super.matches(context); }
private void insertView(java.lang.String viewId, int relationship, float ratio, java.lang.String refId, boolean visible, boolean withStack) { org.eclipse.e4.ui.model.application.ui.MUIElement existingView = findElement(perspModel, viewId); if (existingView instanceof org.eclipse.e4.ui.model.application.ui.advanced.MPlaceholder) { existingView.getParent().getChildren().remove(existingView); } org.eclipse.e4.ui.model.application.ui.MUIElement refModel = findElement(perspModel, refId); if ((refModel instanceof org.eclipse.e4.ui.model.application.ui.basic.MPart) || (refModel instanceof org.eclipse.e4.ui.model.application.ui.advanced.MPlaceholder)) { refModel = refModel.getParent(); } org.eclipse.e4.ui.model.application.ui.basic.MStackElement viewModel = org.eclipse.ui.internal.e4.compatibility.ModeledPageLayout.createViewModel(application, viewId, visible, page, partService, createReferences); if (viewModel != null) { if (withStack) { java.lang.String stackId = viewId + "MStack"; org.eclipse.e4.ui.model.application.ui.basic.MPartStack stack = insertStack(stackId, relationship, ratio, refId, visible); stack.getChildren().add(viewModel); } else { org.eclipse.ui.internal.e4.compatibility.ModeledPageLayout.insert(viewModel, refModel, org.eclipse.ui.internal.e4.compatibility.ModeledPageLayout.plRelToSwt(relationship), ratio); } } }
public org.eclipse.swt.graphics.Color getForeground(java.lang.Object element) { if (element instanceof org.eclipse.ui.views.IViewDescriptor) { org.eclipse.ui.IWorkbenchPage activePage = window.getActivePage(); if (activePage != null) { if ((activePage.findViewReference(((org.eclipse.ui.views.IViewDescriptor) (element)).getId())) != null) { return dimmedForeground; } } } return null; }
public void handleEvent(org.eclipse.swt.widgets.Event event) { if ((event.button) != 1) { downPos = null; return; } org.eclipse.e4.workbench.ui.renderers.swt.dnd.DragAndDropUtil.CursorInfo info = dndUtil.getCursorInfo(); if (((((event.type) == (org.eclipse.swt.SWT.MouseDown)) && ((dragHost) == null)) && ((info.curElement) instanceof org.eclipse.e4.ui.model.application.MGenericStack<?>)) && ((info.itemElement) != null)) { downPos = new org.eclipse.swt.graphics.Point(event.x, event.y); downInfo = info; } else if ((event.type) == (org.eclipse.swt.SWT.MouseUp)) { downPos = null; downInfo = null; if ((dragHost) != null) { org.eclipse.e4.workbench.ui.renderers.swt.dnd.DragAndDropUtil.CursorInfo dropInfo = getDropInfo(); if ((dropInfo.curElement) == null) cancelDrag(); else endDrag(dropInfo); } } }
public boolean select(org.eclipse.jface.viewers.Viewer viewer, java.lang.Object parentElement, java.lang.Object element) { org.eclipse.jface.viewers.ITreeContentProvider contentProvider = ((org.eclipse.jface.viewers.ITreeContentProvider) (((org.eclipse.jface.viewers.TreeViewer) (viewer)).getContentProvider())); org.eclipse.jface.preference.IPreferenceNode node = ((org.eclipse.jface.preference.IPreferenceNode) (element)); java.lang.Object[] children = contentProvider.getChildren(node); java.lang.String text = node.getLabelText(); if (wordMatches(text)) return true; if (matchItem) { if ((filter(viewer, element, children).length) > 0) return true; } if (node instanceof org.eclipse.ui.internal.preferences.WorkbenchPreferenceExtensionNode) { org.eclipse.ui.internal.preferences.WorkbenchPreferenceExtensionNode workbenchNode = ((org.eclipse.ui.internal.preferences.WorkbenchPreferenceExtensionNode) (node)); java.util.Collection keywordCollection = ((java.util.Collection) (keywordCache.get(node))); if (keywordCollection == null) { keywordCollection = workbenchNode.getKeywordLabels(); keywordCache.put(node, keywordCollection); } if (keywordCollection.isEmpty()) return false; java.util.Iterator keywords = keywordCollection.iterator(); while (keywords.hasNext()) { if (wordMatches(((java.lang.String) (keywords.next())))) return true; } } return false; }
private void openMoreInfo(org.eclipse.core.runtime.IPluginDescriptor desc) { java.net.URL infoURL = desc.find(new org.eclipse.core.runtime.Path(org.eclipse.ui.internal.ide.dialogs.AboutPluginsDialog.PLUGININFO)); if (infoURL != null) { try { infoURL = org.eclipse.core.runtime.Platform.asLocalURL(infoURL); } catch (java.io.IOException e) { } } if (infoURL == null) { org.eclipse.jface.dialogs.MessageDialog.openError(getShell(), org.eclipse.ui.internal.ide.IDEWorkbenchMessages.getString("AboutPluginsDialog.errorTitle"), org.eclipse.ui.internal.ide.IDEWorkbenchMessages.format("AboutPluginsDialog.unableToOpenFile", new java.lang.Object[]{ org.eclipse.ui.internal.ide.dialogs.AboutPluginsDialog.PLUGININFO, desc.getUniqueIdentifier() })); return; } openLink(infoURL.toString()); }
private java.lang.String getUniqueId() { java.lang.String id = createId(); while ((objectMap.get(id)) != null) { id = createId(); } return id; }
public void keyReleased(org.eclipse.swt.events.KeyEvent e) { patternFilter.setPattern(filterField.getText()); treeViewer.refresh(false); if ((filterField.getText().length()) > 0) treeViewer.expandAll(); }
public java.lang.Object getElementAt(int index) { if ((index >= 0) && (index < (table.getItemCount()))) { org.eclipse.jface.viewers.TableItem i = table.getItem(index); if (i != null) return i.getData(); } return null; }
private void createIdArea(org.eclipse.swt.graphics.Font font, org.eclipse.swt.widgets.Composite composite) { org.eclipse.swt.layout.GridData data; org.eclipse.swt.widgets.Group idComposite = createGroup(font, composite, org.eclipse.osgi.util.NLS.bind(IDEWorkbenchMessages.ResourceFilterPage_columnFilterID, null), true); idCombo = new org.eclipse.swt.widgets.Combo(idComposite, org.eclipse.swt.SWT.READ_ONLY); idCombo.setItems(org.eclipse.ui.internal.ide.dialogs.FilterTypeUtil.getFilterNames(((filter.getChildrenLimit()) > 0))); data = new org.eclipse.swt.layout.GridData(org.eclipse.swt.SWT.FILL, org.eclipse.swt.SWT.CENTER, true, false); idCombo.setLayoutData(data); idCombo.setFont(font); idCombo.addSelectionListener(new org.eclipse.swt.events.SelectionListener() { public void widgetDefaultSelected(org.eclipse.swt.events.SelectionEvent e) { } public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { org.eclipse.ui.internal.ide.dialogs.FilterTypeUtil.setValue(filter, org.eclipse.ui.internal.ide.dialogs.FilterTypeUtil.ID, idCombo.getItem(idCombo.getSelectionIndex())); arguments.setEnabled(filter.hasStringArguments()); setArgumentLabelEnabled(); description.setText(org.eclipse.ui.internal.ide.dialogs.FilterTypeUtil.getDescriptor(filter.getId()).getDescription()); } }); selectComboItem(filter.getId()); org.eclipse.swt.widgets.Composite argumentComposite = new org.eclipse.swt.widgets.Composite(idComposite, org.eclipse.swt.SWT.NONE); org.eclipse.swt.layout.GridLayout layout = new org.eclipse.swt.layout.GridLayout(); layout.numColumns = 2; layout.marginWidth = 0; argumentComposite.setLayout(layout); data = new org.eclipse.swt.layout.GridData(org.eclipse.swt.SWT.FILL, org.eclipse.swt.SWT.FILL, true, true); argumentComposite.setLayoutData(data); argumentComposite.setFont(font); createArgumentsArea(font, argumentComposite); createDescriptionArea(font, idComposite); }
private void initTemporaryState() { java.lang.String[] varNames = pathVariableManager.getPathVariableNames(); tempPathVariables.clear(); for (int i = 0; i < (varNames.length); i++) { if (varNames[i].equals(org.eclipse.ui.internal.ide.dialogs.PathVariablesGroup.PARENT_VARIABLE_NAME)) continue; try { java.net.URI uri = pathVariableManager.getURIValue(varNames[i]); if (uri != null) { org.eclipse.core.runtime.IPath value = org.eclipse.core.filesystem.URIUtil.toPath(uri); if (value != null) { boolean isFile = value.toFile().isFile(); if ((isFile && (((variableType) & (org.eclipse.core.resources.IResource.FILE)) != 0)) || ((isFile == false) && (((variableType) & (org.eclipse.core.resources.IResource.FOLDER)) != 0))) { tempPathVariables.put(varNames[i], value); } } } } catch (java.lang.Exception e) { } } removedVariableNames.clear(); }
public void menuAboutToShow(org.eclipse.jface.action.IMenuManager manager) { org.eclipse.ui.IViewReference selectedView = null; if ((contextToolItem) != null) { selectedView = ((org.eclipse.ui.IViewReference) (contextToolItem.getData(ShowFastViewContribution.FAST_VIEW))); } org.eclipse.ui.internal.Perspective persp = wbw.getActiveWorkbenchPage().getActivePerspective(); closeContrib.setVisible(((selectedView != null) && (persp.isCloseable(selectedView)))); manager.update(true); }
public final org.eclipse.ui.IWorkbenchPart getPart(boolean restore) { if (isDisposed()) { return null; } if ((legacyPart) == null) { if (restore && ((part.getWidget()) == null)) { org.eclipse.e4.ui.workbench.modeling.EPartService partService = windowContext.get(org.eclipse.e4.ui.workbench.modeling.EPartService.class); partService.showPart(part, PartState.CREATE); } if ((part.getWidget()) != null) { org.eclipse.ui.internal.e4.compatibility.CompatibilityPart compatibilityPart = ((org.eclipse.ui.internal.e4.compatibility.CompatibilityPart) (part.getObject())); if (compatibilityPart != null) { legacyPart = compatibilityPart.getPart(); addPropertyListeners(); } } } return legacyPart; }
private void declareWorkbenchImages() { final java.lang.String ICONS_PATH = "icons/full/"; final java.lang.String PATH_ELOCALTOOL = ICONS_PATH + "elcl16/"; final java.lang.String PATH_ETOOL = ICONS_PATH + "etool16/"; final java.lang.String PATH_DTOOL = ICONS_PATH + "dtool16/"; final java.lang.String PATH_OBJECT = ICONS_PATH + "obj16/"; final java.lang.String PATH_WIZBAN = ICONS_PATH + "wizban/"; declareWorkbenchImage(ISharedImages.IMG_TOOL_NEW_WIZARD, (PATH_ETOOL + "new_wiz.gif"), true); declareWorkbenchImage(ISharedImages.IMG_TOOL_NEW_WIZARD_HOVER, (PATH_ETOOL + "new_wiz.gif"), true); declareWorkbenchImage(ISharedImages.IMG_TOOL_NEW_WIZARD_DISABLED, (PATH_DTOOL + "new_wiz.gif"), true); declareWorkbenchImage(IWorkbenchGraphicConstants.IMG_ETOOL_IMPORT_WIZ, (PATH_ETOOL + "import_wiz.gif"), false); declareWorkbenchImage(IWorkbenchGraphicConstants.IMG_ETOOL_EXPORT_WIZ, (PATH_ETOOL + "export_wiz.gif"), false); declareWorkbenchImage(IDEInternalWorkbenchImages.IMG_ETOOL_BUILD_EXEC, (PATH_ETOOL + "build_exec.gif"), false); declareWorkbenchImage(IDEInternalWorkbenchImages.IMG_ETOOL_BUILD_EXEC_HOVER, (PATH_ETOOL + "build_exec.gif"), false); declareWorkbenchImage(IDEInternalWorkbenchImages.IMG_ETOOL_BUILD_EXEC_DISABLED, (PATH_DTOOL + "build_exec.gif"), false); declareWorkbenchImage(IDEInternalWorkbenchImages.IMG_ETOOL_SEARCH_SRC, (PATH_ETOOL + "search_src.gif"), false); declareWorkbenchImage(IDEInternalWorkbenchImages.IMG_ETOOL_SEARCH_SRC_HOVER, (PATH_ETOOL + "search_src.gif"), false); declareWorkbenchImage(IDEInternalWorkbenchImages.IMG_ETOOL_SEARCH_SRC_DISABLED, (PATH_DTOOL + "search_src.gif"), false); declareWorkbenchImage(IDEInternalWorkbenchImages.IMG_ETOOL_NEXT_NAV, (PATH_ETOOL + "next_nav.gif"), false); declareWorkbenchImage(IDEInternalWorkbenchImages.IMG_ETOOL_PREVIOUS_NAV, (PATH_ETOOL + "prev_nav.gif"), false); declareWorkbenchImage(IWorkbenchGraphicConstants.IMG_WIZBAN_NEW_WIZ, (PATH_WIZBAN + "new_wiz.gif"), false); declareWorkbenchImage(IDEInternalWorkbenchImages.IMG_WIZBAN_NEWPRJ_WIZ, (PATH_WIZBAN + "newprj_wiz.gif"), false); declareWorkbenchImage(IDEInternalWorkbenchImages.IMG_WIZBAN_NEWFOLDER_WIZ, (PATH_WIZBAN + "newfolder_wiz.gif"), false); declareWorkbenchImage(IDEInternalWorkbenchImages.IMG_WIZBAN_NEWFILE_WIZ, (PATH_WIZBAN + "newfile_wiz.gif"), false); declareWorkbenchImage(IWorkbenchGraphicConstants.IMG_WIZBAN_IMPORT_WIZ, (PATH_WIZBAN + "import_wiz.gif"), false); declareWorkbenchImage(IDEInternalWorkbenchImages.IMG_WIZBAN_IMPORTDIR_WIZ, (PATH_WIZBAN + "importdir_wiz.gif"), false); declareWorkbenchImage(IDEInternalWorkbenchImages.IMG_WIZBAN_IMPORTZIP_WIZ, (PATH_WIZBAN + "importzip_wiz.gif"), false); declareWorkbenchImage(IWorkbenchGraphicConstants.IMG_WIZBAN_EXPORT_WIZ, (PATH_WIZBAN + "export_wiz.gif"), false); declareWorkbenchImage(IDEInternalWorkbenchImages.IMG_WIZBAN_EXPORTDIR_WIZ, (PATH_WIZBAN + "exportdir_wiz.gif"), false); declareWorkbenchImage(IDEInternalWorkbenchImages.IMG_WIZBAN_EXPORTZIP_WIZ, (PATH_WIZBAN + "exportzip_wiz.gif"), false); declareWorkbenchImage(IDEInternalWorkbenchImages.IMG_WIZBAN_RESOURCEWORKINGSET_WIZ, (PATH_WIZBAN + "res_workset_wiz.gif"), false); declareWorkbenchImage(IDE.SharedImages.IMG_OBJ_PROJECT, (PATH_OBJECT + "prj_obj.gif"), true); declareWorkbenchImage(IDE.SharedImages.IMG_OBJ_PROJECT_CLOSED, (PATH_OBJECT + "cprj_obj.gif"), true); declareWorkbenchImage(IDE.SharedImages.IMG_OPEN_MARKER, (PATH_ELOCALTOOL + "gotoobj_tsk.gif"), true); declareWorkbenchImage(IDE.SharedImages.IMG_OBJS_TASK_TSK, (PATH_OBJECT + "taskmrk_tsk.gif"), true); declareWorkbenchImage(IDE.SharedImages.IMG_OBJS_BKMRK_TSK, (PATH_OBJECT + "bkmrk_tsk.gif"), true); declareWorkbenchImage(IDEInternalWorkbenchImages.IMG_OBJS_COMPLETE_TSK, (PATH_OBJECT + "complete_tsk.gif"), true); declareWorkbenchImage(IDEInternalWorkbenchImages.IMG_OBJS_INCOMPLETE_TSK, (PATH_OBJECT + "incomplete_tsk.gif"), true); declareWorkbenchImage(IDEInternalWorkbenchImages.IMG_OBJS_WELCOME_ITEM, (PATH_OBJECT + "welcome_item.gif"), true); declareWorkbenchImage(IDEInternalWorkbenchImages.IMG_OBJS_WELCOME_BANNER, (PATH_OBJECT + "welcome_banner.gif"), true); }
public final java.lang.String getText(java.lang.Object element) { if (element instanceof org.eclipse.ui.IWorkbenchPart) { org.eclipse.ui.IWorkbenchPart part = ((org.eclipse.ui.IWorkbenchPart) (element)); java.lang.String path = part.getTitleToolTip(); if ((path == null) || ((path.trim().length()) == 0)) { return part.getTitle(); } return (((part.getTitle()) + " [") + path) + "]"; } return null; }
public java.lang.Object createToolBar(org.eclipse.e4.ui.model.application.MPart<?> part, java.lang.Object widgetObject, org.eclipse.e4.ui.model.application.MToolBar toolbar) { int orientation = org.eclipse.swt.SWT.HORIZONTAL; org.eclipse.swt.widgets.Composite composite = null; while ((!(widgetObject instanceof org.eclipse.swt.widgets.Composite)) && (widgetObject instanceof org.eclipse.swt.widgets.Control)) { widgetObject = ((org.eclipse.swt.widgets.Control) (widgetObject)).getParent(); } if (!(widgetObject instanceof org.eclipse.swt.widgets.Composite)) { return null; } composite = ((org.eclipse.swt.widgets.Composite) (widgetObject)); if ((composite.getLayout()) instanceof org.eclipse.swt.layout.RowLayout) { org.eclipse.swt.layout.RowLayout rl = ((org.eclipse.swt.layout.RowLayout) (composite.getLayout())); orientation = rl.type; } org.eclipse.swt.widgets.ToolBar swtToolBar = new org.eclipse.swt.widgets.ToolBar(composite, ((org.eclipse.swt.SWT.FLAT) | orientation)); swtToolBar.setData(PartFactory.OWNING_ME, toolbar); org.eclipse.emf.common.util.EList<org.eclipse.e4.ui.model.application.MToolBarItem> items = toolbar.getItems(); if ((items != null) && ((items.size()) > 0)) { for (org.eclipse.e4.ui.model.application.MToolBarItem toolBarItem : toolbar.getItems()) { createToolBarItem(part, swtToolBar, toolBarItem); } } return swtToolBar; }
protected void createChildControls() { int newSide = getSide(); int flags = (org.eclipse.jface.util.Geometry.isHorizontal(newSide)) ? org.eclipse.swt.SWT.HORIZONTAL : org.eclipse.swt.SWT.VERTICAL; fastViewBar = new org.eclipse.jface.action.ToolBarManager((((org.eclipse.swt.SWT.FLAT) | (org.eclipse.swt.SWT.WRAP)) | flags)); fastViewBar.add(new org.eclipse.ui.internal.ShowFastViewContribution(window)); menuListener = new org.eclipse.swt.widgets.Listener() { public void handleEvent(org.eclipse.swt.widgets.Event event) { org.eclipse.swt.graphics.Point loc = new org.eclipse.swt.graphics.Point(event.x, event.y); if ((event.type) == (org.eclipse.swt.SWT.MenuDetect)) { showFastViewBarPopup(loc); } } }; org.eclipse.ui.internal.layout.CellLayout controlLayout = new org.eclipse.ui.internal.layout.CellLayout(0).setMargins(0, (newSide == (org.eclipse.swt.SWT.BOTTOM) ? 0 : 3)).setDefaultRow(org.eclipse.ui.internal.layout.Row.growing()).setDefaultColumn(org.eclipse.ui.internal.layout.Row.fixed()).setColumn((newSide == (org.eclipse.swt.SWT.BOTTOM) ? 1 : 0), org.eclipse.ui.internal.layout.Row.growing()); control.setLayout(controlLayout); if (newSide == (org.eclipse.swt.SWT.BOTTOM)) { fastViewLabel = createFastViewSeparator(control); } fastViewBar.createControl(control); if (newSide == (org.eclipse.swt.SWT.BOTTOM)) { fastViewLabel2 = createFastViewSeparator(control); } getToolBar().addListener(SWT.MenuDetect, menuListener); org.eclipse.swt.widgets.Listener dragListener = new org.eclipse.swt.widgets.Listener() { public void handleEvent(org.eclipse.swt.widgets.Event event) { org.eclipse.swt.graphics.Point position = org.eclipse.ui.internal.dnd.DragUtil.getEventLoc(event); org.eclipse.ui.IViewReference ref = getViewAt(position); if (ref == null) { startDraggingFastViewBar(position, false); } else { startDraggingFastView(ref, position, false); } } }; org.eclipse.ui.internal.dnd.IDragOverListener fastViewDragTarget = new org.eclipse.ui.internal.dnd.IDragOverListener() { class ViewDropTarget extends org.eclipse.ui.internal.dnd.AbstractDropTarget { java.util.List panes; org.eclipse.swt.widgets.ToolItem position; public ViewDropTarget(java.util.List panesToDrop, org.eclipse.swt.widgets.ToolItem position) { panes = panesToDrop; this.position = position; } public void drop() { org.eclipse.ui.IViewReference view = getViewFor(position); java.util.Iterator iter = panes.iterator(); while (iter.hasNext()) { org.eclipse.ui.internal.ViewPane pane = ((org.eclipse.ui.internal.ViewPane) (iter.next())); getPage().addFastView(pane.getViewReference()); getPage().getActivePerspective().moveFastView(pane.getViewReference(), view); } update(true); } public org.eclipse.swt.graphics.Cursor getCursor() { return org.eclipse.ui.internal.DragCursors.getCursor(DragCursors.FASTVIEW); } public org.eclipse.swt.graphics.Rectangle getSnapRectangle() { if ((position) == null) { if ((getToolBar().getItemCount()) > 0) { return getLocationOfNextIcon(); } return org.eclipse.ui.internal.dnd.DragUtil.getDisplayBounds(getControl()); } else { return org.eclipse.jface.util.Geometry.toDisplay(getToolBar(), position.getBounds()); } } } public org.eclipse.ui.internal.dnd.IDropTarget drag(org.eclipse.swt.widgets.Control currentControl, java.lang.Object draggedObject, org.eclipse.swt.graphics.Point position, org.eclipse.swt.graphics.Rectangle dragRectangle) { org.eclipse.swt.widgets.ToolItem targetItem = getToolItem(position); if (draggedObject instanceof org.eclipse.ui.internal.ViewPane) { org.eclipse.ui.internal.ViewPane pane = ((org.eclipse.ui.internal.ViewPane) (draggedObject)); if ((pane.getWorkbenchWindow()) != (window)) { return null; } java.util.List newList = new java.util.ArrayList(1); newList.add(draggedObject); return new ViewDropTarget(newList, targetItem); } if (draggedObject instanceof org.eclipse.ui.internal.ViewStack) { org.eclipse.ui.internal.ViewStack folder = ((org.eclipse.ui.internal.ViewStack) (draggedObject)); if ((folder.getWorkbenchWindow()) != (window)) { return null; } java.util.List viewList = new java.util.ArrayList(folder.getItemCount()); org.eclipse.ui.internal.LayoutPart[] children = folder.getChildren(); for (int idx = 0; idx < (children.length); idx++) { if (!((children[idx]) instanceof org.eclipse.ui.internal.PartPlaceholder)) { viewList.add(children[idx]); } } return new ViewDropTarget(viewList, targetItem); } return null; } }; toolBarData = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_BOTH); toolBarData.widthHint = org.eclipse.ui.internal.FastViewBar.HIDDEN_WIDTH; visible = false; getToolBar().setLayoutData(toolBarData); org.eclipse.ui.presentations.PresentationUtil.addDragListener(getToolBar(), dragListener); org.eclipse.ui.internal.dnd.DragUtil.addDragTarget(getControl(), fastViewDragTarget); if ((fastViewLabel) != null) { org.eclipse.ui.presentations.PresentationUtil.addDragListener(fastViewLabel, dragListener); } if ((fastViewLabel2) != null) { org.eclipse.ui.presentations.PresentationUtil.addDragListener(fastViewLabel2, dragListener); } update(true); }
private void busyShowView(org.eclipse.ui.IViewPart part, int mode) { if (!(((org.eclipse.ui.internal.tweaklets.GrabFocus) (org.eclipse.ui.internal.tweaklets.Tweaklets.get(GrabFocus.KEY))).grabFocusAllowed(part))) { return; } checkIntro(); if (mode == (VIEW_ACTIVATE)) { activate(part); } else if (mode == (VIEW_VISIBLE)) { org.eclipse.ui.IWorkbenchPartReference ref = getActivePartReference(); if ((ref == null) || (!(ref instanceof org.eclipse.ui.IViewReference))) { bringToTop(part); } else { org.eclipse.ui.IViewReference activeView = ((org.eclipse.ui.IViewReference) (ref)); org.eclipse.ui.IViewReference[] viewStack = getViewReferenceStack(part); for (int i = 0; i < (viewStack.length); i++) { if (viewStack[i].equals(activeView)) { return; } } bringToTop(part); } } }
private org.eclipse.ui.internal.ViewLayoutRec getViewLayoutRec(org.eclipse.ui.IViewReference ref, boolean create) { org.eclipse.ui.internal.ViewLayoutRec result = getViewLayoutRec(org.eclipse.ui.internal.ViewFactory.getKey(ref), create); if ((result == null) && (create == false)) { result = getViewLayoutRec(ref.getId(), false); } return result; }
private void sweepContributions(org.eclipse.jface.action.IMenuManager mgr) { if (mgr == null) return; final org.eclipse.ui.menus.IMenuService menuService = ((org.eclipse.ui.menus.IMenuService) (part.getSite().getService(org.eclipse.ui.menus.IMenuService.class))); org.eclipse.ui.internal.menus.InternalMenuService realService = ((org.eclipse.ui.internal.menus.InternalMenuService) (menuService)); org.eclipse.jface.action.IContributionItem[] items = mgr.getItems(); for (int i = 0; i < (items.length); i++) { if (((items[i]) instanceof org.eclipse.jface.action.IMenuManager) && (mgr instanceof org.eclipse.jface.action.ContributionManager)) { sweepContributions(((org.eclipse.jface.action.IMenuManager) (items[i]))); realService.releaseContributions(((org.eclipse.jface.action.ContributionManager) (items[i]))); ((org.eclipse.jface.action.ContributionManager) (items[i])).removeAll(); } } }
public void initialCheckListItem(java.lang.Object element) { java.lang.Object parent = treeContentProvider.getParent(element); currentTreeSelection = parent; listItemChecked(element, true, false); grayUpdateHierarchy(parent); selectAndReveal(parent); }
public void selectionChanged(org.eclipse.jface.action.IAction actionProxy, org.eclipse.jface.viewers.ISelection selection) { super.selectionChanged(actionProxy, selection); menuItems.clear(); if (selection instanceof org.eclipse.jface.viewers.IStructuredSelection) { java.util.Collection selectedElements = ((org.eclipse.jface.viewers.IStructuredSelection) (getSelection())).toList(); boolean minimallyOkay = true; for (java.util.Iterator i = selectedElements.iterator(); i.hasNext();) { java.lang.Object object = i.next(); if ((!(object instanceof org.eclipse.core.runtime.IAdaptable)) || (object instanceof org.eclipse.ui.IWorkingSet)) { minimallyOkay = false; break; } } if (minimallyOkay) { org.eclipse.ui.IWorkingSet[][] typedSets = splitSets(); for (int i = 0; i < (typedSets.length); i++) { if (((menuItems.size()) > 0) && ((menuItems.get(((menuItems.size()) - 1))) != (org.eclipse.ui.internal.actions.ModifyWorkingSetDelegate.SEPERATORMARKER))) menuItems.add(org.eclipse.ui.internal.actions.ModifyWorkingSetDelegate.SEPERATORMARKER); org.eclipse.ui.IWorkingSet[] sets = typedSets[i]; for (int j = 0; j < (sets.length); j++) { org.eclipse.ui.IWorkingSet set = sets[j]; java.util.Set existingElements = new java.util.HashSet(); existingElements.addAll(java.util.Arrays.asList(set.getElements())); boolean visible = false; for (java.util.Iterator k = selectedElements.iterator(); k.hasNext();) { org.eclipse.core.runtime.IAdaptable object = ((org.eclipse.core.runtime.IAdaptable) (k.next())); if (add) { if (!(existingElements.contains(object))) { if (set.isApplicable(object)) { visible = true; } break; } } else { if (existingElements.contains(object)) { visible = true; break; } } } if (visible) { org.eclipse.ui.internal.actions.ModifyWorkingSetDelegate.ModifyAction action = new org.eclipse.ui.internal.actions.ModifyWorkingSetDelegate.ModifyAction(set, selectedElements); menuItems.add(action); } } } } } actionProxy.setEnabled((!(menuItems.isEmpty()))); }
protected void processDelta(org.eclipse.core.resources.IResourceDelta delta) { org.eclipse.swt.widgets.Control ctrl = viewer.getControl(); if ((ctrl == null) || (ctrl.isDisposed())) return; org.eclipse.core.resources.IResource resource = delta.getResource(); org.eclipse.core.resources.IResourceDelta[] affectedChildren = delta.getAffectedChildren(org.eclipse.core.resources.IResourceDelta.CHANGED); for (int i = 0; i < (affectedChildren.length); i++) { if (((affectedChildren[i].getFlags()) & (org.eclipse.core.resources.IResourceDelta.TYPE)) != 0) { ((org.eclipse.ui.model.StructuredViewer) (viewer)).refresh(resource); return; } } int changeFlags = delta.getFlags(); if ((changeFlags & ((org.eclipse.core.resources.IResourceDelta.OPEN) | (org.eclipse.core.resources.IResourceDelta.SYNC))) != 0) { ((org.eclipse.ui.model.StructuredViewer) (viewer)).update(resource, null); } if ((changeFlags & (org.eclipse.core.resources.IResourceDelta.REPLACED)) != 0) { ((org.eclipse.ui.model.StructuredViewer) (viewer)).refresh(resource, true); return; } for (int i = 0; i < (affectedChildren.length); i++) { processDelta(affectedChildren[i]); } try { viewer.getControl().setRedraw(false); affectedChildren = delta.getAffectedChildren(org.eclipse.core.resources.IResourceDelta.ADDED); if ((affectedChildren.length) > 0) { java.lang.Object[] affected = new java.lang.Object[affectedChildren.length]; for (int i = 0; i < (affectedChildren.length); i++) affected[i] = affectedChildren[i].getResource(); if ((viewer) instanceof org.eclipse.ui.model.AbstractTreeViewer) { ((org.eclipse.ui.model.AbstractTreeViewer) (viewer)).add(resource, affected); } else { ((org.eclipse.ui.model.StructuredViewer) (viewer)).refresh(resource); } } } finally { viewer.getControl().setRedraw(true); } affectedChildren = delta.getAffectedChildren(org.eclipse.core.resources.IResourceDelta.REMOVED); if ((affectedChildren.length) > 0) { java.lang.Object[] affected = new java.lang.Object[affectedChildren.length]; for (int i = 0; i < (affectedChildren.length); i++) affected[i] = affectedChildren[i].getResource(); if ((viewer) instanceof org.eclipse.ui.model.AbstractTreeViewer) { ((org.eclipse.ui.model.AbstractTreeViewer) (viewer)).remove(affected); } else { ((org.eclipse.ui.model.StructuredViewer) (viewer)).refresh(resource); } } }
private boolean isActionSwitchForced(org.eclipse.ui.internal.IWorkbenchPart newPart) { if ((lastActiveEditor) == null) return true; if (((lastActiveEditor) == newPart) && ((activePart) != null)) return false; if (newPart instanceof org.eclipse.ui.internal.IViewPart) return false; return true; }
public void run() { try { if (webBrowserOpened) { java.lang.Runtime.getRuntime().exec(((((webBrowser) + " -remote openURL(") + localHref) + ")")); } else { java.lang.Process p = openWebBrowser(localHref); webBrowserOpened = true; try { if (p != null) p.waitFor(); } catch (java.lang.InterruptedException e) { openWebBrowserError(d); } finally { webBrowserOpened = false; } } } catch (java.io.IOException e) { openWebBrowserError(d); } }
private int checkReadOnlyResources(org.eclipse.core.resources.IResource[] itemsToCheck, java.util.List allSelected) throws org.eclipse.core.runtime.CoreException { if (yesToAllSelected) return org.eclipse.jface.dialogs.IDialogConstants.YES_TO_ALL_ID; boolean noneSkipped = true; java.util.List selectedChildren = new java.util.ArrayList(); for (int i = 0; i < (itemsToCheck.length); i++) { org.eclipse.core.resources.IResource resourceToCheck = itemsToCheck[i]; org.eclipse.core.resources.ResourceAttributes checkAttributes = resourceToCheck.getResourceAttributes(); if ((((!(yesToAllSelected)) && (shouldCheck(resourceToCheck))) && (checkAttributes != null)) && (checkAttributes.isReadOnly())) { int action = queryYesToAllNoCancel(resourceToCheck); if (action == (org.eclipse.jface.dialogs.IDialogConstants.YES_ID)) { boolean childResult = checkAcceptedResource(resourceToCheck, selectedChildren); if (!childResult) noneSkipped = false; } if (action == (org.eclipse.jface.dialogs.IDialogConstants.NO_ID)) noneSkipped = false; if (action == (org.eclipse.jface.dialogs.IDialogConstants.CANCEL_ID)) { cancelSelected = true; return org.eclipse.jface.dialogs.IDialogConstants.CANCEL_ID; } if (action == (org.eclipse.jface.dialogs.IDialogConstants.YES_TO_ALL_ID)) { yesToAllSelected = true; selectedChildren.add(resourceToCheck); } } else { boolean childResult = checkAcceptedResource(resourceToCheck, selectedChildren); if (cancelSelected) return org.eclipse.jface.dialogs.IDialogConstants.CANCEL_ID; if (!childResult) noneSkipped = false; } } if (noneSkipped) return org.eclipse.jface.dialogs.IDialogConstants.YES_TO_ALL_ID; allSelected.addAll(selectedChildren); return org.eclipse.jface.dialogs.IDialogConstants.NO_ID; }
private void loadPredefinedPersp(org.eclipse.ui.internal.registry.PerspectiveDescriptor persp) throws org.eclipse.ui.WorkbenchException { org.eclipse.ui.IPerspectiveFactory factory = null; try { factory = persp.createFactory(); } catch (org.eclipse.core.runtime.CoreException e) { throw new org.eclipse.ui.WorkbenchException(org.eclipse.osgi.util.NLS.bind(WorkbenchMessages.Perspective_unableToLoad, persp.getId())); } if (factory == null) throw new org.eclipse.ui.WorkbenchException(org.eclipse.osgi.util.NLS.bind(WorkbenchMessages.Perspective_unableToLoad, persp.getId())); org.eclipse.ui.internal.ViewSashContainer container = new org.eclipse.ui.internal.ViewSashContainer(page); org.eclipse.ui.internal.PageLayout layout = new org.eclipse.ui.internal.PageLayout(container, getViewFactory(), editorArea, descriptor); layout.setFixed(descriptor.getFixed()); org.eclipse.ui.IPlaceholderFolderLayout stickyFolderRight = null; org.eclipse.ui.IPlaceholderFolderLayout stickyFolderLeft = null; org.eclipse.ui.IPlaceholderFolderLayout stickyFolderTop = null; org.eclipse.ui.IPlaceholderFolderLayout stickyFolderBottom = null; org.eclipse.ui.views.IStickyViewDescriptor[] descs = org.eclipse.ui.internal.WorkbenchPlugin.getDefault().getViewRegistry().getStickyViews(); for (int i = 0; i < (descs.length); i++) { org.eclipse.ui.views.IStickyViewDescriptor stickyViewDescriptor = descs[i]; java.lang.String id = stickyViewDescriptor.getId(); switch (stickyViewDescriptor.getLocation()) { case org.eclipse.ui.IPageLayout.RIGHT : if (stickyFolderRight == null) stickyFolderRight = layout.createPlaceholderFolder(StickyViewDescriptor.STICKY_FOLDER_RIGHT, IPageLayout.RIGHT, 0.75F, IPageLayout.ID_EDITOR_AREA); stickyFolderRight.addPlaceholder(id); break; case org.eclipse.ui.IPageLayout.LEFT : if (stickyFolderLeft == null) stickyFolderLeft = layout.createPlaceholderFolder(StickyViewDescriptor.STICKY_FOLDER_LEFT, IPageLayout.LEFT, 0.25F, IPageLayout.ID_EDITOR_AREA); stickyFolderLeft.addPlaceholder(id); break; case org.eclipse.ui.IPageLayout.TOP : if (stickyFolderTop == null) stickyFolderTop = layout.createPlaceholderFolder(StickyViewDescriptor.STICKY_FOLDER_TOP, IPageLayout.TOP, 0.25F, IPageLayout.ID_EDITOR_AREA); stickyFolderTop.addPlaceholder(id); break; case org.eclipse.ui.IPageLayout.BOTTOM : if (stickyFolderBottom == null) stickyFolderBottom = layout.createPlaceholderFolder(StickyViewDescriptor.STICKY_FOLDER_BOTTOM, IPageLayout.BOTTOM, 0.75F, IPageLayout.ID_EDITOR_AREA); stickyFolderBottom.addPlaceholder(id); break; } org.eclipse.ui.IViewLayout viewLayout = layout.getViewLayout(id); viewLayout.setCloseable(stickyViewDescriptor.isCloseable()); viewLayout.setMoveable(stickyViewDescriptor.isMoveable()); } factory.createInitialLayout(layout); org.eclipse.ui.internal.registry.PerspectiveExtensionReader extender = new org.eclipse.ui.internal.registry.PerspectiveExtensionReader(); extender.extendLayout(page.getExtensionTracker(), descriptor.getId(), layout); mapIDtoViewLayoutRec.putAll(layout.getIDtoViewLayoutRecMap()); createInitialActionSets(layout.getActionSets()); alwaysOnActionSets.addAll(visibleActionSets); newWizardShortcuts = layout.getNewWizardShortcuts(); showViewShortcuts = layout.getShowViewShortcuts(); perspectiveShortcuts = layout.getPerspectiveShortcuts(); showInPartIds = layout.getShowInPartIds(); fastViews = layout.getFastViews(); fixed = layout.isFixed(); presentation = new org.eclipse.ui.internal.PerspectiveHelper(page, container, this); if (!(layout.isEditorAreaVisible())) hideEditorArea(); }
protected void doUpdateItem(final org.eclipse.swt.widgets.Item item, java.lang.Object element) { if (!(item instanceof org.eclipse.swt.widgets.TreeItem)) return; org.eclipse.swt.widgets.TreeItem treeItem = ((org.eclipse.swt.widgets.TreeItem) (item)); if (treeItem.isDisposed()) { unmapElement(element); return; } colorAndFontCollector.setFontsAndColors(element); org.eclipse.jface.viewers.IBaseLabelProvider prov = getLabelProvider(); org.eclipse.jface.viewers.ITableLabelProvider tprov = null; if (prov instanceof org.eclipse.jface.viewers.ITableLabelProvider) { tprov = ((org.eclipse.jface.viewers.ITableLabelProvider) (prov)); } int columnCount = tree.getColumnCount(); if (columnCount == 0) { org.eclipse.jface.viewers.ViewerLabel updateLabel = new org.eclipse.jface.viewers.ViewerLabel(treeItem.getText(), treeItem.getImage()); buildLabel(updateLabel, element); if (treeItem.isDisposed()) { unmapElement(element); return; } if (updateLabel.hasNewText()) treeItem.setText(updateLabel.getText()); if (updateLabel.hasNewImage()) treeItem.setImage(updateLabel.getImage()); } else { for (int column = 0; column < columnCount; column++) { java.lang.String text = ""; org.eclipse.swt.graphics.Image image = null; treeColorAndFont.setFontsAndColors(treeItem, element, column); if (tprov == null) { if (column == 0) { org.eclipse.jface.viewers.ViewerLabel updateLabel = new org.eclipse.jface.viewers.ViewerLabel(treeItem.getText(), treeItem.getImage()); buildLabel(updateLabel, element); if (treeItem.isDisposed()) { unmapElement(element); return; } text = updateLabel.getText(); image = updateLabel.getImage(); } } else { text = tprov.getColumnText(element, column); image = tprov.getColumnImage(element, column); } if (text == null) text = ""; treeItem.setText(column, text); if ((treeItem.getImage(column)) != image) { treeItem.setImage(column, image); } } } colorAndFontCollector.applyFontsAndColors(treeItem); }
public org.eclipse.e4.ui.model.application.ui.MUIElement cloneElement(org.eclipse.e4.ui.model.application.ui.MUIElement element, org.eclipse.e4.ui.model.application.ui.MSnippetContainer snippetContainer) { org.eclipse.emf.ecore.EObject eObj = ((org.eclipse.emf.ecore.EObject) (element)); org.eclipse.e4.ui.model.application.ui.MUIElement clone = ((org.eclipse.e4.ui.model.application.ui.MUIElement) (org.eclipse.emf.ecore.util.EcoreUtil.copy(eObj))); java.util.List<org.eclipse.e4.ui.model.application.ui.advanced.MPlaceholder> phList = findElements(clone, null, org.eclipse.e4.ui.model.application.ui.advanced.MPlaceholder.class, null); for (org.eclipse.e4.ui.model.application.ui.advanced.MPlaceholder ph : phList) { int location = getElementLocation(ph); if ((location & (IN_SHARED_AREA)) != 0) continue; ph.setRef(null); } if (snippetContainer != null) { org.eclipse.e4.ui.model.application.ui.MUIElement snippet = findSnippet(snippetContainer, element.getElementId()); if (snippet != null) snippetContainer.getSnippets().remove(snippet); snippetContainer.getSnippets().add(clone); } return clone; }
org.eclipse.core.commands.operations.IOperationHistory getHistory() { return getWorkbenchWindow().getWorkbench().getOperationSupport().getOperationHistory(); }
private org.eclipse.jface.resource.FontRegistry.FontRecord defaultFontRecord() { org.eclipse.jface.resource.FontRegistry.FontRecord record = ((org.eclipse.jface.resource.FontRegistry.FontRecord) (stringToFontRecord.get(JFaceResources.DEFAULT_FONT))); if (record == null) { org.eclipse.swt.graphics.Font defaultFont = calculateDefaultFont(); record = createFont(JFaceResources.DEFAULT_FONT, defaultFont.getFontData()); defaultFont.dispose(); stringToFontRecord.put(JFaceResources.DEFAULT_FONT, record); } return record; }
public static void insert(org.eclipse.e4.ui.model.application.ui.MUIElement toInsert, org.eclipse.e4.ui.model.application.ui.MUIElement relTo, int swtSide, int ratio) { if ((toInsert == null) || (relTo == null)) return; org.eclipse.e4.ui.model.application.ui.MElementContainer<org.eclipse.e4.ui.model.application.ui.MUIElement> relParent = relTo.getParent(); if (relParent != null) { java.util.List<org.eclipse.e4.ui.model.application.ui.MUIElement> children = relParent.getChildren(); int index = children.indexOf(relTo); org.eclipse.e4.ui.model.application.ui.basic.MPartSashContainer psc = BasicFactoryImpl.eINSTANCE.createPartSashContainer(); psc.setContainerData(relTo.getContainerData()); relParent.getChildren().add((index + 1), psc); switch (swtSide) { case org.eclipse.swt.SWT.LEFT : psc.getChildren().add(((org.eclipse.e4.ui.model.application.ui.basic.MPartSashContainerElement) (toInsert))); psc.getChildren().add(((org.eclipse.e4.ui.model.application.ui.basic.MPartSashContainerElement) (relTo))); toInsert.setContainerData(("" + ratio)); relTo.setContainerData(("" + (10000 - ratio))); psc.setHorizontal(true); break; case org.eclipse.swt.SWT.RIGHT : psc.getChildren().add(((org.eclipse.e4.ui.model.application.ui.basic.MPartSashContainerElement) (relTo))); psc.getChildren().add(((org.eclipse.e4.ui.model.application.ui.basic.MPartSashContainerElement) (toInsert))); relTo.setContainerData(("" + ratio)); toInsert.setContainerData(("" + (10000 - ratio))); psc.setHorizontal(true); break; case org.eclipse.swt.SWT.TOP : psc.getChildren().add(((org.eclipse.e4.ui.model.application.ui.basic.MPartSashContainerElement) (toInsert))); psc.getChildren().add(((org.eclipse.e4.ui.model.application.ui.basic.MPartSashContainerElement) (relTo))); toInsert.setContainerData(("" + ratio)); relTo.setContainerData(("" + (10000 - ratio))); psc.setHorizontal(false); break; case org.eclipse.swt.SWT.BOTTOM : psc.getChildren().add(((org.eclipse.e4.ui.model.application.ui.basic.MPartSashContainerElement) (relTo))); psc.getChildren().add(((org.eclipse.e4.ui.model.application.ui.basic.MPartSashContainerElement) (toInsert))); relTo.setContainerData(("" + ratio)); toInsert.setContainerData(("" + (10000 - ratio))); psc.setHorizontal(false); break; } if ((relTo.isToBeRendered()) || (toInsert.isToBeRendered())) { org.eclipse.e4.ui.model.application.ui.MUIElement parent = psc.getParent(); while ((parent != null) && (!(parent instanceof org.eclipse.e4.ui.model.application.ui.advanced.MPerspective))) { parent.setToBeRendered(true); parent = parent.getParent(); } psc.setToBeRendered(true); } else { psc.setToBeRendered(false); } return; } boolean isStack = true; org.eclipse.e4.ui.model.application.ui.basic.MPartSashContainer newSash = null; if (((swtSide == (org.eclipse.swt.SWT.TOP)) || (swtSide == (org.eclipse.swt.SWT.BOTTOM))) && (!isStack)) { newSash = BasicFactoryImpl.eINSTANCE.createPartSashContainer(); java.lang.String label = ("Vertical Sash[" + (toInsert.getElementId())) + "]"; newSash.setElementId(label); newSash.setHorizontal(false); } else if (((swtSide == (org.eclipse.swt.SWT.LEFT)) || (swtSide == (org.eclipse.swt.SWT.RIGHT))) && (!isStack)) { newSash = BasicFactoryImpl.eINSTANCE.createPartSashContainer(); java.lang.String label = ("Horizontal Sash[" + (toInsert.getElementId())) + "]"; newSash.setElementId(label); newSash.setHorizontal(true); } java.util.List parts; if ((newSash == null) && (relParent != null)) { parts = relParent.getChildren(); } else { org.eclipse.e4.ui.model.application.ui.MUIElement vscElement = newSash; org.eclipse.e4.ui.model.application.ui.MElementContainer<org.eclipse.e4.ui.model.application.ui.MUIElement> container = ((org.eclipse.e4.ui.model.application.ui.MElementContainer<org.eclipse.e4.ui.model.application.ui.MUIElement>) (vscElement)); org.eclipse.ui.internal.e4.compatibility.ModeledPageLayout.insertParent(container, relTo); parts = newSash.getChildren(); } int index = parts.indexOf(relTo); if ((swtSide == (org.eclipse.swt.SWT.BOTTOM)) || (swtSide == (org.eclipse.swt.SWT.RIGHT))) { index++; } parts.add(index, toInsert); }
public Preview(final org.eclipse.swt.widgets.Composite parentComposite, org.eclipse.core.databinding.observable.Realm backgroundRealm) { this.parent = parentComposite; parent.setData("id", "preview"); this.bgRealm = backgroundRealm; this.inputFile = new org.eclipse.core.databinding.observable.value.WritableValue(bgRealm); this.rawImageData = new org.eclipse.core.databinding.observable.value.ComputedValue(bgRealm) { protected java.lang.Object calculate() { org.eclipse.core.resources.IFile file = ((org.eclipse.core.resources.IFile) (inputFile.getValue())); if (file == null) { return null; } java.io.InputStream contents; try { contents = file.getContents(); try { return new org.eclipse.swt.graphics.ImageData(contents); } catch (org.eclipse.swt.SWTException e) { } finally { contents.close(); } } catch (java.lang.Exception e) { e.printStackTrace(); } return null; } }; this.parentSize = new org.eclipse.core.databinding.observable.value.WritableValue(bgRealm); this.scaledImageData = new org.eclipse.core.databinding.observable.value.ComputedValue(bgRealm) { protected java.lang.Object calculate() { org.eclipse.swt.graphics.ImageData rawData = ((org.eclipse.swt.graphics.ImageData) (rawImageData.getValue())); org.eclipse.swt.graphics.Point maxSize = ((org.eclipse.swt.graphics.Point) (parentSize.getValue())); if ((rawData == null) || (maxSize == null)) { return null; } org.eclipse.swt.graphics.Point targetSize = getBestSize(rawData.width, rawData.height, maxSize.x, maxSize.y); return rawData.scaledTo(targetSize.x, targetSize.y); } }; scaledImageData.addChangeListener(new org.eclipse.core.databinding.observable.IChangeListener() { public void handleChange(org.eclipse.core.databinding.observable.ChangeEvent event) { org.eclipse.swt.graphics.ImageData imageData = ((org.eclipse.swt.graphics.ImageData) (scaledImageData.getValue())); if (imageData == null) return; if ((currentImage) != null) { currentImage.dispose(); currentImage = null; } currentImage = new org.eclipse.swt.graphics.Image(parent.getDisplay(), imageData); parent.getDisplay().asyncExec(new java.lang.Runnable() { public void run() { parent.redraw(); } }); } }); parent.setLayout(new org.eclipse.swt.layout.FillLayout()); parent.addPaintListener(new org.eclipse.swt.events.PaintListener() { public void paintControl(org.eclipse.swt.events.PaintEvent e) { if (e.gc.isDisposed()) return; e.gc.fillRectangle(new org.eclipse.swt.graphics.Rectangle(e.x, e.y, e.width, e.height)); org.eclipse.swt.graphics.Image i = currentImage; if ((i != null) && (!(i.isDisposed()))) { org.eclipse.swt.graphics.Rectangle imageBounds = currentImage.getBounds(); int x = ((parent.getBounds().width) - (imageBounds.width)) / 2; int y = org.eclipse.e4.demo.e4photo.Preview.bottomImageMargin; if ((borderColor) == null) borderColor = new org.eclipse.swt.graphics.Color(e.gc.getDevice(), 229, 229, 229); org.eclipse.swt.graphics.Color lastBackground = e.gc.getBackground(); e.gc.setBackground(borderColor); e.gc.fillRoundRectangle(x, y, ((imageBounds.width) + ((org.eclipse.e4.demo.e4photo.Preview.frameWidth) * 2)), ((imageBounds.height) + ((org.eclipse.e4.demo.e4photo.Preview.frameWidth) * 2)), org.eclipse.e4.demo.e4photo.Preview.frameWidth, org.eclipse.e4.demo.e4photo.Preview.frameWidth); e.gc.setBackground(lastBackground); e.gc.drawImage(i, (x + (org.eclipse.e4.demo.e4photo.Preview.frameWidth)), (y + (org.eclipse.e4.demo.e4photo.Preview.frameWidth))); } } }); parent.addControlListener(new org.eclipse.swt.events.ControlListener() { public void controlMoved(org.eclipse.swt.events.ControlEvent e) { } public void controlResized(org.eclipse.swt.events.ControlEvent e) { final org.eclipse.swt.graphics.Point newSize = parent.getSize(); bgRealm.asyncExec(new java.lang.Runnable() { public void run() { parentSize.setValue(newSize); } }); } }); }
int getPercentDone() { return java.lang.Math.min(((int) (((preWork) * 100) / (totalWork))), 100); }
public org.eclipse.core.runtime.IPath getPath() { org.eclipse.core.runtime.IPath location = file.getLocation(); if (location != null) return location; try { final java.net.URI locationURI = file.getLocationURI(); org.eclipse.core.filesystem.IFileStore store = org.eclipse.core.filesystem.EFS.getStore(locationURI); java.io.File localFile = store.toLocalFile(org.eclipse.core.filesystem.EFS.NONE, null); if (localFile == null) localFile = store.toLocalFile(org.eclipse.core.filesystem.EFS.CACHE, null); return org.eclipse.core.runtime.Path.fromOSString(localFile.getAbsolutePath()); } catch (org.eclipse.core.runtime.CoreException e) { org.eclipse.ui.internal.ide.IDEWorkbenchPlugin.log("Failed to obtain file store for resource", e); throw new java.lang.RuntimeException(e); } }
public void activateContext(java.lang.String id) { java.util.Set<java.lang.String> locals = ((java.util.Set<java.lang.String>) (eclipseContext.getLocal(org.eclipse.e4.ui.internal.services.ContextContextService.LOCAL_CONTEXTS))); if (locals == null) { locals = new java.util.HashSet<java.lang.String>(); locals.add(id); eclipseContext.set(org.eclipse.e4.ui.internal.services.ContextContextService.LOCAL_CONTEXTS, locals); } else if (locals.add(id)) { eclipseContext.set(org.eclipse.e4.ui.internal.services.ContextContextService.LOCAL_CONTEXTS, new java.util.HashSet<java.lang.String>(locals)); } }
protected void doStore() { java.lang.String encoding = getSelectedEncoding(); if (isDefaultSelected()) encoding = null; else { if (hasSameEncoding(encoding)) return; } java.lang.String descriptionCharset = getCharsetFromDescription(); if ((descriptionCharset != null) && (!(descriptionCharset.equals(encoding)))) { org.eclipse.swt.widgets.Shell shell = null; org.eclipse.jface.dialogs.DialogPage page = getPage(); if (page != null) shell = page.getShell(); org.eclipse.jface.dialogs.MessageDialog dialog = new org.eclipse.jface.dialogs.MessageDialog(shell, org.eclipse.ui.internal.ide.IDEWorkbenchMessages.ResourceEncodingFieldEditor_EncodingConflictTitle, null, org.eclipse.osgi.util.NLS.bind(IDEWorkbenchMessages.ResourceEncodingFieldEditor_EncodingConflictMessage, encoding, descriptionCharset), org.eclipse.jface.dialogs.MessageDialog.WARNING, new java.lang.String[]{ org.eclipse.jface.dialogs.IDialogConstants.YES_LABEL, org.eclipse.jface.dialogs.IDialogConstants.NO_LABEL }, 0); if ((dialog.open()) > 0) return; } org.eclipse.ui.ide.IDEEncoding.addIDEEncoding(encoding); final java.lang.String finalEncoding = encoding; org.eclipse.core.runtime.jobs.Job charsetJob = new org.eclipse.core.runtime.jobs.Job(org.eclipse.ui.internal.ide.IDEWorkbenchMessages.IDEEncoding_EncodingJob) { protected org.eclipse.core.runtime.IStatus run(org.eclipse.core.runtime.IProgressMonitor monitor) { try { if ((resource) instanceof org.eclipse.core.resources.IContainer) ((org.eclipse.core.resources.IContainer) (resource)).setDefaultCharset(finalEncoding, monitor); else ((org.eclipse.core.resources.IFile) (resource)).setCharset(finalEncoding, monitor); return org.eclipse.core.runtime.Status.OK_STATUS; } catch (org.eclipse.core.runtime.CoreException e) { org.eclipse.ui.internal.ide.IDEWorkbenchPlugin.log(IDEWorkbenchMessages.ResourceEncodingFieldEditor_ErrorStoringMessage, e.getStatus()); return e.getStatus(); } } }; charsetJob.schedule(); }
public static org.eclipse.e4.ui.model.application.ui.menu.MMenuItem createItem(org.eclipse.e4.ui.model.application.MApplication application, org.eclipse.jface.action.ActionContributionItem item) { org.eclipse.jface.action.IAction action = item.getAction(); java.lang.String id = action.getActionDefinitionId(); if (action instanceof org.eclipse.ui.internal.OpenPreferencesAction) { for (org.eclipse.e4.ui.model.application.commands.MCommand command : application.getCommands()) { if (IWorkbenchCommandConstants.WINDOW_PREFERENCES.equals(command.getElementId())) { org.eclipse.e4.ui.model.application.ui.menu.MHandledMenuItem menuItem = MenuFactoryImpl.eINSTANCE.createHandledMenuItem(); menuItem.setCommand(command); menuItem.setLabel(command.getCommandName()); menuItem.setIconURI(org.eclipse.ui.internal.menus.MenuHelper.getIconURI(action.getImageDescriptor(), application.getContext())); java.lang.String text = action.getText(); int index = text.indexOf('&'); if ((index != (-1)) && (index != ((text.length()) - 1))) { menuItem.setMnemonics(text.substring((index + 1), (index + 2))); } switch (action.getStyle()) { case org.eclipse.jface.action.IAction.AS_CHECK_BOX : menuItem.setType(ItemType.CHECK); menuItem.setSelected(action.isChecked()); break; case org.eclipse.jface.action.IAction.AS_RADIO_BUTTON : menuItem.setType(ItemType.RADIO); menuItem.setSelected(action.isChecked()); break; default : menuItem.setType(ItemType.PUSH); break; } java.lang.String itemId = item.getId(); menuItem.setElementId((itemId == null ? id : itemId)); return menuItem; } } } else if (id != null) { if (id.equals(IWorkbenchCommandConstants.WINDOW_CUSTOMIZE_PERSPECTIVE)) { return null; } for (org.eclipse.e4.ui.model.application.commands.MCommand command : application.getCommands()) { if (id.equals(command.getElementId())) { org.eclipse.e4.ui.model.application.ui.menu.MHandledMenuItem menuItem = MenuFactoryImpl.eINSTANCE.createHandledMenuItem(); menuItem.setCommand(command); if ((action.getText()) != null) { menuItem.setLabel(action.getText()); } else { menuItem.setLabel(command.getCommandName()); } menuItem.setIconURI(org.eclipse.ui.internal.menus.MenuHelper.getIconURI(action.getImageDescriptor(), application.getContext())); switch (action.getStyle()) { case org.eclipse.jface.action.IAction.AS_CHECK_BOX : menuItem.setType(ItemType.CHECK); menuItem.setSelected(action.isChecked()); break; case org.eclipse.jface.action.IAction.AS_RADIO_BUTTON : menuItem.setType(ItemType.RADIO); menuItem.setSelected(action.isChecked()); break; default : menuItem.setType(ItemType.PUSH); break; } java.lang.String itemId = item.getId(); menuItem.setElementId((itemId == null ? id : itemId)); return menuItem; } } } else { org.eclipse.e4.ui.model.application.ui.menu.MDirectMenuItem menuItem = MenuFactoryImpl.eINSTANCE.createDirectMenuItem(); if ((action.getText()) != null) { menuItem.setLabel(action.getText()); } java.lang.String itemId = item.getId(); menuItem.setElementId((itemId == null ? id : itemId)); menuItem.setIconURI(org.eclipse.ui.internal.menus.MenuHelper.getIconURI(action.getImageDescriptor(), application.getContext())); switch (action.getStyle()) { case org.eclipse.jface.action.IAction.AS_CHECK_BOX : menuItem.setType(ItemType.CHECK); menuItem.setSelected(action.isChecked()); break; case org.eclipse.jface.action.IAction.AS_RADIO_BUTTON : menuItem.setType(ItemType.RADIO); menuItem.setSelected(action.isChecked()); break; default : menuItem.setType(ItemType.PUSH); break; } menuItem.setContributionURI("bundleclass://org.eclipse.ui.workbench/programmic.contribution"); menuItem.setObject(new org.eclipse.ui.internal.menus.MenuHelper.DirectProxy(action)); return menuItem; } return null; }
private void virtualLazyUpdateWidget(org.eclipse.swt.widgets.Widget widget, int index) { if (contentProviderIsTreeBased) { org.eclipse.jface.viewers.TreePath treePath; if (widget instanceof org.eclipse.swt.widgets.Item) { if ((widget.getData()) == null) { return; } treePath = getTreePathFromItem(((org.eclipse.swt.widgets.Item) (widget))); } else { treePath = TreePath.EMPTY; } ((org.eclipse.jface.viewers.ILazyTreePathContentProvider) (getContentProvider())).updateElement(treePath, index); } else { ((org.eclipse.jface.viewers.ILazyTreeContentProvider) (getContentProvider())).updateElement(widget.getData(), index); } }
org.eclipse.core.runtime.MultiStatus recordError(org.eclipse.core.runtime.MultiStatus errors, org.eclipse.core.runtime.CoreException error) { if (errors == null) errors = new org.eclipse.core.runtime.MultiStatus(org.eclipse.ui.internal.ide.IDEWorkbenchPlugin.IDE_WORKBENCH, org.eclipse.core.runtime.IStatus.ERROR, getProblemsMessage(), error); errors.merge(error.getStatus()); return errors; }
public void selectionChanged(org.eclipse.jface.viewers.IStructuredSelection selection) { if (org.eclipse.ui.views.markers.internal.Util.isSingleConcreteSelection(selection)) { if (org.eclipse.ui.ide.IDE.getMarkerHelpRegistry().hasResolutions(getSelectedMarker())) { setEnabled(true); return; } } setEnabled(false); }
protected org.eclipse.ui.internal.about.AboutItem scan(java.lang.String s) { java.util.ArrayList linkRanges = new java.util.ArrayList(); java.util.ArrayList links = new java.util.ArrayList(); int urlSeparatorOffset = s.indexOf("://"); while (urlSeparatorOffset >= 0) { boolean startDoubleQuote = false; int urlOffset = urlSeparatorOffset; char ch; do { urlOffset--; ch = ' '; if (urlOffset > (-1)) ch = s.charAt(urlOffset); startDoubleQuote = ch == '"'; } while (java.lang.Character.isUnicodeIdentifierStart(ch) ); urlOffset++; java.util.StringTokenizer tokenizer = new java.util.StringTokenizer(s.substring((urlSeparatorOffset + 3)), " \t\n\r\f<>", false); if (!(tokenizer.hasMoreTokens())) return null; int urlLength = (((tokenizer.nextToken().length()) + 3) + urlSeparatorOffset) - urlOffset; if (startDoubleQuote) { int endOffset = -1; int nextDoubleQuote = s.indexOf('"', urlOffset); int nextWhitespace = s.indexOf(' ', urlOffset); if ((nextDoubleQuote != (-1)) && (nextWhitespace != (-1))) endOffset = java.lang.Math.min(nextDoubleQuote, nextWhitespace); else if (nextDoubleQuote != (-1)) endOffset = nextDoubleQuote; else if (nextWhitespace != (-1)) endOffset = nextWhitespace; if (endOffset != (-1)) urlLength = endOffset - urlOffset; } linkRanges.add(new int[]{ urlOffset, urlLength }); links.add(s.substring(urlOffset, (urlOffset + urlLength))); urlSeparatorOffset = s.indexOf("://", ((urlOffset + urlLength) + 1)); } return new org.eclipse.ui.internal.about.AboutItem(s, ((int[][]) (linkRanges.toArray(new int[linkRanges.size()][2]))), ((java.lang.String[]) (links.toArray(new java.lang.String[links.size()])))); }
public void setEnabled(java.lang.Object evaluationContext) { if (!(evaluationContext instanceof org.eclipse.core.expressions.IEvaluationContext)) { return; } org.eclipse.core.expressions.IEvaluationContext context = ((org.eclipse.core.expressions.IEvaluationContext) (evaluationContext)); final org.eclipse.ui.internal.handlers.CommandLegacyActionWrapper action = getAction(); if ((enabledWhenExpression) != null) { try { final org.eclipse.core.expressions.EvaluationResult result = enabledWhenExpression.evaluate(context); if (action != null) { action.setEnabled((result != (org.eclipse.core.expressions.EvaluationResult.FALSE))); } } catch (final org.eclipse.core.runtime.CoreException e) { final java.lang.StringBuffer message = new java.lang.StringBuffer("An exception occurred while evaluating the enabledWhen expression for "); if ((delegate) != null) { message.append(delegate); } else { message.append(element.getAttribute(delegateAttributeName)); } message.append("' could not be loaded"); final org.eclipse.core.runtime.IStatus status = new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.WARNING, org.eclipse.ui.internal.WorkbenchPlugin.PI_WORKBENCH, 0, e.getMessage(), e); org.eclipse.ui.internal.WorkbenchPlugin.log(message.toString(), status); return; } } updateDelegate(action, context); }
private boolean close() { if (detailsOpened) { toggleDetailsArea(); } if (trayOpened) { closeTray(); } shellBounds = getShell().getBounds(); if ((clipboard) != null) { clipboard.dispose(); } statusListViewer = null; boolean result = this.dialog.close(); if (!(modalitySwitch)) { org.eclipse.ui.internal.progress.ProgressManagerUtil.animateDown(shellBounds); } return result; }
public void dispose() { super.dispose(); if ((busyCursor) != null) busyCursor.dispose(); if ((handCursor) != null) handCursor.dispose(); if ((this.colorListener) != null) { org.eclipse.jface.preference.JFacePreferences.getPreferenceStore().removePropertyChangeListener(this.colorListener); } }
public static org.eclipse.core.resources.IProject[] extractProjects(java.lang.Object[] selection) { java.util.HashSet projects = new java.util.HashSet(); for (int i = 0; i < (selection.length); i++) { if ((selection[i]) instanceof org.eclipse.core.resources.IResource) { projects.add(((org.eclipse.core.resources.IResource) (selection[i])).getProject()); } else if ((selection[i]) instanceof org.eclipse.core.runtime.IAdaptable) { org.eclipse.core.runtime.IAdaptable adaptable = ((org.eclipse.core.runtime.IAdaptable) (selection[i])); org.eclipse.core.resources.IResource resource = ((org.eclipse.core.resources.IResource) (adaptable.getAdapter(org.eclipse.core.resources.IResource.class))); if (resource != null) projects.add(resource.getProject()); } else { org.eclipse.core.runtime.IAdapterManager am = org.eclipse.core.runtime.Platform.getAdapterManager(); java.lang.Object rm = am.getAdapter(selection[i], org.eclipse.core.resources.mapping.ResourceMapping.class); if (rm instanceof org.eclipse.core.resources.mapping.ResourceMapping) { org.eclipse.core.resources.IProject[] theProjects = ((org.eclipse.core.resources.mapping.ResourceMapping) (rm)).getProjects(); for (int j = 0; j < (theProjects.length); j++) { projects.add(theProjects[j]); } } } } return ((org.eclipse.core.resources.IProject[]) (projects.toArray(new org.eclipse.core.resources.IProject[projects.size()]))); }
private void updateChildrenOf(java.lang.Object node, org.eclipse.swt.widgets.Widget widget) { org.eclipse.ui.views.properties.IPropertySheetEntry entry = null; org.eclipse.ui.views.properties.PropertySheetCategory category = null; if (node instanceof org.eclipse.ui.views.properties.IPropertySheetEntry) entry = ((org.eclipse.ui.views.properties.IPropertySheetEntry) (node)); else category = ((org.eclipse.ui.views.properties.PropertySheetCategory) (node)); org.eclipse.swt.widgets.TreeItem item = null; org.eclipse.swt.widgets.TreeItem[] childItems; if (node == (rootEntry)) { childItems = tree.getItems(); } else { item = ((org.eclipse.swt.widgets.TreeItem) (widget)); childItems = item.getItems(); } if ((item != null) && (!(item.getExpanded()))) { for (int i = 0; i < (childItems.length); i++) { if ((childItems[i].getData()) != null) { removeItem(childItems[i]); } } if ((category != null) || (entry.hasChildEntries())) { if (((childItems.length) != 1) || ((childItems[0].getData()) != null)) new org.eclipse.swt.widgets.TreeItem(item, org.eclipse.swt.SWT.NULL); } return; } if ((node == (rootEntry)) && (isShowingCategories)) updateCategories(); java.util.List children = getChildren(node); java.util.Set set = new java.util.HashSet((((childItems.length) * 2) + 1)); for (int i = 0; i < (childItems.length); i++) { java.lang.Object data = childItems[i].getData(); if (data != null) { java.lang.Object e = data; int ix = children.indexOf(e); if (ix < 0) { removeItem(childItems[i]); } else { set.add(e); } } else if (data == null) { item.dispose(); } } int oldCnt = -1; if (widget == (tree)) oldCnt = tree.getItemCount(); int newSize = children.size(); for (int i = 0; i < newSize; i++) { java.lang.Object el = children.get(i); if (!(set.contains(el))) createItem(el, widget, i); } if (((widget == (tree)) && (oldCnt == 0)) && ((tree.getItemCount()) == 1)) { tree.setRedraw(false); tree.setRedraw(true); } if (entry == (rootEntry)) childItems = tree.getItems(); else childItems = item.getItems(); for (int i = 0; i < newSize; i++) { java.lang.Object el = children.get(i); if (el instanceof org.eclipse.ui.views.properties.IPropertySheetEntry) updateEntry(((org.eclipse.ui.views.properties.IPropertySheetEntry) (el)), childItems[i]); else { updateCategory(((org.eclipse.ui.views.properties.PropertySheetCategory) (el)), childItems[i]); updateChildrenOf(el, childItems[i]); } } entrySelectionChanged(); }
private void writeInstalledIUs(java.io.PrintWriter writer) { org.osgi.framework.BundleContext context = org.eclipse.ui.internal.ide.IDEWorkbenchPlugin.getDefault().getBundle().getBundleContext(); if (context == null) return; org.osgi.framework.ServiceReference reference = context.getServiceReference(org.eclipse.equinox.internal.provisional.p2.engine.IProfileRegistry.class.getName()); if (reference == null) return; try { org.eclipse.equinox.internal.provisional.p2.engine.IProfileRegistry registry = ((org.eclipse.equinox.internal.provisional.p2.engine.IProfileRegistry) (context.getService(reference))); if (registry == null) return; org.eclipse.equinox.internal.provisional.p2.engine.IProfile profile = registry.getProfile(IProfileRegistry.SELF); if (profile == null) return; writer.println(IDEWorkbenchMessages.ConfigurationLogUpdateSection_installConfiguration); writer.println((" " + (org.eclipse.osgi.util.NLS.bind(IDEWorkbenchMessages.ConfigurationLogUpdateSection_lastChangedOn, java.text.DateFormat.getDateInstance().format(new java.util.Date(profile.getTimestamp())))))); writer.println((" " + (org.eclipse.osgi.util.NLS.bind(IDEWorkbenchMessages.ConfigurationLogUpdateSection_location, profile.getProperty(IProfile.PROP_INSTALL_FOLDER))))); writer.println((" " + (org.eclipse.osgi.util.NLS.bind(IDEWorkbenchMessages.ConfigurationLogUpdateSection_timestamp, java.lang.Long.toString(profile.getTimestamp()))))); writer.println(); org.eclipse.equinox.internal.provisional.p2.query.Collector collector = profile.available(InstallableUnitQuery.ANY, new org.eclipse.equinox.internal.provisional.p2.query.Collector(), null); java.util.SortedSet sorted = new java.util.TreeSet(); for (java.util.Iterator iter = collector.iterator(); iter.hasNext();) { org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit unit = ((org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit) (iter.next())); sorted.add(org.eclipse.osgi.util.NLS.bind(IDEWorkbenchMessages.ConfigurationLogUpdateSection_IU, unit.getId(), unit.getVersion())); } if (!(sorted.isEmpty())) { writer.println(IDEWorkbenchMessages.ConfigurationLogUpdateSection_IUHeader); writer.println(); for (java.util.Iterator iter = sorted.iterator(); iter.hasNext();) writer.println(iter.next()); } } finally { context.ungetService(reference); } }
protected void runClearPlaceholderJob(final org.eclipse.ui.progress.PendingUpdateAdapter placeholder) { if ((placeholder.isRemoved()) || (!(org.eclipse.ui.PlatformUI.isWorkbenchRunning()))) { return; } org.eclipse.ui.progress.WorkbenchJob clearJob = new org.eclipse.ui.progress.WorkbenchJob(org.eclipse.ui.internal.progress.ProgressMessages.DeferredTreeContentManager_ClearJob) { public org.eclipse.core.runtime.IStatus runInUIThread(org.eclipse.core.runtime.IProgressMonitor monitor) { if (!(placeholder.isRemoved())) { org.eclipse.swt.widgets.Control control = treeViewer.getControl(); if (control.isDisposed()) { return org.eclipse.core.runtime.Status.CANCEL_STATUS; } treeViewer.remove(placeholder); placeholder.setRemoved(true); } return org.eclipse.core.runtime.Status.OK_STATUS; } }; clearJob.setSystem(true); if ((updateCompleteListener) != null) clearJob.addJobChangeListener(updateCompleteListener); clearJob.schedule(); }
public void insert(java.lang.Object parentElementOrTreePath, java.lang.Object element, int position) { org.eclipse.core.runtime.Assert.isNotNull(parentElementOrTreePath); org.eclipse.core.runtime.Assert.isNotNull(element); if (((getComparator()) != null) || (hasFilters())) { add(parentElementOrTreePath, new java.lang.Object[]{ element }); return; } org.eclipse.swt.widgets.Widget[] items; if (internalIsInputOrEmptyPath(parentElementOrTreePath)) { items = new org.eclipse.swt.widgets.Widget[]{ getControl() }; } else { items = internalFindItems(parentElementOrTreePath); } for (int i = 0; i < (items.length); i++) { org.eclipse.swt.widgets.Widget widget = items[i]; if (widget instanceof org.eclipse.swt.widgets.Item) { org.eclipse.swt.widgets.Item item = ((org.eclipse.swt.widgets.Item) (widget)); org.eclipse.swt.widgets.Item[] childItems = getChildren(item); if ((getExpanded(item)) || (((childItems.length) > 0) && ((childItems[0].getData()) != null))) { int insertionPosition = position; if (insertionPosition == (-1)) { insertionPosition = getItemCount(item); } createTreeItem(item, element, position); } } else { int insertionPosition = position; if (insertionPosition == (-1)) { insertionPosition = getItemCount(((org.eclipse.swt.widgets.Control) (widget))); } createTreeItem(widget, element, position); } } }
public void perspectiveClosed(org.eclipse.ui.IWorkbenchPage page, org.eclipse.ui.IPerspectiveDescriptor perspective) { if ((page != null) && (!(page.getWorkbenchWindow().getWorkbench().isClosing()))) { removePerspectiveShortcut(perspective, page); } }
public org.eclipse.core.runtime.IStatus restoreState(org.eclipse.ui.IMemento memento) { org.eclipse.ui.IMemento childMem = memento.getChild(IWorkbenchConstants.TAG_DESCRIPTOR); if (childMem != null) { id = childMem.getString(IWorkbenchConstants.TAG_ID); originalId = childMem.getString(IWorkbenchConstants.TAG_DESCRIPTOR); label = childMem.getString(IWorkbenchConstants.TAG_LABEL); className = childMem.getString(IWorkbenchConstants.TAG_CLASS); singleton = (childMem.getInteger(IWorkbenchConstants.TAG_SINGLETON)) != null; org.eclipse.ui.internal.registry.PerspectiveDescriptor descriptor = ((org.eclipse.ui.internal.registry.PerspectiveDescriptor) (org.eclipse.ui.internal.WorkbenchPlugin.getDefault().getPerspectiveRegistry().findPerspectiveWithId(getOriginalId()))); if (descriptor != null) image = descriptor.image; } return new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.OK, org.eclipse.ui.PlatformUI.PLUGIN_ID, 0, "", null); }
private void createToolBars() { org.eclipse.swt.widgets.Composite parentControl = control; isvToolBar = isvToolBarMgr.createControl(parentControl.getParent()); if (locked) { isvToolBar.addMouseListener(new org.eclipse.swt.events.MouseAdapter() { public void mouseDoubleClick(org.eclipse.swt.events.MouseEvent event) { if ((isvToolBar.getItem(new org.eclipse.swt.graphics.Point(event.x, event.y))) == null) doZoom(); } }); } else { } isvToolBar.addListener(SWT.Activate, this); }
public void addExtension(org.eclipse.core.runtime.dynamichelpers.IExtensionTracker tracker, org.eclipse.core.runtime.IExtension extension) { java.util.ArrayList setsToActivate = new java.util.ArrayList(); java.lang.Object[] registeredObjects = getWorkbench().getExtensionTracker().getObjects(extension); for (int i = 0; i < (registeredObjects.length); i++) { if ((registeredObjects[i]) instanceof org.eclipse.ui.internal.registry.IActionSetDescriptor) { org.eclipse.ui.internal.registry.IActionSetDescriptor desc = ((org.eclipse.ui.internal.registry.IActionSetDescriptor) (registeredObjects[i])); if (desc.isInitiallyVisible()) { setsToActivate.add(desc); } } } if (setsToActivate.isEmpty()) return; org.eclipse.ui.internal.WorkbenchPage page = getActiveWorkbenchPage(); if (page != null) { org.eclipse.ui.internal.Perspective[] perspectives = page.getOpenInternalPerspectives(); for (int i = 0; i < (perspectives.length); i++) { org.eclipse.ui.internal.registry.IActionSetDescriptor[] originalSets = perspectives[i].getActionSets(); java.util.ArrayList newSets = new java.util.ArrayList(java.util.Arrays.asList(originalSets)); newSets.addAll(setsToActivate); perspectives[i].setActionSets(((org.eclipse.ui.internal.registry.IActionSetDescriptor[]) (newSets.toArray(new org.eclipse.ui.internal.registry.IActionSetDescriptor[newSets.size()])))); } } updateActionSets(); }
private final void createProjectLocationGroup(org.eclipse.ui.dialogs.Composite parent) { org.eclipse.swt.graphics.Font font = parent.getFont(); org.eclipse.ui.dialogs.Group projectGroup = new org.eclipse.ui.dialogs.Group(parent, org.eclipse.swt.SWT.NONE); org.eclipse.swt.layout.GridLayout layout = new org.eclipse.swt.layout.GridLayout(); layout.numColumns = 3; projectGroup.setLayout(layout); projectGroup.setLayoutData(new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_HORIZONTAL)); projectGroup.setFont(font); projectGroup.setText(org.eclipse.ui.dialogs.WorkbenchMessages.getString("WizardNewProjectCreationPage.projectContentsLabel")); final org.eclipse.ui.dialogs.Button useDefaultsButton = new org.eclipse.ui.dialogs.Button(projectGroup, ((org.eclipse.swt.SWT.CHECK) | (org.eclipse.swt.SWT.RIGHT))); useDefaultsButton.setText(org.eclipse.ui.dialogs.WorkbenchMessages.getString("WizardNewProjectCreationPage.useDefaultLabel")); useDefaultsButton.setSelection(useDefaults); useDefaultsButton.setFont(font); org.eclipse.swt.layout.GridData buttonData = new org.eclipse.swt.layout.GridData(); buttonData.horizontalSpan = 3; useDefaultsButton.setLayoutData(buttonData); createUserSpecifiedProjectLocationGroup(projectGroup, (!(useDefaults))); org.eclipse.ui.dialogs.SelectionListener listener = new org.eclipse.ui.dialogs.SelectionAdapter() { public void widgetSelected(org.eclipse.ui.dialogs.SelectionEvent e) { useDefaults = useDefaultsButton.getSelection(); browseButton.setEnabled((!(useDefaults))); locationPathField.setEnabled((!(useDefaults))); locationLabel.setEnabled((!(useDefaults))); if (useDefaults) { customLocationFieldValue = locationPathField.getText(); setLocationForSelection(); } else { locationPathField.setText(customLocationFieldValue); } } }; useDefaultsButton.addSelectionListener(listener); }
private void applyViewerLabel(org.eclipse.jface.viewers.ViewerCell cell, org.eclipse.jface.viewers.ViewerLabel label) { if (label.hasNewText()) { cell.setText(label.getText()); } if (label.hasNewImage()) { cell.setImage(label.getImage()); } if (((colorProvider) != null) || (label.hasNewBackground())) { cell.setBackground(label.getBackground()); } if (((colorProvider) != null) || (label.hasNewForeground())) { cell.setForeground(label.getForeground()); } if (((fontProvider) != null) || (label.hasNewFont())) { cell.setFont(label.getFont()); } }
public void handleEvent(org.osgi.service.event.Event event) { final org.eclipse.e4.ui.model.application.ui.MUIElement changedElement = ((org.eclipse.e4.ui.model.application.ui.MUIElement) (event.getProperty(EventTags.ELEMENT))); if ((!(changedElement instanceof org.eclipse.e4.ui.model.application.ui.advanced.MPerspectiveStack)) || ((modelService.getTopLevelWindowFor(changedElement)) == null)) return; java.lang.String eventType = ((java.lang.String) (event.getProperty(UIEvents.EventTags.TYPE))); if (UIEvents.EventTypes.REMOVE.equals(eventType)) { org.eclipse.e4.ui.model.application.ui.MUIElement removed = ((org.eclipse.e4.ui.model.application.ui.MUIElement) (event.getProperty(UIEvents.EventTags.OLD_VALUE))); java.lang.String perspectiveId = removed.getElementId(); org.eclipse.e4.ui.model.application.ui.basic.MWindow window = modelService.getTopLevelWindowFor(changedElement); org.eclipse.e4.ui.model.application.ui.basic.MTrimBar bar = modelService.getTrim(((org.eclipse.e4.ui.model.application.ui.basic.MTrimmedWindow) (window)), SideValue.TOP); java.util.List<org.eclipse.e4.ui.model.application.ui.menu.MToolControl> toRemove = new java.util.ArrayList<org.eclipse.e4.ui.model.application.ui.menu.MToolControl>(); for (org.eclipse.e4.ui.model.application.ui.MUIElement child : bar.getChildren()) { java.lang.String trimElementId = child.getElementId(); if ((child instanceof org.eclipse.e4.ui.model.application.ui.menu.MToolControl) && (trimElementId.contains(perspectiveId))) { toRemove.add(((org.eclipse.e4.ui.model.application.ui.menu.MToolControl) (child))); } } for (org.eclipse.e4.ui.model.application.ui.menu.MToolControl minStack : toRemove) { minStack.setToBeRendered(false); bar.getChildren().remove(minStack); } } }
public void selectionChanged(org.eclipse.jface.viewers.SelectionChangedEvent selectionEvent) { page.setErrorMessage(null); page.setMessage(null); java.lang.Object selectedObject = getSingleSelection(((org.eclipse.jface.viewers.IStructuredSelection) (selectionEvent.getSelection()))); if (selectedObject instanceof org.eclipse.ui.internal.dialogs.WizardCollectionElement) { updateCategorySelection(((org.eclipse.ui.internal.dialogs.WizardCollectionElement) (selectedObject))); } else if (selectedObject instanceof org.eclipse.ui.internal.dialogs.WorkbenchWizardElement) { updateWizardSelection(((org.eclipse.ui.internal.dialogs.WorkbenchWizardElement) (selectedObject))); } else { updateDescription(null); } }
public void configureEditorAreaDropListener(org.eclipse.swt.dnd.DropTargetListener dropTargetListener) { this.dropTargetListener = dropTargetListener; }
static int measureTree(org.eclipse.swt.graphics.Rectangle outerBounds, org.eclipse.ui.internal.LayoutTree toMeasure, boolean horizontal) { if (toMeasure == null) { return org.eclipse.jface.util.Geometry.getDimension(outerBounds, horizontal); } org.eclipse.ui.internal.LayoutTreeNode parent = toMeasure.getParent(); if (parent == null) { return org.eclipse.jface.util.Geometry.getDimension(outerBounds, horizontal); } if ((parent.getSash().isHorizontal()) == horizontal) { return org.eclipse.ui.internal.PartSashContainer.measureTree(outerBounds, parent, horizontal); } boolean isLeft = parent.isLeftChild(toMeasure); org.eclipse.ui.internal.LayoutTree otherChild = parent.getChild((!isLeft)); if (otherChild.isVisible()) { int left = parent.getSash().getLeft(); int right = parent.getSash().getRight(); int childSize = (isLeft) ? left : right; int bias = parent.getCompressionBias(); if (isLeft) { bias = -bias; } if (bias == 1) { return childSize; } else if (bias == (-1)) { return (org.eclipse.ui.internal.PartSashContainer.measureTree(outerBounds, parent, horizontal)) - ((left + right) - childSize); } if ((left + right) == 0) return 0; return ((org.eclipse.ui.internal.PartSashContainer.measureTree(outerBounds, parent, horizontal)) * childSize) / (left + right); } return org.eclipse.ui.internal.PartSashContainer.measureTree(outerBounds, parent, horizontal); }
public boolean performOk() { org.eclipse.core.resources.IResource resource = ((org.eclipse.core.resources.IResource) (getElement().getAdapter(org.eclipse.core.resources.IResource.class))); encodingEditor.store(); if ((lineDelimiterEditor) != null) { lineDelimiterEditor.store(); } try { org.eclipse.core.resources.ResourceAttributes attrs = resource.getResourceAttributes(); if (attrs != null) { boolean hasChange = false; if (((editableBox) != null) && ((editableBox.getSelection()) != (previousReadOnlyValue))) { attrs.setReadOnly(editableBox.getSelection()); hasChange = true; } if (((executableBox) != null) && ((executableBox.getSelection()) != (previousExecutableValue))) { attrs.setExecutable(executableBox.getSelection()); hasChange = true; } if (((archiveBox) != null) && ((archiveBox.getSelection()) != (previousArchiveValue))) { attrs.setArchive(archiveBox.getSelection()); hasChange = true; } if (hasChange) { resource.setResourceAttributes(attrs); attrs = resource.getResourceAttributes(); if (attrs != null) { previousReadOnlyValue = attrs.isReadOnly(); previousExecutableValue = attrs.isExecutable(); previousArchiveValue = attrs.isArchive(); if ((editableBox) != null) { editableBox.setSelection(attrs.isReadOnly()); } if ((executableBox) != null) { executableBox.setSelection(attrs.isExecutable()); } if ((archiveBox) != null) { archiveBox.setSelection(attrs.isArchive()); } } } } if ((this.derivedBox) != null) { boolean localDerivedValue = derivedBox.getSelection(); if ((previousDerivedValue) != localDerivedValue) { resource.setDerived(localDerivedValue); boolean isDerived = resource.isDerived(); previousDerivedValue = isDerived; derivedBox.setSelection(isDerived); } } } catch (org.eclipse.core.runtime.CoreException exception) { org.eclipse.jface.dialogs.ErrorDialog.openError(getShell(), IDEWorkbenchMessages.InternalError, exception.getLocalizedMessage(), exception.getStatus()); return false; } return true; }
private java.lang.String computeTitle() { org.eclipse.ui.application.IWorkbenchWindowConfigurer configurer = getWindowConfigurer(); org.eclipse.ui.IWorkbenchPage currentPage = configurer.getWindow().getActivePage(); org.eclipse.ui.IEditorPart activeEditor = null; if (currentPage != null) { activeEditor = currentPage.getActiveEditor(); } java.lang.String title = null; org.eclipse.core.runtime.IProduct product = org.eclipse.core.runtime.Platform.getProduct(); if (product != null) { title = product.getName(); } if (title == null) { title = ""; } if (currentPage != null) { if (activeEditor != null) { lastEditorTitle = activeEditor.getTitleToolTip(); title = org.eclipse.osgi.util.NLS.bind(IDEWorkbenchMessages.WorkbenchWindow_shellTitle, lastEditorTitle, title); } org.eclipse.ui.IPerspectiveDescriptor persp = currentPage.getPerspective(); java.lang.String label = ""; if (persp != null) { label = persp.getLabel(); } org.eclipse.core.runtime.IAdaptable input = currentPage.getInput(); if ((input != null) && (!(input.equals(wbAdvisor.getDefaultPageInput())))) { label = currentPage.getLabel(); } if ((label != null) && (!(label.equals("")))) { title = org.eclipse.osgi.util.NLS.bind(IDEWorkbenchMessages.WorkbenchWindow_shellTitle, label, title); } } java.lang.String workspaceLocation = wbAdvisor.getWorkspaceLocation(); if (workspaceLocation != null) { title = org.eclipse.osgi.util.NLS.bind(IDEWorkbenchMessages.WorkbenchWindow_shellTitle, title, workspaceLocation); } return title; }
private void safeRemoveGui(org.eclipse.e4.ui.model.application.ui.MUIElement element) { if ((removeRoot) == null) removeRoot = element; renderedElements.remove(element); org.eclipse.e4.ui.model.application.ui.MUIElement parent = element.getParent(); org.eclipse.e4.ui.internal.workbench.swt.AbstractPartRenderer parentRenderer = (parent != null) ? getRendererFor(parent) : null; if (parentRenderer != null) { parentRenderer.hideChild(element.getParent(), element); } org.eclipse.e4.ui.internal.workbench.swt.AbstractPartRenderer renderer = getRendererFor(element); if (renderer != null) { if (element instanceof org.eclipse.e4.ui.model.application.ui.MElementContainer<?>) { org.eclipse.e4.ui.model.application.ui.MElementContainer<org.eclipse.e4.ui.model.application.ui.MUIElement> container = ((org.eclipse.e4.ui.model.application.ui.MElementContainer<org.eclipse.e4.ui.model.application.ui.MUIElement>) (element)); org.eclipse.e4.ui.model.application.ui.MUIElement selectedElement = container.getSelectedElement(); java.util.List<org.eclipse.e4.ui.model.application.ui.MUIElement> children = container.getChildren(); for (org.eclipse.e4.ui.model.application.ui.MUIElement child : children) { if (child != selectedElement) { removeGui(child); } } if ((selectedElement != null) && (children.contains(selectedElement))) { removeGui(selectedElement); } } if (element instanceof org.eclipse.e4.ui.model.application.ui.advanced.MPerspective) { org.eclipse.e4.ui.model.application.ui.advanced.MPerspective perspective = ((org.eclipse.e4.ui.model.application.ui.advanced.MPerspective) (element)); for (org.eclipse.e4.ui.model.application.ui.basic.MWindow subWindow : perspective.getWindows()) { removeGui(subWindow); } } else if (element instanceof org.eclipse.e4.ui.model.application.ui.basic.MWindow) { org.eclipse.e4.ui.model.application.ui.basic.MWindow window = ((org.eclipse.e4.ui.model.application.ui.basic.MWindow) (element)); for (org.eclipse.e4.ui.model.application.ui.basic.MWindow subWindow : window.getWindows()) { removeGui(subWindow); } if (window instanceof org.eclipse.e4.ui.model.application.ui.basic.MTrimmedWindow) { org.eclipse.e4.ui.model.application.ui.basic.MTrimmedWindow trimmedWindow = ((org.eclipse.e4.ui.model.application.ui.basic.MTrimmedWindow) (window)); for (org.eclipse.e4.ui.model.application.ui.MUIElement trimBar : trimmedWindow.getTrimBars()) { removeGui(trimBar); } } } if (element instanceof org.eclipse.e4.ui.model.application.MContribution) { org.eclipse.e4.ui.model.application.MContribution contribution = ((org.eclipse.e4.ui.model.application.MContribution) (element)); java.lang.Object client = contribution.getObject(); org.eclipse.e4.core.contexts.IEclipseContext parentContext = renderer.getContext(element); if ((parentContext != null) && (client != null)) { try { org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(client, org.eclipse.e4.ui.di.PersistState.class, parentContext, null); } catch (java.lang.Exception e) { if ((logger) != null) { logger.error(e); } } } } renderer.disposeWidget(element); if (element instanceof org.eclipse.e4.ui.model.application.MContribution) { org.eclipse.e4.ui.model.application.MContribution contribution = ((org.eclipse.e4.ui.model.application.MContribution) (element)); java.lang.Object client = contribution.getObject(); org.eclipse.e4.core.contexts.IEclipseContext parentContext = renderer.getContext(element); if ((parentContext != null) && (client != null)) { try { org.eclipse.e4.core.contexts.ContextInjectionFactory.uninject(client, parentContext); } catch (java.lang.Exception e) { if ((logger) != null) { logger.error(e); } } } contribution.setObject(null); } if (element instanceof org.eclipse.e4.ui.model.application.ui.MContext) { clearContext(((org.eclipse.e4.ui.model.application.ui.MContext) (element))); } } if ((removeRoot) == element) removeRoot = null; }
@java.lang.Override protected void internalChildAdded(org.eclipse.e4.ui.model.application.MPart parentElement, org.eclipse.e4.ui.model.application.MPart element) { super.internalChildAdded(parentElement, element); org.eclipse.e4.ui.model.application.MItemPart<?> itemPart = ((org.eclipse.e4.ui.model.application.MItemPart<?>) (element)); org.eclipse.e4.ui.widgets.CTabFolder ctf = ((org.eclipse.e4.ui.widgets.CTabFolder) (parentElement.getWidget())); int createFlags = 0; org.eclipse.e4.ui.widgets.CTabItem cti = findItemForPart(parentElement, element); if (cti == null) { int index = calcIndexFor(element); cti = new org.eclipse.e4.ui.widgets.ETabItem(((org.eclipse.e4.ui.widgets.ETabFolder) (ctf)), createFlags, index); java.lang.String cssClassName = ((java.lang.String) (ctf.getData("org.eclipse.e4.ui.css.CssClassName"))); stylingEngine.setClassname(cti, cssClassName); } cti.setData(org.eclipse.e4.workbench.ui.renderers.swt.OWNING_ME, element); cti.setText(itemPart.getName()); cti.setImage(getImage(element)); org.eclipse.swt.widgets.Control widget = ((org.eclipse.swt.widgets.Control) (element.getWidget())); if ((widget != null) && ((widget.getParent()) != (cti.getParent()))) { widget.setParent(cti.getParent()); } cti.setControl(widget); hookTabControllerLogic(parentElement, element, cti); }
private void virtualSetSelectionToWidget(java.util.List list, boolean reveal) { int size = list.size(); int[] indices = new int[list.size()]; org.eclipse.swt.widgets.Item firstItem = null; int count = 0; java.util.HashSet virtualElements = new java.util.HashSet(); for (int i = 0; i < size; ++i) { java.lang.Object o = list.get(i); org.eclipse.swt.widgets.Widget w = findItem(o); if (w instanceof org.eclipse.swt.widgets.Item) { org.eclipse.swt.widgets.Item item = ((org.eclipse.swt.widgets.Item) (w)); indices[(count++)] = doIndexOf(item); if (firstItem == null) { firstItem = item; } } else { virtualElements.add(o); } } if ((getContentProvider()) instanceof org.eclipse.jface.viewers.ILazyContentProvider) { org.eclipse.jface.viewers.ILazyContentProvider provider = ((org.eclipse.jface.viewers.ILazyContentProvider) (getContentProvider())); for (int i = 0; ((virtualElements.size()) > 0) && (i < (doGetItemCount())); i++) { provider.updateElement(i); org.eclipse.swt.widgets.Item item = doGetItem(i); if (virtualElements.contains(item.getData())) { indices[(count++)] = i; virtualElements.remove(item.getData()); if (firstItem == null) { firstItem = item; } } } } else { if (count != (list.size())) { for (int i = 0; i < (virtualManager.cachedElements.length); i++) { java.lang.Object element = virtualManager.cachedElements[i]; if (virtualElements.contains(element)) { org.eclipse.swt.widgets.Item item = doGetItem(i); item.getText(); indices[(count++)] = i; virtualElements.remove(element); if (firstItem == null) { firstItem = item; } } } } } if (count < size) { java.lang.System.arraycopy(indices, 0, (indices = new int[count]), 0, count); } doDeselectAll(); doSelect(indices); if (reveal && (firstItem != null)) { doShowItem(firstItem); } }
public org.eclipse.core.runtime.IStatus restoreState(org.eclipse.ui.IMemento memento, org.eclipse.ui.IPerspectiveDescriptor activeDescriptor) { org.eclipse.ui.internal.misc.Assert.isNotNull(getShell()); org.eclipse.core.runtime.MultiStatus result = new org.eclipse.core.runtime.MultiStatus(org.eclipse.ui.PlatformUI.PLUGIN_ID, org.eclipse.core.runtime.IStatus.OK, org.eclipse.ui.internal.WorkbenchMessages.getString("WorkbenchWindow.problemsRestoringWindow"), null); org.eclipse.swt.graphics.Rectangle displayBounds = getShell().getDisplay().getBounds(); org.eclipse.swt.graphics.Rectangle shellBounds = new org.eclipse.swt.graphics.Rectangle(0, 0, 0, 0); java.lang.Integer bigInt; bigInt = memento.getInteger(IWorkbenchConstants.TAG_X); shellBounds.x = (bigInt == null) ? 0 : bigInt.intValue(); bigInt = memento.getInteger(IWorkbenchConstants.TAG_Y); shellBounds.y = (bigInt == null) ? 0 : bigInt.intValue(); bigInt = memento.getInteger(IWorkbenchConstants.TAG_WIDTH); shellBounds.width = (bigInt == null) ? 0 : bigInt.intValue(); bigInt = memento.getInteger(IWorkbenchConstants.TAG_HEIGHT); shellBounds.height = (bigInt == null) ? 0 : bigInt.intValue(); if (!(shellBounds.isEmpty())) { if (!(shellBounds.intersects(displayBounds))) { org.eclipse.swt.graphics.Rectangle clientArea = getShell().getDisplay().getClientArea(); shellBounds.x = clientArea.x; shellBounds.y = clientArea.y; } getShell().setBounds(shellBounds); } if ("true".equals(memento.getString(IWorkbenchConstants.TAG_MAXIMIZED))) { getShell().setMaximized(true); } if ("true".equals(memento.getString(IWorkbenchConstants.TAG_MINIMIZED))) { } if ((getCoolBarManager()) != null) { org.eclipse.jface.action.CoolBarManager coolBarMgr = getCoolBarManager(); org.eclipse.ui.IMemento coolBarMem = memento.getChild(IWorkbenchConstants.TAG_COOLBAR_LAYOUT); if (coolBarMem != null) { java.lang.Integer lockedInt = coolBarMem.getInteger(IWorkbenchConstants.TAG_LOCKED); if ((lockedInt != null) && ((lockedInt.intValue()) == 1)) { coolBarMgr.setLockLayout(true); } else { coolBarMgr.setLockLayout(false); } java.util.ArrayList layout = new java.util.ArrayList(); org.eclipse.ui.IMemento[] contributionMems = coolBarMem.getChildren(IWorkbenchConstants.TAG_COOLITEM); for (int i = 0; i < (contributionMems.length); i++) { org.eclipse.ui.IMemento contributionMem = contributionMems[i]; java.lang.String type = contributionMem.getString(IWorkbenchConstants.TAG_ITEM_TYPE); if (type == null) { continue; } java.lang.String id = contributionMem.getString(IWorkbenchConstants.TAG_ID); org.eclipse.jface.action.IContributionItem newItem = null; if (type.equals(IWorkbenchConstants.TAG_TYPE_SEPARATOR)) { if (id != null) { newItem = new org.eclipse.jface.action.Separator(id); } else { newItem = new org.eclipse.jface.action.Separator(); } } else if ((id != null) && (type.equals(IWorkbenchConstants.TAG_TYPE_GROUPMARKER))) { newItem = new org.eclipse.jface.action.GroupMarker(id); } else if ((id != null) && (type.equals(IWorkbenchConstants.TAG_TYPE_TOOLBARCONTRIBUTION))) { java.lang.Integer width = contributionMem.getInteger(IWorkbenchConstants.TAG_ITEM_X); java.lang.Integer height = contributionMem.getInteger(IWorkbenchConstants.TAG_ITEM_Y); org.eclipse.jface.action.IContributionItem oldItem = coolBarMgr.find(id); if (oldItem instanceof org.eclipse.jface.action.ToolBarContributionItem) { newItem = ((org.eclipse.jface.action.ToolBarContributionItem) (oldItem)); } else { newItem = new org.eclipse.jface.action.ToolBarContributionItem(new org.eclipse.jface.action.ToolBarManager(coolBarMgr.getStyle()), id); newItem.setVisible(false); org.eclipse.jface.action.IContributionItem refItem = findAlphabeticalOrder(IWorkbenchActionConstants.MB_ADDITIONS, id, coolBarMgr); coolBarMgr.insertAfter(refItem.getId(), newItem); } if (width != null) { ((org.eclipse.jface.action.ToolBarContributionItem) (newItem)).setCurrentWidth(width.intValue()); } if (height != null) { ((org.eclipse.jface.action.ToolBarContributionItem) (newItem)).setCurrentHeight(height.intValue()); } } if (newItem != null) { layout.add(newItem); newItem.setParent(coolBarMgr); coolBarMgr.markDirty(); } } coolBarMgr.setLayout(layout); } else { coolBarMem = memento.getChild(IWorkbenchConstants.TAG_TOOLBAR_LAYOUT); if (coolBarMem != null) { restoreOldCoolBar(coolBarMem); } } } org.eclipse.ui.IWorkbenchPage newActivePage = null; org.eclipse.ui.IMemento[] pageArray = memento.getChildren(IWorkbenchConstants.TAG_PAGE); for (int i = 0; i < (pageArray.length); i++) { org.eclipse.ui.IMemento pageMem = pageArray[i]; java.lang.String strFocus = pageMem.getString(IWorkbenchConstants.TAG_FOCUS); if ((strFocus == null) || ((strFocus.length()) == 0)) continue; org.eclipse.core.runtime.IAdaptable input = null; org.eclipse.ui.IMemento inputMem = pageMem.getChild(IWorkbenchConstants.TAG_INPUT); if (inputMem != null) { java.lang.String factoryID = inputMem.getString(IWorkbenchConstants.TAG_FACTORY_ID); if (factoryID == null) { org.eclipse.ui.internal.WorkbenchPlugin.log("Unable to restore page - no input factory ID."); result.add(unableToRestorePage(pageMem)); continue; } try { org.eclipse.ui.internal.misc.UIStats.start(UIStats.RESTORE_WORKBENCH, "WorkbenchPageFactory"); org.eclipse.ui.IElementFactory factory = org.eclipse.ui.PlatformUI.getWorkbench().getElementFactory(factoryID); if (factory == null) { org.eclipse.ui.internal.WorkbenchPlugin.log(("Unable to restore page - cannot instantiate input factory: " + factoryID)); result.add(unableToRestorePage(pageMem)); continue; } input = factory.createElement(inputMem); if (input == null) { org.eclipse.ui.internal.WorkbenchPlugin.log(("Unable to restore page - cannot instantiate input element: " + factoryID)); result.add(unableToRestorePage(pageMem)); continue; } } finally { org.eclipse.ui.internal.misc.UIStats.end(UIStats.RESTORE_WORKBENCH, "WorkbenchPageFactory"); } } org.eclipse.ui.internal.WorkbenchPage newPage = null; try { newPage = new org.eclipse.ui.internal.WorkbenchPage(this, input); result.add(newPage.restoreState(pageMem, activeDescriptor)); pageList.add(newPage); firePageOpened(newPage); } catch (org.eclipse.ui.WorkbenchException e) { org.eclipse.ui.internal.WorkbenchPlugin.log("Unable to restore perspective - constructor failed."); result.add(e.getStatus()); continue; } if ((strFocus != null) && ((strFocus.length()) > 0)) newActivePage = newPage; } if (pageList.isEmpty()) { try { java.lang.String defPerspID = getWorkbenchImpl().getPerspectiveRegistry().getDefaultPerspective(); org.eclipse.ui.internal.WorkbenchPage newPage = new org.eclipse.ui.internal.WorkbenchPage(this, defPerspID, getAdvisor().getDefaultWindowInput()); pageList.add(newPage); firePageOpened(newPage); } catch (org.eclipse.ui.WorkbenchException e) { org.eclipse.ui.internal.WorkbenchPlugin.log("Unable to create default perspective - constructor failed."); result.add(e.getStatus()); java.lang.String productName = org.eclipse.ui.internal.WorkbenchPlugin.getDefault().getProductName(); if (productName == null) { productName = ""; } getShell().setText(productName); } } if (newActivePage == null) newActivePage = ((org.eclipse.ui.IWorkbenchPage) (pageList.getNextActive())); setActivePage(newActivePage); return result; }
protected void frameChanged(org.eclipse.ui.views.framelist.TreeFrame frame) { org.eclipse.core.resources.IResource resource = ((org.eclipse.core.resources.IResource) (frame.getInput())); org.eclipse.core.resources.IProject project = resource.getProject(); if ((project != null) && ((project.isOpen()) == false)) { org.eclipse.jface.dialogs.MessageDialog.openInformation(navigator.getViewSite().getShell(), org.eclipse.ui.views.navigator.ResourceNavigatorMessages.getString("NavigatorFrameSource.closedProject.title"), org.eclipse.ui.views.navigator.ResourceNavigatorMessages.format("NavigatorFrameSource.closedProject.message", new java.lang.Object[]{ project.getName() })); navigator.getFrameList().back(); } else { super.frameChanged(frame); navigator.updateTitle(); } }
private void closePerspective(org.eclipse.ui.IPerspectiveDescriptor desc, java.lang.String perspectiveId, boolean saveParts) { org.eclipse.e4.ui.model.application.ui.advanced.MPerspective persp = ((org.eclipse.e4.ui.model.application.ui.advanced.MPerspective) (modelService.find(perspectiveId, window))); if (persp != null) { if (saveParts) { java.util.List<org.eclipse.e4.ui.model.application.ui.basic.MPart> parts = modelService.findElements(persp, null, org.eclipse.e4.ui.model.application.ui.basic.MPart.class, null); if (!(parts.isEmpty())) { for (org.eclipse.e4.ui.model.application.ui.advanced.MPerspective perspective : getPerspectiveStack().getChildren()) { if (perspective != persp) { parts.removeAll(modelService.findElements(perspective, null, org.eclipse.e4.ui.model.application.ui.basic.MPart.class, null)); } } if (!(parts.isEmpty())) { for (java.util.Iterator<org.eclipse.e4.ui.model.application.ui.basic.MPart> it = parts.iterator(); it.hasNext();) { org.eclipse.e4.ui.model.application.ui.basic.MPart part = it.next(); if (part.isDirty()) { java.lang.Object object = part.getObject(); if (object instanceof org.eclipse.ui.internal.e4.compatibility.CompatibilityPart) { org.eclipse.ui.IWorkbenchPart workbenchPart = ((org.eclipse.ui.internal.e4.compatibility.CompatibilityPart) (object)).getPart(); if (workbenchPart instanceof org.eclipse.ui.ISaveablePart) { if (!(((org.eclipse.ui.ISaveablePart) (workbenchPart)).isSaveOnCloseNeeded())) { part.setDirty(false); it.remove(); } } } } else { it.remove(); } } if (!(parts.isEmpty())) { org.eclipse.e4.ui.workbench.modeling.ISaveHandler saveHandler = persp.getContext().get(org.eclipse.e4.ui.workbench.modeling.ISaveHandler.class); if ((parts.size()) == 1) { org.eclipse.e4.ui.workbench.modeling.ISaveHandler.Save responses = saveHandler.promptToSave(parts.get(0)); switch (responses) { case CANCEL : return; case NO : break; case YES : partService.savePart(parts.get(0), false); break; } } else { org.eclipse.e4.ui.workbench.modeling.ISaveHandler.Save[] responses = saveHandler.promptToSave(parts); for (org.eclipse.e4.ui.workbench.modeling.ISaveHandler.Save response : responses) { if (response == (org.eclipse.e4.ui.workbench.modeling.ISaveHandler.Save.CANCEL)) { return; } } for (int i = 0; i < (responses.length); i++) { if ((responses[i]) == (org.eclipse.e4.ui.workbench.modeling.ISaveHandler.Save.YES)) { partService.savePart(parts.get(i), false); } } } } } } } sortedPerspectives.remove(desc); if (((getPerspectiveStack().getSelectedElement()) == persp) && (!(sortedPerspectives.isEmpty()))) { org.eclipse.ui.IPerspectiveDescriptor lastActive = sortedPerspectives.get(((sortedPerspectives.size()) - 1)); if (lastActive != null) { setPerspective(lastActive); } } modelService.removePerspectiveModel(persp, window); } }
public void update(java.lang.String propertyName) { if ((widget) != null) { boolean textChanged = (propertyName == null) || (propertyName.equals(IAction.TEXT)); boolean imageChanged = (propertyName == null) || (propertyName.equals(IAction.IMAGE)); boolean tooltipTextChanged = (propertyName == null) || (propertyName.equals(IAction.TOOL_TIP_TEXT)); boolean enableStateChanged = ((propertyName == null) || (propertyName.equals(IAction.ENABLED))) || (propertyName.equals(IContributionManagerOverrides.P_ENABLED)); boolean checkChanged = (((action.getStyle()) == (IAction.AS_CHECK_BOX)) || ((action.getStyle()) == (IAction.AS_RADIO_BUTTON))) && ((propertyName == null) || (propertyName.equals(IAction.CHECKED))); if ((widget) instanceof org.eclipse.swt.widgets.ToolItem) { org.eclipse.swt.widgets.ToolItem ti = ((org.eclipse.swt.widgets.ToolItem) (widget)); java.lang.String text = action.getText(); boolean showText = (text != null) && ((((getMode()) & (org.eclipse.jface.action.ActionContributionItem.MODE_FORCE_TEXT)) != 0) || (!(hasImages(action)))); if (showText && (text != null)) { text = org.eclipse.jface.action.Action.removeAcceleratorText(text); text = org.eclipse.jface.action.Action.removeMnemonics(text); } if (textChanged) { java.lang.String textToSet = (showText) ? text : ""; boolean rightStyle = ((ti.getParent().getStyle()) & (org.eclipse.swt.SWT.RIGHT)) != 0; if (rightStyle || (!(ti.getText().equals(textToSet)))) { ti.setText(textToSet); } } if (imageChanged) { updateImages((!showText)); } if (tooltipTextChanged || textChanged) { java.lang.String toolTip = action.getToolTipText(); if ((!showText) || ((toolTip != null) && (!(toolTip.equals(text))))) { ti.setToolTipText(action.getToolTipText()); } else { ti.setToolTipText(null); } } if (enableStateChanged) { boolean shouldBeEnabled = (action.isEnabled()) && (isEnabledAllowed()); if ((ti.getEnabled()) != shouldBeEnabled) ti.setEnabled(shouldBeEnabled); } if (checkChanged) { boolean bv = action.isChecked(); if ((ti.getSelection()) != bv) ti.setSelection(bv); } return; } if ((widget) instanceof org.eclipse.swt.widgets.MenuItem) { org.eclipse.swt.widgets.MenuItem mi = ((org.eclipse.swt.widgets.MenuItem) (widget)); if (textChanged) { int accelerator = 0; java.lang.String acceleratorText = null; org.eclipse.jface.action.IAction updatedAction = getAction(); java.lang.String text = null; accelerator = updatedAction.getAccelerator(); org.eclipse.jface.action.ExternalActionManager.ICallback callback = org.eclipse.jface.action.ExternalActionManager.getInstance().getCallback(); if (((accelerator != 0) && (callback != null)) && (callback.isAcceleratorInUse(accelerator))) { accelerator = 0; } java.lang.String commandId = updatedAction.getActionDefinitionId(); if (org.eclipse.swt.SWT.getPlatform().equals("gtk")) { if ((callback != null) && (commandId != null)) { java.lang.Integer commandAccelerator = callback.getAccelerator(commandId); if (commandAccelerator != null) { int accelInt = callback.getAccelerator(commandId).intValue(); if ((accelInt >= (org.eclipse.jface.action.ActionContributionItem.LOWER_GTK_ACCEL_BOUND)) && (accelInt <= (org.eclipse.jface.action.ActionContributionItem.UPPER_GTK_ACCEL_BOUND))) { accelerator = accelInt; acceleratorText = callback.getAcceleratorText(commandId); } } } } if (accelerator == 0) { if ((callback != null) && (commandId != null)) { acceleratorText = callback.getAcceleratorText(commandId); } } else { acceleratorText = org.eclipse.jface.action.Action.convertAccelerator(accelerator); } org.eclipse.jface.action.IContributionManagerOverrides overrides = null; if ((getParent()) != null) overrides = getParent().getOverrides(); if (overrides != null) text = getParent().getOverrides().getText(this); mi.setAccelerator(accelerator); if (text == null) text = updatedAction.getText(); if (text == null) text = ""; else text = org.eclipse.jface.action.Action.removeAcceleratorText(text); if (acceleratorText == null) mi.setText(text); else mi.setText(((text + '\t') + acceleratorText)); } if (imageChanged) updateImages(false); if (enableStateChanged) { boolean shouldBeEnabled = (action.isEnabled()) && (isEnabledAllowed()); if ((mi.getEnabled()) != shouldBeEnabled) mi.setEnabled(shouldBeEnabled); } if (checkChanged) { boolean bv = action.isChecked(); if ((mi.getSelection()) != bv) mi.setSelection(bv); } return; } if ((widget) instanceof org.eclipse.swt.widgets.Button) { org.eclipse.swt.widgets.Button button = ((org.eclipse.swt.widgets.Button) (widget)); if (imageChanged && (updateImages(false))) textChanged = false; if (textChanged) { java.lang.String text = action.getText(); if (text == null) text = ""; else text = org.eclipse.jface.action.Action.removeAcceleratorText(text); button.setText(text); } if (tooltipTextChanged) button.setToolTipText(action.getToolTipText()); if (enableStateChanged) { boolean shouldBeEnabled = (action.isEnabled()) && (isEnabledAllowed()); if ((button.getEnabled()) != shouldBeEnabled) button.setEnabled(shouldBeEnabled); } if (checkChanged) { boolean bv = action.isChecked(); if ((button.getSelection()) != bv) button.setSelection(bv); } return; } } }
static void openProgressView(org.eclipse.ui.internal.WorkbenchWindow window) { org.eclipse.ui.IWorkbenchPage page = window.getActivePage(); if (page == null) return; try { org.eclipse.ui.views.IViewDescriptor reference = org.eclipse.ui.internal.WorkbenchPlugin.getDefault().getViewRegistry().find(IProgressConstants.PROGRESS_VIEW_ID); if (reference == null) return; page.showView(IProgressConstants.PROGRESS_VIEW_ID); } catch (org.eclipse.ui.PartInitException exception) { org.eclipse.ui.internal.progress.ProgressManagerUtil.logException(exception); } }
public boolean isApplicableTo(java.lang.Object object) { boolean result = true; if ((visibilityTest) != null) { result = result && (visibilityTest.isEnabledFor(object)); if (!result) { return result; } } else if ((filterTest) != null) { result = result && (filterTest.matches(object, true)); if (!result) { return result; } } if ((enablement) != null) { try { org.eclipse.core.expressions.IEvaluationContext context = new org.eclipse.core.expressions.EvaluationContext(null, object); context.setAllowPluginActivation(true); context.addVariable("selection", object); context.addVariable("org.eclipse.core.runtime.Platform", org.eclipse.core.runtime.Platform.class); org.eclipse.core.expressions.EvaluationResult evalResult = enablement.evaluate(context); if (evalResult == (org.eclipse.core.expressions.EvaluationResult.FALSE)) { return false; } } catch (org.eclipse.core.runtime.CoreException e) { enablement = null; org.eclipse.ui.internal.WorkbenchPlugin.log(e); result = false; } } return result; }
protected org.eclipse.ui.forms.widgets.Point computeSize(org.eclipse.ui.forms.widgets.Composite parent, int wHint, int hHint, boolean changed) { org.eclipse.ui.forms.widgets.Control[] children = parent.getChildren(); if (changed) { cache.flush(); } if ((children.length) == 0) { return new org.eclipse.ui.forms.widgets.Point(0, 0); } cache.setControls(children); int parentWidth = wHint; changed = true; initializeIfNeeded(parent, changed); if (initialLayout) { changed = true; initialLayout = false; } if (((grid) == null) || changed) { changed = true; grid = new java.util.Vector(); createGrid(parent); } resetColumnWidths(); int minWidth = internalGetMinimumWidth(parent, changed); int maxWidth = internalGetMaximumWidth(parent, changed); if (parentWidth == (org.eclipse.swt.SWT.DEFAULT)) parentWidth = maxWidth; int tableWidth = parentWidth; int[] columnWidths; if (parentWidth <= minWidth) { tableWidth = minWidth; if (makeColumnsEqualWidth) { columnWidths = new int[numColumns]; for (int i = 0; i < (numColumns); i++) { columnWidths[i] = widestColumnWidth; } } else columnWidths = minColumnWidths; } else if (parentWidth > maxWidth) { if (makeColumnsEqualWidth) { columnWidths = new int[numColumns]; int colSpace = (parentWidth - (leftMargin)) - (rightMargin); colSpace -= ((numColumns) - 1) * (horizontalSpacing); int col = colSpace / (numColumns); for (int i = 0; i < (numColumns); i++) { columnWidths[i] = col; } } else { tableWidth = maxWidth; columnWidths = maxColumnWidths; } } else { columnWidths = new int[numColumns]; if (makeColumnsEqualWidth) { int colSpace = (tableWidth - (leftMargin)) - (rightMargin); colSpace -= ((numColumns) - 1) * (horizontalSpacing); int col = colSpace / (numColumns); for (int i = 0; i < (numColumns); i++) { columnWidths[i] = col; } } else { columnWidths = assignExtraSpace(tableWidth, maxWidth, minWidth); } } int totalHeight = 0; int innerHeight = 0; for (int i = 0; i < (grid.size()); i++) { org.eclipse.ui.forms.widgets.TableWrapData[] row = ((org.eclipse.ui.forms.widgets.TableWrapData[]) (grid.elementAt(i))); int rowHeight = 0; for (int j = 0; j < (numColumns); j++) { org.eclipse.ui.forms.widgets.TableWrapData td = row[j]; if ((td.isItemData) == false) { continue; } org.eclipse.ui.forms.widgets.Control child = children[td.childIndex]; int span = td.colspan; int cwidth = 0; for (int k = j; k < (j + span); k++) { if (k > j) cwidth += horizontalSpacing; cwidth += columnWidths[k]; } int cy = td.heightHint; if (cy == (org.eclipse.swt.SWT.DEFAULT)) { org.eclipse.ui.forms.widgets.Point size = computeSize(td.childIndex, cwidth, td.indent, td.maxWidth, td.maxHeight); cy = size.y; } org.eclipse.ui.forms.widgets.TableWrapLayout.RowSpan rowspan = ((org.eclipse.ui.forms.widgets.TableWrapLayout.RowSpan) (rowspans.get(child))); if (rowspan != null) { rowspan.height = cy; } else { rowHeight = java.lang.Math.max(rowHeight, cy); } } updateRowSpans(i, rowHeight); if (i > 0) innerHeight += verticalSpacing; innerHeight += rowHeight; } if (!(rowspans.isEmpty())) innerHeight = compensateForRowSpans(innerHeight); totalHeight = ((topMargin) + innerHeight) + (bottomMargin); return new org.eclipse.ui.forms.widgets.Point(tableWidth, totalHeight); }
public void propertyChange(org.eclipse.jface.util.PropertyChangeEvent event) { java.lang.String propertyName = event.getProperty(); if ((propertyName.equals(IDEInternalPreferences.USE_MARKER_LIMITS)) || (propertyName.equals(IDEInternalPreferences.MARKER_LIMITS_VALUE))) { viewer.refresh(); updateTitle(); } }
private void flushUndo(org.eclipse.core.commands.operations.IUndoContext context) { if (org.eclipse.core.commands.operations.DefaultOperationHistory.DEBUG_OPERATION_HISTORY_DISPOSE) { java.lang.System.out.print("OPERATIONHISTORY >>> Flushing undo history for "); java.lang.System.out.print(context); java.lang.System.out.println(); } java.lang.Object[] filtered = filter(undoList, context); for (int i = 0; i < (filtered.length); i++) { org.eclipse.core.commands.operations.IUndoableOperation operation = ((org.eclipse.core.commands.operations.IUndoableOperation) (filtered[i])); if ((context == (org.eclipse.core.commands.operations.IOperationHistory.GLOBAL_UNDO_CONTEXT)) || ((operation.getContexts().length) == 1)) { undoList.remove(operation); internalRemove(operation); } else { operation.removeContext(context); } } if ((openComposite) != null) { if (openComposite.hasContext(context)) { if ((context == (org.eclipse.core.commands.operations.IOperationHistory.GLOBAL_UNDO_CONTEXT)) || ((openComposite.getContexts().length) == 1)) { notifyNotOK(openComposite); openComposite = null; } else { openComposite.removeContext(context); } } } }
public void dispose() { if ((editor) != null) { editor.dispose(); editor = null; } if ((childEntries) != null) for (int i = 0; i < (childEntries.length); i++) { if ((childEntries[i]) != null) childEntries[i].dispose(); } }
protected org.eclipse.swt.graphics.Point computeSize(org.eclipse.swt.widgets.Composite composite, int wHint, int hHint, boolean changed) { org.eclipse.swt.widgets.Control[] children = composite.getChildren(); if ((children.length) == 0) return new org.eclipse.swt.graphics.Point(0, 0); org.eclipse.swt.graphics.Point innerSize = children[0].computeSize(hHint, wHint, changed); innerSize.x += 4; innerSize.y += 4; org.eclipse.swt.widgets.Control child = children[0]; if ((child instanceof org.eclipse.swt.widgets.ToolBar) && (((((org.eclipse.swt.widgets.ToolBar) (child)).getStyle()) & (org.eclipse.swt.SWT.VERTICAL)) != 0)) innerSize.y += 3; else innerSize.x += 3; return innerSize; }
private void updateStatus(int severity, java.lang.String message) { updateStatus(new org.eclipse.core.runtime.Status(severity, org.eclipse.ui.internal.ide.IDEWorkbenchPlugin.getDefault().getDescriptor().getUniqueIdentifier(), severity, message, null)); }
private void updateDelegate(final org.eclipse.jface.action.IAction action, final org.eclipse.core.expressions.IEvaluationContext context) { if (action == null) { return; } if ((delegate) == null) { if ((!(org.eclipse.ui.internal.util.BundleUtility.isActive(element.getContributor().getName()))) || (!(loadDelegate()))) { return; } } if ((editorDelegate) != null) { final java.lang.Object activeEditor = context.getVariable(ISources.ACTIVE_EDITOR_NAME); if (activeEditor != (org.eclipse.core.expressions.IEvaluationContext.UNDEFINED_VARIABLE)) { editorDelegate.setActiveEditor(action, ((org.eclipse.ui.IEditorPart) (activeEditor))); } updateActivePart((activeEditor == (org.eclipse.core.expressions.IEvaluationContext.UNDEFINED_VARIABLE) ? null : ((org.eclipse.ui.IWorkbenchPart) (activeEditor)))); } else if ((objectDelegate) != null) { final java.lang.Object activePart = context.getVariable(ISources.ACTIVE_PART_NAME); if (activePart != (org.eclipse.core.expressions.IEvaluationContext.UNDEFINED_VARIABLE)) { objectDelegate.setActivePart(action, ((org.eclipse.ui.IWorkbenchPart) (activePart))); } updateActivePart((activePart == (org.eclipse.core.expressions.IEvaluationContext.UNDEFINED_VARIABLE) ? null : ((org.eclipse.ui.IWorkbenchPart) (activePart)))); } final java.lang.Object selectionObject = getCurrentSelection(context); if (selectionObject instanceof org.eclipse.jface.viewers.ISelection) { currentSelection = ((org.eclipse.jface.viewers.ISelection) (selectionObject)); } else { currentSelection = null; } if ((delegate) != null) { delegate.selectionChanged(action, currentSelection); } }
private void appendUserPreferences(java.io.PrintWriter writer) { java.lang.String tmpFile = ".tmpPrefFile"; org.eclipse.core.runtime.IPath path = org.eclipse.core.runtime.Platform.getPluginStateLocation(org.eclipse.ui.internal.ide.IDEWorkbenchPlugin.getDefault()).append(tmpFile); java.io.File file = path.toFile(); file.delete(); try { org.eclipse.core.internal.runtime.PreferenceExporter.exportPreferences(path); } catch (org.eclipse.core.runtime.CoreException e) { writer.println(("Error exporting user preferences " + (e.toString()))); } writer.println(); writer.println(org.eclipse.ui.internal.ide.IDEWorkbenchMessages.getString("SystemSummary.userPreferences")); java.io.BufferedReader reader = null; try { java.io.FileInputStream in = new java.io.FileInputStream(file); reader = new java.io.BufferedReader(new java.io.InputStreamReader(in, "8859_1")); char[] chars = new char[8192]; int read = reader.read(chars); while (read > 0) { writer.write(chars, 0, read); read = reader.read(chars); } reader.close(); reader = null; } catch (java.io.IOException e) { writer.println(("Error reading user preference file " + (e.toString()))); } if (reader != null) { try { reader.close(); } catch (java.io.IOException e) { writer.println(("Error closing user preference file " + (e.toString()))); } } file.delete(); }
@java.lang.Override public void execute() { java.lang.String id = viewDescriptor.getElementId(); if (id != null) { if (CompatibilityPart.COMPATIBILITY_VIEW_URI.equals(viewDescriptor.getContributionURI())) { org.eclipse.ui.IWorkbenchWindow workbenchWindow = window.getContext().get(org.eclipse.ui.IWorkbenchWindow.class); org.eclipse.ui.IWorkbenchPage page = workbenchWindow.getActivePage(); if (page != null) { try { page.showView(viewDescriptor.getElementId()); } catch (org.eclipse.ui.PartInitException e) { org.eclipse.ui.internal.WorkbenchPlugin.log(e); } } } else { org.eclipse.e4.ui.workbench.modeling.EPartService partService = window.getContext().get(org.eclipse.e4.ui.workbench.modeling.EPartService.class); org.eclipse.e4.ui.model.application.ui.basic.MPart part = partService.findPart(id); if (part == null) { org.eclipse.e4.ui.model.application.ui.advanced.MPlaceholder placeholder = partService.createSharedPart(id); part = ((org.eclipse.e4.ui.model.application.ui.basic.MPart) (placeholder.getRef())); } partService.showPart(part, PartState.ACTIVATE); } } }
@java.lang.Override protected void showTab(org.eclipse.e4.ui.model.application.ui.MUIElement tabElement) { org.eclipse.e4.ui.model.application.ui.advanced.MPerspective persp = ((org.eclipse.e4.ui.model.application.ui.advanced.MPerspective) (tabElement)); org.eclipse.swt.widgets.Control ctrl = ((org.eclipse.swt.widgets.Control) (tabElement.getWidget())); if (ctrl == null) { ctrl = ((org.eclipse.swt.widgets.Control) (renderer.createGui(tabElement))); } else if ((ctrl.getParent()) != (tabElement.getParent().getWidget())) { org.eclipse.swt.widgets.Composite parent = ((org.eclipse.swt.widgets.Composite) (tabElement.getParent().getWidget())); ctrl.setParent(parent); } super.showTab(tabElement); org.eclipse.swt.widgets.Composite psComp = ctrl.getParent(); org.eclipse.swt.custom.StackLayout sl = ((org.eclipse.swt.custom.StackLayout) (psComp.getLayout())); if (sl != null) { sl.topControl = ctrl; psComp.layout(); } ctrl.moveAbove(null); if (tabElement instanceof org.eclipse.e4.ui.model.application.ui.advanced.MPerspective) { org.eclipse.e4.core.contexts.IEclipseContext context = persp.getContext(); context.get(org.eclipse.e4.ui.workbench.modeling.EPartService.class).switchPerspective(persp); } org.eclipse.swt.widgets.Control[] kids = ctrl.getParent().getChildren(); org.eclipse.swt.widgets.Shell limbo = ((org.eclipse.swt.widgets.Shell) (persp.getContext().get("limbo"))); for (org.eclipse.swt.widgets.Control child : kids) { if (child != ctrl) { child.setParent(limbo); } } }
public void verifyKey(org.eclipse.swt.events.VerifyEvent event) { org.eclipse.swt.widgets.Widget widget = event.widget; if (widget instanceof org.eclipse.swt.custom.StyledText) { ((org.eclipse.swt.custom.StyledText) (widget)).removeVerifyKeyListener(this); } if (event.doit) { widget.addListener(SWT.Modify, new org.eclipse.ui.internal.keys.CancelOnModifyListener(chainedListener)); widget.addListener(SWT.KeyDown, chainedListener); } }
public java.lang.Object start(org.eclipse.equinox.app.IApplicationContext applicationContext) throws java.lang.Exception { org.eclipse.core.runtime.IProduct product = org.eclipse.core.runtime.Platform.getProduct(); if ((product != null) && ((product.getName()) != null)) { org.eclipse.swt.widgets.Display.setAppName(product.getName()); } org.eclipse.swt.widgets.Display display = getApplicationDisplay(); org.eclipse.osgi.service.datalocation.Location instanceLocation = null; try { org.eclipse.e4.ui.internal.workbench.E4Workbench workbench = createE4Workbench(applicationContext, display); instanceLocation = ((org.eclipse.osgi.service.datalocation.Location) (workbench.getContext().get(E4Workbench.INSTANCE_LOCATION))); org.eclipse.swt.widgets.Shell shell = display.getActiveShell(); if (shell == null) { shell = new org.eclipse.swt.widgets.Shell(); shell.setLocation(0, 10000); } if (!(checkInstanceLocation(instanceLocation, shell))) return org.eclipse.equinox.app.IApplication.EXIT_OK; org.eclipse.e4.core.contexts.IEclipseContext workbenchContext = workbench.getContext(); workbenchContext.set(org.eclipse.swt.widgets.Display.class, display); workbench.createAndRunUI(workbench.getApplication()); if ((lcManager) != null) { org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(lcManager, org.eclipse.e4.ui.workbench.lifecycle.PreSave.class, workbenchContext, null); } saveModel(); workbench.close(); return org.eclipse.equinox.app.IApplication.EXIT_OK; } finally { if (display != null) display.dispose(); if (instanceLocation != null) instanceLocation.release(); } }
private void updateNavigationHistory(org.eclipse.ui.IWorkbenchPartReference partRef, boolean partClosed) { if ((partRef != null) && ((partRef.getPart(false)) instanceof org.eclipse.ui.IEditorPart)) { org.eclipse.ui.IEditorPart editor = ((org.eclipse.ui.IEditorPart) (partRef.getPart(false))); org.eclipse.ui.IEditorInput input = editor.getEditorInput(); java.lang.String id = editor.getSite().getId(); java.util.Iterator e = editors.iterator(); org.eclipse.ui.internal.NavigationHistoryEditorInfo info = null; org.eclipse.ui.internal.NavigationHistoryEditorInfo currentInfo = null; org.eclipse.ui.internal.NavigationHistoryEntry current = getEntry(activeEntry); if (current != null) { currentInfo = current.editorInfo; } while (e.hasNext()) { info = ((org.eclipse.ui.internal.NavigationHistoryEditorInfo) (e.next())); if ((id.equals(info.editorID)) && (input.equals(info.editorInput))) { if (partClosed && (info != currentInfo)) { info.handlePartClosed(); } break; } else { info = null; } } if (info == null) { return; } e = history.iterator(); int i = 0; while (e.hasNext()) { org.eclipse.ui.internal.NavigationHistoryEntry entry = ((org.eclipse.ui.internal.NavigationHistoryEntry) (e.next())); if ((entry.editorInfo) == info) { if (!(entry.handlePartClosed())) { if (i < (activeEntry)) { (activeEntry)--; } else if (i == (activeEntry)) { if (i != 0) { (activeEntry)--; } } else { i++; } e.remove(); disposeEntry(entry); } else { i++; } } } updateActions(); } }
public void postProcess(org.eclipse.e4.ui.model.application.MPart<?> part) { if (!(part instanceof org.eclipse.e4.ui.model.application.MStack)) return; org.eclipse.swt.custom.CTabFolder ctf = ((org.eclipse.swt.custom.CTabFolder) (part.getWidget())); org.eclipse.swt.custom.CTabItem[] items = ctf.getItems(); org.eclipse.e4.ui.model.application.MPart<?> selPart = ((org.eclipse.e4.ui.model.application.MStack) (part)).getActiveChild(); if ((selPart == null) && ((part.getChildren().size()) > 0)) { ((org.eclipse.e4.ui.model.application.MStack) (part)).setActiveChild(((org.eclipse.e4.ui.model.application.MItemPart<?>) (part.getChildren().get(0)))); } else { for (int i = 0; i < (items.length); i++) { org.eclipse.e4.ui.model.application.MPart<?> me = ((org.eclipse.e4.ui.model.application.MPart<?>) (items[i].getData(org.eclipse.e4.workbench.ui.renderers.swt.OWNING_ME))); if (selPart == me) { if ((items[i].getControl()) == null) renderer.createGui(selPart); ctf.setSelection(items[i]); } } } }
public StringFieldEditor(java.lang.String name, java.lang.String labelText, int width, org.eclipse.jface.preference.Composite parent) { this(name, labelText, org.eclipse.jface.preference.StringFieldEditor.UNLIMITED, org.eclipse.jface.preference.StringFieldEditor.VALIDATE_ON_KEY_STROKE, parent); }
public void setFocus() { org.eclipse.ui.IWorkbenchPart part = partReference.getPart(true); org.eclipse.ui.internal.PartStack stack = getStack(); org.eclipse.swt.widgets.Control control = getControl(); if (control.isVisible()) { if (part != null) { if (!(org.eclipse.ui.internal.dnd.SwtUtil.isFocusAncestor(control))) { part.setFocus(); if (!(org.eclipse.ui.internal.dnd.SwtUtil.isFocusAncestor(control))) { if (!(control.setFocus())) { if (stack != null) { org.eclipse.swt.widgets.Control presentation = stack.getControl(); if ((presentation != null) && (!(presentation.isDisposed()))) { presentation.setFocus(); } } } } } } else { control.setFocus(); } } else { control.setFocus(); if (part != null) { part.setFocus(); } } }
private boolean hardClose() { boolean result; try { getActionPresentation().clearActionSets(); final org.eclipse.ui.IWorkbench workbench = getWorkbench(); final org.eclipse.ui.handlers.IHandlerService handlerService = ((org.eclipse.ui.handlers.IHandlerService) (workbench.getService(org.eclipse.ui.handlers.IHandlerService.class))); handlerService.deactivateHandlers(handlerActivations); final java.util.Iterator activationItr = handlerActivations.iterator(); while (activationItr.hasNext()) { final org.eclipse.ui.handlers.IHandlerActivation activation = ((org.eclipse.ui.handlers.IHandlerActivation) (activationItr.next())); activation.getHandler().dispose(); } handlerActivations.clear(); globalActionHandlersByCommandId.clear(); final org.eclipse.ui.contexts.IContextService contextService = ((org.eclipse.ui.contexts.IContextService) (workbench.getService(org.eclipse.ui.contexts.IContextService.class))); contextService.unregisterShell(getShell()); closeAllPages(); fireWindowClosed(); org.eclipse.ui.menus.IMenuService menuService = ((org.eclipse.ui.menus.IMenuService) (workbench.getService(org.eclipse.ui.menus.IMenuService.class))); menuService.releaseContributions(((org.eclipse.jface.action.ContributionManager) (getActionBars().getMenuManager()))); org.eclipse.jface.action.ICoolBarManager coolbar = getActionBars().getCoolBarManager(); if (coolbar != null) { menuService.releaseContributions(((org.eclipse.jface.action.ContributionManager) (coolbar))); } getActionBarAdvisor().dispose(); getWindowAdvisor().dispose(); detachedWindowShells.dispose(); progressRegion = null; org.eclipse.ui.internal.dnd.DragUtil.removeDragTarget(null, trimDropTarget); org.eclipse.ui.internal.dnd.DragUtil.removeDragTarget(getShell(), trimDropTarget); trimDropTarget = null; if ((trimMgr2) != null) { trimMgr2.dispose(); trimMgr2 = null; } if ((trimContributionMgr) != null) { trimContributionMgr.dispose(); trimContributionMgr = null; } } finally { result = super.close(); try { serviceLocator.dispose(); } catch (java.lang.Exception ex) { org.eclipse.ui.internal.WorkbenchPlugin.log(ex); } menuRestrictions.clear(); } return result; }
public Thumbnails(org.eclipse.swt.widgets.Composite parent, final org.eclipse.e4.core.services.context.IEclipseContext outputContext, org.eclipse.e4.core.services.IBackgroundRunner backgroundRunner, org.eclipse.e4.ui.services.IStylingEngine stylingEngine) { this.outputContext = outputContext; this.backgroundRunner = backgroundRunner; this.stylingEngine = stylingEngine; parent.setLayout(new org.eclipse.swt.layout.FillLayout()); gallery = new org.eclipse.nebula.widgets.gallery.Gallery(parent, ((org.eclipse.swt.SWT.V_SCROLL) | (org.eclipse.swt.SWT.MULTI))); gallery.setData("org.eclipse.e4.ui.css.id", "thumbnails"); org.eclipse.swt.graphics.Image itemImage = new org.eclipse.swt.graphics.Image(parent.getDisplay(), org.eclipse.swt.program.Program.findProgram("jpg").getImageData()); gallery.setGroupRenderer(new org.eclipse.nebula.widgets.gallery.NoGroupRenderer()); org.eclipse.nebula.widgets.gallery.DefaultGalleryItemRenderer ir = new org.eclipse.nebula.widgets.gallery.DefaultGalleryItemRenderer(); ir.setShowLabels(false); ir.setDropShadowsSize(0); ir.setShowRoundedSelectionCorners(false); gallery.setItemRenderer(ir); group = new org.eclipse.nebula.widgets.gallery.GalleryItem(gallery, org.eclipse.swt.SWT.NONE); group.setExpanded(true); gallery.addSelectionListener(new org.eclipse.swt.events.SelectionAdapter() { public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { java.lang.Object data = e.item.getData(); outputContext.set(IServiceConstants.SELECTION, data); } }); }
public org.eclipse.ui.IEditorPart openEditorFromDescriptor(org.eclipse.ui.IEditorInput fileEditorInput, org.eclipse.ui.IEditorDescriptor editorDescriptor, final boolean activate, final org.eclipse.ui.IMemento editorState) throws org.eclipse.ui.PartInitException { return openEditor(fileEditorInput, editorDescriptor.getId(), activate, org.eclipse.ui.internal.MATCH_INPUT, editorState); }
public void setProposalPopupFocus() { if ((isValid()) && ((this.popup) != null)) { this.popup.getShell().setFocus(); } }
protected void addItems(org.eclipse.swt.widgets.Table table, org.eclipse.ui.internal.WorkbenchPage page) { org.eclipse.ui.internal.IEditorReference[] refs = page.getSortedEditors(); for (int i = (refs.length) - 1; i >= 0; i--) { org.eclipse.swt.widgets.TableItem item = null; item = new org.eclipse.swt.widgets.TableItem(table, org.eclipse.swt.SWT.NONE); if (refs[i].isDirty()) item.setText(("*" + (refs[i].getTitle()))); else item.setText(refs[i].getTitle()); item.setImage(refs[i].getTitleImage()); item.setData(refs[i]); } }
public void focusGained(org.eclipse.swt.events.FocusEvent e) { if (!(handleNextFocusGained)) { handleNextFocusGained = true; } else { org.eclipse.swt.widgets.Widget w = e.widget; if (w instanceof org.eclipse.swt.widgets.Control) { org.eclipse.ui.internal.forms.widgets.FormUtil.ensureVisible(((org.eclipse.swt.widgets.Control) (w))); } } }
protected java.lang.reflect.Method getMethodToExecute() { final org.eclipse.swt.widgets.Control focusControl = org.eclipse.swt.widgets.Display.getCurrent().getFocusControl(); try { if (focusControl != null) { return focusControl.getClass().getMethod(methodName, org.eclipse.ui.internal.commands.ws.WidgetMethodHandler.NO_PARAMETERS); } } catch (java.lang.NoSuchMethodException e) { } return null; }
private org.eclipse.jface.action.MenuManager createWindowMenu() { org.eclipse.jface.action.MenuManager menu = new org.eclipse.jface.action.MenuManager(IDEWorkbenchMessages.Workbench_window, org.eclipse.ui.IWorkbenchActionConstants.M_WINDOW); menu.add(newWindowAction); menu.add(newEditorAction); org.eclipse.jface.action.ActionContributionItem toggleCoolbarItem = new org.eclipse.jface.action.ActionContributionItem(toggleCoolbarAction); toggleCoolbarItem.setVisible((!("carbon".equals(org.eclipse.swt.SWT.getPlatform())))); menu.add(toggleCoolbarItem); menu.add(new org.eclipse.jface.action.Separator()); addPerspectiveActions(menu); menu.add(new org.eclipse.jface.action.Separator()); addKeyboardShortcuts(menu); menu.add(new org.eclipse.jface.action.Separator(org.eclipse.ui.IWorkbenchActionConstants.MB_ADDITIONS)); org.eclipse.jface.action.ActionContributionItem openPreferencesItem = new org.eclipse.jface.action.ActionContributionItem(openPreferencesAction); openPreferencesItem.setVisible((!("carbon".equals(org.eclipse.swt.SWT.getPlatform())))); menu.add(openPreferencesItem); menu.add(ContributionItemFactory.OPEN_WINDOWS.create(getWindow())); return menu; }
public java.lang.Object createWidget(org.eclipse.e4.ui.model.application.ui.MUIElement element, java.lang.Object parent) { if ((!(element instanceof org.eclipse.e4.ui.model.application.ui.basic.MPartStack)) || (!(parent instanceof org.eclipse.swt.widgets.Composite))) return null; org.eclipse.swt.widgets.Composite parentComposite = ((org.eclipse.swt.widgets.Composite) (parent)); if (((element.getElementId()) == null) || ((element.getElementId().length()) == 0)) { java.lang.String generatedId = "PartStack@" + (java.lang.Integer.toHexString(element.hashCode())); element.setElementId(generatedId); } final org.eclipse.e4.ui.widgets.CTabFolder ctf = new org.eclipse.e4.ui.widgets.CTabFolder(parentComposite, org.eclipse.swt.SWT.BORDER); int location = modelService.getElementLocation(element); if ((location & (org.eclipse.e4.ui.workbench.modeling.EModelService.IN_SHARED_AREA)) != 0) { ctf.setMinimumCharacters(org.eclipse.e4.ui.workbench.renderers.swt.StackRenderer.MIN_EDITOR_CHARS); ctf.setUnselectedCloseVisible(true); } else { ctf.setMinimumCharacters(org.eclipse.e4.ui.workbench.renderers.swt.StackRenderer.MIN_VIEW_CHARS); ctf.setUnselectedCloseVisible(false); } bindWidget(element, ctf); addTopRight(ctf); return ctf; }
private final void checkWindowType(final org.eclipse.swt.widgets.Shell newShell, final org.eclipse.swt.widgets.Shell oldShell) { if (newShell != oldShell) { java.util.Collection oldActivations = ((java.util.Collection) (registeredWindows.get(oldShell))); if (oldActivations == null) { oldActivations = ((java.util.Collection) (registeredWindows.get(null))); if (oldActivations != null) { final java.util.Iterator oldActivationItr = oldActivations.iterator(); while (oldActivationItr.hasNext()) { final org.eclipse.ui.contexts.IContextActivation activation = ((org.eclipse.ui.contexts.IContextActivation) (oldActivationItr.next())); deactivateContext(activation); } } } if ((newShell != null) && (!(newShell.isDisposed()))) { final java.util.Collection newActivations; if (((newShell.getParent()) != null) && ((registeredWindows.get(newShell)) == null)) { newActivations = new java.util.ArrayList(); final org.eclipse.core.expressions.Expression expression = new org.eclipse.ui.ActiveShellExpression(newShell); final org.eclipse.ui.contexts.IContextActivation dialogWindowActivation = new org.eclipse.ui.internal.contexts.ContextActivation(org.eclipse.ui.contexts.IContextService.CONTEXT_ID_DIALOG_AND_WINDOW, expression, org.eclipse.ui.ActiveShellExpression.SOURCES, contextService); activateContext(dialogWindowActivation); newActivations.add(dialogWindowActivation); final org.eclipse.ui.contexts.IContextActivation dialogActivation = new org.eclipse.ui.internal.contexts.ContextActivation(org.eclipse.ui.contexts.IContextService.CONTEXT_ID_DIALOG, expression, org.eclipse.ui.ActiveShellExpression.SOURCES, contextService); activateContext(dialogActivation); newActivations.add(dialogActivation); registeredWindows.put(null, newActivations); newShell.addDisposeListener(new org.eclipse.swt.events.DisposeListener() { public void widgetDisposed(org.eclipse.swt.events.DisposeEvent e) { registeredWindows.remove(null); newShell.removeDisposeListener(this); final java.util.Iterator newActivationItr = newActivations.iterator(); while (newActivationItr.hasNext()) { deactivateContext(((org.eclipse.ui.contexts.IContextActivation) (newActivationItr.next()))); } } }); } else { newActivations = null; } } } }
private void filterKeySequenceBindings(org.eclipse.swt.widgets.Event event) { if (((event.keyCode) & (org.eclipse.swt.SWT.MODIFIER_MASK)) != 0) return; java.util.List keyStrokes = org.eclipse.ui.internal.keys.WorkbenchKeyboard.generatePossibleKeyStrokes(event); if (org.eclipse.ui.internal.keys.WorkbenchKeyboard.isOutOfOrderKey(keyStrokes)) { org.eclipse.swt.widgets.Widget widget = event.widget; if ((((event.character) == (org.eclipse.swt.SWT.DEL)) && (((event.stateMask) & (org.eclipse.swt.SWT.MODIFIER_MASK)) == 0)) && ((widget instanceof org.eclipse.swt.widgets.Text) || (widget instanceof org.eclipse.swt.widgets.Combo))) { return; } else if (widget instanceof org.eclipse.swt.custom.StyledText) { if ((event.type) == (org.eclipse.swt.SWT.KeyDown)) { ((org.eclipse.swt.custom.StyledText) (widget)).addVerifyKeyListener(new org.eclipse.ui.internal.keys.OutOfOrderVerifyListener(new org.eclipse.ui.internal.keys.OutOfOrderListener(this))); } } else { widget.addListener(event.type, new org.eclipse.ui.internal.keys.OutOfOrderListener(this)); } } else { processKeyEvent(keyStrokes, event); } }
public void dispose() { if ((contentService) != null) { contentService.dispose(); } clearSelectionCache(); }
protected void fixZOrder(org.eclipse.e4.ui.model.application.ui.MUIElement element) { org.eclipse.e4.ui.model.application.ui.MElementContainer<org.eclipse.e4.ui.model.application.ui.MUIElement> parent = element.getParent(); if (parent == null) { java.lang.Object container = ((org.eclipse.emf.ecore.EObject) (element)).eContainer(); if (container instanceof org.eclipse.e4.ui.model.application.ui.MElementContainer<?>) { parent = ((org.eclipse.e4.ui.model.application.ui.MElementContainer<org.eclipse.e4.ui.model.application.ui.MUIElement>) (container)); } } if ((parent == null) || (!((element.getWidget()) instanceof org.eclipse.swt.widgets.Control))) return; org.eclipse.swt.widgets.Control elementCtrl = ((org.eclipse.swt.widgets.Control) (element.getWidget())); org.eclipse.swt.widgets.Control prevCtrl = null; for (org.eclipse.e4.ui.model.application.ui.MUIElement kid : parent.getChildren()) { if (kid == element) { if (prevCtrl != null) elementCtrl.moveBelow(prevCtrl); else elementCtrl.moveAbove(null); break; } else if (((kid.getWidget()) instanceof org.eclipse.swt.widgets.Control) && (kid.isVisible())) { prevCtrl = ((org.eclipse.swt.widgets.Control) (kid.getWidget())); } } java.lang.Object widget = parent.getWidget(); if (widget instanceof org.eclipse.swt.widgets.Composite) { org.eclipse.swt.widgets.Composite composite = ((org.eclipse.swt.widgets.Composite) (widget)); if ((composite.getShell()) == (elementCtrl.getShell())) { org.eclipse.swt.widgets.Composite temp = elementCtrl.getParent(); while (temp != composite) { if (temp == null) { return; } temp = temp.getParent(); } composite.layout(true, true); } } }
public final boolean executeCommand(final org.eclipse.core.commands.ParameterizedCommand parameterizedCommand, final org.eclipse.swt.widgets.Event trigger) throws org.eclipse.core.commands.common.CommandException { resetState(false); final org.eclipse.e4.core.commands.EHandlerService handlerService = getHandlerService(); final org.eclipse.core.commands.Command command = parameterizedCommand.getCommand(); final org.eclipse.e4.core.contexts.IEclipseContext staticContext = org.eclipse.e4.core.contexts.EclipseContextFactory.create("keys-staticContext"); staticContext.set(org.eclipse.swt.widgets.Event.class, trigger); final boolean commandDefined = command.isDefined(); boolean commandHandled = false; try { java.lang.Object obj = org.eclipse.e4.core.commands.internal.HandlerServiceImpl.lookUpHandler(context, command.getId()); if (obj != null) { if (obj instanceof org.eclipse.core.commands.IHandler) { commandHandled = ((org.eclipse.core.commands.IHandler) (obj)).isHandled(); } else { commandHandled = true; } } try { handlerService.executeHandler(parameterizedCommand, staticContext); } catch (final java.lang.Exception e) { commandHandled = false; if ((logger) != null) { logger.error(e); } } if ((keyAssistDialog) != null) { keyAssistDialog.clearRememberedState(); } } finally { staticContext.dispose(); } return commandDefined && commandHandled; }
void drawTabHeader(org.eclipse.swt.graphics.GC gc, org.eclipse.swt.graphics.Rectangle bounds, int state) { boolean onBottom = (parent.getTabPosition()) == (org.eclipse.swt.SWT.BOTTOM); int[] points = new int[1024]; int index = 0; int radius = (cornerSize) / 2; int marginWidth = parent.marginWidth; int marginHeight = parent.marginHeight; int delta = (((org.eclipse.e4.ui.workbench.renderers.swt.CTabRendering.INNER_KEYLINE) + (org.eclipse.e4.ui.workbench.renderers.swt.CTabRendering.OUTER_KEYLINE)) + (2 * (shadowEnabled ? org.eclipse.e4.ui.workbench.renderers.swt.CTabRendering.SIDE_DROP_WIDTH : 0))) + (2 * marginWidth); int width = (bounds.width) - delta; int height = ((((bounds.height) - (org.eclipse.e4.ui.workbench.renderers.swt.CTabRendering.INNER_KEYLINE)) - (org.eclipse.e4.ui.workbench.renderers.swt.CTabRendering.OUTER_KEYLINE)) - (2 * marginHeight)) - (shadowEnabled ? org.eclipse.e4.ui.workbench.renderers.swt.CTabRendering.BOTTOM_DROP_WIDTH : 0); int circX = ((bounds.x) + (delta / 2)) + radius; int circY = (bounds.y) + radius; org.eclipse.swt.graphics.Region clipping = new org.eclipse.swt.graphics.Region(); gc.getClipping(clipping); org.eclipse.swt.graphics.Region region = new org.eclipse.swt.graphics.Region(); region.add(shape); region.intersect(clipping); gc.setClipping(region); int header = (shadowEnabled) ? onBottom ? 6 : 3 : 0; org.eclipse.swt.graphics.Rectangle trim = computeTrim(org.eclipse.e4.ui.workbench.renderers.swt.PART_HEADER, state, 0, 0, 0, 0); trim.width = (bounds.width) - (trim.width); trim.height = (((parent.getTabHeight()) + 1) + header) - (trim.height); trim.x = -(trim.x); trim.y = (onBottom) ? (((bounds.height) - (parent.getTabHeight())) - 1) - header : -(trim.y); draw(org.eclipse.e4.ui.workbench.renderers.swt.PART_BACKGROUND, SWT.NONE, trim, gc); gc.setClipping(clipping); clipping.dispose(); region.dispose(); int[] ltt = org.eclipse.e4.ui.workbench.renderers.swt.CTabRendering.drawCircle((circX + 1), (circY + 1), radius, org.eclipse.e4.ui.workbench.renderers.swt.CTabRendering.LEFT_TOP); java.lang.System.arraycopy(ltt, 0, points, index, ltt.length); index += ltt.length; int[] lbb = org.eclipse.e4.ui.workbench.renderers.swt.CTabRendering.drawCircle((circX + 1), (((circY + height) - (radius * 2)) - 2), radius, org.eclipse.e4.ui.workbench.renderers.swt.CTabRendering.LEFT_BOTTOM); java.lang.System.arraycopy(lbb, 0, points, index, lbb.length); index += lbb.length; int[] rb = org.eclipse.e4.ui.workbench.renderers.swt.CTabRendering.drawCircle((((circX + width) - (radius * 2)) - 2), (((circY + height) - (radius * 2)) - 2), radius, org.eclipse.e4.ui.workbench.renderers.swt.CTabRendering.RIGHT_BOTTOM); java.lang.System.arraycopy(rb, 0, points, index, rb.length); index += rb.length; int[] rt = org.eclipse.e4.ui.workbench.renderers.swt.CTabRendering.drawCircle((((circX + width) - (radius * 2)) - 2), (circY + 1), radius, org.eclipse.e4.ui.workbench.renderers.swt.CTabRendering.RIGHT_TOP); java.lang.System.arraycopy(rt, 0, points, index, rt.length); index += rt.length; points[(index++)] = points[0]; points[(index++)] = points[1]; int[] tempPoints = new int[index]; java.lang.System.arraycopy(points, 0, tempPoints, 0, index); if ((outerKeyline) == null) outerKeyline = gc.getDevice().getSystemColor(SWT.COLOR_BLACK); gc.setForeground(outerKeyline); gc.drawPolyline(shape); }
private void updateActiveWorkbenchWindowMenuManager(boolean textOnly) { if ((activeWorkbenchWindow) != null) { activeWorkbenchWindow.removeActionSetsListener(actionSetSourceProvider); activeWorkbenchWindow = null; } boolean actionSetsUpdated = false; final org.eclipse.ui.IWorkbenchWindow workbenchWindow = getActiveWorkbenchWindow(); if (workbenchWindow instanceof org.eclipse.ui.internal.WorkbenchWindow) { activeWorkbenchWindow = ((org.eclipse.ui.internal.WorkbenchWindow) (workbenchWindow)); if (activeWorkbenchWindow.isClosing()) { return; } final org.eclipse.swt.widgets.Shell windowShell = activeWorkbenchWindow.getShell(); final org.eclipse.swt.widgets.Shell activeShell = getDisplay().getActiveShell(); final org.eclipse.ui.contexts.IContextService service = ((org.eclipse.ui.contexts.IContextService) (getService(org.eclipse.ui.contexts.IContextService.class))); if ((org.eclipse.ui.internal.util.Util.equals(windowShell, activeShell)) || ((service.getShellType(activeShell)) == (org.eclipse.ui.contexts.IContextService.TYPE_WINDOW))) { activeWorkbenchWindow.addActionSetsListener(actionSetSourceProvider); final org.eclipse.ui.internal.WorkbenchPage page = activeWorkbenchWindow.getActiveWorkbenchPage(); final org.eclipse.ui.internal.registry.IActionSetDescriptor[] newActionSets; if (page != null) { newActionSets = page.getActionSets(); final org.eclipse.ui.internal.ActionSetsEvent event = new org.eclipse.ui.internal.ActionSetsEvent(newActionSets); actionSetSourceProvider.actionSetsChanged(event); actionSetsUpdated = true; } } final org.eclipse.jface.action.MenuManager menuManager = activeWorkbenchWindow.getMenuManager(); if (textOnly) { menuManager.update(IAction.TEXT); } else { menuManager.updateAll(true); } } if (!actionSetsUpdated) { final org.eclipse.ui.internal.ActionSetsEvent event = new org.eclipse.ui.internal.ActionSetsEvent(null); actionSetSourceProvider.actionSetsChanged(event); } }
protected void performDefaults() { org.eclipse.jface.preference.IPreferenceStore store = getPreferenceStore(); stickyCycleButton.setSelection(store.getBoolean(IPreferenceConstants.STICKY_CYCLE)); openOnSingleClick = store.getDefaultBoolean(IPreferenceConstants.OPEN_ON_SINGLE_CLICK); selectOnHover = store.getDefaultBoolean(IPreferenceConstants.SELECT_ON_HOVER); openAfterDelay = store.getDefaultBoolean(IPreferenceConstants.OPEN_AFTER_DELAY); singleClickButton.setSelection(openOnSingleClick); doubleClickButton.setSelection((!(openOnSingleClick))); selectOnHoverButton.setSelection(selectOnHover); openAfterDelayButton.setSelection(openAfterDelay); selectOnHoverButton.setEnabled(openOnSingleClick); openAfterDelayButton.setEnabled(openOnSingleClick); stickyCycleButton.setSelection(store.getDefaultBoolean(IPreferenceConstants.STICKY_CYCLE)); showUserDialogButton.setSelection(store.getDefaultBoolean(IPreferenceConstants.RUN_IN_BACKGROUND)); super.performDefaults(); }
public void init(org.eclipse.ui.wizards.datatransfer.IWorkbench workbench, org.eclipse.jface.viewers.IStructuredSelection currentSelection) { this.workbench = workbench; selection = currentSelection; if ((currentSelection.isEmpty()) && ((workbench.getActiveWorkbenchWindow()) != null)) { org.eclipse.ui.wizards.datatransfer.IWorkbenchPage page = workbench.getActiveWorkbenchWindow().getActivePage(); if (page != null) { org.eclipse.ui.wizards.datatransfer.IEditorPart currentEditor = page.getActiveEditor(); if (currentEditor != null) { java.lang.Object selectedResource = currentEditor.getEditorInput().getAdapter(org.eclipse.core.resources.IResource.class); if (selectedResource != null) selection = new org.eclipse.jface.viewers.StructuredSelection(selectedResource); } } } setWindowTitle(org.eclipse.ui.wizards.datatransfer.DataTransferMessages.getString("DataTransfer.export")); setDefaultPageImageDescriptor(getImageDescriptor("wizban/exportdir_wiz.gif")); setNeedsProgressMonitor(true); }
protected void fillCoolBar(org.eclipse.jface.action.ICoolBarManager coolBar) { org.eclipse.ui.internal.provisional.application.IActionBarConfigurer2 actionBarConfigurer = ((org.eclipse.ui.internal.provisional.application.IActionBarConfigurer2) (getActionBarConfigurer())); { org.eclipse.jface.action.IMenuManager popUpMenu = new org.eclipse.jface.action.MenuManager(); popUpMenu.add(new org.eclipse.jface.action.ActionContributionItem(lockToolBarAction)); popUpMenu.add(new org.eclipse.jface.action.ActionContributionItem(editActionSetAction)); popUpMenu.add(new org.eclipse.jface.action.ActionContributionItem(toggleCoolbarAction)); coolBar.setContextMenuManager(popUpMenu); } coolBar.add(new org.eclipse.jface.action.GroupMarker(org.eclipse.ui.ide.IIDEActionConstants.GROUP_FILE)); { org.eclipse.jface.action.IToolBarManager fileToolBar = actionBarConfigurer.createToolBarManager(); fileToolBar.add(new org.eclipse.jface.action.Separator(org.eclipse.ui.IWorkbenchActionConstants.NEW_GROUP)); fileToolBar.add(newWizardDropDownAction); fileToolBar.add(new org.eclipse.jface.action.GroupMarker(org.eclipse.ui.IWorkbenchActionConstants.NEW_EXT)); fileToolBar.add(new org.eclipse.jface.action.GroupMarker(org.eclipse.ui.IWorkbenchActionConstants.SAVE_GROUP)); fileToolBar.add(saveAction); fileToolBar.add(new org.eclipse.jface.action.GroupMarker(org.eclipse.ui.IWorkbenchActionConstants.SAVE_EXT)); fileToolBar.add(printAction); fileToolBar.add(new org.eclipse.jface.action.GroupMarker(org.eclipse.ui.IWorkbenchActionConstants.PRINT_EXT)); fileToolBar.add(new org.eclipse.jface.action.Separator(org.eclipse.ui.IWorkbenchActionConstants.BUILD_GROUP)); fileToolBar.add(new org.eclipse.jface.action.GroupMarker(org.eclipse.ui.IWorkbenchActionConstants.BUILD_EXT)); fileToolBar.add(new org.eclipse.jface.action.Separator(org.eclipse.ui.IWorkbenchActionConstants.MB_ADDITIONS)); coolBar.add(actionBarConfigurer.createToolBarContributionItem(fileToolBar, IWorkbenchActionConstants.TOOLBAR_FILE)); } coolBar.add(new org.eclipse.jface.action.GroupMarker(org.eclipse.ui.IWorkbenchActionConstants.MB_ADDITIONS)); coolBar.add(new org.eclipse.jface.action.GroupMarker(org.eclipse.ui.ide.IIDEActionConstants.GROUP_NAV)); { org.eclipse.jface.action.IToolBarManager navToolBar = actionBarConfigurer.createToolBarManager(); navToolBar.add(new org.eclipse.jface.action.Separator(org.eclipse.ui.IWorkbenchActionConstants.HISTORY_GROUP)); navToolBar.add(new org.eclipse.jface.action.GroupMarker(org.eclipse.ui.IWorkbenchActionConstants.GROUP_APP)); navToolBar.add(backwardHistoryAction); navToolBar.add(forwardHistoryAction); navToolBar.add(new org.eclipse.jface.action.Separator(org.eclipse.ui.IWorkbenchActionConstants.PIN_GROUP)); navToolBar.add(pinEditorContributionItem); coolBar.add(actionBarConfigurer.createToolBarContributionItem(navToolBar, IWorkbenchActionConstants.TOOLBAR_NAVIGATE)); } coolBar.add(new org.eclipse.jface.action.GroupMarker(org.eclipse.ui.IWorkbenchActionConstants.GROUP_EDITOR)); coolBar.add(new org.eclipse.jface.action.GroupMarker(org.eclipse.ui.IWorkbenchActionConstants.GROUP_HELP)); { org.eclipse.jface.action.IToolBarManager helpToolBar = actionBarConfigurer.createToolBarManager(); helpToolBar.add(new org.eclipse.jface.action.Separator(org.eclipse.ui.IWorkbenchActionConstants.GROUP_HELP)); helpToolBar.add(new org.eclipse.jface.action.GroupMarker(org.eclipse.ui.IWorkbenchActionConstants.GROUP_APP)); coolBar.add(actionBarConfigurer.createToolBarContributionItem(helpToolBar, IWorkbenchActionConstants.TOOLBAR_HELP)); } }
@java.lang.Override public java.lang.Object compute(org.eclipse.e4.core.contexts.IEclipseContext context) { org.eclipse.e4.ui.services.internal.events.EventBroker broker = context.getLocal(org.eclipse.e4.ui.services.internal.events.EventBroker.class); if (broker == null) { broker = org.eclipse.e4.core.contexts.ContextInjectionFactory.make(org.eclipse.e4.ui.services.internal.events.EventBroker.class, context); context.set(org.eclipse.e4.ui.services.internal.events.EventBroker.class, broker); } return broker; }
protected void createInfoArea(org.eclipse.swt.widgets.Composite parent) { org.eclipse.swt.graphics.Font font = parent.getFont(); infoArea = new org.eclipse.swt.widgets.Composite(parent, org.eclipse.swt.SWT.NULL); org.eclipse.swt.layout.GridData data = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL, org.eclipse.swt.layout.GridData.CENTER, true, false); data.heightHint = convertVerticalDLUsToPixels(org.eclipse.ui.internal.dialogs.AboutFeaturesDialog.INFO_HEIGHT); infoArea.setLayoutData(data); org.eclipse.swt.layout.GridLayout layout = new org.eclipse.swt.layout.GridLayout(); layout.numColumns = 2; infoArea.setLayout(layout); imageLabel = new org.eclipse.swt.widgets.Label(infoArea, org.eclipse.swt.SWT.NONE); data = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL, org.eclipse.swt.layout.GridData.BEGINNING, false, false); data.widthHint = 32; data.heightHint = 32; imageLabel.setLayoutData(data); imageLabel.setFont(font); text = new org.eclipse.swt.custom.StyledText(infoArea, ((org.eclipse.swt.SWT.MULTI) | (org.eclipse.swt.SWT.READ_ONLY))); text.setCaret(null); text.setFont(parent.getFont()); data = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL, org.eclipse.swt.layout.GridData.BEGINNING, true, true); text.setLayoutData(data); text.setFont(font); text.setCursor(null); text.setBackground(infoArea.getBackground()); addListeners(text); org.eclipse.swt.widgets.TableItem[] items = table.getSelection(); if ((items.length) > 0) updateInfoArea(((org.eclipse.ui.internal.about.AboutBundleGroupData) (items[0].getData()))); }
public void update(boolean force, boolean hideTopTrim) { teardown(); for (int i = 0; i < (trimAreaURIs.length); i++) { if (hideTopTrim && ((swtSides[i]) == (org.eclipse.swt.SWT.TOP))) continue; java.util.List contribs = menuService.getAdditionsForURI(new org.eclipse.ui.internal.menus.MenuLocationURI(trimAreaURIs[i])); for (java.util.Iterator cacheIter = contribs.iterator(); cacheIter.hasNext();) { org.eclipse.ui.internal.menus.MenuAdditionCacheEntry cache = ((org.eclipse.ui.internal.menus.MenuAdditionCacheEntry) (cacheIter.next())); org.eclipse.ui.internal.menus.ContributionRoot ciList = new org.eclipse.ui.internal.menus.ContributionRoot(menuService, restrictionExpression, cache.getNamespace()); cache.createContributionItems(wbWindow, ciList); contributedLists.add(ciList); for (java.util.Iterator ciIter = ciList.getItems().iterator(); ciIter.hasNext();) { org.eclipse.jface.action.IContributionItem ci = ((org.eclipse.jface.action.IContributionItem) (ciIter.next())); if (ci instanceof org.eclipse.jface.action.ToolBarContributionItem) { org.eclipse.ui.internal.menus.TrimContributionManager.ToolBarTrimProxy tbProxy = new org.eclipse.ui.internal.menus.TrimContributionManager.ToolBarTrimProxy(ci.getId(), wbWindow); tbProxy.dock(swtSides[i]); org.eclipse.ui.internal.layout.IWindowTrim insertBefore = null; if (i == 0) { insertBefore = layout.getTrim("org.eclipse.ui.internal.WorkbenchWindow.topBar"); } layout.addTrim(swtSides[i], tbProxy, insertBefore); contributedTrim.add(tbProxy); } } } } }
protected void handleOpenEvent(org.eclipse.jface.viewers.OpenEvent event) { if (openAction.isEnabled()) openAction.run(); }
private org.eclipse.core.runtime.IStatus reportAndInterpretStatus(org.eclipse.core.runtime.IStatus status, org.eclipse.core.runtime.IAdaptable uiInfo, org.eclipse.core.commands.operations.IUndoableOperation operation, int doing) { if (org.eclipse.ui.internal.operations.AdvancedValidationUserApprover.AUTOMATED_MODE) { if ((status.getSeverity()) == (org.eclipse.core.runtime.IStatus.WARNING)) { return org.eclipse.core.runtime.Status.OK_STATUS; } return status; } if ((status.getSeverity()) == (org.eclipse.core.runtime.IStatus.CANCEL)) { return status; } boolean createdShell = false; org.eclipse.core.runtime.IStatus reportedStatus = status; org.eclipse.swt.widgets.Shell shell = getShell(uiInfo); if (shell == null) { createdShell = true; shell = new org.eclipse.swt.widgets.Shell(); } if (!((status.getSeverity()) == (org.eclipse.core.runtime.IStatus.ERROR))) { java.lang.String warning; java.lang.String title; switch (doing) { case org.eclipse.ui.internal.operations.AdvancedValidationUserApprover.UNDOING : warning = org.eclipse.ui.internal.WorkbenchMessages.Operations_proceedWithNonOKUndoStatus; if ((status.getSeverity()) == (org.eclipse.core.runtime.IStatus.INFO)) { title = org.eclipse.ui.internal.WorkbenchMessages.Operations_undoInfo; } else { title = org.eclipse.ui.internal.WorkbenchMessages.Operations_undoWarning; } break; case org.eclipse.ui.internal.operations.AdvancedValidationUserApprover.REDOING : warning = org.eclipse.ui.internal.WorkbenchMessages.Operations_proceedWithNonOKRedoStatus; if ((status.getSeverity()) == (org.eclipse.core.runtime.IStatus.INFO)) { title = org.eclipse.ui.internal.WorkbenchMessages.Operations_redoInfo; } else { title = org.eclipse.ui.internal.WorkbenchMessages.Operations_redoWarning; } break; default : warning = org.eclipse.ui.internal.WorkbenchMessages.Operations_proceedWithNonOKExecuteStatus; if ((status.getSeverity()) == (org.eclipse.core.runtime.IStatus.INFO)) { title = org.eclipse.ui.internal.WorkbenchMessages.Operations_executeInfo; } else { title = org.eclipse.ui.internal.WorkbenchMessages.Operations_executeWarning; } break; } java.lang.String message = org.eclipse.osgi.util.NLS.bind(warning, new java.lang.Object[]{ status.getMessage(), operation.getLabel() }); java.lang.String[] buttons = new java.lang.String[]{ org.eclipse.jface.dialogs.IDialogConstants.YES_LABEL, org.eclipse.jface.dialogs.IDialogConstants.NO_LABEL }; org.eclipse.jface.dialogs.MessageDialog dialog = new org.eclipse.jface.dialogs.MessageDialog(shell, title, null, message, org.eclipse.jface.dialogs.MessageDialog.WARNING, buttons, 0); int dialogAnswer = dialog.open(); if (dialogAnswer == (org.eclipse.jface.window.Window.OK)) { reportedStatus = org.eclipse.core.runtime.Status.OK_STATUS; } else { reportedStatus = org.eclipse.core.runtime.Status.CANCEL_STATUS; } } else { java.lang.String title; java.lang.String stopped; switch (doing) { case org.eclipse.ui.internal.operations.AdvancedValidationUserApprover.UNDOING : title = org.eclipse.ui.internal.WorkbenchMessages.Operations_undoProblem; stopped = org.eclipse.ui.internal.WorkbenchMessages.Operations_stoppedOnUndoErrorStatus; break; case org.eclipse.ui.internal.operations.AdvancedValidationUserApprover.REDOING : title = org.eclipse.ui.internal.WorkbenchMessages.Operations_redoProblem; stopped = org.eclipse.ui.internal.WorkbenchMessages.Operations_stoppedOnRedoErrorStatus; break; default : title = org.eclipse.ui.internal.WorkbenchMessages.Operations_executeProblem; stopped = org.eclipse.ui.internal.WorkbenchMessages.Operations_stoppedOnExecuteErrorStatus; break; } java.lang.String message = org.eclipse.osgi.util.NLS.bind(stopped, status.getMessage(), operation.getLabel()); org.eclipse.jface.dialogs.MessageDialog dialog = new org.eclipse.jface.dialogs.MessageDialog(shell, title, null, message, org.eclipse.jface.dialogs.MessageDialog.WARNING, new java.lang.String[]{ org.eclipse.jface.dialogs.IDialogConstants.OK_LABEL }, 0); dialog.open(); } if (createdShell) { shell.dispose(); } return reportedStatus; }
public void handleEvent(org.eclipse.swt.widgets.Event e) { if (!(isValid())) { return; } char key = e.character; if ((e.type) == (org.eclipse.swt.SWT.Traverse)) { if (key != 0) { e.doit = false; return; } e.detail = org.eclipse.swt.SWT.TRAVERSE_NONE; e.doit = true; } else { e.doit = propagateKeys; } if (key == 0) { int newSelection = proposalTable.getSelectionIndex(); int visibleRows = ((proposalTable.getSize().y) / (proposalTable.getItemHeight())) - 1; switch (e.keyCode) { case org.eclipse.swt.SWT.ARROW_UP : newSelection -= 1; if (newSelection < 0) { newSelection = (proposalTable.getItemCount()) - 1; } if ((e.type) == (org.eclipse.swt.SWT.KeyDown)) { e.doit = false; } break; case org.eclipse.swt.SWT.ARROW_DOWN : newSelection += 1; if (newSelection > ((proposalTable.getItemCount()) - 1)) { newSelection = 0; } if ((e.type) == (org.eclipse.swt.SWT.KeyDown)) { e.doit = false; } break; case org.eclipse.swt.SWT.PAGE_DOWN : newSelection += visibleRows; if (newSelection >= (proposalTable.getItemCount())) { newSelection = (proposalTable.getItemCount()) - 1; } if ((e.type) == (org.eclipse.swt.SWT.KeyDown)) { e.doit = false; } break; case org.eclipse.swt.SWT.PAGE_UP : newSelection -= visibleRows; if (newSelection < 0) { newSelection = 0; } if ((e.type) == (org.eclipse.swt.SWT.KeyDown)) { e.doit = false; } break; case org.eclipse.swt.SWT.HOME : newSelection = 0; if ((e.type) == (org.eclipse.swt.SWT.KeyDown)) { e.doit = false; } break; case org.eclipse.swt.SWT.END : newSelection = (proposalTable.getItemCount()) - 1; if ((e.type) == (org.eclipse.swt.SWT.KeyDown)) { e.doit = false; } break; case org.eclipse.swt.SWT.ARROW_LEFT : case org.eclipse.swt.SWT.ARROW_RIGHT : if ((e.type) == (org.eclipse.swt.SWT.Traverse)) { e.doit = false; } else { e.doit = true; java.lang.String contents = getControlContentAdapter().getControlContents(getControl()); if ((contents.length()) > 0) { asyncRecomputeProposals(filterText); } } break; default : if (((((((e.keyCode) != (org.eclipse.swt.SWT.CAPS_LOCK)) && ((e.keyCode) != (org.eclipse.swt.SWT.NUM_LOCK))) && ((e.keyCode) != (org.eclipse.swt.SWT.MOD1))) && ((e.keyCode) != (org.eclipse.swt.SWT.MOD2))) && ((e.keyCode) != (org.eclipse.swt.SWT.MOD3))) && ((e.keyCode) != (org.eclipse.swt.SWT.MOD4))) { close(); } return; } if (newSelection >= 0) { selectProposal(newSelection); } return; } switch (key) { case org.eclipse.swt.SWT.ESC : e.doit = false; close(); break; case org.eclipse.swt.SWT.LF : case org.eclipse.swt.SWT.CR : e.doit = false; java.lang.Object p = getSelectedProposal(); if (p != null) { acceptCurrentProposal(); } else { close(); } break; case org.eclipse.swt.SWT.TAB : e.doit = false; getShell().setFocus(); return; case org.eclipse.swt.SWT.BS : if ((filterStyle) != (org.eclipse.jface.fieldassist.ContentProposalAdapter.FILTER_NONE)) { if ((filterText.length()) == 0) { return; } filterText = filterText.substring(0, ((filterText.length()) - 1)); asyncRecomputeProposals(filterText); return; } int pos = getControlContentAdapter().getCursorPosition(getControl()); if (pos > 0) { asyncRecomputeProposals(filterText); } break; default : if (java.lang.Character.isDefined(key)) { if ((filterStyle) == (org.eclipse.jface.fieldassist.ContentProposalAdapter.FILTER_CUMULATIVE)) { filterText = (filterText) + (java.lang.String.valueOf(key)); } else if ((filterStyle) == (org.eclipse.jface.fieldassist.ContentProposalAdapter.FILTER_CHARACTER)) { filterText = java.lang.String.valueOf(key); } asyncRecomputeProposals(filterText); } break; } }
public void attachPart(org.eclipse.ui.IViewReference ref) { org.eclipse.ui.internal.ViewPane pane = ((org.eclipse.ui.internal.ViewPane) (((org.eclipse.ui.internal.WorkbenchPartReference) (ref)).getPane())); if ((getMaximizedStack()) != null) { getMaximizedStack().setState(IStackPresentationSite.STATE_RESTORED); } derefPart(pane); addPart(pane); bringPartToTop(pane); pane.setFocus(); }
private boolean listContentExists(org.eclipse.core.runtime.IStatus buildingStatus, boolean includeStatus) { if (!(buildingStatus.matches(this.displayMask))) { return false; } java.lang.Throwable t = buildingStatus.getException(); boolean isCoreException = t instanceof org.eclipse.core.runtime.CoreException; if (includeStatus) { return true; } if ((!isCoreException) && (t != null)) { return true; } boolean result = false; if (isCoreException) { org.eclipse.core.runtime.CoreException ce = ((org.eclipse.core.runtime.CoreException) (t)); org.eclipse.core.runtime.IStatus eStatus = ce.getStatus(); if (((message) == null) || ((message.indexOf(eStatus.getMessage())) == (-1))) { result |= listContentExists(eStatus, true); } } org.eclipse.core.runtime.IStatus[] children = buildingStatus.getChildren(); for (int i = 0; i < (children.length); i++) { result |= listContentExists(children[i], true); } return result; }
protected void setDetailHints() { org.eclipse.swt.layout.GridData data = ((org.eclipse.swt.layout.GridData) (detailsComposite.getLayoutData())); if (showDetails) { data.widthHint = org.eclipse.swt.SWT.DEFAULT; data.heightHint = convertHeightInCharsToPixels(5); } else { data.widthHint = 0; data.heightHint = 0; } }
public java.lang.Object safeCreateGui(org.eclipse.e4.ui.model.application.ui.MUIElement element, java.lang.Object parentWidget, org.eclipse.e4.core.contexts.IEclipseContext parentContext) { if (!(element.isToBeRendered())) return null; if (!(renderedElements.contains(element))) renderedElements.add(element); if ((removeRoot) != null) { return null; } java.lang.Object currentWidget = element.getWidget(); if (currentWidget != null) { if (currentWidget instanceof org.eclipse.swt.widgets.Control) { org.eclipse.swt.widgets.Control control = ((org.eclipse.swt.widgets.Control) (currentWidget)); if (!(element instanceof org.eclipse.e4.ui.model.application.ui.advanced.MPlaceholder)) control.setVisible(true); if (parentWidget instanceof org.eclipse.swt.widgets.Composite) { org.eclipse.swt.widgets.Composite currentParent = control.getParent(); if (currentParent != parentWidget) { if (currentParent instanceof org.eclipse.swt.custom.CTabFolder) { org.eclipse.swt.custom.CTabFolder folder = ((org.eclipse.swt.custom.CTabFolder) (currentParent)); if ((folder.getTopRight()) == control) { folder.setTopRight(null); } } control.setParent(((org.eclipse.swt.widgets.Composite) (parentWidget))); } } } if (element instanceof org.eclipse.e4.ui.model.application.ui.MContext) { org.eclipse.e4.core.contexts.IEclipseContext ctxt = ((org.eclipse.e4.ui.model.application.ui.MContext) (element)).getContext(); if (ctxt != null) ctxt.setParent(parentContext); } else { java.util.List<org.eclipse.e4.ui.model.application.ui.MContext> childContexts = modelService.findElements(element, null, org.eclipse.e4.ui.model.application.ui.MContext.class, null); for (org.eclipse.e4.ui.model.application.ui.MContext c : childContexts) { org.eclipse.e4.ui.model.application.ui.MUIElement kid = ((org.eclipse.e4.ui.model.application.ui.MUIElement) (c)); org.eclipse.e4.ui.model.application.ui.MUIElement parent = kid.getParent(); if ((parent == null) && ((kid.getCurSharedRef()) != null)) parent = kid.getCurSharedRef().getParent(); if ((!(element instanceof org.eclipse.e4.ui.model.application.ui.advanced.MPlaceholder)) && (parent != element)) continue; if (((c.getContext()) != null) && ((c.getContext().getParent()) != parentContext)) { c.getContext().setParent(parentContext); } } } if ((element.getParent()) instanceof org.eclipse.e4.ui.model.application.ui.MUIElement) { org.eclipse.e4.ui.model.application.ui.MElementContainer<org.eclipse.e4.ui.model.application.ui.MUIElement> parentElement = element.getParent(); org.eclipse.e4.ui.internal.workbench.swt.AbstractPartRenderer parentRenderer = getRendererFor(parentElement); if (parentRenderer != null) parentRenderer.childRendered(parentElement, element); } return element.getWidget(); } if (element instanceof org.eclipse.e4.ui.model.application.ui.MContext) { org.eclipse.e4.ui.model.application.ui.MContext ctxt = ((org.eclipse.e4.ui.model.application.ui.MContext) (element)); if ((ctxt.getContext()) == null) { org.eclipse.e4.core.contexts.IEclipseContext lclContext = parentContext.createChild(getContextName(element)); org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.populateModelInterfaces(ctxt, lclContext, element.getClass().getInterfaces()); ctxt.setContext(lclContext); for (java.lang.String variable : ctxt.getVariables()) { lclContext.declareModifiable(variable); } java.util.Map<java.lang.String, java.lang.String> props = ctxt.getProperties(); for (java.lang.String key : props.keySet()) { lclContext.set(key, props.get(key)); } org.eclipse.e4.ui.internal.workbench.E4Workbench.processHierarchy(element); } } java.lang.Object newWidget = createWidget(element, parentWidget); if (newWidget != null) { org.eclipse.e4.ui.internal.workbench.swt.AbstractPartRenderer renderer = getRendererFor(element); renderer.hookControllerLogic(element); if (element instanceof org.eclipse.e4.ui.model.application.ui.MElementContainer) { renderer.processContents(((org.eclipse.e4.ui.model.application.ui.MElementContainer<org.eclipse.e4.ui.model.application.ui.MUIElement>) (element))); } renderer.postProcess(element); if ((element.getParent()) instanceof org.eclipse.e4.ui.model.application.ui.MUIElement) { org.eclipse.e4.ui.model.application.ui.MElementContainer<org.eclipse.e4.ui.model.application.ui.MUIElement> parentElement = element.getParent(); org.eclipse.e4.ui.internal.workbench.swt.AbstractPartRenderer parentRenderer = getRendererFor(parentElement); if (parentRenderer != null) parentRenderer.childRendered(parentElement, element); } } else { if (element instanceof org.eclipse.e4.ui.model.application.ui.MContext) { org.eclipse.e4.ui.model.application.ui.MContext ctxt = ((org.eclipse.e4.ui.model.application.ui.MContext) (element)); org.eclipse.e4.core.contexts.IEclipseContext lclContext = ctxt.getContext(); if (lclContext != null) { lclContext.dispose(); ctxt.setContext(null); } } } return newWidget; }
public java.lang.Object createWidget(final org.eclipse.e4.ui.model.application.MUIElement element, java.lang.Object parent) { if ((!(element instanceof org.eclipse.e4.ui.model.application.MMenuItem)) || (!(parent instanceof org.eclipse.swt.widgets.Menu))) return null; org.eclipse.e4.ui.model.application.MMenuItem itemModel = ((org.eclipse.e4.ui.model.application.MMenuItem) (element)); org.eclipse.swt.widgets.Menu parentMenu = ((org.eclipse.swt.widgets.Menu) (parent)); int addIndex = calcVisibleIndex(element); if ((itemModel.getType()) == (org.eclipse.e4.ui.model.application.ItemType.SEPARATOR)) { return new org.eclipse.swt.widgets.MenuItem(parentMenu, org.eclipse.swt.SWT.SEPARATOR, addIndex); } int flags = 0; if ((itemModel.getChildren().size()) > 0) flags = org.eclipse.swt.SWT.CASCADE; else if ((itemModel.getType()) == (org.eclipse.e4.ui.model.application.ItemType.PUSH)) flags = org.eclipse.swt.SWT.PUSH; else if ((itemModel.getType()) == (org.eclipse.e4.ui.model.application.ItemType.CHECK)) flags = org.eclipse.swt.SWT.CHECK; else if ((itemModel.getType()) == (org.eclipse.e4.ui.model.application.ItemType.RADIO)) flags = org.eclipse.swt.SWT.RADIO; org.eclipse.swt.widgets.MenuItem newItem = new org.eclipse.swt.widgets.MenuItem(((org.eclipse.swt.widgets.Menu) (parent)), flags, addIndex); setItemText(itemModel, newItem); newItem.setImage(getImage(itemModel)); newItem.setEnabled(itemModel.isEnabled()); return newItem; }
public void setPerspective(org.eclipse.ui.IPerspectiveDescriptor perspective) { if (perspective == null) { return; } org.eclipse.ui.IPerspectiveDescriptor lastPerspective = getPerspective(); if ((lastPerspective != null) && (lastPerspective.getId().equals(perspective.getId()))) { return; } if (sortedPerspectives.contains(perspective)) { sortedPerspectives.remove(perspective); } sortedPerspectives.add(perspective); org.eclipse.e4.ui.model.application.ui.advanced.MPerspectiveStack perspectives = getPerspectiveStack(); for (org.eclipse.e4.ui.model.application.ui.advanced.MPerspective mperspective : perspectives.getChildren()) { if (mperspective.getElementId().equals(perspective.getId())) { if (lastPerspective != null) { legacyWindow.firePerspectiveDeactivated(this, lastPerspective); } perspectives.setSelectedElement(mperspective); window.getContext().set(IContextConstants.ACTIVE_CHILD, mperspective.getContext()); legacyWindow.firePerspectiveActivated(this, perspective); return; } } org.eclipse.e4.ui.model.application.ui.advanced.MPerspective modelPerspective = AdvancedFactoryImpl.eINSTANCE.createPerspective(); modelPerspective.setElementId(perspective.getId()); modelPerspective.setLabel(perspective.getLabel()); org.eclipse.ui.IPerspectiveFactory factory = ((org.eclipse.ui.internal.registry.PerspectiveDescriptor) (perspective)).createFactory(); org.eclipse.ui.internal.e4.compatibility.ModeledPageLayout modelLayout = new org.eclipse.ui.internal.e4.compatibility.ModeledPageLayout(window, modelService, partService, modelPerspective, perspective, this, true); factory.createInitialLayout(modelLayout); org.eclipse.ui.internal.PerspectiveTagger.tagPerspective(modelPerspective, modelService); org.eclipse.ui.internal.PerspectiveExtensionReader reader = new org.eclipse.ui.internal.PerspectiveExtensionReader(); reader.extendLayout(getExtensionTracker(), perspective.getId(), modelLayout); if (lastPerspective != null) { legacyWindow.firePerspectiveDeactivated(this, lastPerspective); } perspectives.getChildren().add(modelPerspective); perspectives.setSelectedElement(modelPerspective); window.getContext().set(IContextConstants.ACTIVE_CHILD, modelPerspective.getContext()); legacyWindow.firePerspectiveActivated(this, perspective); }
protected int indexForElement(org.eclipse.swt.widgets.Widget parent, java.lang.Object element) { org.eclipse.jface.viewers.ViewerSorter sorter = getSorter(); int count; if (parent instanceof org.eclipse.swt.widgets.Control) count = getItemCount(((org.eclipse.swt.widgets.Control) (parent))); else { if (parent instanceof org.eclipse.swt.widgets.Item) count = getItemCount(((org.eclipse.swt.widgets.Item) (parent))); else count = getChildren(parent).length; } if (sorter == null) return count; int min = 0; int max = count - 1; while (min <= max) { int mid = (min + max) / 2; java.lang.Object data = getChild(parent, mid).getData(); int compare = sorter.compare(this, data, element); if (compare == 0) { while (compare == 0) { ++mid; if (mid >= count) { break; } data = getChild(parent, mid).getData(); compare = sorter.compare(this, data, element); } return mid; } if (compare < 0) min = mid + 1; else max = mid - 1; } return min; }
public void refresh() { if (((list) != null) && (!(list.getTable().isDisposed()))) { java.util.List lastRefreshSelection = ((org.eclipse.jface.viewers.StructuredSelection) (list.getSelection())).toList(); list.getTable().deselectAll(); list.setItemCount(contentProvider.getNumberOfElements()); list.refresh(); if ((list.getTable().getItemCount()) > 0) { if (((refreshWithLastSelection) && (lastRefreshSelection != null)) && ((lastRefreshSelection.size()) > 0)) { list.setSelection(new org.eclipse.jface.viewers.StructuredSelection(lastRefreshSelection)); } else { refreshWithLastSelection = true; list.getTable().setSelection(0); list.getTable().notifyListeners(SWT.Selection, new org.eclipse.swt.widgets.Event()); } } else { list.setSelection(StructuredSelection.EMPTY); } } scheduleProgressMessageRefresh(); }
public void firePartClosed(org.eclipse.ui.internal.e4.compatibility.CompatibilityPart compatibilityPart) { final org.eclipse.ui.IWorkbenchPart part = compatibilityPart.getPart(); final org.eclipse.ui.internal.WorkbenchPartReference partReference = compatibilityPart.getReference(); org.eclipse.e4.ui.model.application.ui.basic.MPart model = partReference.getModel(); org.eclipse.ui.internal.SaveablesList modelManager = ((org.eclipse.ui.internal.SaveablesList) (getWorkbenchWindow().getService(org.eclipse.ui.ISaveablesLifecycleListener.class))); java.lang.Object postCloseInfo = modelManager.preCloseParts(java.util.Collections.singletonList(part), false, getWorkbenchWindow()); if (postCloseInfo != null) { modelManager.postClose(postCloseInfo); } for (final java.lang.Object listener : partListenerList.getListeners()) { org.eclipse.core.runtime.SafeRunner.run(new org.eclipse.jface.util.SafeRunnable() { public void run() throws java.lang.Exception { ((org.eclipse.ui.IPartListener) (listener)).partClosed(part); } }); } for (final java.lang.Object listener : partListener2List.getListeners()) { org.eclipse.core.runtime.SafeRunner.run(new org.eclipse.jface.util.SafeRunnable() { public void run() throws java.lang.Exception { ((org.eclipse.ui.IPartListener2) (listener)).partClosed(partReference); } }); } if (part instanceof org.eclipse.ui.IViewPart) { viewReferences.remove(partReference); } else { editorReferences.remove(partReference); } for (int i = 0; i < (activationList.size()); i++) { if (model == (activationList.get(i))) { activationList.remove(i); break; } } if (model == (partService.getActivePart())) { updateActivePartSources(null); updateActiveEditorSources(null); } else if (part instanceof org.eclipse.ui.IEditorPart) { updateActiveEditorSources(findPart(getActiveEditor())); } }
private static final void registerState(final java.lang.String identifier, final org.eclipse.jface.commands.RadioState state) { if ((org.eclipse.jface.commands.RadioState.RadioStateManager.radioStatesById) == null) { org.eclipse.jface.commands.RadioState.RadioStateManager.radioStatesById = new java.util.HashMap(); } final java.lang.Object currentValue = org.eclipse.jface.commands.RadioState.RadioStateManager.radioStatesById.get(identifier); final org.eclipse.jface.commands.RadioState.RadioStateManager.RadioGroup radioGroup; if (currentValue instanceof org.eclipse.jface.commands.RadioState.RadioStateManager.RadioGroup) { radioGroup = ((org.eclipse.jface.commands.RadioState.RadioStateManager.RadioGroup) (currentValue)); } else { radioGroup = new org.eclipse.jface.commands.RadioState.RadioStateManager.RadioGroup(); org.eclipse.jface.commands.RadioState.RadioStateManager.radioStatesById.put(identifier, radioGroup); } radioGroup.addMember(state); }
public void closeGroup() { org.eclipse.ui.internal.Perspective persp = window.getActiveWorkbenchPage().getActivePerspective(); persp.closeTrimGroup(this); }
AustriaEntry() { super("Österreich", "Austria", "TBD"); }
public void recordStateFromHistory(org.eclipse.core.resources.IResource resource, org.eclipse.core.runtime.IProgressMonitor monitor) throws org.eclipse.core.runtime.CoreException { monitor.beginTask(UndoMessages.FolderDescription_SavingUndoInfoProgress, 100); if ((members) != null) { for (int i = 0; i < (members.length); i++) { if ((members[i]) instanceof org.eclipse.ui.internal.ide.undo.FileDescription) { org.eclipse.core.runtime.IPath path = resource.getFullPath().append(((org.eclipse.ui.internal.ide.undo.FileDescription) (members[i])).name); org.eclipse.core.resources.IFile fileHandle = resource.getWorkspace().getRoot().getFile(path); members[i].recordStateFromHistory(fileHandle, new org.eclipse.core.runtime.SubProgressMonitor(monitor, (100 / (members.length)))); } else if ((members[i]) instanceof org.eclipse.ui.internal.ide.undo.FolderDescription) { org.eclipse.core.runtime.IPath path = resource.getFullPath().append(((org.eclipse.ui.internal.ide.undo.FolderDescription) (members[i])).name); org.eclipse.core.resources.IFolder folderHandle = resource.getWorkspace().getRoot().getFolder(path); members[i].recordStateFromHistory(folderHandle, new org.eclipse.core.runtime.SubProgressMonitor(monitor, (100 / (members.length)))); } } } monitor.done(); }
public void modifyText(org.eclipse.swt.events.ModifyEvent e) { boolean wasVisible = shell.getVisible(); boolean nowVisible = (text.getText().length()) > 0; if ((!wasVisible) && nowVisible) { org.eclipse.swt.graphics.Rectangle tempBounds = comp.getBounds(); org.eclipse.swt.graphics.Rectangle compBounds = e.display.map(comp, null, tempBounds); shell.setBounds(compBounds.x, ((compBounds.y) + (compBounds.height)), java.lang.Math.max(350, compBounds.width), 250); shell.layout(); } shell.setVisible(nowVisible); }
public org.eclipse.core.runtime.IStatus runInUIThread(org.eclipse.core.runtime.IProgressMonitor monitor) { if ((collectors.length) == 0) return org.eclipse.core.runtime.Status.CANCEL_STATUS; if (currentInfo.updateAll) { synchronized(updateLock) { currentInfo.reset(); } for (int i = 0; i < (collectors.length); i++) { collectors[i].refresh(); } } else { java.lang.Object[] updateItems; java.lang.Object[] additionItems; java.lang.Object[] deletionItems; synchronized(updateLock) { currentInfo.processForUpdate(); updateItems = currentInfo.refreshes.toArray(); additionItems = currentInfo.additions.toArray(); deletionItems = currentInfo.deletions.toArray(); currentInfo.reset(); } for (int v = 0; v < (collectors.length); v++) { org.eclipse.ui.internal.progress.IProgressUpdateCollector collector = collectors[v]; if ((updateItems.length) > 0) collector.refresh(updateItems); if ((additionItems.length) > 0) collector.add(additionItems); if ((deletionItems.length) > 0) collector.remove(deletionItems); } } return org.eclipse.core.runtime.Status.OK_STATUS; }
protected java.lang.String findDefaultEncoding() { if ((resource) instanceof org.eclipse.core.resources.IWorkspaceRoot) { return super.findDefaultEncoding(); } java.lang.String defaultCharset = getCharsetFromDescription(); defaultCharset = getCharsetFromDescription(); if ((defaultCharset != null) && ((defaultCharset.length()) > 0)) { return defaultCharset; } try { defaultCharset = resource.getParent().getDefaultCharset(true); } catch (org.eclipse.core.runtime.CoreException exception) { } if ((defaultCharset != null) && ((defaultCharset.length()) > 0)) { return defaultCharset; } return super.findDefaultEncoding(); }
public void setInput(java.lang.Object newInput) { applyEditorValue(); deactivateCellEditor(); input = ((java.lang.Object[]) (newInput)); if ((input) == null) { input = new java.lang.Object[0]; } if ((rootEntry) != null) { rootEntry.setValues(input); updateChildrenOf(rootEntry, tree); } updateStatusLine(null); }
public void keyTraversed(org.eclipse.swt.events.TraverseEvent e) { if ((e.detail) == (org.eclipse.swt.SWT.TRAVERSE_RETURN)) { e.doit = false; if ((getViewer().getTree().getItemCount()) == 0) { org.eclipse.swt.widgets.Display.getCurrent().beep(); setFilterText(""); } else { getViewer().getTree().setFocus(); } } else if ((e.detail) == (org.eclipse.swt.SWT.TRAVERSE_ESCAPE)) { if (filterCombo.getText().equals("")) return; e.doit = false; setFilterText(""); } }
private void setVisible(boolean visible, boolean forceVisibility) { if (visible) { setEnabledAllowed(true); if (!(isVisible())) { setVisible(true); } } else { if (forceVisibility) { setVisible(false); } else { setEnabledAllowed(false); } } org.eclipse.jface.action.ICoolBarManager coolBarManager = getCastedParent().getCoolBarManager(); if (((coolItemToolBarMgr) != null) && (coolBarManager != null)) { org.eclipse.jface.action.IContributionItem[] items = coolItemToolBarMgr.getItems(); for (int i = 0; i < (items.length); i++) { org.eclipse.jface.action.IContributionItem item = items[i]; item.setVisible((visible || (!forceVisibility))); coolItemToolBarMgr.markDirty(); if (!(coolBarManager.isDirty())) { coolBarManager.markDirty(); } } coolItemToolBarMgr.update(false); if ((toolBarContributionItem) != null) { toolBarContributionItem.setVisible((visible || (!forceVisibility))); } if ((getCoolBarManager()) != null) { ((org.eclipse.jface.action.SubCoolBarManager) (getCoolBarManager())).setVisible((visible || (!forceVisibility))); } } }
private void setSelectionOn(org.eclipse.jface.viewers.Viewer viewer, final java.lang.Object selected) { viewer.setSelection(new org.eclipse.jface.viewers.StructuredSelection(selected), true); }
public org.eclipse.swt.graphics.Image getTitleImage() { if ((part) != null) return part.getTitleImage(); if ((image) != null) return image; if ((imageDescritor) == null) return null; org.eclipse.ui.internal.ReferenceCounter imageCache = org.eclipse.ui.internal.WorkbenchImages.getImageCache(); image = ((org.eclipse.swt.graphics.Image) (imageCache.get(imageDescritor))); if ((image) != null) { imageCache.addRef(imageDescritor); return image; } image = imageDescritor.createImage(); imageCache.put(imageDescritor, image); return image; }
public TabbedPropertySheetTitleProvider() { super(); org.eclipse.ui.IWorkbenchPart part = org.eclipse.ui.PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().findView(ProjectExplorer.VIEW_ID); org.eclipse.ui.navigator.INavigatorContentService contentService = null; if (part != null) { contentService = ((org.eclipse.ui.navigator.INavigatorContentService) (part.getAdapter(org.eclipse.ui.navigator.INavigatorContentService.class))); } if (contentService != null) { labelProvider = contentService.createCommonLabelProvider(); descriptionProvider = contentService.createCommonDescriptionProvider(); } else { org.eclipse.ui.internal.navigator.resources.plugin.WorkbenchNavigatorPlugin.log((("Could not acquire INavigatorContentService from part (\"" + (part.getTitle())) + "\")."), null); } }
protected void register(org.eclipse.jface.action.IAction action) { org.eclipse.core.runtime.Assert.isNotNull(action, "Action must not be null"); java.lang.String id = action.getId(); org.eclipse.core.runtime.Assert.isNotNull(id, "Action must not have null id"); getActionBarConfigurer().registerGlobalAction(action); actions.put(id, action); }
public void copyOrLinkFiles(final java.lang.String[] fileNames, org.eclipse.core.resources.IContainer destination, int dropOperation) { org.eclipse.jface.preference.IPreferenceStore store = org.eclipse.ui.internal.ide.IDEWorkbenchPlugin.getDefault().getPreferenceStore(); boolean targetIsVirtual = destination.isVirtual(); java.lang.String dndPreference = store.getString((targetIsVirtual ? org.eclipse.ui.internal.ide.IDEInternalPreferences.IMPORT_FILES_AND_FOLDERS_VIRTUAL_FOLDER_MODE : org.eclipse.ui.internal.ide.IDEInternalPreferences.IMPORT_FILES_AND_FOLDERS_MODE)); int mode = org.eclipse.ui.ide.dialogs.ImportTypeDialog.IMPORT_NONE; java.lang.String variable = null; if (org.eclipse.core.resources.ResourcesPlugin.getPlugin().getPluginPreferences().getBoolean(org.eclipse.core.resources.ResourcesPlugin.PREF_DISABLE_LINKING)) mode = org.eclipse.ui.ide.dialogs.ImportTypeDialog.IMPORT_COPY; else { if (dndPreference.equals(IDEInternalPreferences.IMPORT_FILES_AND_FOLDERS_MODE_PROMPT)) { org.eclipse.ui.ide.dialogs.ImportTypeDialog dialog = new org.eclipse.ui.ide.dialogs.ImportTypeDialog(messageShell, dropOperation, fileNames, destination); dialog.setResource(destination); if ((dialog.open()) == (org.eclipse.jface.window.Window.OK)) { mode = dialog.getSelection(); variable = dialog.getVariable(); } } else if ((dndPreference.equals(IDEInternalPreferences.IMPORT_FILES_AND_FOLDERS_MODE_MOVE_COPY)) && (hasFlag(dropOperation, ImportTypeDialog.IMPORT_COPY))) { mode = org.eclipse.ui.ide.dialogs.ImportTypeDialog.IMPORT_COPY; } else if ((dndPreference.equals(IDEInternalPreferences.IMPORT_FILES_AND_FOLDERS_MODE_LINK)) && (hasFlag(dropOperation, ((org.eclipse.ui.ide.dialogs.ImportTypeDialog.IMPORT_LINK) | (org.eclipse.ui.ide.dialogs.ImportTypeDialog.IMPORT_COPY))))) { mode = org.eclipse.ui.ide.dialogs.ImportTypeDialog.IMPORT_LINK; } else if ((dndPreference.equals(IDEInternalPreferences.IMPORT_FILES_AND_FOLDERS_MODE_LINK_AND_VIRTUAL_FOLDER)) && (hasFlag(dropOperation, ImportTypeDialog.IMPORT_VIRTUAL_FOLDERS_AND_LINKS))) { mode = org.eclipse.ui.ide.dialogs.ImportTypeDialog.IMPORT_VIRTUAL_FOLDERS_AND_LINKS; } } switch (mode) { case org.eclipse.ui.ide.dialogs.ImportTypeDialog.IMPORT_COPY : copyFiles(fileNames, destination); break; case org.eclipse.ui.ide.dialogs.ImportTypeDialog.IMPORT_VIRTUAL_FOLDERS_AND_LINKS : if (variable != null) setRelativeVariable(variable); createVirtualFoldersAndLinks(fileNames, destination); break; case org.eclipse.ui.ide.dialogs.ImportTypeDialog.IMPORT_LINK : if (variable != null) setRelativeVariable(variable); linkFiles(fileNames, destination); break; case org.eclipse.ui.ide.dialogs.ImportTypeDialog.IMPORT_NONE : break; } }
@java.lang.Override public void hookControllerLogic(final org.eclipse.e4.ui.model.application.MPart<?> me) { super.hookControllerLogic(me); final org.eclipse.e4.ui.model.application.MStack sm = ((org.eclipse.e4.ui.model.application.MStack) (me)); org.eclipse.swt.custom.CTabFolder ctf = ((org.eclipse.swt.custom.CTabFolder) (me.getWidget())); ctf.addSelectionListener(new org.eclipse.swt.events.SelectionListener() { public void widgetDefaultSelected(org.eclipse.swt.events.SelectionEvent e) { } public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { org.eclipse.e4.ui.model.application.MItemPart<?> newPart = ((org.eclipse.e4.ui.model.application.MItemPart<?>) (e.item.getData(org.eclipse.e4.workbench.ui.renderers.swt.OWNING_ME))); if ((sm.getActiveChild()) != newPart) { activate(newPart); } showTab(newPart); } }); ctf.addListener(SWT.Activate, new org.eclipse.swt.widgets.Listener() { public void handleEvent(org.eclipse.swt.widgets.Event event) { org.eclipse.swt.custom.CTabFolder ctf = ((org.eclipse.swt.custom.CTabFolder) (event.widget)); org.eclipse.e4.ui.model.application.MStack stack = ((org.eclipse.e4.ui.model.application.MStack) (ctf.getData(org.eclipse.e4.workbench.ui.renderers.swt.OWNING_ME))); org.eclipse.e4.ui.model.application.MItemPart<?> part = stack.getActiveChild(); if (part != null) activate(part); } }); ((org.eclipse.emf.ecore.EObject) (me)).eAdapters().add(0, new org.eclipse.emf.common.notify.impl.AdapterImpl() { @java.lang.Override public void notifyChanged(org.eclipse.emf.common.notify.Notification msg) { if (ApplicationPackage.Literals.MPART__ACTIVE_CHILD.equals(msg.getFeature())) { org.eclipse.e4.ui.model.application.MStack sm = ((org.eclipse.e4.ui.model.application.MStack) (msg.getNotifier())); org.eclipse.e4.ui.model.application.MPart<?> selPart = sm.getActiveChild(); org.eclipse.swt.custom.CTabFolder ctf = ((org.eclipse.swt.custom.CTabFolder) (((org.eclipse.e4.ui.model.application.MStack) (msg.getNotifier())).getWidget())); org.eclipse.swt.custom.CTabItem item = findItemForPart(sm, selPart); if (item != null) { org.eclipse.swt.widgets.Control ctrl = item.getControl(); if (ctrl == null) { if (selPart instanceof org.eclipse.e4.ui.model.application.MContribution) { if ((((org.eclipse.e4.ui.model.application.MContribution) (selPart)).getObject()) == null) { renderer.createGui(selPart); } } else { renderer.createGui(selPart); } } ctf.setSelection(item); } } } }); }
protected void createButtonsForButtonBar(org.eclipse.swt.widgets.Composite parent) { org.eclipse.swt.widgets.Button b = createButton(parent, IDialogConstants.OK_ID, IDialogConstants.OK_LABEL, true); b.setFocus(); }
@java.lang.SuppressWarnings("unchecked") public static java.util.List<org.eclipse.e4.ui.model.application.MApplicationElement> merge(org.eclipse.e4.ui.model.application.MApplicationElement container, org.eclipse.emf.ecore.EStructuralFeature feature, java.util.List<org.eclipse.e4.ui.model.application.MApplicationElement> elements, java.lang.String positionInList) { org.eclipse.emf.ecore.EObject eContainer = ((org.eclipse.emf.ecore.EObject) (container)); if (feature.isMany()) { java.util.List<org.eclipse.e4.ui.model.application.MApplicationElement> copy = new java.util.ArrayList<org.eclipse.e4.ui.model.application.MApplicationElement>(elements); java.util.List list = ((java.util.List) (eContainer.eGet(feature))); boolean flag = true; if ((positionInList != null) && ((positionInList.trim().length()) != 0)) { int index = -1; if (positionInList.startsWith("first")) { index = 0; } else if (positionInList.startsWith("index:")) { index = java.lang.Integer.parseInt(positionInList.substring("index:".length())); } else if ((positionInList.startsWith("before:")) || (positionInList.startsWith("after:"))) { java.lang.String elementId; boolean before; if (positionInList.startsWith("before:")) { elementId = positionInList.substring("before:".length()); before = true; } else { elementId = positionInList.substring("after:".length()); before = false; } int tmpIndex = -1; for (int i = 0; i < (list.size()); i++) { if (((org.eclipse.e4.ui.model.application.MApplicationElement) (list.get(i))).getElementId().equals(elementId)) { tmpIndex = i; break; } } if (tmpIndex != (-1)) { if (before) { index = tmpIndex; } else { index = tmpIndex + 1; } } else { java.lang.System.err.println((("Could not find element with Id '" + elementId) + "'")); } } else { java.lang.System.err.println("Not a valid list position."); } if ((index >= 0) && ((list.size()) > index)) { flag = false; list.addAll(index, elements); } } if (flag) { list.addAll(elements); } return copy; } else { if ((elements.size()) >= 1) { if ((elements.size()) > 1) { java.lang.System.err.println("The feature is single valued but a list of values is passed in."); } org.eclipse.e4.ui.model.application.MApplicationElement e = elements.get(0); eContainer.eSet(feature, e); return java.util.Collections.singletonList(e); } } return java.util.Collections.emptyList(); }
public int hashCode() { final int prime = 31; int result = 1; java.lang.Object nv = getNewValue(); java.lang.Object ov = getOldValue(); result = (prime * result) + (nv == null ? 0 : nv.hashCode()); result = (prime * result) + (ov == null ? 0 : ov.hashCode()); return result; }
public final java.util.List getKeySequenceBindings() { final java.util.List legacyBindings = new java.util.ArrayList(); if ((parameterizedCommand) == null) { parameterizedCommand = new org.eclipse.core.commands.ParameterizedCommand(command, null); } final org.eclipse.jface.bindings.TriggerSequence[] activeBindings = bindingManager.getActiveBindingsFor(parameterizedCommand); final int activeBindingsCount = activeBindings.length; for (int i = 0; i < activeBindingsCount; i++) { final org.eclipse.jface.bindings.TriggerSequence triggerSequence = activeBindings[i]; if (triggerSequence instanceof org.eclipse.jface.bindings.keys.KeySequence) { legacyBindings.add(new org.eclipse.ui.internal.keys.KeySequenceBinding(org.eclipse.ui.keys.KeySequence.getInstance(((org.eclipse.jface.bindings.keys.KeySequence) (triggerSequence))), 0)); } } return legacyBindings; }
public java.lang.String getLabel(java.lang.Object o) { return MarkerMessages.MarkerList_0; }
protected org.eclipse.core.runtime.IStatus run(org.eclipse.core.runtime.IProgressMonitor monitor) { final org.eclipse.core.runtime.MultiStatus status = new org.eclipse.core.runtime.MultiStatus(org.eclipse.ui.PlatformUI.PLUGIN_ID, 0, org.eclipse.ui.internal.ide.IDEWorkbenchMessages.GlobalBuildAction_buildProblems, null); monitor.beginTask(getOperationMessage(), 100); try { org.eclipse.core.resources.ResourcesPlugin.getWorkspace().build(buildType, new org.eclipse.core.runtime.SubProgressMonitor(monitor, 100)); } catch (org.eclipse.core.runtime.CoreException e) { status.add(e.getStatus()); } finally { monitor.done(); } return status; }
public void removeFocusTracker(org.eclipse.swt.widgets.Control control) { if ((controlToId) == null) { return; } controlToId.remove(control); if (control.isDisposed()) { return; } control.removeFocusListener(getFocusListener()); control.removeDisposeListener(getDisposeListener()); }
public boolean isExpandable(java.lang.Object element) { org.eclipse.jface.viewers.ITreeContentProvider cp = ((org.eclipse.jface.viewers.ITreeContentProvider) (getContentProvider())); if (cp == null) return false; if (hasFilters()) { org.eclipse.jface.viewers.ViewerFilter[] filters = getFilters(); java.lang.Object[] result = getRawChildren(element); for (int i = 0; i < (filters.length); i++) { org.eclipse.jface.viewers.ViewerFilter filter = filters[i]; result = filter.filter(this, element, result); if ((result.length) == 0) return false; } return true; } return cp.hasChildren(element); }
public void handleEvent(org.osgi.service.event.Event event) { org.eclipse.e4.ui.model.application.ui.MUIElement changedElement = ((org.eclipse.e4.ui.model.application.ui.MUIElement) (event.getProperty(UIEvents.EventTags.ELEMENT))); org.eclipse.e4.ui.model.application.ui.MUIElement parent = changedElement.getParent(); if (parent == null) { parent = ((org.eclipse.e4.ui.model.application.ui.MUIElement) (((org.eclipse.emf.ecore.EObject) (changedElement)).eContainer())); if (parent == null) { return; } } org.eclipse.e4.ui.internal.workbench.swt.AbstractPartRenderer renderer = ((org.eclipse.e4.ui.internal.workbench.swt.AbstractPartRenderer) (parent.getRenderer())); if (renderer == null) return; if (changedElement.isVisible()) { if (changedElement.isToBeRendered()) { if ((changedElement.getWidget()) instanceof org.eclipse.swt.widgets.Control) { org.eclipse.swt.widgets.Composite realComp = ((org.eclipse.swt.widgets.Composite) (renderer.getUIContainer(changedElement))); org.eclipse.swt.widgets.Control ctrl = ((org.eclipse.swt.widgets.Control) (changedElement.getWidget())); ctrl.setParent(realComp); fixZOrder(changedElement); } if (parent instanceof org.eclipse.e4.ui.model.application.ui.MElementContainer<?>) { renderer.childRendered(((org.eclipse.e4.ui.model.application.ui.MElementContainer<org.eclipse.e4.ui.model.application.ui.MUIElement>) (parent)), changedElement); } } } else { if ((changedElement.getWidget()) instanceof org.eclipse.swt.widgets.Control) { org.eclipse.swt.widgets.Control ctrl = ((org.eclipse.swt.widgets.Control) (changedElement.getWidget())); ctrl.setParent(getLimboShell()); if (!(ctrl instanceof org.eclipse.swt.widgets.Shell)) ctrl.setSize(0, 0); } if (parent instanceof org.eclipse.e4.ui.model.application.ui.MElementContainer<?>) { renderer.hideChild(((org.eclipse.e4.ui.model.application.ui.MElementContainer<org.eclipse.e4.ui.model.application.ui.MUIElement>) (parent)), changedElement); } } }
@javax.inject.Inject void setPart(@org.eclipse.e4.core.di.annotations.Optional @javax.inject.Named(org.eclipse.e4.ui.services.IServiceConstants.ACTIVE_PART) final org.eclipse.e4.ui.model.application.ui.basic.MPart part) { if ((part != null) && ((activePart) != part)) { activePart = part; if (isMasterService()) { org.eclipse.e4.core.contexts.IEclipseContext partContext = part.getContext(); if (partContext.containsKey(org.eclipse.e4.ui.internal.workbench.SelectionServiceImpl.OUT_SELECTION)) { java.lang.Object selection = partContext.get(org.eclipse.e4.ui.internal.workbench.SelectionServiceImpl.OUT_SELECTION); notifyListeners(part, selection); } track(part); } else { org.eclipse.e4.core.contexts.IEclipseContext partContext = part.getContext(); if (partContext.containsKey(org.eclipse.e4.ui.internal.workbench.SelectionServiceImpl.OUT_SELECTION)) { java.lang.Object selection = partContext.getLocal(org.eclipse.e4.ui.internal.workbench.SelectionServiceImpl.OUT_SELECTION); serviceRoot.getContext().set(IServiceConstants.ACTIVE_SELECTION, selection); if (isMasterService()) { context.set(IServiceConstants.ACTIVE_SELECTION, selection); } } } } }
org.eclipse.ui.internal.wizards.datatransfer.TarEntry getNextEntryInternal() throws java.io.IOException, org.eclipse.ui.internal.wizards.datatransfer.TarException { byte[] header = new byte[512]; int pos = 0; int i; if ((firstEntry) != null) { org.eclipse.ui.internal.wizards.datatransfer.TarEntry entryReturn = firstEntry; firstEntry = null; return entryReturn; } while ((nextEntry) > 0) { long ret = in.skip(nextEntry); if (ret < 0) { throw new java.io.IOException("early end of stream"); } nextEntry -= ret; bytesread += ret; } int bytestoread = 512; while (bytestoread > 0) { int ret = super.read(header, (512 - bytestoread), bytestoread); if (ret < 0) { throw new java.io.IOException("early end of stream"); } bytestoread -= ret; bytesread += ret; } if ((headerChecksum(header)) == 0) { if ((filepos) > 0) { return null; } throw new org.eclipse.ui.internal.wizards.datatransfer.TarException("not in tar format"); } if (!(isValidTarHeader(header))) { throw new org.eclipse.ui.internal.wizards.datatransfer.TarException("not in tar format"); } while ((pos < 100) && ((header[pos]) != 0)) pos++; java.lang.String name = new java.lang.String(header, 0, pos, "UTF8"); pos = 345; if ((header[pos]) != 0) { while ((pos < 500) && ((header[pos]) != 0)) pos++; java.lang.String prefix = new java.lang.String(header, 345, (pos - 345), "UTF8"); name = (prefix + "/") + name; } org.eclipse.ui.internal.wizards.datatransfer.TarEntry entry; if ((longLinkName) != null) { entry = new org.eclipse.ui.internal.wizards.datatransfer.TarEntry(longLinkName, filepos); longLinkName = null; } else { entry = new org.eclipse.ui.internal.wizards.datatransfer.TarEntry(name, filepos); } if ((header[156]) != 0) { entry.setFileType(header[156]); } pos = 100; java.lang.StringBuffer mode = new java.lang.StringBuffer(); for (i = 0; i < 8; i++) { if ((header[(pos + i)]) == 0) break; if ((header[(pos + i)]) == ' ') continue; mode.append(((char) (header[(pos + i)]))); } if (((mode.length()) > 0) && ((mode.charAt(0)) != '0')) mode.insert(0, '0'); try { long fileMode = java.lang.Long.decode(mode.toString()).longValue(); entry.setMode(fileMode); } catch (java.lang.NumberFormatException nfe) { throw new org.eclipse.ui.internal.wizards.datatransfer.TarException(DataTransferMessages.TarImport_invalid_tar_format, nfe); } pos = 100 + 24; java.lang.StringBuffer size = new java.lang.StringBuffer(); for (i = 0; i < 12; i++) { if ((header[(pos + i)]) == 0) break; if ((header[(pos + i)]) == ' ') continue; size.append(((char) (header[(pos + i)]))); } if ((size.charAt(0)) != '0') size.insert(0, '0'); int fileSize; try { fileSize = java.lang.Integer.decode(size.toString()).intValue(); } catch (java.lang.NumberFormatException nfe) { throw new org.eclipse.ui.internal.wizards.datatransfer.TarException(DataTransferMessages.TarImport_invalid_tar_format, nfe); } entry.setSize(fileSize); nextEOF = fileSize; if ((fileSize % 512) > 0) { nextEntry = fileSize + (512 - (fileSize % 512)); } else { nextEntry = fileSize; } filepos += (nextEntry) + 512; return entry; }
void drawGradient() { if ((tabFolder) == null) return; org.eclipse.ui.internal.Color fgColor; org.eclipse.ui.internal.Color[] bgColors; int[] bgPercents; switch (activeState) { case org.eclipse.ui.internal.EditorWorkbook.ACTIVE_FOCUS : if (getShellActivated()) { fgColor = org.eclipse.ui.internal.WorkbenchColors.getSystemColor(SWT.COLOR_TITLE_FOREGROUND); bgColors = org.eclipse.ui.internal.WorkbenchColors.getActiveEditorGradient(); bgPercents = org.eclipse.ui.internal.WorkbenchColors.getActiveEditorGradientPercents(); } else { fgColor = org.eclipse.ui.internal.WorkbenchColors.getSystemColor(SWT.COLOR_TITLE_INACTIVE_FOREGROUND); bgColors = org.eclipse.ui.internal.WorkbenchColors.getDeactivatedEditorGradient(); bgPercents = org.eclipse.ui.internal.WorkbenchColors.getDeactivatedEditorGradientPercents(); } break; case org.eclipse.ui.internal.EditorWorkbook.ACTIVE_NOFOCUS : fgColor = org.eclipse.ui.internal.WorkbenchColors.getSystemColor(SWT.COLOR_BLACK); bgColors = org.eclipse.ui.internal.WorkbenchColors.getActiveNoFocusEditorGradient(); bgPercents = org.eclipse.ui.internal.WorkbenchColors.getActiveNoFocusEditorGradientPercents(); break; case org.eclipse.ui.internal.EditorWorkbook.INACTIVE : default : fgColor = null; bgColors = null; bgPercents = null; break; } tabFolder.setSelectionForeground(fgColor); tabFolder.setSelectionBackground(bgColors, bgPercents); tabFolder.update(); }
@org.eclipse.e4.core.services.annotations.PostConstruct private void initialize(org.eclipse.e4.core.services.context.IEclipseContext context) { this.appContext = context; org.eclipse.core.runtime.IExtensionRegistry registry = ((org.eclipse.core.runtime.IExtensionRegistry) (context.get(org.eclipse.core.runtime.IExtensionRegistry.class.getName()))); org.eclipse.core.runtime.IConfigurationElement[] factories = registry.getConfigurationElementsFor("org.eclipse.e4.workbench.rendererfactory"); for (int i = 0; i < (factories.length); i++) { java.lang.String id = factories[i].getAttribute("id"); if (!(curFactoryId.equals(id))) continue; org.eclipse.e4.ui.workbench.swt.factories.IRendererFactory factory = null; try { factory = ((org.eclipse.e4.ui.workbench.swt.factories.IRendererFactory) (factories[i].createExecutableExtension("class"))); } catch (org.eclipse.core.runtime.CoreException e) { e.printStackTrace(); } if (factory != null) { factory.init(context); curFactory = factory; } } context.set(org.eclipse.e4.workbench.ui.IPresentationEngine.class.getName(), this); org.eclipse.e4.ui.services.events.IEventBroker eventBroker = ((org.eclipse.e4.ui.services.events.IEventBroker) (context.get(org.eclipse.e4.ui.services.events.IEventBroker.class.getName()))); eventBroker.subscribe(org.eclipse.e4.workbench.ui.UIEvents.buildTopic(UIEvents.UIElement.TOPIC, UIEvents.UIElement.VISIBLE), visibilityHandler); eventBroker.subscribe(org.eclipse.e4.workbench.ui.UIEvents.buildTopic(UIEvents.ElementContainer.TOPIC, UIEvents.ElementContainer.CHILDREN), childrenHandler); }
protected void setState(int newState) { if ((!(supportsState(newState))) || (newState == (presentationSite.getState()))) { return; } org.eclipse.swt.graphics.Rectangle initialBounds = null; org.eclipse.swt.widgets.Control ctrl = getControl(); if ((ctrl != null) && (!(isDisposed()))) { initialBounds = org.eclipse.jface.util.Geometry.toDisplay(ctrl.getParent(), getBounds()); } int oldState = presentationSite.getState(); if ((current) != null) { if (newState == (org.eclipse.ui.presentations.IStackPresentationSite.STATE_MAXIMIZED)) { org.eclipse.ui.internal.PartPane pane = getVisiblePart(); if (pane != null) { pane.doZoom(); } } else { presentationSite.setPresentationState(newState); org.eclipse.ui.internal.WorkbenchPage page = getPage(); if (page != null) { if (page.isZoomed()) { page.zoomOut(); } flushLayout(); } } } if ((presentationSite.getState()) == (org.eclipse.ui.presentations.IStackPresentationSite.STATE_MINIMIZED)) { org.eclipse.ui.internal.WorkbenchPage page = getPage(); if (page != null) { page.refreshActiveView(); } } if (initialBounds != null) { org.eclipse.swt.graphics.Rectangle finalBounds = org.eclipse.jface.util.Geometry.toDisplay(ctrl.getParent(), getBounds()); org.eclipse.ui.internal.RectangleAnimation animation = new org.eclipse.ui.internal.RectangleAnimation(getWorkbenchWindow().getShell(), initialBounds, finalBounds); animation.schedule(1); } }
public TarFileExporter(java.lang.String filename, boolean compress) throws java.io.IOException { if (compress) { gzipOutputStream = new java.util.zip.GZIPOutputStream(new java.io.FileOutputStream(filename)); outputStream = new org.eclipse.ui.internal.wizards.datatransfer.TarOutputStream(gzipOutputStream); } else { outputStream = new org.eclipse.ui.internal.wizards.datatransfer.TarOutputStream(new java.io.FileOutputStream(filename)); } }
public org.eclipse.e4.ui.internal.workbench.E4Workbench createE4Workbench(org.eclipse.equinox.app.IApplicationContext applicationContext, final org.eclipse.swt.widgets.Display display) { args = ((java.lang.String[]) (applicationContext.getArguments().get(org.eclipse.equinox.app.IApplicationContext.APPLICATION_ARGS))); org.eclipse.e4.core.contexts.IEclipseContext appContext = org.eclipse.e4.ui.internal.workbench.swt.E4Application.createDefaultContext(); appContext.set(org.eclipse.core.databinding.observable.Realm.class, org.eclipse.jface.databinding.swt.SWTObservables.getRealm(display)); appContext.set(org.eclipse.e4.ui.di.UISynchronize.class, new org.eclipse.e4.ui.di.UISynchronize() { public void syncExec(java.lang.Runnable runnable) { display.syncExec(runnable); } public void asyncExec(java.lang.Runnable runnable) { display.asyncExec(runnable); } }); appContext.set(org.eclipse.equinox.app.IApplicationContext.class, applicationContext); if (!(appContext.containsKey("org.eclipse.e4.ui.workbench.modeling.EPartService"))) { throw new java.lang.IllegalStateException("Core services not available. Please make sure that a declarative service implementation (such as the bundle 'org.eclipse.equinox.ds') is available!"); } org.eclipse.e4.core.services.contributions.IContributionFactory factory = ((org.eclipse.e4.core.services.contributions.IContributionFactory) (appContext.get(org.eclipse.e4.core.services.contributions.IContributionFactory.class.getName()))); java.lang.String lifeCycleURI = getArgValue(E4Workbench.LIFE_CYCLE_URI_ARG, applicationContext, false); if (lifeCycleURI != null) { lcManager = factory.create(lifeCycleURI, appContext); if ((lcManager) != null) { org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(lcManager, org.eclipse.e4.ui.workbench.lifecycle.PostContextCreate.class, appContext, null); } } org.eclipse.e4.ui.model.application.MApplication appModel = loadApplicationModel(applicationContext, appContext); appModel.setContext(appContext); boolean isRtl = ((org.eclipse.jface.window.Window.getDefaultOrientation()) & (org.eclipse.swt.SWT.RIGHT_TO_LEFT)) != 0; appModel.getTransientData().put(E4Workbench.RTL_MODE, isRtl); if (!(org.eclipse.e4.ui.internal.workbench.E4Workbench.getServiceContext().containsKey(org.eclipse.e4.ui.model.application.MApplication.class.getName()))) { org.eclipse.e4.ui.internal.workbench.E4Workbench.getServiceContext().set(org.eclipse.e4.ui.model.application.MApplication.class.getName(), appModel); } appContext.set(org.eclipse.e4.ui.model.application.MApplication.class.getName(), appModel); org.eclipse.e4.core.contexts.ContextInjectionFactory.setDefault(appContext); org.eclipse.e4.ui.internal.workbench.swt.E4Application.initializeServices(appModel); if ((lcManager) != null) { org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(lcManager, org.eclipse.e4.ui.workbench.lifecycle.ProcessAdditions.class, appContext, null); org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(lcManager, org.eclipse.e4.ui.workbench.lifecycle.ProcessRemovals.class, appContext, null); } org.eclipse.e4.core.contexts.IEclipseContext addonStaticContext = org.eclipse.e4.core.contexts.EclipseContextFactory.create(); for (org.eclipse.e4.ui.model.application.MAddon addon : appModel.getAddons()) { addonStaticContext.set(org.eclipse.e4.ui.model.application.MAddon.class, addon); java.lang.Object obj = factory.create(addon.getContributionURI(), appContext, addonStaticContext); addon.setObject(obj); } java.lang.String xmiURI = getArgValue(E4Workbench.XMI_URI_ARG, applicationContext, false); appContext.set(E4Workbench.XMI_URI_ARG, xmiURI); java.lang.String themeId = getArgValue(org.eclipse.e4.ui.internal.workbench.swt.E4Application.THEME_ID, applicationContext, false); appContext.set(org.eclipse.e4.ui.internal.workbench.swt.E4Application.THEME_ID, themeId); java.lang.String cssURI = getArgValue(E4Workbench.CSS_URI_ARG, applicationContext, false); if (cssURI != null) { appContext.set(E4Workbench.CSS_URI_ARG, cssURI); } if ((cssURI != null) && (!(cssURI.startsWith("platform:")))) { java.lang.System.err.println((("Warning " + cssURI) + " changed its meaning it is used now to run without theme support")); appContext.set(org.eclipse.e4.ui.internal.workbench.swt.E4Application.THEME_ID, cssURI); } java.lang.String cssResourcesURI = getArgValue(E4Workbench.CSS_RESOURCE_URI_ARG, applicationContext, false); appContext.set(E4Workbench.CSS_RESOURCE_URI_ARG, cssResourcesURI); appContext.set(E4Workbench.RENDERER_FACTORY_URI, getArgValue(E4Workbench.RENDERER_FACTORY_URI, applicationContext, false)); java.lang.String presentationURI = getArgValue(E4Workbench.PRESENTATION_URI_ARG, applicationContext, false); if (presentationURI == null) { presentationURI = PartRenderingEngine.engineURI; } appContext.set(E4Workbench.PRESENTATION_URI_ARG, presentationURI); return workbench = new org.eclipse.e4.ui.internal.workbench.E4Workbench(appModel, appContext); }
public void openURL(java.net.URL url2) { java.lang.String url = null; if (url2 != null) { url = url2.toExternalForm(); } else { url = ""; } if ((lastBrowserThread) != null) lastBrowserThread.exitRequested = true; lastBrowserThread = new org.eclipse.ui.internal.browser.browsers.MozillaBrowser.BrowserThread(url); lastBrowserThread.setDaemon(true); lastBrowserThread.start(); }
private org.eclipse.e4.ui.model.application.MApplication loadApplicationModel(org.eclipse.equinox.app.IApplicationContext appContext, org.eclipse.e4.core.contexts.IEclipseContext eclipseContext) { org.eclipse.e4.ui.model.application.MApplication theApp = null; org.eclipse.osgi.service.datalocation.Location instanceLocation = org.eclipse.e4.ui.internal.workbench.swt.WorkbenchSWTActivator.getDefault().getInstanceLocation(); java.lang.String appModelPath = getArgValue(E4Workbench.XMI_URI_ARG, appContext, false); if ((appModelPath == null) || ((appModelPath.length()) == 0)) { org.osgi.framework.Bundle brandingBundle = appContext.getBrandingBundle(); if (brandingBundle != null) appModelPath = ((brandingBundle.getSymbolicName()) + "/") + (org.eclipse.e4.ui.internal.workbench.swt.E4Application.APPLICATION_MODEL_PATH_DEFAULT); } org.eclipse.core.runtime.Assert.isNotNull(appModelPath, ((org.eclipse.e4.ui.internal.workbench.E4Workbench.XMI_URI_ARG) + " argument missing")); final org.eclipse.emf.common.util.URI initialWorkbenchDefinitionInstance = org.eclipse.emf.common.util.URI.createPlatformPluginURI(appModelPath, true); eclipseContext.set(E4Workbench.INITIAL_WORKBENCH_MODEL_URI, initialWorkbenchDefinitionInstance); eclipseContext.set(E4Workbench.INSTANCE_LOCATION, instanceLocation); boolean saveAndRestore; java.lang.String value = getArgValue(E4Workbench.PERSIST_STATE, appContext, false); saveAndRestore = (value == null) || (java.lang.Boolean.parseBoolean(value)); eclipseContext.set(E4Workbench.PERSIST_STATE, java.lang.Boolean.valueOf(saveAndRestore)); boolean clearPersistedState; value = getArgValue(E4Workbench.CLEAR_PERSISTED_STATE, appContext, true); clearPersistedState = (value != null) && (java.lang.Boolean.parseBoolean(value)); eclipseContext.set(E4Workbench.CLEAR_PERSISTED_STATE, java.lang.Boolean.valueOf(clearPersistedState)); boolean deltaRestore; value = getArgValue(E4Workbench.DELTA_RESTORE, appContext, false); deltaRestore = (value == null) || (java.lang.Boolean.parseBoolean(value)); eclipseContext.set(E4Workbench.DELTA_RESTORE, java.lang.Boolean.valueOf(deltaRestore)); java.lang.String resourceHandler = getArgValue(E4Workbench.MODEL_RESOURCE_HANDLER, appContext, false); if (resourceHandler == null) { resourceHandler = "bundleclass://org.eclipse.e4.ui.workbench/" + (org.eclipse.e4.ui.internal.workbench.ResourceHandler.class.getName()); } org.eclipse.e4.core.services.contributions.IContributionFactory factory = eclipseContext.get(org.eclipse.e4.core.services.contributions.IContributionFactory.class); handler = ((org.eclipse.e4.ui.workbench.IModelResourceHandler) (factory.create(resourceHandler, eclipseContext))); org.eclipse.emf.ecore.resource.Resource resource = handler.loadMostRecentModel(); theApp = ((org.eclipse.e4.ui.model.application.MApplication) (resource.getContents().get(0))); return theApp; }
public void handleEvent(org.eclipse.swt.widgets.Event event) { org.eclipse.swt.graphics.Point size = control.getSize(); if (((size.x) <= 0) || ((size.y) <= 0)) { return; } org.eclipse.swt.graphics.Image oldImage = control.getBackgroundImage(); org.eclipse.swt.graphics.Image newImage; if ((grad.isRadial()) && (org.eclipse.e4.ui.css.swt.properties.GradientBackgroundListener.isRadialSupported)) { java.util.List<java.awt.Color> colors = new java.util.ArrayList<java.awt.Color>(); for (java.util.Iterator iterator = grad.getRGBs().iterator(); iterator.hasNext();) { org.eclipse.swt.graphics.RGB rgb = ((org.eclipse.swt.graphics.RGB) (iterator.next())); java.awt.Color color = new java.awt.Color(rgb.red, rgb.green, rgb.blue); colors.add(color); } java.awt.image.BufferedImage image = getBufferedImage(size.x, size.y, colors, org.eclipse.e4.ui.css.swt.helpers.CSSSWTColorHelper.getPercents(grad)); org.eclipse.swt.graphics.ImageData imagedata = convertToSWT(image); newImage = new org.eclipse.swt.graphics.Image(control.getDisplay(), imagedata); } else { if (((oldImage == null) || (oldImage.isDisposed())) || ((oldImage.getBounds().height) != (size.y))) { int x = 2; int y = size.y; newImage = new org.eclipse.swt.graphics.Image(control.getDisplay(), x, y); org.eclipse.swt.graphics.GC gc = new org.eclipse.swt.graphics.GC(newImage); java.util.List<org.eclipse.swt.graphics.Color> colors = new java.util.ArrayList<org.eclipse.swt.graphics.Color>(); for (java.util.Iterator iterator = grad.getRGBs().iterator(); iterator.hasNext();) { org.eclipse.swt.graphics.RGB rgb = ((org.eclipse.swt.graphics.RGB) (iterator.next())); org.eclipse.swt.graphics.Color color = new org.eclipse.swt.graphics.Color(control.getDisplay(), rgb.red, rgb.green, rgb.blue); colors.add(color); } org.eclipse.e4.ui.css.swt.properties.GradientBackgroundListener.fillGradient(gc, new org.eclipse.swt.graphics.Rectangle(0, 0, x, y), colors, org.eclipse.e4.ui.css.swt.helpers.CSSSWTColorHelper.getPercents(grad), true); gc.dispose(); for (java.util.Iterator<org.eclipse.swt.graphics.Color> iterator = colors.iterator(); iterator.hasNext();) { org.eclipse.swt.graphics.Color c = iterator.next(); c.dispose(); } } else { oldImage = null; newImage = null; } } if (newImage != null) { control.setBackgroundImage(newImage); } if ((oldImage != null) && (!(oldImage.isDisposed()))) { oldImage.dispose(); oldImage = null; } }
public boolean matches(org.eclipse.core.filesystem.IFileInfo fileInfo) { if ((matcher) == null) return false; return matcher.match(fileInfo.getName()); }
public int computePreferredSize(boolean width, int availableParallel, int availablePerpendicular, int preferredResult) { org.eclipse.ui.presentations.IPresentablePart[] parts = getSite().getPartList(); if (((parts.length) == 1) && ((parts[0]) != null)) { int partSize = parts[0].computePreferredSize(width, availableParallel, availablePerpendicular, preferredResult); if (partSize == (INFINITE)) return partSize; int minSize = computePreferredMinimumSize(width, availablePerpendicular); if (width) { partSize = java.lang.Math.max(minSize, partSize); } else { if (((INFINITE) - minSize) > partSize) partSize += minSize; } return partSize; } if ((preferredResult != (INFINITE)) || ((getSite().getState()) == (org.eclipse.ui.presentations.IStackPresentationSite.STATE_MINIMIZED))) { int minSize = computePreferredMinimumSize(width, availablePerpendicular); if ((getSite().getState()) == (org.eclipse.ui.presentations.IStackPresentationSite.STATE_MINIMIZED)) { return minSize; } return java.lang.Math.max(minSize, preferredResult); } return INFINITE; }
private boolean failsEnablement(java.lang.Object object) { if ((enablementExpression) == null) return false; try { org.eclipse.core.expressions.EvaluationContext context = new org.eclipse.core.expressions.EvaluationContext(null, object); context.setAllowPluginActivation(true); return enablementExpression.evaluate(context).equals(org.eclipse.core.expressions.EvaluationResult.FALSE); } catch (org.eclipse.core.runtime.CoreException e) { org.eclipse.ui.internal.WorkbenchPlugin.log(e); return false; } }
public org.eclipse.ui.internal.dnd.IDropTarget drag(org.eclipse.swt.widgets.Control currentControl, java.lang.Object draggedObject, org.eclipse.swt.graphics.Point position, final org.eclipse.swt.graphics.Rectangle dragRectangle) { if (!((draggedObject instanceof org.eclipse.ui.internal.ViewPane) || (draggedObject instanceof org.eclipse.ui.internal.PartTabFolder))) { return null; } final org.eclipse.ui.internal.LayoutPart part = ((org.eclipse.ui.internal.LayoutPart) (draggedObject)); if ((part.getWorkbenchWindow()) != (page.getWorkbenchWindow())) { return null; } return new org.eclipse.ui.internal.dnd.AbstractDropTarget() { public void drop() { org.eclipse.jface.window.Window window = part.getWindow(); if (window instanceof org.eclipse.ui.internal.DetachedWindow) { if (part instanceof org.eclipse.ui.internal.PartTabFolder) { window.getShell().setLocation(dragRectangle.x, dragRectangle.y); return; } org.eclipse.ui.internal.ILayoutContainer container = part.getContainer(); if (container instanceof org.eclipse.ui.internal.PartTabFolder) { if ((((org.eclipse.ui.internal.PartTabFolder) (container)).getItemCount()) == 1) { window.getShell().setLocation(dragRectangle.x, dragRectangle.y); return; } } } if (isZoomed()) zoomOut(); detach(part, dragRectangle.x, dragRectangle.y); } public org.eclipse.swt.graphics.Cursor getCursor() { return org.eclipse.ui.internal.DragCursors.getCursor(DragCursors.OFFSCREEN); } }; }
public org.eclipse.jface.viewers.ISelection getSelection() { if ((activePart) != null) { org.eclipse.jface.viewers.ISelectionProvider selectionProvider = activePart.getSite().getSelectionProvider(); return selectionProvider == null ? null : selectionProvider.getSelection(); } java.lang.Object selection = selectionService.getSelection(); if ((selection == null) || (selection instanceof org.eclipse.jface.viewers.ISelection)) { return ((org.eclipse.jface.viewers.ISelection) (selection)); } return new org.eclipse.jface.viewers.StructuredSelection(selection); }
public void run() { if ((workbenchWindow) == null) { return; } org.eclipse.ui.internal.ide.AboutInfo[] featureInfos = org.eclipse.ui.internal.ide.IDEWorkbenchPlugin.getDefault().getFeatureInfos(); java.util.ArrayList tipsAndTricksFeatures = new java.util.ArrayList(featureInfos.length); for (int i = 0; i < (featureInfos.length); i++) { if ((featureInfos[i].getTipsAndTricksHref()) != null) { tipsAndTricksFeatures.add(featureInfos[i]); } } org.eclipse.swt.widgets.Shell shell = workbenchWindow.getShell(); if ((tipsAndTricksFeatures.size()) == 0) { org.eclipse.jface.dialogs.MessageDialog.openInformation(shell, IDEWorkbenchMessages.TipsAndTricksMessageDialog_title, IDEWorkbenchMessages.TipsAndTricksMessageDialog_message); return; } org.eclipse.ui.internal.ide.AboutInfo[] features = new org.eclipse.ui.internal.ide.AboutInfo[tipsAndTricksFeatures.size()]; tipsAndTricksFeatures.toArray(features); org.eclipse.core.runtime.IProduct product = org.eclipse.core.runtime.Platform.getProduct(); org.eclipse.ui.internal.ide.FeatureSelectionDialog d = new org.eclipse.ui.internal.ide.FeatureSelectionDialog(shell, features, (product == null ? null : product.getId()), IDEWorkbenchMessages.TipsAndTricksPageSelectionDialog_title, IDEWorkbenchMessages.TipsAndTricksPageSelectionDialog_message, IIDEHelpContextIds.TIPS_AND_TRICKS_PAGE_SELECTION_DIALOG); if (((d.open()) != (org.eclipse.jface.window.Window.OK)) || ((d.getResult().length) != 1)) { return; } org.eclipse.ui.internal.ide.AboutInfo feature = ((org.eclipse.ui.internal.ide.AboutInfo) (d.getResult()[0])); if (feature != null) { final java.lang.String href = feature.getTipsAndTricksHref(); if (href != null) { org.eclipse.swt.custom.BusyIndicator.showWhile(shell.getDisplay(), new java.lang.Runnable() { public void run() { workbenchWindow.getWorkbench().getHelpSystem().displayHelpResource(href); } }); } else { org.eclipse.core.runtime.IStatus status = new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, IDEWorkbenchPlugin.IDE_WORKBENCH, 1, IDEWorkbenchMessages.TipsAndTricksErrorDialog_noHref, null); org.eclipse.jface.dialogs.ErrorDialog.openError(shell, IDEWorkbenchMessages.TipsAndTricksErrorDialog_title, IDEWorkbenchMessages.TipsAndTricksErrorDialog_noHref, status); } } else { org.eclipse.core.runtime.IStatus status = new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, IDEWorkbenchPlugin.IDE_WORKBENCH, 1, IDEWorkbenchMessages.TipsAndTricksErrorDialog_noHref, null); org.eclipse.jface.dialogs.ErrorDialog.openError(shell, IDEWorkbenchMessages.TipsAndTricksErrorDialog_title, IDEWorkbenchMessages.TipsAndTricksErrorDialog_noFeatures, status); } }
private void variableNameModified() { variableName = variableNameField.getText(); validationStatus = org.eclipse.jface.dialogs.IMessageProvider.NONE; okButton.setEnabled((((validateVariableName()) && (validateVariableValue())) && ((variableValue.length()) != 0))); nameEntered = true; }
protected boolean updateSelection(org.eclipse.jface.viewers.IStructuredSelection s) { if (!(selectionIsOfType(org.eclipse.core.resources.IResource.PROJECT))) return false; java.util.Iterator resources = getSelectedResources().iterator(); while (resources.hasNext()) { org.eclipse.core.resources.IProject currentResource = ((org.eclipse.core.resources.IProject) (resources.next())); if (currentResource.isOpen()) { return true; } } return false; }
private void showElementRecursive(org.eclipse.e4.ui.model.application.ui.MUIElement element, java.util.List<org.eclipse.e4.ui.model.application.ui.MUIElement> becomingVisible) { if (!(element.isToBeRendered())) return; if ((element instanceof org.eclipse.e4.ui.model.application.ui.advanced.MPlaceholder) && ((element.getWidget()) != null)) { org.eclipse.e4.ui.model.application.ui.advanced.MPlaceholder ph = ((org.eclipse.e4.ui.model.application.ui.advanced.MPlaceholder) (element)); org.eclipse.e4.ui.model.application.ui.MUIElement ref = ph.getRef(); ref.setCurSharedRef(ph); org.eclipse.swt.widgets.Composite phComp = ((org.eclipse.swt.widgets.Composite) (ph.getWidget())); org.eclipse.swt.widgets.Control refCtrl = ((org.eclipse.swt.widgets.Control) (ph.getRef().getWidget())); refCtrl.setParent(phComp); phComp.layout(new org.eclipse.swt.widgets.Control[]{ refCtrl }, SWT.DEFER); if ((ref instanceof org.eclipse.e4.ui.model.application.ui.basic.MPart) && ((ph.getParent().getWidget()) instanceof org.eclipse.swt.custom.CTabFolder)) { org.eclipse.e4.ui.model.application.ui.basic.MPart part = ((org.eclipse.e4.ui.model.application.ui.basic.MPart) (ref)); org.eclipse.swt.custom.CTabFolder ctf = ((org.eclipse.swt.custom.CTabFolder) (ph.getParent().getWidget())); org.eclipse.e4.ui.model.application.ui.menu.MToolBar tbModel = part.getToolbar(); if ((tbModel != null) && ((tbModel.getWidget()) != null)) { org.eclipse.swt.widgets.ToolBar oldTB = ((org.eclipse.swt.widgets.ToolBar) (tbModel.getWidget())); if ((oldTB.getParent()) instanceof org.eclipse.swt.custom.CTabFolder) { org.eclipse.swt.custom.CTabFolder oldCTF = ((org.eclipse.swt.custom.CTabFolder) (oldTB.getParent())); if ((oldCTF.getTopRight()) == oldTB) oldCTF.setTopRight(null); } oldTB.setParent(ctf); ctf.setTopRight(oldTB); } } element = ref; } if (element instanceof org.eclipse.e4.ui.model.application.ui.MContext) { org.eclipse.e4.core.contexts.IEclipseContext context = ((org.eclipse.e4.ui.model.application.ui.MContext) (element)).getContext(); if (context != null) { org.eclipse.e4.core.contexts.IEclipseContext newParentContext = modelService.getContainingContext(element); if ((context.getParent()) != newParentContext) { context.setParent(newParentContext); } } } if ((element instanceof org.eclipse.e4.ui.model.application.ui.basic.MPartStack) && (!(element.isVisible()))) { org.eclipse.e4.ui.model.application.ui.basic.MWindow window = modelService.getTopLevelWindowFor(element); java.lang.String trimId = (element.getElementId()) + "(minimized)"; org.eclipse.e4.ui.model.application.ui.advanced.MPerspective persp = modelService.getPerspectiveFor(element); if (persp != null) trimId = (((element.getElementId()) + '(') + (persp.getElementId())) + ')'; org.eclipse.e4.ui.model.application.ui.menu.MToolControl trimCtrl = ((org.eclipse.e4.ui.model.application.ui.menu.MToolControl) (modelService.find(trimId, window))); if (trimCtrl != null) trimCtrl.setVisible(true); } if ((element instanceof org.eclipse.e4.ui.model.application.ui.basic.MWindow) && ((element.getWidget()) != null)) { int visCount = 0; for (org.eclipse.e4.ui.model.application.ui.MUIElement kid : ((org.eclipse.e4.ui.model.application.ui.basic.MWindow) (element)).getChildren()) { if ((kid.isToBeRendered()) && (kid.isVisible())) visCount++; } if (visCount > 0) element.setVisible(true); } becomingVisible.add(element); if (element instanceof org.eclipse.e4.ui.model.application.ui.MGenericStack<?>) { org.eclipse.e4.ui.model.application.ui.MGenericStack<?> container = ((org.eclipse.e4.ui.model.application.ui.MGenericStack<?>) (element)); org.eclipse.e4.ui.model.application.ui.MUIElement curSel = container.getSelectedElement(); if ((curSel == null) && ((container.getChildren().size()) > 0)) curSel = container.getChildren().get(0); if (curSel != null) showElementRecursive(curSel, becomingVisible); } else if (element instanceof org.eclipse.e4.ui.model.application.ui.MElementContainer<?>) { org.eclipse.e4.ui.model.application.ui.MElementContainer<?> container = ((org.eclipse.e4.ui.model.application.ui.MElementContainer<?>) (element)); java.util.List<org.eclipse.e4.ui.model.application.ui.MUIElement> kids = new java.util.ArrayList<org.eclipse.e4.ui.model.application.ui.MUIElement>(container.getChildren()); for (org.eclipse.e4.ui.model.application.ui.MUIElement childElement : kids) { showElementRecursive(childElement, becomingVisible); } if (element instanceof org.eclipse.e4.ui.model.application.ui.basic.MWindow) { for (org.eclipse.e4.ui.model.application.ui.basic.MWindow w : ((org.eclipse.e4.ui.model.application.ui.basic.MWindow) (element)).getWindows()) { showElementRecursive(w, becomingVisible); } } else if (element instanceof org.eclipse.e4.ui.model.application.ui.advanced.MPerspective) { for (org.eclipse.e4.ui.model.application.ui.basic.MWindow w : ((org.eclipse.e4.ui.model.application.ui.advanced.MPerspective) (element)).getWindows()) { showElementRecursive(w, becomingVisible); } } } }
@java.lang.Override public void dispose() { getActionBars().getMenuManager().dispose(); org.eclipse.jface.action.IToolBarManager manager = getActionBars().getToolBarManager(); if (manager instanceof org.eclipse.jface.action.ToolBarManager) { ((org.eclipse.jface.action.ToolBarManager) (manager)).dispose(); } super.dispose(); }
public void saveState(org.eclipse.ui.internal.IMemento memento) { if ((current) != null) memento.putString(IWorkbenchConstants.TAG_ACTIVE_PAGE_ID, current.getID()); if ((mapTabToPart.size()) == 0) { if ((invisibleChildren) != null) { for (int i = 0; i < (invisibleChildren.length); i++) { org.eclipse.ui.internal.PartTabFolder.TabInfo info = invisibleChildren[i]; org.eclipse.ui.internal.IMemento childMem = memento.createChild(IWorkbenchConstants.TAG_PAGE); childMem.putString(IWorkbenchConstants.TAG_LABEL, info.tabText); childMem.putString(IWorkbenchConstants.TAG_CONTENT, info.part.getID()); } } } else { org.eclipse.ui.internal.LayoutPart[] children = getChildren(); org.eclipse.ui.internal.CTabItem[] keys = new org.eclipse.ui.internal.CTabItem[mapTabToPart.size()]; mapTabToPart.keySet().toArray(keys); if (children != null) { for (int i = 0; i < (children.length); i++) { org.eclipse.ui.internal.IMemento childMem = memento.createChild(IWorkbenchConstants.TAG_PAGE); childMem.putString(IWorkbenchConstants.TAG_CONTENT, children[i].getID()); boolean found = false; for (int j = 0; j < (keys.length); j++) { if ((mapTabToPart.get(keys[j])) == (children[i])) { childMem.putString(IWorkbenchConstants.TAG_LABEL, keys[j].getText()); found = true; break; } } if (!found) { for (int j = 0; j < (invisibleChildren.length); j++) { if ((invisibleChildren[j].part) == (children[i])) { childMem.putString(IWorkbenchConstants.TAG_LABEL, invisibleChildren[j].tabText); found = true; break; } } } if (!found) { childMem.putString(IWorkbenchConstants.TAG_LABEL, "LabelNotFound"); } } } } }
private org.eclipse.e4.ui.model.application.ui.MExpression merge(org.eclipse.e4.ui.model.application.ui.MExpression expressionA, org.eclipse.e4.ui.model.application.ui.MExpression expressionB) { org.eclipse.core.expressions.Expression coreExpressionA = getExpression(expressionA); org.eclipse.core.expressions.Expression coreExpressionB = getExpression(expressionB); if ((coreExpressionA == null) || (coreExpressionB == null)) { return null; } if (coreExpressionA.equals(coreExpressionB)) { return expressionA; } org.eclipse.core.internal.expressions.OrExpression expression = new org.eclipse.core.internal.expressions.OrExpression(); expression.add(coreExpressionA); expression.add(coreExpressionB); org.eclipse.e4.ui.model.application.ui.MCoreExpression exp = UiFactoryImpl.eINSTANCE.createCoreExpression(); exp.setCoreExpressionId("programmatic.value"); exp.setCoreExpression(expression); return exp; }
public void partDeactivated(org.eclipse.e4.ui.model.application.ui.basic.MPart part) { firePartDeactivated(part); java.lang.Object client = part.getObject(); if (client instanceof org.eclipse.ui.internal.e4.compatibility.CompatibilityPart) { org.eclipse.ui.internal.e4.compatibility.CompatibilityPart compatibilityPart = ((org.eclipse.ui.internal.e4.compatibility.CompatibilityPart) (client)); org.eclipse.ui.IWorkbenchPartSite site = compatibilityPart.getPart().getSite(); ((org.eclipse.ui.internal.PartSite) (site)).deactivateActionBars((site instanceof org.eclipse.ui.internal.ViewSite)); } org.eclipse.ui.internal.WorkbenchWindow wwindow = ((org.eclipse.ui.internal.WorkbenchWindow) (getWorkbenchWindow())); if (!(wwindow.isClosing())) { wwindow.getStatusLineManager().update(false); } }
public void run() { java.lang.String oldValue = ccombo.getText(); try { updating = true; if (attribute.equals(SWTProperties.TEXT)) { java.lang.String stringValue = (value != null) ? value.toString() : ""; ccombo.setText(stringValue); } else if (attribute.equals(SWTProperties.SELECTION)) { java.lang.String[] items = ccombo.getItems(); int index = -1; if ((items != null) && (value != null)) { for (int i = 0; i < (items.length); i++) { if (value.equals(items[i])) { index = i; break; } } if (index == (-1)) { ccombo.setText(((java.lang.String) (value))); } else { ccombo.select(index); } } } } finally { updating = false; } fireChangeEvent(ChangeEvent.CHANGE, oldValue, ccombo.getText()); }
public org.eclipse.ui.IWorkbenchPartReference getReference(org.eclipse.ui.IWorkbenchPart part) { if (part == null) return null; org.eclipse.ui.internal.PartPane pane = ((org.eclipse.ui.internal.PartSite) (part.getSite())).getPane(); if (pane instanceof org.eclipse.ui.internal.MultiEditorInnerPane) { org.eclipse.ui.internal.MultiEditorInnerPane innerPane = ((org.eclipse.ui.internal.MultiEditorInnerPane) (pane)); return innerPane.getParentPane().getPartReference(); } if (pane == null) { org.eclipse.ui.IViewReference[] refs = getViewReferences(); for (int i = 0; i < (refs.length); i++) { if ((refs[i].getPart(false)) == part) return refs[i]; } return null; } return pane.getPartReference(); }
public org.eclipse.jface.resource.ImageDescriptor getImageDescriptor() { if ((imageDescriptor) == null) { java.lang.String iconURI = descriptor.getIconURI(); if (iconURI == null) { org.eclipse.ui.IWorkbench workbench = ((org.eclipse.ui.IWorkbench) (application.getContext().get(org.eclipse.ui.IWorkbench.class.getName()))); imageDescriptor = workbench.getSharedImages().getImageDescriptor(ISharedImages.IMG_DEF_VIEW); } else { org.eclipse.e4.ui.workbench.swt.util.ISWTResourceUtiltities utility = ((org.eclipse.e4.ui.workbench.swt.util.ISWTResourceUtiltities) (application.getContext().get(org.eclipse.e4.workbench.ui.IResourceUtiltities.class.getName()))); imageDescriptor = utility.imageDescriptorFromURI(org.eclipse.emf.common.util.URI.createURI(iconURI)); } } return imageDescriptor; }
protected org.eclipse.jface.dialogs.Control createDialogArea(org.eclipse.jface.dialogs.Composite parent) { org.eclipse.jface.dialogs.Composite composite = ((org.eclipse.jface.dialogs.Composite) (super.createDialogArea(parent))); ((org.eclipse.jface.dialogs.GridLayout) (composite.getLayout())).numColumns = 2; org.eclipse.jface.dialogs.Image image = getImage(); if (image != null) { org.eclipse.jface.dialogs.Label label = new org.eclipse.jface.dialogs.Label(composite, 0); image.setBackground(label.getBackground()); label.setImage(image); label.setLayoutData(new org.eclipse.jface.dialogs.GridData(((GridData.HORIZONTAL_ALIGN_CENTER) | (GridData.VERTICAL_ALIGN_BEGINNING)))); } if ((message) != null) { org.eclipse.jface.dialogs.Label label = new org.eclipse.jface.dialogs.Label(composite, SWT.WRAP); label.setText(message); org.eclipse.jface.dialogs.GridData data = new org.eclipse.jface.dialogs.GridData(((((GridData.GRAB_HORIZONTAL) | (GridData.GRAB_VERTICAL)) | (GridData.HORIZONTAL_ALIGN_FILL)) | (GridData.VERTICAL_ALIGN_CENTER))); data.widthHint = convertHorizontalDLUsToPixels(IDialogConstants.MINIMUM_MESSAGE_AREA_WIDTH); label.setLayoutData(data); label.setFont(parent.getFont()); } return composite; }
public java.lang.Object preCloseParts(java.util.List editorsToClose, boolean save, final org.eclipse.ui.IWorkbenchWindow window) { org.eclipse.ui.internal.SaveablesList.PostCloseInfo postCloseInfo = new org.eclipse.ui.internal.SaveablesList.PostCloseInfo(); for (java.util.Iterator it = editorsToClose.iterator(); it.hasNext();) { org.eclipse.ui.IWorkbenchPart part = ((org.eclipse.ui.IWorkbenchPart) (it.next())); postCloseInfo.partsClosing.add(part); if (part instanceof org.eclipse.ui.ISaveablePart) { org.eclipse.ui.ISaveablePart saveablePart = ((org.eclipse.ui.ISaveablePart) (part)); if (save && (!(saveablePart.isSaveOnCloseNeeded()))) { continue; } } if (save && (part instanceof org.eclipse.ui.ISaveablePart2)) { org.eclipse.ui.ISaveablePart2 saveablePart2 = ((org.eclipse.ui.ISaveablePart2) (part)); int response = org.eclipse.ui.internal.SaveableHelper.savePart(saveablePart2, window, true); if (response == (org.eclipse.ui.ISaveablePart2.CANCEL)) { return null; } else if (response != (org.eclipse.ui.ISaveablePart2.DEFAULT)) { continue; } } org.eclipse.ui.Saveable[] modelsFromSource = getSaveables(part); for (int i = 0; i < (modelsFromSource.length); i++) { incrementRefCount(postCloseInfo.modelsDecrementing, modelsFromSource[i]); } } fillModelsClosing(postCloseInfo.modelsClosing, postCloseInfo.modelsDecrementing); if (save) { boolean canceled = promptForSavingIfNecessary(window, postCloseInfo.modelsClosing, postCloseInfo.modelsDecrementing, true); if (canceled) { return null; } } return postCloseInfo; }
public boolean isApplicableTo(java.lang.Object object) { java.lang.String nameFilter = pageElement.getAttribute(PropertyPagesRegistryReader.ATT_NAME_FILTER); if (nameFilter != null) { java.lang.String objectName = object.toString(); if (object instanceof org.eclipse.core.runtime.IAdaptable) { org.eclipse.ui.model.IWorkbenchAdapter adapter = ((org.eclipse.ui.model.IWorkbenchAdapter) (((org.eclipse.core.runtime.IAdaptable) (object)).getAdapter(org.eclipse.ui.model.IWorkbenchAdapter.class))); if (adapter != null) { java.lang.String elementName = adapter.getLabel(object); if (elementName != null) { objectName = elementName; } } } if (!(org.eclipse.ui.internal.dialogs.SelectionEnabler.verifyNameMatch(objectName, nameFilter))) return false; } if ((filterProperties) == null) return true; org.eclipse.ui.IActionFilter filter = null; java.lang.Object testObject = object; if (((isResourceContributor) && (!(object instanceof org.eclipse.core.resources.IResource))) && (object instanceof org.eclipse.core.runtime.IAdaptable)) { java.lang.Object result = ((org.eclipse.core.runtime.IAdaptable) (object)).getAdapter(org.eclipse.core.resources.IResource.class); if (result != null) testObject = result; } if (testObject instanceof org.eclipse.ui.IActionFilter) filter = ((org.eclipse.ui.IActionFilter) (testObject)); else if (testObject instanceof org.eclipse.core.runtime.IAdaptable) filter = ((org.eclipse.ui.IActionFilter) (((org.eclipse.core.runtime.IAdaptable) (object)).getAdapter(org.eclipse.ui.IActionFilter.class))); if (filter != null) return testCustom(testObject, filter); else return true; }
public void setImage(org.eclipse.swt.graphics.Image image) { this.image = image; if ((disabledImage) != null) disabledImage.dispose(); if (((!(isEnabled())) && (image != null)) && (!(image.isDisposed()))) disabledImage = new org.eclipse.swt.graphics.Image(image.getDevice(), image, org.eclipse.swt.SWT.IMAGE_DISABLE); }
private void paint(PaintEvent e) { Rectangle bounds = getBounds(); e.gc.setForeground(widgetNormalShadow); e.gc.drawLine(0, 0, ((bounds.width) - 1), 0); e.gc.setForeground(listBackground); e.gc.drawLine(0, 1, ((bounds.width) - 1), 1); if (selected) { e.gc.setBackground(listBackground); e.gc.fillRectangle(0, 2, bounds.width, ((bounds.height) - 1)); } else if ((hover) && (tab.isIndented())) { e.gc.setBackground(indentedHoverBackground); e.gc.fillRectangle(0, 2, ((bounds.width) - 1), ((bounds.height) - 1)); } else if (hover) { e.gc.setForeground(hoverGradientStart); e.gc.setBackground(hoverGradientEnd); e.gc.fillGradientRectangle(0, 2, ((bounds.width) - 1), ((bounds.height) - 1), true); } else if (tab.isIndented()) { e.gc.setBackground(indentedDefaultBackground); e.gc.fillRectangle(0, 2, ((bounds.width) - 1), ((bounds.height) - 1)); } else { e.gc.setForeground(defaultGradientStart); e.gc.setBackground(defaultGradientEnd); e.gc.fillGradientRectangle(0, 2, ((bounds.width) - 1), ((bounds.height) - 1), true); } if (!(selected)) { e.gc.setForeground(widgetNormalShadow); e.gc.drawLine(((bounds.width) - 1), 1, ((bounds.width) - 1), ((bounds.height) + 1)); } int textIndent = org.eclipse.ui.internal.views.properties.tabbed.view.TabbedPropertyList.INDENT; org.eclipse.swt.graphics.FontMetrics fm = e.gc.getFontMetrics(); int height = fm.getHeight(); int textMiddle = ((bounds.height) - height) / 2; if (((selected) && ((tab.getImage()) != null)) && (!(tab.getImage().isDisposed()))) { if (tab.isIndented()) { textIndent = textIndent + (org.eclipse.ui.internal.views.properties.tabbed.view.TabbedPropertyList.INDENT); } else { textIndent = textIndent - 3; } e.gc.drawImage(tab.getImage(), textIndent, (textMiddle - 1)); textIndent = (textIndent + 16) + 5; } else if (tab.isIndented()) { textIndent = textIndent + (org.eclipse.ui.internal.views.properties.tabbed.view.TabbedPropertyList.INDENT); } e.gc.setForeground(widgetForeground); if (selected) { e.gc.setFont(org.eclipse.jface.resource.JFaceResources.getFontRegistry().getBold(JFaceResources.DEFAULT_FONT)); } e.gc.drawText(tab.getText(), textIndent, textMiddle, true); if ((((org.eclipse.ui.internal.views.properties.tabbed.view.TabbedPropertyList) (getParent())).focus) && (selected)) { org.eclipse.swt.graphics.Point point = e.gc.textExtent(tab.getText()); e.gc.drawLine(textIndent, ((bounds.height) - 4), (textIndent + (point.x)), ((bounds.height) - 4)); } if (!(hover)) { e.gc.setForeground(listBackground); e.gc.drawLine(0, ((bounds.height) - 1), ((bounds.width) - 2), ((bounds.height) - 1)); } }
@java.lang.Override public void hideChild(org.eclipse.e4.ui.model.application.ui.MElementContainer<org.eclipse.e4.ui.model.application.ui.MUIElement> parentElement, org.eclipse.e4.ui.model.application.ui.MUIElement child) { super.hideChild(parentElement, child); if ((child.getRenderer()) != null) { org.eclipse.swt.widgets.Widget widget = ((org.eclipse.swt.widgets.Widget) (child.getWidget())); if ((widget != null) && (!(widget.isDisposed()))) { widget.dispose(); } org.eclipse.swt.widgets.ToolBar toolbar = ((org.eclipse.swt.widgets.ToolBar) (getUIContainer(child))); if ((toolbar != null) && (!(toolbar.isDisposed()))) { toolbar.getShell().layout(new org.eclipse.swt.widgets.Control[]{ toolbar }, SWT.DEFER); } } }
public void update(java.lang.String propertyName) { if ((widget) != null) { boolean textChanged = (propertyName == null) || (propertyName.equals(IAction.TEXT)); boolean imageChanged = (propertyName == null) || (propertyName.equals(IAction.IMAGE)); boolean tooltipTextChanged = (propertyName == null) || (propertyName.equals(IAction.TOOL_TIP_TEXT)); boolean enableStateChanged = ((propertyName == null) || (propertyName.equals(IAction.ENABLED))) || (propertyName.equals(IContributionManagerOverrides.P_ENABLED)); boolean checkChanged = (((action.getStyle()) == (IAction.AS_CHECK_BOX)) || ((action.getStyle()) == (IAction.AS_RADIO_BUTTON))) && ((propertyName == null) || (propertyName.equals(IAction.CHECKED))); if ((widget) instanceof org.eclipse.swt.widgets.ToolItem) { org.eclipse.swt.widgets.ToolItem ti = ((org.eclipse.swt.widgets.ToolItem) (widget)); java.lang.String text = action.getText(); boolean showText = (text != null) && ((((getMode()) & (org.eclipse.jface.action.ActionContributionItem.MODE_FORCE_TEXT)) != 0) || (!(hasImages(action)))); if (showText && (text != null)) { text = org.eclipse.jface.action.Action.removeAcceleratorText(text); text = org.eclipse.jface.action.Action.removeMnemonics(text); } if (textChanged) { java.lang.String textToSet = (showText) ? text : ""; boolean rightStyle = ((ti.getParent().getStyle()) & (org.eclipse.swt.SWT.RIGHT)) != 0; if (rightStyle || (!(ti.getText().equals(textToSet)))) { ti.setText(textToSet); } } if (imageChanged) { updateImages((!showText)); } if (tooltipTextChanged || textChanged) { java.lang.String toolTip = action.getToolTipText(); if ((toolTip == null) || ((toolTip.length()) == 0)) { toolTip = text; } org.eclipse.jface.action.ExternalActionManager.ICallback callback = org.eclipse.jface.action.ExternalActionManager.getInstance().getCallback(); java.lang.String commandId = action.getActionDefinitionId(); if (((callback != null) && (commandId != null)) && (toolTip != null)) { java.lang.String acceleratorText = callback.getAcceleratorText(commandId); if ((acceleratorText != null) && ((acceleratorText.length()) != 0)) { toolTip = org.eclipse.jface.resource.JFaceResources.format("Toolbar_Tooltip_Accelerator", new java.lang.Object[]{ toolTip, acceleratorText }); } } if ((!showText) || ((toolTip != null) && (!(toolTip.equals(text))))) { ti.setToolTipText(toolTip); } else { ti.setToolTipText(null); } } if (enableStateChanged) { boolean shouldBeEnabled = (action.isEnabled()) && (isEnabledAllowed()); if ((ti.getEnabled()) != shouldBeEnabled) { ti.setEnabled(shouldBeEnabled); } } if (checkChanged) { boolean bv = action.isChecked(); if ((ti.getSelection()) != bv) { ti.setSelection(bv); } } return; } if ((widget) instanceof org.eclipse.swt.widgets.MenuItem) { org.eclipse.swt.widgets.MenuItem mi = ((org.eclipse.swt.widgets.MenuItem) (widget)); if (textChanged) { int accelerator = 0; java.lang.String acceleratorText = null; org.eclipse.jface.action.IAction updatedAction = getAction(); java.lang.String text = null; accelerator = updatedAction.getAccelerator(); org.eclipse.jface.action.ExternalActionManager.ICallback callback = org.eclipse.jface.action.ExternalActionManager.getInstance().getCallback(); if (((accelerator != 0) && (callback != null)) && (callback.isAcceleratorInUse(accelerator))) { accelerator = 0; } final java.lang.String commandId = updatedAction.getActionDefinitionId(); if ((("gtk".equals(org.eclipse.swt.SWT.getPlatform())) && (callback instanceof org.eclipse.jface.action.ExternalActionManager.IBindingManagerCallback)) && (commandId != null)) { final org.eclipse.jface.action.ExternalActionManager.IBindingManagerCallback bindingManagerCallback = ((org.eclipse.jface.action.ExternalActionManager.IBindingManagerCallback) (callback)); final org.eclipse.jface.bindings.keys.IKeyLookup lookup = org.eclipse.jface.bindings.keys.KeyLookupFactory.getDefault(); final org.eclipse.jface.bindings.TriggerSequence[] triggerSequences = bindingManagerCallback.getActiveBindingsFor(commandId); for (int i = 0; i < (triggerSequences.length); i++) { final org.eclipse.jface.bindings.TriggerSequence triggerSequence = triggerSequences[i]; final org.eclipse.jface.bindings.Trigger[] triggers = triggerSequence.getTriggers(); if ((triggers.length) == 1) { final org.eclipse.jface.bindings.Trigger trigger = triggers[0]; if (trigger instanceof org.eclipse.jface.bindings.keys.KeyStroke) { final org.eclipse.jface.bindings.keys.KeyStroke currentKeyStroke = ((org.eclipse.jface.bindings.keys.KeyStroke) (trigger)); final int currentNaturalKey = currentKeyStroke.getNaturalKey(); if (((currentKeyStroke.getModifierKeys()) == ((lookup.getCtrl()) | (lookup.getShift()))) && ((((currentNaturalKey >= '0') && (currentNaturalKey <= '9')) || ((currentNaturalKey >= 'A') && (currentNaturalKey <= 'F'))) || (currentNaturalKey == 'U'))) { accelerator = (currentKeyStroke.getModifierKeys()) | currentNaturalKey; acceleratorText = triggerSequence.format(); break; } } } } } if (accelerator == 0) { if ((callback != null) && (commandId != null)) { acceleratorText = callback.getAcceleratorText(commandId); } } org.eclipse.jface.action.IContributionManagerOverrides overrides = null; if ((getParent()) != null) { overrides = getParent().getOverrides(); } if (overrides != null) { text = getParent().getOverrides().getText(this); } mi.setAccelerator(accelerator); if (text == null) { text = updatedAction.getText(); } if ((text != null) && (acceleratorText == null)) { acceleratorText = org.eclipse.jface.action.LegacyActionTools.extractAcceleratorText(text); if ((acceleratorText == null) && (accelerator != 0)) { acceleratorText = org.eclipse.jface.action.Action.convertAccelerator(accelerator); } } if (text == null) { text = ""; } else { text = org.eclipse.jface.action.Action.removeAcceleratorText(text); } if (acceleratorText == null) { mi.setText(text); } else { mi.setText(((text + '\t') + acceleratorText)); } } if (imageChanged) { updateImages(false); } if (enableStateChanged) { boolean shouldBeEnabled = (action.isEnabled()) && (isEnabledAllowed()); if ((mi.getEnabled()) != shouldBeEnabled) { mi.setEnabled(shouldBeEnabled); } } if (checkChanged) { boolean bv = action.isChecked(); if ((mi.getSelection()) != bv) { mi.setSelection(bv); } } return; } if ((widget) instanceof org.eclipse.swt.widgets.Button) { org.eclipse.swt.widgets.Button button = ((org.eclipse.swt.widgets.Button) (widget)); if (imageChanged && (updateImages(false))) { textChanged = false; } if (textChanged) { java.lang.String text = action.getText(); if (text == null) { text = ""; } else { text = org.eclipse.jface.action.Action.removeAcceleratorText(text); } button.setText(text); } if (tooltipTextChanged) { button.setToolTipText(action.getToolTipText()); } if (enableStateChanged) { boolean shouldBeEnabled = (action.isEnabled()) && (isEnabledAllowed()); if ((button.getEnabled()) != shouldBeEnabled) { button.setEnabled(shouldBeEnabled); } } if (checkChanged) { boolean bv = action.isChecked(); if ((button.getSelection()) != bv) { button.setSelection(bv); } } return; } } }
private boolean createExistingProject(final org.eclipse.ui.internal.wizards.datatransfer.WizardProjectsImportPage.ProjectRecord record, org.eclipse.core.runtime.IProgressMonitor monitor) throws java.lang.InterruptedException, java.lang.reflect.InvocationTargetException { java.lang.String projectName = record.getProjectName(); final org.eclipse.core.resources.IWorkspace workspace = org.eclipse.core.resources.ResourcesPlugin.getWorkspace(); final org.eclipse.core.resources.IProject project = workspace.getRoot().getProject(projectName); createdProjects.add(project); if ((record.description) == null) { record.description = workspace.newProjectDescription(projectName); org.eclipse.core.runtime.IPath locationPath = new org.eclipse.core.runtime.Path(record.projectSystemFile.getAbsolutePath()); if (org.eclipse.core.runtime.Platform.getLocation().isPrefixOf(locationPath)) { record.description.setLocation(null); } else { record.description.setLocation(locationPath); } } else { record.description.setName(projectName); } if ((record.projectArchiveFile) != null) { java.util.List fileSystemObjects = structureProvider.getChildren(record.parent); structureProvider.setStrip(record.level); org.eclipse.ui.wizards.datatransfer.ImportOperation operation = new org.eclipse.ui.wizards.datatransfer.ImportOperation(project.getFullPath(), structureProvider.getRoot(), structureProvider, this, fileSystemObjects); operation.setContext(getShell()); operation.run(monitor); return true; } java.io.File importSource = null; if (copyFiles) { java.net.URI locationURI = record.description.getLocationURI(); if (locationURI != null) { org.eclipse.core.runtime.IStatus result = org.eclipse.core.resources.ResourcesPlugin.getWorkspace().validateProjectLocationURI(project, locationURI); if (!(result.isOK())) throw new java.lang.reflect.InvocationTargetException(new org.eclipse.core.runtime.CoreException(result)); importSource = new java.io.File(locationURI); org.eclipse.core.resources.IProjectDescription desc = workspace.newProjectDescription(projectName); desc.setBuildSpec(record.description.getBuildSpec()); desc.setComment(record.description.getComment()); desc.setDynamicReferences(record.description.getDynamicReferences()); desc.setNatureIds(record.description.getNatureIds()); desc.setReferencedProjects(record.description.getReferencedProjects()); record.description = desc; } } try { monitor.beginTask(DataTransferMessages.WizardProjectsImportPage_CreateProjectsTask, 100); project.create(record.description, new org.eclipse.core.runtime.SubProgressMonitor(monitor, 30)); project.open(org.eclipse.core.resources.IResource.BACKGROUND_REFRESH, new org.eclipse.core.runtime.SubProgressMonitor(monitor, 70)); } catch (org.eclipse.core.runtime.CoreException e) { throw new java.lang.reflect.InvocationTargetException(e); } finally { monitor.done(); } if ((copyFiles) && (importSource != null)) { java.util.List filesToImport = FileSystemStructureProvider.INSTANCE.getChildren(importSource); org.eclipse.ui.wizards.datatransfer.ImportOperation operation = new org.eclipse.ui.wizards.datatransfer.ImportOperation(project.getFullPath(), importSource, org.eclipse.ui.wizards.datatransfer.FileSystemStructureProvider.INSTANCE, this, filesToImport); operation.setContext(getShell()); operation.setOverwriteResources(true); operation.setCreateContainerStructure(false); operation.run(monitor); } return true; }
protected java.lang.Object[] getSortedChildren(java.lang.Object parentElementOrTreePath) { java.lang.Object[] result = getFilteredChildren(parentElementOrTreePath); org.eclipse.jface.viewers.ViewerSorter sorter = getSorter(); if (sorter instanceof org.eclipse.jface.viewers.TreePathViewerSorter) { org.eclipse.jface.viewers.TreePathViewerSorter tpvs = ((org.eclipse.jface.viewers.TreePathViewerSorter) (sorter)); result = ((java.lang.Object[]) (result.clone())); org.eclipse.jface.viewers.TreePath path = null; if (parentElementOrTreePath instanceof org.eclipse.jface.viewers.TreePath) { path = ((org.eclipse.jface.viewers.TreePath) (parentElementOrTreePath)); } else { java.lang.Object parent = parentElementOrTreePath; org.eclipse.swt.widgets.Widget w = internalGetWidgetToSelect(parent); if (w != null) { path = internalGetSorterParentPath(w, sorter); } if (path == null) { path = TreePath.EMPTY.createChildPath(parentElementOrTreePath); } } tpvs.sort(this, path, result); } else if (sorter != null) { result = ((java.lang.Object[]) (result.clone())); sorter.sort(this, result); } return result; }
protected void addItems(java.util.List list) { list.add(new org.eclipse.jface.action.ActionContributionItem(newProjectAction)); list.add(new org.eclipse.jface.action.Separator()); if (addShortcuts(list)) { list.add(new org.eclipse.jface.action.Separator()); } if (hasExamples()) { list.add(new org.eclipse.jface.action.ActionContributionItem(newExampleAction)); list.add(new org.eclipse.jface.action.Separator()); } list.add(new org.eclipse.jface.action.ActionContributionItem(getShowDialogAction())); }
public static boolean isEnabled(org.eclipse.ui.activities.IActivityManager activityManager, java.lang.String categoryId) { org.eclipse.ui.activities.ICategory category = activityManager.getCategory(categoryId); if (category.isDefined()) { java.util.Set activityIds = org.eclipse.ui.activities.WorkbenchActivityHelper.getActivityIdsForCategory(category); if (activityManager.getEnabledActivityIds().containsAll(activityIds)) { return true; } } return false; }
public org.eclipse.core.runtime.IStatus runInUIThread(org.eclipse.core.runtime.IProgressMonitor monitor) { synchronized(this) { if (shutdown) { return org.eclipse.core.runtime.Status.CANCEL_STATUS; } } if ((currentIndex) == (org.eclipse.ui.internal.decorators.DecorationScheduler.NEEDS_INIT)) { if (hasPendingUpdates()) { resetState(); return org.eclipse.core.runtime.Status.OK_STATUS; } setUpUpdates(); } if ((listeners.length) == 0) { resetState(); return org.eclipse.core.runtime.Status.OK_STATUS; } monitor.beginTask(WorkbenchMessages.DecorationScheduler_UpdatingTask, org.eclipse.core.runtime.IProgressMonitor.UNKNOWN); long startTime = java.lang.System.currentTimeMillis(); while ((currentIndex) < (listeners.length)) { org.eclipse.jface.viewers.ILabelProviderListener listener = listeners[currentIndex]; (currentIndex)++; if (!(removedListeners.contains(listener))) { decoratorManager.fireListener(labelProviderChangedEvent, listener); } if (((java.lang.System.currentTimeMillis()) - startTime) >= ((org.eclipse.ui.internal.decorators.DecorationScheduler.UPDATE_DELAY) / 2)) { break; } } monitor.done(); if ((currentIndex) >= (listeners.length)) { resetState(); if (!(hasPendingUpdates())) { decorated(); } labelProviderChangedEvent = null; listeners = org.eclipse.ui.internal.decorators.DecorationScheduler.EMPTY_LISTENER_LIST; } else { schedule(org.eclipse.ui.internal.decorators.DecorationScheduler.UPDATE_DELAY); } return org.eclipse.core.runtime.Status.OK_STATUS; }
private int getOpenMode() { if ((configurationElement) == null) { return openMode; } else if ((getLauncher()) != null) { return org.eclipse.ui.internal.registry.EditorDescriptor.OPEN_EXTERNAL; } else if ((getFileName()) != null) { return org.eclipse.ui.internal.registry.EditorDescriptor.OPEN_EXTERNAL; } else if ((getPluginId()) != null) { return org.eclipse.ui.internal.registry.EditorDescriptor.OPEN_INTERNAL; } else { return 0; } }
public static void main(java.lang.String[] args) { org.eclipse.swt.widgets.Display display = new org.eclipse.swt.widgets.Display(); org.eclipse.swt.widgets.Shell shell = new org.eclipse.swt.widgets.Shell(display, org.eclipse.swt.SWT.CLOSE); shell.setSize(400, 400); shell.setLayout(new org.eclipse.swt.layout.GridLayout()); org.eclipse.jface.snippets.viewers.Snippet010OwnerDraw example = new org.eclipse.jface.snippets.viewers.Snippet010OwnerDraw(); example.createPartControl(shell); shell.open(); while (!(shell.isDisposed())) { if (!(display.readAndDispatch())) display.sleep(); } display.dispose(); }
private boolean processView(org.eclipse.core.runtime.IConfigurationElement element) { java.lang.String id = element.getAttribute(IWorkbenchRegistryConstants.ATT_ID); java.lang.String relative = element.getAttribute(IWorkbenchRegistryConstants.ATT_RELATIVE); java.lang.String relationship = element.getAttribute(IWorkbenchRegistryConstants.ATT_RELATIONSHIP); java.lang.String ratioString = element.getAttribute(IWorkbenchRegistryConstants.ATT_RATIO); boolean visible = !(org.eclipse.ui.internal.registry.PerspectiveExtensionReader.VAL_FALSE.equals(element.getAttribute(IWorkbenchRegistryConstants.ATT_VISIBLE))); java.lang.String closeable = element.getAttribute(IWorkbenchRegistryConstants.ATT_CLOSEABLE); java.lang.String moveable = element.getAttribute(IWorkbenchRegistryConstants.ATT_MOVEABLE); java.lang.String standalone = element.getAttribute(IWorkbenchRegistryConstants.ATT_STANDALONE); java.lang.String showTitle = element.getAttribute(IWorkbenchRegistryConstants.ATT_SHOW_TITLE); java.lang.String minVal = element.getAttribute(IWorkbenchRegistryConstants.ATT_MINIMIZED); boolean minimized = (minVal != null) && (org.eclipse.ui.internal.registry.PerspectiveExtensionReader.VAL_TRUE.equals(minVal)); float ratio; if (id == null) { logMissingAttribute(element, IWorkbenchRegistryConstants.ATT_ID); return false; } if (relationship == null) { logMissingAttribute(element, IWorkbenchRegistryConstants.ATT_RELATIONSHIP); return false; } if ((!(org.eclipse.ui.internal.registry.PerspectiveExtensionReader.VAL_FAST.equals(relationship))) && (relative == null)) { logError(element, (((((("Attribute '" + (IWorkbenchRegistryConstants.ATT_RELATIVE)) + "' not defined. This attribute is required when ") + (IWorkbenchRegistryConstants.ATT_RELATIONSHIP)) + "=\"") + relationship) + "\".")); return false; } if (ratioString == null) { ratio = org.eclipse.ui.IPageLayout.NULL_RATIO; } else { try { ratio = new java.lang.Float(ratioString).floatValue(); } catch (java.lang.NumberFormatException e) { return false; } if ((ratio < (org.eclipse.ui.IPageLayout.RATIO_MIN)) || (ratio > (org.eclipse.ui.IPageLayout.RATIO_MAX))) { ratio = org.eclipse.ui.IPageLayout.INVALID_RATIO; } } boolean stack = false; boolean fast = false; int intRelation = 0; if (relationship.equals(org.eclipse.ui.internal.registry.PerspectiveExtensionReader.VAL_LEFT)) { intRelation = org.eclipse.ui.IPageLayout.LEFT; } else if (relationship.equals(org.eclipse.ui.internal.registry.PerspectiveExtensionReader.VAL_RIGHT)) { intRelation = org.eclipse.ui.IPageLayout.RIGHT; } else if (relationship.equals(org.eclipse.ui.internal.registry.PerspectiveExtensionReader.VAL_TOP)) { intRelation = org.eclipse.ui.IPageLayout.TOP; } else if (relationship.equals(org.eclipse.ui.internal.registry.PerspectiveExtensionReader.VAL_BOTTOM)) { intRelation = org.eclipse.ui.IPageLayout.BOTTOM; } else if (relationship.equals(org.eclipse.ui.internal.registry.PerspectiveExtensionReader.VAL_STACK)) { stack = true; } else if (relationship.equals(org.eclipse.ui.internal.registry.PerspectiveExtensionReader.VAL_FAST)) { fast = true; } else { return false; } if (visible) { pageLayout.removePlaceholder(id); } if (stack) { if (visible) { pageLayout.stackView(id, relative); } else { pageLayout.stackPlaceholder(id, relative); } } else if (fast) { if (ratio == (org.eclipse.ui.IPageLayout.NULL_RATIO)) { pageLayout.addFastView(id); } else { pageLayout.addFastView(id, ratio); } } else { if ((ratio == (org.eclipse.ui.IPageLayout.NULL_RATIO)) || (ratio == (org.eclipse.ui.IPageLayout.INVALID_RATIO))) { ratio = org.eclipse.ui.IPageLayout.DEFAULT_VIEW_RATIO; } if (visible) { if (org.eclipse.ui.internal.registry.PerspectiveExtensionReader.VAL_TRUE.equals(standalone)) { pageLayout.addStandaloneView(id, (!(org.eclipse.ui.internal.registry.PerspectiveExtensionReader.VAL_FALSE.equals(showTitle))), intRelation, ratio, relative); } else { pageLayout.addView(id, intRelation, ratio, relative, minimized); } } else { if (org.eclipse.ui.internal.registry.PerspectiveExtensionReader.VAL_TRUE.equals(standalone)) { pageLayout.addStandaloneViewPlaceholder(id, intRelation, ratio, relative, (!(org.eclipse.ui.internal.registry.PerspectiveExtensionReader.VAL_FALSE.equals(showTitle)))); } else { pageLayout.addPlaceholder(id, intRelation, ratio, relative); } } } org.eclipse.ui.IViewLayout viewLayout = pageLayout.getViewLayout(id); if (viewLayout != null) { if (closeable != null) { viewLayout.setCloseable((!(org.eclipse.ui.internal.registry.PerspectiveExtensionReader.VAL_FALSE.equals(closeable)))); } if (moveable != null) { viewLayout.setMoveable((!(org.eclipse.ui.internal.registry.PerspectiveExtensionReader.VAL_FALSE.equals(moveable)))); } } return true; }
private void setPerspective(org.eclipse.ui.internal.Perspective newPersp) { org.eclipse.ui.internal.Perspective oldPersp = getActivePerspective(); if (oldPersp == newPersp) return; if (newPersp != null) { org.eclipse.core.runtime.IStatus status = newPersp.restoreState(); if ((status.getSeverity()) != (org.eclipse.core.runtime.IStatus.OK)) { java.lang.String title = org.eclipse.ui.internal.WorkbenchMessages.getString("WorkbenchPage.problemRestoringTitle"); java.lang.String msg = org.eclipse.ui.internal.WorkbenchMessages.getString("WorkbenchPage.errorReadingState"); org.eclipse.jface.dialogs.ErrorDialog.openError(getWorkbenchWindow().getShell(), title, msg, status); } } actionSwitcher.updateTopEditor(null); org.eclipse.ui.IWorkbenchPart oldActivePart = activePart; setActivePart(null); if (oldPersp != null) { oldPersp.onDeactivate(); window.selectPerspectiveShortcut(oldPersp.getDesc(), this, false); } perspList.setActive(newPersp); if (newPersp != null) { newPersp.onActivate(); window.firePerspectiveActivated(this, newPersp.getDesc()); window.selectPerspectiveShortcut(newPersp.getDesc(), this, true); } else { oldActivePart = null; } window.updateActionSets(); window.updateFastViewBar(); updateVisibility(oldPersp, newPersp); if (oldActivePart != null) { java.lang.String id = oldActivePart.getSite().getId(); oldPersp.setOldPartID(id); if ((oldActivePart instanceof org.eclipse.ui.IEditorPart) && (isEditorAreaVisible())) { activate(oldActivePart); } else if (oldActivePart instanceof org.eclipse.ui.IViewPart) { org.eclipse.ui.IEditorPart ed = editorMgr.getVisibleEditor(); if (ed != null) actionSwitcher.updateTopEditor(ed); if ((findView(id)) != null) { activate(oldActivePart); } else { activateOldPart(newPersp); } } else { activateOldPart(newPersp); } } else { org.eclipse.ui.IEditorPart ed = editorMgr.getVisibleEditor(); if (ed != null) { actionSwitcher.updateTopEditor(ed); } else { activateOldPart(newPersp); } } if (((getActivePart()) == null) && ((activationList.getActive()) != null)) { activate(activationList.getActive()); } if ((editorPresentation) != null) editorPresentation.showVisibleEditor(); final org.eclipse.ui.internal.Workbench workbench = ((org.eclipse.ui.internal.Workbench) (window.getWorkbench())); if ((newPersp != null) && (workbench.hasIntroDescriptor())) { if ((workbench.isIntroInWindow(window)) && (!(introPerspectives.contains(newPersp.getDesc())))) { try { showView(IIntroConstants.INTRO_VIEW_ID, null, IWorkbenchPage.VIEW_CREATE); } catch (org.eclipse.ui.PartInitException e) { org.eclipse.ui.internal.WorkbenchPlugin.log(org.eclipse.ui.internal.intro.IntroMessages.getString("Intro.could_not_show_part"), new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, WorkbenchPlugin.PI_WORKBENCH, org.eclipse.core.runtime.IStatus.ERROR, org.eclipse.ui.internal.intro.IntroMessages.getString("Intro.could_not_show_part"), e)); } introPerspectives.add(newPersp.getDesc()); } } }
protected void updateUI(final java.lang.Runnable r) throws java.lang.Throwable { if ((java.lang.Thread.currentThread()) == (shell.getDisplay().getThread())) r.run(); else { org.eclipse.ui.internal.StartupThreading.StartupRunnable startupRunnable = new org.eclipse.ui.internal.StartupThreading.StartupRunnable() { public void runWithException() throws java.lang.Throwable { r.run(); } }; shell.getDisplay().asyncExec(startupRunnable); } }
public boolean notify(org.eclipse.e4.core.services.context.ContextChangeEvent event) { if ((event.getEventType()) == (org.eclipse.e4.core.services.context.ContextChangeEvent.DISPOSE)) return false; java.lang.Object selection = context.get(org.eclipse.e4.workbench.ui.internal.SelectionServiceImpl.OUT_SELECTION); if (initial) { initial = false; if (selection == null) { return true; } } if ((activePart) == part) { notifyListeners(part, selection); } else { notifyTargetedListeners(part, selection); } return true; }
protected void initializeBounds() { org.eclipse.swt.widgets.Shell shell = getShell(); if (shell != null) { if ((shell.getDisplay().getDismissalAlignment()) == (org.eclipse.swt.SWT.RIGHT)) { org.eclipse.swt.widgets.Button defaultButton = shell.getDefaultButton(); if ((defaultButton != null) && (isContained(buttonBar, defaultButton))) { defaultButton.moveBelow(null); ((org.eclipse.swt.widgets.Composite) (buttonBar)).layout(); } } } super.initializeBounds(); }
public void dock(int dropSide) { dispose(); int orientation = org.eclipse.swt.SWT.HORIZONTAL; if ((dropSide == (org.eclipse.swt.SWT.LEFT)) || (dropSide == (org.eclipse.swt.SWT.RIGHT))) orientation = org.eclipse.swt.SWT.VERTICAL; tbm = new org.eclipse.jface.action.ToolBarManager(((org.eclipse.swt.SWT.FLAT) | orientation)); menuService.populateContributionManager(wbw, restrictionExpression, tbm, uriSpec, true); org.eclipse.jface.action.IContributionItem[] items = tbm.getItems(); for (int i = 0; i < (items.length); i++) { if ((items[i]) instanceof org.eclipse.ui.internal.menus.InternalControlContribution) { org.eclipse.ui.internal.menus.InternalControlContribution wbwcc = ((org.eclipse.ui.internal.menus.InternalControlContribution) (items[i])); wbwcc.setWorkbenchWindow(wbw); wbwcc.setCurSide(dropSide); } } tb = tbm.createControl(wbw.getShell()); }
@java.lang.Override public void initialize(org.eclipse.ui.IWorkbenchPart part) throws org.eclipse.ui.PartInitException { org.eclipse.core.runtime.IConfigurationElement element = descriptor.getConfigurationElement(); editorSite = new org.eclipse.ui.internal.EditorSite(getModel(), part, this, element); if (element == null) { editorSite.setExtensionId(descriptor.getId()); } editorSite.setActionBars(org.eclipse.ui.internal.EditorReference.createEditorActionBars(((org.eclipse.ui.internal.WorkbenchPage) (getPage())), descriptor, editorSite)); org.eclipse.ui.IEditorPart editor = ((org.eclipse.ui.IEditorPart) (part)); try { editor.init(editorSite, getEditorInput()); } catch (org.eclipse.ui.PartInitException e) { if (editor instanceof org.eclipse.ui.internal.ErrorEditorPart) { editor.init(editorSite, new org.eclipse.ui.internal.part.NullEditorInput(this)); } else { throw e; } } if (((editor.getSite()) != (editorSite)) || ((editor.getEditorSite()) != (editorSite))) { java.lang.String id = ((descriptor) == null) ? getModel().getElementId() : descriptor.getId(); throw new org.eclipse.ui.PartInitException(org.eclipse.osgi.util.NLS.bind(WorkbenchMessages.EditorManager_siteIncorrect, id)); } if (part instanceof org.eclipse.ui.IPersistableEditor) { if ((editorState) != null) { ((org.eclipse.ui.IPersistableEditor) (part)).restoreState(editorState); } else if (org.eclipse.ui.internal.EditorReference.useIPersistableEditor()) { java.lang.String mementoString = getModel().getPersistedState().get(org.eclipse.ui.internal.MEMENTO_KEY); if (mementoString != null) { try { org.eclipse.ui.IMemento createReadRoot = org.eclipse.ui.XMLMemento.createReadRoot(new java.io.StringReader(mementoString)); org.eclipse.ui.IMemento editorStateMemento = createReadRoot.getChild(IWorkbenchConstants.TAG_EDITOR_STATE); if (editorStateMemento != null) { ((org.eclipse.ui.IPersistableEditor) (part)).restoreState(editorStateMemento); } } catch (org.eclipse.ui.WorkbenchException e) { throw new org.eclipse.ui.PartInitException(e.getStatus()); } } } } legacyPart = part; addPropertyListeners(); }
private org.eclipse.swt.widgets.Shell getLimboShell() { if ((limbo) == null) { limbo = new org.eclipse.swt.widgets.Shell(org.eclipse.swt.widgets.Display.getCurrent(), org.eclipse.swt.SWT.NONE); limbo.setBackgroundMode(SWT.INHERIT_DEFAULT); limbo.setData(ShellActivationListener.DIALOG_IGNORE_KEY, java.lang.Boolean.TRUE); } return limbo; }
public java.lang.Object createWidget(org.eclipse.e4.ui.model.application.ui.MUIElement element, java.lang.Object parent) { final org.eclipse.swt.widgets.Widget newWidget; if ((!(element instanceof org.eclipse.e4.ui.model.application.ui.basic.MWindow)) || ((parent != null) && (!(parent instanceof org.eclipse.swt.widgets.Control)))) return null; org.eclipse.e4.ui.model.application.ui.basic.MWindow wbwModel = ((org.eclipse.e4.ui.model.application.ui.basic.MWindow) (element)); org.eclipse.e4.ui.model.application.MApplication appModel = wbwModel.getContext().get(org.eclipse.e4.ui.model.application.MApplication.class); java.lang.Boolean rtlMode = ((java.lang.Boolean) (appModel.getTransientData().get(E4Workbench.RTL_MODE))); int rtlStyle = ((rtlMode != null) && (rtlMode.booleanValue())) ? org.eclipse.swt.SWT.RIGHT_TO_LEFT : 0; org.eclipse.swt.widgets.Shell parentShell = (parent == null) ? null : ((org.eclipse.swt.widgets.Control) (parent)).getShell(); final org.eclipse.swt.widgets.Shell wbwShell; if (parentShell == null) { wbwShell = new org.eclipse.swt.widgets.Shell(org.eclipse.swt.widgets.Display.getCurrent(), ((org.eclipse.swt.SWT.SHELL_TRIM) | rtlStyle)); wbwModel.getTags().add("topLevel"); } else if (wbwModel.getTags().contains("dragHost")) { wbwShell = new org.eclipse.swt.widgets.Shell(parentShell, ((org.eclipse.swt.SWT.BORDER) | rtlStyle)); wbwShell.setAlpha(110); } else { wbwShell = new org.eclipse.swt.widgets.Shell(parentShell, (((((org.eclipse.swt.SWT.TITLE) | (org.eclipse.swt.SWT.RESIZE)) | (org.eclipse.swt.SWT.MAX)) | (org.eclipse.swt.SWT.CLOSE)) | rtlStyle)); wbwShell.addTraverseListener(new org.eclipse.swt.events.TraverseListener() { public void keyTraversed(org.eclipse.swt.events.TraverseEvent e) { if ((e.detail) == (org.eclipse.swt.SWT.TRAVERSE_ESCAPE)) { e.doit = false; } } }); } wbwShell.setBackgroundMode(SWT.INHERIT_DEFAULT); org.eclipse.swt.graphics.Rectangle modelBounds = wbwShell.getBounds(); if (wbwModel instanceof org.eclipse.emf.ecore.EObject) { org.eclipse.emf.ecore.EObject wbw = ((org.eclipse.emf.ecore.EObject) (wbwModel)); org.eclipse.emf.ecore.EClass wbwclass = wbw.eClass(); if (wbw.eIsSet(wbwclass.getEStructuralFeature("x"))) { modelBounds.x = wbwModel.getX(); } if (wbw.eIsSet(wbwclass.getEStructuralFeature("y"))) { modelBounds.y = wbwModel.getY(); } if (wbw.eIsSet(wbwclass.getEStructuralFeature("height"))) { modelBounds.height = wbwModel.getHeight(); } if (wbw.eIsSet(wbwclass.getEStructuralFeature("width"))) { modelBounds.width = wbwModel.getWidth(); } } org.eclipse.swt.graphics.Rectangle displayBounds = org.eclipse.swt.widgets.Display.getCurrent().getBounds(); if (!(modelBounds.intersects(displayBounds))) { org.eclipse.swt.graphics.Rectangle clientArea = org.eclipse.swt.widgets.Display.getCurrent().getClientArea(); modelBounds.x = clientArea.x; modelBounds.y = clientArea.y; } wbwShell.setBounds(modelBounds); setCSSInfo(wbwModel, wbwShell); org.eclipse.e4.core.contexts.IEclipseContext localContext = getContext(wbwModel); org.eclipse.e4.ui.workbench.renderers.swt.CSSEngineHelper helper = new org.eclipse.e4.ui.workbench.renderers.swt.CSSEngineHelper(localContext, wbwShell); org.eclipse.e4.ui.workbench.renderers.swt.TrimmedPartLayout tl = new org.eclipse.e4.ui.workbench.renderers.swt.TrimmedPartLayout(wbwShell); tl.gutterTop = helper.getMarginTop(0); tl.gutterBottom = helper.getMarginBottom(0); tl.gutterLeft = helper.getMarginLeft(0); tl.gutterRight = helper.getMarginRight(0); wbwShell.setLayout(tl); newWidget = wbwShell; bindWidget(element, newWidget); localContext.set(org.eclipse.swt.widgets.Shell.class.getName(), wbwShell); localContext.set(E4Workbench.LOCAL_ACTIVE_SHELL, wbwShell); setCloseHandler(wbwModel); localContext.set(org.eclipse.jface.window.IShellProvider.class.getName(), new org.eclipse.jface.window.IShellProvider() { public org.eclipse.swt.widgets.Shell getShell() { return wbwShell; } }); localContext.set(org.eclipse.e4.ui.workbench.modeling.ISaveHandler.class, new org.eclipse.e4.ui.workbench.modeling.ISaveHandler() { public org.eclipse.e4.ui.workbench.renderers.swt.Save promptToSave(org.eclipse.e4.ui.model.application.ui.basic.MPart dirtyPart) { org.eclipse.swt.widgets.Shell shell = ((org.eclipse.swt.widgets.Shell) (context.get(IServiceConstants.ACTIVE_SHELL))); java.lang.Object[] elements = promptForSave(shell, java.util.Collections.singleton(dirtyPart)); if (elements == null) { return Save.CANCEL; } return (elements.length) == 0 ? Save.NO : Save.YES; } public org.eclipse.e4.ui.workbench.renderers.swt.Save[] promptToSave(java.util.Collection<org.eclipse.e4.ui.model.application.ui.basic.MPart> dirtyParts) { java.util.List<org.eclipse.e4.ui.model.application.ui.basic.MPart> parts = new java.util.ArrayList<org.eclipse.e4.ui.model.application.ui.basic.MPart>(dirtyParts); org.eclipse.swt.widgets.Shell shell = ((org.eclipse.swt.widgets.Shell) (context.get(IServiceConstants.ACTIVE_SHELL))); org.eclipse.e4.ui.workbench.renderers.swt.Save[] response = new org.eclipse.e4.ui.workbench.renderers.swt.Save[dirtyParts.size()]; java.lang.Object[] elements = promptForSave(shell, parts); if (elements == null) { java.util.Arrays.fill(response, Save.CANCEL); } else { java.util.Arrays.fill(response, Save.NO); for (int i = 0; i < (elements.length); i++) { response[parts.indexOf(elements[i])] = Save.YES; } } return response; } }); if ((wbwModel.getLabel()) != null) wbwShell.setText(wbwModel.getLocalizedLabel()); if (((wbwModel.getIconURI()) != null) && ((wbwModel.getIconURI().length()) > 0)) { wbwShell.setImage(getImage(wbwModel)); } else { wbwShell.setImages(org.eclipse.jface.window.Window.getDefaultImages()); } return newWidget; }
private void showPageFlippingAbortDialog() { org.eclipse.jface.preference.MessageDialog.openError(getShell(), org.eclipse.jface.preference.JFaceResources.getString("AbortPageFlippingDialog.title"), org.eclipse.jface.preference.JFaceResources.getString("AbortPageFlippingDialog.message")); }
public void setName(java.lang.String newName) { org.eclipse.core.runtime.Assert.isNotNull(newName, "Working set name must not be null"); if ((manager) != null) { org.eclipse.ui.IWorkingSet wSet = manager.getWorkingSet(newName); if (wSet != (this)) { org.eclipse.core.runtime.Assert.isTrue((wSet == null), "working set with same name already registered"); } } name = newName; fireWorkingSetChanged(IWorkingSetManager.CHANGE_WORKING_SET_NAME_CHANGE, null); if (labelBoundToName) { setLabel(newName); } }
@java.lang.Override public java.lang.Object compute(org.eclipse.e4.core.contexts.IEclipseContext context) { org.eclipse.e4.ui.services.internal.events.EventBroker broker = context.get(org.eclipse.e4.ui.services.internal.events.EventBroker.class); if (broker == null) { broker = org.eclipse.e4.core.contexts.ContextInjectionFactory.make(org.eclipse.e4.ui.services.internal.events.EventBroker.class, context); context.set(org.eclipse.e4.ui.services.internal.events.EventBroker.class, broker); } return broker; }
protected void performDefaults() { java.lang.String activeKeyConfigurationId = getKeyConfigurationId(); java.util.List preferenceKeySequenceBindingDefinitions = new java.util.ArrayList(); org.eclipse.ui.internal.commands.KeySequenceBindingNode.getKeySequenceBindingDefinitions(tree, org.eclipse.ui.keys.KeySequence.getInstance(), 0, preferenceKeySequenceBindingDefinitions); if ((activeKeyConfigurationId != null) || (!(preferenceKeySequenceBindingDefinitions.isEmpty()))) { org.eclipse.swt.widgets.MessageBox restoreDefaultsMessageBox = new org.eclipse.swt.widgets.MessageBox(getShell(), ((((org.eclipse.swt.SWT.YES) | (org.eclipse.swt.SWT.NO)) | (org.eclipse.swt.SWT.ICON_WARNING)) | (org.eclipse.swt.SWT.APPLICATION_MODAL))); restoreDefaultsMessageBox.setText(org.eclipse.ui.internal.util.Util.translateString(org.eclipse.ui.internal.commands.KeysPreferencePage.RESOURCE_BUNDLE, "restoreDefaultsMessageBoxText")); restoreDefaultsMessageBox.setMessage(org.eclipse.ui.internal.util.Util.translateString(org.eclipse.ui.internal.commands.KeysPreferencePage.RESOURCE_BUNDLE, "restoreDefaultsMessageBoxMessage")); if ((restoreDefaultsMessageBox.open()) == (org.eclipse.swt.SWT.YES)) { setKeyConfigurationId(null); java.util.Iterator iterator = preferenceKeySequenceBindingDefinitions.iterator(); while (iterator.hasNext()) { org.eclipse.ui.internal.commands.KeySequenceBindingDefinition keySequenceBindingDefinition = ((org.eclipse.ui.internal.commands.KeySequenceBindingDefinition) (iterator.next())); org.eclipse.ui.internal.commands.KeySequenceBindingNode.remove(tree, keySequenceBindingDefinition.getKeySequence(), keySequenceBindingDefinition.getContextId(), keySequenceBindingDefinition.getKeyConfigurationId(), 0, keySequenceBindingDefinition.getPlatform(), keySequenceBindingDefinition.getLocale(), keySequenceBindingDefinition.getCommandId()); } } } org.eclipse.jface.preference.IPreferenceStore store = getPreferenceStore(); checkBoxMultiKeyAssist.setSelection(store.getDefaultBoolean(IPreferenceConstants.MULTI_KEY_ASSIST)); textMultiKeyAssistTime.setStringValue(java.lang.Integer.toString(store.getDefaultInt(IPreferenceConstants.MULTI_KEY_ASSIST_TIME))); update(); }
void open(org.eclipse.ui.internal.EditorHistoryItem item) { org.eclipse.ui.internal.IWorkbenchPage page = fWindow.getActivePage(); if (page != null) { try { if (!(item.isRestored())) { item.restoreState(); } org.eclipse.ui.internal.IEditorInput input = item.getInput(); org.eclipse.ui.internal.IEditorDescriptor desc = item.getDescriptor(); if (input == null) { java.lang.String title = org.eclipse.ui.internal.WorkbenchMessages.getString("OpenRecent.errorTitle"); org.eclipse.jface.dialogs.MessageDialog.openWarning(fWindow.getShell(), title, ""); history.remove(item); } else { if (desc == null) { if (input instanceof org.eclipse.ui.internal.IFileEditorInput) { page.openEditor(((org.eclipse.ui.internal.IFileEditorInput) (input)).getFile()); } } else { page.openEditor(input, desc.getId()); } } } catch (org.eclipse.ui.internal.PartInitException e2) { java.lang.String title = org.eclipse.ui.internal.WorkbenchMessages.getString("OpenRecent.errorTitle"); org.eclipse.jface.dialogs.MessageDialog.openWarning(fWindow.getShell(), title, e2.getMessage()); history.remove(item); } } }
private void setupMultiOperatorAndField(boolean updateOperator) { boolean isUsingRegularExpression = false; java.lang.String selectedKey = org.eclipse.ui.internal.ide.dialogs.MultiMatcherLocalization.getMultiMatcherKey(multiKey.getText()); if (updateOperator) { java.lang.String[] operators = getLocalOperatorsForKey(selectedKey); multiOperator.setItems(operators); org.eclipse.ui.internal.ide.misc.FileInfoAttributesMatcher.Argument argument = org.eclipse.ui.internal.ide.misc.FileInfoAttributesMatcher.decodeArguments(((java.lang.String) (filter.getArguments()))); java.lang.String local = org.eclipse.ui.internal.ide.dialogs.MultiMatcherLocalization.getLocalMultiMatcherKey(argument.operator); int index = multiOperator.indexOf(local); if (index != (-1)) multiOperator.select(index); else multiOperator.select(0); } java.lang.String selectedOperator = org.eclipse.ui.internal.ide.dialogs.MultiMatcherLocalization.getMultiMatcherKey(multiOperator.getText()); java.lang.Class selectedKeyOperatorType = org.eclipse.ui.internal.ide.misc.FileInfoAttributesMatcher.getTypeForKey(selectedKey, selectedOperator); if ((intiantiatedKeyOperatorType) != null) { if (intiantiatedKeyOperatorType.equals(selectedKeyOperatorType)) return; if ((arguments) != null) { arguments.dispose(); arguments = null; } if ((attributeStringArgumentComposite) != null) { attributeStringArgumentComposite.dispose(); attributeStringArgumentComposite = null; } if ((stringArgumentComposite) != null) { stringArgumentComposite.dispose(); stringArgumentComposite = null; } if ((argumentsBoolean) != null) { argumentsBoolean.dispose(); argumentsBoolean = null; } if ((argumentsDate) != null) { argumentsDate.dispose(); argumentsDate = null; } if ((argumentsRegularExpresion) != null) { argumentsRegularExpresion.dispose(); argumentsRegularExpresion = null; } if ((argumentsCaseSensitive) != null) { argumentsCaseSensitive.dispose(); argumentsCaseSensitive = null; } if ((dummyLabel1) != null) { dummyLabel1.dispose(); dummyLabel1 = null; } if ((dummyLabel2) != null) { dummyLabel2.dispose(); dummyLabel2 = null; } fContentAssistField = null; org.eclipse.ui.internal.ide.misc.FileInfoAttributesMatcher.Argument argument = org.eclipse.ui.internal.ide.misc.FileInfoAttributesMatcher.decodeArguments(((java.lang.String) (filter.getArguments()))); valueCache.put(intiantiatedKeyOperatorType.getName(), argument.pattern); argument.pattern = ((java.lang.String) (valueCache.get(selectedKeyOperatorType.getName()))); if ((argument.pattern) == null) argument.pattern = new java.lang.String(); filter.setArguments(org.eclipse.ui.internal.ide.misc.FileInfoAttributesMatcher.encodeArguments(argument)); } if (selectedKeyOperatorType.equals(java.lang.String.class)) { arguments = new org.eclipse.swt.widgets.Text(multiArgumentComposite, ((org.eclipse.swt.SWT.SINGLE) | (org.eclipse.swt.SWT.BORDER))); org.eclipse.swt.layout.GridData data = new org.eclipse.swt.layout.GridData(org.eclipse.swt.SWT.FILL, org.eclipse.swt.SWT.FILL, true, false); data.widthHint = 150; arguments.setLayoutData(data); arguments.setFont(multiArgumentComposite.getFont()); arguments.addModifyListener(new org.eclipse.swt.events.ModifyListener() { public void modifyText(org.eclipse.swt.events.ModifyEvent e) { validateInputText(); } }); dummyLabel1 = new org.eclipse.swt.widgets.Label(multiArgumentComposite, org.eclipse.swt.SWT.NONE); data = new org.eclipse.swt.layout.GridData(org.eclipse.swt.SWT.LEFT, org.eclipse.swt.SWT.CENTER, true, true); dummyLabel1.setText(new java.lang.String()); data.horizontalSpan = 1; dummyLabel1.setLayoutData(data); dummyLabel2 = new org.eclipse.swt.widgets.Label(multiArgumentComposite, org.eclipse.swt.SWT.NONE); data = new org.eclipse.swt.layout.GridData(org.eclipse.swt.SWT.LEFT, org.eclipse.swt.SWT.CENTER, true, true); dummyLabel2.setText(new java.lang.String()); data.horizontalSpan = 1; dummyLabel2.setLayoutData(data); stringArgumentComposite = new org.eclipse.swt.widgets.Composite(multiArgumentComposite, org.eclipse.swt.SWT.NONE); org.eclipse.swt.layout.GridLayout layout = new org.eclipse.swt.layout.GridLayout(); layout.numColumns = 2; layout.marginWidth = 0; layout.marginTop = (dialog.getVerticalDLUsToPixel(IDialogConstants.VERTICAL_SPACING)) / 2; layout.marginHeight = 0; layout.marginBottom = 0; stringArgumentComposite.setLayout(layout); data = new org.eclipse.swt.layout.GridData(org.eclipse.swt.SWT.FILL, org.eclipse.swt.SWT.CENTER, true, true); data.horizontalSpan = 1; stringArgumentComposite.setLayoutData(data); stringArgumentComposite.setFont(multiArgumentComposite.getFont()); argumentsCaseSensitive = new org.eclipse.swt.widgets.Button(stringArgumentComposite, org.eclipse.swt.SWT.CHECK); argumentsCaseSensitive.setText(org.eclipse.osgi.util.NLS.bind(IDEWorkbenchMessages.ResourceFilterPage_caseSensitive, null)); data = new org.eclipse.swt.layout.GridData(org.eclipse.swt.SWT.LEFT, org.eclipse.swt.SWT.CENTER, false, false); argumentsCaseSensitive.setLayoutData(data); argumentsCaseSensitive.setFont(multiArgumentComposite.getFont()); argumentsRegularExpresion = new org.eclipse.swt.widgets.Button(stringArgumentComposite, org.eclipse.swt.SWT.CHECK); argumentsRegularExpresion.setText(org.eclipse.osgi.util.NLS.bind(IDEWorkbenchMessages.ResourceFilterPage_regularExpression, null)); data = new org.eclipse.swt.layout.GridData(org.eclipse.swt.SWT.LEFT, org.eclipse.swt.SWT.CENTER, false, false); data.minimumWidth = 100; argumentsRegularExpresion.setLayoutData(data); argumentsRegularExpresion.setFont(multiArgumentComposite.getFont()); if (filter.hasStringArguments()) { org.eclipse.ui.internal.ide.misc.FileInfoAttributesMatcher.Argument argument = org.eclipse.ui.internal.ide.misc.FileInfoAttributesMatcher.decodeArguments(((java.lang.String) (filter.getArguments()))); arguments.setText(argument.pattern); isUsingRegularExpression = argument.regularExpression; argumentsCaseSensitive.setSelection(argument.caseSensitive); argumentsRegularExpresion.setSelection(argument.regularExpression); } arguments.addModifyListener(new org.eclipse.swt.events.ModifyListener() { public void modifyText(org.eclipse.swt.events.ModifyEvent e) { storeMultiSelection(); } }); argumentsRegularExpresion.addSelectionListener(new org.eclipse.swt.events.SelectionAdapter() { public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { setupDescriptionText(null); storeMultiSelection(); if ((fContentAssistField) != null) fContentAssistField.setEnabled(argumentsRegularExpresion.getSelection()); } }); argumentsCaseSensitive.addSelectionListener(new org.eclipse.swt.events.SelectionAdapter() { public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { storeMultiSelection(); } }); org.eclipse.jface.fieldassist.TextContentAdapter contentAdapter = new org.eclipse.jface.fieldassist.TextContentAdapter(); org.eclipse.jface.text.FindReplaceDocumentAdapterContentProposalProvider findProposer = new org.eclipse.jface.text.FindReplaceDocumentAdapterContentProposalProvider(true); fContentAssistField = new org.eclipse.ui.fieldassist.ContentAssistCommandAdapter(arguments, contentAdapter, findProposer, null, new char[]{ '\\', '[', '(' }, true); } if (selectedKeyOperatorType.equals(java.lang.Integer.class)) { org.eclipse.swt.layout.GridData data; arguments = new org.eclipse.swt.widgets.Text(multiArgumentComposite, ((org.eclipse.swt.SWT.SINGLE) | (org.eclipse.swt.SWT.BORDER))); data = new org.eclipse.swt.layout.GridData(org.eclipse.swt.SWT.FILL, org.eclipse.swt.SWT.FILL, true, false); data.widthHint = 150; arguments.setLayoutData(data); arguments.setFont(multiArgumentComposite.getFont()); arguments.addModifyListener(new org.eclipse.swt.events.ModifyListener() { public void modifyText(org.eclipse.swt.events.ModifyEvent e) { validateInputText(); } }); if (filter.hasStringArguments()) { org.eclipse.ui.internal.ide.misc.FileInfoAttributesMatcher.Argument argument = org.eclipse.ui.internal.ide.misc.FileInfoAttributesMatcher.decodeArguments(((java.lang.String) (filter.getArguments()))); if ((selectedKey.equals(FileInfoAttributesMatcher.KEY_LAST_MODIFIED)) || (selectedKey.equals(FileInfoAttributesMatcher.KEY_CREATED))) arguments.setText(convertToEditableTimeInterval(argument.pattern)); else arguments.setText(convertToEditableLength(argument.pattern)); } arguments.addModifyListener(new org.eclipse.swt.events.ModifyListener() { public void modifyText(org.eclipse.swt.events.ModifyEvent e) { storeMultiSelection(); } }); } if (selectedKeyOperatorType.equals(java.util.Date.class)) { org.eclipse.swt.layout.GridData data; argumentsDate = new org.eclipse.swt.widgets.DateTime(multiArgumentComposite, (((org.eclipse.swt.SWT.DATE) | (org.eclipse.swt.SWT.MEDIUM)) | (org.eclipse.swt.SWT.BORDER))); data = new org.eclipse.swt.layout.GridData(org.eclipse.swt.SWT.FILL, org.eclipse.swt.SWT.FILL, true, false); argumentsDate.setLayoutData(data); argumentsDate.setFont(multiArgumentComposite.getFont()); argumentsDate.addSelectionListener(new org.eclipse.swt.events.SelectionAdapter() { public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { storeMultiSelection(); } }); if (filter.hasStringArguments()) { org.eclipse.ui.internal.ide.misc.FileInfoAttributesMatcher.Argument argument = org.eclipse.ui.internal.ide.misc.FileInfoAttributesMatcher.decodeArguments(((java.lang.String) (filter.getArguments()))); java.util.Date date; java.util.Calendar calendar = java.util.Calendar.getInstance(); try { date = new java.util.Date(java.lang.Long.parseLong(argument.pattern)); calendar.setTime(date); } catch (java.lang.NumberFormatException e1) { date = new java.util.Date(); calendar.setTime(date); argument.pattern = java.lang.Long.toString(calendar.getTimeInMillis()); } argumentsDate.setDay(calendar.get(java.util.Calendar.DAY_OF_MONTH)); argumentsDate.setMonth(calendar.get(java.util.Calendar.MONTH)); argumentsDate.setYear(calendar.get(java.util.Calendar.YEAR)); } } if (selectedKeyOperatorType.equals(java.lang.Boolean.class)) { org.eclipse.swt.layout.GridData data; argumentsBoolean = new org.eclipse.swt.widgets.Combo(multiArgumentComposite, org.eclipse.swt.SWT.READ_ONLY); data = new org.eclipse.swt.layout.GridData(org.eclipse.swt.SWT.FILL, org.eclipse.swt.SWT.TOP, true, false); argumentsBoolean.setLayoutData(data); argumentsBoolean.setFont(multiArgumentComposite.getFont()); argumentsBoolean.setItems(new java.lang.String[]{ org.eclipse.ui.internal.ide.dialogs.MultiMatcherLocalization.getLocalMultiMatcherKey(java.lang.Boolean.TRUE.toString()), org.eclipse.ui.internal.ide.dialogs.MultiMatcherLocalization.getLocalMultiMatcherKey(java.lang.Boolean.FALSE.toString()) }); argumentsBoolean.addSelectionListener(new org.eclipse.swt.events.SelectionAdapter() { public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { storeMultiSelection(); } }); if (filter.hasStringArguments()) { org.eclipse.ui.internal.ide.misc.FileInfoAttributesMatcher.Argument argument = org.eclipse.ui.internal.ide.misc.FileInfoAttributesMatcher.decodeArguments(((java.lang.String) (filter.getArguments()))); if ((argument.pattern.length()) == 0) argumentsBoolean.select(0); else argumentsBoolean.select((java.lang.Boolean.valueOf(argument.pattern).booleanValue() ? 0 : 1)); } } intiantiatedKeyOperatorType = selectedKeyOperatorType; if ((fContentAssistField) != null) fContentAssistField.setEnabled(isUsingRegularExpression); shell.layout(true, true); if (initializationComplete) { org.eclipse.swt.graphics.Point size = shell.computeSize(SWT.DEFAULT, SWT.DEFAULT); org.eclipse.swt.graphics.Point shellSize = shell.getSize(); size.x = java.lang.Math.max(size.x, shellSize.x); size.y = java.lang.Math.max(size.y, shellSize.y); if (((size.x) > (shellSize.x)) || ((size.y) > (shellSize.y))) shell.setSize(size); } shell.redraw(); setupDescriptionText(null); }
public org.eclipse.swt.graphics.Color getBackground(java.lang.Object element) { boolean highlight = false; if (element instanceof org.eclipse.ui.internal.dialogs.WorkbenchPreferenceNode) highlight = ((org.eclipse.ui.internal.dialogs.WorkbenchPreferenceNode) (element)).isHighlighted(); if (element instanceof org.eclipse.ui.internal.dialogs.WorkbenchPreferenceGroup) highlight = ((org.eclipse.ui.internal.dialogs.WorkbenchPreferenceGroup) (element)).isHighlighted(); if (highlight) return org.eclipse.ui.internal.Workbench.getInstance().getDisplay().getSystemColor(SWT.COLOR_WIDGET_DARK_SHADOW); return null; }
protected void runClearPlaceholderJob(final org.eclipse.ui.internal.progress.PendingUpdateAdapter placeholder) { if ((placeholder.isRemoved()) || (!(org.eclipse.ui.PlatformUI.isWorkbenchRunning()))) return; org.eclipse.ui.progress.WorkbenchJob clearJob = new org.eclipse.ui.progress.WorkbenchJob(org.eclipse.ui.internal.progress.ProgressMessages.getString("DeferredTreeContentManager.ClearJob")) { public org.eclipse.core.runtime.IStatus runInUIThread(org.eclipse.core.runtime.IProgressMonitor monitor) { if (!(placeholder.isRemoved())) { org.eclipse.swt.widgets.Control control = treeViewer.getControl(); if (control.isDisposed()) return org.eclipse.core.runtime.Status.CANCEL_STATUS; treeViewer.remove(placeholder); placeholder.setRemoved(true); } return org.eclipse.core.runtime.Status.OK_STATUS; } }; clearJob.setSystem(true); clearJob.schedule(); }
public boolean getBoolean(java.lang.String key) { return new java.lang.Boolean(((java.lang.String) (items.get(key)))).booleanValue(); }
public java.lang.Object execute(org.eclipse.core.commands.ExecutionEvent event) throws org.eclipse.core.commands.ExecutionException { org.eclipse.ui.IWorkbenchWindow activeWorkbenchWindow = org.eclipse.ui.handlers.HandlerUtil.getActiveWorkbenchWindow(event); if (activeWorkbenchWindow == null) { return null; } activeWorkbenchWindow.getWorkbench().close(); return null; }
private void createJob(java.lang.String name) { theJob = new org.eclipse.core.runtime.jobs.Job(name) { protected org.eclipse.core.runtime.IStatus run(org.eclipse.core.runtime.IProgressMonitor innerMonitor) { try { synchronized(lock) { restartNeeded = false; currentMonitor = innerMonitor; } runnable.run(innerMonitor); } catch (java.lang.reflect.InvocationTargetException e) { return org.eclipse.ui.internal.ide.StatusUtil.newStatus(org.eclipse.core.runtime.IStatus.ERROR, e.toString(), e.getTargetException()); } catch (java.lang.InterruptedException e) { return org.eclipse.core.runtime.Status.CANCEL_STATUS; } if (innerMonitor.isCanceled()) { return org.eclipse.core.runtime.Status.CANCEL_STATUS; } else { return org.eclipse.core.runtime.Status.OK_STATUS; } } }; theJob.setPriority(org.eclipse.core.runtime.jobs.Job.DECORATE); theJob.setSystem(true); }
public void updateActionBars() { getStatusLineManager().update(false); getMenuManager().update(false); if ((toolbarManager) != null) { java.lang.System.err.println(("update toolbar manager for " + (part.getElementId()))); getToolBarManager().update(false); } super.updateActionBars(); }
public static void resetMode(org.eclipse.ui.internal.registry.KeyBindingService service) { if ((org.eclipse.ui.internal.registry.AcceleratorScope.currentMode) != (org.eclipse.ui.internal.registry.AcceleratorScope.defaultMode)) { org.eclipse.ui.internal.registry.AcceleratorScope.currentMode = org.eclipse.ui.internal.registry.AcceleratorScope.defaultMode; if ((org.eclipse.ui.internal.registry.AcceleratorScope.getStatusLineManager(service)) != null) org.eclipse.ui.internal.registry.AcceleratorScope.getStatusLineManager(service).setMessage(""); } }
public void setInitializationData(org.eclipse.core.runtime.IConfigurationElement cfig, java.lang.String propertyName, java.lang.Object data) { configElement = cfig; partName = org.eclipse.ui.internal.util.Util.safeString(cfig.getAttribute("name")); title = partName; java.lang.String strIcon = cfig.getAttribute("icon"); if (strIcon == null) return; imageDescriptor = org.eclipse.ui.plugin.AbstractUIPlugin.imageDescriptorFromPlugin(configElement.getDeclaringExtension().getNamespace(), strIcon); if ((imageDescriptor) == null) return; org.eclipse.ui.internal.ReferenceCounter imageCache = org.eclipse.ui.internal.WorkbenchImages.getImageCache(); org.eclipse.swt.graphics.Image image = ((org.eclipse.swt.graphics.Image) (imageCache.get(imageDescriptor))); if (image != null) { imageCache.addRef(imageDescriptor); } else { image = imageDescriptor.createImage(); imageCache.put(imageDescriptor, image); } titleImage = image; }
public org.eclipse.ui.IEditorDescriptor[] getEditors(java.lang.String fileName, org.eclipse.core.runtime.content.IContentType contentType) { org.eclipse.ui.IEditorDescriptor[] editors = new org.eclipse.ui.IEditorDescriptor[0]; org.eclipse.ui.IEditorDescriptor[] filenameEditors = editors; org.eclipse.ui.IEditorDescriptor[] extensionEditors = editors; org.eclipse.ui.internal.registry.FileEditorMapping[] mapping = getMappingForFilename(fileName); if ((mapping[0]) != null) { editors = mapping[0].getEditors(); if (editors != null) filenameEditors = editors; } if ((mapping[1]) != null) { editors = mapping[1].getEditors(); if (editors != null) extensionEditors = editors; } editors = new org.eclipse.ui.IEditorDescriptor[(filenameEditors.length) + (extensionEditors.length)]; java.lang.System.arraycopy(filenameEditors, 0, editors, 0, filenameEditors.length); java.lang.System.arraycopy(extensionEditors, 0, editors, filenameEditors.length, extensionEditors.length); java.util.ArrayList list = new java.util.ArrayList(editors.length); if (contentType != null) { java.lang.Object[] editorsByForContentType = findRelatedObjects(contentType, fileName, relatedRegistry); if ((editorsByForContentType != null) && ((editorsByForContentType.length) > 0)) list.addAll(java.util.Arrays.asList(editorsByForContentType)); } for (int i = 0; i < (editors.length); i++) { if (!(list.contains(editors[i]))) list.add(editors[i]); } java.util.ArrayList filtered = new java.util.ArrayList(); for (java.util.Iterator i = list.iterator(); i.hasNext();) { java.lang.Object next = i.next(); if ((next == null) || (org.eclipse.ui.activities.WorkbenchActivityHelper.filterItem(next))) continue; filtered.add(next); } editors = ((org.eclipse.ui.IEditorDescriptor[]) (filtered.toArray(new org.eclipse.ui.IEditorDescriptor[filtered.size()]))); return editors; }
JobProgressManager() { org.eclipse.core.runtime.Platform.getJobManager().setProgressProvider(this); org.eclipse.core.runtime.Platform.getJobManager().addJobChangeListener(this); addListener(new org.eclipse.ui.internal.progress.StatusLineProgressListener()); java.net.URL iconsRoot = org.eclipse.core.runtime.Platform.getPlugin(PlatformUI.PLUGIN_ID).find(new org.eclipse.core.runtime.Path(org.eclipse.ui.internal.progress.JobProgressManager.PROGRESS_FOLDER)); try { setUpImage(iconsRoot, org.eclipse.ui.internal.progress.JobProgressManager.PROGRESS_20, org.eclipse.ui.internal.progress.JobProgressManager.PROGRESS_20_KEY); setUpImage(iconsRoot, org.eclipse.ui.internal.progress.JobProgressManager.PROGRESS_40, org.eclipse.ui.internal.progress.JobProgressManager.PROGRESS_40_KEY); setUpImage(iconsRoot, org.eclipse.ui.internal.progress.JobProgressManager.PROGRESS_60, org.eclipse.ui.internal.progress.JobProgressManager.PROGRESS_60_KEY); setUpImage(iconsRoot, org.eclipse.ui.internal.progress.JobProgressManager.PROGRESS_80, org.eclipse.ui.internal.progress.JobProgressManager.PROGRESS_80_KEY); setUpImage(iconsRoot, org.eclipse.ui.internal.progress.JobProgressManager.PROGRESS_100, org.eclipse.ui.internal.progress.JobProgressManager.PROGRESS_100_KEY); setUpImage(iconsRoot, org.eclipse.ui.internal.progress.JobProgressManager.RUNNING_JOB, org.eclipse.ui.internal.progress.JobProgressManager.RUNNING_JOB_KEY); setUpImage(iconsRoot, org.eclipse.ui.internal.progress.JobProgressManager.SLEEPING_JOB, org.eclipse.ui.internal.progress.JobProgressManager.SLEEPING_JOB_KEY); setUpImage(iconsRoot, org.eclipse.ui.internal.progress.JobProgressManager.WAITING_JOB, org.eclipse.ui.internal.progress.JobProgressManager.WAITING_JOB_KEY); setUpImage(iconsRoot, org.eclipse.ui.internal.progress.JobProgressManager.ERROR_JOB, org.eclipse.ui.internal.progress.JobProgressManager.ERROR_JOB_KEY); } catch (java.net.MalformedURLException e) { org.eclipse.ui.internal.progress.ProgressUtil.logException(e); } }
private org.eclipse.core.runtime.IStatus createStatus(int severity, java.lang.String message) { return new org.eclipse.core.runtime.Status(severity, org.eclipse.ui.internal.ide.IDEWorkbenchPlugin.getDefault().getBundle().getSymbolicName(), severity, message, null); }
public java.lang.Object safeCreateGui(org.eclipse.e4.ui.model.application.ui.MUIElement element, java.lang.Object parentWidget, org.eclipse.e4.core.contexts.IEclipseContext parentContext) { if (!(element.isToBeRendered())) return null; if (!(renderedElements.contains(element))) renderedElements.add(element); if ((removeRoot) != null) { return null; } java.lang.Object currentWidget = element.getWidget(); if (currentWidget != null) { if (currentWidget instanceof org.eclipse.swt.widgets.Control) { org.eclipse.swt.widgets.Control control = ((org.eclipse.swt.widgets.Control) (currentWidget)); control.setVisible(true); if (parentWidget instanceof org.eclipse.swt.widgets.Composite) { org.eclipse.swt.widgets.Composite currentParent = control.getParent(); if (currentParent != parentWidget) { if (currentParent instanceof org.eclipse.e4.ui.widgets.CTabFolder) { org.eclipse.e4.ui.widgets.CTabFolder folder = ((org.eclipse.e4.ui.widgets.CTabFolder) (currentParent)); if ((folder.getTopRight()) == control) { folder.setTopRight(null); } } control.setParent(((org.eclipse.swt.widgets.Composite) (parentWidget))); } } } if (element instanceof org.eclipse.e4.ui.model.application.ui.MContext) { org.eclipse.e4.core.contexts.IEclipseContext ctxt = ((org.eclipse.e4.ui.model.application.ui.MContext) (element)).getContext(); if (ctxt != null) ctxt.setParent(parentContext); } else { java.util.List<org.eclipse.e4.ui.model.application.ui.MContext> childContexts = modelService.findElements(element, null, org.eclipse.e4.ui.model.application.ui.MContext.class, null); for (org.eclipse.e4.ui.model.application.ui.MContext c : childContexts) { org.eclipse.e4.ui.model.application.ui.MUIElement kid = ((org.eclipse.e4.ui.model.application.ui.MUIElement) (c)); org.eclipse.e4.ui.model.application.ui.MUIElement parent = kid.getParent(); if ((parent == null) && ((kid.getCurSharedRef()) != null)) parent = kid.getCurSharedRef().getParent(); if (parent != element) continue; if (((c.getContext()) != null) && ((c.getContext().getParent()) != parentContext)) { c.getContext().setParent(parentContext); } } } if ((element.getParent()) instanceof org.eclipse.e4.ui.model.application.ui.MUIElement) { org.eclipse.e4.ui.model.application.ui.MElementContainer<org.eclipse.e4.ui.model.application.ui.MUIElement> parentElement = element.getParent(); org.eclipse.e4.ui.internal.workbench.swt.AbstractPartRenderer parentRenderer = getRendererFor(parentElement); if (parentRenderer != null) parentRenderer.childRendered(parentElement, element); } return element.getWidget(); } if (element instanceof org.eclipse.e4.ui.model.application.ui.MContext) { org.eclipse.e4.ui.model.application.ui.MContext ctxt = ((org.eclipse.e4.ui.model.application.ui.MContext) (element)); if ((ctxt.getContext()) == null) { org.eclipse.e4.core.contexts.IEclipseContext lclContext = parentContext.createChild(getContextName(element)); org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.populateModelInterfaces(ctxt, lclContext, element.getClass().getInterfaces()); ctxt.setContext(lclContext); for (java.lang.String variable : ctxt.getVariables()) { lclContext.declareModifiable(variable); } java.util.Map<java.lang.String, java.lang.String> props = ctxt.getProperties(); for (java.lang.String key : props.keySet()) { lclContext.set(key, props.get(key)); } org.eclipse.e4.ui.internal.workbench.E4Workbench.processHierarchy(element); } } java.lang.Object newWidget = createWidget(element, parentWidget); if (newWidget != null) { org.eclipse.e4.ui.internal.workbench.swt.AbstractPartRenderer renderer = getRendererFor(element); renderer.hookControllerLogic(element); if (element instanceof org.eclipse.e4.ui.model.application.ui.MElementContainer) { renderer.processContents(((org.eclipse.e4.ui.model.application.ui.MElementContainer<org.eclipse.e4.ui.model.application.ui.MUIElement>) (element))); } renderer.postProcess(element); if ((element.getParent()) instanceof org.eclipse.e4.ui.model.application.ui.MUIElement) { org.eclipse.e4.ui.model.application.ui.MElementContainer<org.eclipse.e4.ui.model.application.ui.MUIElement> parentElement = element.getParent(); org.eclipse.e4.ui.internal.workbench.swt.AbstractPartRenderer parentRenderer = getRendererFor(parentElement); if (parentRenderer != null) parentRenderer.childRendered(parentElement, element); } } else { if (element instanceof org.eclipse.e4.ui.model.application.ui.MContext) { org.eclipse.e4.ui.model.application.ui.MContext ctxt = ((org.eclipse.e4.ui.model.application.ui.MContext) (element)); org.eclipse.e4.core.contexts.IEclipseContext lclContext = ctxt.getContext(); if (lclContext != null) { lclContext.dispose(); ctxt.setContext(null); } } } return newWidget; }
public void initialize(org.eclipse.ui.internal.AnimationEngine engine) { theShell = new org.eclipse.swt.widgets.Shell(getAnimationShell(), ((org.eclipse.swt.SWT.NO_TRIM) | (org.eclipse.swt.SWT.ON_TOP))); display = theShell.getDisplay(); org.eclipse.swt.graphics.Color color = display.getSystemColor(SWT.COLOR_WIDGET_FOREGROUND); theShell.setBackground(color); shellRegion = new org.eclipse.swt.graphics.Region(display); theShell.setRegion(shellRegion); }
private org.eclipse.ui.IEditorPart busyOpenEditor(org.eclipse.ui.IEditorInput input, java.lang.String editorId, boolean activate, int matchFlags, org.eclipse.ui.IMemento editorState, boolean notify) throws org.eclipse.ui.PartInitException { if ((input == null) || (editorId == null)) { throw new java.lang.IllegalArgumentException(); } if (("org.eclipse.ui.systemExternalEditor".equals(editorId)) || ("org.eclipse.ui.browser.editorSupport".equals(editorId))) { org.eclipse.ui.IPathEditorInput fileInput = getPathEditorInput(input); if (fileInput == null) { throw new org.eclipse.ui.PartInitException(WorkbenchMessages.EditorManager_systemEditorError); } java.lang.String fullPath = fileInput.getPath().toOSString(); org.eclipse.swt.program.Program.launch(fullPath); return null; } org.eclipse.ui.internal.registry.EditorDescriptor descriptor = ((org.eclipse.ui.internal.registry.EditorDescriptor) (getWorkbenchWindow().getWorkbench().getEditorRegistry().findEditor(editorId))); if (descriptor == null) { throw new org.eclipse.ui.PartInitException(org.eclipse.osgi.util.NLS.bind(WorkbenchMessages.EditorManager_unknownEditorIDMessage, editorId)); } org.eclipse.ui.IEditorReference[] editorReferences = findEditors(input, editorId, matchFlags); if ((editorReferences.length) != 0) { org.eclipse.ui.IEditorPart editor = editorReferences[0].getEditor(true); if (editor instanceof org.eclipse.ui.IShowEditorInput) { ((org.eclipse.ui.IShowEditorInput) (editor)).showEditorInput(input); } partService.showPart(((org.eclipse.ui.internal.EditorReference) (editorReferences[0])).getModel(), PartState.VISIBLE); if (activate) { activate(editor); } recordEditor(input, descriptor); return editor; } else if (descriptor.isInternal()) { org.eclipse.ui.internal.EditorReference reusableEditorRef = ((org.eclipse.ui.internal.EditorReference) (((org.eclipse.ui.internal.tweaklets.TabBehaviour) (org.eclipse.ui.internal.tweaklets.Tweaklets.get(TabBehaviour.KEY))).findReusableEditor(this))); if (reusableEditorRef != null) { org.eclipse.ui.IEditorPart reusableEditor = reusableEditorRef.getEditor(false); if ((editorId.equals(reusableEditorRef.getId())) && (reusableEditor instanceof org.eclipse.ui.IReusableEditor)) { recordEditor(input, descriptor); reuseEditor(((org.eclipse.ui.IReusableEditor) (reusableEditor)), input); org.eclipse.e4.ui.model.application.ui.basic.MPart editor = reusableEditorRef.getModel(); partService.showPart(editor, PartState.VISIBLE); if (activate) { partService.activate(editor); } else { updateActiveEditorSources(editor); } return reusableEditor; } closeEditor(reusableEditorRef, false); } } else if (descriptor.isOpenExternal()) { openExternalEditor(descriptor, input); return null; } org.eclipse.e4.ui.model.application.ui.basic.MPart editor = partService.createPart(CompatibilityEditor.MODEL_ELEMENT_ID); org.eclipse.ui.internal.EditorReference ref = createEditorReferenceForPart(editor, input, editorId, editorState); partService.showPart(editor, PartState.VISIBLE); org.eclipse.ui.internal.e4.compatibility.CompatibilityEditor compatibilityEditor = ((org.eclipse.ui.internal.e4.compatibility.CompatibilityEditor) (editor.getObject())); if (activate) { partService.activate(editor); } else { updateActiveEditorSources(editor); } if (notify) { legacyWindow.firePerspectiveChanged(this, getPerspective(), ref, org.eclipse.ui.internal.CHANGE_EDITOR_OPEN); legacyWindow.firePerspectiveChanged(this, getPerspective(), org.eclipse.ui.internal.CHANGE_EDITOR_OPEN); } recordEditor(input, descriptor); return compatibilityEditor.getEditor(); }
private void runAction(java.lang.String pluginId, java.lang.String className) { org.eclipse.ui.internal.dialogs.IPluginDescriptor desc = org.eclipse.core.runtime.Platform.getPluginRegistry().getPluginDescriptor(pluginId); if (desc == null) { logActionLinkError(pluginId, className); return; } java.lang.Class actionClass; org.eclipse.ui.internal.dialogs.IAction action; try { actionClass = desc.getPluginClassLoader().loadClass(className); } catch (java.lang.ClassNotFoundException e) { logActionLinkError(pluginId, className); return; } try { action = ((org.eclipse.ui.internal.dialogs.IAction) (actionClass.newInstance())); } catch (java.lang.InstantiationException e) { logActionLinkError(pluginId, className); return; } catch (java.lang.IllegalAccessException e) { logActionLinkError(pluginId, className); return; } catch (java.lang.ClassCastException e) { logActionLinkError(pluginId, className); return; } action.run(); }
public void run() throws java.lang.Exception { int insertionIndex = idx; cache.createContributionItems(serviceLocatorToUse, ciList); if ((ciList.getItems().size()) > 0) { org.eclipse.ui.internal.menus.WorkbenchMenuService.ManagerPopulationRecord mpr = ((org.eclipse.ui.internal.menus.WorkbenchMenuService.ManagerPopulationRecord) (populatedManagers.get(mgr))); mpr.addFactoryContribution(cache, ciList); for (java.util.Iterator ciIter = ciList.getItems().iterator(); ciIter.hasNext();) { org.eclipse.jface.action.IContributionItem ici = ((org.eclipse.jface.action.IContributionItem) (ciIter.next())); if (((((ici instanceof org.eclipse.jface.action.ContributionManager) || (ici instanceof org.eclipse.jface.internal.provisional.action.IToolBarContributionItem)) || (ici instanceof org.eclipse.jface.action.AbstractGroupMarker)) && ((ici.getId()) != null)) && (!("".equals(ici.getId())))) { org.eclipse.jface.action.IContributionItem foundIci = mgr.find(ici.getId()); if (foundIci instanceof org.eclipse.jface.action.ContributionManager) { if ((((org.eclipse.jface.action.ContributionManager) (ici)).getSize()) > 0) { org.eclipse.core.runtime.IStatus status = new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.WARNING, org.eclipse.ui.internal.WorkbenchPlugin.PI_WORKBENCH, ("Menu contribution id collision: " + (ici.getId()))); org.eclipse.ui.statushandlers.StatusManager.getManager().handle(status); } continue; } else if (foundIci instanceof org.eclipse.jface.internal.provisional.action.IToolBarContributionItem) { org.eclipse.jface.action.IToolBarManager toolBarManager = ((org.eclipse.jface.internal.provisional.action.IToolBarContributionItem) (ici)).getToolBarManager(); if ((toolBarManager instanceof org.eclipse.jface.action.ContributionManager) && ((((org.eclipse.jface.action.ContributionManager) (toolBarManager)).getSize()) > 0)) { org.eclipse.core.runtime.IStatus status = new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.WARNING, org.eclipse.ui.internal.WorkbenchPlugin.PI_WORKBENCH, ("Toolbar contribution id collision: " + (ici.getId()))); org.eclipse.ui.statushandlers.StatusManager.getManager().handle(status); } continue; } else if (foundIci instanceof org.eclipse.jface.action.AbstractGroupMarker) { continue; } } final int oldSize = mgr.getSize(); mgr.insert(insertionIndex, ici); if ((ici.getId()) != null) { itemsAdded.add(ici.getId()); } if ((mgr.getSize()) > oldSize) insertionIndex++; } } }
private void initializeBorderStyle() { java.lang.String osname = java.lang.System.getProperty("os.name"); java.lang.String osversion = java.lang.System.getProperty("os.version"); if ((osname.startsWith("Windows")) && (("5.1".compareTo(osversion)) <= 0)) { org.eclipse.swt.graphics.RGB rgb = colors.getSystemColor(SWT.COLOR_WIDGET_BACKGROUND); if ((((rgb.red) != 212) && ((rgb.green) != 208)) && ((rgb.blue) != 200)) borderStyle = org.eclipse.swt.SWT.BORDER; } else if (osname.startsWith("Mac")) borderStyle = org.eclipse.swt.SWT.BORDER; }
protected void setActivePage(int pageIndex) { org.eclipse.jface.util.Assert.isTrue(((pageIndex >= 0) && (pageIndex < (getPageCount())))); getTabFolder().setSelection(pageIndex); pageChange(pageIndex); }
public org.eclipse.ui.IWorkbenchWindow getActiveWorkbenchWindow() { org.eclipse.swt.widgets.Display display = org.eclipse.swt.widgets.Display.getCurrent(); if (display == null) return null; org.eclipse.swt.widgets.Control shell = display.getActiveShell(); while (shell != null) { java.lang.Object data = shell.getData(); if (data instanceof org.eclipse.ui.IWorkbenchWindow) return ((org.eclipse.ui.IWorkbenchWindow) (data)); shell = shell.getParent(); } org.eclipse.ui.internal.WorkbenchWindow win = getActivatedWindow(); if (win != null) { return win; } org.eclipse.swt.widgets.Shell[] shells = display.getShells(); for (int i = 0; i < (shells.length); i++) { java.lang.Object data = shells[i].getData(); if (data instanceof org.eclipse.ui.IWorkbenchWindow) return ((org.eclipse.ui.IWorkbenchWindow) (data)); } return null; }
public void remove(org.eclipse.ui.internal.LayoutPart child) { int tabIndex = editors.indexOf(child); if (tabIndex < 0) return; editors.remove(child); removeListeners(((org.eclipse.ui.internal.EditorPane) (child))); if ((visibleEditor) == child) { int maxIndex = (editors.size()) - 1; if (maxIndex >= 0) { tabIndex = java.lang.Math.min(tabIndex, maxIndex); setVisibleEditor(((org.eclipse.ui.internal.EditorPane) (editors.get(tabIndex)))); } else { setVisibleEditor(null); } } if ((tabFolder) != null) { removeTab(getTab(child)); child.setContainer(null); } }
private final void activateMember(final org.eclipse.jface.commands.RadioState state) { if (((active) != null) && ((active) != state)) { active.setValue(java.lang.Boolean.FALSE); } active = state; }
private void saveEnabledStates() { org.eclipse.jface.preference.IPreferenceStore store = org.eclipse.ui.internal.WorkbenchPlugin.getDefault().getPreferenceStore(); org.eclipse.ui.activities.IWorkbenchActivitySupport support = org.eclipse.ui.PlatformUI.getWorkbench().getActivitySupport(); org.eclipse.ui.activities.IActivityManager activityManager = support.getActivityManager(); java.util.Iterator values = activityManager.getDefinedActivityIds().iterator(); while (values.hasNext()) { org.eclipse.ui.activities.IActivity activity = activityManager.getActivity(((java.lang.String) (values.next()))); store.setValue(createPreferenceKey(activity.getId()), activity.isEnabled()); } org.eclipse.ui.internal.WorkbenchPlugin.getDefault().savePluginPreferences(); }
protected void handlePerspectiveChange(org.eclipse.ui.IWorkbenchPage changedPage, org.eclipse.ui.IPerspectiveDescriptor changedPerspective, org.eclipse.ui.IWorkbenchPartReference partRef, java.lang.String changeId) { if ((changedPage != (page)) && ((perspective.getDesc()) != changedPerspective)) return; if (changeId.equals(IWorkbenchPage.CHANGE_VIEW_HIDE)) { if (partRef instanceof org.eclipse.ui.IViewReference) { org.eclipse.ui.internal.ViewReference ref = ((org.eclipse.ui.internal.ViewReference) (partRef)); if ((ref.getPane().getContainer()) instanceof org.eclipse.ui.internal.ViewStack) { int viewCount = 0; org.eclipse.ui.internal.LayoutPart[] children = ref.getPane().getContainer().getChildren(); for (int i = 0; i < (children.length); i++) { if (((children[i]) instanceof org.eclipse.ui.internal.ViewPane) && ((children[i]) != (ref.getPane()))) viewCount++; } if (viewCount == 0) ref.getPane().getStack().setState(IStackPresentationSite.STATE_RESTORED); } } } if (changeId.equals(IWorkbenchPage.CHANGE_FAST_VIEW_REMOVE)) { removeViewReference(((org.eclipse.ui.IViewReference) (partRef)), false, true); } }
public org.eclipse.core.runtime.IStatus restoreState(org.eclipse.ui.IMemento memento, org.eclipse.ui.IPerspectiveDescriptor activeDescriptor) { org.eclipse.ui.internal.misc.Assert.isNotNull(getShell()); org.eclipse.core.runtime.MultiStatus result = new org.eclipse.core.runtime.MultiStatus(org.eclipse.ui.PlatformUI.PLUGIN_ID, org.eclipse.core.runtime.IStatus.OK, org.eclipse.ui.internal.WorkbenchMessages.getString("WorkbenchWindow.problemsRestoringWindow"), null); org.eclipse.swt.graphics.Rectangle displayBounds = getShell().getDisplay().getBounds(); org.eclipse.swt.graphics.Rectangle shellBounds = new org.eclipse.swt.graphics.Rectangle(0, 0, 0, 0); java.lang.Integer bigInt; bigInt = memento.getInteger(IWorkbenchConstants.TAG_X); shellBounds.x = (bigInt == null) ? 0 : bigInt.intValue(); bigInt = memento.getInteger(IWorkbenchConstants.TAG_Y); shellBounds.y = (bigInt == null) ? 0 : bigInt.intValue(); bigInt = memento.getInteger(IWorkbenchConstants.TAG_WIDTH); shellBounds.width = (bigInt == null) ? 0 : bigInt.intValue(); bigInt = memento.getInteger(IWorkbenchConstants.TAG_HEIGHT); shellBounds.height = (bigInt == null) ? 0 : bigInt.intValue(); if (!(shellBounds.isEmpty())) { if (!(shellBounds.intersects(displayBounds))) { org.eclipse.swt.graphics.Rectangle clientArea = getShell().getDisplay().getClientArea(); shellBounds.x = clientArea.x; shellBounds.y = clientArea.y; } getShell().setBounds(shellBounds); } if ("true".equals(memento.getString(IWorkbenchConstants.TAG_MAXIMIZED))) { getShell().setMaximized(true); } if ("true".equals(memento.getString(IWorkbenchConstants.TAG_MINIMIZED))) { } org.eclipse.ui.IWorkbenchPage newActivePage = null; org.eclipse.ui.IMemento[] pageArray = memento.getChildren(IWorkbenchConstants.TAG_PAGE); for (int i = 0; i < (pageArray.length); i++) { org.eclipse.ui.IMemento pageMem = pageArray[i]; java.lang.String strFocus = pageMem.getString(IWorkbenchConstants.TAG_FOCUS); if ((strFocus == null) || ((strFocus.length()) == 0)) continue; org.eclipse.ui.IMemento inputMem = pageMem.getChild(IWorkbenchConstants.TAG_INPUT); java.lang.String factoryID = inputMem.getString(IWorkbenchConstants.TAG_FACTORY_ID); if (factoryID == null) { org.eclipse.ui.internal.WorkbenchPlugin.log("Unable to restore page - no input factory ID."); result.add(unableToRestorePage(pageMem)); continue; } org.eclipse.core.runtime.IAdaptable input; try { org.eclipse.ui.internal.misc.UIStats.start(UIStats.RESTORE_WORKBENCH, "WorkbenchPageFactory"); org.eclipse.ui.IElementFactory factory = org.eclipse.ui.internal.WorkbenchPlugin.getDefault().getElementFactory(factoryID); if (factory == null) { org.eclipse.ui.internal.WorkbenchPlugin.log(("Unable to restore pagee - cannot instantiate input factory: " + factoryID)); result.add(unableToRestorePage(pageMem)); continue; } input = factory.createElement(inputMem); if (input == null) { org.eclipse.ui.internal.WorkbenchPlugin.log(("Unable to restore page - cannot instantiate input element: " + factoryID)); result.add(unableToRestorePage(pageMem)); continue; } } finally { org.eclipse.ui.internal.misc.UIStats.end(UIStats.RESTORE_WORKBENCH, "WorkbenchPageFactory"); } org.eclipse.ui.internal.WorkbenchPage newPage = null; try { newPage = new org.eclipse.ui.internal.WorkbenchPage(this, input); result.add(newPage.restoreState(pageMem, activeDescriptor)); pageList.add(newPage); firePageOpened(newPage); } catch (org.eclipse.ui.WorkbenchException e) { org.eclipse.ui.internal.WorkbenchPlugin.log("Unable to restore perspective - constructor failed."); result.add(e.getStatus()); continue; } if ((strFocus != null) && ((strFocus.length()) > 0)) newActivePage = newPage; } if (pageList.isEmpty()) { try { org.eclipse.core.resources.IContainer root = org.eclipse.ui.internal.WorkbenchPlugin.getPluginWorkspace().getRoot(); java.lang.String defPerspID = workbench.getPerspectiveRegistry().getDefaultPerspective(); org.eclipse.ui.internal.WorkbenchPage newPage = new org.eclipse.ui.internal.WorkbenchPage(this, defPerspID, root); pageList.add(newPage); firePageOpened(newPage); } catch (org.eclipse.ui.WorkbenchException e) { org.eclipse.ui.internal.WorkbenchPlugin.log("Unable to create default perspective - constructor failed."); result.add(e.getStatus()); java.lang.String productName = workbench.getConfigurationInfo().getAboutInfo().getProductName(); if (productName == null) { productName = ""; } getShell().setText(productName); } } if (newActivePage == null) newActivePage = ((org.eclipse.ui.IWorkbenchPage) (pageList.getNextActive())); setActivePage(newActivePage); org.eclipse.ui.IMemento coolBarMem = memento.getChild(IWorkbenchConstants.TAG_TOOLBAR_LAYOUT); if (coolBarMem != null) getCoolBarManager().restoreState(coolBarMem); return result; }
public void firePartClosed(org.eclipse.ui.internal.e4.compatibility.CompatibilityPart compatibilityPart) { final org.eclipse.ui.IWorkbenchPart part = compatibilityPart.getPart(); final org.eclipse.ui.internal.WorkbenchPartReference partReference = compatibilityPart.getReference(); org.eclipse.e4.ui.model.application.ui.basic.MPart model = partReference.getModel(); org.eclipse.ui.internal.SaveablesList modelManager = ((org.eclipse.ui.internal.SaveablesList) (getWorkbenchWindow().getService(org.eclipse.ui.ISaveablesLifecycleListener.class))); java.lang.Object postCloseInfo = modelManager.preCloseParts(java.util.Collections.singletonList(part), false, getWorkbenchWindow()); if (postCloseInfo != null) { modelManager.postClose(postCloseInfo); } for (final java.lang.Object listener : partListenerList.getListeners()) { org.eclipse.core.runtime.SafeRunner.run(new org.eclipse.jface.util.SafeRunnable() { public void run() throws java.lang.Exception { ((org.eclipse.ui.IPartListener) (listener)).partClosed(part); } }); } for (final java.lang.Object listener : partListener2List.getListeners()) { org.eclipse.core.runtime.SafeRunner.run(new org.eclipse.jface.util.SafeRunnable() { public void run() throws java.lang.Exception { ((org.eclipse.ui.IPartListener2) (listener)).partClosed(partReference); } }); } if (part instanceof org.eclipse.ui.IViewPart) { viewReferences.remove(partReference); } else { editorReferences.remove(partReference); } for (int i = 0; i < (activationList.size()); i++) { if (model == (activationList.get(i))) { activationList.remove(i); break; } } if ((partService.getActivePart()) == null) { updateActivePartSources(null); updateActiveEditorSources(null); } else if (part instanceof org.eclipse.ui.IEditorPart) { updateActiveEditorSources(findPart(getActiveEditor())); } }
@javax.annotation.PostConstruct public void create() { eventBroker.subscribe(org.eclipse.e4.ui.workbench.UIEvents.buildTopic(UIEvents.UIElement.TOPIC, UIEvents.UIElement.WIDGET), widgetSetHandler); org.eclipse.ui.internal.WorkbenchPartReference reference = getReference(); try { wrapped = reference.createPart(); reference.initialize(wrapped); } catch (org.eclipse.ui.PartInitException e) { reference.invalidate(); if ((wrapped) instanceof org.eclipse.ui.IEditorPart) { try { wrapped.dispose(); } catch (java.lang.Exception ex) { logger.error(ex); } } disposeSite(); alreadyDisposed = false; org.eclipse.ui.internal.WorkbenchPlugin.log("Unable to create part", e.getStatus()); wrapped = reference.createErrorPart(e.getStatus()); try { reference.initialize(wrapped); } catch (org.eclipse.ui.PartInitException ex) { org.eclipse.ui.internal.WorkbenchPlugin.log("Unable to initialize error part", ex.getStatus()); return; } } org.eclipse.swt.widgets.Composite parent = new org.eclipse.swt.widgets.Composite(composite, org.eclipse.swt.SWT.NONE); parent.setLayout(new org.eclipse.swt.layout.FillLayout()); createPartControl(wrapped, parent); part.setLabel(computeLabel()); part.setTooltip(wrapped.getTitleToolTip()); if ((wrapped) instanceof org.eclipse.ui.ISaveablePart) { part.setDirty(((org.eclipse.ui.ISaveablePart) (wrapped)).isDirty()); } wrapped.addPropertyListener(new org.eclipse.ui.IPropertyListener() { public void propertyChanged(java.lang.Object source, int propId) { switch (propId) { case org.eclipse.ui.IWorkbenchPartConstants.PROP_TITLE : part.setLabel(computeLabel()); part.setTooltip(wrapped.getTitleToolTip()); break; case org.eclipse.ui.IWorkbenchPartConstants.PROP_DIRTY : if ((wrapped) instanceof org.eclipse.ui.ISaveablePart) { ((org.eclipse.e4.ui.model.application.ui.MDirtyable) (part)).setDirty(((org.eclipse.ui.ISaveablePart) (wrapped)).isDirty()); } break; } } }); ((org.eclipse.ui.internal.WorkbenchPage) (reference.getPage())).firePartOpened(this); }
public void releaseReferences() { id = null; tooltip = null; title = null; if (((image) != null) && ((imageDescritor) != null)) { if ((part) != null) part.getTitleImage(); org.eclipse.ui.internal.ReferenceCounter imageCache = org.eclipse.ui.internal.WorkbenchImages.getImageCache(); image = ((org.eclipse.swt.graphics.Image) (imageCache.get(imageDescritor))); if ((image) != null) { imageCache.removeRef(imageDescritor); } image = null; imageDescritor = null; } }
public int getColumnIndex(org.eclipse.swt.graphics.Point point) { int count = getColumnCount(); if (count == 0) { return 0; } for (int i = 0; i < count; i++) { if (getBounds(i).contains(point)) { return i; } } return -1; }
protected final void drawImage(org.eclipse.swt.graphics.ImageData src, int ox, int oy) { org.eclipse.swt.graphics.RGB[] out = imageData.getRGBs(); org.eclipse.swt.graphics.PaletteData palette = src.palette; if (palette.isDirect) { org.eclipse.swt.graphics.ImageData mask = src.getTransparencyMask(); for (int y = 0; y < (src.height); y++) { for (int x = 0; x < (src.width); x++) { if ((mask.getPixel(x, y)) != 0) { int xx = x + ox; int yy = y + oy; if ((((xx >= 0) && (xx < (imageData.width))) && (yy >= 0)) && (yy < (imageData.height))) { int pixel = src.getPixel(x, y); int alpha = src.getAlpha(x, y); int r = pixel & (palette.redMask); r = ((palette.redShift) < 0) ? r >>> (-(palette.redShift)) : r << (palette.redShift); int g = pixel & (palette.greenMask); g = ((palette.greenShift) < 0) ? g >>> (-(palette.greenShift)) : g << (palette.greenShift); int b = pixel & (palette.blueMask); b = ((palette.blueShift) < 0) ? b >>> (-(palette.blueShift)) : b << (palette.blueShift); pixel = org.eclipse.jface.resource.CompositeImageDescriptor.alloc(out, r, g, b); updatePixel(xx, yy, pixel, alpha); } } } } return; } int[] map = new int[256]; for (int i = 0; i < (map.length); i++) { map[i] = -1; } if ((src.getTransparencyType()) == (org.eclipse.swt.SWT.TRANSPARENCY_MASK)) { org.eclipse.swt.graphics.ImageData mask = src.getTransparencyMask(); for (int y = 0; y < (src.height); y++) { for (int x = 0; x < (src.width); x++) { if ((mask.getPixel(x, y)) != 0) { int xx = x + ox; int yy = y + oy; if ((((xx >= 0) && (xx < (imageData.width))) && (yy >= 0)) && (yy < (imageData.height))) { int pixel = src.getPixel(x, y); int alpha = src.getAlpha(x, y); int newPixel = map[pixel]; if (newPixel < 0) { org.eclipse.swt.graphics.RGB c = palette.getRGB(pixel); map[pixel] = newPixel = org.eclipse.jface.resource.CompositeImageDescriptor.alloc(out, c.red, c.green, c.blue); } updatePixel(xx, yy, pixel, alpha); } } } } return; } int maskPixel = src.transparentPixel; for (int y = 0; y < (src.height); y++) { for (int x = 0; x < (src.width); x++) { int pixel = src.getPixel(x, y); int xx = x + ox; int yy = y + oy; if ((maskPixel < 0) || (pixel != maskPixel)) { if ((((xx >= 0) && (xx < (imageData.width))) && (yy >= 0)) && (yy < (imageData.height))) { int newPixel = map[pixel]; if (newPixel < 0) { org.eclipse.swt.graphics.RGB c = palette.getRGB(pixel); map[pixel] = newPixel = org.eclipse.jface.resource.CompositeImageDescriptor.alloc(out, c.red, c.green, c.blue); } int alpha = src.getAlpha(x, y); updatePixel(xx, yy, newPixel, alpha); } } } } }
public void setToDefault(java.lang.String name) { java.lang.String oldValue = getString(name); java.lang.String defaultValue = getDefaultString(name); try { silentRunning = true; getStorePreferences().remove(name); dirty = true; firePropertyChangeEvent(name, oldValue, defaultValue); } finally { silentRunning = false; } }
public void setCSSInfo(org.eclipse.e4.ui.model.application.ui.MUIElement me, java.lang.Object widget) { org.eclipse.e4.core.contexts.IEclipseContext ctxt = getContext(me); if (ctxt == null) ctxt = getContext(me); final org.eclipse.e4.ui.services.IStylingEngine engine = ((org.eclipse.e4.ui.services.IStylingEngine) (getContext(me).get(IStylingEngine.SERVICE_NAME))); if (engine == null) return; org.eclipse.emf.ecore.EObject eObj = ((org.eclipse.emf.ecore.EObject) (me)); java.lang.String cssClassStr = 'M' + (eObj.eClass().getName()); for (java.lang.String tag : me.getTags()) cssClassStr += ' ' + tag; engine.setClassname(widget, cssClassStr); engine.setId(widget, me.getElementId()); }
public void run() { org.eclipse.swt.widgets.Shell shell = new org.eclipse.swt.widgets.Shell(display); shell.setLayout(new org.eclipse.swt.layout.GridLayout(2, false)); new org.eclipse.swt.widgets.Label(shell, org.eclipse.swt.SWT.NONE).setText("Enter '5' to be valid:"); org.eclipse.swt.widgets.Text text = new org.eclipse.swt.widgets.Text(shell, org.eclipse.swt.SWT.BORDER); org.eclipse.core.databinding.observable.value.WritableValue value = org.eclipse.core.databinding.observable.value.WritableValue.withValueType(java.lang.String.class); new org.eclipse.swt.widgets.Label(shell, org.eclipse.swt.SWT.NONE).setText("Error:"); org.eclipse.swt.widgets.Label errorLabel = new org.eclipse.swt.widgets.Label(shell, org.eclipse.swt.SWT.BORDER); errorLabel.setForeground(display.getSystemColor(SWT.COLOR_RED)); org.eclipse.jface.layout.GridDataFactory.swtDefaults().hint(200, SWT.DEFAULT).applyTo(errorLabel); org.eclipse.core.databinding.DataBindingContext dbc = new org.eclipse.core.databinding.DataBindingContext(); dbc.bindValue(org.eclipse.jface.databinding.swt.SWTObservables.observeText(text, SWT.Modify), value, new org.eclipse.core.databinding.UpdateValueStrategy().setAfterConvertValidator(new org.eclipse.jface.examples.databinding.snippets.Snippet004DataBindingContextErrorLabel.FiveValidator()), null); dbc.bindValue(org.eclipse.jface.databinding.swt.SWTObservables.observeText(errorLabel), new org.eclipse.core.databinding.AggregateValidationStatus(dbc.getBindings(), org.eclipse.core.databinding.AggregateValidationStatus.MAX_SEVERITY), null, null); shell.pack(); shell.open(); while (!(shell.isDisposed())) { if (!(display.readAndDispatch())) display.sleep(); } }
@java.lang.Override public void keyPressed(org.eclipse.swt.events.KeyEvent e) { if ((e.keyCode) == (org.eclipse.swt.SWT.ESC)) { text.setText(""); if (((previousFocusControl) != null) && (!(previousFocusControl.isDisposed()))) previousFocusControl.setFocus(); } else if ((e.keyCode) == (org.eclipse.swt.SWT.ARROW_UP)) { e.doit = false; } else if ((e.keyCode) == (org.eclipse.swt.SWT.ARROW_DOWN)) { e.doit = false; } }
public void uninstall() { if ((fProposalPopup) != null) fProposalPopup.hide(); if ((fContextInfoPopup) != null) fContextInfoPopup.hide(); manageAutoActivation(false); fViewer = null; }
public boolean performOk() { org.eclipse.core.resources.IResource resource = ((org.eclipse.core.resources.IResource) (getElement().getAdapter(org.eclipse.core.resources.IResource.class))); if (resource == null) return true; encodingEditor.store(); if ((lineDelimiterEditor) != null) { lineDelimiterEditor.store(); } try { org.eclipse.core.resources.ResourceAttributes attrs = resource.getResourceAttributes(); if (attrs != null) { boolean hasChange = false; if (((editableBox) != null) && ((editableBox.getSelection()) != (previousReadOnlyValue))) { attrs.setReadOnly(editableBox.getSelection()); hasChange = true; } if (((executableBox) != null) && ((executableBox.getSelection()) != (previousExecutableValue))) { attrs.setExecutable(executableBox.getSelection()); hasChange = true; } if (((archiveBox) != null) && ((archiveBox.getSelection()) != (previousArchiveValue))) { attrs.setArchive(archiveBox.getSelection()); hasChange = true; } if (hasChange) { resource.setResourceAttributes(attrs); attrs = resource.getResourceAttributes(); if (attrs != null) { previousReadOnlyValue = attrs.isReadOnly(); previousExecutableValue = attrs.isExecutable(); previousArchiveValue = attrs.isArchive(); if ((editableBox) != null) { editableBox.setSelection(attrs.isReadOnly()); } if ((executableBox) != null) { executableBox.setSelection(attrs.isExecutable()); } if ((archiveBox) != null) { archiveBox.setSelection(attrs.isArchive()); } } } } if ((this.derivedBox) != null) { boolean localDerivedValue = derivedBox.getSelection(); if ((previousDerivedValue) != localDerivedValue) { resource.setDerived(localDerivedValue, null); boolean isDerived = resource.isDerived(); previousDerivedValue = isDerived; derivedBox.setSelection(isDerived); } } } catch (org.eclipse.core.runtime.CoreException exception) { org.eclipse.jface.dialogs.ErrorDialog.openError(getShell(), IDEWorkbenchMessages.InternalError, exception.getLocalizedMessage(), exception.getStatus()); return false; } return true; }
void handleElementSelected(java.lang.String string, java.lang.Object selectedElement) { if (selectedElement instanceof org.eclipse.ui.internal.quickaccess.QuickAccessElement) { org.eclipse.ui.internal.quickaccess.QuickAccessElement element = ((org.eclipse.ui.internal.quickaccess.QuickAccessElement) (selectedElement)); addPreviousPick(string, element); text.setText(""); element.execute(); if (text.isFocusControl()) { org.eclipse.e4.ui.model.application.ui.basic.MPart activePart = partService.getActivePart(); if (activePart != null) { org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(activePart.getObject(), org.eclipse.e4.ui.di.Focus.class, activePart.getContext(), null); } } } }
protected void doLoadDefault() { if ((checkBox) != null) { boolean value = getPreferenceStore().getDefaultBoolean(getPreferenceName()); checkBox.setSelection(value); wasSelected = value; } }
public EditorAreaHelper(org.eclipse.ui.internal.WorkbenchPage page) { this.editorArea = new org.eclipse.ui.internal.EditorSashContainer(org.eclipse.ui.IPageLayout.ID_EDITOR_AREA, page); this.editorArea.createControl(page.getClientComposite()); final org.eclipse.swt.widgets.Shell shell = page.getWorkbenchWindow().getShell(); final org.eclipse.core.commands.IHandler openEditorDropDownHandler = new org.eclipse.core.commands.AbstractHandler() { public final java.lang.Object execute(final org.eclipse.core.commands.ExecutionEvent event) { displayEditorList(); return null; } }; final org.eclipse.ui.handlers.IHandlerService handlerService = ((org.eclipse.ui.handlers.IHandlerService) (org.eclipse.ui.PlatformUI.getWorkbench().getAdapter(org.eclipse.ui.handlers.IHandlerService.class))); openEditorDropDownHandlerActivation = handlerService.activateHandler("org.eclipse.ui.window.openEditorDropDown", openEditorDropDownHandler, new org.eclipse.ui.ActiveShellExpression(shell), ((org.eclipse.ui.ActiveShellExpression.SOURCES) | (org.eclipse.ui.ISources.LEGACY_MEDIUM))); }
void doAction() { org.eclipse.ui.internal.progress.JobTreeElement[] jobTreeElements = org.eclipse.ui.internal.progress.FinishedJobs.getInstance().getKeptElements(); for (int i = (jobTreeElements.length) - 1; i >= 0; i--) { if ((jobTreeElements[i]) instanceof org.eclipse.ui.internal.progress.JobInfo) { org.eclipse.ui.internal.progress.JobInfo ji = ((org.eclipse.ui.internal.progress.JobInfo) (jobTreeElements[i])); org.eclipse.core.runtime.jobs.Job job = ji.getJob(); if (job != null) { org.eclipse.core.runtime.IStatus status = job.getResult(); if ((status != null) && ((status.getSeverity()) == (org.eclipse.core.runtime.IStatus.ERROR))) { org.eclipse.ui.statushandlers.StatusAdapter statusAdapter = org.eclipse.ui.internal.progress.StatusAdapterHelper.getInstance().getStatusAdapter(ji); if (statusAdapter == null) statusAdapter = new org.eclipse.ui.statushandlers.StatusAdapter(status); org.eclipse.ui.statushandlers.StatusManager.getManager().handle(statusAdapter, StatusManager.SHOW); org.eclipse.ui.internal.progress.JobTreeElement topElement = ((org.eclipse.ui.internal.progress.JobTreeElement) (ji.getParent())); if (topElement == null) { topElement = ji; } org.eclipse.ui.internal.progress.FinishedJobs.getInstance().remove(topElement); } org.eclipse.jface.action.IAction action = null; java.lang.Object property = job.getProperty(IProgressConstants.ACTION_PROPERTY); if (property instanceof org.eclipse.jface.action.IAction) { action = ((org.eclipse.jface.action.IAction) (property)); } if ((action != null) && (action.isEnabled())) { action.run(); org.eclipse.ui.internal.progress.JobTreeElement topElement = ((org.eclipse.ui.internal.progress.JobTreeElement) (ji.getParent())); if (topElement == null) { topElement = ji; } org.eclipse.ui.internal.progress.FinishedJobs.getInstance().remove(topElement); return; } } } } progressRegion.processDoubleClick(); refresh(); }
public java.lang.String getFullPath(java.lang.Object element) { return ((org.eclipse.core.filesystem.IFileStore) (element)).toURI().getSchemeSpecificPart(); }
private void hookChildControllerLogic(final org.eclipse.e4.ui.model.application.MPart<?> parentElement, final org.eclipse.e4.ui.model.application.MPart<?> childElement, final org.eclipse.swt.custom.CTabItem cti) { org.eclipse.core.databinding.observable.value.IObservableValue textObs = org.eclipse.emf.databinding.EMFObservables.observeValue(((org.eclipse.emf.ecore.EObject) (childElement)), ApplicationPackage.Literals.MITEM__NAME); org.eclipse.jface.databinding.swt.ISWTObservableValue uiObs = org.eclipse.jface.databinding.swt.SWTObservables.observeText(cti); dbc.bindValue(uiObs, textObs, null, null); org.eclipse.core.databinding.observable.value.IObservableValue emfTTipObs = org.eclipse.emf.databinding.EMFObservables.observeValue(((org.eclipse.emf.ecore.EObject) (childElement)), ApplicationPackage.Literals.MITEM__TOOLTIP); org.eclipse.jface.databinding.swt.ISWTObservableValue uiTTipObs = org.eclipse.jface.databinding.swt.SWTObservables.observeTooltipText(cti); dbc.bindValue(uiTTipObs, emfTTipObs, null, null); ((org.eclipse.emf.ecore.EObject) (childElement)).eAdapters().add(new org.eclipse.emf.common.notify.impl.AdapterImpl() { @java.lang.Override public void notifyChanged(org.eclipse.emf.common.notify.Notification msg) { org.eclipse.e4.ui.model.application.MPart<?> sm = ((org.eclipse.e4.ui.model.application.MPart<?>) (msg.getNotifier())); if (ApplicationPackage.Literals.MITEM__ICON_URI.equals(msg.getFeature())) { org.eclipse.swt.custom.CTabItem item = findItemForPart(parentElement, sm); if (item != null) { org.eclipse.swt.graphics.Image image = getImage(sm); if (image != null) item.setImage(image); } } } }); }
void animateLoop(org.eclipse.core.runtime.IProgressMonitor monitor) { if ((items.size()) == 0) return; org.eclipse.ui.internal.progress.AnimationItem[] animationItems = getAnimationItems(); boolean startErrorState = showingError; org.eclipse.swt.widgets.Display display = animationItems[0].getControl().getDisplay(); org.eclipse.ui.internal.progress.ImageData[] imageDataArray = getImageData(); org.eclipse.ui.internal.progress.ImageData imageData = imageDataArray[0]; org.eclipse.ui.internal.progress.Image image = org.eclipse.ui.internal.progress.JobProgressManager.getInstance().getImage(imageData); int imageDataIndex = 0; org.eclipse.ui.internal.progress.ImageLoader loader = getLoader(); if (display.isDisposed()) { monitor.setCanceled(true); setAnimated(false); return; } org.eclipse.ui.internal.progress.Image offScreenImage = new org.eclipse.ui.internal.progress.Image(display, loader.logicalScreenWidth, loader.logicalScreenHeight); org.eclipse.ui.internal.progress.GC offScreenImageGC = new org.eclipse.ui.internal.progress.GC(offScreenImage); try { offScreenImageGC.setBackground(background); offScreenImageGC.fillRectangle(0, 0, loader.logicalScreenWidth, loader.logicalScreenHeight); offScreenImageGC.drawImage(image, 0, 0, imageData.width, imageData.height, imageData.x, imageData.y, imageData.width, imageData.height); if ((loader.repeatCount) > 0) { while (((isAnimated()) && (!(monitor.isCanceled()))) && (startErrorState == (showingError))) { if (display.isDisposed()) { monitor.setCanceled(true); continue; } if ((imageData.disposalMethod) == (org.eclipse.swt.SWT.DM_FILL_BACKGROUND)) { org.eclipse.ui.internal.progress.Color bgColor = null; int backgroundPixel = loader.backgroundPixel; if (backgroundPixel != (-1)) { org.eclipse.ui.internal.progress.RGB backgroundRGB = imageData.palette.getRGB(backgroundPixel); bgColor = new org.eclipse.ui.internal.progress.Color(null, backgroundRGB); } try { offScreenImageGC.setBackground((bgColor != null ? bgColor : background)); offScreenImageGC.fillRectangle(imageData.x, imageData.y, imageData.width, imageData.height); } finally { if (bgColor != null) bgColor.dispose(); } } else if ((imageData.disposalMethod) == (org.eclipse.swt.SWT.DM_FILL_PREVIOUS)) { offScreenImageGC.drawImage(image, 0, 0, imageData.width, imageData.height, imageData.x, imageData.y, imageData.width, imageData.height); } imageDataIndex = (imageDataIndex + 1) % (imageDataArray.length); imageData = imageDataArray[imageDataIndex]; image.dispose(); image = new org.eclipse.ui.internal.progress.Image(display, imageData); offScreenImageGC.drawImage(image, 0, 0, imageData.width, imageData.height, imageData.x, imageData.y, imageData.width, imageData.height); boolean refreshItems = false; for (int i = 0; i < (animationItems.length); i++) { org.eclipse.ui.internal.progress.AnimationItem item = animationItems[i]; if (item.imageCanvasGC.isDisposed()) { refreshItems = true; continue; } else { item.imageCanvasGC.drawImage(offScreenImage, 0, 0); } } if (refreshItems) animationItems = getAnimationItems(); try { java.lang.Thread.sleep(visibleDelay(((imageData.delayTime) * 10))); } catch (java.lang.InterruptedException e) { } } } } finally { image.dispose(); offScreenImage.dispose(); offScreenImageGC.dispose(); } }
void drawGradient() { if ((((titleLabel) == null) || ((viewToolBar) == null)) || ((isvToolBar) == null)) return; if (showFocus) { if (getShellActivated()) { titleLabel.setBackground(org.eclipse.ui.internal.WorkbenchColors.getActiveViewGradient(), org.eclipse.ui.internal.WorkbenchColors.getActiveViewGradientPercents()); titleLabel.setForeground(org.eclipse.ui.internal.WorkbenchColors.getSystemColor(SWT.COLOR_TITLE_FOREGROUND)); titleLabel.update(); viewToolBar.setBackground(org.eclipse.ui.internal.WorkbenchColors.getActiveViewGradientEnd()); isvToolBar.setBackground(org.eclipse.ui.internal.WorkbenchColors.getActiveViewGradientEnd()); } else { titleLabel.setBackground(org.eclipse.ui.internal.WorkbenchColors.getDeactivatedViewGradient(), org.eclipse.ui.internal.WorkbenchColors.getDeactivatedViewGradientPercents()); titleLabel.setForeground(org.eclipse.ui.internal.WorkbenchColors.getSystemColor(SWT.COLOR_TITLE_INACTIVE_FOREGROUND)); titleLabel.update(); viewToolBar.setBackground(org.eclipse.ui.internal.WorkbenchColors.getSystemColor(SWT.COLOR_WIDGET_BACKGROUND)); isvToolBar.setBackground(org.eclipse.ui.internal.WorkbenchColors.getSystemColor(SWT.COLOR_WIDGET_BACKGROUND)); } } else { titleLabel.setBackground(null, null); titleLabel.setForeground(null); titleLabel.update(); viewToolBar.setBackground(org.eclipse.ui.internal.WorkbenchColors.getSystemColor(SWT.COLOR_WIDGET_BACKGROUND)); isvToolBar.setBackground(org.eclipse.ui.internal.WorkbenchColors.getSystemColor(SWT.COLOR_WIDGET_BACKGROUND)); } }
public void setBusy(boolean busy) { this.busy = busy; super.setBusy(busy); updateFont(); org.eclipse.ui.internal.presentations.r33.AnimatedTabItem item = ((org.eclipse.ui.internal.presentations.r33.AnimatedTabItem) (getWidget())); if (busy) item.startBusy(); else item.stopBusy(); }
public java.lang.Object createWidget(org.eclipse.e4.ui.model.application.MPart<?> part) { final org.eclipse.swt.widgets.Widget newWidget; if (part instanceof org.eclipse.e4.ui.model.application.MWindow<?>) { org.eclipse.e4.core.services.context.IEclipseContext parentContext = getContextForParent(part); org.eclipse.swt.widgets.Shell wbwShell = new org.eclipse.swt.widgets.Shell(org.eclipse.swt.widgets.Display.getCurrent(), org.eclipse.swt.SWT.SHELL_TRIM); wbwShell.setLayout(new org.eclipse.swt.layout.FillLayout()); newWidget = wbwShell; bindWidget(part, newWidget); org.eclipse.e4.core.services.context.IEclipseContext localContext = part.getContext(); localContext.set(IContextConstants.DEBUG_STRING, "MWorkbenchWindow"); parentContext.set(IServiceConstants.ACTIVE_CHILD, localContext); localContext.set(org.eclipse.swt.widgets.Shell.class.getName(), wbwShell); localContext.set(Workbench.LOCAL_ACTIVE_SHELL, wbwShell); if (part instanceof org.eclipse.e4.ui.model.workbench.MWorkbenchWindow) { } else { wbwShell.setLayout(new org.eclipse.swt.layout.FillLayout()); } if ((((org.eclipse.e4.ui.model.application.MWindow<?>) (part)).getName()) != null) wbwShell.setText(((org.eclipse.e4.ui.model.application.MWindow<?>) (part)).getName()); java.lang.String uri = ((org.eclipse.e4.ui.model.application.MWindow<?>) (part)).getIconURI(); if (uri != null) { try { org.eclipse.swt.graphics.Image image = org.eclipse.jface.resource.ImageDescriptor.createFromURL(new java.net.URL(uri)).createImage(); wbwShell.setImage(image); } catch (java.net.MalformedURLException e) { if ((logger) != null) logger.error(e); } } } else { newWidget = null; } return newWidget; }
public void refreshEditorAreaVisibility() { if (editorHidden) { hideEditorAreaLocal(); setEditorAreaTrimVisibility(false); return; } org.eclipse.ui.internal.EditorStack editorStack = ((org.eclipse.ui.internal.EditorSashContainer) (editorArea)).getUpperRightEditorStack(null); if (editorStack == null) return; editorStack.setStateLocal(editorAreaState); editorStack.showMinMax((!(isFixedLayout()))); if ((editorAreaState) == (org.eclipse.ui.presentations.IStackPresentationSite.STATE_MINIMIZED)) { hideEditorAreaLocal(); setEditorAreaTrimVisibility(true); } else { setEditorAreaTrimVisibility(false); showEditorAreaLocal(); if ((editorAreaState) == (org.eclipse.ui.presentations.IStackPresentationSite.STATE_MAXIMIZED)) getPresentation().setMaximizedStack(editorStack); } }
private java.lang.String getSecondaryMessage(org.eclipse.ui.statushandlers.StatusAdapter statusAdapter) { java.lang.String primary = getPrimaryMessage(statusAdapter); org.eclipse.core.runtime.IStatus status = statusAdapter.getStatus(); if ((((status.getMessage()) != null) && ((status.getMessage().trim().length()) > 0)) && (!(primary.equals(status.getMessage())))) { return status.getMessage(); } if (((status.getChildren().length) > 0) && (!(primary.equals(status.getMessage())))) { return org.eclipse.ui.internal.WorkbenchMessages.WorkbenchStatusDialog_StatusWithChildren; } java.lang.Throwable t = status.getException(); if (t != null) { if ((((t.getMessage()) != null) && ((t.getMessage().trim().length()) > 0)) && (!(primary.equals(t.getMessage())))) { return t.getMessage(); } java.lang.String throwableName = t.getClass().getName(); if (!(primary.equals(throwableName))) { return throwableName; } } return org.eclipse.ui.internal.WorkbenchMessages.WorkbenchStatusDialog_SeeDetails; }
public org.eclipse.emf.ecore.resource.Resource loadMostRecentModel() { java.io.File baseLocation; try { baseLocation = new java.io.File(org.eclipse.core.runtime.URIUtil.toURI(instanceLocation.getURL())); } catch (java.net.URISyntaxException e) { throw new java.lang.RuntimeException(e); } baseLocation = new java.io.File(baseLocation, ".metadata"); baseLocation = new java.io.File(baseLocation, ".plugins"); baseLocation = new java.io.File(baseLocation, "org.eclipse.e4.workbench"); if (((deltaRestore) && (saveAndRestore)) && (!(clearPersistedState))) { java.io.File deltaFile = new java.io.File(baseLocation, "deltas.xml"); if (deltaFile.exists()) { org.eclipse.e4.ui.model.application.MApplication appElement = null; try { java.io.File workbenchData = new java.io.File(baseLocation, "workbench.xmi"); org.eclipse.emf.common.util.URI restoreLocationNew = org.eclipse.emf.common.util.URI.createFileURI(workbenchData.getAbsolutePath()); resource = resourceSetImpl.createResource(restoreLocationNew); org.eclipse.emf.ecore.resource.Resource oldResource = loadResource(applicationDefinitionInstance); appElement = ((org.eclipse.e4.ui.model.application.MApplication) (oldResource.getContents().get(0))); context.set(org.eclipse.e4.ui.model.application.MApplication.class, appElement); org.eclipse.e4.ui.internal.workbench.ModelAssembler contribProcessor = org.eclipse.e4.core.contexts.ContextInjectionFactory.make(org.eclipse.e4.ui.internal.workbench.ModelAssembler.class, context); contribProcessor.processModel(); java.io.File deltaOldFile = new java.io.File(baseLocation, "deltas_42M7migration.xml"); deltaFile.renameTo(deltaOldFile); org.eclipse.emf.common.util.URI restoreLocation = org.eclipse.emf.common.util.URI.createFileURI(deltaOldFile.getAbsolutePath()); java.io.File file = new java.io.File(restoreLocation.toFileString()); if (file.exists()) { org.w3c.dom.Document document = javax.xml.parsers.DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(file); org.eclipse.e4.ui.workbench.modeling.IModelReconcilingService modelReconcilingService = new org.eclipse.e4.ui.internal.workbench.ModelReconcilingService(); org.eclipse.e4.ui.workbench.modeling.ModelReconciler modelReconciler = modelReconcilingService.createModelReconciler(); document.normalizeDocument(); java.util.Collection<org.eclipse.e4.ui.workbench.modeling.ModelDelta> deltas = modelReconciler.constructDeltas(oldResource.getContents().get(0), document); modelReconcilingService.applyDeltas(deltas); } } catch (java.lang.Exception e) { if ((logger) != null) { logger.error(e); } } if (appElement != null) resource.getContents().add(((org.eclipse.emf.ecore.EObject) (appElement))); return resource; } } java.io.File workbenchData = new java.io.File(baseLocation, "workbench.xmi"); if ((clearPersistedState) && (workbenchData.exists())) workbenchData.delete(); org.eclipse.emf.common.util.URI restoreLocation = null; if (saveAndRestore) restoreLocation = org.eclipse.emf.common.util.URI.createFileURI(workbenchData.getAbsolutePath()); long restoreLastModified = (restoreLocation == null) ? 0L : new java.io.File(restoreLocation.toFileString()).lastModified(); long lastApplicationModification = getLastApplicationModification(); boolean restore = restoreLastModified > lastApplicationModification; resource = null; if (restore && (saveAndRestore)) { resource = loadResource(restoreLocation); } if ((resource) == null) { org.eclipse.emf.ecore.resource.Resource applicationResource = loadResource(applicationDefinitionInstance); org.eclipse.e4.ui.model.application.MApplication theApp = ((org.eclipse.e4.ui.model.application.MApplication) (applicationResource.getContents().get(0))); if (restoreLocation == null) restoreLocation = org.eclipse.emf.common.util.URI.createFileURI(workbenchData.getAbsolutePath()); resource = resourceSetImpl.createResource(restoreLocation); resource.getContents().add(((org.eclipse.emf.ecore.EObject) (theApp))); } org.eclipse.e4.ui.model.application.MApplication appElement = ((org.eclipse.e4.ui.model.application.MApplication) (resource.getContents().get(0))); this.context.set(org.eclipse.e4.ui.model.application.MApplication.class, appElement); org.eclipse.e4.ui.internal.workbench.ModelAssembler contribProcessor = org.eclipse.e4.core.contexts.ContextInjectionFactory.make(org.eclipse.e4.ui.internal.workbench.ModelAssembler.class, context); contribProcessor.processModel(); return resource; }
public java.lang.Object getAdapter(java.lang.Class adapter) { if (adapter.equals(org.eclipse.core.commands.operations.IUndoContext.class)) { return undoContext; } if (adapter.equals(org.eclipse.core.runtime.IProgressMonitor.class)) { if ((progressDialog) != null) return progressDialog.getProgressMonitor(); } if ((site) != null) { if (adapter.equals(org.eclipse.swt.widgets.Shell.class)) { return getWorkbenchWindow().getShell(); } if (adapter.equals(org.eclipse.ui.IWorkbenchWindow.class)) { return getWorkbenchWindow(); } if (adapter.equals(org.eclipse.ui.IWorkbenchPart.class)) { return site.getPart(); } org.eclipse.ui.IWorkbenchPart part = site.getPart(); if (part != null) return part.getAdapter(adapter); } return null; }
public void createControl(org.eclipse.swt.widgets.Composite parent, org.eclipse.ui.presentations.StackPresentation presentation) { org.eclipse.jface.util.Assert.isTrue(isDisposed()); if ((presentationSite.getPresentation()) != null) return; presentationSite.setPresentation(presentation); java.util.Iterator iter = children.iterator(); while (iter.hasNext()) { org.eclipse.ui.internal.LayoutPart part = ((org.eclipse.ui.internal.LayoutPart) (iter.next())); showPart(part, null); } org.eclipse.swt.widgets.Control ctrl = getPresentation().getControl(); org.eclipse.ui.internal.dnd.DragUtil.addDragTarget(ctrl, new org.eclipse.ui.internal.dnd.IDragOverListener() { public org.eclipse.ui.internal.dnd.IDropTarget drag(org.eclipse.swt.widgets.Control currentControl, final java.lang.Object draggedObject, org.eclipse.swt.graphics.Point position, org.eclipse.swt.graphics.Rectangle dragRectangle) { if (!(draggedObject instanceof org.eclipse.ui.internal.PartPane)) { return null; } final org.eclipse.ui.internal.PartPane pane = ((org.eclipse.ui.internal.PartPane) (draggedObject)); if (!(allowsDrop(pane))) { return null; } if ((pane.getWorkbenchWindow()) != (getWorkbenchWindow())) { return null; } { org.eclipse.swt.graphics.Point controlCoordinates = currentControl.getParent().toControl(position); org.eclipse.swt.graphics.Rectangle bounds = currentControl.getBounds(); int closestSide = org.eclipse.jface.util.Geometry.getClosestSide(bounds, controlCoordinates); if ((org.eclipse.jface.util.Geometry.getDistanceFromEdge(bounds, controlCoordinates, closestSide)) < 5) { return null; } } final org.eclipse.ui.presentations.StackDropResult dropResult = getPresentation().dragOver(currentControl, position); if (dropResult == null) { return null; } return new org.eclipse.ui.internal.dnd.IDropTarget() { public void drop() { if ((pane.getContainer()) != (org.eclipse.ui.internal.PartStack.this)) { derefPart(pane); pane.reparent(getParent()); } else { remove(pane); } add(pane, dropResult.getCookie()); setSelection(pane); pane.setFocus(); } public org.eclipse.swt.graphics.Cursor getCursor() { return org.eclipse.ui.internal.DragCursors.getCursor(DragCursors.CENTER); } public org.eclipse.swt.graphics.Rectangle getSnapRectangle() { return dropResult.getSnapRectangle(); } }; } }); ctrl.setData(this); updateActions(); if ((current) instanceof org.eclipse.ui.internal.PartPlaceholder) { current = null; updateContainerVisibleTab(); } refreshPresentationSelection(); org.eclipse.swt.graphics.Rectangle bounds = presentation.getControl().getBounds(); int minimumHeight = getMinimumHeight(); if (((presentationSite.getState()) == (org.eclipse.ui.presentations.IStackPresentationSite.STATE_MINIMIZED)) && ((bounds.height) != minimumHeight)) { bounds.width = getMinimumWidth(); bounds.height = minimumHeight; getPresentation().setBounds(bounds); } }
public void setBlocked(org.eclipse.core.runtime.IStatus reason) { org.eclipse.ui.internal.progress.JobInfo info = getJobInfo(job); info.setBlockedStatus(null); refreshJobInfo(info); if ((listener) != null) { listener.setBlocked(reason); } }
private void makeActiveEditor(org.eclipse.ui.IEditorReference ref) { if (ref == (getActiveEditor())) { return; } org.eclipse.ui.IEditorPart part = (ref == null) ? null : ref.getEditor(true); if (part != null) { editorMgr.setVisibleEditor(ref, false); navigationHistory.markEditor(part); } partList.setActiveEditor(ref); actionSwitcher.updateTopEditor(part); if (ref != null) { activationList.bringToTop(ref); } }
int getPercentDone() { org.eclipse.ui.internal.progress.TaskInfo info = getTaskInfo(); if (info != null) { if ((info.totalWork) == (org.eclipse.core.runtime.IProgressMonitor.UNKNOWN)) return org.eclipse.core.runtime.IProgressMonitor.UNKNOWN; if ((info.totalWork) == 0) return 0; return (((int) (info.preWork)) * 100) / (info.totalWork); } return org.eclipse.core.runtime.IProgressMonitor.UNKNOWN; }
void firePerspectiveActivated(org.eclipse.ui.IWorkbenchPage page, org.eclipse.ui.IPerspectiveDescriptor perspective) { org.eclipse.jface.action.IMenuManager windowManager = ((org.eclipse.ui.internal.WorkbenchPage) (page)).getActionBars().getMenuManager(); allowUpdates(windowManager); windowManager.update(false); org.eclipse.ui.internal.misc.UIListenerLogging.logPerspectiveEvent(this, page, perspective, UIListenerLogging.PLE_PERSP_ACTIVATED); perspectiveListeners.firePerspectiveActivated(page, perspective); }
private void buildAllMarkers(org.eclipse.ui.progress.IElementCollector collector, org.eclipse.core.runtime.IProgressMonitor monitor) { int markerLimit = view.getMarkerLimit(); monitor.beginTask(MarkerMessages.MarkerView_19, (markerLimit == (-1) ? 60 : 100)); try { monitor.subTask(MarkerMessages.MarkerView_waiting_on_changes); if (monitor.isCanceled()) { return; } monitor.subTask(MarkerMessages.MarkerView_searching_for_markers); org.eclipse.core.runtime.SubProgressMonitor subMonitor = new org.eclipse.core.runtime.SubProgressMonitor(monitor, 10); lastMarkers = org.eclipse.ui.views.markers.internal.MarkerList.compute(view.getEnabledFilters(), subMonitor, true); if (monitor.isCanceled()) return; view.refreshMarkerCounts(monitor); } catch (org.eclipse.core.runtime.CoreException e) { org.eclipse.ui.internal.ide.IDEWorkbenchPlugin.getDefault().getLog().log(e.getStatus()); lastMarkers = new org.eclipse.ui.views.markers.internal.MarkerList(); return; } if (monitor.isCanceled()) { return; } if (markerLimit != (-1)) { monitor.subTask(MarkerMessages.MarkerView_18); org.eclipse.core.runtime.SubProgressMonitor mon = new org.eclipse.core.runtime.SubProgressMonitor(monitor, 40); lastMarkers = org.eclipse.ui.views.markers.internal.SortUtil.getFirst(lastMarkers, ((org.eclipse.ui.views.markers.internal.TableSorter) (view.getViewer().getSorter())), markerLimit, mon); if (monitor.isCanceled()) return; } if ((lastMarkers.getSize()) == 0) { monitor.done(); return; } monitor.subTask(MarkerMessages.MarkerView_queueing_updates); org.eclipse.core.runtime.SubProgressMonitor sub = new org.eclipse.core.runtime.SubProgressMonitor(monitor, 50); if (view.isHierarchalMode()) { view.getTableSorter().sort(view.getViewer(), lastMarkers); org.eclipse.ui.views.markers.internal.MarkerAdapter.MarkerCategory[] categories = buildHierarchy(lastMarkers, 0, ((lastMarkers.getSize()) - 1), 0, null); if (categories == null) collector.add(lastMarkers.toArray(), sub); else collector.add(categories, sub); } else collector.add(lastMarkers.toArray(), sub); if (monitor.isCanceled()) return; monitor.done(); }
public org.eclipse.core.runtime.IStatus runInUIThread(org.eclipse.core.runtime.IProgressMonitor monitor) { if ((job.getState()) == (org.eclipse.core.runtime.jobs.Job.NONE)) { finishedRun(); cleanUpFinishedJob(); return org.eclipse.core.runtime.Status.CANCEL_STATUS; } if (!(org.eclipse.ui.internal.progress.ProgressManagerUtil.safeToOpen(this))) return org.eclipse.core.runtime.Status.CANCEL_STATUS; if (((getParentShell()) != null) && (getParentShell().isDisposed())) return org.eclipse.core.runtime.Status.CANCEL_STATUS; open(); return org.eclipse.core.runtime.Status.OK_STATUS; }
public java.lang.Object[] getResult() { java.lang.Object[] result = super.getResult(); if (result == null) return null; java.util.List resultToReturn = new java.util.ArrayList(); for (int i = 0; i < (result.length); i++) { if ((result[i]) instanceof org.eclipse.core.resources.IResource) { resultToReturn.add(result[i]); } } return resultToReturn.toArray(); }
public void handleEvent(org.eclipse.swt.widgets.Event event) { if ((event.button) != 3) { org.eclipse.swt.graphics.Point position = org.eclipse.ui.internal.dnd.DragUtil.getEventLoc(event); startDraggingTrim(position); } }
private void createBuildControls(org.eclipse.swt.widgets.Composite parent) { buildPreference = new org.eclipse.swt.widgets.Button(parent, org.eclipse.swt.SWT.CHECK); buildPreference.setText("Temporarily restore 2.1 rebuild actions"); buildPreference.setSelection(WorkbenchActionBuilder.INCLUDE_REBUILD_ACTIONS); buildPreference.addSelectionListener(new org.eclipse.swt.events.SelectionAdapter() { public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { org.eclipse.ui.internal.ide.WorkbenchActionBuilder.setIncludeRebuildActions(buildPreference.getSelection()); } }); }
public void mouseDoubleClick(org.eclipse.swt.events.MouseEvent event) { org.eclipse.swt.graphics.Rectangle clientArea = tabFolder.getClientArea(); if (((tabFolder.getStyle()) & (org.eclipse.swt.SWT.TOP)) != 0) { if ((event.y) > (clientArea.y)) return; } else { if ((event.y) < ((clientArea.y) + (clientArea.height))) return; } doZoom(); }
public org.eclipse.e4.ui.model.application.ui.MUIElement getActiveElement(org.eclipse.ui.IWorkbenchPartReference ref) { org.eclipse.e4.ui.model.application.ui.MUIElement element = null; org.eclipse.e4.ui.model.application.ui.advanced.MPerspective curPersp = modelService.getActivePerspective(window); org.eclipse.e4.ui.model.application.ui.advanced.MPlaceholder eaPH = ((org.eclipse.e4.ui.model.application.ui.advanced.MPlaceholder) (modelService.find(IPageLayout.ID_EDITOR_AREA, curPersp))); org.eclipse.e4.ui.model.application.ui.basic.MPart model = ((org.eclipse.ui.internal.WorkbenchPartReference) (ref)).getModel(); org.eclipse.e4.ui.model.application.ui.advanced.MPlaceholder placeholder = model.getCurSharedRef(); switch (modelService.getElementLocation((placeholder == null ? model : placeholder))) { case org.eclipse.e4.ui.workbench.modeling.EModelService.IN_ACTIVE_PERSPECTIVE : case org.eclipse.e4.ui.workbench.modeling.EModelService.OUTSIDE_PERSPECTIVE : org.eclipse.e4.ui.model.application.ui.MUIElement parent = (placeholder == null) ? model.getParent() : placeholder.getParent(); if (parent instanceof org.eclipse.e4.ui.model.application.ui.basic.MPartStack) { element = parent; } break; case org.eclipse.e4.ui.workbench.modeling.EModelService.IN_SHARED_AREA : element = eaPH; break; } return element; }
public void setToDefault(java.lang.String name) { if (!(properties.containsKey(name))) return; java.lang.Object oldValue = properties.get(name); properties.remove(name); dirty = true; java.lang.Object newValue = null; if ((defaultProperties) != null) { newValue = defaultProperties.get(name); } firePropertyChangeEvent(name, oldValue, newValue); }
private void createViewer(org.eclipse.swt.widgets.Composite parent) { org.eclipse.swt.widgets.Tree tree = new org.eclipse.swt.widgets.Tree(parent, ((((org.eclipse.swt.SWT.SINGLE) | (org.eclipse.swt.SWT.H_SCROLL)) | (org.eclipse.swt.SWT.V_SCROLL)) | (org.eclipse.swt.SWT.BORDER))); viewer = new org.eclipse.jface.viewers.TreeViewer(tree); contentProvider = new org.eclipse.ui.internal.dialogs.WizardContentProvider(true); viewer.setContentProvider(contentProvider); viewer.setLabelProvider(new org.eclipse.ui.model.WorkbenchLabelProvider()); viewer.setSorter(NewWizardCollectionSorter.INSTANCE); viewer.addSelectionChangedListener(this); viewer.addDoubleClickListener(this); java.util.ArrayList inputArray = new java.util.ArrayList(); for (int i = 0; i < (primaryWizards.length); i++) { inputArray.add(primaryWizards[i]); } if ((wizardCategories.getParent(wizardCategories)) == null) { java.lang.Object[] children = wizardCategories.getChildren(); for (int i = 0; i < (children.length); i++) { inputArray.add(children[i]); } } else { inputArray.add(wizardCategories); } org.eclipse.ui.model.AdaptableList input = new org.eclipse.ui.model.AdaptableList(inputArray); viewer.setInput(input); tree.setFont(parent.getFont()); org.eclipse.swt.layout.GridData data = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_BOTH); data.widthHint = org.eclipse.ui.internal.dialogs.NewWizardNewPage.SIZING_LISTS_WIDTH; boolean needsHint = org.eclipse.ui.internal.dialogs.DialogUtil.inRegularFontMode(tree.getParent()); if (needsHint) { data.heightHint = org.eclipse.ui.internal.dialogs.NewWizardNewPage.SIZING_LISTS_HEIGHT; } tree.setLayoutData(data); viewer.addDoubleClickListener(new org.eclipse.jface.viewers.IDoubleClickListener() { public void doubleClick(org.eclipse.jface.viewers.DoubleClickEvent event) { org.eclipse.jface.viewers.IStructuredSelection s = ((org.eclipse.jface.viewers.IStructuredSelection) (event.getSelection())); java.lang.Object element = s.getFirstElement(); if (viewer.isExpandable(element)) { viewer.setExpandedState(element, (!(viewer.getExpandedState(element)))); } else if (element instanceof org.eclipse.ui.internal.dialogs.WorkbenchWizardElement) { page.advanceToNextPage(); } } }); }
public void handleEvent(org.eclipse.swt.widgets.Event event) { org.eclipse.swt.graphics.Point localPos = new org.eclipse.swt.graphics.Point(event.x, event.y); org.eclipse.swt.custom.CTabItem tabUnderPointer = tabFolder.getItem(localPos); if (tabUnderPointer == null) { getSite().dragStart(tabFolder.toDisplay(localPos), false); return; } org.eclipse.ui.presentations.IPresentablePart part = getPartForTab(tabUnderPointer); if (getSite().isMoveable(part)) { getSite().dragStart(part, tabFolder.toDisplay(localPos), false); } }
private void init(org.eclipse.ui.internal.WorkbenchWindow w, java.lang.String layoutID, org.eclipse.core.runtime.IAdaptable input) throws org.eclipse.ui.internal.WorkbenchException { this.window = w; this.input = input; mouseDownListener = new org.eclipse.ui.internal.Listener() { public void handleEvent(org.eclipse.ui.internal.Event event) { if ((event.type) == (org.eclipse.swt.SWT.MouseDown)) toggleFastView(null); } }; createClientComposite(); editorPresentation = new org.eclipse.ui.internal.EditorPresentation(this, mouseDownListener); editorMgr = new org.eclipse.ui.internal.EditorManager(window, this, editorPresentation); if (layoutID != null) { org.eclipse.ui.internal.PerspectiveDescriptor desc = ((org.eclipse.ui.internal.PerspectiveDescriptor) (org.eclipse.ui.internal.WorkbenchPlugin.getDefault().getPerspectiveRegistry().findPerspectiveWithId(layoutID))); if (desc == null) throw new org.eclipse.ui.internal.WorkbenchException(org.eclipse.ui.internal.WorkbenchMessages.getString("WorkbenchPage.ErrorRecreatingPerspective")); org.eclipse.ui.internal.Perspective persp = createPerspective(desc); if (persp == null) return; perspList.setActive(persp); window.firePerspectiveActivated(this, desc); org.eclipse.ui.internal.Workbench wb = ((org.eclipse.ui.internal.Workbench) (window.getWorkbench())); wb.getPerspectiveHistory().add(desc); updateVisibility(null, persp); } }
public void propertyChange(org.eclipse.jface.util.PropertyChangeEvent event) { org.eclipse.jface.preference.IPreferenceStore store = org.eclipse.ui.internal.WorkbenchPlugin.getDefault().getPreferenceStore(); if ((event.getProperty()) == (IPreferenceConstants.AUTO_BUILD)) { boolean autoBuildOn = ((java.lang.Boolean) (event.getNewValue())).booleanValue(); if (autoBuildOn) removeManualIncrementalBuildAction(); else addManualIncrementalBuildAction(); } else if ((event.getProperty()) == (IPreferenceConstants.REUSE_EDITORS_BOOLEAN)) { if (store.getBoolean(IPreferenceConstants.REUSE_EDITORS_BOOLEAN)) addPinEditorAction(); else removePinEditorAction(); } else if ((event.getProperty()) == (IPreferenceConstants.REUSE_EDITORS)) { pinEditorAction.updateState(); } else if ((event.getProperty()) == (IPreferenceConstants.RECENT_FILES)) { org.eclipse.ui.internal.Workbench wb = ((org.eclipse.ui.internal.Workbench) ((org.eclipse.ui.internal.Workbench) (window.getWorkbench()))); int newValue = store.getInt(IPreferenceConstants.RECENT_FILES); wb.getEditorHistory().reset(newValue); if (newValue == 0) { window.updateActionBars(); } } }
public void handleEvent(org.osgi.service.event.Event event) { org.eclipse.e4.ui.model.application.ui.MUIElement changedElement = ((org.eclipse.e4.ui.model.application.ui.MUIElement) (event.getProperty(UIEvents.EventTags.ELEMENT))); org.eclipse.e4.ui.model.application.ui.MElementContainer<?> parent = changedElement.getParent(); if ((parent == null) && (changedElement instanceof org.eclipse.e4.ui.model.application.ui.basic.MWindow)) { parent = ((org.eclipse.e4.ui.model.application.ui.MElementContainer<?>) (((org.eclipse.emf.ecore.EObject) (changedElement)).eContainer())); } boolean menuChild = parent instanceof org.eclipse.e4.ui.model.application.ui.menu.MMenu; if ((!(parent instanceof org.eclipse.e4.ui.model.application.MApplication)) && (((parent == null) || ((parent.getWidget()) == null)) || menuChild)) return; if (changedElement.isToBeRendered()) { org.eclipse.e4.ui.internal.workbench.Activator.trace(Policy.DEBUG_RENDERER, "visible -> true", null); java.lang.Object w = createGui(changedElement); if ((w instanceof org.eclipse.swt.widgets.Control) && (!(w instanceof org.eclipse.swt.widgets.Shell))) { fixZOrder(changedElement); } } else { org.eclipse.e4.ui.internal.workbench.Activator.trace(Policy.DEBUG_RENDERER, "visible -> false", null); if ((parent.getSelectedElement()) == changedElement) parent.setSelectedElement(null); removeGui(changedElement); } }
public void run() { org.eclipse.core.resources.IResource[] resources = getSelectedResourcesArray(); if (!(confirmDelete(resources))) return; final org.eclipse.core.resources.IResource[] resourcesToDelete = getResourcesToDelete(resources); if ((resourcesToDelete.length) == 0) return; try { org.eclipse.ui.actions.WorkspaceModifyOperation op = new org.eclipse.ui.actions.WorkspaceModifyOperation(getDeleteRule(resourcesToDelete)) { protected void execute(org.eclipse.core.runtime.IProgressMonitor monitor) throws org.eclipse.core.runtime.CoreException { delete(resourcesToDelete, monitor); } }; new org.eclipse.ui.internal.progress.ProgressMonitorJobsDialog(shell).run(true, true, op); } catch (java.lang.reflect.InvocationTargetException e) { java.lang.Throwable t = e.getTargetException(); if (t instanceof org.eclipse.core.runtime.CoreException) { org.eclipse.core.runtime.CoreException exception = ((org.eclipse.core.runtime.CoreException) (t)); org.eclipse.core.runtime.IStatus status = exception.getStatus(); org.eclipse.core.runtime.IStatus[] children = status.getChildren(); boolean outOfSyncError = false; for (int i = 0; i < (children.length); i++) { if ((children[i].getCode()) == (org.eclipse.core.resources.IResourceStatus.OUT_OF_SYNC_LOCAL)) { outOfSyncError = true; break; } } org.eclipse.ui.internal.ide.IDEWorkbenchPlugin.log(java.text.MessageFormat.format("Exception in {0}.run: {1}", new java.lang.Object[]{ getClass().getName(), t }), status); if (outOfSyncError) { org.eclipse.jface.dialogs.ErrorDialog.openError(shell, org.eclipse.ui.internal.ide.IDEWorkbenchMessages.getString("DeleteResourceAction.errorTitle"), org.eclipse.ui.internal.ide.IDEWorkbenchMessages.getString("DeleteResourceAction.outOfSyncError"), status); } else { org.eclipse.jface.dialogs.ErrorDialog.openError(shell, org.eclipse.ui.internal.ide.IDEWorkbenchMessages.getString("DeleteResourceAction.errorTitle"), null, status); } } else { org.eclipse.ui.internal.ide.IDEWorkbenchPlugin.log(java.text.MessageFormat.format("Exception in {0}.run: {1}", new java.lang.Object[]{ getClass().getName(), t })); org.eclipse.jface.dialogs.MessageDialog.openError(shell, org.eclipse.ui.internal.ide.IDEWorkbenchMessages.getString("DeleteResourceAction.messageTitle"), org.eclipse.ui.internal.ide.IDEWorkbenchMessages.format("DeleteResourceAction.internalError", new java.lang.Object[]{ t.getMessage() })); } } catch (java.lang.InterruptedException e) { } }
@org.eclipse.e4.core.di.annotations.CanExecute boolean canExecute(@org.eclipse.e4.core.di.annotations.Optional org.eclipse.e4.ui.model.application.ui.basic.MWindow window) { if (window != null) { org.eclipse.e4.core.contexts.IEclipseContext context = window.getContext(); if (context != null) { org.eclipse.e4.ui.workbench.modeling.EPartService partService = context.get(org.eclipse.e4.ui.workbench.modeling.EPartService.class); if (partService != null) { return !(partService.getDirtyParts().isEmpty()); } } } return false; }
private boolean checkInstanceLocation(org.eclipse.swt.widgets.Shell shell) { org.eclipse.osgi.service.datalocation.Location instanceLoc = org.eclipse.core.runtime.Platform.getInstanceLocation(); if (instanceLoc == null) { org.eclipse.jface.dialogs.MessageDialog.openError(shell, org.eclipse.ui.internal.ide.IDEWorkbenchMessages.getString("IDEApplication.workspaceMandatoryTitle"), org.eclipse.ui.internal.ide.IDEWorkbenchMessages.getString("IDEApplication.workspaceMandatoryMessage")); return false; } if (instanceLoc.isSet()) { if (!(checkValidWorkspace(shell, instanceLoc.getURL()))) return false; try { if (instanceLoc.lock()) { org.eclipse.ui.internal.ide.IDEApplication.writeWorkspaceVersion(); return true; } org.eclipse.jface.dialogs.MessageDialog.openError(shell, org.eclipse.ui.internal.ide.IDEWorkbenchMessages.getString("IDEApplication.workspaceCannotLockTitle"), org.eclipse.ui.internal.ide.IDEWorkbenchMessages.getString("IDEApplication.workspaceCannotLockMessage")); } catch (java.io.IOException e) { org.eclipse.ui.internal.ide.IDEWorkbenchPlugin.log("Could not obtain lock for workspace location", e); org.eclipse.jface.dialogs.MessageDialog.openError(shell, org.eclipse.ui.internal.ide.IDEWorkbenchMessages.getString("InternalError"), e.getMessage()); } return false; } org.eclipse.ui.internal.ide.ChooseWorkspaceData launchData = new org.eclipse.ui.internal.ide.ChooseWorkspaceData(instanceLoc.getDefault()); boolean force = false; while (true) { java.net.URL workspaceUrl = promptForWorkspace(shell, launchData, force); if (workspaceUrl == null) return false; force = true; try { if (instanceLoc.setURL(workspaceUrl, true)) { launchData.writePersistedData(); org.eclipse.ui.internal.ide.IDEApplication.writeWorkspaceVersion(); return true; } } catch (java.lang.IllegalStateException e) { org.eclipse.jface.dialogs.MessageDialog.openError(shell, org.eclipse.ui.internal.ide.IDEWorkbenchMessages.getString("IDEApplication.workspaceCannotBeSetTitle"), org.eclipse.ui.internal.ide.IDEWorkbenchMessages.getString("IDEApplication.workspaceCannotBeSetMessage")); return false; } org.eclipse.jface.dialogs.MessageDialog.openError(shell, org.eclipse.ui.internal.ide.IDEWorkbenchMessages.getString("IDEApplication.workspaceInUseTitle"), org.eclipse.ui.internal.ide.IDEWorkbenchMessages.getString("IDEApplication.workspaceInUseMessage")); } }
public void detachPart(org.eclipse.ui.IViewReference ref) { org.eclipse.ui.internal.ViewPane pane = ((org.eclipse.ui.internal.ViewPane) (((org.eclipse.ui.internal.WorkbenchPartReference) (ref)).getPane())); if ((canDetach()) && (pane != null)) { if ((getMaximizedStack()) != null) getMaximizedStack().setState(IStackPresentationSite.STATE_RESTORED); org.eclipse.swt.graphics.Rectangle bounds = pane.getParentBounds(); detach(pane, bounds.x, bounds.y); } }
@javax.annotation.PostConstruct public void setup() { if (getModel().getPersistedState().containsKey(IPreferenceConstants.COOLBAR_VISIBLE)) { this.coolBarVisible = java.lang.Boolean.parseBoolean(getModel().getPersistedState().get(IPreferenceConstants.COOLBAR_VISIBLE)); } else { this.coolBarVisible = org.eclipse.ui.internal.util.PrefUtil.getInternalPreferenceStore().getBoolean(IPreferenceConstants.COOLBAR_VISIBLE); getModel().getPersistedState().put(IPreferenceConstants.COOLBAR_VISIBLE, java.lang.Boolean.toString(this.coolBarVisible)); } if (getModel().getPersistedState().containsKey(IPreferenceConstants.PERSPECTIVEBAR_VISIBLE)) { this.perspectiveBarVisible = java.lang.Boolean.parseBoolean(getModel().getPersistedState().get(IPreferenceConstants.PERSPECTIVEBAR_VISIBLE)); } else { this.perspectiveBarVisible = org.eclipse.ui.internal.util.PrefUtil.getInternalPreferenceStore().getBoolean(IPreferenceConstants.PERSPECTIVEBAR_VISIBLE); getModel().getPersistedState().put(IPreferenceConstants.PERSPECTIVEBAR_VISIBLE, java.lang.Boolean.toString(this.perspectiveBarVisible)); } final org.eclipse.e4.core.contexts.IEclipseContext windowContext = model.getContext(); org.eclipse.ui.internal.services.IServiceLocatorCreator slc = ((org.eclipse.ui.internal.services.IServiceLocatorCreator) (workbench.getService(org.eclipse.ui.internal.services.IServiceLocatorCreator.class))); this.serviceLocator = ((org.eclipse.ui.internal.services.ServiceLocator) (slc.createServiceLocator(workbench, null, new org.eclipse.ui.services.IDisposable() { public void dispose() { final org.eclipse.swt.widgets.Shell shell = getShell(); if ((shell != null) && (!(shell.isDisposed()))) { close(); } } }, windowContext))); windowContext.set(org.eclipse.core.runtime.dynamichelpers.IExtensionTracker.class.getName(), new org.eclipse.e4.core.contexts.ContextFunction() { @java.lang.Override public java.lang.Object compute(org.eclipse.e4.core.contexts.IEclipseContext context, java.lang.String contextKey) { if ((tracker) == null) { tracker = new org.eclipse.ui.internal.registry.UIExtensionTracker(getWorkbench().getDisplay()); } return tracker; } }); windowContext.set(org.eclipse.e4.ui.workbench.modeling.IWindowCloseHandler.class.getName(), new org.eclipse.e4.ui.workbench.modeling.IWindowCloseHandler() { public boolean close(org.eclipse.e4.ui.model.application.ui.basic.MWindow window) { return (getWindowAdvisor().preWindowShellClose()) && (org.eclipse.ui.internal.WorkbenchWindow.this.close()); } }); final org.eclipse.e4.ui.workbench.modeling.ISaveHandler defaultSaveHandler = windowContext.get(org.eclipse.e4.ui.workbench.modeling.ISaveHandler.class); final org.eclipse.e4.ui.internal.workbench.PartServiceSaveHandler localSaveHandler = new org.eclipse.e4.ui.internal.workbench.PartServiceSaveHandler() { public org.eclipse.ui.internal.Save promptToSave(org.eclipse.e4.ui.model.application.ui.basic.MPart dirtyPart) { java.lang.Object object = dirtyPart.getObject(); if (object instanceof org.eclipse.ui.internal.e4.compatibility.CompatibilityPart) { org.eclipse.ui.IWorkbenchPart part = ((org.eclipse.ui.internal.e4.compatibility.CompatibilityPart) (object)).getPart(); if (part instanceof org.eclipse.ui.ISaveablePart) { if (!(((org.eclipse.ui.ISaveablePart) (part)).isSaveOnCloseNeeded())) return Save.NO; return org.eclipse.ui.internal.SaveableHelper.savePart(((org.eclipse.ui.ISaveablePart) (part)), part, org.eclipse.ui.internal.WorkbenchWindow.this, true) ? Save.NO : Save.CANCEL; } } return defaultSaveHandler.promptToSave(dirtyPart); } public org.eclipse.ui.internal.Save[] promptToSave(java.util.Collection<org.eclipse.e4.ui.model.application.ui.basic.MPart> dirtyParts) { org.eclipse.jface.viewers.LabelProvider labelProvider = new org.eclipse.jface.viewers.LabelProvider() { @java.lang.Override public java.lang.String getText(java.lang.Object element) { return ((org.eclipse.e4.ui.model.application.ui.basic.MPart) (element)).getLocalizedLabel(); } }; java.util.List<org.eclipse.e4.ui.model.application.ui.basic.MPart> parts = new java.util.ArrayList<org.eclipse.e4.ui.model.application.ui.basic.MPart>(dirtyParts); org.eclipse.ui.dialogs.ListSelectionDialog dialog = new org.eclipse.ui.dialogs.ListSelectionDialog(getShell(), parts, org.eclipse.jface.viewers.ArrayContentProvider.getInstance(), labelProvider, WorkbenchMessages.EditorManager_saveResourcesMessage); dialog.setInitialSelections(parts.toArray()); dialog.setTitle(WorkbenchMessages.EditorManager_saveResourcesTitle); if ((dialog.open()) == (org.eclipse.jface.dialogs.IDialogConstants.CANCEL_ID)) { return new org.eclipse.ui.internal.Save[]{ Save.CANCEL }; } java.lang.Object[] toSave = dialog.getResult(); org.eclipse.ui.internal.Save[] retSaves = new org.eclipse.ui.internal.Save[parts.size()]; java.util.Arrays.fill(retSaves, Save.NO); for (int i = 0; i < (retSaves.length); i++) { org.eclipse.e4.ui.model.application.ui.basic.MPart part = parts.get(i); for (java.lang.Object o : toSave) { if (o == part) { retSaves[i] = Save.YES; break; } } } return retSaves; } public boolean save(org.eclipse.e4.ui.model.application.ui.basic.MPart dirtyPart, boolean confirm) { java.lang.Object object = dirtyPart.getObject(); if (object instanceof org.eclipse.ui.internal.e4.compatibility.CompatibilityPart) { org.eclipse.ui.IWorkbenchPart workbenchPart = ((org.eclipse.ui.internal.e4.compatibility.CompatibilityPart) (object)).getPart(); if (workbenchPart instanceof org.eclipse.ui.ISaveablePart) { org.eclipse.ui.ISaveablePart saveablePart = ((org.eclipse.ui.ISaveablePart) (workbenchPart)); return page.saveSaveable(saveablePart, workbenchPart, confirm, false); } } return super.save(dirtyPart, confirm); } public boolean saveParts(java.util.Collection<org.eclipse.e4.ui.model.application.ui.basic.MPart> dirtyParts, boolean confirm) { java.util.ArrayList<org.eclipse.ui.ISaveablePart> saveables = new java.util.ArrayList<org.eclipse.ui.ISaveablePart>(); for (org.eclipse.e4.ui.model.application.ui.basic.MPart part : dirtyParts) { java.lang.Object object = part.getObject(); if (object instanceof org.eclipse.ui.internal.e4.compatibility.CompatibilityPart) { org.eclipse.ui.IWorkbenchPart workbenchPart = ((org.eclipse.ui.internal.e4.compatibility.CompatibilityPart) (object)).getPart(); if (workbenchPart instanceof org.eclipse.ui.ISaveablePart) { saveables.add(((org.eclipse.ui.ISaveablePart) (workbenchPart))); } } } if (saveables.isEmpty()) { return super.saveParts(dirtyParts, confirm); } return org.eclipse.ui.internal.WorkbenchPage.saveAll(saveables, confirm, false, true, org.eclipse.ui.internal.WorkbenchWindow.this, org.eclipse.ui.internal.WorkbenchWindow.this); } }; localSaveHandler.logger = logger; windowContext.set(org.eclipse.e4.ui.workbench.modeling.ISaveHandler.class, localSaveHandler); windowContext.set(org.eclipse.ui.IWorkbenchWindow.class.getName(), this); windowContext.set(org.eclipse.ui.IPageService.class, this); windowContext.set(org.eclipse.ui.IPartService.class, partService); windowContext.set(ISources.ACTIVE_WORKBENCH_WINDOW_NAME, this); windowContext.set(ISources.ACTIVE_WORKBENCH_WINDOW_SHELL_NAME, getShell()); org.eclipse.e4.ui.services.EContextService cs = ((org.eclipse.e4.ui.services.EContextService) (windowContext.get(org.eclipse.e4.ui.services.EContextService.class.getName()))); cs.activateContext(IContextService.CONTEXT_ID_WINDOW); cs.getActiveContextIds(); configureShell(getShell(), windowContext); initializeDefaultServices(); fireWindowOpening(); try { page = new org.eclipse.ui.internal.WorkbenchPage(this, input); } catch (org.eclipse.ui.WorkbenchException e) { org.eclipse.ui.internal.WorkbenchPlugin.log(e); } org.eclipse.e4.core.contexts.ContextInjectionFactory.inject(page, model.getContext()); windowContext.set(org.eclipse.ui.IWorkbenchPage.class, page); menuManager.setOverrides(menuOverride); ((org.eclipse.ui.internal.CoolBarToTrimManager) (getCoolBarManager2())).setOverrides(toolbarOverride); fillActionBars(org.eclipse.ui.internal.WorkbenchWindow.FILL_ALL_ACTION_BARS); firePageOpened(); java.util.List<org.eclipse.e4.ui.model.application.ui.advanced.MPerspectiveStack> ps = modelService.findElements(model, null, org.eclipse.e4.ui.model.application.ui.advanced.MPerspectiveStack.class, null); org.eclipse.e4.ui.model.application.ui.advanced.MPerspective curPersp = null; boolean newWindow = true; if ((ps.size()) > 0) { org.eclipse.e4.ui.model.application.ui.advanced.MPerspectiveStack stack = ps.get(0); if ((stack.getSelectedElement()) != null) { curPersp = stack.getSelectedElement(); org.eclipse.ui.IPerspectiveDescriptor thePersp = getWorkbench().getPerspectiveRegistry().findPerspectiveWithId(curPersp.getElementId()); if (thePersp != null) { perspective = thePersp; newWindow = false; } } } populateTopTrimContributions(); populateBottomTrimContributions(); modelService.getTrim(model, SideValue.LEFT); modelService.getTrim(model, SideValue.RIGHT); org.eclipse.swt.widgets.Shell shell = ((org.eclipse.swt.widgets.Shell) (model.getWidget())); if ((model.getMainMenu()) == null) { final org.eclipse.e4.ui.model.application.ui.menu.MMenu mainMenu = MenuFactoryImpl.eINSTANCE.createMenu(); mainMenu.setElementId("org.eclipse.ui.main.menu"); final org.eclipse.e4.ui.workbench.renderers.swt.MenuManagerRenderer renderer = ((org.eclipse.e4.ui.workbench.renderers.swt.MenuManagerRenderer) (rendererFactory.getRenderer(mainMenu, null))); renderer.linkModelToManager(mainMenu, menuManager); fill(renderer, mainMenu, menuManager); model.setMainMenu(mainMenu); final org.eclipse.swt.widgets.Menu menu = ((org.eclipse.swt.widgets.Menu) (engine.createGui(mainMenu, model.getWidget(), model.getContext()))); shell.setMenuBar(menu); menuUpdater = new java.lang.Runnable() { public void run() { try { if (((((model.getMainMenu()) == null) || ((model.getWidget()) == null)) || (menu.isDisposed())) || ((mainMenu.getWidget()) == null)) { return; } org.eclipse.e4.ui.workbench.renderers.swt.MenuManagerRendererFilter.updateElementVisibility(mainMenu, renderer, menuManager, windowContext.getActiveLeaf(), 1, false); menuManager.update(true); } finally { canUpdateMenus = true; } } }; org.eclipse.e4.core.contexts.RunAndTrack menuChangeManager = new org.eclipse.e4.core.contexts.RunAndTrack() { @java.lang.Override public boolean changed(org.eclipse.e4.core.contexts.IEclipseContext context) { org.eclipse.core.expressions.ExpressionInfo info = new org.eclipse.core.expressions.ExpressionInfo(); org.eclipse.e4.core.contexts.IEclipseContext leafContext = windowContext.getActiveLeaf(); org.eclipse.e4.ui.workbench.renderers.swt.MenuManagerRendererFilter.collectInfo(info, mainMenu, renderer, leafContext, true); for (java.lang.String name : info.getAccessedVariableNames()) { leafContext.get(name); } if ((canUpdateMenus) && ((workbench.getDisplay()) != null)) { canUpdateMenus = false; workbench.getDisplay().asyncExec(menuUpdater); } return manageChanges; } }; windowContext.runAndTrack(menuChangeManager); } eventBroker.subscribe(UIEvents.UIElement.TOPIC_WIDGET, windowWidgetHandler); page.setPerspective(perspective); firePageActivated(); if (newWindow) { page.fireInitialPartVisibilityEvents(); } else { page.updatePerspectiveActionSets(); } partService.setPage(page); updateActionSets(); org.eclipse.jface.preference.IPreferenceStore preferenceStore = org.eclipse.ui.internal.util.PrefUtil.getAPIPreferenceStore(); boolean enableAnimations = preferenceStore.getBoolean(IWorkbenchPreferenceConstants.ENABLE_ANIMATIONS); preferenceStore.setValue(IWorkbenchPreferenceConstants.ENABLE_ANIMATIONS, false); java.util.List<org.eclipse.e4.ui.model.application.ui.advanced.MPerspective> persps = modelService.findElements(model, null, org.eclipse.e4.ui.model.application.ui.advanced.MPerspective.class, null); if ((persps.size()) > 1) { org.eclipse.ui.internal.util.PrefUtil.getAPIPreferenceStore().setValue(IWorkbenchPreferenceConstants.SHOW_INTRO, false); org.eclipse.ui.internal.util.PrefUtil.saveAPIPrefs(); } getWindowAdvisor().postWindowCreate(); getWindowAdvisor().openIntro(); preferenceStore.setValue(IWorkbenchPreferenceConstants.ENABLE_ANIMATIONS, enableAnimations); getShell().setData(this); trackShellActivation(); }
public static void processKey(int keyCode, org.eclipse.swt.widgets.Control c) { if (c.isDisposed()) { return; } org.eclipse.swt.custom.ScrolledComposite scomp = org.eclipse.ui.internal.forms.widgets.FormUtil.getScrolledComposite(c); if (scomp != null) { if (c instanceof org.eclipse.swt.widgets.Combo) return; switch (keyCode) { case org.eclipse.swt.SWT.ARROW_DOWN : if ((scomp.getData("novarrows")) == null) org.eclipse.ui.internal.forms.widgets.FormUtil.scrollVertical(scomp, false); break; case org.eclipse.swt.SWT.ARROW_UP : if ((scomp.getData("novarrows")) == null) org.eclipse.ui.internal.forms.widgets.FormUtil.scrollVertical(scomp, true); break; case org.eclipse.swt.SWT.ARROW_LEFT : org.eclipse.ui.internal.forms.widgets.FormUtil.scrollHorizontal(scomp, true); break; case org.eclipse.swt.SWT.ARROW_RIGHT : org.eclipse.ui.internal.forms.widgets.FormUtil.scrollHorizontal(scomp, false); break; case org.eclipse.swt.SWT.PAGE_UP : org.eclipse.ui.internal.forms.widgets.FormUtil.scrollPage(scomp, true); break; case org.eclipse.swt.SWT.PAGE_DOWN : org.eclipse.ui.internal.forms.widgets.FormUtil.scrollPage(scomp, false); break; } } }
public void stackView(java.lang.String id, java.lang.String refId, boolean visible) { org.eclipse.e4.ui.model.application.ui.MUIElement existingView = findElement(perspModel, id); if (existingView instanceof org.eclipse.e4.ui.model.application.ui.advanced.MPlaceholder) { existingView.getParent().getChildren().remove(existingView); } org.eclipse.e4.ui.model.application.ui.MUIElement refModel = findElement(perspModel, refId); if ((refModel instanceof org.eclipse.e4.ui.model.application.ui.basic.MPart) || (refModel instanceof org.eclipse.e4.ui.model.application.ui.advanced.MPlaceholder)) { refModel = refModel.getParent(); } if (!(refModel instanceof org.eclipse.e4.ui.model.application.ui.basic.MPartStack)) { org.eclipse.ui.internal.e4.compatibility.E4Util.unsupported(((("stackView: failed to find " + refId) + " for ") + id)); return; } org.eclipse.e4.ui.model.application.ui.basic.MStackElement viewModel = org.eclipse.ui.internal.e4.compatibility.ModeledPageLayout.createViewModel(application, id, visible, page, partService, createReferences); if (viewModel != null) { ((org.eclipse.e4.ui.model.application.ui.basic.MPartStack) (refModel)).getChildren().add(viewModel); if (visible) { refModel.setToBeRendered(true); } } }
private void restoreMaximizedElement(final org.eclipse.e4.ui.model.application.ui.MUIElement element, org.eclipse.e4.ui.model.application.ui.basic.MWindow win) { org.eclipse.e4.ui.model.application.ui.advanced.MPerspective elePersp = modelService.getPerspectiveFor(element); java.util.List<java.lang.String> maxTag = new java.util.ArrayList<java.lang.String>(); maxTag.add(org.eclipse.e4.ui.workbench.addons.minmax.MinMaxAddon.MAXIMIZED); java.util.List<org.eclipse.e4.ui.model.application.ui.MUIElement> curMax = modelService.findElements(win, null, org.eclipse.e4.ui.model.application.ui.MUIElement.class, maxTag); if ((curMax.size()) > 0) { for (org.eclipse.e4.ui.model.application.ui.MUIElement maxElement : curMax) { org.eclipse.e4.ui.model.application.ui.advanced.MPerspective maxPersp = modelService.getPerspectiveFor(maxElement); if (maxPersp != elePersp) continue; if (maxElement == element) continue; ignoreTagChanges = true; try { maxElement.getTags().remove(org.eclipse.e4.ui.workbench.addons.minmax.MinMaxAddon.MAXIMIZED); } finally { ignoreTagChanges = false; } } } }
public void updateActiveWorkbenchWindowMenuManager() { org.eclipse.ui.IWorkbenchWindow workbenchWindow = getActiveWorkbenchWindow(); if (workbenchWindow instanceof org.eclipse.ui.internal.WorkbenchWindow) { org.eclipse.jface.action.MenuManager menuManager = ((org.eclipse.ui.internal.WorkbenchWindow) (workbenchWindow)).getMenuManager(); menuManager.update(IAction.TEXT); } }
public boolean promptForSaving(java.util.List modelsToSave, final org.eclipse.jface.window.IShellProvider shellProvider, org.eclipse.jface.operation.IRunnableContext runnableContext, final boolean canCancel, boolean stillOpenElsewhere) { if ((modelsToSave.size()) > 0) { boolean canceled = org.eclipse.ui.internal.SaveableHelper.waitForBackgroundSaveJobs(modelsToSave); if (canceled) { return true; } org.eclipse.jface.preference.IPreferenceStore apiPreferenceStore = org.eclipse.ui.internal.util.PrefUtil.getAPIPreferenceStore(); boolean dontPrompt = stillOpenElsewhere && (!(apiPreferenceStore.getBoolean(IWorkbenchPreferenceConstants.PROMPT_WHEN_SAVEABLE_STILL_OPEN))); if (dontPrompt) { modelsToSave.clear(); return false; } else if ((modelsToSave.size()) == 1) { org.eclipse.ui.Saveable model = ((org.eclipse.ui.Saveable) (modelsToSave.get(0))); java.lang.String[] buttons; if (canCancel) { buttons = new java.lang.String[]{ org.eclipse.jface.dialogs.IDialogConstants.YES_LABEL, org.eclipse.jface.dialogs.IDialogConstants.NO_LABEL, org.eclipse.jface.dialogs.IDialogConstants.CANCEL_LABEL }; } else { buttons = new java.lang.String[]{ org.eclipse.jface.dialogs.IDialogConstants.YES_LABEL, org.eclipse.jface.dialogs.IDialogConstants.NO_LABEL }; } int choice = org.eclipse.ui.ISaveablePart2.NO; org.eclipse.jface.dialogs.MessageDialog dialog; if (stillOpenElsewhere) { java.lang.String message = org.eclipse.osgi.util.NLS.bind(WorkbenchMessages.EditorManager_saveChangesOptionallyQuestion, model.getName()); org.eclipse.jface.dialogs.MessageDialogWithToggle dialogWithToggle = new org.eclipse.jface.dialogs.MessageDialogWithToggle(shellProvider.getShell(), WorkbenchMessages.Save_Resource, null, message, org.eclipse.jface.dialogs.MessageDialog.QUESTION, buttons, 0, WorkbenchMessages.EditorManager_closeWithoutPromptingOption, false) { protected int getShellStyle() { return (((((canCancel ? org.eclipse.swt.SWT.CLOSE : org.eclipse.swt.SWT.NONE) | (org.eclipse.swt.SWT.TITLE)) | (org.eclipse.swt.SWT.BORDER)) | (org.eclipse.swt.SWT.APPLICATION_MODAL)) | (org.eclipse.swt.SWT.SHEET)) | (getDefaultOrientation()); } }; dialog = dialogWithToggle; } else { java.lang.String message = org.eclipse.osgi.util.NLS.bind(WorkbenchMessages.EditorManager_saveChangesQuestion, model.getName()); dialog = new org.eclipse.jface.dialogs.MessageDialog(shellProvider.getShell(), WorkbenchMessages.Save_Resource, null, message, org.eclipse.jface.dialogs.MessageDialog.QUESTION, buttons, 0) { protected int getShellStyle() { return (((((canCancel ? org.eclipse.swt.SWT.CLOSE : org.eclipse.swt.SWT.NONE) | (org.eclipse.swt.SWT.TITLE)) | (org.eclipse.swt.SWT.BORDER)) | (org.eclipse.swt.SWT.APPLICATION_MODAL)) | (org.eclipse.swt.SWT.SHEET)) | (getDefaultOrientation()); } }; } choice = org.eclipse.ui.internal.SaveableHelper.testGetAutomatedResponse(); if ((org.eclipse.ui.internal.SaveableHelper.testGetAutomatedResponse()) == (SaveableHelper.USER_RESPONSE)) { choice = dialog.open(); if (stillOpenElsewhere) { switch (choice) { case org.eclipse.jface.dialogs.IDialogConstants.YES_ID : choice = org.eclipse.ui.ISaveablePart2.YES; break; case org.eclipse.jface.dialogs.IDialogConstants.NO_ID : choice = org.eclipse.ui.ISaveablePart2.NO; break; case org.eclipse.jface.dialogs.IDialogConstants.CANCEL_ID : choice = org.eclipse.ui.ISaveablePart2.CANCEL; break; default : break; } org.eclipse.jface.dialogs.MessageDialogWithToggle dialogWithToggle = ((org.eclipse.jface.dialogs.MessageDialogWithToggle) (dialog)); if ((choice != (org.eclipse.ui.ISaveablePart2.CANCEL)) && (dialogWithToggle.getToggleState())) { apiPreferenceStore.setValue(IWorkbenchPreferenceConstants.PROMPT_WHEN_SAVEABLE_STILL_OPEN, false); } } } switch (choice) { case org.eclipse.ui.ISaveablePart2.YES : break; case org.eclipse.ui.ISaveablePart2.NO : modelsToSave.clear(); break; default : case org.eclipse.ui.ISaveablePart2.CANCEL : return true; } } else { org.eclipse.ui.internal.SaveablesList.MyListSelectionDialog dlg = new org.eclipse.ui.internal.SaveablesList.MyListSelectionDialog(shellProvider.getShell(), modelsToSave, new org.eclipse.jface.viewers.ArrayContentProvider(), new org.eclipse.ui.model.WorkbenchPartLabelProvider(), (stillOpenElsewhere ? WorkbenchMessages.EditorManager_saveResourcesOptionallyMessage : WorkbenchMessages.EditorManager_saveResourcesMessage), canCancel, stillOpenElsewhere); dlg.setInitialSelections(modelsToSave.toArray()); dlg.setTitle(WorkbenchMessages.EditorManager_saveResourcesTitle); if ((org.eclipse.ui.internal.SaveableHelper.testGetAutomatedResponse()) == (SaveableHelper.USER_RESPONSE)) { int result = dlg.open(); if (result == (org.eclipse.jface.dialogs.IDialogConstants.CANCEL_ID)) return true; if (dlg.getDontPromptSelection()) { apiPreferenceStore.setValue(IWorkbenchPreferenceConstants.PROMPT_WHEN_SAVEABLE_STILL_OPEN, false); } modelsToSave = java.util.Arrays.asList(dlg.getResult()); } } } return saveModels(modelsToSave, shellProvider, runnableContext); }
private org.eclipse.swt.graphics.Font createFont(java.lang.String symbolicName, org.eclipse.swt.graphics.FontData[] fonts) { org.eclipse.swt.widgets.Display display = org.eclipse.swt.widgets.Display.getCurrent(); if (display == null) return null; org.eclipse.swt.graphics.FontData[] validData = bestDataArray(fonts, display); if (validData == null) { return null; } else { put(symbolicName, validData, false); return new org.eclipse.swt.graphics.Font(display, validData); } }
public void helpRequested(org.eclipse.swt.events.HelpEvent event) { if ((getHelpUI()) != null) { org.eclipse.help.IContext context = org.eclipse.help.HelpSystem.getContext(contextId); if (context != null) { org.eclipse.swt.graphics.Point point = org.eclipse.ui.internal.help.WorkbenchHelpSystem.computePopUpLocation(event.widget.getDisplay()); java.lang.String title = org.eclipse.jface.action.LegacyActionTools.removeMnemonics(action.getText()); displayContext(new org.eclipse.ui.internal.help.WorkbenchHelpSystem.ContextWithTitle(context, title), point.x, point.y); } } }
public void run() { org.eclipse.ui.INewWizard wizard; try { wizard = ((org.eclipse.ui.INewWizard) (wizardElement.createWizard())); } catch (org.eclipse.core.runtime.CoreException e) { org.eclipse.jface.dialogs.ErrorDialog.openError(window.getShell(), WorkbenchMessages.NewWizardShortcutAction_errorTitle, WorkbenchMessages.NewWizardShortcutAction_errorMessage, e.getStatus()); return; } org.eclipse.jface.viewers.ISelection selection = window.getSelectionService().getSelection(); org.eclipse.jface.viewers.IStructuredSelection selectionToPass = org.eclipse.jface.viewers.StructuredSelection.EMPTY; if (selection instanceof org.eclipse.jface.viewers.IStructuredSelection) { selectionToPass = wizardElement.adaptedSelection(((org.eclipse.jface.viewers.IStructuredSelection) (selection))); } else { org.eclipse.ui.IWorkbenchPart part = window.getPartService().getActivePart(); if (part instanceof org.eclipse.ui.IEditorPart) { org.eclipse.ui.IEditorInput input = ((org.eclipse.ui.IEditorPart) (part)).getEditorInput(); java.lang.Class fileClass = org.eclipse.ui.internal.LegacyResourceSupport.getFileClass(); if ((input != null) && (fileClass != null)) { java.lang.Object file = input.getAdapter(fileClass); if (file != null) { selectionToPass = new org.eclipse.jface.viewers.StructuredSelection(file); } } } } wizard.init(window.getWorkbench(), selectionToPass); org.eclipse.swt.widgets.Shell parent = window.getShell(); org.eclipse.jface.wizard.WizardDialog dialog = new org.eclipse.jface.wizard.WizardDialog(parent, wizard); dialog.create(); org.eclipse.swt.graphics.Point defaultSize = dialog.getShell().getSize(); dialog.getShell().setSize(java.lang.Math.max(org.eclipse.ui.internal.actions.NewWizardShortcutAction.SIZING_WIZARD_WIDTH, defaultSize.x), java.lang.Math.max(org.eclipse.ui.internal.actions.NewWizardShortcutAction.SIZING_WIZARD_HEIGHT, defaultSize.y)); window.getWorkbench().getHelpSystem().setHelp(dialog.getShell(), IWorkbenchHelpContextIds.NEW_WIZARD_SHORTCUT); if ((wizardElement.canFinishEarly()) && (!(wizardElement.hasPages()))) { wizard.performFinish(); } else { dialog.open(); } }
public void dispose() { if ((dropDownMenuMgr) != null) { dropDownMenuMgr.remove(newWizardMenu); dropDownMenuMgr.dispose(); dropDownMenuMgr = null; } }
public void remove(java.lang.String key) { checkRemoved(); if (key == null) throw new java.lang.NullPointerException(); if (!(temporarySettings.containsKey(key))) return; java.lang.Object oldValue = temporarySettings.get(key); if (oldValue == null) return; temporarySettings.put(key, null); firePropertyChangeEvent(key, oldValue, null); }
private static org.eclipse.ui.splash.AbstractSplashHandler getSplash() { if (!(org.eclipse.ui.internal.Workbench.createSplash)) return null; if ((org.eclipse.ui.internal.Workbench.splash) == null) { org.eclipse.core.runtime.IProduct product = org.eclipse.core.runtime.Platform.getProduct(); if (product != null) org.eclipse.ui.internal.Workbench.splash = org.eclipse.ui.internal.splash.SplashHandlerFactory.findSplashHandlerFor(product); if ((org.eclipse.ui.internal.Workbench.splash) == null) org.eclipse.ui.internal.Workbench.splash = new org.eclipse.ui.internal.splash.EclipseSplashHandler(); } return org.eclipse.ui.internal.Workbench.splash; }
@javax.annotation.PostConstruct void hookListeners() { java.lang.String topic = UIEvents.UIElement.WIDGET; eventBroker.subscribe(topic, null, installHook, false); }
public synchronized org.eclipse.ui.Saveable[] getActiveSaveables() { if (!(isDisposed())) { org.eclipse.jface.viewers.ITreeContentProvider contentProvider = ((org.eclipse.jface.viewers.ITreeContentProvider) (viewer.getContentProvider())); org.eclipse.jface.viewers.IStructuredSelection selection = ((org.eclipse.jface.viewers.IStructuredSelection) (viewer.getSelection())); if (selection instanceof org.eclipse.jface.viewers.ITreeSelection) { return getActiveSaveablesFromTreeSelection(((org.eclipse.jface.viewers.ITreeSelection) (selection))); } else if (contentProvider instanceof org.eclipse.jface.viewers.ITreePathContentProvider) { return getActiveSaveablesFromTreePathProvider(selection, ((org.eclipse.jface.viewers.ITreePathContentProvider) (contentProvider))); } else { return getActiveSaveablesFromTreeProvider(selection, contentProvider); } } return new org.eclipse.ui.Saveable[0]; }
public java.lang.Object create() throws org.eclipse.core.runtime.CoreException { if (org.eclipse.ui.ExtensionFactory.APPEARANCE_PREFERENCE_PAGE.equals(id)) return configure(new org.eclipse.ui.internal.dialogs.ViewsPreferencePage()); if (org.eclipse.ui.ExtensionFactory.COLORS_AND_FONTS_PREFERENCE_PAGE.equals(id)) return configure(new org.eclipse.ui.internal.themes.ColorsAndFontsPreferencePage()); if (org.eclipse.ui.ExtensionFactory.DECORATORS_PREFERENCE_PAGE.equals(id)) return configure(new org.eclipse.ui.internal.dialogs.DecoratorsPreferencePage()); if (org.eclipse.ui.ExtensionFactory.EDITORS_PREFERENCE_PAGE.equals(id)) return configure(new org.eclipse.ui.internal.dialogs.EditorsPreferencePage()); if (org.eclipse.ui.ExtensionFactory.FILE_ASSOCIATIONS_PREFERENCE_PAGE.equals(id)) return configure(new org.eclipse.ui.internal.dialogs.FileEditorsPreferencePage()); if (org.eclipse.ui.ExtensionFactory.KEYS_PREFERENCE_PAGE.equals(id)) return configure(new org.eclipse.ui.internal.keys.KeysPreferencePage()); if (org.eclipse.ui.ExtensionFactory.PERSPECTIVES_PREFERENCE_PAGE.equals(id)) return configure(new org.eclipse.ui.internal.dialogs.PerspectivesPreferencePage()); if (org.eclipse.ui.ExtensionFactory.PREFERENCES_EXPORT_WIZARD.equals(id)) return configure(new org.eclipse.ui.internal.wizards.preferences.PreferencesExportWizard()); if (org.eclipse.ui.ExtensionFactory.PREFERENCES_IMPORT_WIZARD.equals(id)) return configure(new org.eclipse.ui.internal.wizards.preferences.PreferencesImportWizard()); if (org.eclipse.ui.ExtensionFactory.PROGRESS_VIEW.equals(id)) return configure(new org.eclipse.ui.internal.progress.JobView()); if (org.eclipse.ui.ExtensionFactory.WORKBENCH_PREFERENCE_PAGE.equals(id)) return configure(new org.eclipse.ui.internal.dialogs.WorkbenchPreferencePage()); if (org.eclipse.ui.ExtensionFactory.CONTENT_TYPES_PREFERENCE_PAGE.equals(id)) return configure(new org.eclipse.ui.internal.dialogs.ContentTypesPreferencePage()); throw new org.eclipse.core.runtime.CoreException(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, PlatformUI.PLUGIN_ID, 0, ("Unknown id in data argument for " + (getClass())), null)); }
protected org.eclipse.swt.widgets.Control createDialogArea(org.eclipse.swt.widgets.Composite parent) { org.eclipse.swt.widgets.Composite composite = ((org.eclipse.swt.widgets.Composite) (super.createDialogArea(parent))); boolean isWin32 = "win32".equals(org.eclipse.swt.SWT.getPlatform()); org.eclipse.jface.layout.GridLayoutFactory.fillDefaults().extendedMargins((isWin32 ? 0 : 3), 3, 2, 2).applyTo(composite); org.eclipse.swt.widgets.Composite tableComposite = new org.eclipse.swt.widgets.Composite(composite, org.eclipse.swt.SWT.NONE); org.eclipse.jface.layout.GridDataFactory.fillDefaults().grab(true, true).applyTo(tableComposite); org.eclipse.jface.layout.TableColumnLayout tableColumnLayout = new org.eclipse.jface.layout.TableColumnLayout(); tableComposite.setLayout(tableColumnLayout); table = new org.eclipse.swt.widgets.Table(tableComposite, ((org.eclipse.swt.SWT.SINGLE) | (org.eclipse.swt.SWT.FULL_SELECTION))); textLayout = new org.eclipse.swt.graphics.TextLayout(table.getDisplay()); textLayout.setOrientation(getDefaultOrientation()); org.eclipse.swt.graphics.Font boldFont = resourceManager.createFont(org.eclipse.jface.resource.FontDescriptor.createFrom(table.getFont()).setStyle(SWT.BOLD)); textLayout.setFont(table.getFont()); textLayout.setText(QuickAccessMessages.QuickAccess_AvailableCategories); int maxProviderWidth = ((int) ((textLayout.getBounds().width) * 1.1)); textLayout.setFont(boldFont); for (int i = 0; i < (providers.length); i++) { org.eclipse.ui.internal.quickaccess.QuickAccessProvider provider = providers[i]; textLayout.setText(provider.getName()); int width = ((int) ((textLayout.getBounds().width) * 1.1)); if (width > maxProviderWidth) { maxProviderWidth = width; } } tableColumnLayout.setColumnData(new org.eclipse.swt.widgets.TableColumn(table, org.eclipse.swt.SWT.NONE), new org.eclipse.jface.viewers.ColumnWeightData(0, maxProviderWidth)); tableColumnLayout.setColumnData(new org.eclipse.swt.widgets.TableColumn(table, org.eclipse.swt.SWT.NONE), new org.eclipse.jface.viewers.ColumnWeightData(100, 100)); table.getShell().addControlListener(new org.eclipse.swt.events.ControlAdapter() { public void controlResized(org.eclipse.swt.events.ControlEvent e) { if (!(showAllMatches)) { if (!(resized)) { resized = true; e.display.timerExec(100, new java.lang.Runnable() { public void run() { if (((getShell()) != null) && (!(getShell().isDisposed()))) { refresh(filterText.getText().toLowerCase()); } resized = false; } }); } } } }); new org.eclipse.jface.window.DefaultToolTip(table, org.eclipse.jface.window.ToolTip.NO_RECREATE, false) { private org.eclipse.ui.internal.quickaccess.QuickAccessEntry getEntry(org.eclipse.swt.widgets.Event event) { org.eclipse.swt.widgets.TableItem item = table.getItem(new org.eclipse.swt.graphics.Point(event.x, event.y)); if (item != null) { return ((org.eclipse.ui.internal.quickaccess.QuickAccessEntry) (item.getData())); } return null; } protected java.lang.String getText(org.eclipse.swt.widgets.Event event) { org.eclipse.ui.internal.quickaccess.QuickAccessEntry entry = getEntry(event); if (entry != null) { return entry.element.getLabel(); } return null; } protected boolean shouldCreateToolTip(org.eclipse.swt.widgets.Event event) { table.setToolTipText(""); return ((getEntry(event)) != null) && (super.shouldCreateToolTip(event)); } protected java.lang.Object getToolTipArea(org.eclipse.swt.widgets.Event event) { return getEntry(event); } }.activate(); table.addKeyListener(getKeyAdapter()); table.addKeyListener(new org.eclipse.swt.events.KeyListener() { public void keyPressed(org.eclipse.swt.events.KeyEvent e) { if (((e.keyCode) == (org.eclipse.swt.SWT.ARROW_UP)) && ((table.getSelectionIndex()) == 0)) { filterText.setFocus(); } else if ((e.character) == (org.eclipse.swt.SWT.ESC)) { close(); } } public void keyReleased(org.eclipse.swt.events.KeyEvent e) { } }); table.addMouseListener(new org.eclipse.swt.events.MouseAdapter() { public void mouseUp(org.eclipse.swt.events.MouseEvent e) { if ((table.getSelectionCount()) < 1) return; if ((e.button) != 1) return; if (table.equals(e.getSource())) { java.lang.Object o = table.getItem(new org.eclipse.swt.graphics.Point(e.x, e.y)); org.eclipse.swt.widgets.TableItem selection = table.getSelection()[0]; if (selection.equals(o)) handleSelection(); } } }); table.addSelectionListener(new org.eclipse.swt.events.SelectionListener() { public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { } public void widgetDefaultSelected(org.eclipse.swt.events.SelectionEvent e) { handleSelection(); } }); grayColor = resourceManager.createColor(org.eclipse.ui.themes.ColorUtil.blend(table.getBackground().getRGB(), table.getForeground().getRGB())); final org.eclipse.swt.graphics.TextStyle boldStyle = new org.eclipse.swt.graphics.TextStyle(boldFont, null, null); org.eclipse.swt.widgets.Listener listener = new org.eclipse.swt.widgets.Listener() { public void handleEvent(org.eclipse.swt.widgets.Event event) { org.eclipse.ui.internal.quickaccess.QuickAccessEntry entry = ((org.eclipse.ui.internal.quickaccess.QuickAccessEntry) (event.item.getData())); if (entry != null) { switch (event.type) { case org.eclipse.swt.SWT.MeasureItem : entry.measure(event, textLayout, resourceManager, boldStyle); break; case org.eclipse.swt.SWT.PaintItem : entry.paint(event, textLayout, resourceManager, boldStyle, grayColor); break; case org.eclipse.swt.SWT.EraseItem : entry.erase(event); break; } } } }; table.addListener(SWT.MeasureItem, listener); table.addListener(SWT.EraseItem, listener); table.addListener(SWT.PaintItem, listener); org.eclipse.swt.widgets.Shell shell = getShell(); if (shell != null) { org.eclipse.ui.contexts.IContextService service = ((org.eclipse.ui.contexts.IContextService) (window.getService(org.eclipse.ui.contexts.IContextService.class))); service.registerShell(shell, IContextService.TYPE_WINDOW); } return composite; }
public DetailedProgressViewer(org.eclipse.swt.widgets.Composite parent, int style) { scrolled = new org.eclipse.swt.custom.ScrolledComposite(parent, ((org.eclipse.swt.SWT.V_SCROLL) | style)); int height = org.eclipse.jface.resource.JFaceResources.getDefaultFont().getFontData()[0].getHeight(); scrolled.getVerticalBar().setIncrement((height * 2)); scrolled.setExpandHorizontal(true); scrolled.setExpandVertical(true); control = new org.eclipse.swt.widgets.Composite(scrolled, org.eclipse.swt.SWT.NONE); org.eclipse.swt.layout.GridLayout layout = new org.eclipse.swt.layout.GridLayout(); layout.marginHeight = 0; layout.marginWidth = 0; control.setLayout(layout); control.setBackground(parent.getDisplay().getSystemColor(SWT.COLOR_LIST_BACKGROUND)); control.addFocusListener(new org.eclipse.swt.events.FocusAdapter() { private boolean settingFocus = false; public void focusGained(org.eclipse.swt.events.FocusEvent e) { if (!(settingFocus)) { settingFocus = true; setFocus(); settingFocus = false; } } }); control.addControlListener(new org.eclipse.swt.events.ControlListener() { public void controlMoved(org.eclipse.swt.events.ControlEvent e) { updateVisibleItems(); } public void controlResized(org.eclipse.swt.events.ControlEvent e) { updateVisibleItems(); } }); org.eclipse.ui.PlatformUI.getWorkbench().getHelpSystem().setHelp(control, IWorkbenchHelpContextIds.RESPONSIVE_UI); scrolled.setContent(control); hookControl(control); noEntryArea = new org.eclipse.swt.widgets.Composite(scrolled, org.eclipse.swt.SWT.NONE); noEntryArea.setLayout(new org.eclipse.swt.layout.GridLayout()); org.eclipse.swt.widgets.Text noEntryLabel = new org.eclipse.swt.widgets.Text(noEntryArea, org.eclipse.swt.SWT.SINGLE); noEntryLabel.setText(ProgressMessages.ProgressView_NoOperations); noEntryLabel.setBackground(noEntryArea.getDisplay().getSystemColor(SWT.COLOR_WIDGET_BACKGROUND)); org.eclipse.swt.layout.GridData textData = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.VERTICAL_ALIGN_BEGINNING); noEntryLabel.setLayoutData(textData); noEntryLabel.setEditable(false); org.eclipse.ui.PlatformUI.getWorkbench().getHelpSystem().setHelp(noEntryLabel, IWorkbenchHelpContextIds.RESPONSIVE_UI); }
protected org.eclipse.ui.part.IEditorPart getActiveEditor() { if (container.isDisposed()) return null; int index = getActivePage(); if (index != (-1)) return getEditor(index); return null; }
private void checkInitialSelections() { org.eclipse.ui.IFileEditorMapping[] editorMappings = org.eclipse.ui.PlatformUI.getWorkbench().getEditorRegistry().getFileEditorMappings(); java.util.ArrayList selectedMappings = new java.util.ArrayList(); for (int i = 0; i < (editorMappings.length); i++) { org.eclipse.ui.IFileEditorMapping mapping = editorMappings[i]; if (this.initialSelections.contains(mapping.getExtension())) { listViewer.setChecked(mapping, true); selectedMappings.add(mapping.getExtension()); } else { if (this.initialSelections.contains(mapping.getLabel())) { listViewer.setChecked(mapping, true); selectedMappings.add(mapping.getLabel()); } } } java.util.Iterator initialIterator = this.initialSelections.iterator(); java.lang.StringBuffer entries = new java.lang.StringBuffer(); while (initialIterator.hasNext()) { java.lang.String nextExtension = ((java.lang.String) (initialIterator.next())); if (!(selectedMappings.contains(nextExtension))) { entries.append(nextExtension); if (initialIterator.hasNext()) entries.append(','); } } this.userDefinedText.setText(entries.toString()); }
public int open() { if ((getPages().length) == 0) { showEmptyWindowContents(); } fireWindowCreated(); getWindowAdvisor().openIntro(); int result = super.open(); fireWindowOpened(); if ((perspectiveSwitcher) != null) { perspectiveSwitcher.updatePerspectiveBar(); perspectiveSwitcher.updateBarParent(); } getShell().layout(); return result; }
public void partClosed(org.eclipse.ui.IWorkbenchPart part) { if (((site) != null) && (part.equals(site.getPart()))) { dispose(); } else if (((site) instanceof org.eclipse.ui.part.MultiPageEditorSite) && (part.equals(((org.eclipse.ui.part.MultiPageEditorSite) (site)).getMultiPageEditor()))) { dispose(); } }
public WWinPluginAction(org.eclipse.core.runtime.IConfigurationElement actionElement, java.lang.String runAttribute, org.eclipse.ui.internal.IWorkbenchWindow window, java.lang.String definitionId) { super(actionElement, runAttribute); setActionDefinitionId(definitionId); this.window = window; java.lang.String retarget = actionElement.getAttribute(ActionDescriptor.ATT_RETARGET); if ((retarget != null) && (retarget.equals(org.eclipse.ui.internal.WWinPluginAction.TRUE_VALUE))) { java.lang.String allowLabelUpdate = actionElement.getAttribute(ActionDescriptor.ATT_ALLOW_LABEL_UPDATE); java.lang.String id = actionElement.getAttribute(ActionDescriptor.ATT_ID); java.lang.String label = actionElement.getAttribute(ActionDescriptor.ATT_LABEL); if ((allowLabelUpdate != null) && (allowLabelUpdate.equals(org.eclipse.ui.internal.WWinPluginAction.TRUE_VALUE))) retargetAction = new org.eclipse.ui.actions.LabelRetargetAction(id, label); else retargetAction = new org.eclipse.ui.actions.RetargetAction(id, label); retargetAction.addPropertyChangeListener(new org.eclipse.jface.util.IPropertyChangeListener() { public void propertyChange(org.eclipse.jface.util.PropertyChangeEvent event) { if (event.getProperty().equals(Action.ENABLED)) { java.lang.Object val = event.getNewValue(); if (val instanceof java.lang.Boolean) { setEnabled(((java.lang.Boolean) (val)).booleanValue()); } } else if (event.getProperty().equals(Action.TEXT)) { java.lang.Object val = event.getNewValue(); if (val instanceof java.lang.String) { setText(((java.lang.String) (val))); } } else if (event.getProperty().equals(Action.TOOL_TIP_TEXT)) { java.lang.Object val = event.getNewValue(); if (val instanceof java.lang.String) { setToolTipText(((java.lang.String) (val))); } } } }); retargetAction.setEnabled(false); setEnabled(false); window.getPartService().addPartListener(retargetAction); org.eclipse.ui.internal.IWorkbenchPart activePart = window.getPartService().getActivePart(); if (activePart != null) retargetAction.partActivated(activePart); } else { window.getSelectionService().addSelectionListener(this); refreshSelection(); } org.eclipse.ui.internal.WWinPluginAction.addToActionList(this); super.setHelpListener(new org.eclipse.swt.events.HelpListener() { public void helpRequested(org.eclipse.swt.events.HelpEvent e) { org.eclipse.swt.events.HelpListener listener = null; if ((retargetAction) != null) listener = retargetAction.getHelpListener(); if (listener == null) listener = localHelpListener; if (listener != null) listener.helpRequested(e); } }); }
protected org.eclipse.swt.widgets.Control createCustomArea(org.eclipse.swt.widgets.Composite parent) { org.eclipse.swt.widgets.Composite composite = new org.eclipse.swt.widgets.Composite(parent, org.eclipse.swt.SWT.NONE); composite.setLayout(new org.eclipse.swt.layout.GridLayout()); radio1 = new org.eclipse.swt.widgets.Button(composite, org.eclipse.swt.SWT.RADIO); radio1.addSelectionListener(selectionListener); java.lang.String text1; if ((projects.length) == 1) { org.eclipse.core.resources.IProject project = ((org.eclipse.core.resources.IProject) (projects[0])); if ((project == null) || ((project.getLocation()) == null)) { text1 = org.eclipse.ui.internal.ide.IDEWorkbenchMessages.DeleteResourceAction_deleteContentsN; } else { text1 = org.eclipse.osgi.util.NLS.bind(IDEWorkbenchMessages.DeleteResourceAction_deleteContents1, project.getLocation().toOSString()); } } else { text1 = org.eclipse.ui.internal.ide.IDEWorkbenchMessages.DeleteResourceAction_deleteContentsN; } radio1.setText(text1); radio1.setFont(parent.getFont()); org.eclipse.swt.widgets.Label detailsLabel = new org.eclipse.swt.widgets.Label(composite, org.eclipse.swt.SWT.LEFT); detailsLabel.setText(IDEWorkbenchMessages.DeleteResourceAction_deleteContentsDetails); detailsLabel.setFont(parent.getFont()); org.eclipse.swt.graphics.GC gc = new org.eclipse.swt.graphics.GC(detailsLabel); gc.setFont(detailsLabel.getParent().getFont()); org.eclipse.swt.graphics.FontMetrics fontMetrics = gc.getFontMetrics(); gc.dispose(); org.eclipse.swt.layout.GridData data = new org.eclipse.swt.layout.GridData(); data.horizontalIndent = org.eclipse.jface.dialogs.Dialog.convertHorizontalDLUsToPixels(fontMetrics, IDialogConstants.INDENT); detailsLabel.setLayoutData(data); detailsLabel.addMouseListener(new org.eclipse.swt.events.MouseAdapter() { public void mouseUp(org.eclipse.swt.events.MouseEvent e) { deleteContent = true; radio1.setSelection(deleteContent); radio2.setSelection((!(deleteContent))); } }); new org.eclipse.swt.widgets.Label(composite, org.eclipse.swt.SWT.LEFT); radio2 = new org.eclipse.swt.widgets.Button(composite, org.eclipse.swt.SWT.RADIO); radio2.addSelectionListener(selectionListener); java.lang.String text2 = org.eclipse.ui.internal.ide.IDEWorkbenchMessages.DeleteResourceAction_doNotDeleteContents; radio2.setText(text2); radio2.setFont(parent.getFont()); radio1.setSelection(deleteContent); radio2.setSelection((!(deleteContent))); return composite; }
private final java.util.Collection resolveConflicts(final java.util.Collection bindings) { final java.util.Collection matches = new java.util.ArrayList(); final java.util.Iterator bindingItr = bindings.iterator(); org.eclipse.jface.bindings.Binding bestMatch = ((org.eclipse.jface.bindings.Binding) (bindingItr.next())); matches.add(bestMatch); while (bindingItr.hasNext()) { final org.eclipse.jface.bindings.Binding current = ((org.eclipse.jface.bindings.Binding) (bindingItr.next())); final java.lang.String currentScheme = current.getSchemeId(); final java.lang.String bestScheme = bestMatch.getSchemeId(); if (!(currentScheme.equals(bestScheme))) { boolean goToNextBinding = false; for (int i = 0; i < (activeSchemeIds.length); i++) { final java.lang.String schemePointer = activeSchemeIds[i]; if (currentScheme.equals(schemePointer)) { bestMatch = current; matches.clear(); matches.add(current); goToNextBinding = true; break; } else if (bestScheme.equals(schemePointer)) { goToNextBinding = true; break; } } if (goToNextBinding) { continue; } } if ((current.getType()) > (bestMatch.getType())) { bestMatch = current; matches.clear(); matches.add(current); continue; } else if ((bestMatch.getType()) > (current.getType())) { continue; } matches.add(current); } return matches; }
private java.lang.String getSystemSummary() { java.io.StringWriter out = new java.io.StringWriter(); java.io.PrintWriter writer = new java.io.PrintWriter(out); writer.println(org.eclipse.osgi.util.NLS.bind(WorkbenchMessages.SystemSummary_timeStamp, new java.util.Date())); appendExtensions(writer); writer.close(); return out.toString(); }
public void busyCursorWhile(final org.eclipse.jface.operation.IRunnableWithProgress runnable) throws java.lang.InterruptedException, java.lang.reflect.InvocationTargetException { final org.eclipse.ui.internal.progress.ProgressMonitorJobsDialog dialog = new org.eclipse.ui.internal.progress.ProgressMonitorJobsDialog(org.eclipse.ui.internal.progress.ProgressManagerUtil.getDefaultParent()); dialog.setOpenOnRun(false); final java.lang.reflect.InvocationTargetException[] invokes = new java.lang.reflect.InvocationTargetException[1]; final java.lang.InterruptedException[] interrupt = new java.lang.InterruptedException[1]; java.lang.Runnable dialogWaitRunnable = new java.lang.Runnable() { public void run() { try { dialog.setOpenOnRun(false); setUserInterfaceActive(false); dialog.run(true, true, runnable); setUserInterfaceActive(true); } catch (java.lang.reflect.InvocationTargetException e) { invokes[0] = e; } catch (java.lang.InterruptedException e) { interrupt[0] = e; } } }; busyCursorWhile(dialogWaitRunnable, dialog); if ((invokes[0]) != null) { setUserInterfaceActive(true); throw invokes[0]; } if ((interrupt[0]) != null) { setUserInterfaceActive(true); throw interrupt[0]; } }
public void addPage(int index, org.eclipse.ui.IEditorPart editor, org.eclipse.ui.IEditorInput input) throws org.eclipse.ui.PartInitException { org.eclipse.ui.IEditorSite site = createSite(editor); editor.init(site, input); org.eclipse.swt.widgets.Composite parent2 = new org.eclipse.swt.widgets.Composite(getContainer(), org.eclipse.swt.SWT.NONE); parent2.setLayout(new org.eclipse.swt.layout.FillLayout()); editor.createPartControl(parent2); editor.addPropertyListener(new org.eclipse.ui.IPropertyListener() { public void propertyChanged(java.lang.Object source, int propertyId) { org.eclipse.ui.part.MultiPageEditorPart.this.handlePropertyChange(propertyId); } }); org.eclipse.swt.widgets.Item item = createItem(index, parent2); item.setData(editor); nestedEditors.add(editor); }
public TaskMarker(org.eclipse.core.resources.IMarker toCopy) { super(toCopy); priority = toCopy.getAttribute(org.eclipse.core.resources.IMarker.PRIORITY, org.eclipse.core.resources.IMarker.PRIORITY_NORMAL); done = -1; if (toCopy.getAttribute(org.eclipse.core.resources.IMarker.USER_EDITABLE, true)) { done = 0; if (toCopy.getAttribute(org.eclipse.core.resources.IMarker.DONE, false)) { done = 1; } } }
private static void installColor(org.eclipse.ui.internal.themes.ColorDefinition definition, org.eclipse.ui.themes.ITheme theme, org.eclipse.jface.preference.IPreferenceStore store, boolean setInRegistry) { org.eclipse.jface.resource.ColorRegistry registry = theme.getColorRegistry(); java.lang.String id = definition.getId(); java.lang.String key = org.eclipse.ui.internal.themes.ThemeElementHelper.createPreferenceKey(theme, id); org.eclipse.swt.graphics.RGB prefColor = (store != null) ? org.eclipse.jface.preference.PreferenceConverter.getColor(store, key) : null; org.eclipse.swt.graphics.RGB defaultColor = ((definition.getValue()) != null) ? definition.getValue() : registry.getRGB(definition.getDefaultsTo()); if (defaultColor == null) { defaultColor = org.eclipse.jface.preference.PreferenceConverter.COLOR_DEFAULT_DEFAULT; } if ((prefColor == null) || (prefColor == (org.eclipse.jface.preference.PreferenceConverter.COLOR_DEFAULT_DEFAULT))) { prefColor = defaultColor; } org.eclipse.swt.graphics.RGB colorToUse = (!(store.isDefault(key))) ? prefColor : defaultColor; if (setInRegistry) { registry.put(id, colorToUse); } if (store != null) { org.eclipse.jface.preference.PreferenceConverter.setDefault(store, key, defaultColor); } }
@java.lang.Override public void hideChild(org.eclipse.e4.ui.model.application.ui.MElementContainer<org.eclipse.e4.ui.model.application.ui.MUIElement> parentElement, org.eclipse.e4.ui.model.application.ui.MUIElement child) { super.hideChild(parentElement, child); org.eclipse.swt.widgets.Widget widget = ((org.eclipse.swt.widgets.Widget) (child.getWidget())); if ((widget != null) && (!(widget.isDisposed()))) { widget.dispose(); } org.eclipse.swt.widgets.ToolBar toolbar = ((org.eclipse.swt.widgets.ToolBar) (getUIContainer(child))); if ((toolbar != null) && (!(toolbar.isDisposed()))) { toolbar.getShell().layout(new org.eclipse.swt.widgets.Control[]{ toolbar }, SWT.DEFER); } }
@java.lang.Override protected void applyCSSProperty(org.eclipse.swt.widgets.Control control, java.lang.String property, org.w3c.dom.css.CSSValue value, java.lang.String pseudo, org.eclipse.e4.ui.css.core.engine.CSSEngine engine) throws java.lang.Exception { java.lang.Object obj = control.getData("modelElement"); if (obj instanceof org.eclipse.e4.ui.model.application.impl.ContributionImpl) { java.lang.Object bar = ((org.eclipse.e4.ui.model.application.impl.ContributionImpl) (obj)).getObject(); if ((bar != null) && (bar instanceof org.eclipse.e4.ui.workbench.addons.perspectiveswitcher.PerspectiveSwitcher)) { org.eclipse.swt.graphics.Color borderColor = null; org.eclipse.swt.graphics.Color curveColor = null; if ((value.getCssValueType()) == (org.w3c.dom.css.CSSValue.CSS_PRIMITIVE_VALUE)) { borderColor = ((org.eclipse.swt.graphics.Color) (engine.convert(value, org.eclipse.swt.graphics.Color.class, control.getDisplay()))); ((org.eclipse.e4.ui.workbench.addons.perspectiveswitcher.PerspectiveSwitcher) (bar)).setKeylineColor(borderColor, borderColor); } else if ((value.getCssValueType()) == (org.w3c.dom.css.CSSValue.CSS_VALUE_LIST)) { org.w3c.dom.css.CSSValueList list = ((org.w3c.dom.css.CSSValueList) (value)); if ((list.getLength()) == 2) { org.w3c.dom.css.CSSValue border = list.item(0); org.w3c.dom.css.CSSValue curve = list.item(1); borderColor = ((org.eclipse.swt.graphics.Color) (engine.convert(border, org.eclipse.swt.graphics.Color.class, control.getDisplay()))); curveColor = ((org.eclipse.swt.graphics.Color) (engine.convert(curve, org.eclipse.swt.graphics.Color.class, control.getDisplay()))); ((org.eclipse.e4.ui.workbench.addons.perspectiveswitcher.PerspectiveSwitcher) (bar)).setKeylineColor(borderColor, curveColor); } } } } }
private final void openOther() { final org.eclipse.ui.IWorkbenchWindow window = org.eclipse.ui.PlatformUI.getWorkbench().getActiveWorkbenchWindow(); final org.eclipse.ui.IWorkbenchPage page = window.getActivePage(); if (page == null) { return; } final org.eclipse.ui.internal.dialogs.ShowViewDialog dialog = new org.eclipse.ui.internal.dialogs.ShowViewDialog(window, org.eclipse.ui.internal.WorkbenchPlugin.getDefault().getViewRegistry()); dialog.open(); if ((dialog.getReturnCode()) == (org.eclipse.jface.window.Window.CANCEL)) { return; } final org.eclipse.ui.views.IViewDescriptor[] descriptors = dialog.getSelection(); for (int i = 0; i < (descriptors.length); ++i) { try { openView(descriptors[i].getId()); } catch (org.eclipse.ui.PartInitException e) { org.eclipse.ui.internal.misc.StatusUtil.handleStatus(e.getStatus(), (((org.eclipse.ui.internal.WorkbenchMessages.ShowView_errorTitle) + ": ") + (e.getMessage())), StatusManager.SHOW); } } }
protected void calculateFilters() { java.util.Map values = getValues(); java.util.Collection filters = new java.util.ArrayList(); org.eclipse.ui.views.markers.MarkerField[] fields = generator.getVisibleFields(); for (int i = 0; i < (fields.length); i++) { org.eclipse.ui.views.markers.MarkerFieldFilter fieldFilter = org.eclipse.ui.internal.views.markers.MarkerSupportInternalUtilities.generateFilter(fields[i]); if (fieldFilter != null) { filters.add(fieldFilter); if (fieldFilter instanceof org.eclipse.ui.internal.views.markers.MarkerTypeFieldFilter) ((org.eclipse.ui.internal.views.markers.MarkerTypeFieldFilter) (fieldFilter)).setContentGenerator(generator); if (values != null) fieldFilter.initialize(values); } } fieldFilters = new org.eclipse.ui.views.markers.MarkerFieldFilter[filters.size()]; filters.toArray(fieldFilters); }
public org.eclipse.ui.activities.IWorkbenchActivitySupport getActivitySupport() { if ((activitySupport) == null) { activitySupport = new org.eclipse.ui.internal.activities.ws.WorkbenchActivitySupport(); } return activitySupport; }
public void doubleClick(org.eclipse.jface.viewers.DoubleClickEvent event) { org.eclipse.jface.viewers.ISelection selection = event.getSelection(); if (selection instanceof org.eclipse.jface.viewers.IStructuredSelection) { java.lang.Object item = ((org.eclipse.jface.viewers.IStructuredSelection) (selection)).getFirstElement(); if (item == null) return; if (treeViewer.getExpandedState(item)) treeViewer.collapseToLevel(item, 1); else treeViewer.expandToLevel(item, 1); } }
protected void dispose() { if ((menuExtenders) != null) { java.util.HashSet managers = new java.util.HashSet(menuExtenders.size()); for (int i = 0; i < (menuExtenders.size()); i++) { org.eclipse.ui.internal.PopupMenuExtender ext = ((org.eclipse.ui.internal.PopupMenuExtender) (menuExtenders.get(i))); managers.add(ext.getManager()); ext.dispose(); } if ((managers.size()) > 0) { for (java.util.Iterator iterator = managers.iterator(); iterator.hasNext();) { org.eclipse.jface.action.MenuManager mgr = ((org.eclipse.jface.action.MenuManager) (iterator.next())); mgr.dispose(); } } menuExtenders = null; } subActionBars.dispose(); serviceLocator.dispose(); e4Context.dispose(); }
java.lang.String getDisplayString() { return org.eclipse.osgi.util.NLS.bind(ProgressMessages.JobInfo_Error, new java.lang.Object[]{ job.getName(), com.ibm.icu.text.DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG).format(new java.util.Date(timestamp)) }); }
private org.eclipse.swt.widgets.Button createButton(org.eclipse.swt.widgets.Composite parent, java.lang.String text, org.eclipse.swt.events.SelectionListener listener) { org.eclipse.swt.widgets.Button button = new org.eclipse.swt.widgets.Button(parent, org.eclipse.swt.SWT.PUSH); button.setText(text); button.addSelectionListener(listener); if ((arrowCursor) == null) arrowCursor = new org.eclipse.swt.graphics.Cursor(button.getDisplay(), org.eclipse.swt.SWT.CURSOR_ARROW); button.setCursor(arrowCursor); return button; }
public void removeExtension(org.eclipse.core.runtime.IExtension extension, java.lang.Object[] objects) { for (int i = 0; i < (objects.length); i++) { if ((objects[i]) instanceof org.eclipse.ui.internal.PluginActionSetBuilder.Binding) { org.eclipse.ui.internal.PluginActionSetBuilder.Binding binding = ((org.eclipse.ui.internal.PluginActionSetBuilder.Binding) (objects[i])); binding.builder.removeActionExtensions(binding.set, binding.window); binding.set.dispose(); } } org.eclipse.ui.internal.Perspective[] perspectives = getActiveWorkbenchPage().getOpenInternalPerspectives(); boolean updateNeeded = true; for (int i = 0; i < (perspectives.length); i++) { for (int j = 0; j < (objects.length); j++) { if ((objects[j]) instanceof org.eclipse.ui.internal.registry.IActionSetDescriptor) { perspectives[i].removeActionSet(((org.eclipse.ui.internal.registry.IActionSetDescriptor) (objects[j]))); getActionPresentation().removeActionSet(((org.eclipse.ui.internal.registry.IActionSetDescriptor) (objects[j]))); } } } if (updateNeeded) { updateActionSets(); } }
@java.lang.Override public org.eclipse.core.runtime.IStatus runInUIThread(org.eclipse.core.runtime.IProgressMonitor monitor) { if (monitor.isCanceled()) { return org.eclipse.core.runtime.Status.CANCEL_STATUS; } final int nextDelay = getAutoSaveJobTime(); try { persist(false); monitor.done(); } finally { if ((nextDelay > 0) && (workbenchAutoSave)) { this.schedule(nextDelay); } } return org.eclipse.core.runtime.Status.OK_STATUS; }
private void doDispose() { if (((textLayout) != null) && (!(textLayout.isDisposed()))) { textLayout.dispose(); } if ((resourceManager) != null) { resourceManager.dispose(); resourceManager = null; } if ((grayColor) != null) { grayColor.dispose(); } }
protected void setOperationCancelButtonEnabled(boolean b) { operationCancelableState = b; if (((cancel) != null) && (!(cancel.isDisposed()))) { cancel.setEnabled(b); } }
private synchronized void clearImages() { if (((busyThread) != null) && (!(isDisposed()))) return; if ((imageCache) != null) { for (int index = 0; index < (org.eclipse.ui.internal.forms.widgets.BusyIndicator.IMAGE_COUNT); index++) { if (((imageCache[index]) != null) && (!(imageCache[index].isDisposed()))) { imageCache[index].dispose(); imageCache[index] = null; } } } }
private org.eclipse.swt.widgets.Button createCancelButton(org.eclipse.swt.widgets.Composite parent) { (((org.eclipse.swt.layout.GridLayout) (parent.getLayout())).numColumns)++; org.eclipse.swt.widgets.Button button = new org.eclipse.swt.widgets.Button(parent, org.eclipse.swt.SWT.PUSH); button.setText(IDialogConstants.CANCEL_LABEL); setButtonLayoutData(button); button.setFont(parent.getFont()); button.setData(new java.lang.Integer(org.eclipse.jface.dialogs.IDialogConstants.CANCEL_ID)); button.addSelectionListener(cancelListener); return button; }
public void addPerspectiveShortcut(org.eclipse.ui.IPerspectiveDescriptor perspective, org.eclipse.ui.internal.WorkbenchPage workbenchPage) { if ((perspectiveBar) == null) return; org.eclipse.ui.internal.PerspectiveBarContributionItem item = new org.eclipse.ui.internal.PerspectiveBarContributionItem(perspective, workbenchPage); int index = java.lang.Math.max(1, getItemInsertionIndex()); perspectiveBar.insert(index, item); perspectiveBar.update(false); ensureVisible(index, workbenchPage); MRUList.add(0, perspective); setCoolItemSize(coolItem); }
public void createPartControl(org.eclipse.swt.widgets.Composite parent) { parent.setLayout(new org.eclipse.swt.layout.FillLayout()); viewer = new org.eclipse.jface.viewers.TableViewer(createTable(parent)); restoreColumnWidths(memento); createColumns(viewer.getTable()); content = new org.eclipse.ui.views.markers.internal.TableContentProvider(viewer, org.eclipse.ui.views.markers.internal.Messages.format("TableView.populating", new java.lang.Object[]{ getTitle() }), getProgressService()); viewer.setContentProvider(content); viewer.setLabelProvider(new org.eclipse.ui.views.markers.internal.TableViewLabelProvider(getVisibleFields())); viewer.addSelectionChangedListener(new org.eclipse.jface.viewers.ISelectionChangedListener() { public void selectionChanged(org.eclipse.jface.viewers.SelectionChangedEvent event) { org.eclipse.jface.viewers.IStructuredSelection selection = ((org.eclipse.jface.viewers.IStructuredSelection) (event.getSelection())); viewerSelectionChanged(selection); } }); setSorter(getSorter()); createActions(); viewer.setInput(getViewerInput()); viewer.setSelection(restoreSelection(memento)); org.eclipse.swt.widgets.Scrollable scrollable = ((org.eclipse.swt.widgets.Scrollable) (viewer.getControl())); org.eclipse.swt.widgets.ScrollBar bar = scrollable.getVerticalBar(); if (bar != null) { bar.setSelection(restoreVerticalScrollBarPosition(memento)); } bar = scrollable.getHorizontalBar(); if (bar != null) { bar.setSelection(restoreHorizontalScrollBarPosition(memento)); } org.eclipse.jface.action.MenuManager mgr = initContextMenu(); org.eclipse.swt.widgets.Menu menu = mgr.createContextMenu(viewer.getControl()); viewer.getControl().setMenu(menu); getSite().registerContextMenu(mgr, viewer); initActionBars(getViewSite().getActionBars()); registerGlobalActions(getViewSite().getActionBars()); viewer.addOpenListener(new org.eclipse.jface.viewers.IOpenListener() { public void open(org.eclipse.jface.viewers.OpenEvent event) { handleOpenEvent(event); } }); viewer.getControl().addKeyListener(new org.eclipse.swt.events.KeyAdapter() { public void keyPressed(org.eclipse.swt.events.KeyEvent e) { handleKeyPressed(e); } }); }
public static java.lang.Object createExtension(final org.eclipse.core.runtime.IConfigurationElement element, final java.lang.String classAttribute) throws org.eclipse.core.runtime.CoreException { try { if (org.eclipse.ui.internal.util.BundleUtility.isActivated(element.getContributor().getName())) { return element.createExecutableExtension(classAttribute); } final java.lang.Object[] ret = new java.lang.Object[1]; final org.eclipse.core.runtime.CoreException[] exc = new org.eclipse.core.runtime.CoreException[1]; org.eclipse.swt.custom.BusyIndicator.showWhile(null, new java.lang.Runnable() { public void run() { try { ret[0] = element.createExecutableExtension(classAttribute); } catch (org.eclipse.core.runtime.CoreException e) { exc[0] = e; } } }); if ((exc[0]) != null) { throw exc[0]; } return ret[0]; } catch (org.eclipse.core.runtime.CoreException core) { throw core; } catch (java.lang.Exception e) { throw new org.eclipse.core.runtime.CoreException(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, org.eclipse.ui.internal.WorkbenchPlugin.PI_WORKBENCH, org.eclipse.core.runtime.IStatus.ERROR, WorkbenchMessages.WorkbenchPlugin_extension, e)); } }
protected void buttonPressed(int buttonId) { final boolean cleanAll = allButton.getSelection(); final boolean buildAll = ((buildNowButton) != null) && (buildNowButton.getSelection()); super.buttonPressed(buttonId); if (buttonId == (org.eclipse.jface.dialogs.IDialogConstants.OK_ID)) { try { org.eclipse.ui.PlatformUI.getWorkbench().getProgressService().busyCursorWhile(new org.eclipse.ui.actions.WorkspaceModifyOperation() { protected void execute(org.eclipse.core.runtime.IProgressMonitor monitor) throws org.eclipse.core.runtime.CoreException { doClean(cleanAll, monitor); } }); if (buildAll) { org.eclipse.ui.actions.GlobalBuildAction build = new org.eclipse.ui.actions.GlobalBuildAction(window, org.eclipse.core.resources.IncrementalProjectBuilder.INCREMENTAL_BUILD); build.run(); } } catch (java.lang.reflect.InvocationTargetException e) { java.lang.Throwable target = e.getTargetException(); if (target instanceof org.eclipse.core.runtime.CoreException) org.eclipse.jface.dialogs.ErrorDialog.openError(getShell(), null, null, ((org.eclipse.core.runtime.CoreException) (target)).getStatus()); } catch (java.lang.InterruptedException e) { } } }
public boolean saveSaveable(org.eclipse.ui.ISaveablePart saveable, boolean confirm, boolean closing) { java.util.Collection<org.eclipse.e4.ui.model.application.ui.basic.MPart> parts = partService.getParts(); for (org.eclipse.e4.ui.model.application.ui.basic.MPart part : parts) { java.lang.Object client = part.getObject(); if (client instanceof org.eclipse.ui.internal.e4.compatibility.CompatibilityPart) { if ((((org.eclipse.ui.internal.e4.compatibility.CompatibilityPart) (client)).getPart()) == saveable) { if (saveable.isDirty()) { if (closing) { if (saveable.isSaveOnCloseNeeded()) { return partService.savePart(part, confirm); } } else { return partService.savePart(part, confirm); } } return true; } } } return false; }
public FontFieldEditor(java.lang.String name, java.lang.String labelText, java.lang.String previewText, org.eclipse.jface.preference.Composite parent) { init(name, labelText); org.eclipse.jface.util.Assert.isNotNull(previewText); previewer = new org.eclipse.jface.preference.FontFieldEditor.DefaultPreviewer(previewText, parent); createControl(parent); }
protected org.eclipse.swt.widgets.Control createDialogArea(org.eclipse.swt.widgets.Composite parent) { org.eclipse.swt.widgets.Composite dialogArea = ((org.eclipse.swt.widgets.Composite) (super.createDialogArea(parent))); org.eclipse.swt.widgets.Composite content = new org.eclipse.swt.widgets.Composite(dialogArea, org.eclipse.swt.SWT.NONE); org.eclipse.swt.layout.GridData gd = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_BOTH); content.setLayoutData(gd); org.eclipse.swt.layout.GridLayout layout = new org.eclipse.swt.layout.GridLayout(); layout.numColumns = 1; layout.marginWidth = 0; layout.marginHeight = 0; content.setLayout(layout); final org.eclipse.swt.widgets.Label headerLabel = createHeader(content); pattern = new org.eclipse.swt.widgets.Text(content, ((((org.eclipse.swt.SWT.SINGLE) | (org.eclipse.swt.SWT.BORDER)) | (org.eclipse.swt.SWT.SEARCH)) | (org.eclipse.swt.SWT.ICON_CANCEL))); pattern.getAccessible().addAccessibleListener(new org.eclipse.swt.accessibility.AccessibleAdapter() { public void getName(org.eclipse.swt.accessibility.AccessibleEvent e) { e.result = org.eclipse.jface.action.LegacyActionTools.removeMnemonics(headerLabel.getText()); } }); gd = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_HORIZONTAL); pattern.setLayoutData(gd); final org.eclipse.swt.widgets.Label listLabel = createLabels(content); list = new org.eclipse.jface.viewers.TableViewer(content, ((((multi ? org.eclipse.swt.SWT.MULTI : org.eclipse.swt.SWT.SINGLE) | (org.eclipse.swt.SWT.BORDER)) | (org.eclipse.swt.SWT.V_SCROLL)) | (org.eclipse.swt.SWT.VIRTUAL))); list.getTable().getAccessible().addAccessibleListener(new org.eclipse.swt.accessibility.AccessibleAdapter() { public void getName(org.eclipse.swt.accessibility.AccessibleEvent e) { e.result = org.eclipse.jface.action.LegacyActionTools.removeMnemonics(listLabel.getText()); } }); list.setContentProvider(contentProvider); list.setLabelProvider(getItemsListLabelProvider()); list.setInput(new java.lang.Object[0]); list.setItemCount(contentProvider.getNumberOfElements()); gd = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_BOTH); applyDialogFont(list.getTable()); gd.heightHint = (list.getTable().getItemHeight()) * 15; list.getTable().setLayoutData(gd); createPopupMenu(); pattern.addModifyListener(new org.eclipse.swt.events.ModifyListener() { public void modifyText(org.eclipse.swt.events.ModifyEvent e) { applyFilter(); } }); pattern.addKeyListener(new org.eclipse.swt.events.KeyAdapter() { public void keyPressed(org.eclipse.swt.events.KeyEvent e) { if ((e.keyCode) == (org.eclipse.swt.SWT.ARROW_DOWN)) { if ((list.getTable().getItemCount()) > 0) { list.getTable().setFocus(); } } } }); list.addSelectionChangedListener(new org.eclipse.jface.viewers.ISelectionChangedListener() { public void selectionChanged(org.eclipse.jface.viewers.SelectionChangedEvent event) { org.eclipse.jface.viewers.StructuredSelection selection = ((org.eclipse.jface.viewers.StructuredSelection) (event.getSelection())); handleSelected(selection); } }); list.addDoubleClickListener(new org.eclipse.jface.viewers.IDoubleClickListener() { public void doubleClick(org.eclipse.jface.viewers.DoubleClickEvent event) { handleDoubleClick(); } }); list.getTable().addKeyListener(new org.eclipse.swt.events.KeyAdapter() { public void keyPressed(org.eclipse.swt.events.KeyEvent e) { if ((e.keyCode) == (org.eclipse.swt.SWT.DEL)) { java.util.List selectedElements = ((org.eclipse.jface.viewers.StructuredSelection) (list.getSelection())).toList(); java.lang.Object item = null; boolean isSelectedHistory = true; for (java.util.Iterator it = selectedElements.iterator(); it.hasNext();) { item = it.next(); if ((item instanceof org.eclipse.ui.dialogs.FilteredItemsSelectionDialog.ItemsListSeparator) || (!(isHistoryElement(item)))) { isSelectedHistory = false; break; } } if (isSelectedHistory) removeSelectedItems(selectedElements); } if ((((e.keyCode) == (org.eclipse.swt.SWT.ARROW_UP)) && (((e.stateMask) & (org.eclipse.swt.SWT.SHIFT)) != 0)) && (((e.stateMask) & (org.eclipse.swt.SWT.CTRL)) != 0)) { org.eclipse.jface.viewers.StructuredSelection selection = ((org.eclipse.jface.viewers.StructuredSelection) (list.getSelection())); if ((selection.size()) == 1) { java.lang.Object element = selection.getFirstElement(); if (element.equals(list.getElementAt(0))) { pattern.setFocus(); } if ((list.getElementAt(((list.getTable().getSelectionIndex()) - 1))) instanceof org.eclipse.ui.dialogs.FilteredItemsSelectionDialog.ItemsListSeparator) list.getTable().setSelection(((list.getTable().getSelectionIndex()) - 1)); list.getTable().notifyListeners(SWT.Selection, new org.eclipse.swt.widgets.Event()); } } if ((((e.keyCode) == (org.eclipse.swt.SWT.ARROW_DOWN)) && (((e.stateMask) & (org.eclipse.swt.SWT.SHIFT)) != 0)) && (((e.stateMask) & (org.eclipse.swt.SWT.CTRL)) != 0)) { if ((list.getElementAt(((list.getTable().getSelectionIndex()) + 1))) instanceof org.eclipse.ui.dialogs.FilteredItemsSelectionDialog.ItemsListSeparator) list.getTable().setSelection(((list.getTable().getSelectionIndex()) + 1)); list.getTable().notifyListeners(SWT.Selection, new org.eclipse.swt.widgets.Event()); } } }); createExtendedContentArea(content); details = new org.eclipse.ui.dialogs.FilteredItemsSelectionDialog.DetailsContentViewer(content, ((org.eclipse.swt.SWT.BORDER) | (org.eclipse.swt.SWT.FLAT))); details.setVisible(toggleStatusLineAction.isChecked()); details.setContentProvider(new org.eclipse.ui.dialogs.FilteredItemsSelectionDialog.NullContentProvider()); details.setLabelProvider(getDetailsLabelProvider()); applyDialogFont(content); restoreDialog(getDialogSettings()); if ((initialPatternText) != null) { pattern.setText(initialPatternText); } switch (selectionMode) { case org.eclipse.ui.dialogs.FilteredItemsSelectionDialog.CARET_BEGINNING : pattern.setSelection(0, 0); break; case org.eclipse.ui.dialogs.FilteredItemsSelectionDialog.FULL_SELECTION : pattern.setSelection(0, initialPatternText.length()); break; } applyFilter(); return dialogArea; }
@java.lang.Override public org.eclipse.ui.IWorkbenchPart createPart() throws org.eclipse.ui.PartInitException { try { if ((descriptor) == null) { org.eclipse.core.runtime.IStatus status = new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, WorkbenchPlugin.PI_WORKBENCH, org.eclipse.osgi.util.NLS.bind(WorkbenchMessages.EditorManager_missing_editor_descriptor, descriptorId)); org.eclipse.ui.IEditorRegistry registry = getPage().getWorkbenchWindow().getWorkbench().getEditorRegistry(); descriptor = ((org.eclipse.ui.internal.registry.EditorDescriptor) (registry.findEditor(EditorRegistry.EMPTY_EDITOR_ID))); return new org.eclipse.ui.internal.ErrorEditorPart(status); } else if (descriptor.getId().equals(IEditorRegistry.SYSTEM_INPLACE_EDITOR_ID)) { org.eclipse.ui.IEditorPart part = org.eclipse.ui.internal.editorsupport.ComponentSupport.getSystemInPlaceEditor(); if (part == null) { throw new org.eclipse.ui.PartInitException(WorkbenchMessages.EditorManager_no_in_place_support); } return part; } return descriptor.createEditor(); } catch (org.eclipse.core.runtime.CoreException e) { org.eclipse.core.runtime.IStatus status = e.getStatus(); throw new org.eclipse.ui.PartInitException(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, WorkbenchPlugin.PI_WORKBENCH, status.getCode(), status.getMessage(), status.getException())); } }
void collectExistingReadonlyFiles(org.eclipse.core.runtime.IPath sourceStart, java.util.List sources, java.util.ArrayList noOverwrite, java.util.ArrayList overwriteReadonly, int policy) { org.eclipse.core.resources.IWorkspaceRoot workspaceRoot = org.eclipse.core.resources.ResourcesPlugin.getWorkspace().getRoot(); java.util.Iterator sourceIter = sources.iterator(); org.eclipse.core.runtime.IPath sourceRootPath = null; if ((this.source) != null) { sourceRootPath = new org.eclipse.core.runtime.Path(provider.getFullPath(this.source)); } while (sourceIter.hasNext()) { java.lang.Object nextSource = sourceIter.next(); org.eclipse.core.runtime.IPath sourcePath = new org.eclipse.core.runtime.Path(provider.getFullPath(nextSource)); org.eclipse.core.runtime.IPath newDestinationPath; org.eclipse.core.resources.IResource newDestination; if (sourceRootPath == null) { newDestinationPath = sourceStart.append(provider.getLabel(nextSource)); } else { int prefixLength = sourcePath.matchingFirstSegments(sourceRootPath); org.eclipse.core.runtime.IPath relativeSourcePath = sourcePath.removeFirstSegments(prefixLength); newDestinationPath = this.destinationPath.append(relativeSourcePath); } newDestination = workspaceRoot.findMember(newDestinationPath); if (newDestination == null) continue; org.eclipse.core.resources.IFolder folder = getFolder(newDestination); if (folder != null) { if (policy != (org.eclipse.ui.wizards.datatransfer.ImportOperation.POLICY_FORCE_OVERWRITE)) { if (((this.overwriteState) == (org.eclipse.ui.wizards.datatransfer.ImportOperation.OVERWRITE_NONE)) || (!(queryOverwrite(newDestinationPath)))) { noOverwrite.add(folder); continue; } } if (provider.isFolder(source)) collectExistingReadonlyFiles(newDestinationPath, provider.getChildren(source), noOverwrite, overwriteReadonly, org.eclipse.ui.wizards.datatransfer.ImportOperation.POLICY_FORCE_OVERWRITE); } else { org.eclipse.core.resources.IFile file = getFile(newDestination); if (file != null) { if (!(queryOverwriteFile(file, policy))) noOverwrite.add(file.getFullPath()); else if (file.isReadOnly()) overwriteReadonly.add(file); } } } }
public java.lang.Object getAdapter(java.lang.Object adaptableObject, java.lang.Class adapterType) { if (adaptableObject instanceof org.eclipse.ui.navigator.CommonNavigator) { if (!(((org.eclipse.ui.navigator.CommonNavigator) (adaptableObject)).getViewSite().getId().equals(ProjectExplorer.VIEW_ID))) return null; if ((org.eclipse.ui.views.properties.IPropertySheetPage.class) == adapterType) return new org.eclipse.ui.views.properties.tabbed.TabbedPropertySheetPage(new org.eclipse.ui.internal.navigator.resources.workbench.TabbedPropertySheetProjectExplorerContributor(((org.eclipse.ui.navigator.CommonNavigator) (adaptableObject)))); } return null; }
void importFile(java.lang.Object fileObject, int policy) { org.eclipse.core.resources.IContainer containerResource; try { containerResource = getDestinationContainerFor(fileObject); } catch (org.eclipse.core.runtime.CoreException e) { org.eclipse.core.runtime.IStatus coreStatus = e.getStatus(); java.lang.String newMessage = org.eclipse.osgi.util.NLS.bind(DataTransferMessages.ImportOperation_coreImportError, fileObject, coreStatus.getMessage()); org.eclipse.core.runtime.IStatus status = new org.eclipse.core.runtime.Status(coreStatus.getSeverity(), coreStatus.getPlugin(), coreStatus.getCode(), newMessage, null); errorTable.add(status); return; } java.lang.String fileObjectPath = provider.getFullPath(fileObject); monitor.subTask(fileObjectPath); org.eclipse.core.resources.IFile targetResource = containerResource.getFile(new org.eclipse.core.runtime.Path(provider.getLabel(fileObject))); monitor.worked(1); if (rejectedFiles.contains(targetResource.getFullPath())) return; org.eclipse.core.runtime.IPath targetPath = targetResource.getLocation(); if ((targetPath != null) && (targetPath.toFile().equals(new java.io.File(fileObjectPath)))) { errorTable.add(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, org.eclipse.ui.PlatformUI.PLUGIN_ID, 0, org.eclipse.osgi.util.NLS.bind(DataTransferMessages.ImportOperation_targetSameAsSourceError, fileObjectPath), null)); return; } java.io.InputStream contentStream = provider.getContents(fileObject); if (contentStream == null) { errorTable.add(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, org.eclipse.ui.PlatformUI.PLUGIN_ID, 0, org.eclipse.osgi.util.NLS.bind(DataTransferMessages.ImportOperation_openStreamError, fileObjectPath), null)); return; } try { if (targetResource.exists()) targetResource.setContents(contentStream, org.eclipse.core.resources.IResource.KEEP_HISTORY, null); else targetResource.create(contentStream, false, null); setResourceAttributes(targetResource, fileObject); if ((provider) instanceof org.eclipse.ui.internal.wizards.datatransfer.TarLeveledStructureProvider) { try { targetResource.setResourceAttributes(((org.eclipse.ui.internal.wizards.datatransfer.TarLeveledStructureProvider) (provider)).getResourceAttributes(fileObject)); } catch (org.eclipse.core.runtime.CoreException e) { errorTable.add(e.getStatus()); } } } catch (org.eclipse.core.runtime.CoreException e) { errorTable.add(e.getStatus()); } finally { try { contentStream.close(); } catch (java.io.IOException e) { errorTable.add(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, org.eclipse.ui.PlatformUI.PLUGIN_ID, 0, org.eclipse.osgi.util.NLS.bind(DataTransferMessages.ImportOperation_closeStreamError, fileObjectPath), e)); } } }
@javax.annotation.PreDestroy public void saveWorkingSets() { if ((this.workingSet) != null) { getWindowModel().getPersistedState().put(IWorkbenchConstants.TAG_WORKING_SET, this.workingSet.getName()); } else { getWindowModel().getPersistedState().remove(IWorkbenchConstants.TAG_WORKING_SET); } org.eclipse.ui.XMLMemento workingSetMem = org.eclipse.ui.XMLMemento.createWriteRoot(IWorkbenchConstants.TAG_WORKING_SETS); for (int i = 0; i < (this.workingSets.length); i++) { workingSetMem.createChild(IWorkbenchConstants.TAG_WORKING_SET, this.workingSets[i].getName()); } java.io.StringWriter writer = new java.io.StringWriter(); try { workingSetMem.save(writer); getWindowModel().getPersistedState().put(IWorkbenchConstants.TAG_WORKING_SETS, writer.getBuffer().toString()); } catch (java.io.IOException e) { org.eclipse.ui.statushandlers.StatusManager.getManager().handle(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, org.eclipse.ui.PlatformUI.PLUGIN_ID, org.eclipse.core.runtime.IStatus.ERROR, WorkbenchMessages.SavingProblem, e)); } getWindowModel().getPersistedState().put(org.eclipse.ui.internal.WorkbenchPage.ATT_AGGREGATE_WORKING_SET_ID, this.aggregateWorkingSetId); }
public org.eclipse.swt.widgets.Composite createPageContainer(org.eclipse.swt.widgets.Composite parent) { org.eclipse.swt.custom.CTabFolder parentFolder = new org.eclipse.swt.custom.CTabFolder(parent, org.eclipse.swt.SWT.BORDER); parentFolder.setSimple(org.eclipse.ui.internal.util.PrefUtil.getAPIPreferenceStore().getBoolean(IWorkbenchPreferenceConstants.SHOW_TRADITIONAL_STYLE_TABS)); tab = new org.eclipse.swt.custom.CTabItem(parentFolder, org.eclipse.swt.SWT.BORDER); parentFolder.setSelectionForeground(parent.getDisplay().getSystemColor(SWT.COLOR_LIST_SELECTION)); parentFolder.setSelectionBackground(parent.getDisplay().getSystemColor(SWT.COLOR_WIDGET_BACKGROUND)); parentFolder.setBackground(parent.getDisplay().getSystemColor(SWT.COLOR_LIST_BACKGROUND)); tab.setFont(org.eclipse.jface.resource.JFaceResources.getFontRegistry().get(JFaceResources.BANNER_FONT)); org.eclipse.swt.widgets.Control topBar = getContainerToolBar(parentFolder); parentFolder.setTopRight(topBar, SWT.RIGHT); int height = topBar.computeSize(SWT.DEFAULT, SWT.DEFAULT).y; parentFolder.setTabHeight(height); parentFolder.setLayoutData(new org.eclipse.swt.layout.GridData((((org.eclipse.swt.layout.GridData.FILL_BOTH) | (org.eclipse.swt.layout.GridData.GRAB_HORIZONTAL)) | (org.eclipse.swt.layout.GridData.GRAB_VERTICAL)))); org.eclipse.swt.widgets.Composite result = new org.eclipse.swt.widgets.Composite(parentFolder, org.eclipse.swt.SWT.NULL); result.setLayout(getPageLayout()); tab.setControl(result); parentFolder.setSelection(0); return result; }
public java.lang.Object[] getElements(java.lang.Object inputElement) { java.lang.Object[] elements = super.getElements(inputElement); if ((keptJobs.size()) == 0) { return elements; } if ((elements.length) == 0) { return keptJobs.toArray(); } java.util.Set all = new java.util.HashSet(); for (int i = 0; i < (elements.length); i++) { java.lang.Object element = elements[i]; all.add(element); if (keptJobs.contains(element)) { keptJobs.remove(element); } } java.util.Iterator keptIterator = keptJobs.iterator(); while (keptIterator.hasNext()) { org.eclipse.ui.internal.progress.JobInfo next = ((org.eclipse.ui.internal.progress.JobInfo) (keptIterator.next())); org.eclipse.ui.internal.progress.GroupInfo group = next.getGroupInfo(); if (group == null) all.add(next); else all.add(group); } return all.toArray(); }
private void updateBroughtToTop(org.eclipse.e4.ui.model.application.ui.basic.MPart part) { updateActiveEditorSources(part); org.eclipse.ui.IWorkbenchPart workbenchPart = getWorkbenchPart(part); if (workbenchPart instanceof org.eclipse.ui.IEditorPart) { navigationHistory.markEditor(((org.eclipse.ui.IEditorPart) (workbenchPart))); } org.eclipse.e4.ui.model.application.ui.MElementContainer<?> parent = part.getParent(); if (parent == null) { org.eclipse.e4.ui.model.application.ui.advanced.MPlaceholder placeholder = part.getCurSharedRef(); if (placeholder == null) { return; } parent = placeholder.getParent(); } if (parent instanceof org.eclipse.e4.ui.model.application.ui.basic.MPartStack) { int newIndex = lastIndexOfContainer(parent); if ((newIndex >= 0) && (part == (activationList.get(newIndex)))) { return; } activationList.remove(part); if ((newIndex >= 0) && (newIndex < ((activationList.size()) - 1))) { activationList.add(newIndex, part); } else { activationList.add(part); } } }
public void run() { if (pruning) { flush(); update(); } else update(); }
public void done(org.eclipse.core.runtime.jobs.IJobChangeEvent event) { if (!(org.eclipse.ui.PlatformUI.isWorkbenchRunning())) { return; } java.util.Iterator startListeners = busyListenersForJob(event.getJob()).iterator(); while (startListeners.hasNext()) { org.eclipse.ui.internal.progress.IJobBusyListener next = ((org.eclipse.ui.internal.progress.IJobBusyListener) (startListeners.next())); next.decrementBusy(event.getJob()); } final org.eclipse.ui.internal.progress.JobInfo info = getJobInfo(event.getJob()); removeJobInfo(info); if (((event.getResult()) != null) && ((event.getResult().getSeverity()) == (org.eclipse.core.runtime.IStatus.ERROR))) { org.eclipse.ui.statushandlers.StatusAdapter statusAdapter = new org.eclipse.ui.statushandlers.StatusAdapter(event.getResult()); statusAdapter.addAdapter(org.eclipse.core.runtime.jobs.Job.class, event.getJob()); if ((event.getJob().getProperty(IProgressConstants.NO_IMMEDIATE_ERROR_PROMPT_PROPERTY)) == (java.lang.Boolean.TRUE)) { statusAdapter.setProperty(IProgressConstants.NO_IMMEDIATE_ERROR_PROMPT_PROPERTY, java.lang.Boolean.TRUE); org.eclipse.ui.internal.progress.StatusAdapterHelper.getInstance().putStatusAdapter(info, statusAdapter); } org.eclipse.ui.statushandlers.StatusManager.getManager().handle(statusAdapter, ((org.eclipse.ui.statushandlers.StatusManager.SHOW) | (org.eclipse.ui.statushandlers.StatusManager.LOG))); } }
private boolean shouldActivate() { if ((application) != null) { org.eclipse.e4.core.contexts.IEclipseContext applicationContext = application.getContext(); org.eclipse.e4.core.contexts.IEclipseContext activeChild = applicationContext.getActiveChild(); if (((activeChild == null) || ((activeChild.get(org.eclipse.e4.ui.model.application.ui.basic.MWindow.class)) != (application.getSelectedElement()))) || ((application.getSelectedElement()) != (modelService.getTopLevelWindowFor(stackToActivate)))) { return false; } } return true; }
protected org.eclipse.swt.widgets.Control createDialogArea(org.eclipse.swt.widgets.Composite parent) { org.eclipse.swt.widgets.Composite composite = ((org.eclipse.swt.widgets.Composite) (super.createDialogArea(parent))); if ((message) != null) { org.eclipse.swt.widgets.Label label = new org.eclipse.swt.widgets.Label(composite, org.eclipse.swt.SWT.WRAP); label.setText(message); org.eclipse.swt.layout.GridData data = new org.eclipse.swt.layout.GridData(((((org.eclipse.swt.layout.GridData.GRAB_HORIZONTAL) | (org.eclipse.swt.layout.GridData.GRAB_VERTICAL)) | (org.eclipse.swt.layout.GridData.HORIZONTAL_ALIGN_FILL)) | (org.eclipse.swt.layout.GridData.VERTICAL_ALIGN_CENTER))); data.widthHint = convertHorizontalDLUsToPixels(IDialogConstants.MINIMUM_MESSAGE_AREA_WIDTH); label.setLayoutData(data); label.setFont(parent.getFont()); } text = new org.eclipse.swt.widgets.Text(composite, getInputTextStyle()); text.setLayoutData(new org.eclipse.swt.layout.GridData(((org.eclipse.swt.layout.GridData.GRAB_HORIZONTAL) | (org.eclipse.swt.layout.GridData.HORIZONTAL_ALIGN_FILL)))); text.addModifyListener(new org.eclipse.swt.events.ModifyListener() { public void modifyText(org.eclipse.swt.events.ModifyEvent e) { validateInput(); } }); errorMessageText = new org.eclipse.swt.widgets.Text(composite, ((org.eclipse.swt.SWT.READ_ONLY) | (org.eclipse.swt.SWT.WRAP))); errorMessageText.setLayoutData(new org.eclipse.swt.layout.GridData(((org.eclipse.swt.layout.GridData.GRAB_HORIZONTAL) | (org.eclipse.swt.layout.GridData.HORIZONTAL_ALIGN_FILL)))); errorMessageText.setBackground(errorMessageText.getDisplay().getSystemColor(SWT.COLOR_WIDGET_BACKGROUND)); setErrorMessage(errorMessage); applyDialogFont(composite); return composite; }
@java.lang.Override public boolean isEnabled() { org.eclipse.e4.core.commands.EHandlerService hs = ((org.eclipse.e4.core.commands.EHandlerService) (workbench.getService(org.eclipse.e4.core.commands.EHandlerService.class))); org.eclipse.e4.core.commands.ECommandService cs = ((org.eclipse.e4.core.commands.ECommandService) (workbench.getService(org.eclipse.e4.core.commands.ECommandService.class))); if ((hs == null) || (cs == null)) { return false; } org.eclipse.core.commands.Command command = cs.getCommand(commandId); setBaseEnabled(hs.canExecute(new org.eclipse.core.commands.ParameterizedCommand(command, null))); return super.isEnabled(); }
@java.lang.Override public boolean canDrop(org.eclipse.e4.ui.model.application.ui.MUIElement dragElement, org.eclipse.e4.ui.workbench.addons.dndaddon.CursorInfo info) { if (!(dragElement instanceof org.eclipse.e4.ui.model.application.ui.basic.MPart)) return false; org.eclipse.e4.ui.model.application.ui.basic.MPart part = ((org.eclipse.e4.ui.model.application.ui.basic.MPart) (dragElement)); org.eclipse.e4.ui.model.application.ui.basic.MStackElement stackElement = ((part.getCurSharedRef()) != null) ? part.getCurSharedRef() : part; if ((info.curElement) == part) { if ((stackElement.getParent().getWidget()) instanceof org.eclipse.e4.ui.widgets.CTabFolder) { org.eclipse.e4.ui.widgets.CTabFolder ctf = ((org.eclipse.e4.ui.widgets.CTabFolder) (stackElement.getParent().getWidget())); return (ctf.getItemCount()) > 1; } } if ((info.curElement) instanceof org.eclipse.e4.ui.model.application.ui.basic.MStackElement) return true; if (((info.curElement) instanceof org.eclipse.e4.ui.model.application.ui.basic.MPartStack) && (info.curElement.getTags().contains("EditorStack"))) return true; return false; }
protected void initializeDefaultPreferences(org.eclipse.jface.preference.IPreferenceStore store) { store.setDefault(IDEInternalPreferences.SAVE_ALL_BEFORE_BUILD, false); store.setDefault(IDEInternalPreferences.SAVE_INTERVAL, 5); store.setDefault(IDEInternalPreferences.WELCOME_DIALOG, true); store.setDefault(IDEInternalPreferences.INTRO, true); store.setDefault(IDEInternalPreferences.REFRESH_WORKSPACE_ON_STARTUP, false); store.setDefault(IDEInternalPreferences.EXIT_PROMPT_ON_CLOSE_LAST_WINDOW, true); store.setDefault(IDEInternalPreferences.SHOW_TASKS_ON_BUILD, true); store.setDefault(IDEInternalPreferences.PROJECT_SWITCH_PERSP_MODE, IDEInternalPreferences.PSPM_PROMPT); store.setDefault(IDE.Preferences.PROJECT_OPEN_NEW_PERSPECTIVE, IWorkbenchPreferenceConstants.OPEN_PERSPECTIVE_REPLACE); }
public void handleEvent(org.osgi.service.event.Event event) { org.eclipse.e4.ui.model.application.ui.MUIElement changedObj = ((org.eclipse.e4.ui.model.application.ui.MUIElement) (event.getProperty(UIEvents.EventTags.ELEMENT))); org.eclipse.e4.ui.model.application.ui.MElementContainer<org.eclipse.e4.ui.model.application.ui.MUIElement> container = null; if ((changedObj.getCurSharedRef()) != null) container = changedObj.getCurSharedRef().getParent(); else container = changedObj.getParent(); if (container == null) { return; } org.eclipse.e4.ui.model.application.ui.MUIElement containerElement = container; if ((containerElement instanceof org.eclipse.e4.ui.model.application.ui.basic.MWindow) && ((containerElement.getParent()) != null)) { return; } if (((isLastEditorStack(containerElement)) || (containerElement instanceof org.eclipse.e4.ui.model.application.ui.advanced.MPerspective)) || (containerElement instanceof org.eclipse.e4.ui.model.application.ui.advanced.MPerspectiveStack)) return; java.lang.Boolean toBeRendered = ((java.lang.Boolean) (event.getProperty(UIEvents.EventTags.NEW_VALUE))); if (toBeRendered) { if (!(container.isToBeRendered())) container.setToBeRendered(true); if (!(container.isVisible())) container.setVisible(true); } else { if (container.getTags().contains(IPresentationEngine.NO_AUTO_COLLAPSE)) { return; } int visCount = modelService.countRenderableChildren(container); final org.eclipse.e4.ui.model.application.ui.MElementContainer<org.eclipse.e4.ui.model.application.ui.MUIElement> theContainer = container; if (visCount == 0) { org.eclipse.swt.widgets.Display.getCurrent().asyncExec(new java.lang.Runnable() { public void run() { int visCount = modelService.countRenderableChildren(theContainer); if ((!(isLastEditorStack(theContainer))) && (visCount == 0)) theContainer.setToBeRendered(false); } }); } else { boolean makeInvisible = true; for (org.eclipse.e4.ui.model.application.ui.MUIElement kid : container.getChildren()) { if (!(kid.isToBeRendered())) continue; if (kid.isVisible()) { makeInvisible = false; break; } } if (makeInvisible) { container.setVisible(false); } } } }
public void clear() { updating = true; try { java.util.List diffEntries = new java.util.ArrayList(); for (java.util.Iterator it = wrappedList.iterator(); it.hasNext();) { java.lang.Object o = it.next(); diffEntries.add(org.eclipse.core.databinding.observable.Diffs.createListDiffEntry(0, false, o)); } wrappedList.clear(); setValues(); fireListChange(org.eclipse.core.databinding.observable.Diffs.createListDiff(((org.eclipse.core.databinding.observable.list.ListDiffEntry[]) (diffEntries.toArray(new org.eclipse.core.databinding.observable.list.ListDiffEntry[diffEntries.size()]))))); } finally { updating = false; } }
public void set(java.lang.Object value) { if ((value != (java.lang.Boolean.TRUE)) && (value != (java.lang.Boolean.FALSE))) throw new java.lang.IllegalArgumentException(); if ((value == (java.lang.Boolean.TRUE)) && (((java.lang.Boolean) (org.eclipse.ui.internal.UISynchronizer.startupThread.get())).booleanValue())) { throw new java.lang.IllegalStateException(); } super.set(value); }
public void block() { if ((display) == (org.eclipse.swt.widgets.Display.getCurrent())) { while (continueEventDispatching) { try { if (!(display.readAndDispatch())) { display.sleep(); } } catch (java.lang.ThreadDeath e) { throw e; } catch (java.lang.Throwable e) { org.eclipse.jface.util.Policy.getLog().log(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, org.eclipse.jface.util.Policy.JFACE, "Unhandled event loop exception during blocked modal context.", e)); } } } else { try { join(); } catch (java.lang.InterruptedException e) { throwable = e; } } }
private BlockedJobsDialog(org.eclipse.swt.widgets.Shell parentShell, org.eclipse.core.runtime.IProgressMonitor blocking, org.eclipse.core.runtime.IStatus blockingStatus) { super((parentShell == null ? org.eclipse.ui.internal.progress.ProgressManagerUtil.getNonModalShell() : parentShell)); blockingMonitor = blocking; if (blockingStatus instanceof org.eclipse.core.runtime.jobs.IJobStatus) blockingJob = ((org.eclipse.core.runtime.jobs.IJobStatus) (blockingStatus)).getJob(); setShellStyle(((((org.eclipse.swt.SWT.BORDER) | (org.eclipse.swt.SWT.TITLE)) | (org.eclipse.swt.SWT.APPLICATION_MODAL)) | (org.eclipse.swt.SWT.RESIZE))); setBlockOnOpen(false); setMessage(blockingStatus.getMessage()); }
public ThemeEngine(org.eclipse.swt.widgets.Display display) { this.engine = new org.eclipse.e4.ui.css.swt.engine.CSSSWTEngineImpl(display, true); this.display = display; this.engine.setErrorHandler(new org.eclipse.e4.ui.css.core.engine.CSSErrorHandler() { public void error(java.lang.Exception e) { e.printStackTrace(); } }); org.eclipse.core.runtime.IExtensionRegistry registry = org.eclipse.core.runtime.RegistryFactory.getRegistry(); org.eclipse.core.runtime.IExtensionPoint extPoint = registry.getExtensionPoint("org.eclipse.e4.ui.css.swt.theme"); for (org.eclipse.core.runtime.IExtension e : extPoint.getExtensions()) { for (org.eclipse.core.runtime.IConfigurationElement ce : getPlatformMatches(e.getConfigurationElements())) { if (ce.getName().equals("theme")) { try { java.lang.String version = ce.getAttribute("os_version"); if (version == null) version = ""; java.lang.String basestylesheeturi = ce.getAttribute("basestylesheeturi"); if (!(basestylesheeturi.startsWith("platform:/plugin/"))) { basestylesheeturi = (("platform:/plugin/" + (ce.getContributor().getName())) + "/") + basestylesheeturi; } registerTheme(((ce.getAttribute("id")) + version), ce.getAttribute("label"), basestylesheeturi, version); } catch (java.lang.IllegalArgumentException e1) { e1.printStackTrace(); } } } } for (org.eclipse.core.runtime.IExtension e : extPoint.getExtensions()) { for (org.eclipse.core.runtime.IConfigurationElement ce : getPlatformMatches(e.getConfigurationElements())) { if (ce.getName().equals("stylesheet")) { org.eclipse.core.runtime.IConfigurationElement[] cces = ce.getChildren("themeid"); if ((cces.length) == 0) { registerStylesheet(((("platform:/plugin/" + (ce.getContributor().getName())) + "/") + (ce.getAttribute("uri")))); for (org.eclipse.core.runtime.IConfigurationElement resourceEl : ce.getChildren("osgiresourcelocator")) { java.lang.String uri = resourceEl.getAttribute("uri"); if (uri != null) { registerResourceLocator(new org.eclipse.e4.ui.css.core.util.impl.resources.OSGiResourceLocator(uri)); } } } else { java.lang.String[] themes = new java.lang.String[cces.length]; for (int i = 0; i < (cces.length); i++) { themes[i] = cces[i].getAttribute("refid"); } registerStylesheet(((("platform:/plugin/" + (ce.getContributor().getName())) + "/") + (ce.getAttribute("uri"))), themes); for (org.eclipse.core.runtime.IConfigurationElement resourceEl : ce.getChildren("osgiresourcelocator")) { java.lang.String uri = resourceEl.getAttribute("uri"); if (uri != null) { registerResourceLocator(new org.eclipse.e4.ui.css.core.util.impl.resources.OSGiResourceLocator(uri)); } } } } } } display.setData("org.eclipse.e4.ui.css.core.engine", engine); }
void doPendingWork() { java.lang.Thread.interrupted(); org.eclipse.ui.internal.Semaphore work; while ((work = pendingWork.remove()) != null) { org.eclipse.ui.internal.Semaphore oldWork = currentWork; try { currentWork = work; java.lang.Runnable runnable = work.getRunnable(); if (runnable != null) { runnable.run(); } } finally { currentWork = oldWork; work.release(); } } }
protected org.eclipse.swt.widgets.Control createContents(org.eclipse.swt.widgets.Composite parent) { org.eclipse.swt.graphics.Font font = parent.getFont(); org.eclipse.ui.help.WorkbenchHelp.setHelp(parent, IHelpContextIds.VIEWS_PREFERENCE_PAGE); org.eclipse.jface.preference.IPreferenceStore store = org.eclipse.ui.internal.WorkbenchPlugin.getDefault().getPreferenceStore(); editorAlignment = store.getInt(IPreferenceConstants.EDITOR_TAB_POSITION); viewAlignment = store.getInt(IPreferenceConstants.VIEW_TAB_POSITION); org.eclipse.swt.widgets.Composite composite = new org.eclipse.swt.widgets.Composite(parent, org.eclipse.swt.SWT.NONE); composite.setLayoutData(new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_BOTH)); composite.setFont(font); org.eclipse.swt.layout.GridLayout layout = new org.eclipse.swt.layout.GridLayout(); layout.marginWidth = 0; layout.marginHeight = 0; composite.setLayout(layout); createEditorTabButtonGroup(composite); createViewTabButtonGroup(composite); org.eclipse.swt.layout.GridData data = new org.eclipse.swt.layout.GridData(((org.eclipse.swt.layout.GridData.GRAB_HORIZONTAL) | (org.eclipse.swt.layout.GridData.FILL_HORIZONTAL))); data.horizontalSpan = 2; org.eclipse.swt.widgets.Label label = new org.eclipse.swt.widgets.Label(composite, org.eclipse.swt.SWT.NONE); label.setText(org.eclipse.ui.internal.WorkbenchMessages.getString("ViewsPreference.currentTheme")); label.setFont(parent.getFont()); label.setLayoutData(data); data = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.HORIZONTAL_ALIGN_FILL); data.heightHint = convertVerticalDLUsToPixels(IDialogConstants.BUTTON_HEIGHT); data.horizontalSpan = 2; themeCombo = new org.eclipse.swt.widgets.Combo(composite, org.eclipse.swt.SWT.READ_ONLY); themeCombo.setLayoutData(data); themeCombo.setFont(parent.getFont()); refreshThemeCombo(); createShowTextOnPerspectiveBarPref(composite); createDockPerspectiveBarPref(composite); createShowTraditionalStyleTabsPref(composite); return composite; }
private void migrateDialogSettings() { org.eclipse.ui.plugin.AbstractUIPlugin uiPlugin = ((org.eclipse.ui.plugin.AbstractUIPlugin) (org.eclipse.core.runtime.Platform.getPlugin(PlatformUI.PLUGIN_ID))); org.eclipse.jface.dialogs.IDialogSettings uiSettings = uiPlugin.getDialogSettings(); uiSettings = uiSettings.getSection(org.eclipse.ui.views.navigator.ResourceNavigator.STORE_SECTION); if (uiSettings != null) { java.lang.String workingSetName = uiSettings.get(org.eclipse.ui.views.navigator.ResourceNavigator.STORE_WORKING_SET); if ((workingSetName != null) && ((workingSetName.length()) > 0)) { settings.put(org.eclipse.ui.views.navigator.ResourceNavigator.STORE_WORKING_SET, workingSetName); uiSettings.put(org.eclipse.ui.views.navigator.ResourceNavigator.STORE_WORKING_SET, ""); } java.lang.String sortType = uiSettings.get(org.eclipse.ui.views.navigator.ResourceNavigator.STORE_SORT_TYPE); if ((sortType != null) && ((sortType.length()) > 0)) { settings.put(org.eclipse.ui.views.navigator.ResourceNavigator.STORE_SORT_TYPE, sortType); uiSettings.put(org.eclipse.ui.views.navigator.ResourceNavigator.STORE_SORT_TYPE, ""); } } }
private org.eclipse.ui.internal.AboutInfo promptForFeature() { org.eclipse.ui.internal.AboutInfo[] features = ((org.eclipse.ui.internal.Workbench) (window.getWorkbench())).getConfigurationInfo().getFeaturesInfo(); java.util.ArrayList welcomeFeatures = new java.util.ArrayList(); for (int i = 0; i < (features.length); i++) { if ((features[i].getWelcomePageURL()) != null) welcomeFeatures.add(features[i]); } org.eclipse.swt.widgets.Shell shell = window.getShell(); if ((welcomeFeatures.size()) == 0) { org.eclipse.jface.dialogs.MessageDialog.openInformation(shell, org.eclipse.ui.internal.WorkbenchMessages.getString("QuickStartMessageDialog.title"), org.eclipse.ui.internal.WorkbenchMessages.getString("QuickStartMessageDialog.message")); return null; } features = new org.eclipse.ui.internal.AboutInfo[welcomeFeatures.size()]; welcomeFeatures.toArray(features); org.eclipse.ui.internal.AboutInfo primaryFeature = ((org.eclipse.ui.internal.Workbench) (window.getWorkbench())).getConfigurationInfo().getAboutInfo(); org.eclipse.ui.internal.FeatureSelectionDialog d = new org.eclipse.ui.internal.FeatureSelectionDialog(shell, features, primaryFeature, "WelcomePageSelectionDialog.title", "WelcomePageSelectionDialog.message", org.eclipse.ui.internal.IHelpContextIds.WELCOME_PAGE_SELECTION_DIALOG); if (((d.open()) != (org.eclipse.jface.dialogs.Dialog.OK)) || ((d.getResult().length) != 1)) return null; return ((org.eclipse.ui.internal.AboutInfo) (d.getResult()[0])); }
public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { createLink = createLinkButton.getSelection(); browseButton.setEnabled(createLink); variablesButton.setEnabled(createLink); linkTargetField.setEnabled(createLink); if ((fileSystemSelectionArea) != null) fileSystemSelectionArea.setEnabled(createLink); if ((listener) != null) { listener.handleEvent(new org.eclipse.swt.widgets.Event()); } }
public void update(java.lang.String id) { if ((widget) != null) { if ((widget) instanceof org.eclipse.swt.widgets.MenuItem) { org.eclipse.swt.widgets.MenuItem item = ((org.eclipse.swt.widgets.MenuItem) (widget)); java.lang.String text = label; if (text == null) { if ((command) != null) { try { text = command.getCommand().getName(); } catch (org.eclipse.core.commands.common.NotDefinedException e) { org.eclipse.ui.internal.WorkbenchPlugin.log(("Update item failed " + (getId())), e); } } } text = updateMnemonic(text); java.lang.String keyBindingText = null; if ((command) != null) { org.eclipse.jface.bindings.TriggerSequence binding = bindingService.getBestActiveBindingFor(command); if (binding != null) { keyBindingText = binding.format(); } } if (text != null) { if (keyBindingText == null) { item.setText(text); } else { item.setText(((text + '\t') + keyBindingText)); } } updateIcons(); if ((item.getSelection()) != (checkedState)) { item.setSelection(checkedState); } boolean shouldBeEnabled = isEnabled(); if ((item.getEnabled()) != shouldBeEnabled) { item.setEnabled(shouldBeEnabled); } } else if ((widget) instanceof org.eclipse.swt.widgets.ToolItem) { org.eclipse.swt.widgets.ToolItem item = ((org.eclipse.swt.widgets.ToolItem) (widget)); java.lang.String text = label; if (text == null) { if ((command) != null) { try { text = command.getCommand().getName(); } catch (org.eclipse.core.commands.common.NotDefinedException e) { org.eclipse.ui.internal.WorkbenchPlugin.log(("Update item failed " + (getId())), e); } } } if ((icon) != null) { updateIcons(); } else if (text != null) { item.setText(text); } if ((tooltip) != null) item.setToolTipText(tooltip); else { if (text != null) { item.setToolTipText(text); } } if ((item.getSelection()) != (checkedState)) { item.setSelection(checkedState); } boolean shouldBeEnabled = isEnabled(); if ((item.getEnabled()) != shouldBeEnabled) { item.setEnabled(shouldBeEnabled); } } } }
public static java.lang.String getSWTWidgetStyleAsString(org.eclipse.swt.widgets.Widget widget) { if (widget.isDisposed()) { return ""; } return org.eclipse.e4.ui.css.swt.helpers.SWTStyleHelpers.getSWTWidgetStyleAsString(widget.getStyle(), " "); }
public void remove(org.eclipse.core.commands.operations.IUndoableOperation operation) { if (operation == (triggeringOperation)) { triggeringOperation = null; operation.dispose(); history.replaceOperation(this, ((org.eclipse.core.commands.operations.IUndoableOperation[]) (children.toArray(new org.eclipse.core.commands.operations.IUndoableOperation[children.size()])))); } else { children.remove(operation); operation.dispose(); recomputeContexts(); } }
public void createPage() { org.eclipse.ui.IWorkbenchPreferencePage page; try { page = ((org.eclipse.ui.IWorkbenchPreferencePage) (org.eclipse.ui.internal.WorkbenchPlugin.createExtension(configurationElement, org.eclipse.ui.internal.dialogs.WorkbenchPreferenceNode.ATT_CONTRIBUTOR_CLASS))); } catch (org.eclipse.core.runtime.CoreException e) { org.eclipse.jface.dialogs.ErrorDialog.openError(((org.eclipse.swt.widgets.Shell) (null)), org.eclipse.ui.internal.WorkbenchMessages.getString("PreferenceNode.errorTitle"), org.eclipse.ui.internal.WorkbenchMessages.getString("PreferenceNode.errorMessage"), e.getStatus()); page = new org.eclipse.ui.internal.dialogs.EmptyPreferencePage(); } page.init(workbench); if ((getLabelImage()) != null) page.setImageDescriptor(getImageDescriptor()); page.setTitle(getLabelText()); setPage(page); }
private org.eclipse.core.runtime.IStatus saveState(org.eclipse.ui.IMemento memento, org.eclipse.ui.internal.registry.PerspectiveDescriptor p, boolean saveInnerViewState) { org.eclipse.core.runtime.MultiStatus result = new org.eclipse.core.runtime.MultiStatus(org.eclipse.ui.PlatformUI.PLUGIN_ID, org.eclipse.core.runtime.IStatus.OK, WorkbenchMessages.Perspective_problemsSavingPerspective, null); if ((this.memento) != null) { memento.putMemento(this.memento); return result; } memento.putString(IWorkbenchConstants.TAG_VERSION, org.eclipse.ui.internal.Perspective.VERSION_STRING); result.add(p.saveState(memento)); if (!saveInnerViewState) { org.eclipse.swt.graphics.Rectangle bounds = page.getWorkbenchWindow().getShell().getBounds(); org.eclipse.ui.IMemento boundsMem = memento.createChild(IWorkbenchConstants.TAG_WINDOW); boundsMem.putInteger(IWorkbenchConstants.TAG_X, bounds.x); boundsMem.putInteger(IWorkbenchConstants.TAG_Y, bounds.y); boundsMem.putInteger(IWorkbenchConstants.TAG_HEIGHT, bounds.height); boundsMem.putInteger(IWorkbenchConstants.TAG_WIDTH, bounds.width); } java.util.Iterator itr = alwaysOnActionSets.iterator(); while (itr.hasNext()) { org.eclipse.ui.internal.registry.IActionSetDescriptor desc = ((org.eclipse.ui.internal.registry.IActionSetDescriptor) (itr.next())); org.eclipse.ui.IMemento child = memento.createChild(IWorkbenchConstants.TAG_ALWAYS_ON_ACTION_SET); child.putString(IWorkbenchConstants.TAG_ID, desc.getId()); } itr = alwaysOffActionSets.iterator(); while (itr.hasNext()) { org.eclipse.ui.internal.registry.IActionSetDescriptor desc = ((org.eclipse.ui.internal.registry.IActionSetDescriptor) (itr.next())); org.eclipse.ui.IMemento child = memento.createChild(IWorkbenchConstants.TAG_ALWAYS_OFF_ACTION_SET); child.putString(IWorkbenchConstants.TAG_ID, desc.getId()); } itr = showViewShortcuts.iterator(); while (itr.hasNext()) { java.lang.String str = ((java.lang.String) (itr.next())); org.eclipse.ui.IMemento child = memento.createChild(IWorkbenchConstants.TAG_SHOW_VIEW_ACTION); child.putString(IWorkbenchConstants.TAG_ID, str); } itr = showInTimes.keySet().iterator(); while (itr.hasNext()) { java.lang.String id = ((java.lang.String) (itr.next())); java.lang.Long time = ((java.lang.Long) (showInTimes.get(id))); org.eclipse.ui.IMemento child = memento.createChild(IWorkbenchConstants.TAG_SHOW_IN_TIME); child.putString(IWorkbenchConstants.TAG_ID, id); child.putString(IWorkbenchConstants.TAG_TIME, time.toString()); } itr = newWizardShortcuts.iterator(); while (itr.hasNext()) { java.lang.String str = ((java.lang.String) (itr.next())); org.eclipse.ui.IMemento child = memento.createChild(IWorkbenchConstants.TAG_NEW_WIZARD_ACTION); child.putString(IWorkbenchConstants.TAG_ID, str); } itr = perspectiveShortcuts.iterator(); while (itr.hasNext()) { java.lang.String str = ((java.lang.String) (itr.next())); org.eclipse.ui.IMemento child = memento.createChild(IWorkbenchConstants.TAG_PERSPECTIVE_ACTION); child.putString(IWorkbenchConstants.TAG_ID, str); } java.util.List viewPanes = new java.util.ArrayList(5); presentation.collectViewPanes(viewPanes); itr = viewPanes.iterator(); int errors = 0; while (itr.hasNext()) { org.eclipse.ui.internal.ViewPane pane = ((org.eclipse.ui.internal.ViewPane) (itr.next())); org.eclipse.ui.IViewReference ref = pane.getViewReference(); org.eclipse.ui.IMemento viewMemento = memento.createChild(IWorkbenchConstants.TAG_VIEW); viewMemento.putString(IWorkbenchConstants.TAG_ID, org.eclipse.ui.internal.ViewFactory.getKey(ref)); } org.eclipse.jface.preference.IPreferenceStore preferenceStore = org.eclipse.ui.internal.util.PrefUtil.getAPIPreferenceStore(); boolean useNewMinMax = preferenceStore.getBoolean(IWorkbenchPreferenceConstants.ENABLE_NEW_MIN_MAX); if (!useNewMinMax) { if ((fastViews.size()) > 0) { org.eclipse.ui.IMemento childMem = memento.createChild(IWorkbenchConstants.TAG_FAST_VIEWS); itr = fastViews.iterator(); while (itr.hasNext()) { org.eclipse.ui.IViewReference ref = ((org.eclipse.ui.IViewReference) (itr.next())); org.eclipse.ui.IMemento viewMemento = childMem.createChild(IWorkbenchConstants.TAG_VIEW); java.lang.String id = org.eclipse.ui.internal.ViewFactory.getKey(ref); viewMemento.putString(IWorkbenchConstants.TAG_ID, id); float ratio = getFastViewWidthRatio(ref); viewMemento.putFloat(IWorkbenchConstants.TAG_RATIO, ratio); } } } else { org.eclipse.ui.internal.WorkbenchWindow wbw = ((org.eclipse.ui.internal.WorkbenchWindow) (page.getWorkbenchWindow())); org.eclipse.ui.internal.FastViewBar fvb = wbw.getFastViewBar(); if ((fvb != null) && ((fvb.getViewRefs().size()) > 0)) { org.eclipse.ui.IMemento childMem = memento.createChild(IWorkbenchConstants.TAG_FAST_VIEWS); itr = fvb.getViewRefs().iterator(); while (itr.hasNext()) { org.eclipse.ui.IViewReference ref = ((org.eclipse.ui.IViewReference) (itr.next())); org.eclipse.ui.IMemento viewMemento = childMem.createChild(IWorkbenchConstants.TAG_VIEW); java.lang.String id = org.eclipse.ui.internal.ViewFactory.getKey(ref); viewMemento.putString(IWorkbenchConstants.TAG_ID, id); float ratio = getFastViewWidthRatio(ref); viewMemento.putFloat(IWorkbenchConstants.TAG_RATIO, ratio); } } } for (java.util.Iterator i = mapIDtoViewLayoutRec.keySet().iterator(); i.hasNext();) { java.lang.String compoundId = ((java.lang.String) (i.next())); org.eclipse.ui.internal.ViewLayoutRec rec = ((org.eclipse.ui.internal.ViewLayoutRec) (mapIDtoViewLayoutRec.get(compoundId))); if ((rec != null) && (((!(rec.isCloseable)) || (!(rec.isMoveable))) || (rec.isStandalone))) { org.eclipse.ui.IMemento layoutMemento = memento.createChild(IWorkbenchConstants.TAG_VIEW_LAYOUT_REC); layoutMemento.putString(IWorkbenchConstants.TAG_ID, compoundId); if (!(rec.isCloseable)) { layoutMemento.putString(IWorkbenchConstants.TAG_CLOSEABLE, IWorkbenchConstants.FALSE); } if (!(rec.isMoveable)) { layoutMemento.putString(IWorkbenchConstants.TAG_MOVEABLE, IWorkbenchConstants.FALSE); } if (rec.isStandalone) { layoutMemento.putString(IWorkbenchConstants.TAG_STANDALONE, IWorkbenchConstants.TRUE); layoutMemento.putString(IWorkbenchConstants.TAG_SHOW_TITLE, java.lang.String.valueOf(rec.showTitle)); } } } if (errors > 0) { java.lang.String message = WorkbenchMessages.Perspective_multipleErrors; if (errors == 1) { message = WorkbenchMessages.Perspective_oneError; } org.eclipse.jface.dialogs.MessageDialog.openError(null, WorkbenchMessages.Error, message); } org.eclipse.ui.IMemento childMem = memento.createChild(IWorkbenchConstants.TAG_LAYOUT); result.add(presentation.saveState(childMem)); if (isEditorAreaVisible()) { memento.putInteger(IWorkbenchConstants.TAG_AREA_VISIBLE, 1); } else { memento.putInteger(IWorkbenchConstants.TAG_AREA_VISIBLE, 0); } if (fixed) { memento.putInteger(IWorkbenchConstants.TAG_FIXED, 1); } else { memento.putInteger(IWorkbenchConstants.TAG_FIXED, 0); } return result; }
protected void internalRemove(java.lang.Object parent, java.lang.Object[] elements) { org.eclipse.jface.viewers.CustomHashtable toRemove = new org.eclipse.jface.viewers.CustomHashtable(getComparer()); for (int i = 0; i < (elements.length); i++) { toRemove.put(elements[i], elements[i]); } org.eclipse.jface.viewers.CustomHashtable parentItems = new org.eclipse.jface.viewers.CustomHashtable(5); org.eclipse.swt.widgets.Widget[] parentItemArray = findItems(parent); for (int i = 0; i < (parentItemArray.length); i++) { org.eclipse.swt.widgets.Widget parentItem = parentItemArray[i]; if (parentItem instanceof org.eclipse.swt.widgets.Item) { parentItems.put(parentItem, parentItem); } org.eclipse.swt.widgets.Item[] children = getChildren(parentItem); for (int j = 0; j < (children.length); j++) { org.eclipse.swt.widgets.Item child = children[j]; java.lang.Object data = child.getData(); if ((data != null) && (toRemove.containsKey(data))) { disassociate(child); child.dispose(); } } } internalReconcileParentItems(parentItems); }
public void fillContextMenu(org.eclipse.jface.action.IMenuManager menu) { org.eclipse.jface.action.IMenuManager submenu = new org.eclipse.jface.action.MenuManager(org.eclipse.ui.internal.navigator.resources.plugin.WorkbenchNavigatorMessages.NewActionProvider_NewMenu_label, org.eclipse.ui.navigator.ICommonMenuConstants.GROUP_NEW); if (!(contribute)) { return; } submenu.add(newProjectAction); submenu.add(new org.eclipse.jface.action.Separator()); newWizardActionGroup.setContext(getContext()); newWizardActionGroup.fillContextMenu(submenu); submenu.add(new org.eclipse.jface.action.Separator(org.eclipse.ui.navigator.ICommonMenuConstants.GROUP_ADDITIONS)); if (hasExamples()) { submenu.add(new org.eclipse.jface.action.Separator()); submenu.add(newExampleAction); } submenu.add(new org.eclipse.jface.action.Separator()); submenu.add(showDlgAction); menu.insertAfter(ICommonMenuConstants.GROUP_NEW, submenu); }
public void applyChanges() throws org.osgi.service.prefs.BackingStoreException { for (java.util.Iterator i = workingCopies.values().iterator(); i.hasNext();) { org.eclipse.ui.internal.preferences.WorkingCopyPreferences prefs = ((org.eclipse.ui.internal.preferences.WorkingCopyPreferences) (i.next())); if (prefs.nodeExists(org.eclipse.ui.preferences.WorkingCopyManager.EMPTY_STRING)) prefs.flush(); } }
public org.eclipse.ui.Saveable[] getOpenModels() { return ((org.eclipse.ui.Saveable[]) (modelRefCounts.keySet().toArray(new org.eclipse.ui.Saveable[modelRefCounts.size()]))); }
public ActionDescriptor(org.eclipse.core.runtime.IConfigurationElement actionElement, int targetType, java.lang.Object target) { id = actionElement.getAttribute(org.eclipse.ui.internal.ActionDescriptor.ATT_ID); java.lang.String label = actionElement.getAttribute(org.eclipse.ui.internal.ActionDescriptor.ATT_LABEL); java.lang.String defId = actionElement.getAttribute(org.eclipse.ui.internal.ActionDescriptor.ATT_DEFINITION_ID); java.lang.String tooltip = actionElement.getAttribute(org.eclipse.ui.internal.ActionDescriptor.ATT_TOOLTIP); java.lang.String helpContextId = actionElement.getAttribute(org.eclipse.ui.internal.ActionDescriptor.ATT_HELP_CONTEXT_ID); java.lang.String mpath = actionElement.getAttribute(org.eclipse.ui.internal.ActionDescriptor.ATT_MENUBAR_PATH); java.lang.String tpath = actionElement.getAttribute(org.eclipse.ui.internal.ActionDescriptor.ATT_TOOLBAR_PATH); java.lang.String state = actionElement.getAttribute(org.eclipse.ui.internal.ActionDescriptor.ATT_STATE); java.lang.String icon = actionElement.getAttribute(org.eclipse.ui.internal.ActionDescriptor.ATT_ICON); java.lang.String hoverIcon = actionElement.getAttribute(org.eclipse.ui.internal.ActionDescriptor.ATT_HOVERICON); java.lang.String disabledIcon = actionElement.getAttribute(org.eclipse.ui.internal.ActionDescriptor.ATT_DISABLEDICON); java.lang.String description = actionElement.getAttribute(org.eclipse.ui.internal.ActionDescriptor.ATT_DESCRIPTION); java.lang.String accelerator = actionElement.getAttribute(org.eclipse.ui.internal.ActionDescriptor.ATT_ACCELERATOR); if (label == null) { org.eclipse.ui.internal.WorkbenchPlugin.log(("Invalid action declaration (label == null): " + (id))); label = org.eclipse.ui.internal.WorkbenchMessages.getString("ActionDescriptor.invalidLabel"); } definitionId = defId; java.lang.String mgroup = null; java.lang.String tgroup = null; if (mpath != null) { int loc = mpath.lastIndexOf('/'); if (loc != (-1)) { mgroup = mpath.substring((loc + 1)); mpath = mpath.substring(0, loc); } else { mgroup = mpath; mpath = null; } } if ((targetType == (org.eclipse.ui.internal.ActionDescriptor.T_POPUP)) && (mgroup == null)) mgroup = IWorkbenchActionConstants.MB_ADDITIONS; if (tpath != null) { int loc = tpath.lastIndexOf('/'); if (loc != (-1)) { tgroup = tpath.substring((loc + 1)); tpath = tpath.substring(0, loc); } else { tgroup = tpath; tpath = null; } } menuPath = mpath; menuGroup = mgroup; toolbarPath = tpath; toolbarGroup = tgroup; action = createAction(targetType, actionElement, target); if ((action.getText()) == null) action.setText(label); action.setId(id); if (((action.getToolTipText()) == null) && (tooltip != null)) action.setToolTipText(tooltip); if (helpContextId != null) { java.lang.String fullID = helpContextId; if ((helpContextId.indexOf(".")) == (-1)) fullID = ((actionElement.getDeclaringExtension().getDeclaringPluginDescriptor().getUniqueIdentifier()) + ".") + helpContextId; org.eclipse.ui.help.WorkbenchHelp.setHelp(action, fullID); } if (description != null) action.setDescription(description); if (state != null) { action.setChecked(state.equals("true")); } if (icon != null) { action.setImageDescriptor(org.eclipse.ui.internal.WorkbenchImages.getImageDescriptorFromExtension(actionElement.getDeclaringExtension(), icon)); } if (hoverIcon != null) { action.setHoverImageDescriptor(org.eclipse.ui.internal.WorkbenchImages.getImageDescriptorFromExtension(actionElement.getDeclaringExtension(), hoverIcon)); } if (disabledIcon != null) { action.setDisabledImageDescriptor(org.eclipse.ui.internal.WorkbenchImages.getImageDescriptorFromExtension(actionElement.getDeclaringExtension(), disabledIcon)); } if (accelerator != null) processAccelerator(action, accelerator); }
public void handle(org.eclipse.ui.statushandlers.StatusAdapter statusAdapter, int style) { try { if (!(org.eclipse.ui.PlatformUI.isWorkbenchRunning())) { if (style != (org.eclipse.ui.statushandlers.StatusManager.NONE)) { logError(statusAdapter.getStatus()); } return; } if ((org.eclipse.ui.internal.statushandlers.StatusHandlerRegistry.getDefault().getDefaultHandlerDescriptor()) != null) { try { org.eclipse.ui.internal.statushandlers.StatusHandlerRegistry.getDefault().getDefaultHandlerDescriptor().getStatusHandler().handle(statusAdapter, style); if ((((style & (org.eclipse.ui.statushandlers.StatusManager.SHOW)) == (org.eclipse.ui.statushandlers.StatusManager.SHOW)) || ((style & (org.eclipse.ui.statushandlers.StatusManager.BLOCK)) == (org.eclipse.ui.statushandlers.StatusManager.BLOCK))) && ((statusAdapter.getProperty(IProgressConstants.NO_IMMEDIATE_ERROR_PROMPT_PROPERTY)) != (java.lang.Boolean.TRUE))) { org.eclipse.ui.internal.progress.FinishedJobs.getInstance().removeErrorJobs(); } return; } catch (org.eclipse.core.runtime.CoreException ex) { logError("Errors during the default handler creating", ex); } } getWorkbenchHandler().handle(statusAdapter, style); if ((((style & (org.eclipse.ui.statushandlers.StatusManager.SHOW)) == (org.eclipse.ui.statushandlers.StatusManager.SHOW)) || ((style & (org.eclipse.ui.statushandlers.StatusManager.BLOCK)) == (org.eclipse.ui.statushandlers.StatusManager.BLOCK))) && ((statusAdapter.getProperty(IProgressConstants.NO_IMMEDIATE_ERROR_PROMPT_PROPERTY)) != (java.lang.Boolean.TRUE))) { org.eclipse.ui.internal.progress.FinishedJobs.getInstance().removeErrorJobs(); } } catch (java.lang.Throwable ex) { logError("Errors during status handling", ex); } }
private java.lang.Object[] getLimitedChildren(java.lang.Object[] children) { boolean limitsEnabled = markersView.getGenerator().isMarkerLimitsEnabled(); int limits = markersView.getGenerator().getMarkerLimits(); if (((!limitsEnabled) || (limits <= 0)) || (limits > (children.length))) return children; java.lang.Object[] newChildren = new java.lang.Object[limits]; java.lang.System.arraycopy(children, 0, newChildren, 0, limits); return newChildren; }
private static boolean confirmPerspectiveSwitch(org.eclipse.ui.IWorkbenchWindow window, org.eclipse.ui.IPerspectiveDescriptor finalPersp) { org.eclipse.jface.preference.IPreferenceStore store = org.eclipse.ui.internal.ide.IDEWorkbenchPlugin.getDefault().getPreferenceStore(); java.lang.String pspm = store.getString(IDEInternalPreferences.PROJECT_SWITCH_PERSP_MODE); if (!(IDEInternalPreferences.PSPM_PROMPT.equals(pspm))) { return IDEInternalPreferences.PSPM_ALWAYS.equals(pspm); } org.eclipse.ui.internal.ide.dialogs.MessageDialogWithToggle dialog = org.eclipse.ui.internal.ide.dialogs.MessageDialogWithToggle.openQuestion(window.getShell(), org.eclipse.ui.wizards.newresource.ResourceMessages.getString("NewProject.perspSwitchTitle"), org.eclipse.ui.wizards.newresource.ResourceMessages.format("NewProject.perspSwitchMessage", new java.lang.Object[]{ finalPersp.getLabel() }), null, false); int result = dialog.getReturnCode(); if ((result >= 0) && (dialog.getToggleState())) { if (result == 0) { store.setValue(IDEInternalPreferences.PROJECT_SWITCH_PERSP_MODE, IDEInternalPreferences.PSPM_ALWAYS); } else { store.setValue(IDEInternalPreferences.PROJECT_SWITCH_PERSP_MODE, IDEInternalPreferences.PSPM_NEVER); org.eclipse.ui.internal.ide.IDEWorkbenchPlugin.getDefault().getPreferenceStore().setValue(IDE.Preferences.PROJECT_OPEN_NEW_PERSPECTIVE, IWorkbenchPreferenceConstants.NO_NEW_PERSPECTIVE); } } return result == 0; }
public void hide() { if (org.eclipse.jface.text.contentassist.Helper.okToUse(fProposalShell)) { fContentAssistant.removeContentAssistListener(this, ContentAssistant.PROPOSAL_SELECTOR); fPopupCloser.uninstall(); fProposalShell.setVisible(false); fProposalShell.dispose(); fProposalShell = null; } fFilteredProposals = null; }
public void setStandby(final boolean standby) { final org.eclipse.swt.widgets.Control control = ((org.eclipse.swt.widgets.Control) (((org.eclipse.ui.internal.PartSite) (getSite())).getModel().getWidget())); org.eclipse.swt.custom.BusyIndicator.showWhile(control.getDisplay(), new java.lang.Runnable() { public void run() { try { control.setRedraw(false); introPart.standbyStateChanged(standby); } finally { control.setRedraw(true); } setBarVisibility(standby); } }); }
void doPendingWork() { org.eclipse.ui.internal.Semaphore work; while ((work = pendingWork.remove()) != null) { try { currentWork = work; java.lang.Runnable runnable = work.getRunnable(); if (runnable != null) runnable.run(); } finally { currentWork = null; work.release(); } } }
void drawTabBody(org.eclipse.swt.graphics.GC gc, org.eclipse.swt.graphics.Rectangle bounds, int state) { int[] points = new int[1024]; int index = 0; int radius = (cornerSize) / 2; int marginWidth = parent.marginWidth; int marginHeight = parent.marginHeight; int delta = (((org.eclipse.e4.ui.workbench.renderers.swt.CTabRendering.INNER_KEYLINE) + (org.eclipse.e4.ui.workbench.renderers.swt.CTabRendering.OUTER_KEYLINE)) + (2 * (shadowEnabled ? org.eclipse.e4.ui.workbench.renderers.swt.CTabRendering.SIDE_DROP_WIDTH : 0))) + (2 * marginWidth); int width = (bounds.width) - delta; int height = java.lang.Math.max(((((parent.getTabHeight()) + (org.eclipse.e4.ui.workbench.renderers.swt.CTabRendering.INNER_KEYLINE)) + (org.eclipse.e4.ui.workbench.renderers.swt.CTabRendering.OUTER_KEYLINE)) + (shadowEnabled ? org.eclipse.e4.ui.workbench.renderers.swt.CTabRendering.BOTTOM_DROP_WIDTH : 0)), (((((bounds.height) - (org.eclipse.e4.ui.workbench.renderers.swt.CTabRendering.INNER_KEYLINE)) - (org.eclipse.e4.ui.workbench.renderers.swt.CTabRendering.OUTER_KEYLINE)) - (2 * marginHeight)) - (shadowEnabled ? org.eclipse.e4.ui.workbench.renderers.swt.CTabRendering.BOTTOM_DROP_WIDTH : 0))); int circX = ((bounds.x) + (delta / 2)) + radius; int circY = (bounds.y) + radius; index = 0; int[] ltt = org.eclipse.e4.ui.workbench.renderers.swt.CTabRendering.drawCircle(circX, circY, radius, org.eclipse.e4.ui.workbench.renderers.swt.CTabRendering.LEFT_TOP); java.lang.System.arraycopy(ltt, 0, points, index, ltt.length); index += ltt.length; int[] lbb = org.eclipse.e4.ui.workbench.renderers.swt.CTabRendering.drawCircle(circX, ((circY + height) - (radius * 2)), radius, org.eclipse.e4.ui.workbench.renderers.swt.CTabRendering.LEFT_BOTTOM); java.lang.System.arraycopy(lbb, 0, points, index, lbb.length); index += lbb.length; int[] rb = org.eclipse.e4.ui.workbench.renderers.swt.CTabRendering.drawCircle(((circX + width) - (radius * 2)), ((circY + height) - (radius * 2)), radius, org.eclipse.e4.ui.workbench.renderers.swt.CTabRendering.RIGHT_BOTTOM); java.lang.System.arraycopy(rb, 0, points, index, rb.length); index += rb.length; int[] rt = org.eclipse.e4.ui.workbench.renderers.swt.CTabRendering.drawCircle(((circX + width) - (radius * 2)), circY, radius, org.eclipse.e4.ui.workbench.renderers.swt.CTabRendering.RIGHT_TOP); java.lang.System.arraycopy(rt, 0, points, index, rt.length); index += rt.length; points[(index++)] = circX; points[(index++)] = circY - radius; int[] tempPoints = new int[index]; java.lang.System.arraycopy(points, 0, tempPoints, 0, index); org.eclipse.e4.ui.workbench.renderers.swt.CTabRendering.shape = tempPoints; gc.fillPolygon(org.eclipse.e4.ui.workbench.renderers.swt.CTabRendering.shape); org.eclipse.swt.graphics.Region r = new org.eclipse.swt.graphics.Region(); r.add(bounds); r.subtract(org.eclipse.e4.ui.workbench.renderers.swt.CTabRendering.shape); gc.setBackground(parent.getParent().getBackground()); org.eclipse.swt.widgets.Display display = parent.getDisplay(); org.eclipse.swt.graphics.Region clipping = new org.eclipse.swt.graphics.Region(); gc.getClipping(clipping); r.intersect(clipping); gc.setClipping(r); org.eclipse.swt.graphics.Rectangle mappedBounds = display.map(parent, parent.getParent(), bounds); parent.getParent().drawBackground(gc, bounds.x, bounds.y, bounds.width, bounds.height, mappedBounds.x, mappedBounds.y); if (shadowEnabled) drawShadow(display, bounds, gc); gc.setClipping(clipping); clipping.dispose(); r.dispose(); }
@java.lang.Override public java.lang.Object createWidget(final org.eclipse.e4.ui.model.application.ui.MUIElement element, java.lang.Object parent) { if ((!(element instanceof org.eclipse.e4.ui.model.application.ui.menu.MToolBar)) || (!(parent instanceof org.eclipse.swt.widgets.Composite))) return null; final org.eclipse.e4.ui.model.application.ui.menu.MToolBar toolbarModel = ((org.eclipse.e4.ui.model.application.ui.menu.MToolBar) (element)); org.eclipse.swt.widgets.Composite intermediate = createIntermediate(toolbarModel, ((org.eclipse.swt.widgets.Composite) (parent))); createToolbar(toolbarModel, intermediate); bindWidget(element, intermediate); processContribution(toolbarModel); org.eclipse.e4.ui.model.application.ui.MUIElement parentElement = element.getParent(); if (parentElement instanceof org.eclipse.e4.ui.model.application.ui.basic.MTrimBar) { element.getTags().add("Draggable"); setCSSInfo(element, intermediate); boolean vertical = false; org.eclipse.e4.ui.model.application.ui.basic.MTrimBar bar = ((org.eclipse.e4.ui.model.application.ui.basic.MTrimBar) (parentElement)); vertical = ((bar.getSide()) == (org.eclipse.e4.ui.model.application.ui.SideValue.LEFT)) || ((bar.getSide()) == (org.eclipse.e4.ui.model.application.ui.SideValue.RIGHT)); org.eclipse.e4.core.contexts.IEclipseContext parentContext = getContextForParent(element); org.eclipse.e4.ui.internal.workbench.swt.CSSRenderingUtils cssUtils = parentContext.get(org.eclipse.e4.ui.internal.workbench.swt.CSSRenderingUtils.class); if (cssUtils != null) { intermediate = ((org.eclipse.swt.widgets.Composite) (cssUtils.frameMeIfPossible(intermediate, null, vertical, true))); } } return intermediate; }
protected org.eclipse.swt.widgets.Control createDialogArea(org.eclipse.swt.widgets.Composite parent) { org.eclipse.swt.widgets.Composite top = ((org.eclipse.swt.widgets.Composite) (super.createDialogArea(parent))); org.eclipse.swt.widgets.Composite editArea = new org.eclipse.swt.widgets.Composite(top, org.eclipse.swt.SWT.NONE); editArea.setLayout(new org.eclipse.swt.layout.GridLayout()); editArea.setLayoutData(new org.eclipse.swt.layout.GridData((((org.eclipse.swt.layout.GridData.FILL_BOTH) | (org.eclipse.swt.layout.GridData.GRAB_HORIZONTAL)) | (org.eclipse.swt.layout.GridData.GRAB_VERTICAL)))); org.eclipse.swt.widgets.Label note = new org.eclipse.swt.widgets.Label(editArea, org.eclipse.swt.SWT.NONE); note.setText(org.eclipse.ui.internal.progress.ProgressMessages.getString("JobsViewPreferenceDialog.Note")); verboseEditor = new org.eclipse.jface.preference.BooleanFieldEditor("verbose", org.eclipse.ui.internal.progress.ProgressMessages.getString("ProgressView.VerboseAction"), editArea); verboseEditor.setPreferenceName(IWorkbenchPreferenceConstants.SHOW_SYSTEM_JOBS); verboseEditor.setPreferenceStore(org.eclipse.ui.internal.util.PrefUtil.getAPIPreferenceStore()); verboseEditor.load(); return top; }
public void propertyChanged(java.lang.Object source, int propId) { if ((handleZoomEvents) && ((ref.getPane().getContainer()) instanceof org.eclipse.ui.internal.ViewStack)) { org.eclipse.ui.internal.ViewStack vs = ((org.eclipse.ui.internal.ViewStack) (ref.getPane().getContainer())); if (propId == (WorkbenchPartReference.INTERNAL_PROPERTY_ZOOMED)) { setStandby(((vs.getState()) == (org.eclipse.ui.presentations.IStackPresentationSite.STATE_MAXIMIZED))); } else if (propId == (WorkbenchPartReference.INTERNAL_PROPERTY_MAXIMIZED)) { setStandby(((vs.getState()) != (org.eclipse.ui.presentations.IStackPresentationSite.STATE_MAXIMIZED))); } } }
private void createFieldArea(final org.eclipse.ui.forms.widgets.FormToolkit toolkit, final org.eclipse.ui.forms.widgets.ScrolledForm form, final org.eclipse.ui.internal.provisional.views.markers.api.FilterConfigurationArea area, boolean expand) { final org.eclipse.ui.forms.widgets.ExpandableComposite expandable = toolkit.createExpandableComposite(form.getBody(), ExpandableComposite.TWISTIE); expandable.setText(area.getTitle()); expandable.setBackground(form.getBackground()); expandable.setLayout(new org.eclipse.swt.layout.GridLayout()); expandable.setLayoutData(new org.eclipse.swt.layout.GridData(org.eclipse.swt.SWT.FILL, org.eclipse.swt.SWT.FILL, true, true)); expandable.addExpansionListener(new org.eclipse.ui.forms.events.IExpansionListener() { public void expansionStateChanged(org.eclipse.ui.forms.events.ExpansionEvent e) { expandable.getParent().layout(true); } public void expansionStateChanging(org.eclipse.ui.forms.events.ExpansionEvent e) { } }); org.eclipse.swt.widgets.Composite sectionClient = toolkit.createComposite(expandable); sectionClient.setLayout(new org.eclipse.swt.layout.GridLayout()); sectionClient.setLayoutData(new org.eclipse.swt.layout.GridData(org.eclipse.swt.SWT.FILL, org.eclipse.swt.SWT.FILL, true, true)); sectionClient.setBackground(form.getBackground()); area.createContents(sectionClient); expandable.setClient(sectionClient); expandable.setExpanded(expand); }
public void loadDefault() { if ((choiceCombo) != null) { updateState(true); } }
protected void updateTreeFont(org.eclipse.swt.graphics.Font dialogFont) { applyDialogFont(filteredTree, dialogFont); filteredTree.layout(true); }
void createColumns() { org.eclipse.swt.events.SelectionListener headerListener = new org.eclipse.swt.events.SelectionAdapter() { public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { int column = table.indexOf(((org.eclipse.swt.widgets.TableColumn) (e.widget))); if (column == (sorter.getTopPriority())) sorter.reverseTopPriority(); else { sorter.setTopPriority(column); } updateSortingState(); viewer.refresh(); org.eclipse.jface.dialogs.IDialogSettings workbenchSettings = org.eclipse.ui.views.tasklist.TaskList.getPlugin().getDialogSettings(); org.eclipse.jface.dialogs.IDialogSettings settings = workbenchSettings.getSection(org.eclipse.ui.views.tasklist.TaskList.TAG_SORT_SECTION); if (settings == null) settings = workbenchSettings.addNewSection(org.eclipse.ui.views.tasklist.TaskList.TAG_SORT_SECTION); sorter.saveState(settings); } }; if ((memento) != null) { org.eclipse.ui.IMemento[] children = memento.getChildren(org.eclipse.ui.views.tasklist.TaskList.TAG_COLUMN); if (children != null) { for (int i = 0; i < (children.length); i++) { java.lang.Integer val = children[i].getInteger(org.eclipse.ui.views.tasklist.TaskList.TAG_NUMBER); if (val != null) { int index = val.intValue(); val = children[i].getInteger(org.eclipse.ui.views.tasklist.TaskList.TAG_WIDTH); if (val != null) { columnLayouts[index] = new org.eclipse.jface.viewers.ColumnPixelData(val.intValue(), true); } } } } } boolean text = "carbon".equals(org.eclipse.swt.SWT.getPlatform()); org.eclipse.jface.viewers.TableLayout layout = new org.eclipse.jface.viewers.TableLayout(); table.setLayout(layout); table.setHeaderVisible(true); for (int i = 0; i < (columnHeaders.length); i++) { org.eclipse.swt.widgets.TableColumn tc = new org.eclipse.swt.widgets.TableColumn(table, org.eclipse.swt.SWT.NONE, i); if ((!text) && (i == 1)) tc.setImage(org.eclipse.ui.views.tasklist.MarkerUtil.getImage("header_complete")); else if ((!text) && (i == 2)) tc.setImage(org.eclipse.ui.views.tasklist.MarkerUtil.getImage("header_priority")); else tc.setText(columnHeaders[i]); if (text && ((i == 1) || (i == 2))) { tc.pack(); columnLayouts[i] = new org.eclipse.jface.viewers.ColumnPixelData(java.lang.Math.max(19, tc.getWidth()), false); } tc.setResizable(columnLayouts[i].resizable); layout.addColumnData(columnLayouts[i]); tc.addSelectionListener(headerListener); } }
public void selectionChanged(org.eclipse.jface.viewers.SelectionChangedEvent event) { java.lang.Object selected = ((org.eclipse.jface.viewers.StructuredSelection) (event.getSelection())).getFirstElement(); if ((eventBroker) != null) eventBroker.post(org.eclipse.e4.demo.e4photo.ExifTable.EVENT_NAME, selected); }
public boolean activateKeyBindingService(org.eclipse.ui.IWorkbenchSite nestedSite) { if (disposed) { return false; } if (nestedSite == null) { if ((activeService) == null) { return false; } else { deactivateNestedService(); return true; } } final org.eclipse.ui.IKeyBindingService service = ((org.eclipse.ui.IKeyBindingService) (nestedServices.get(nestedSite))); if (service == null) { return false; } if (service == (activeService)) { return false; } deactivateNestedService(); activateNestedService(service); return true; }
public void adjustTR(org.eclipse.e4.ui.widgets.CTabFolder ctf, org.eclipse.e4.ui.model.application.ui.basic.MPart part) { clearTR(ctf); if (part == null) return; if (((part.getToolbar()) != null) && (part.getToolbar().isToBeRendered())) { part.getToolbar().setVisible(true); renderer.createGui(part.getToolbar(), getTRComposite(ctf), part.getContext()); } setupMenuButton(part, ctf); org.eclipse.swt.widgets.Composite trComp = getTRComposite(ctf); if ((trComp.getChildren().length) > 0) { trComp.setVisible(true); ctf.setTopRight(trComp, ((org.eclipse.swt.SWT.RIGHT) | (org.eclipse.swt.SWT.WRAP))); } else { ctf.setTopRight(null); trComp.setVisible(false); } trComp.layout(); ctf.layout(); }
private void filterKeySequenceBindings(org.eclipse.swt.widgets.Event event) { if (((event.keyCode) & (org.eclipse.swt.SWT.MODIFIER_MASK)) != 0) return; boolean dialogOnly = false; if ((event.widget) instanceof org.eclipse.swt.widgets.Control) { org.eclipse.swt.widgets.Shell shell = ((org.eclipse.swt.widgets.Control) (event.widget)).getShell(); java.lang.Boolean dialog = ((java.lang.Boolean) (managedShells.get(shell))); if (dialog == null) { if ((shell != null) && ((shell.getParent()) != null)) { dialogOnly = true; } else { return; } } else if (dialog.booleanValue()) { dialogOnly = true; } else { } } java.util.List keyStrokes = org.eclipse.ui.internal.keys.WorkbenchKeyboard.generatePossibleKeyStrokes(event); if (org.eclipse.ui.internal.keys.WorkbenchKeyboard.isOutOfOrderKey(keyStrokes)) { if ((event.type) == (org.eclipse.swt.SWT.KeyDown)) { org.eclipse.swt.widgets.Widget widget = event.widget; if (widget instanceof org.eclipse.swt.custom.StyledText) { ((org.eclipse.swt.custom.StyledText) (widget)).addVerifyKeyListener(new org.eclipse.ui.internal.keys.OutOfOrderVerifyListener(new org.eclipse.ui.internal.keys.OutOfOrderListener(this, dialogOnly))); } else { widget.addListener(SWT.KeyDown, new org.eclipse.ui.internal.keys.OutOfOrderListener(this, dialogOnly)); } } } else { processKeyEvent(keyStrokes, event, dialogOnly); } }
public org.eclipse.jface.action.IContributionItem remove(org.eclipse.jface.action.IContributionItem item) { final java.util.List<org.eclipse.e4.ui.model.application.ui.basic.MTrimElement> children = trimBar.getChildren(); for (int i = 0; i < (children.size()); i++) { final org.eclipse.e4.ui.model.application.ui.basic.MTrimElement child = children.get(i); final java.lang.Object obj = child.getTransientData().get(org.eclipse.ui.internal.CoolBarToTrimManager.OBJECT); if ((obj != null) && (obj.equals(item))) { if (child instanceof org.eclipse.e4.ui.model.application.ui.menu.MToolBarElement) { renderer.clearModelToContribution(((org.eclipse.e4.ui.model.application.ui.menu.MToolBarElement) (child)), item); } if ((child instanceof org.eclipse.e4.ui.model.application.ui.menu.MToolBar) && (item instanceof org.eclipse.jface.internal.provisional.action.IToolBarContributionItem)) { org.eclipse.jface.action.IToolBarManager parent = ((org.eclipse.jface.internal.provisional.action.IToolBarContributionItem) (item)).getToolBarManager(); if (parent instanceof org.eclipse.jface.action.ToolBarManager) { renderer.clearModelToManager(((org.eclipse.e4.ui.model.application.ui.menu.MToolBar) (child)), ((org.eclipse.jface.action.ToolBarManager) (parent))); } } children.remove(i); return ((org.eclipse.jface.action.IContributionItem) (obj)); } if (((item.getId()) != null) && (item.getId().equals(child.getElementId()))) { new java.lang.Exception(((("CBTTM:remove(IContributionItem item) " + item) + "\n\t") + child)).printStackTrace(); } } return null; }
private void safeRemoveGui(org.eclipse.e4.ui.model.application.ui.MUIElement element) { if ((removeRoot) == null) removeRoot = element; renderedElements.remove(element); org.eclipse.e4.ui.model.application.ui.MUIElement parent = element.getParent(); org.eclipse.e4.ui.internal.workbench.swt.AbstractPartRenderer parentRenderer = (parent != null) ? getRendererFor(parent) : null; if (parentRenderer != null) { parentRenderer.hideChild(element.getParent(), element); } org.eclipse.e4.ui.internal.workbench.swt.AbstractPartRenderer renderer = getRendererFor(element); if (renderer != null) { if (element instanceof org.eclipse.e4.ui.model.application.ui.MElementContainer<?>) { org.eclipse.e4.ui.model.application.ui.MElementContainer<org.eclipse.e4.ui.model.application.ui.MUIElement> container = ((org.eclipse.e4.ui.model.application.ui.MElementContainer<org.eclipse.e4.ui.model.application.ui.MUIElement>) (element)); org.eclipse.e4.ui.model.application.ui.MUIElement selectedElement = container.getSelectedElement(); java.util.List<org.eclipse.e4.ui.model.application.ui.MUIElement> children = container.getChildren(); for (org.eclipse.e4.ui.model.application.ui.MUIElement child : children) { if (child != selectedElement) { removeGui(child); } } if ((selectedElement != null) && (children.contains(selectedElement))) { removeGui(selectedElement); } } if (element instanceof org.eclipse.e4.ui.model.application.ui.advanced.MPerspective) { org.eclipse.e4.ui.model.application.ui.advanced.MPerspective perspective = ((org.eclipse.e4.ui.model.application.ui.advanced.MPerspective) (element)); for (org.eclipse.e4.ui.model.application.ui.basic.MWindow subWindow : perspective.getWindows()) { removeGui(subWindow); } } else if (element instanceof org.eclipse.e4.ui.model.application.ui.basic.MWindow) { org.eclipse.e4.ui.model.application.ui.basic.MWindow window = ((org.eclipse.e4.ui.model.application.ui.basic.MWindow) (element)); for (org.eclipse.e4.ui.model.application.ui.basic.MWindow subWindow : window.getWindows()) { removeGui(subWindow); } if (window instanceof org.eclipse.e4.ui.model.application.ui.basic.MTrimmedWindow) { org.eclipse.e4.ui.model.application.ui.basic.MTrimmedWindow trimmedWindow = ((org.eclipse.e4.ui.model.application.ui.basic.MTrimmedWindow) (window)); for (org.eclipse.e4.ui.model.application.ui.MUIElement trimBar : trimmedWindow.getTrimBars()) { removeGui(trimBar); } } } renderer.disposeWidget(element); if (element instanceof org.eclipse.e4.ui.model.application.MContribution) { org.eclipse.e4.ui.model.application.MContribution contribution = ((org.eclipse.e4.ui.model.application.MContribution) (element)); java.lang.Object client = contribution.getObject(); org.eclipse.e4.core.contexts.IEclipseContext parentContext = renderer.getContext(element); if ((parentContext != null) && (client != null)) { try { org.eclipse.e4.core.contexts.ContextInjectionFactory.uninject(client, parentContext); } catch (java.lang.Exception e) { if ((logger) != null) { logger.error(e); } } } contribution.setObject(null); } if (element instanceof org.eclipse.e4.ui.model.application.ui.MContext) { clearContext(((org.eclipse.e4.ui.model.application.ui.MContext) (element))); } } if ((removeRoot) == element) removeRoot = null; }
private void addRestoreSizeMouseListeners() { org.eclipse.swt.widgets.Control dialogContents = getContents(); if ((buttonBar) != null) { addRestoreSizeMouseListenerToComposites(buttonBar); org.eclipse.swt.widgets.Control control = buttonBar.getParent(); while ((control != dialogContents) && (control != null)) { control.addMouseListener(restoreSizeMouseListener); control = control.getParent(); } } if (dialogContents != null) { dialogContents.addMouseListener(restoreSizeMouseListener); } }
public org.eclipse.core.runtime.IStatus runInUIThread(org.eclipse.core.runtime.IProgressMonitor monitor) { while (true) { org.eclipse.swt.widgets.Control page = getControl(); if ((page == null) || (page.isDisposed())) return org.eclipse.core.runtime.Status.OK_STATUS; org.eclipse.ui.internal.about.AboutBundleData[] data = null; synchronized(updateQueue) { if (updateQueue.isEmpty()) return org.eclipse.core.runtime.Status.OK_STATUS; data = ((org.eclipse.ui.internal.about.AboutBundleData[]) (updateQueue.toArray(new org.eclipse.ui.internal.about.AboutBundleData[updateQueue.size()]))); updateQueue.clear(); } fireLabelProviderChanged(new org.eclipse.jface.viewers.LabelProviderChangedEvent(this, data)); } }
public void addToModel(java.util.ArrayList<org.eclipse.e4.ui.model.application.ui.menu.MMenuContribution> menuContributions, java.util.ArrayList<org.eclipse.e4.ui.model.application.ui.menu.MToolBarContribution> toolBarContributions, java.util.ArrayList<org.eclipse.e4.ui.model.application.ui.menu.MTrimContribution> trimContributions) { java.lang.String idContrib = org.eclipse.ui.internal.menus.MenuHelper.getId(configElement); visibleWhen = createExpression(configElement); org.eclipse.e4.ui.services.EContextService contextService = application.getContext().get(org.eclipse.e4.ui.services.EContextService.class); org.eclipse.core.commands.contexts.Context actionSetContext = contextService.getContext(idContrib); if (!(actionSetContext.isDefined())) { actionSetContext.define(org.eclipse.ui.internal.menus.MenuHelper.getLabel(configElement), org.eclipse.ui.internal.menus.MenuHelper.getDescription(configElement), "org.eclipse.ui.contexts.actionSet"); } org.eclipse.core.runtime.IConfigurationElement[] menus = configElement.getChildren(IWorkbenchRegistryConstants.TAG_MENU); if ((menus.length) > 0) { for (int i = menus.length; i > 0; i--) { org.eclipse.core.runtime.IConfigurationElement element = menus[(i - 1)]; addContribution(idContrib, menuContributions, element, true, org.eclipse.ui.internal.menus.ActionSet.MAIN_MENU); } } org.eclipse.core.runtime.IConfigurationElement[] actions = configElement.getChildren(IWorkbenchRegistryConstants.TAG_ACTION); if ((actions.length) > 0) { for (int i = actions.length; i > 0; i--) { org.eclipse.core.runtime.IConfigurationElement element = actions[(i - 1)]; addContribution(idContrib, menuContributions, element, false, org.eclipse.ui.internal.menus.ActionSet.MAIN_MENU); addToolBarContribution(idContrib, toolBarContributions, trimContributions, element, org.eclipse.ui.internal.menus.ActionSet.MAIN_TOOLBAR); } } }
public org.eclipse.ui.contexts.IContextActivation activateContext(java.lang.String contextId, org.eclipse.core.expressions.Expression expression, boolean global) { if (global) { org.eclipse.ui.contexts.IContextActivation activation = fParentService.activateContext(contextId, expression, global); fParentActivations.add(activation); return activation; } org.eclipse.ui.internal.expressions.AndExpression andExpression = null; if (expression instanceof org.eclipse.ui.internal.expressions.AndExpression) { andExpression = ((org.eclipse.ui.internal.expressions.AndExpression) (expression)); } else { andExpression = new org.eclipse.ui.internal.expressions.AndExpression(); if (expression != null) { andExpression.add(expression); } } if ((fDefaultExpression) != null) { andExpression.add(fDefaultExpression); } org.eclipse.ui.internal.contexts.ContextActivation activation = new org.eclipse.ui.internal.contexts.ContextActivation(contextId, andExpression, this); return doActivateContext(activation); }
public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { if (((this.cellEditor) == null) || (!(this.cellEditor.isActivated()))) { updateStatusLine(e.item); } }
public Workbench(org.eclipse.osgi.service.datalocation.Location instanceLocation, org.eclipse.core.runtime.IExtensionRegistry registry, org.osgi.service.packageadmin.PackageAdmin packageAdmin, org.eclipse.e4.core.services.context.IEclipseContext applicationContext, org.eclipse.e4.workbench.ui.IWorkbenchWindowHandler windowHandler) { this.windowHandler = windowHandler; exceptionHandler = new org.eclipse.e4.workbench.ui.internal.ExceptionHandler(); this.registry = registry; try { workbenchData = new java.io.File(instanceLocation.getURL().toURI()); } catch (java.net.URISyntaxException e) { throw new java.lang.RuntimeException(e); } workbenchData = new java.io.File(workbenchData, ".metadata"); workbenchData = new java.io.File(workbenchData, ".plugins"); workbenchData = new java.io.File(workbenchData, "org.eclipse.e4.workbench"); workbenchData = new java.io.File(workbenchData, "workbench.xmi"); contributionFactory = new org.eclipse.e4.workbench.ui.internal.ReflectionContributionFactory(registry); resourceSet = new org.eclipse.emf.ecore.resource.impl.ResourceSetImpl(); resourceSet.getResourceFactoryRegistry().getExtensionToFactoryMap().put(Resource.Factory.Registry.DEFAULT_EXTENSION, new org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl()); resourceSet.getPackageRegistry().put(WorkbenchPackage.eNS_URI, WorkbenchPackage.eINSTANCE); workbenchContext = org.eclipse.e4.workbench.ui.internal.Workbench.createWorkbenchContext(applicationContext, registry, exceptionHandler, contributionFactory); workbenchContext.set(org.eclipse.e4.workbench.ui.internal.Workbench.class.getName(), this); workbenchContext.set(org.eclipse.e4.workbench.ui.IWorkbench.class.getName(), this); }
public void updateActionBars() { getStatusLineManager().update(false); getMenuManager().update(false); if ((toolbarManager) != null) { if ((toolbarManager) instanceof org.eclipse.jface.action.ToolBarManager) { org.eclipse.jface.action.ToolBarManager tbm = ((org.eclipse.jface.action.ToolBarManager) (toolbarManager)); org.eclipse.swt.widgets.Control tbCtrl = tbm.getControl(); if ((tbCtrl == null) || (tbCtrl.isDisposed())) { if ((part.getContext()) != null) { } } else { tbm.update(true); if (!(tbCtrl.isDisposed())) { org.eclipse.swt.widgets.Control packParent = getPackParent(tbCtrl); packParent.pack(); if ((packParent.getParent()) instanceof org.eclipse.e4.ui.widgets.CTabFolder) packParent.getParent().layout(true); } } } else { toolbarManager.update(false); } } super.updateActionBars(); }
protected void onActivate() { if ((editorArea.getControl()) != null) { boolean visible = isEditorAreaVisible(); boolean inTrim = (editorAreaState) == (org.eclipse.ui.presentations.IStackPresentationSite.STATE_MINIMIZED); boolean introMaxed = getPresentation().getLayout().childObscuredByZoom(editorArea); editorArea.setVisible(((visible && (!inTrim)) && (!introMaxed))); } if ((fastViewManager) != null) { java.util.List fastViews = fastViewManager.getFastViews(null); for (int i = 0; i < (fastViews.size()); i++) { org.eclipse.ui.internal.ViewPane pane = getPane(((org.eclipse.ui.IViewReference) (fastViews.get(i)))); if (pane != null) { org.eclipse.swt.widgets.Control ctrl = pane.getControl(); if (ctrl == null) { pane.createControl(getClientComposite()); ctrl = pane.getControl(); } ctrl.setEnabled(false); } } } setAllPinsVisible(true); boolean useNewMinMax = org.eclipse.ui.internal.Perspective.useNewMinMax(this); boolean hideEditorArea = (shouldHideEditorsOnActivate) || ((editorHidden) && ((editorHolder) == null)); if (useNewMinMax && (!hideEditorArea)) { refreshEditorAreaVisibility(); } presentation.activate(getClientComposite()); if (useNewMinMax) { fastViewManager.activate(); if ((layout) != null) { org.eclipse.jface.preference.IPreferenceStore preferenceStore = org.eclipse.ui.internal.util.PrefUtil.getAPIPreferenceStore(); boolean useAnimations = preferenceStore.getBoolean(IWorkbenchPreferenceConstants.ENABLE_ANIMATIONS); preferenceStore.setValue(IWorkbenchPreferenceConstants.ENABLE_ANIMATIONS, false); java.util.List minStacks = layout.getMinimizedStacks(); for (java.util.Iterator msIter = minStacks.iterator(); msIter.hasNext();) { org.eclipse.ui.internal.ViewStack vs = ((org.eclipse.ui.internal.ViewStack) (msIter.next())); vs.setMinimized(true); } preferenceStore.setValue(IWorkbenchPreferenceConstants.ENABLE_ANIMATIONS, useAnimations); minStacks.clear(); layout = null; } } else { org.eclipse.ui.internal.WorkbenchWindow wbw = ((org.eclipse.ui.internal.WorkbenchWindow) (page.getWorkbenchWindow())); if (wbw != null) { org.eclipse.ui.internal.layout.ITrimManager tbm = wbw.getTrimManager(); if (tbm != null) { org.eclipse.ui.internal.layout.IWindowTrim fvb = tbm.getTrim(FastViewBar.FASTVIEWBAR_ID); if (fvb instanceof org.eclipse.ui.internal.FastViewBar) { ((org.eclipse.ui.internal.FastViewBar) (fvb)).update(true); } } } } if ((!(org.eclipse.ui.internal.Perspective.useNewMinMax(this))) && ((fastViewManager) != null)) { boolean stacksWereRestored = fastViewManager.restoreAllTrimStacks(); setEditorAreaTrimVisibility(false); if (stacksWereRestored && ((presentation.getMaximizedStack()) instanceof org.eclipse.ui.internal.ViewStack)) { org.eclipse.ui.internal.ViewStack vs = ((org.eclipse.ui.internal.ViewStack) (presentation.getMaximizedStack())); vs.setPresentationState(IStackPresentationSite.STATE_RESTORED); presentation.setMaximizedStack(null); } } if (hideEditorArea) { hideEditorArea(); shouldHideEditorsOnActivate = false; if (useNewMinMax) setEditorAreaTrimVisibility(((editorAreaState) == (org.eclipse.ui.presentations.IStackPresentationSite.STATE_MINIMIZED))); } if (((page.window) != null) && ((page.window.getTrimManager()) != null)) page.window.getTrimManager().forceLayout(); }
private final void openView(final java.lang.String viewId) throws org.eclipse.ui.PartInitException { final org.eclipse.ui.IWorkbenchWindow activeWorkbenchWindow = org.eclipse.ui.PlatformUI.getWorkbench().getActiveWorkbenchWindow(); if (activeWorkbenchWindow == null) { return; } final org.eclipse.ui.IWorkbenchPage activePage = activeWorkbenchWindow.getActivePage(); if (activePage == null) { return; } if (makeFast) { org.eclipse.ui.internal.WorkbenchPage wp = ((org.eclipse.ui.internal.WorkbenchPage) (activePage)); org.eclipse.ui.IViewReference ref = wp.findViewReference(viewId); if (ref == null) { org.eclipse.ui.IViewPart part = wp.showView(viewId, null, IWorkbenchPage.VIEW_CREATE); ref = ((org.eclipse.ui.IViewReference) (wp.getReference(part))); } if (!(wp.isFastView(ref))) { wp.addFastView(ref); } wp.activate(ref.getPart(true)); } else { activePage.showView(viewId); } }
public LockToolBarAction(org.eclipse.ui.IWorkbenchWindow window) { super(WorkbenchMessages.LockToolBarAction_text); if (window == null) { throw new java.lang.IllegalArgumentException(); } this.workbenchWindow = window; setActionDefinitionId("org.eclipse.ui.window.lockToolBar"); setToolTipText(WorkbenchMessages.LockToolBarAction_toolTip); setEnabled(false); window.getWorkbench().getDisplay().asyncExec(new java.lang.Runnable() { public void run() { if ((workbenchWindow) != null) { setChecked(((org.eclipse.ui.internal.WorkbenchWindow) (workbenchWindow)).isCoolBarLocked()); } } }); window.getWorkbench().getHelpSystem().setHelp(this, IWorkbenchHelpContextIds.LOCK_TOOLBAR_ACTION); }
public boolean performOk() { if (filters.hasChanged()) { if ((resource) == null) return true; try { if ((resource) != (nonExistantResource)) { org.eclipse.core.resources.IResourceFilterDescription[] oldFilters = resource.getFilters(); for (int i = 0; i < (oldFilters.length); i++) { oldFilters[i].delete(org.eclipse.core.resources.IResource.BACKGROUND_REFRESH, new org.eclipse.core.runtime.NullProgressMonitor()); } org.eclipse.ui.internal.ide.dialogs.FilterCopy[] newFilters = filters.getChildren(); for (int i = 0; i < (newFilters.length); i++) { resource.createFilter(newFilters[i].getType(), newFilters[i].getFileInfoMatcherDescription(), org.eclipse.core.resources.IResource.BACKGROUND_REFRESH, new org.eclipse.core.runtime.NullProgressMonitor()); } } } catch (org.eclipse.core.runtime.CoreException e) { org.eclipse.jface.dialogs.ErrorDialog.openError(shell, org.eclipse.osgi.util.NLS.bind(IDEWorkbenchMessages.InternalError, null), e.getLocalizedMessage(), e.getStatus()); } } return true; }
public void addPart(org.eclipse.ui.internal.LayoutPart part) { if (isZoomed()) zoomOut(); org.eclipse.ui.internal.PartPlaceholder placeholder = null; org.eclipse.ui.internal.LayoutPart testPart = null; java.lang.String primaryId = part.getID(); java.lang.String secondaryId = null; if (part instanceof org.eclipse.ui.internal.ViewPane) { org.eclipse.ui.internal.ViewPane pane = ((org.eclipse.ui.internal.ViewPane) (part)); org.eclipse.ui.IViewReference ref = ((org.eclipse.ui.IViewReference) (pane.getPartReference())); secondaryId = ref.getSecondaryId(); } if (secondaryId != null) testPart = findPart(primaryId, secondaryId); else testPart = findPart(primaryId); if ((testPart != null) && (testPart instanceof org.eclipse.ui.internal.PartPlaceholder)) placeholder = ((org.eclipse.ui.internal.PartPlaceholder) (testPart)); if (placeholder == null) { part.reparent(mainLayout.getParent()); org.eclipse.ui.internal.LayoutPart relative = mainLayout.findBottomRight(); if ((relative != null) && (!(relative instanceof org.eclipse.ui.internal.EditorArea))) { mainLayout.stack(part, relative); } else { mainLayout.add(part); } } else { org.eclipse.ui.internal.ILayoutContainer container = placeholder.getContainer(); if (container != null) { if (container instanceof org.eclipse.ui.internal.DetachedPlaceHolder) { org.eclipse.ui.internal.DetachedPlaceHolder holder = ((org.eclipse.ui.internal.DetachedPlaceHolder) (container)); detachedPlaceHolderList.remove(holder); container.remove(testPart); org.eclipse.ui.internal.DetachedWindow window = new org.eclipse.ui.internal.DetachedWindow(page); detachedWindowList.add(window); window.create(); part.createControl(window.getShell()); window.getShell().setBounds(holder.getBounds()); window.open(); org.eclipse.ui.internal.ViewPane pane = ((org.eclipse.ui.internal.ViewPane) (part)); window.getShell().setText(pane.getPartReference().getTitle()); window.add(pane); org.eclipse.ui.internal.LayoutPart[] otherChildren = holder.getChildren(); for (int i = 0; i < (otherChildren.length); i++) part.getContainer().add(otherChildren[i]); } else { if (container instanceof org.eclipse.ui.internal.ContainerPlaceholder) { org.eclipse.ui.internal.ContainerPlaceholder containerPlaceholder = ((org.eclipse.ui.internal.ContainerPlaceholder) (container)); org.eclipse.ui.internal.ILayoutContainer parentContainer = containerPlaceholder.getContainer(); container = ((org.eclipse.ui.internal.ILayoutContainer) (containerPlaceholder.getRealContainer())); if (container instanceof org.eclipse.ui.internal.LayoutPart) { parentContainer.replace(containerPlaceholder, ((org.eclipse.ui.internal.LayoutPart) (container))); } containerPlaceholder.setRealContainer(null); } if (!(container instanceof org.eclipse.ui.internal.PartTabFolder)) { part.reparent(mainLayout.getParent()); } if ((placeholder.getID().indexOf(org.eclipse.ui.internal.PerspectivePresentation.WILD_CARD)) != (-1)) { if (container instanceof org.eclipse.ui.internal.PartSashContainer) ((org.eclipse.ui.internal.PartSashContainer) (container)).addChildForPlaceholder(part, placeholder); else container.add(part); } else container.replace(placeholder, part); } } } }
public final void run() throws java.io.IOException { java.io.Writer fileWriter = null; try { fileWriter = new java.io.BufferedWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream(filePath), "UTF-8")); final java.lang.Object[] bindingElements = bindingModel.getBindings().toArray(); for (int i = 0; i < (bindingElements.length); i++) { final org.eclipse.ui.internal.keys.model.BindingElement be = ((org.eclipse.ui.internal.keys.model.BindingElement) (bindingElements[i])); if (((((be.getTrigger()) == null) || (be.getTrigger().isEmpty())) || ((be.getContext()) == null)) || ((be.getContext().getName()) == null)) { continue; } java.lang.StringBuffer buffer = new java.lang.StringBuffer(); buffer.append(((((org.eclipse.ui.internal.keys.model.KeyController.ESCAPED_QUOTE) + (org.eclipse.ui.internal.util.Util.replaceAll(be.getCategory(), org.eclipse.ui.internal.keys.model.KeyController.ESCAPED_QUOTE, org.eclipse.ui.internal.keys.model.KeyController.REPLACEMENT))) + (org.eclipse.ui.internal.keys.model.KeyController.ESCAPED_QUOTE)) + (org.eclipse.ui.internal.keys.model.KeyController.DELIMITER))); buffer.append(((((org.eclipse.ui.internal.keys.model.KeyController.ESCAPED_QUOTE) + (be.getName())) + (org.eclipse.ui.internal.keys.model.KeyController.ESCAPED_QUOTE)) + (org.eclipse.ui.internal.keys.model.KeyController.DELIMITER))); buffer.append(((((org.eclipse.ui.internal.keys.model.KeyController.ESCAPED_QUOTE) + (be.getTrigger().format())) + (org.eclipse.ui.internal.keys.model.KeyController.ESCAPED_QUOTE)) + (org.eclipse.ui.internal.keys.model.KeyController.DELIMITER))); buffer.append((((org.eclipse.ui.internal.keys.model.KeyController.ESCAPED_QUOTE) + (be.getContext().getName())) + (org.eclipse.ui.internal.keys.model.KeyController.ESCAPED_QUOTE))); buffer.append(java.lang.System.getProperty("line.separator")); fileWriter.write(buffer.toString()); } } finally { if (fileWriter != null) { try { fileWriter.close(); } catch (final java.io.IOException e) { } } } }
public java.lang.String getColumnText(java.lang.Object element, int columnIndex) { if (columnIndex < (attributeMaps.length)) { java.lang.Object result = attributeMaps[columnIndex].get(element); return result == null ? "" : result.toString(); } return null; }
private void handleVariablesButtonPressed() { org.eclipse.ui.internal.dialogs.PathVariableSelectionDialog dialog = new org.eclipse.ui.internal.dialogs.PathVariableSelectionDialog(getShell(), type); if ((dialog.open()) == (org.eclipse.jface.dialogs.IDialogConstants.OK_ID)) { java.lang.String[] variableNames = ((java.lang.String[]) (dialog.getResult())); if (variableNames != null) { org.eclipse.core.resources.IPathVariableManager pathVariableManager = org.eclipse.core.resources.ResourcesPlugin.getWorkspace().getPathVariableManager(); org.eclipse.core.runtime.IPath path = pathVariableManager.getValue(variableNames[0]); if (path != null) { linkTargetField.setText(path.toOSString()); } } } }
private void buildHandlersStructure() { statusHandlerDescriptorsMap.clear(); defaultHandlerDescriptor = null; java.lang.String productId = ((org.eclipse.core.runtime.Platform.getProduct()) != null) ? org.eclipse.core.runtime.Platform.getProduct().getId() : null; java.util.List allHandlers = new java.util.ArrayList(); java.lang.String defaultHandlerId = resolveUserStatusHandlerId(); if (defaultHandlerId == null) { for (java.util.Iterator it = productBindingDescriptors.iterator(); it.hasNext();) { org.eclipse.ui.internal.statushandlers.StatusHandlerProductBindingDescriptor descriptor = ((org.eclipse.ui.internal.statushandlers.StatusHandlerProductBindingDescriptor) (it.next())); if (descriptor.getProductId().equals(productId)) { defaultHandlerId = descriptor.getHandlerId(); } } } for (java.util.Iterator it = statusHandlerDescriptors.iterator(); it.hasNext();) { org.eclipse.ui.internal.statushandlers.StatusHandlerDescriptor descriptor = ((org.eclipse.ui.internal.statushandlers.StatusHandlerDescriptor) (it.next())); allHandlers.add(descriptor); } org.eclipse.ui.internal.statushandlers.StatusHandlerDescriptor handlerDescriptor = null; for (java.util.Iterator it = allHandlers.iterator(); it.hasNext();) { handlerDescriptor = ((org.eclipse.ui.internal.statushandlers.StatusHandlerDescriptor) (it.next())); if (handlerDescriptor.getId().equals(defaultHandlerId)) { defaultHandlerDescriptor = handlerDescriptor; } else { statusHandlerDescriptorsMap.addHandlerDescriptor(handlerDescriptor); } } }
public void createControl(org.eclipse.swt.widgets.Composite parent) { org.eclipse.swt.graphics.Font font = parent.getFont(); org.eclipse.swt.widgets.Composite composite = new org.eclipse.swt.widgets.Composite(parent, org.eclipse.swt.SWT.NULL); composite.setLayout(new org.eclipse.swt.layout.GridLayout()); composite.setLayoutData(new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.HORIZONTAL_ALIGN_FILL)); setControl(composite); org.eclipse.ui.PlatformUI.getWorkbench().getHelpSystem().setHelp(composite, IWorkbenchHelpContextIds.WORKING_SET_TYPE_PAGE); org.eclipse.swt.widgets.Label typesLabel = new org.eclipse.swt.widgets.Label(composite, org.eclipse.swt.SWT.NONE); typesLabel.setText(WorkbenchMessages.WorkingSetTypePage_typesLabel); org.eclipse.swt.layout.GridData data = new org.eclipse.swt.layout.GridData(((((org.eclipse.swt.layout.GridData.GRAB_HORIZONTAL) | (org.eclipse.swt.layout.GridData.GRAB_VERTICAL)) | (org.eclipse.swt.layout.GridData.HORIZONTAL_ALIGN_FILL)) | (org.eclipse.swt.layout.GridData.VERTICAL_ALIGN_CENTER))); typesLabel.setLayoutData(data); typesLabel.setFont(font); typesListViewer = new org.eclipse.jface.viewers.TableViewer(composite, ((org.eclipse.swt.SWT.BORDER) | (org.eclipse.swt.SWT.MULTI))); data = new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_BOTH); data.heightHint = org.eclipse.ui.internal.dialogs.WorkingSetTypePage.SIZING_SELECTION_WIDGET_HEIGHT; data.widthHint = org.eclipse.ui.internal.dialogs.WorkingSetTypePage.SIZING_SELECTION_WIDGET_WIDTH; typesListViewer.getTable().setLayoutData(data); typesListViewer.getTable().setFont(font); typesListViewer.addSelectionChangedListener(new org.eclipse.jface.viewers.ISelectionChangedListener() { public void selectionChanged(org.eclipse.jface.viewers.SelectionChangedEvent event) { handleSelectionChanged(); } }); typesListViewer.addDoubleClickListener(new org.eclipse.jface.viewers.IDoubleClickListener() { public void doubleClick(org.eclipse.jface.viewers.DoubleClickEvent event) { handleDoubleClick(); } }); createContent(); setPageComplete(false); }
protected void partHidden(org.eclipse.ui.IWorkbenchPart part) { if (!(isPinned())) { super.partHidden(part); } }
public void fillActionBars(org.eclipse.ui.IActionBars actionBars) { if ((actions) == null) return; synchronized(this) { if (!(hasContributedToViewMenu)) { contributeToViewMenu(actionBars.getMenuManager()); hasContributedToViewMenu = true; } } }
protected org.eclipse.swt.widgets.Control createDialogArea(org.eclipse.swt.widgets.Composite parent) { org.eclipse.swt.widgets.Composite composite = ((org.eclipse.swt.widgets.Composite) (super.createDialogArea(parent))); composite.setLayout(new org.eclipse.swt.layout.GridLayout()); composite.setLayoutData(new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_BOTH)); createProjectNameGroup(composite); locationArea = new org.eclipse.ui.internal.ide.dialogs.ProjectContentsLocationArea(getErrorReporter(), composite, project); locationArea.updateProjectName(projectNameField.getText()); return composite; }
private void unableToOpenPerspective(org.eclipse.ui.internal.registry.PerspectiveDescriptor persp, org.eclipse.core.runtime.IStatus status) { org.eclipse.ui.internal.registry.PerspectiveRegistry perspRegistry = ((org.eclipse.ui.internal.registry.PerspectiveRegistry) (org.eclipse.ui.internal.WorkbenchPlugin.getDefault().getPerspectiveRegistry())); perspRegistry.deletePerspective(persp); persp.deleteCustomDefinition(); java.lang.String title = org.eclipse.ui.internal.WorkbenchMessages.getString("Perspective.problemRestoringTitle"); java.lang.String msg = org.eclipse.ui.internal.WorkbenchMessages.getString("Perspective.errorReadingState"); if (status == null) { org.eclipse.jface.dialogs.MessageDialog.openError(((org.eclipse.swt.widgets.Shell) (null)), title, msg); } else { org.eclipse.jface.dialogs.ErrorDialog.openError(((org.eclipse.swt.widgets.Shell) (null)), title, msg, status); } }
public java.lang.Object getAdapter(java.lang.Class required) { if (org.eclipse.jface.text.source.IVerticalRulerInfo.class.equals(required)) { if ((fVerticalRuler) instanceof org.eclipse.jface.text.source.IVerticalRulerInfo) return fVerticalRuler; } if (org.eclipse.jface.text.IMarkRegionTarget.class.equals(required)) { if ((fMarkRegionTarget) == null) { org.eclipse.jface.action.IStatusLineManager manager = getStatusLineManager(); if (manager != null) fMarkRegionTarget = ((fSourceViewer) == null) ? null : new org.eclipse.ui.texteditor.MarkRegionTarget(fSourceViewer, manager); } return fMarkRegionTarget; } if (org.eclipse.ui.texteditor.IncrementalFindTarget.class.equals(required)) { if ((fIncrementalFindTarget) == null) { org.eclipse.jface.action.IStatusLineManager manager = getStatusLineManager(); if (manager != null) fIncrementalFindTarget = ((fSourceViewer) == null) ? null : new org.eclipse.ui.texteditor.IncrementalFindTarget(fSourceViewer, manager); } return fIncrementalFindTarget; } if (org.eclipse.jface.text.IFindReplaceTarget.class.equals(required)) { org.eclipse.jface.text.IFindReplaceTarget target = ((fSourceViewer) == null) ? null : fSourceViewer.getFindReplaceTarget(); if ((target != null) && (target instanceof org.eclipse.jface.text.IFindReplaceTargetExtension)) ((org.eclipse.jface.text.IFindReplaceTargetExtension) (target)).setScopeHighlightColor(fFindScopeHighlightColor); return target; } if (org.eclipse.jface.text.ITextOperationTarget.class.equals(required)) return (fSourceViewer) == null ? null : fSourceViewer.getTextOperationTarget(); if (org.eclipse.jface.text.IRewriteTarget.class.equals(required)) { if ((fSourceViewer) instanceof org.eclipse.jface.text.ITextViewerExtension) { org.eclipse.jface.text.ITextViewerExtension extension = ((org.eclipse.jface.text.ITextViewerExtension) (fSourceViewer)); return extension.getRewriteTarget(); } return null; } return super.getAdapter(required); }
public final void addMenuId(final java.lang.String menuId) { menuIds.add(menuId); bitSet &= ~(org.eclipse.ui.internal.PopupMenuExtender.STATIC_ACTION_READ); if ((staticActionBuilder) != null) { staticActionBuilder.dispose(); staticActionBuilder = null; } readStaticActions(); }
private org.eclipse.e4.ui.model.application.MApplication loadApplicationModel(org.eclipse.equinox.app.IApplicationContext appContext, org.eclipse.e4.core.contexts.IEclipseContext eclipseContext) { org.eclipse.e4.ui.model.application.MApplication theApp = null; org.eclipse.osgi.service.datalocation.Location instanceLocation = org.eclipse.e4.ui.internal.workbench.swt.WorkbenchSWTActivator.getDefault().getInstanceLocation(); java.lang.String appModelPath = getArgValue(IWorkbench.XMI_URI_ARG, appContext, false); if ((appModelPath == null) || ((appModelPath.length()) == 0)) { org.osgi.framework.Bundle brandingBundle = appContext.getBrandingBundle(); if (brandingBundle != null) appModelPath = ((brandingBundle.getSymbolicName()) + "/") + (org.eclipse.e4.ui.internal.workbench.swt.E4Application.APPLICATION_MODEL_PATH_DEFAULT); } org.eclipse.core.runtime.Assert.isNotNull(appModelPath, ((org.eclipse.e4.ui.workbench.IWorkbench.XMI_URI_ARG) + " argument missing")); org.eclipse.emf.common.util.URI initialWorkbenchDefinitionInstance; if (org.eclipse.e4.ui.internal.workbench.URIHelper.isPlatformURI(appModelPath)) { initialWorkbenchDefinitionInstance = org.eclipse.emf.common.util.URI.createURI(appModelPath, true); } else { initialWorkbenchDefinitionInstance = org.eclipse.emf.common.util.URI.createPlatformPluginURI(appModelPath, true); } eclipseContext.set(E4Workbench.INITIAL_WORKBENCH_MODEL_URI, initialWorkbenchDefinitionInstance); boolean saveAndRestore; java.lang.String value = getArgValue(IWorkbench.PERSIST_STATE, appContext, false); saveAndRestore = (value == null) || (java.lang.Boolean.parseBoolean(value)); eclipseContext.set(IWorkbench.PERSIST_STATE, java.lang.Boolean.valueOf(saveAndRestore)); if ((instanceLocation != null) && ((instanceLocation.getURL()) != null)) { eclipseContext.set(E4Workbench.INSTANCE_LOCATION, instanceLocation); } else { eclipseContext.set(IWorkbench.PERSIST_STATE, false); } boolean clearPersistedState; value = getArgValue(IWorkbench.CLEAR_PERSISTED_STATE, appContext, true); clearPersistedState = (value != null) && (java.lang.Boolean.parseBoolean(value)); eclipseContext.set(IWorkbench.CLEAR_PERSISTED_STATE, java.lang.Boolean.valueOf(clearPersistedState)); boolean deltaRestore; value = getArgValue(E4Workbench.DELTA_RESTORE, appContext, false); deltaRestore = (value == null) || (java.lang.Boolean.parseBoolean(value)); eclipseContext.set(E4Workbench.DELTA_RESTORE, java.lang.Boolean.valueOf(deltaRestore)); java.lang.String resourceHandler = getArgValue(IWorkbench.MODEL_RESOURCE_HANDLER, appContext, false); if (resourceHandler == null) { resourceHandler = "bundleclass://org.eclipse.e4.ui.workbench/" + (org.eclipse.e4.ui.internal.workbench.ResourceHandler.class.getName()); } org.eclipse.e4.core.services.contributions.IContributionFactory factory = eclipseContext.get(org.eclipse.e4.core.services.contributions.IContributionFactory.class); handler = ((org.eclipse.e4.ui.workbench.IModelResourceHandler) (factory.create(resourceHandler, eclipseContext))); eclipseContext.set(org.eclipse.e4.ui.workbench.IModelResourceHandler.class, handler); org.eclipse.emf.ecore.resource.Resource resource = handler.loadMostRecentModel(); theApp = ((org.eclipse.e4.ui.model.application.MApplication) (resource.getContents().get(0))); return theApp; }
public void setEnabledAllowed(boolean enabledAllowed) { super.setEnabledAllowed(enabledAllowed); if ((wrappers) != null) { for (int i = 0; i < (wrappers.size()); i++) { ((org.eclipse.ui.internal.EditorMenuManager) (wrappers.get(i))).setEnabledAllowed(enabledAllowed); } } if (!enabledAllowed) { setRetargetEnabledAllowed(this); } }
public void bindWidget(org.eclipse.e4.ui.model.application.MPart<?> me, java.lang.Object widget) { me.setWidget(widget); ((org.eclipse.swt.widgets.Widget) (widget)).setData(org.eclipse.e4.workbench.ui.renderers.swt.OWNING_ME, me); final org.eclipse.e4.ui.services.IStylingEngine engine = ((org.eclipse.e4.ui.services.IStylingEngine) (me.getContext().get(IStylingEngine.SERVICE_NAME))); engine.setId(widget, me.getId()); }
public void handle(final org.eclipse.ui.statushandlers.StatusAdapter statusAdapter, int style) { if (isFatal(statusAdapter)) { if (!(map.containsKey(statusAdapter.getStatus()))) { map.put(statusAdapter.getStatus(), null); } else { return; } if ((statusAdapter.getProperty(IProgressConstants.NO_IMMEDIATE_ERROR_PROMPT_PROPERTY)) == (java.lang.Boolean.TRUE)) { statusAdapter.setProperty(IProgressConstants.NO_IMMEDIATE_ERROR_PROMPT_PROPERTY, java.lang.Boolean.FALSE); } super.handle(statusAdapter, (style | (org.eclipse.ui.statushandlers.StatusManager.BLOCK))); } else { super.handle(statusAdapter, style); } if (isFatal(statusAdapter)) { org.eclipse.ui.progress.UIJob handlingExceptionJob = new org.eclipse.ui.progress.UIJob("IDE Exception Handler") { public org.eclipse.core.runtime.IStatus runInUIThread(org.eclipse.core.runtime.IProgressMonitor monitor) { handleException(statusAdapter.getStatus().getException()); return new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.OK, IDEWorkbenchPlugin.IDE_WORKBENCH, IDEWorkbenchMessages.IDEExceptionHandler_ExceptionHandledMessage); } }; handlingExceptionJob.setSystem(true); handlingExceptionJob.schedule(); } }
public void selectionChanged(org.eclipse.jface.action.IAction actionProxy, org.eclipse.jface.viewers.ISelection selection) { super.selectionChanged(actionProxy, selection); menuItems.clear(); if (selection instanceof org.eclipse.jface.viewers.IStructuredSelection) { java.util.Collection selectedElements = ((org.eclipse.jface.viewers.IStructuredSelection) (getSelection())).toList(); boolean minimallyOkay = true; for (java.util.Iterator i = selectedElements.iterator(); i.hasNext();) { java.lang.Object object = i.next(); if ((!(object instanceof org.eclipse.core.runtime.IAdaptable)) || (object instanceof org.eclipse.ui.IWorkingSet)) { minimallyOkay = false; break; } } if (minimallyOkay) { org.eclipse.ui.IWorkingSet[][] typedSets = splitSets(); for (int i = 0; i < (typedSets.length); i++) { if (((menuItems.size()) > 0) && ((menuItems.get(((menuItems.size()) - 1))) != (org.eclipse.ui.internal.actions.ModifyWorkingSetDelegate.SEPERATORMARKER))) menuItems.add(org.eclipse.ui.internal.actions.ModifyWorkingSetDelegate.SEPERATORMARKER); org.eclipse.ui.IWorkingSet[] sets = typedSets[i]; for (int j = 0; j < (sets.length); j++) { org.eclipse.ui.IWorkingSet set = sets[j]; java.util.Set existingElements = new java.util.HashSet(); existingElements.addAll(java.util.Arrays.asList(set.getElements())); boolean visible = false; for (java.util.Iterator k = selectedElements.iterator(); k.hasNext();) { org.eclipse.core.runtime.IAdaptable object = ((org.eclipse.core.runtime.IAdaptable) (k.next())); if (add) { if (!(existingElements.contains(object))) { visible = true; break; } } else { if (existingElements.contains(object)) { visible = true; break; } } } if (visible) { org.eclipse.ui.internal.actions.ModifyWorkingSetDelegate.ModifyAction action = new org.eclipse.ui.internal.actions.ModifyWorkingSetDelegate.ModifyAction(set, selectedElements); menuItems.add(action); } } } } } actionProxy.setEnabled((!(menuItems.isEmpty()))); }
private org.eclipse.e4.ui.model.application.ui.basic.MPartStack insertStack(java.lang.String stackId, int relationship, float ratio, java.lang.String refId, boolean visible) { org.eclipse.e4.ui.model.application.ui.MUIElement refModel = findElement(perspModel, refId); if (refModel == null) { org.eclipse.e4.ui.model.application.ui.basic.MPartStack stack = org.eclipse.ui.internal.e4.compatibility.ModeledPageLayout.createStack(stackId, visible); perspModel.getChildren().add(stack); return stack; } org.eclipse.e4.ui.model.application.ui.basic.MPartStack stack = org.eclipse.ui.internal.e4.compatibility.ModeledPageLayout.createStack(stackId, visible); org.eclipse.e4.ui.model.application.ui.MElementContainer<?> parent = refModel.getParent(); if (parent instanceof org.eclipse.e4.ui.model.application.ui.basic.MPartStack) { refModel = parent; } org.eclipse.ui.internal.e4.compatibility.ModeledPageLayout.insert(stack, refModel, org.eclipse.ui.internal.e4.compatibility.ModeledPageLayout.plRelToSwt(relationship), ratio); return stack; }
public PluginAction(org.eclipse.core.runtime.IConfigurationElement actionElement, java.lang.String id, int style) { super(null, style); this.configElement = actionElement; if (id != null) { setId(id); } else { setId(("PluginAction." + (java.lang.Integer.toString(org.eclipse.ui.internal.PluginAction.actionCount)))); ++(org.eclipse.ui.internal.PluginAction.actionCount); } java.lang.String defId = actionElement.getAttribute(IWorkbenchRegistryConstants.ATT_DEFINITION_ID); setActionDefinitionId(defId); pluginId = configElement.getNamespace(); if ((configElement.getAttribute(IWorkbenchRegistryConstants.ATT_ENABLES_FOR)) != null) { enabler = new org.eclipse.ui.SelectionEnabler(configElement); } else { org.eclipse.core.runtime.IConfigurationElement[] kids = configElement.getChildren(IWorkbenchRegistryConstants.TAG_ENABLEMENT); org.eclipse.core.runtime.IConfigurationElement[] kids2 = configElement.getChildren(IWorkbenchRegistryConstants.TAG_SELECTION); if (((kids.length) > 0) || ((kids2.length) > 0)) { enabler = new org.eclipse.ui.SelectionEnabler(configElement); } } selectionChanged(new org.eclipse.jface.viewers.StructuredSelection()); }
public DecoratedField(org.eclipse.swt.widgets.Composite parent, int style, org.eclipse.jface.fieldassist.IControlCreator controlCreator) { this.form = createForm(parent); this.control = controlCreator.createControl(form, style); addControlListeners(); form.setTabList(new org.eclipse.swt.widgets.Control[]{ control }); org.eclipse.swt.layout.FormData data = new org.eclipse.swt.layout.FormData(); data.left = new org.eclipse.swt.layout.FormAttachment(0, 0); data.top = new org.eclipse.swt.layout.FormAttachment(0, 0); data.right = new org.eclipse.swt.layout.FormAttachment(100, 0); data.bottom = new org.eclipse.swt.layout.FormAttachment(100, 0); control.setLayoutData(data); }
@org.eclipse.e4.core.di.annotations.Execute public java.lang.Object execute(org.eclipse.e4.core.contexts.IEclipseContext context, @org.eclipse.e4.core.di.annotations.Optional @javax.inject.Named(org.eclipse.e4.core.commands.internal.HandlerServiceImpl.PARM_MAP) java.util.Map parms) { org.eclipse.e4.ui.internal.workbench.Activator.trace(Policy.DEBUG_CMDS, ((((("execute " + (command)) + " and ") + (handler)) + " with: ") + context), null); org.eclipse.e4.ui.workbench.modeling.ExpressionContext legacy = new org.eclipse.e4.ui.workbench.modeling.ExpressionContext(context); org.eclipse.core.commands.ExecutionEvent event = new org.eclipse.core.commands.ExecutionEvent(command, parms, null, legacy); try { return handler.execute(event); } catch (org.eclipse.core.commands.ExecutionException e) { org.eclipse.ui.internal.WorkbenchPlugin.log(("Failure during execution of " + (command.getId())), e); } return null; }
public void setSelection(java.lang.Object selection) { if (selection != null) { context.set(org.eclipse.e4.ui.internal.workbench.SelectionServiceImpl.OUT_SELECTION, selection); if ((isMasterService()) || (((activePart) != null) && ((activePart.getContext()) == (context)))) { serviceRoot.getContext().set(IServiceConstants.ACTIVE_SELECTION, selection); } } else { context.remove(org.eclipse.e4.ui.internal.workbench.SelectionServiceImpl.OUT_SELECTION); if ((isMasterService()) || (((activePart) != null) && ((activePart.getContext()) == (context)))) { serviceRoot.getContext().remove(IServiceConstants.ACTIVE_SELECTION); } } }
public org.eclipse.ui.IViewPart showView(java.lang.String viewId, java.lang.String secondaryId) throws org.eclipse.ui.PartInitException { org.eclipse.ui.internal.ViewFactory factory = getViewFactory(); org.eclipse.ui.IViewReference ref = factory.createView(viewId, secondaryId); org.eclipse.ui.IViewPart part = ((org.eclipse.ui.IViewPart) (ref.getPart(true))); if (part == null) { throw new org.eclipse.ui.PartInitException(org.eclipse.osgi.util.NLS.bind(WorkbenchMessages.ViewFactory_couldNotCreate, ref.getId())); } org.eclipse.ui.internal.ViewSite site = ((org.eclipse.ui.internal.ViewSite) (part.getSite())); org.eclipse.ui.internal.ViewPane pane = ((org.eclipse.ui.internal.ViewPane) (site.getPane())); org.eclipse.jface.preference.IPreferenceStore store = org.eclipse.ui.internal.WorkbenchPlugin.getDefault().getPreferenceStore(); int openViewMode = store.getInt(IPreferenceConstants.OPEN_VIEW_MODE); if ((openViewMode == (IPreferenceConstants.OVM_FAST)) && ((fastViewManager) != null)) { fastViewManager.addViewReference(FastViewBar.FASTVIEWBAR_ID, (-1), ref, true); setActiveFastView(ref); } else if ((openViewMode == (IPreferenceConstants.OVM_FLOAT)) && (presentation.canDetach())) { presentation.addDetachedPart(pane); } else { if (org.eclipse.ui.internal.Perspective.useNewMinMax(this)) { org.eclipse.ui.internal.LayoutPart vPart = presentation.findPart(viewId, secondaryId); java.lang.String trimId = null; if (vPart != null) { java.lang.String id = null; org.eclipse.ui.internal.ILayoutContainer container = vPart.getContainer(); if (container instanceof org.eclipse.ui.internal.ContainerPlaceholder) id = ((org.eclipse.ui.internal.ContainerPlaceholder) (container)).getID(); else if (container instanceof org.eclipse.ui.internal.ViewStack) id = ((org.eclipse.ui.internal.ViewStack) (container)).getID(); if ((id != null) && ((fastViewManager.getFastViews(id).size()) > 0)) { trimId = id; } } if ((trimId == null) && ((presentation.getMaximizedStack()) != null)) { if (vPart == null) { org.eclipse.ui.internal.ViewStackTrimToolBar blTrimStack = fastViewManager.getBottomRightTrimStack(); if (blTrimStack != null) { trimId = blTrimStack.getId(); org.eclipse.ui.internal.LayoutPart blPart = presentation.findPart(trimId, null); if (blPart instanceof org.eclipse.ui.internal.ContainerPlaceholder) { org.eclipse.ui.internal.ContainerPlaceholder cph = ((org.eclipse.ui.internal.ContainerPlaceholder) (blPart)); if ((cph.getRealContainer()) instanceof org.eclipse.ui.internal.ViewStack) { org.eclipse.ui.internal.ViewStack vs = ((org.eclipse.ui.internal.ViewStack) (cph.getRealContainer())); java.lang.String compoundId = ref.getId(); if ((ref.getSecondaryId()) != null) compoundId = (compoundId + ':') + (ref.getSecondaryId()); vs.add(new org.eclipse.ui.internal.PartPlaceholder(compoundId)); } } } } } if (trimId != null) { fastViewManager.addViewReference(trimId, (-1), ref, true); } else { boolean inMaximizedStack = (vPart != null) && ((vPart.getContainer()) == (presentation.getMaximizedStack())); presentation.addPart(pane); if (((presentation.getMaximizedStack()) != null) && (!inMaximizedStack)) { vPart = presentation.findPart(viewId, secondaryId); if ((vPart != null) && ((vPart.getContainer()) instanceof org.eclipse.ui.internal.ViewStack)) { org.eclipse.ui.internal.ViewStack vs = ((org.eclipse.ui.internal.ViewStack) (vPart.getContainer())); vs.setState(IStackPresentationSite.STATE_MINIMIZED); fastViewManager.getViewStackTrimToolbar(vs.getID()).setRestoreOnUnzoom(true); } } } } else { presentation.addPart(pane); } } if ((pane != null) && ((pane.getControl()) != null)) pane.getControl().setEnabled(true); return part; }
private org.eclipse.core.runtime.IPath getNewNameFor(org.eclipse.core.runtime.IPath originalName, final org.eclipse.core.resources.IWorkspace workspace) { final org.eclipse.core.resources.IResource resource = workspace.getRoot().findMember(originalName); final org.eclipse.core.runtime.IPath prefix = resource.getFullPath().removeLastSegments(1); final java.lang.String[] returnValue = new java.lang.String[]{ "" }; parentShell.getDisplay().syncExec(new java.lang.Runnable() { public void run() { org.eclipse.ui.actions.IInputValidator validator = new org.eclipse.ui.actions.IInputValidator() { public java.lang.String isValid(java.lang.String string) { if (resource.getName().equals(string)) { return org.eclipse.ui.internal.WorkbenchMessages.getString("CopyFilesAndFoldersOperation.nameMustBeDifferent"); } org.eclipse.core.runtime.IStatus status = workspace.validateName(string, resource.getType()); if (!(status.isOK())) { return status.getMessage(); } if (workspace.getRoot().exists(prefix.append(string))) { return org.eclipse.ui.internal.WorkbenchMessages.getString("CopyFilesAndFoldersOperation.nameExists"); } return null; } }; org.eclipse.ui.actions.InputDialog dialog = new org.eclipse.ui.actions.InputDialog(parentShell, org.eclipse.ui.internal.WorkbenchMessages.getString("CopyFilesAndFoldersOperation.inputDialogTitle"), org.eclipse.ui.internal.WorkbenchMessages.format("CopyFilesAndFoldersOperation.inputDialogMessage", new java.lang.String[]{ resource.getName() }), resource.getName(), validator); dialog.setBlockOnOpen(true); dialog.open(); if ((dialog.getReturnCode()) == (org.eclipse.jface.window.Window.CANCEL)) { returnValue[0] = null; } else { returnValue[0] = dialog.getValue(); } } }); if ((returnValue[0]) == null) { throw new org.eclipse.core.runtime.OperationCanceledException(); } return prefix.append(returnValue[0]); }
public void replace(org.eclipse.ui.internal.LayoutPart oldChild, org.eclipse.ui.internal.LayoutPart newChild) { org.eclipse.ui.presentations.IPresentablePart oldPart = oldChild.getPresentablePart(); org.eclipse.ui.presentations.IPresentablePart newPart = newChild.getPresentablePart(); int idx = children.indexOf(oldChild); children.add(idx, newChild); showPart(newChild, oldPart); if ((oldChild == (current)) && (!(newChild instanceof org.eclipse.ui.internal.PartPlaceholder))) { setSelection(newChild); } remove(oldChild); }
public static org.eclipse.e4.ui.model.application.ui.basic.MStackElement createViewModel(org.eclipse.e4.ui.model.application.MApplication application, java.lang.String id, boolean visible, org.eclipse.ui.internal.WorkbenchPage page, org.eclipse.e4.workbench.modeling.EPartService partService, boolean createReferences) { for (org.eclipse.e4.ui.model.application.descriptor.basic.MPartDescriptor descriptor : application.getDescriptors()) { if (descriptor.getElementId().equals(id)) { org.eclipse.e4.ui.model.application.ui.advanced.MPlaceholder ph = partService.createSharedPart(id, page.getWindowModel()); ph.setToBeRendered(visible); org.eclipse.e4.ui.model.application.ui.basic.MPart part = ((org.eclipse.e4.ui.model.application.ui.basic.MPart) (ph.getRef())); part.setToBeRendered(visible); if (visible && createReferences) { page.createViewReferenceForPart(part, id); } return ph; } } throw new java.lang.RuntimeException(("Unknown id: " + id)); }
@javax.inject.Inject public void setContextIds(@javax.inject.Named(org.eclipse.e4.ui.bindings.internal.BindingServiceImpl.ACTIVE_CONTEXTS) @org.eclipse.e4.core.di.annotations.Optional java.util.Set<java.lang.String> set) { if (((set == null) || (set.isEmpty())) || ((contextManager) == null)) { contextSet = ContextSet.EMPTY; if ((contextManager) != null) { contextManager.setActiveContextIds(java.util.Collections.EMPTY_SET); } return; } java.util.ArrayList<org.eclipse.core.commands.contexts.Context> contexts = new java.util.ArrayList<org.eclipse.core.commands.contexts.Context>(); for (java.lang.String id : set) { contexts.add(contextManager.getContext(id)); } contextSet = manager.createContextSet(contexts); contextManager.setActiveContextIds(set); }
public org.eclipse.ui.IViewPart showView(java.lang.String viewId, java.lang.String secondaryId) throws org.eclipse.ui.PartInitException { org.eclipse.ui.internal.ViewFactory factory = getViewFactory(); org.eclipse.ui.IViewReference ref = factory.createView(viewId, secondaryId); org.eclipse.ui.IViewPart part = ((org.eclipse.ui.IViewPart) (ref.getPart(true))); if (part == null) { throw new org.eclipse.ui.PartInitException(org.eclipse.osgi.util.NLS.bind(WorkbenchMessages.ViewFactory_couldNotCreate, ref.getId())); } org.eclipse.ui.internal.ViewSite site = ((org.eclipse.ui.internal.ViewSite) (part.getSite())); org.eclipse.ui.internal.ViewPane pane = ((org.eclipse.ui.internal.ViewPane) (site.getPane())); org.eclipse.jface.preference.IPreferenceStore store = org.eclipse.ui.internal.WorkbenchPlugin.getDefault().getPreferenceStore(); int openViewMode = store.getInt(IPreferenceConstants.OPEN_VIEW_MODE); if ((openViewMode == (IPreferenceConstants.OVM_FAST)) && ((fastViewManager) != null)) { fastViewManager.addViewReference(FastViewBar.FASTVIEWBAR_ID, (-1), ref, true); setActiveFastView(ref); } else if ((openViewMode == (IPreferenceConstants.OVM_FLOAT)) && (presentation.canDetach())) { presentation.addDetachedPart(pane); } else { if (org.eclipse.ui.internal.Perspective.useNewMinMax(this)) { org.eclipse.ui.internal.LayoutPart vPart = presentation.findPart(viewId, secondaryId); java.lang.String trimId = null; if ((vPart != null) && ((vPart.getContainer()) instanceof org.eclipse.ui.internal.ContainerPlaceholder)) { org.eclipse.ui.internal.ContainerPlaceholder cph = ((org.eclipse.ui.internal.ContainerPlaceholder) (vPart.getContainer())); java.lang.String id = cph.getID(); if ((fastViewManager.getFastViews(id).size()) > 0) { trimId = id; } } if ((trimId == null) && ((presentation.getMaximizedStack()) != null)) { if (vPart == null) { org.eclipse.ui.internal.ViewStackTrimToolBar blTrimStack = fastViewManager.getBottomRightTrimStack(); if (blTrimStack != null) { trimId = blTrimStack.getId(); org.eclipse.ui.internal.LayoutPart blPart = presentation.findPart(trimId, null); if (blPart instanceof org.eclipse.ui.internal.ContainerPlaceholder) { org.eclipse.ui.internal.ContainerPlaceholder cph = ((org.eclipse.ui.internal.ContainerPlaceholder) (blPart)); if ((cph.getRealContainer()) instanceof org.eclipse.ui.internal.ViewStack) { org.eclipse.ui.internal.ViewStack vs = ((org.eclipse.ui.internal.ViewStack) (cph.getRealContainer())); java.lang.String compoundId = ref.getId(); if ((ref.getSecondaryId()) != null) compoundId = (compoundId + ':') + (ref.getSecondaryId()); vs.add(new org.eclipse.ui.internal.PartPlaceholder(compoundId)); } } } } } if (trimId != null) { fastViewManager.addViewReference(trimId, (-1), ref, true); } else { boolean inMaximizedStack = (vPart != null) && ((vPart.getContainer()) == (presentation.getMaximizedStack())); presentation.addPart(pane); if (((presentation.getMaximizedStack()) != null) && (!inMaximizedStack)) { vPart = presentation.findPart(viewId, secondaryId); if ((vPart != null) && ((vPart.getContainer()) instanceof org.eclipse.ui.internal.ViewStack)) { org.eclipse.ui.internal.ViewStack vs = ((org.eclipse.ui.internal.ViewStack) (vPart.getContainer())); vs.setState(IStackPresentationSite.STATE_MINIMIZED); fastViewManager.getViewStackTrimToolbar(vs.getID()).setRestoreOnUnzoom(true); } } } } else { presentation.addPart(pane); } } return part; }
public void run() { org.eclipse.ui.views.navigator.ResourcePatternFilter filter = this.getNavigator().getPatternFilter(); org.eclipse.ui.views.navigator.FiltersContentProvider contentProvider = new org.eclipse.ui.views.navigator.FiltersContentProvider(filter); org.eclipse.ui.dialogs.ListSelectionDialog dialog = new org.eclipse.ui.dialogs.ListSelectionDialog(this.shell, this.getResourceViewer(), contentProvider, new org.eclipse.jface.viewers.LabelProvider(), org.eclipse.ui.views.navigator.FilterSelectionAction.FILTER_SELECTION_MESSAGE); dialog.setTitle(org.eclipse.ui.views.navigator.FilterSelectionAction.FILTER_TITLE_MESSAGE); dialog.setInitialSelections(contentProvider.getInitialSelections()); dialog.open(); if ((dialog.getReturnCode()) == (dialog.OK)) { java.lang.Object[] results = dialog.getResult(); java.lang.String[] selectedPatterns = new java.lang.String[results.length]; java.lang.System.arraycopy(results, 0, selectedPatterns, 0, results.length); filter.setPatterns(selectedPatterns); getNavigator().setFiltersPreference(selectedPatterns); org.eclipse.jface.viewers.Viewer viewer = getResourceViewer(); viewer.getControl().setRedraw(false); viewer.refresh(); viewer.getControl().setRedraw(true); } }
private java.lang.String getToolTipText(org.eclipse.e4.ui.model.application.ui.menu.MItem item) { java.lang.String text = item.getLocalizedTooltip(); if (item instanceof org.eclipse.e4.ui.model.application.ui.menu.MHandledItem) { org.eclipse.e4.ui.model.application.ui.menu.MHandledItem handledItem = ((org.eclipse.e4.ui.model.application.ui.menu.MHandledItem) (item)); org.eclipse.e4.core.contexts.IEclipseContext context = getContext(item); org.eclipse.e4.ui.bindings.EBindingService bs = ((org.eclipse.e4.ui.bindings.EBindingService) (context.get(org.eclipse.e4.ui.bindings.EBindingService.class.getName()))); if (bs != null) { org.eclipse.core.commands.ParameterizedCommand cmd = handledItem.getWbCommand(); if (cmd == null) { cmd = generateParameterizedCommand(handledItem, context); } org.eclipse.jface.bindings.TriggerSequence sequence = bs.getBestSequenceFor(handledItem.getWbCommand()); if (sequence != null) { if (text == null) { try { text = cmd.getName(); } catch (org.eclipse.core.commands.common.NotDefinedException e) { return null; } } text = ((text + " (") + (sequence.format())) + ')'; } } return text; } return text; }
private void updateEncodingState(boolean useDefault) { defaultEncodingButton.setSelection(useDefault); otherEncodingButton.setSelection((!useDefault)); if (useDefault) { encodingCombo.setText(getDefaultEnc()); } encodingCombo.setEnabled((!useDefault)); setPresentsDefaultValue(useDefault); updateValidState(); }
public void moveToTrim(org.eclipse.ui.internal.ViewStack vs, boolean restoreOnUnzoom) { org.eclipse.swt.graphics.Rectangle stackBounds = vs.getBounds(); if ((stackBounds.width) == 0) return; int paneOrientation = ((stackBounds.width) > (stackBounds.height)) ? org.eclipse.swt.SWT.HORIZONTAL : org.eclipse.swt.SWT.VERTICAL; vs.deferUpdates(true); java.util.List toMove = getTrueViewOrder(vs); for (java.util.Iterator viewIter = toMove.iterator(); viewIter.hasNext();) { org.eclipse.ui.IViewReference ref = ((org.eclipse.ui.IViewReference) (viewIter.next())); addViewReference(vs.getID(), (-1), ref, false); } vs.deferUpdates(false); org.eclipse.ui.internal.ViewStackTrimToolBar vstb = getTrimForViewStack(vs.getID(), perspective.calcStackSide(stackBounds), paneOrientation); vstb.setRestoreOnUnzoom(restoreOnUnzoom); updateTrim(vstb.getId()); }
protected void cancelPressed() { java.util.Iterator nodes = preferenceManager.getElements(PreferenceManager.PRE_ORDER).iterator(); final boolean[] cancelOK = new boolean[]{ true }; while (nodes.hasNext()) { final org.eclipse.jface.preference.IPreferenceNode node = ((org.eclipse.jface.preference.IPreferenceNode) (nodes.next())); if ((getPage(node)) != null) { org.eclipse.jface.util.SafeRunnable.run(new org.eclipse.jface.util.SafeRunnable() { public void run() { if (!(getPage(node).performCancel())) { cancelOK[0] = false; } } }); if (!(cancelOK[0])) return; } } handleSave(); setReturnCode(org.eclipse.jface.preference.CANCEL); close(); }
private org.eclipse.e4.ui.model.application.ui.basic.MPart createPart(org.eclipse.e4.ui.model.application.descriptor.basic.MPartDescriptor descriptor) { if (descriptor == null) { return null; } org.eclipse.e4.ui.model.application.ui.basic.MPart part = BasicFactoryImpl.eINSTANCE.createPart(); part.setElementId(descriptor.getElementId()); part.getMenus().addAll(org.eclipse.emf.ecore.util.EcoreUtil.copyAll(descriptor.getMenus())); if ((descriptor.getToolbar()) != null) { part.setToolbar(((org.eclipse.e4.ui.model.application.ui.menu.MToolBar) (org.eclipse.emf.ecore.util.EcoreUtil.copy(((org.eclipse.emf.ecore.EObject) (descriptor.getToolbar())))))); } part.setContributorURI(descriptor.getContributorURI()); part.setCloseable(descriptor.isCloseable()); part.setContributionURI(descriptor.getContributionURI()); part.setLabel(descriptor.getLabel()); part.setIconURI(descriptor.getIconURI()); part.setTooltip(descriptor.getTooltip()); part.getHandlers().addAll(org.eclipse.emf.ecore.util.EcoreUtil.copyAll(descriptor.getHandlers())); part.getTags().addAll(descriptor.getTags()); part.getPersistedState().putAll(descriptor.getPersistedState()); part.getBindingContexts().addAll(descriptor.getBindingContexts()); return part; }
protected void setSelectionToWidget(java.util.List v, boolean reveal) { if (v == null) { setSelection(new java.util.ArrayList(0)); return; } int size = v.size(); java.util.List newSelection = new java.util.ArrayList(size); for (int i = 0; i < size; ++i) { org.eclipse.swt.widgets.Widget w = internalExpand(v.get(i), false); if (w instanceof org.eclipse.swt.widgets.Item) { newSelection.add(w); } } setSelection(newSelection); if (reveal && ((newSelection.size()) > 0)) { showItem(((org.eclipse.swt.widgets.Item) (newSelection.get(0)))); } }
public void done() { fStartTime = 0; if ((fProgressBar) != null) { fProgressBar.sendRemainingWork(); fProgressBar.done(); } setMessage(""); hideProgress(); }
protected org.eclipse.swt.widgets.Control createDialogArea(org.eclipse.swt.widgets.Composite parent) { org.eclipse.swt.widgets.Composite composite = ((org.eclipse.swt.widgets.Composite) (super.createDialogArea(parent))); table = new org.eclipse.swt.widgets.Table(composite, (((((org.eclipse.swt.SWT.BORDER) | (org.eclipse.swt.SWT.SINGLE)) | (org.eclipse.swt.SWT.V_SCROLL)) | (org.eclipse.swt.SWT.H_SCROLL)) | (org.eclipse.swt.SWT.FULL_SELECTION))); for (int i = 0; i < (columnObjects.length); i++) { org.eclipse.swt.widgets.TableItem tableItem = new org.eclipse.swt.widgets.TableItem(table, org.eclipse.swt.SWT.NONE); tableItem.setText(columnObjects[i].name); tableItem.setImage(columnObjects[i].image); tableItem.setData(columnObjects[i]); } org.eclipse.jface.layout.GridDataFactory.defaultsFor(table).span(1, (moveableColumnsFound ? 3 : 1)).applyTo(table); if (moveableColumnsFound) { upButton = new org.eclipse.swt.widgets.Button(composite, org.eclipse.swt.SWT.PUSH); upButton.setText(org.eclipse.jface.resource.JFaceResources.getString("ConfigureColumnsDialog_up")); upButton.addListener(SWT.Selection, new org.eclipse.swt.widgets.Listener() { public void handleEvent(org.eclipse.swt.widgets.Event event) { handleMove(table, true); } }); setButtonLayoutData(upButton); downButton = new org.eclipse.swt.widgets.Button(composite, org.eclipse.swt.SWT.PUSH); downButton.setText(org.eclipse.jface.resource.JFaceResources.getString("ConfigureColumnsDialog_down")); downButton.addListener(SWT.Selection, new org.eclipse.swt.widgets.Listener() { public void handleEvent(org.eclipse.swt.widgets.Event event) { handleMove(table, false); } }); setButtonLayoutData(downButton); createLabel(composite, ""); } org.eclipse.swt.widgets.Composite widthComposite = new org.eclipse.swt.widgets.Composite(composite, org.eclipse.swt.SWT.NONE); createLabel(widthComposite, org.eclipse.jface.resource.JFaceResources.getString("ConfigureColumnsDialog_WidthOfSelectedColumn")); text = new org.eclipse.swt.widgets.Text(widthComposite, ((org.eclipse.swt.SWT.SINGLE) | (org.eclipse.swt.SWT.BORDER))); text.setText(java.lang.Integer.toString(1000)); org.eclipse.jface.layout.GridLayoutFactory.fillDefaults().numColumns(2).applyTo(widthComposite); int numColumns = (moveableColumnsFound) ? 2 : 1; org.eclipse.jface.layout.GridDataFactory.defaultsFor(widthComposite).grab(false, false).span(numColumns, 1).applyTo(widthComposite); org.eclipse.jface.layout.GridLayoutFactory.swtDefaults().numColumns(numColumns).applyTo(composite); table.addListener(SWT.Selection, new org.eclipse.swt.widgets.Listener() { public void handleEvent(org.eclipse.swt.widgets.Event event) { handleSelectionChanged(table.indexOf(((org.eclipse.swt.widgets.TableItem) (event.item)))); } }); text.addListener(SWT.Modify, new org.eclipse.swt.widgets.Listener() { public void handleEvent(org.eclipse.swt.widgets.Event event) { org.eclipse.jface.internal.ConfigureColumnsDialog.ColumnObject columnObject = columnObjects[table.getSelectionIndex()]; if (!(columnObject.resizable)) { return; } try { int width = java.lang.Integer.parseInt(text.getText()); columnObject.width = width; } catch (java.lang.NumberFormatException ex) { } } }); return composite; }
@java.lang.Override public java.lang.Object compute(org.eclipse.e4.core.contexts.IEclipseContext context) { org.eclipse.e4.ui.model.application.ui.MContext perceivedRoot = ((org.eclipse.e4.ui.model.application.ui.MContext) (context.get(org.eclipse.e4.ui.model.application.ui.basic.MWindow.class.getName()))); if (perceivedRoot == null) { perceivedRoot = ((org.eclipse.e4.ui.model.application.ui.MContext) (context.get(org.eclipse.e4.ui.model.application.MApplication.class.getName()))); if (perceivedRoot == null) { org.eclipse.e4.core.contexts.IEclipseContext ctxt = ((org.eclipse.e4.core.contexts.IEclipseContext) (appContext.getLocal(IContextConstants.ACTIVE_CHILD))); if (ctxt == null) { return null; } log(); return ctxt.get(org.eclipse.e4.ui.model.application.ui.basic.MWindow.class); } } org.eclipse.e4.core.contexts.IEclipseContext current = perceivedRoot.getContext(); if (current == null) { org.eclipse.e4.core.contexts.IEclipseContext ctxt = ((org.eclipse.e4.core.contexts.IEclipseContext) (appContext.getLocal(IContextConstants.ACTIVE_CHILD))); if (ctxt == null) { return null; } log(); return ctxt.get(org.eclipse.e4.ui.model.application.ui.basic.MWindow.class); } org.eclipse.e4.core.contexts.IEclipseContext next = ((org.eclipse.e4.core.contexts.IEclipseContext) (current.getLocal(IContextConstants.ACTIVE_CHILD))); org.eclipse.e4.ui.model.application.ui.advanced.MPerspective candidate = null; while (next != null) { current = next; org.eclipse.e4.ui.model.application.ui.advanced.MPerspective perspective = current.get(org.eclipse.e4.ui.model.application.ui.advanced.MPerspective.class); if (perspective != null) { candidate = perspective; } next = ((org.eclipse.e4.core.contexts.IEclipseContext) (current.getLocal(IContextConstants.ACTIVE_CHILD))); } if (candidate != null) { return candidate; } org.eclipse.e4.ui.model.application.ui.MUIElement window = ((org.eclipse.e4.ui.model.application.ui.MUIElement) (current.get(org.eclipse.e4.ui.model.application.ui.basic.MWindow.class.getName()))); if (window == null) { org.eclipse.e4.core.contexts.IEclipseContext ctxt = ((org.eclipse.e4.core.contexts.IEclipseContext) (appContext.getLocal(IContextConstants.ACTIVE_CHILD))); if (ctxt == null) { return null; } log(); return ctxt.get(org.eclipse.e4.ui.model.application.ui.basic.MWindow.class); } org.eclipse.e4.ui.model.application.ui.MElementContainer<?> parent = window.getParent(); while ((parent != null) && (!(parent instanceof org.eclipse.e4.ui.model.application.MApplication))) { window = parent; parent = parent.getParent(); } return window; }
private boolean validateVariableName() { if ((validationStatus) == (IMessageProvider.ERROR)) return false; java.lang.String message = standardMessage; int newValidationStatus = IMessageProvider.NONE; if ((variableName.length()) == 0) { newValidationStatus = IMessageProvider.ERROR; message = org.eclipse.ui.internal.WorkbenchMessages.getString("PathVariableDialog.variableNameEmptyMessage"); } else { org.eclipse.core.runtime.IStatus status = pathVariableManager.validateName(variableName); if (!(status.isOK())) { newValidationStatus = IMessageProvider.ERROR; message = status.getMessage(); } else if ((namesInUse.contains(variableName)) && (!(variableName.equals(originalName)))) { message = org.eclipse.ui.internal.WorkbenchMessages.getString("PathVariableDialog.variableAlreadyExistsMessage"); newValidationStatus = IMessageProvider.WARNING; } } if (((validationStatus) == (IMessageProvider.NONE)) || (newValidationStatus == (IMessageProvider.ERROR))) { validationStatus = newValidationStatus; setMessage(message, validationStatus); } return (validationStatus) != (IMessageProvider.ERROR); }
public void update(java.lang.String id) { if ((widget) != null) { if ((widget) instanceof org.eclipse.swt.widgets.MenuItem) { org.eclipse.swt.widgets.MenuItem item = ((org.eclipse.swt.widgets.MenuItem) (widget)); java.lang.String text = label; if (text == null) { if ((command) != null) { try { text = command.getCommand().getName(); } catch (org.eclipse.core.commands.common.NotDefinedException e) { org.eclipse.ui.internal.WorkbenchPlugin.log(("Update item failed " + (getId())), e); } } } text = updateMnemonic(text); java.lang.String keyBindingText = null; if ((command) != null) { org.eclipse.jface.bindings.TriggerSequence binding = bindingService.getBestActiveBindingFor(command); if (binding != null) { keyBindingText = binding.format(); } } if (text != null) { if (keyBindingText == null) { item.setText(text); } else { item.setText(((text + '\t') + keyBindingText)); } } updateIcons(); if ((item.getSelection()) != (checkedState)) { item.setSelection(checkedState); } boolean shouldBeEnabled = isEnabled(); if ((item.getEnabled()) != shouldBeEnabled) { item.setEnabled(shouldBeEnabled); } } else if ((widget) instanceof org.eclipse.swt.widgets.ToolItem) { org.eclipse.swt.widgets.ToolItem item = ((org.eclipse.swt.widgets.ToolItem) (widget)); java.lang.String text = label; if (text == null) { if ((command) != null) { try { text = command.getCommand().getName(); } catch (org.eclipse.core.commands.common.NotDefinedException e) { org.eclipse.ui.internal.WorkbenchPlugin.log(("Update item failed " + (getId())), e); } } } if ((icon) != null) { updateIcons(); } if ((((icon) == null) || (((mode) & (org.eclipse.ui.menus.CommandContributionItem.MODE_FORCE_TEXT)) == (org.eclipse.ui.menus.CommandContributionItem.MODE_FORCE_TEXT))) && (text != null)) { item.setText(text); } if ((tooltip) != null) item.setToolTipText(tooltip); else { if (text != null) { item.setToolTipText(text); } } if ((item.getSelection()) != (checkedState)) { item.setSelection(checkedState); } boolean shouldBeEnabled = isEnabled(); if ((item.getEnabled()) != shouldBeEnabled) { item.setEnabled(shouldBeEnabled); } } } }
@javax.annotation.PostConstruct void createWidget(final org.eclipse.swt.widgets.Composite parent) { final org.eclipse.swt.widgets.Composite comp = new org.eclipse.swt.widgets.Composite(parent, org.eclipse.swt.SWT.NONE); comp.setLayout(new org.eclipse.swt.layout.GridLayout()); final org.eclipse.swt.widgets.Text text = new org.eclipse.swt.widgets.Text(comp, ((org.eclipse.swt.SWT.SEARCH) | (org.eclipse.swt.SWT.ICON_SEARCH))); org.eclipse.jface.layout.GridDataFactory.fillDefaults().hint(100, SWT.DEFAULT).applyTo(text); text.setMessage(QuickAccessMessages.QuickAccess_EnterSearch); org.eclipse.ui.internal.quickaccess.QuickAccessProvider[] providers = new org.eclipse.ui.internal.quickaccess.QuickAccessProvider[]{ new org.eclipse.ui.internal.quickaccess.EditorProvider(), new org.eclipse.ui.internal.quickaccess.ViewProvider(), new org.eclipse.ui.internal.quickaccess.PerspectiveProvider(), new org.eclipse.ui.internal.quickaccess.CommandProvider(), new org.eclipse.ui.internal.quickaccess.ActionProvider(), new org.eclipse.ui.internal.quickaccess.WizardProvider(), new org.eclipse.ui.internal.quickaccess.PreferenceProvider(), new org.eclipse.ui.internal.quickaccess.PropertiesProvider() }; org.eclipse.ui.internal.quickaccess.QuickAccessContents quickAccessContents = new org.eclipse.ui.internal.quickaccess.QuickAccessContents(providers) { void updateFeedback(boolean filterTextEmpty, boolean showAllMatches) { } void doClose() { } org.eclipse.ui.internal.quickaccess.QuickAccessElement getPerfectMatch(java.lang.String filter) { return null; } void handleElementSelected(java.lang.String string, java.lang.Object selectedElement) { if (selectedElement instanceof org.eclipse.ui.internal.quickaccess.QuickAccessElement) { org.eclipse.ui.internal.quickaccess.QuickAccessElement element = ((org.eclipse.ui.internal.quickaccess.QuickAccessElement) (selectedElement)); text.setText(""); element.execute(); } } }; quickAccessContents.hookFilterText(text); shell = new org.eclipse.swt.widgets.Shell(parent.getShell(), ((org.eclipse.swt.SWT.RESIZE) | (org.eclipse.swt.SWT.ON_TOP))); shell.setBackground(shell.getDisplay().getSystemColor(SWT.COLOR_WHITE)); org.eclipse.jface.layout.GridLayoutFactory.fillDefaults().applyTo(shell); quickAccessContents.createTable(shell, org.eclipse.jface.window.Window.getDefaultOrientation()); text.addModifyListener(new org.eclipse.swt.events.ModifyListener() { public void modifyText(org.eclipse.swt.events.ModifyEvent e) { boolean wasVisible = shell.getVisible(); boolean nowVisible = (text.getText().length()) > 0; if ((!wasVisible) && nowVisible) { org.eclipse.swt.graphics.Rectangle tempBounds = comp.getBounds(); org.eclipse.swt.graphics.Rectangle compBounds = e.display.map(comp, null, tempBounds); org.eclipse.swt.graphics.Rectangle monitorBounds = comp.getMonitor().getBounds(); int width = java.lang.Math.max(350, compBounds.width); int height = 250; if (((compBounds.x) + width) > (monitorBounds.width)) { compBounds.x = (monitorBounds.width) - width; } if (((compBounds.y) + height) > (monitorBounds.height)) { compBounds.y = ((compBounds.y) - (tempBounds.height)) - height; } shell.setBounds(compBounds.x, ((compBounds.y) + (compBounds.height)), width, height); shell.layout(); } shell.setVisible(nowVisible); } }); text.addKeyListener(new org.eclipse.swt.events.KeyAdapter() { @java.lang.Override public void keyPressed(org.eclipse.swt.events.KeyEvent e) { if ((e.keyCode) == (org.eclipse.swt.SWT.ESC)) { text.setText(""); } } }); }
public void refresh(java.lang.Object element, boolean updateLabels) { if (list.isDisposed()) return; if (filtered(element)) return; org.eclipse.ui.internal.progress.NewProgressViewer.JobTreeItem ji = findJobItem(element, false); if (ji == null) { ji = findJobItem(element, true); relayout(true, true); } else { if (ji.refresh()) relayout(true, true); } }
protected org.eclipse.jface.viewers.TableViewer createTableViewer(org.eclipse.swt.widgets.Composite parent, int style) { org.eclipse.swt.widgets.Table table = new org.eclipse.swt.widgets.Table(parent, ((org.eclipse.swt.SWT.SINGLE) | (style & (~(org.eclipse.swt.SWT.MULTI))))); table.setLayoutData(new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.VERTICAL_ALIGN_BEGINNING)); org.eclipse.jface.viewers.TableViewer tableViewer = new org.eclipse.jface.viewers.TableViewer(table) { protected void internalRefresh(java.lang.Object element) { boolean usingMotif = org.eclipse.jface.util.Util.isMotif(); try { if (usingMotif) { getTable().setRedraw(false); } super.internalRefresh(element); } finally { if (usingMotif) { getTable().setRedraw(true); } } } }; tableViewer.addFilter(new org.eclipse.ui.internal.presentations.NamePatternFilter()); tableViewer.setContentProvider(new org.eclipse.ui.internal.presentations.BasicPartList.BasicStackListContentProvider()); if (((org.eclipse.ui.internal.tweaklets.TabBehaviour) (org.eclipse.ui.internal.tweaklets.Tweaklets.get(TabBehaviour.KEY))).sortEditorListAlphabetically()) { tableViewer.setComparator(new org.eclipse.ui.internal.presentations.BasicPartList.BasicStackListViewerComparator()); } tableViewer.setLabelProvider(new org.eclipse.ui.internal.presentations.BasicPartList.BasicStackListLabelProvider()); org.eclipse.jface.viewers.ColumnViewerToolTipSupport.enableFor(tableViewer); return tableViewer; }
public void widgetSelected(org.eclipse.ui.internal.dialogs.SelectionEvent event) { org.eclipse.ui.internal.fonts.FontDefinition definition = getSelectedFontDefinition(); if (definition != null) { org.eclipse.ui.internal.dialogs.FontDialog fontDialog = new org.eclipse.ui.internal.dialogs.FontDialog(changeFontButton.getShell()); org.eclipse.swt.graphics.FontData[] currentData = getFontDataSetting(definition); fontDialog.setFontList(currentData); if ((fontDialog.open()) != null) { fontDataSettings.put(definition.getId(), fontDialog.getFontList()); updateForSelectedFontDefinition(definition); } } }
private void getChangedIds(org.eclipse.ui.internal.dialogs.CustomizePerspectiveDialog.DisplayItem item, java.util.List invisible, java.util.List visible) { if (item instanceof org.eclipse.ui.internal.dialogs.CustomizePerspectiveDialog.ShortcutItem) return; if (((item == (wizards)) || (item == (perspectives))) || (item == (views))) { if (!(item.getState())) { java.lang.String id = org.eclipse.ui.internal.dialogs.CustomizePerspectiveDialog.getCommandID(item); invisible.add(id); } } else if ((item.getChildren().size()) > 0) { if (item.isChangedByUser()) { java.lang.String id = org.eclipse.ui.internal.dialogs.CustomizePerspectiveDialog.getCommandID(item); if (item.getState()) visible.add(id); else invisible.add(id); } for (java.util.Iterator i = item.getChildren().iterator(); i.hasNext();) { getChangedIds(((org.eclipse.ui.internal.dialogs.CustomizePerspectiveDialog.DisplayItem) (i.next())), invisible, visible); } } else if (item.isChangedByUser()) { java.lang.String id = org.eclipse.ui.internal.dialogs.CustomizePerspectiveDialog.getCommandID(item); if (item.getState()) visible.add(id); else invisible.add(id); } }
public java.lang.Object getAdapter(java.lang.Class key) { org.eclipse.ui.part.IPage page = getCurrentPage(); if (page instanceof org.eclipse.core.runtime.IAdaptable) { java.lang.Object adaptable = ((org.eclipse.core.runtime.IAdaptable) (page)).getAdapter(key); if (adaptable != null) return adaptable; } return super.getAdapter(key); }
private void filterKeySequenceBindings(org.eclipse.swt.widgets.Event event) { if (((event.keyCode) & (org.eclipse.swt.SWT.MODIFIER_MASK)) != 0) { return; } java.util.List keyStrokes = org.eclipse.ui.internal.keys.WorkbenchKeyboard.generatePossibleKeyStrokes(event); if (org.eclipse.ui.internal.keys.WorkbenchKeyboard.isOutOfOrderKey(keyStrokes)) { org.eclipse.swt.widgets.Widget widget = event.widget; if ((((event.character) == (org.eclipse.swt.SWT.DEL)) && (((event.stateMask) & (org.eclipse.swt.SWT.MODIFIER_MASK)) == 0)) && (((widget instanceof org.eclipse.swt.widgets.Text) || (widget instanceof org.eclipse.swt.widgets.Combo)) || (widget instanceof org.eclipse.swt.browser.Browser))) { return; } else if (widget instanceof org.eclipse.swt.custom.StyledText) { if ((event.type) == (org.eclipse.swt.SWT.KeyDown)) { if (!(outOfOrderVerifyListener.isActive(event.time))) { ((org.eclipse.swt.custom.StyledText) (widget)).addVerifyKeyListener(outOfOrderVerifyListener); outOfOrderVerifyListener.setActive(event.time); } } } else { if (!(outOfOrderListener.isActive(event.time))) { widget.addListener(SWT.KeyDown, outOfOrderListener); outOfOrderListener.setActive(event.time); } } } else { processKeyEvent(keyStrokes, event); } }
public java.lang.Object start(org.eclipse.equinox.app.IApplicationContext applicationContext) throws java.lang.Exception { org.eclipse.core.runtime.IProduct product = org.eclipse.core.runtime.Platform.getProduct(); if ((product.getName()) != null) { org.eclipse.swt.widgets.Display.setAppName(product.getName()); } org.eclipse.swt.widgets.Display display = getApplicationDisplay(); org.eclipse.e4.ui.internal.workbench.E4Workbench workbench = createE4Workbench(applicationContext, display); org.eclipse.osgi.service.datalocation.Location instanceLocation = ((org.eclipse.osgi.service.datalocation.Location) (workbench.getContext().get(E4Workbench.INSTANCE_LOCATION))); org.eclipse.swt.widgets.Shell shell = display.getActiveShell(); if (shell == null) shell = new org.eclipse.swt.widgets.Shell(); try { if (!(checkInstanceLocation(instanceLocation, shell))) return org.eclipse.equinox.app.IApplication.EXIT_OK; org.eclipse.e4.core.contexts.IEclipseContext workbenchContext = workbench.getContext(); workbenchContext.set(org.eclipse.swt.widgets.Display.class, display); workbench.createAndRunUI(workbench.getApplication()); if ((lcManager) != null) { org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(lcManager, org.eclipse.e4.ui.workbench.lifecycle.PreSave.class, workbenchContext, null); } saveModel(); workbench.close(); return org.eclipse.equinox.app.IApplication.EXIT_OK; } finally { if (display != null) display.dispose(); if (instanceLocation != null) instanceLocation.release(); } }
public java.lang.String getPluginId() { org.eclipse.ui.IPluginContribution contribution = ((org.eclipse.ui.IPluginContribution) (org.eclipse.ui.internal.util.Util.getAdapter(wizardElement, org.eclipse.ui.IPluginContribution.class))); if (contribution != null) { return contribution.getPluginId(); } return null; }
public DynamicHelpAction(org.eclipse.ui.IWorkbenchWindow window) { if (window == null) { throw new java.lang.IllegalArgumentException(); } this.workbenchWindow = window; setActionDefinitionId("org.eclipse.ui.help.dynamicHelp"); java.lang.String overrideText = org.eclipse.ui.internal.util.PrefUtil.getAPIPreferenceStore().getString(IWorkbenchPreferenceConstants.DYNAMIC_HELP_ACTION_TEXT); if ("".equals(overrideText)) { setText(appendAccelerator(WorkbenchMessages.DynamicHelpAction_text)); setToolTipText(WorkbenchMessages.DynamicHelpAction_toolTip); } else { setText(appendAccelerator(overrideText)); setToolTipText(org.eclipse.jface.action.Action.removeMnemonics(overrideText)); } window.getWorkbench().getHelpSystem().setHelp(this, IWorkbenchHelpContextIds.DYNAMIC_HELP_ACTION); }
void populateTopTrimContributions() { if ((getTopTrim()) != null) { throw new java.lang.IllegalStateException("The top trim is already set"); } org.eclipse.e4.ui.model.application.ui.basic.MTrimBar trimBar = BasicFactoryImpl.eINSTANCE.createTrimBar(); trimBar.setElementId(org.eclipse.ui.internal.WorkbenchWindow.MAIN_TOOLBAR_ID); fill(trimBar, getCoolBarManager2()); org.eclipse.e4.ui.model.application.ui.menu.MToolControl spacerControl = MenuFactoryImpl.eINSTANCE.createToolControl(); spacerControl.setElementId("PerspectiveSpacer"); spacerControl.setContributionURI("platform:/plugin/org.eclipse.e4.ui.workbench.renderers.swt/org.eclipse.e4.ui.workbench.renderers.swt.LayoutModifierToolControl"); spacerControl.getTags().add(TrimBarLayout.SPACER); org.eclipse.e4.ui.model.application.ui.menu.MToolControl searchControl = MenuFactoryImpl.eINSTANCE.createToolControl(); searchControl.setElementId("SearchField"); searchControl.setContributionURI("platform:/plugin/org.eclipse.ui.workbench/org.eclipse.ui.internal.quickaccess.SearchField"); org.eclipse.e4.ui.model.application.ui.menu.MToolControl glueControl = MenuFactoryImpl.eINSTANCE.createToolControl(); glueControl.setElementId("Search-PS Glue"); glueControl.setContributionURI("platform:/plugin/org.eclipse.e4.ui.workbench.renderers.swt/org.eclipse.e4.ui.workbench.renderers.swt.LayoutModifierToolControl"); glueControl.getTags().add(TrimBarLayout.GLUE); org.eclipse.e4.ui.model.application.ui.menu.MToolControl switcherControl = MenuFactoryImpl.eINSTANCE.createToolControl(); switcherControl.setToBeRendered(getWindowConfigurer().getShowPerspectiveBar()); switcherControl.setElementId("PerspectiveSwitcher"); switcherControl.setContributionURI("platform:/plugin/org.eclipse.e4.ui.workbench.addons.swt/org.eclipse.e4.ui.workbench.addons.perspectiveswitcher.PerspectiveSwitcher"); trimBar.getChildren().add(spacerControl); trimBar.getChildren().add(searchControl); trimBar.getChildren().add(glueControl); trimBar.getChildren().add(switcherControl); trimBar.setToBeRendered(true); workbenchTrimElements.add(spacerControl); workbenchTrimElements.add(searchControl); workbenchTrimElements.add(glueControl); workbenchTrimElements.add(switcherControl); java.util.List<org.eclipse.e4.ui.model.application.ui.basic.MTrimBar> trimBars = model.getTrimBars(); trimBars.add(0, trimBar); }
private final void updateComboCommand() { final org.eclipse.core.commands.ParameterizedCommand command = getParameterizedCommand(); final java.lang.String categoryId = getCategoryId(); java.util.Set commandIds = ((java.util.Set) (commandIdsByCategoryId.get(categoryId))); if (commandIds == null) { commandIds = java.util.Collections.EMPTY_SET; } java.util.List commands = new java.util.ArrayList(); final java.util.Iterator commandIdItr = commandIds.iterator(); while (commandIdItr.hasNext()) { final java.lang.String currentCommandId = ((java.lang.String) (commandIdItr.next())); final org.eclipse.core.commands.Command currentCommand = commandService.getCommand(currentCommandId); try { commands.addAll(org.eclipse.core.commands.ParameterizedCommand.generateCombinations(currentCommand)); } catch (final org.eclipse.core.commands.common.NotDefinedException e) { } } commands = sortParameterizedCommands(commands); final int commandCount = commands.size(); this.commands = ((org.eclipse.core.commands.ParameterizedCommand[]) (commands.toArray(new org.eclipse.core.commands.ParameterizedCommand[commandCount]))); final java.lang.String[] commandNames = new java.lang.String[commandCount]; for (int i = 0; i < commandCount; i++) { try { commandNames[i] = this.commands[i].getName(); } catch (final org.eclipse.core.commands.common.NotDefinedException e) { throw new java.lang.Error("Concurrent modification of the command's defined state"); } } final java.lang.String[] currentItems = comboCommand.getItems(); if (!(java.util.Arrays.equals(currentItems, commandNames))) { comboCommand.setItems(commandNames); } setParameterizedCommand(command); if (((comboCommand.getSelectionIndex()) == (-1)) && (commandCount > 0)) { comboCommand.select(0); } }
private final void convertActionToHandler(final org.eclipse.core.runtime.IConfigurationElement element, final java.lang.String actionId, final org.eclipse.core.commands.ParameterizedCommand command, final org.eclipse.core.expressions.Expression activeWhenExpression, final java.lang.String viewId, final java.util.List warningsToLog) { final boolean retarget = readBoolean(element, org.eclipse.ui.internal.menus.ATT_RETARGET, false); final java.lang.String classString = readOptional(element, org.eclipse.ui.internal.menus.ATT_CLASS); if (retarget) { if ((classString != null) && (!(isPulldown(element)))) { addWarning(warningsToLog, "The class was not null but retarget was set to true", element, actionId, "class", classString); } final org.eclipse.ui.internal.handlers.IActionCommandMappingService mappingService = ((org.eclipse.ui.internal.handlers.IActionCommandMappingService) (window.getService(org.eclipse.ui.internal.handlers.IActionCommandMappingService.class))); if (mappingService != null) { mappingService.map(actionId, command.getId()); } else { addWarning(warningsToLog, "Retarget service unavailable", element, actionId); } return; } else if (classString == null) { addWarning(warningsToLog, "There was no class provided, and the action is not retargettable", element, actionId); return; } org.eclipse.ui.SelectionEnabler enabler = null; if ((element.getAttribute(org.eclipse.ui.internal.menus.ATT_ENABLES_FOR)) != null) { enabler = new org.eclipse.ui.SelectionEnabler(element); } else { org.eclipse.core.runtime.IConfigurationElement[] kids = element.getChildren(org.eclipse.ui.internal.menus.TAG_ENABLEMENT); if ((kids.length) > 0) { enabler = new org.eclipse.ui.SelectionEnabler(element); } } final org.eclipse.core.expressions.Expression enabledWhenExpression; if (enabler == null) { enabledWhenExpression = null; } else { enabledWhenExpression = new org.eclipse.ui.internal.expressions.LegacySelectionEnablerWrapper(enabler, window); } final org.eclipse.ui.internal.handlers.ActionDelegateHandlerProxy handler = new org.eclipse.ui.internal.handlers.ActionDelegateHandlerProxy(element, ATT_CLASS, actionId, command, window, null, enabledWhenExpression, viewId); final java.lang.String helpContextId = readOptional(element, org.eclipse.ui.internal.menus.ATT_HELP_CONTEXT_ID); if (helpContextId != null) { commandService.setHelpContextId(handler, helpContextId); } final java.lang.String commandId = command.getId(); final org.eclipse.ui.handlers.IHandlerService service = ((org.eclipse.ui.handlers.IHandlerService) (window.getService(org.eclipse.ui.handlers.IHandlerService.class))); final org.eclipse.ui.handlers.IHandlerActivation handlerActivation; if (activeWhenExpression == null) { handlerActivation = service.activateHandler(commandId, handler); } else { handlerActivation = service.activateHandler(commandId, handler, activeWhenExpression); } handlerActivations.add(handlerActivation); }
public org.eclipse.core.runtime.IStatus restoreState(org.eclipse.ui.IMemento memento) { org.eclipse.core.runtime.MultiStatus result = new org.eclipse.core.runtime.MultiStatus(org.eclipse.ui.PlatformUI.PLUGIN_ID, org.eclipse.core.runtime.IStatus.OK, org.eclipse.ui.internal.WorkbenchMessages.getString("RootLayoutContainer.problemsRestoringPerspective"), null); if ((children) != null) { org.eclipse.ui.internal.EditorStack defaultWorkbook = null; for (int i = 0; i < (children.size()); i++) { org.eclipse.ui.internal.LayoutPart child = ((org.eclipse.ui.internal.LayoutPart) (children.get(i))); if ((child.getID()) == (org.eclipse.ui.internal.EditorSashContainer.DEFAULT_WORKBOOK_ID)) { defaultWorkbook = ((org.eclipse.ui.internal.EditorStack) (child)); if ((defaultWorkbook.getItemCount()) > 0) defaultWorkbook = null; } } if (defaultWorkbook != null) remove(defaultWorkbook); } org.eclipse.ui.IMemento[] infos = memento.getChildren(IWorkbenchConstants.TAG_INFO); java.util.Map mapIDtoPart = new java.util.HashMap(infos.length); for (int i = 0; i < (infos.length); i++) { org.eclipse.ui.IMemento childMem = infos[i]; java.lang.String partID = childMem.getString(IWorkbenchConstants.TAG_PART); java.lang.String relativeID = childMem.getString(IWorkbenchConstants.TAG_RELATIVE); int relationship = 0; int left = 0; int right = 0; float ratio = 0.5F; if (relativeID != null) { relationship = childMem.getInteger(IWorkbenchConstants.TAG_RELATIONSHIP).intValue(); java.lang.Float ratioFloat = childMem.getFloat(IWorkbenchConstants.TAG_RATIO); java.lang.Integer leftInt = childMem.getInteger(IWorkbenchConstants.TAG_RATIO_LEFT); java.lang.Integer rightInt = childMem.getInteger(IWorkbenchConstants.TAG_RATIO_RIGHT); if ((leftInt != null) && (rightInt != null)) { left = leftInt.intValue(); right = rightInt.intValue(); } else if (ratioFloat != null) { ratio = ratioFloat.floatValue(); } } org.eclipse.ui.internal.EditorStack workbook = org.eclipse.ui.internal.EditorStack.newEditorWorkbook(this, page); workbook.setID(partID); workbook.setContainer(this); org.eclipse.ui.IMemento workbookMemento = childMem.getChild(IWorkbenchConstants.TAG_FOLDER); if (workbookMemento != null) { result.add(workbook.restoreState(workbookMemento)); } if (relativeID == null) { add(workbook); } else { org.eclipse.ui.internal.LayoutPart refPart = ((org.eclipse.ui.internal.LayoutPart) (mapIDtoPart.get(relativeID))); if (refPart != null) { if ((left == 0) || (right == 0)) add(workbook, relationship, ratio, refPart); else add(workbook, relationship, left, right, refPart); } else { org.eclipse.ui.internal.WorkbenchPlugin.log(("Unable to find part for ID: " + relativeID)); } } mapIDtoPart.put(partID, workbook); } return result; }
public void fill(org.eclipse.ui.actions.Menu menu, int index) { org.eclipse.core.resources.IFile file = getFileResource(); if (file == null) { return; } org.eclipse.ui.actions.IEditorDescriptor defaultEditor = registry.getDefaultEditor(); org.eclipse.ui.actions.IEditorDescriptor preferredEditor = registry.getDefaultEditor(file); java.lang.Object[] editors = sorter.sort(registry.getEditors(file)); boolean defaultFound = false; java.util.ArrayList alreadyMapped = new java.util.ArrayList(); for (int i = 0; i < (editors.length); i++) { org.eclipse.ui.actions.IEditorDescriptor editor = ((org.eclipse.ui.actions.IEditorDescriptor) (editors[i])); if (!(alreadyMapped.contains(editor))) { createMenuItem(menu, editor, preferredEditor); if ((defaultEditor != null) && (editor.getId().equals(defaultEditor.getId()))) defaultFound = true; alreadyMapped.add(editor); } } if ((editors.length) > 0) new org.eclipse.ui.actions.MenuItem(menu, org.eclipse.swt.SWT.SEPARATOR); if ((!defaultFound) && (defaultEditor != null)) { createMenuItem(menu, defaultEditor, preferredEditor); } org.eclipse.ui.actions.IEditorDescriptor descriptor = org.eclipse.ui.internal.registry.EditorDescriptor.getSystemEditorDescriptor(); createMenuItem(menu, descriptor, preferredEditor); createDefaultMenuItem(menu, file); }
public void dispose() { if ((toolBarManager) != null) { toolBarManager.dispose(); } if (((coolItem) != null) && (!(coolItem.isDisposed()))) { coolItem.dispose(); } }
public void dispose() { if (((currentManager) != null) && ((currentManager.getSize()) > 0)) { org.eclipse.ui.menus.IMenuService service = ((org.eclipse.ui.menus.IMenuService) (locator.getService(org.eclipse.ui.menus.IMenuService.class))); if (service != null) { service.releaseContributions(currentManager); } currentManager.removeAll(); } }
protected org.eclipse.swt.widgets.Control createButtonBar(org.eclipse.swt.widgets.Composite parent) { org.eclipse.swt.widgets.Composite composite = new org.eclipse.swt.widgets.Composite(parent, org.eclipse.swt.SWT.NONE); org.eclipse.swt.layout.GridLayout layout = new org.eclipse.swt.layout.GridLayout(); layout.marginWidth = 0; layout.marginHeight = 0; layout.horizontalSpacing = 0; composite.setLayout(layout); composite.setLayoutData(new org.eclipse.swt.layout.GridData(org.eclipse.swt.SWT.FILL, org.eclipse.swt.SWT.CENTER, true, false)); composite.setFont(parent.getFont()); if (isHelpAvailable()) { org.eclipse.swt.widgets.Control helpControl = createHelpControl(composite); ((org.eclipse.swt.layout.GridData) (helpControl.getLayoutData())).horizontalIndent = convertHorizontalDLUsToPixels(IDialogConstants.HORIZONTAL_MARGIN); } org.eclipse.swt.widgets.Control buttonSection = super.createButtonBar(composite); ((org.eclipse.swt.layout.GridData) (buttonSection.getLayoutData())).grabExcessHorizontalSpace = true; return composite; }
public org.eclipse.ui.actions.ActionFactory.IWorkbenchAction create(org.eclipse.ui.IWorkbenchWindow window) { if (window == null) { throw new java.lang.IllegalArgumentException(); } org.eclipse.ui.actions.ActionFactory.WorkbenchCommandAction action = new org.eclipse.ui.actions.ActionFactory.WorkbenchCommandAction("org.eclipse.ui.window.openEditorDropDown", window); action.setText(WorkbenchMessages.WorkbookEditorsAction_label); action.setActionDefinitionId("org.eclipse.ui.window.openEditorDropDown"); action.setId(getId()); return action; }
public void addError(org.eclipse.ui.statushandlers.StatusAdapter statusAdapter, final boolean modal) { if ((org.eclipse.jface.dialogs.ErrorDialog.AUTOMATED_MODE) == true) { return; } final org.eclipse.ui.internal.statushandlers.StatusNotificationManager.StatusInfo statusInfo = new org.eclipse.ui.internal.statushandlers.StatusNotificationManager.StatusInfo(statusAdapter); if (!(org.eclipse.ui.PlatformUI.isWorkbenchRunning())) { org.eclipse.ui.internal.WorkbenchPlugin.log(statusInfo.getStatus().getStatus()); return; } if ((dialogOpened) == true) { if ((statusInfo.getStatus().getProperty(IProgressConstants.NO_IMMEDIATE_ERROR_PROMPT_PROPERTY)) != null) { statusInfo.getStatus().setProperty(IProgressConstants.NO_IMMEDIATE_ERROR_PROMPT_PROPERTY, java.lang.Boolean.FALSE); } org.eclipse.swt.widgets.Display.getDefault().syncExec(new java.lang.Runnable() { public void run() { openStatusDialog(modal, statusInfo); } }); } else { errors.add(statusInfo); java.lang.Object noPromptProperty = statusInfo.getStatus().getProperty(IProgressConstants.NO_IMMEDIATE_ERROR_PROMPT_PROPERTY); boolean prompt = true; if (noPromptProperty instanceof java.lang.Boolean) { prompt = !(((java.lang.Boolean) (noPromptProperty)).booleanValue()); } if (prompt) { dialogOpened = true; org.eclipse.swt.widgets.Display.getDefault().asyncExec(new java.lang.Runnable() { public void run() { dialog = new org.eclipse.ui.internal.statushandlers.StatusDialog(org.eclipse.ui.internal.progress.ProgressManagerUtil.getDefaultParent(), statusInfo, ((((org.eclipse.core.runtime.IStatus.OK) | (org.eclipse.core.runtime.IStatus.INFO)) | (org.eclipse.core.runtime.IStatus.WARNING)) | (org.eclipse.core.runtime.IStatus.ERROR)), modal); dialog.open(); dialog.getShell().addDisposeListener(disposeListener); } }); } } }
public void saveHistory(org.eclipse.ui.IMemento memento) { if ((this.selectionHistory) != null) this.selectionHistory.save(memento); }
@java.lang.Override public java.lang.Object[] filter(org.eclipse.jface.viewers.Viewer viewer, java.lang.Object parent, java.lang.Object[] elements) { java.util.ArrayList<java.lang.Object> result = new java.util.ArrayList<java.lang.Object>(); org.eclipse.jface.viewers.ViewerFilter viewerFilter = new org.eclipse.jface.viewers.ViewerFilter() { @java.lang.Override public boolean select(org.eclipse.jface.viewers.Viewer viewer, java.lang.Object parentElement, java.lang.Object element) { return (org.eclipse.ui.internal.dialogs.WizardPatternFilter.this.select(viewer, parentElement, element)) || (hasChildren(element)); } private boolean hasChildren(java.lang.Object element) { return (element instanceof org.eclipse.ui.internal.dialogs.WorkbenchWizardElement) && ((((org.eclipse.ui.internal.dialogs.WorkbenchWizardElement) (element)).getCollectionElement().size()) > 0); } }; for (java.lang.Object elem : super.filter(viewer, parent, elements)) { if (elem instanceof org.eclipse.ui.internal.dialogs.WizardCollectionElement) { java.lang.Object wizardCollection = org.eclipse.ui.internal.dialogs.WizardCollectionElement.filter(viewer, viewerFilter, ((org.eclipse.ui.internal.dialogs.WizardCollectionElement) (elem))); if (wizardCollection != null) { result.add(wizardCollection); } } else { result.add(elem); } } return result.toArray(); }
private void safeRemoveGui(org.eclipse.e4.ui.model.application.ui.MUIElement element) { if ((removeRoot) == null) removeRoot = element; renderedElements.remove(element); org.eclipse.e4.ui.model.application.ui.MUIElement parent = element.getParent(); org.eclipse.e4.ui.internal.workbench.swt.AbstractPartRenderer parentRenderer = (parent != null) ? getRendererFor(parent) : null; if (parentRenderer != null) { parentRenderer.hideChild(element.getParent(), element); } org.eclipse.e4.ui.internal.workbench.swt.AbstractPartRenderer renderer = getRendererFor(element); if (renderer != null) { if (element instanceof org.eclipse.e4.ui.model.application.ui.MElementContainer<?>) { org.eclipse.e4.ui.model.application.ui.MElementContainer<org.eclipse.e4.ui.model.application.ui.MUIElement> container = ((org.eclipse.e4.ui.model.application.ui.MElementContainer<org.eclipse.e4.ui.model.application.ui.MUIElement>) (element)); org.eclipse.e4.ui.model.application.ui.MUIElement selectedElement = container.getSelectedElement(); for (org.eclipse.e4.ui.model.application.ui.MUIElement child : container.getChildren()) { if (child != selectedElement) { removeGui(child); } } if (selectedElement != null) { removeGui(selectedElement); } } renderer.disposeWidget(element); if (element instanceof org.eclipse.e4.ui.model.application.MContribution) { org.eclipse.e4.core.contexts.IEclipseContext parentContext = renderer.getContext(element); org.eclipse.e4.core.contexts.ContextInjectionFactory.uninject(((org.eclipse.e4.ui.model.application.MContribution) (element)).getObject(), parentContext); ((org.eclipse.e4.ui.model.application.MContribution) (element)).setObject(null); } if (element instanceof org.eclipse.e4.ui.model.application.ui.MContext) { clearContext(((org.eclipse.e4.ui.model.application.ui.MContext) (element))); } } if ((removeRoot) == element) removeRoot = null; }
public void updateActionBars() { if ((updateDisabled) || (updatesDeferred())) { return; } getMenuBarManager().updateAll(false); try { getShell().setLayoutDeferred(true); getCoolBarManager2().update(false); } finally { getShell().setLayoutDeferred(false); } getStatusLineManager().update(false); }
private void updateEntry(org.eclipse.ui.views.properties.IPropertySheetEntry entry, org.eclipse.swt.custom.TableTreeItem item) { item.setData(entry); item.setText(0, entry.getDisplayName()); item.setText(1, entry.getValueAsString()); org.eclipse.swt.graphics.Image image = entry.getImage(); if ((item.getImage(1)) != image) item.setImage(1, image); updatePlus(entry, item); }
public final boolean isEnabled() { return isEnabledDisregardingCommand(); }
private void changeDefaultColors(org.eclipse.swt.widgets.Control control) { applyForegroundColor(getShell().getDisplay().getSystemColor(SWT.COLOR_WIDGET_FOREGROUND), control); applyBackgroundColor(getShell().getDisplay().getSystemColor(SWT.COLOR_WIDGET_BACKGROUND), control); }
public boolean select(org.eclipse.jface.viewers.Viewer viewer, java.lang.Object parentElement, java.lang.Object element) { org.eclipse.jface.viewers.ITreeContentProvider contentProvider = ((org.eclipse.jface.viewers.ITreeContentProvider) (((org.eclipse.jface.viewers.TreeViewer) (viewer)).getContentProvider())); java.lang.String text = null; java.lang.Object[] children = null; if (element instanceof org.eclipse.ui.views.IViewCategory) { org.eclipse.ui.views.IViewCategory desc = ((org.eclipse.ui.views.IViewCategory) (element)); children = contentProvider.getChildren(desc); text = desc.getLabel(); } else if (element instanceof org.eclipse.ui.views.IViewDescriptor) { org.eclipse.ui.views.IViewDescriptor desc = ((org.eclipse.ui.views.IViewDescriptor) (element)); children = contentProvider.getChildren(desc); text = desc.getLabel(); } if (wordMatches(text)) { if ((element instanceof org.eclipse.ui.views.IViewCategory) && (children != null)) { for (int i = 0; i < (children.length); i++) { if (select(viewer, element, children[i])) return true; } return false; } return true; } if ((matchItem) && (children != null)) { if ((filter(viewer, element, children).length) > 0) return true; } return false; }
public java.lang.Object[] getElements(java.lang.Object inputElement) { return sorter.sort(((java.lang.Object[]) (inputElement))); }
public void disposeManager() { if ((menuListener) != null) { getParentMenuManager().removeMenuListener(menuListener); menuListener = null; menuListeners.clear(); } if ((mapMenuToWrapper) != null) { java.util.Iterator iter = mapMenuToWrapper.values().iterator(); while (iter.hasNext()) { org.eclipse.jface.action.SubMenuManager wrapper = ((org.eclipse.jface.action.SubMenuManager) (iter.next())); wrapper.disposeManager(); } mapMenuToWrapper.clear(); mapMenuToWrapper = null; } super.disposeManager(); }
protected void saveWidgetValues() { org.eclipse.jface.dialogs.IDialogSettings settings = getDialogSettings(); if (((showAllCheck) != null) && (showAllCheck.getSelection())) { saveExpanded(settings, unfilteredTree, org.eclipse.ui.internal.dialogs.ShowViewDialog.STORE_EXPANDED_CATEGORIES_ID); } else { saveExpanded(settings, filteredTree, org.eclipse.ui.internal.dialogs.ShowViewDialog.STORE_EXPANDED_CATEGORIES_ID); } if ((showAllCheck) != null) { settings.put(org.eclipse.ui.internal.dialogs.ShowViewDialog.SHOW_ALL_ENABLED, showAllCheck.getSelection()); } }
public java.lang.Object start(org.eclipse.equinox.app.IApplicationContext appContext) throws java.lang.Exception { org.eclipse.swt.widgets.Display display = createDisplay(); try { org.eclipse.swt.widgets.Shell shell = org.eclipse.ui.internal.WorkbenchPlugin.getSplashShell(display); if (shell != null) { shell.setText(org.eclipse.ui.internal.ide.ChooseWorkspaceDialog.getWindowTitle()); shell.setImages(org.eclipse.jface.dialogs.Dialog.getDefaultImages()); } if (!(checkInstanceLocation(shell))) { org.eclipse.ui.internal.WorkbenchPlugin.unsetSplashShell(display); org.eclipse.core.runtime.Platform.endSplash(); return org.eclipse.equinox.app.IApplication.EXIT_OK; } int returnCode = org.eclipse.ui.PlatformUI.createAndRunWorkbench(display, new org.eclipse.ui.internal.ide.application.IDEWorkbenchAdvisor()); if (returnCode != (org.eclipse.ui.PlatformUI.RETURN_RESTART)) { return org.eclipse.equinox.app.IApplication.EXIT_OK; } return org.eclipse.ui.internal.ide.application.IDEApplication.EXIT_RELAUNCH.equals(java.lang.Integer.getInteger(org.eclipse.ui.internal.ide.application.IDEApplication.PROP_EXIT_CODE)) ? org.eclipse.ui.internal.ide.application.IDEApplication.EXIT_RELAUNCH : org.eclipse.equinox.app.IApplication.EXIT_RESTART; } finally { if (display != null) { display.dispose(); } org.eclipse.osgi.service.datalocation.Location instanceLoc = org.eclipse.core.runtime.Platform.getInstanceLocation(); if (instanceLoc != null) instanceLoc.release(); } }
public void setModel(org.eclipse.e4.ui.model.application.ui.menu.MHandledItem item) { model = item; setId(model.getElementId()); generateCommand(); if ((model.getCommand()) == null) { if ((logger) != null) { logger.error((("Element " + (model.getElementId())) + " invalid, no command defined.")); } } updateVisible(); }
public org.eclipse.ui.dialogs.IWorkingSetEditWizard createWorkingSetEditWizard(org.eclipse.ui.IWorkingSet workingSet) { java.lang.String editPageId = workingSet.getId(); org.eclipse.ui.internal.registry.WorkingSetRegistry registry = org.eclipse.ui.internal.WorkbenchPlugin.getDefault().getWorkingSetRegistry(); org.eclipse.ui.dialogs.IWorkingSetPage editPage = null; if (editPageId != null) { editPage = registry.getWorkingSetPage(editPageId); } if (editPage == null) { editPage = registry.getDefaultWorkingSetPage(); if (editPage == null) { return null; } } org.eclipse.ui.internal.dialogs.WorkingSetEditWizard editWizard = new org.eclipse.ui.internal.dialogs.WorkingSetEditWizard(editPage); editWizard.setSelection(workingSet); return editWizard; }
private org.eclipse.emf.ecore.EObject getOriginalContainer(org.eclipse.emf.ecore.EObject reference) { if ((changeDescription) == null) { return reference.eContainer(); } if (reference instanceof org.eclipse.e4.ui.model.application.commands.MCommandParameter) { org.eclipse.emf.common.util.EMap<org.eclipse.emf.ecore.EObject, org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.change.FeatureChange>> objectChanges = changeDescription.getObjectChanges(); boolean parametersChanged = false; for (java.util.Map.Entry<org.eclipse.emf.ecore.EObject, org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.change.FeatureChange>> entry : objectChanges.entrySet()) { org.eclipse.emf.ecore.EObject key = entry.getKey(); if (key instanceof org.eclipse.e4.ui.model.application.commands.MCommand) { for (org.eclipse.emf.ecore.change.FeatureChange change : entry.getValue()) { if (change.getFeatureName().equals(org.eclipse.e4.ui.internal.workbench.COMMAND_PARAMETERS_ATTNAME)) { java.util.List<?> parameters = ((java.util.List<?>) (change.getValue())); for (java.lang.Object parameter : parameters) { if (parameter == reference) { return key; } } parametersChanged = true; break; } } break; } } return parametersChanged ? null : reference.eContainer(); } if (reference instanceof org.eclipse.e4.ui.model.application.commands.MParameter) { org.eclipse.emf.common.util.EMap<org.eclipse.emf.ecore.EObject, org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.change.FeatureChange>> objectChanges = changeDescription.getObjectChanges(); boolean parametersChanged = false; for (java.util.Map.Entry<org.eclipse.emf.ecore.EObject, org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.change.FeatureChange>> entry : objectChanges.entrySet()) { org.eclipse.emf.ecore.EObject key = entry.getKey(); if (key instanceof org.eclipse.e4.ui.model.application.ui.menu.MHandledItem) { for (org.eclipse.emf.ecore.change.FeatureChange change : entry.getValue()) { if (change.getFeatureName().equals(org.eclipse.e4.ui.internal.workbench.HANDLEDITEM_PARAMETERS_ATTNAME)) { java.util.List<?> parameters = ((java.util.List<?>) (change.getValue())); for (java.lang.Object parameter : parameters) { if (parameter == reference) { return key; } } parametersChanged = true; break; } } break; } } return parametersChanged ? null : reference.eContainer(); } if (reference instanceof org.eclipse.e4.ui.model.application.commands.MCommand) { org.eclipse.emf.common.util.EMap<org.eclipse.emf.ecore.EObject, org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.change.FeatureChange>> objectChanges = changeDescription.getObjectChanges(); boolean commandsChanged = false; for (java.util.Map.Entry<org.eclipse.emf.ecore.EObject, org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.change.FeatureChange>> entry : objectChanges.entrySet()) { org.eclipse.emf.ecore.EObject key = entry.getKey(); if (key == (rootObject)) { for (org.eclipse.emf.ecore.change.FeatureChange change : entry.getValue()) { if (change.getFeatureName().equals(org.eclipse.e4.ui.internal.workbench.APPLICATION_COMMANDS_ATTNAME)) { java.util.List<?> commands = ((java.util.List<?>) (change.getValue())); for (java.lang.Object command : commands) { if (command == reference) { return key; } } commandsChanged = true; break; } } break; } } if (!commandsChanged) { return reference.eContainer(); } } if (reference instanceof org.eclipse.e4.ui.model.application.ui.menu.MMenuContribution) { org.eclipse.emf.common.util.EMap<org.eclipse.emf.ecore.EObject, org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.change.FeatureChange>> objectChanges = changeDescription.getObjectChanges(); boolean menuContributionsChanged = false; for (java.util.Map.Entry<org.eclipse.emf.ecore.EObject, org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.change.FeatureChange>> entry : objectChanges.entrySet()) { org.eclipse.emf.ecore.EObject key = entry.getKey(); if (key == (rootObject)) { for (org.eclipse.emf.ecore.change.FeatureChange change : entry.getValue()) { if (change.getFeatureName().equals(org.eclipse.e4.ui.internal.workbench.MENUCONTRIBUTIONS_MENUCONTRIBUTIONS_ATTNAME)) { java.util.List<?> commands = ((java.util.List<?>) (change.getValue())); for (java.lang.Object command : commands) { if (command == reference) { return key; } } menuContributionsChanged = true; break; } } break; } } return menuContributionsChanged ? null : reference.eContainer(); } if (reference instanceof org.eclipse.e4.ui.model.application.commands.MBindingTable) { org.eclipse.emf.common.util.EMap<org.eclipse.emf.ecore.EObject, org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.change.FeatureChange>> objectChanges = changeDescription.getObjectChanges(); boolean bindingTablesChanged = false; for (java.util.Map.Entry<org.eclipse.emf.ecore.EObject, org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.change.FeatureChange>> entry : objectChanges.entrySet()) { org.eclipse.emf.ecore.EObject key = entry.getKey(); if (key == (rootObject)) { for (org.eclipse.emf.ecore.change.FeatureChange change : entry.getValue()) { if (change.getFeatureName().equals(org.eclipse.e4.ui.internal.workbench.BINDINGCONTAINER_BINDINGTABLES_ATTNAME)) { java.util.List<?> commands = ((java.util.List<?>) (change.getValue())); for (java.lang.Object command : commands) { if (command == reference) { return key; } } bindingTablesChanged = true; break; } } break; } } if (!bindingTablesChanged) { return reference.eContainer(); } } if (reference instanceof org.eclipse.e4.ui.model.application.commands.MHandler) { org.eclipse.emf.common.util.EMap<org.eclipse.emf.ecore.EObject, org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.change.FeatureChange>> objectChanges = changeDescription.getObjectChanges(); boolean handlersChanged = false; for (java.util.Map.Entry<org.eclipse.emf.ecore.EObject, org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.change.FeatureChange>> entry : objectChanges.entrySet()) { org.eclipse.emf.ecore.EObject key = entry.getKey(); if (key instanceof org.eclipse.e4.ui.model.application.commands.MHandlerContainer) { for (org.eclipse.emf.ecore.change.FeatureChange change : entry.getValue()) { if (change.getFeatureName().equals(org.eclipse.e4.ui.internal.workbench.HANDLERCONTAINER_HANDLERS_ATTNAME)) { java.util.List<?> commands = ((java.util.List<?>) (change.getValue())); for (java.lang.Object command : commands) { if (command == reference) { return key; } } handlersChanged = true; break; } } } } if (!handlersChanged) { return reference.eContainer(); } } if (reference instanceof org.eclipse.e4.ui.model.application.commands.MKeyBinding) { org.eclipse.emf.common.util.EMap<org.eclipse.emf.ecore.EObject, org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.change.FeatureChange>> objectChanges = changeDescription.getObjectChanges(); boolean bindingsChanged = false; for (java.util.Map.Entry<org.eclipse.emf.ecore.EObject, org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.change.FeatureChange>> entry : objectChanges.entrySet()) { org.eclipse.emf.ecore.EObject key = entry.getKey(); if (key instanceof org.eclipse.e4.ui.model.application.commands.MBindingTable) { for (org.eclipse.emf.ecore.change.FeatureChange change : entry.getValue()) { if (change.getFeatureName().equals(org.eclipse.e4.ui.internal.workbench.BINDINGTABLES_BINDINGS_ATTNAME)) { java.util.List<?> commands = ((java.util.List<?>) (change.getValue())); for (java.lang.Object command : commands) { if (command == reference) { return key; } } bindingsChanged = true; break; } } } } if (!bindingsChanged) { return reference.eContainer(); } } if (reference instanceof org.eclipse.e4.ui.model.application.descriptor.basic.MPartDescriptor) { org.eclipse.emf.common.util.EMap<org.eclipse.emf.ecore.EObject, org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.change.FeatureChange>> objectChanges = changeDescription.getObjectChanges(); boolean descriptorsChanged = false; for (java.util.Map.Entry<org.eclipse.emf.ecore.EObject, org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.change.FeatureChange>> entry : objectChanges.entrySet()) { org.eclipse.emf.ecore.EObject key = entry.getKey(); if (key == (rootObject)) { for (org.eclipse.emf.ecore.change.FeatureChange change : entry.getValue()) { if (change.getFeatureName().equals(org.eclipse.e4.ui.internal.workbench.PARTDESCRIPTORCONTAINER_DESCRIPTORS_ATTNAME)) { java.util.List<?> descriptors = ((java.util.List<?>) (change.getValue())); for (java.lang.Object descriptor : descriptors) { if (descriptor == reference) { return key; } } descriptorsChanged = true; break; } } break; } } return descriptorsChanged ? null : reference.eContainer(); } if (reference instanceof org.eclipse.e4.ui.model.application.ui.basic.MTrimBar) { org.eclipse.emf.common.util.EMap<org.eclipse.emf.ecore.EObject, org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.change.FeatureChange>> objectChanges = changeDescription.getObjectChanges(); boolean trimBarsChanged = false; for (java.util.Map.Entry<org.eclipse.emf.ecore.EObject, org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.change.FeatureChange>> entry : objectChanges.entrySet()) { org.eclipse.emf.ecore.EObject key = entry.getKey(); if (key instanceof org.eclipse.e4.ui.model.application.ui.basic.MTrimmedWindow) { for (org.eclipse.emf.ecore.change.FeatureChange change : entry.getValue()) { if (change.getFeatureName().equals(org.eclipse.e4.ui.internal.workbench.TRIMMEDWINDOW_TRIMBARS_ATTNAME)) { java.util.List<?> trimBars = ((java.util.List<?>) (change.getValue())); for (java.lang.Object trimBar : trimBars) { if (trimBar == reference) { return key; } } trimBarsChanged = true; break; } } break; } } if (trimBarsChanged) { return null; } for (org.eclipse.emf.ecore.EObject rootChild : rootObject.eContents()) { if (rootChild instanceof org.eclipse.e4.ui.model.application.ui.basic.MTrimmedWindow) { if (((org.eclipse.e4.ui.model.application.ui.basic.MTrimmedWindow) (rootChild)).getTrimBars().contains(reference)) { return rootChild; } } } return null; } if (reference instanceof org.eclipse.e4.ui.model.application.ui.MUIElement) { org.eclipse.emf.common.util.EMap<org.eclipse.emf.ecore.EObject, org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.change.FeatureChange>> objectChanges = changeDescription.getObjectChanges(); for (java.util.Map.Entry<org.eclipse.emf.ecore.EObject, org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.change.FeatureChange>> entry : objectChanges.entrySet()) { org.eclipse.emf.ecore.EObject key = entry.getKey(); if (key == reference) { for (org.eclipse.emf.ecore.change.FeatureChange change : entry.getValue()) { if (change.getFeatureName().equals(org.eclipse.e4.ui.internal.workbench.UIELEMENT_PARENT_ATTNAME)) { return ((org.eclipse.emf.ecore.EObject) (change.getValue())); } } break; } } if (reference instanceof org.eclipse.e4.ui.model.application.ui.menu.MMenu) { boolean appendedMenu = false; for (java.util.Map.Entry<org.eclipse.emf.ecore.EObject, org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.change.FeatureChange>> entry : objectChanges.entrySet()) { org.eclipse.emf.ecore.EObject key = entry.getKey(); if (key instanceof org.eclipse.e4.ui.model.application.ui.basic.MPart) { for (org.eclipse.emf.ecore.change.FeatureChange change : entry.getValue()) { if (change.getFeatureName().equals(org.eclipse.e4.ui.internal.workbench.PART_MENUS_ATTNAME)) { java.util.List<?> originalMenus = ((java.util.List<?>) (change.getValue())); if (originalMenus.contains(reference)) { return key; } if (((org.eclipse.e4.ui.model.application.ui.basic.MPart) (key)).getMenus().contains(reference)) { appendedMenu = true; } break; } } } } boolean menuSet = false; boolean menuChanged = false; for (java.util.Map.Entry<org.eclipse.emf.ecore.EObject, org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.change.FeatureChange>> entry : objectChanges.entrySet()) { org.eclipse.emf.ecore.EObject key = entry.getKey(); if (key instanceof org.eclipse.e4.ui.model.application.ui.basic.MWindow) { for (org.eclipse.emf.ecore.change.FeatureChange change : entry.getValue()) { if (change.getFeatureName().equals(org.eclipse.e4.ui.internal.workbench.WINDOW_MAINMENU_ATTNAME)) { java.lang.Object oldMenu = change.getValue(); if (oldMenu == reference) { return key; } else if ((oldMenu == null) && ((((org.eclipse.e4.ui.model.application.ui.basic.MWindow) (key)).getMainMenu()) == reference)) { menuSet = true; } menuChanged = true; break; } } } } if (menuChanged && menuSet) { return null; } else if ((appendedMenu && (!menuSet)) && (!menuChanged)) { return null; } org.eclipse.emf.ecore.EObject container = reference.eContainer(); if (!(container instanceof org.eclipse.e4.ui.model.application.ui.menu.MMenu)) { return container; } } if (reference instanceof org.eclipse.e4.ui.model.application.ui.menu.MToolBar) { for (java.util.Map.Entry<org.eclipse.emf.ecore.EObject, org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.change.FeatureChange>> entry : objectChanges.entrySet()) { org.eclipse.emf.ecore.EObject key = entry.getKey(); if (key instanceof org.eclipse.e4.ui.model.application.ui.basic.MPart) { for (org.eclipse.emf.ecore.change.FeatureChange change : entry.getValue()) { if (change.getFeatureName().equals(org.eclipse.e4.ui.internal.workbench.PART_TOOLBAR_ATTNAME)) { if ((change.getValue()) == reference) { return key; } } } } } } boolean newElement = false; for (java.util.Map.Entry<org.eclipse.emf.ecore.EObject, org.eclipse.emf.common.util.EList<org.eclipse.emf.ecore.change.FeatureChange>> entry : objectChanges.entrySet()) { org.eclipse.emf.ecore.EObject key = entry.getKey(); if (key == (reference.eContainer())) { for (org.eclipse.emf.ecore.change.FeatureChange change : entry.getValue()) { if (change.getFeatureName().equals(org.eclipse.e4.ui.internal.workbench.ELEMENTCONTAINER_CHILDREN_ATTNAME)) { org.eclipse.emf.common.util.EList<?> value = ((org.eclipse.emf.common.util.EList<?>) (change.getValue())); if (value.contains(reference)) { return key; } newElement = true; break; } else if (change.getFeatureName().equals(org.eclipse.e4.ui.internal.workbench.PART_TOOLBAR_ATTNAME)) { if (reference.equals(change.getValue())) { return key; } newElement = true; break; } else if (change.getFeatureName().equals(org.eclipse.e4.ui.internal.workbench.WINDOW_SHAREDELEMENTS_ATTNAME)) { org.eclipse.emf.common.util.EList<?> value = ((org.eclipse.emf.common.util.EList<?>) (change.getValue())); if (value.contains(reference)) { return key; } newElement = true; break; } } break; } for (org.eclipse.emf.ecore.change.FeatureChange change : entry.getValue()) { if (change.getFeatureName().equals(org.eclipse.e4.ui.internal.workbench.WINDOW_SHAREDELEMENTS_ATTNAME)) { org.eclipse.emf.common.util.EList<?> value = ((org.eclipse.emf.common.util.EList<?>) (change.getValue())); if (value.contains(reference)) { return key; } } } } if (!newElement) { return reference instanceof org.eclipse.e4.ui.model.application.MApplication ? changeDescription : reference.eContainer(); } } return null; }
public final void menuAboutToHide(final org.eclipse.jface.action.IMenuManager mgr) { gatherContributions(mgr); final org.eclipse.ui.IWorkbenchPartSite site = part.getSite(); if (site != null) { final org.eclipse.ui.IWorkbench workbench = site.getWorkbenchWindow().getWorkbench(); if (workbench instanceof org.eclipse.ui.internal.Workbench) { workbench.getDisplay().asyncExec(new java.lang.Runnable() { public void run() { final org.eclipse.ui.internal.Workbench realWorkbench = ((org.eclipse.ui.internal.Workbench) (workbench)); realWorkbench.removeShowingMenus(getMenuIds(), null, null); } }); } } if (mgr.getRemoveAllWhenShown()) { sweepContributions(mgr); } }
public MarkerFieldFilterGroup(org.eclipse.core.runtime.IConfigurationElement configurationElement, org.eclipse.ui.internal.provisional.views.markers.MarkerContentGenerator generator) { element = configurationElement; scope = processScope(); contentGenerator = generator; if (configurationElement == null) return; java.lang.String enablementString = configurationElement.getAttribute(MarkerSupportRegistry.ENABLED); if (MarkerSupportInternalUtilities.FALSE.equals(enablementString)) enabled = false; }
public void dispose() { for (int i = 0; i < (nestedEditors.size()); ++i) { org.eclipse.ui.IEditorPart editor = ((org.eclipse.ui.IEditorPart) (nestedEditors.get(i))); disposePart(editor); } nestedEditors.clear(); if ((pageContainerSite) instanceof org.eclipse.ui.services.IDisposable) { ((org.eclipse.ui.services.IDisposable) (pageContainerSite)).dispose(); pageContainerSite = null; } for (int i = 0; i < (pageSites.size()); i++) { org.eclipse.ui.services.IServiceLocator sl = ((org.eclipse.ui.services.IServiceLocator) (pageSites.get(i))); if (sl instanceof org.eclipse.ui.services.IDisposable) { ((org.eclipse.ui.services.IDisposable) (sl)).dispose(); } } pageSites.clear(); super.dispose(); }
public org.eclipse.core.runtime.IStatus validate(java.lang.Object[] selection) { int nSelected = selection.length; java.lang.String pluginId = org.eclipse.ui.internal.ide.IDEWorkbenchPlugin.IDE_WORKBENCH; if ((nSelected == 0) || ((nSelected > 1) && ((multiSelect) == false))) { return new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, pluginId, org.eclipse.core.runtime.IStatus.ERROR, IDEResourceInfoUtils.EMPTY_STRING, null); } for (int i = 0; i < (selection.length); i++) { java.lang.Object curr = selection[i]; if (curr instanceof org.eclipse.core.filesystem.IFileStore) { org.eclipse.core.filesystem.IFileStore file = ((org.eclipse.core.filesystem.IFileStore) (curr)); if (((acceptFolders) == false) && (file.fetchInfo().isDirectory())) { return new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, pluginId, org.eclipse.core.runtime.IStatus.ERROR, IDEResourceInfoUtils.EMPTY_STRING, null); } } } return org.eclipse.core.runtime.Status.OK_STATUS; }
public void syncExec(java.lang.Runnable runnable) { if (((runnable == null) || (lockListener.isUI())) || (!(lockListener.isLockOwner()))) { super.syncExec(runnable); return; } org.eclipse.ui.internal.Semaphore work = new org.eclipse.ui.internal.Semaphore(runnable); work.setOperationThread(java.lang.Thread.currentThread()); lockListener.addPendingWork(work); if (!(lockListener.isUIWaiting())) { asyncExec(new java.lang.Runnable() { public void run() { lockListener.doPendingWork(); } }); } else lockListener.interruptUI(); try { while (!(work.acquire(1000))) { if (lockListener.isUIWaiting()) lockListener.interruptUI(); } } catch (java.lang.InterruptedException e) { } }
private void setItemText(org.eclipse.e4.ui.model.application.ui.menu.MMenuItem model, org.eclipse.swt.widgets.MenuItem item) { java.lang.String text = model.getLabel(); if (model instanceof org.eclipse.e4.ui.model.application.ui.menu.MHandledItem) { org.eclipse.e4.ui.model.application.ui.menu.MHandledItem handledItem = ((org.eclipse.e4.ui.model.application.ui.menu.MHandledItem) (model)); org.eclipse.e4.core.contexts.IEclipseContext context = getContext(model); org.eclipse.e4.ui.bindings.EBindingService bs = ((org.eclipse.e4.ui.bindings.EBindingService) (context.get(org.eclipse.e4.ui.bindings.EBindingService.class.getName()))); org.eclipse.core.commands.ParameterizedCommand cmd = handledItem.getWbCommand(); if (cmd == null) { cmd = generateParameterizedCommand(handledItem, context); } if ((cmd != null) && ((text == null) || ((text.length()) == 0))) { try { text = cmd.getName(); } catch (org.eclipse.core.commands.common.NotDefinedException e) { e.printStackTrace(); } } org.eclipse.jface.bindings.TriggerSequence sequence = bs.getBestSequenceFor(handledItem.getWbCommand()); if (sequence != null) { text = (text + '\t') + (sequence.format()); } item.setText(text); } else { if (text == null) { text = ""; } item.setText(text); } }
public static void initializeJFacePreferences() { org.eclipse.core.runtime.preferences.IEclipsePreferences rootNode = ((org.eclipse.core.runtime.preferences.IEclipsePreferences) (org.eclipse.core.runtime.Platform.getPreferencesService().getRootNode().node(org.eclipse.core.runtime.preferences.InstanceScope.SCOPE))); final java.lang.String workbenchName = org.eclipse.ui.internal.WorkbenchPlugin.getDefault().getBundle().getSymbolicName(); rootNode.addNodeChangeListener(new org.eclipse.core.runtime.preferences.IEclipsePreferences.INodeChangeListener() { public void added(org.eclipse.core.runtime.preferences.IEclipsePreferences.NodeChangeEvent event) { if (!(event.getChild().name().equals(workbenchName))) { return; } ((org.eclipse.core.runtime.preferences.IEclipsePreferences) (event.getChild())).addPreferenceChangeListener(org.eclipse.ui.internal.PlatformUIPreferenceListener.getSingleton()); } public void removed(org.eclipse.core.runtime.preferences.IEclipsePreferences.NodeChangeEvent event) { } }); org.eclipse.jface.preference.JFacePreferences.setPreferenceStore(org.eclipse.ui.internal.WorkbenchPlugin.getDefault().getPreferenceStore()); }
public org.eclipse.ui.IEditorPart openEditorFromDescriptor(org.eclipse.ui.IEditorInput fileEditorInput, org.eclipse.ui.IEditorDescriptor editorDescriptor, final boolean activate, final org.eclipse.ui.IMemento editorState) throws org.eclipse.ui.PartInitException { if (editorDescriptor.isOpenExternal()) { openExternalEditor(((org.eclipse.ui.internal.registry.EditorDescriptor) (editorDescriptor)), fileEditorInput); return null; } return openEditor(fileEditorInput, editorDescriptor.getId(), activate, org.eclipse.ui.internal.MATCH_INPUT, editorState); }
public void propertyChange(org.eclipse.jface.util.PropertyChangeEvent event) { java.lang.String propertyName = event.getProperty(); if (IPreferenceConstants.ENABLED_DECORATORS.equals(propertyName)) org.eclipse.ui.internal.WorkbenchPlugin.getDefault().getDecoratorManager().restoreListeners(); if (IWorkbenchPreferenceConstants.DEFAULT_PERSPECTIVE_ID.equals(propertyName)) { org.eclipse.ui.internal.IWorkbench workbench = org.eclipse.ui.internal.WorkbenchPlugin.getDefault().getWorkbench(); org.eclipse.ui.plugin.AbstractUIPlugin uiPlugin = ((org.eclipse.ui.plugin.AbstractUIPlugin) (org.eclipse.core.runtime.Platform.getPlugin(PlatformUI.PLUGIN_ID))); java.lang.String newValue = uiPlugin.getPreferenceStore().getString(IWorkbenchPreferenceConstants.DEFAULT_PERSPECTIVE_ID); workbench.getPerspectiveRegistry().setDefaultPerspective(newValue); } if ((defaultCheckNames) == null) { initializeFontNames(); } if (defaultCheckNames.contains(propertyName)) { processDefaultsTo(propertyName); } if (fontNames.contains(propertyName)) { org.eclipse.swt.graphics.FontData[] newSetting; java.lang.Object newValue = event.getNewValue(); if (newValue instanceof java.lang.String) newSetting = org.eclipse.jface.preference.PreferenceConverter.readFontData(((java.lang.String) (newValue))); else newSetting = ((org.eclipse.swt.graphics.FontData[]) (newValue)); org.eclipse.jface.resource.JFaceResources.getFontRegistry().put(propertyName, newSetting); } }
public void exportCSV(org.eclipse.swt.widgets.Shell shell) { final org.eclipse.swt.widgets.FileDialog fileDialog = new org.eclipse.swt.widgets.FileDialog(shell, ((org.eclipse.swt.SWT.SAVE) | (org.eclipse.swt.SWT.SHEET))); fileDialog.setFilterExtensions(new java.lang.String[]{ "*.csv" }); fileDialog.setFilterNames(new java.lang.String[]{ org.eclipse.ui.internal.util.Util.translateString(org.eclipse.ui.internal.keys.model.KeyController.RESOURCE_BUNDLE, "csvFilterName") }); fileDialog.setOverwrite(true); final java.lang.String filePath = fileDialog.open(); if (filePath == null) { return; } final org.eclipse.jface.util.SafeRunnable runnable = new org.eclipse.jface.util.SafeRunnable() { public final void run() throws java.io.IOException { java.io.Writer fileWriter = null; try { fileWriter = new java.io.BufferedWriter(new java.io.FileWriter(filePath)); final java.lang.Object[] bindingElements = bindingModel.getBindings().toArray(); for (int i = 0; i < (bindingElements.length); i++) { final org.eclipse.ui.internal.keys.model.BindingElement be = ((org.eclipse.ui.internal.keys.model.BindingElement) (bindingElements[i])); if (((be.getTrigger()) == null) || (be.getTrigger().isEmpty())) { continue; } java.lang.StringBuffer buffer = new java.lang.StringBuffer(); buffer.append(((((org.eclipse.ui.internal.keys.model.KeyController.ESCAPED_QUOTE) + (org.eclipse.ui.internal.util.Util.replaceAll(be.getCategory(), org.eclipse.ui.internal.keys.model.KeyController.ESCAPED_QUOTE, org.eclipse.ui.internal.keys.model.KeyController.REPLACEMENT))) + (org.eclipse.ui.internal.keys.model.KeyController.ESCAPED_QUOTE)) + (org.eclipse.ui.internal.keys.model.KeyController.DELIMITER))); buffer.append(((((org.eclipse.ui.internal.keys.model.KeyController.ESCAPED_QUOTE) + (be.getName())) + (org.eclipse.ui.internal.keys.model.KeyController.ESCAPED_QUOTE)) + (org.eclipse.ui.internal.keys.model.KeyController.DELIMITER))); buffer.append(((((org.eclipse.ui.internal.keys.model.KeyController.ESCAPED_QUOTE) + (be.getTrigger().format())) + (org.eclipse.ui.internal.keys.model.KeyController.ESCAPED_QUOTE)) + (org.eclipse.ui.internal.keys.model.KeyController.DELIMITER))); buffer.append((((org.eclipse.ui.internal.keys.model.KeyController.ESCAPED_QUOTE) + (be.getContext().getName())) + (org.eclipse.ui.internal.keys.model.KeyController.ESCAPED_QUOTE))); buffer.append(java.lang.System.getProperty("line.separator")); fileWriter.write(buffer.toString()); } } finally { if (fileWriter != null) { try { fileWriter.close(); } catch (final java.io.IOException e) { } } } } }; org.eclipse.core.runtime.SafeRunner.run(runnable); }
public boolean canDoOperation(int operation) { if (((getTextWidget()) == null) || (!(redraws()))) return false; if (operation == (CONTENTASSIST_PROPOSALS)) return ((fContentAssistant) != null) && (isEditable()); if (operation == (CONTENTASSIST_CONTEXT_INFORMATION)) return ((fContentAssistant) != null) && (isEditable()); if (operation == (INFORMATION)) return (fInformationPresenter) != null; if (operation == (FORMAT)) { org.eclipse.swt.graphics.Point p = getSelectedRange(); int length = (p == null) ? -1 : p.y; return (((fContentFormatter) != null) && (isEditable())) && ((length == 0) || (isBlockSelected())); } return super.canDoOperation(operation); }
public void fillContextMenu(org.eclipse.jface.action.IMenuManager menu) { org.eclipse.jface.viewers.IStructuredSelection selection = ((org.eclipse.jface.viewers.IStructuredSelection) (getContext().getSelection())); boolean onlyProjectsSelected = (!(selection.isEmpty())) && (org.eclipse.ui.views.navigator.ResourceSelectionUtil.allResourcesAreOfType(selection, org.eclipse.core.resources.IResource.PROJECT)); if (!(selection.isEmpty())) { if (!(org.eclipse.core.resources.ResourcesPlugin.getWorkspace().isAutoBuilding())) { buildAction.selectionChanged(selection); menu.add(buildAction); } rebuildAction.selectionChanged(selection); menu.add(rebuildAction); } if (onlyProjectsSelected) { openProjectAction.selectionChanged(selection); menu.add(openProjectAction); closeProjectAction.selectionChanged(selection); menu.add(closeProjectAction); } menu.add(new org.eclipse.jface.action.Separator()); refreshAction.selectionChanged(selection); menu.add(refreshAction); }
public void dispose() { if ((handler) != null) { handler.removePropertyChangeListener(propertyChangeListener); handler = null; } org.eclipse.ui.IWorkbenchPart part = getActivePart(); if (part != null) { org.eclipse.ui.IWorkbenchPartSite site = part.getSite(); org.eclipse.ui.SubActionBars bars = ((org.eclipse.ui.SubActionBars) (((org.eclipse.ui.internal.PartSite) (site)).getActionBars())); bars.removePropertyChangeListener(propertyChangeListener); } }
protected void handleDoubleClick(org.eclipse.jface.viewers.DoubleClickEvent event) { org.eclipse.jface.viewers.IStructuredSelection selection = ((org.eclipse.jface.viewers.IStructuredSelection) (event.getSelection())); java.lang.Object element = selection.getFirstElement(); org.eclipse.jface.viewers.TreeViewer viewer = getTreeViewer(); if (viewer.isExpandable(element)) { viewer.setExpandedState(element, (!(viewer.getExpandedState(element)))); } else if ((((selection.size()) == 1) && (element instanceof org.eclipse.core.resources.IResource)) && ((((org.eclipse.core.resources.IResource) (element)).getType()) == (org.eclipse.core.resources.IResource.PROJECT))) { org.eclipse.ui.actions.OpenResourceAction ora = new org.eclipse.ui.actions.OpenResourceAction(getSite().getShell()); ora.selectionChanged(((org.eclipse.jface.viewers.IStructuredSelection) (viewer.getSelection()))); if (ora.isEnabled()) { ora.run(); } } }
private void showFeedback(int location) { if (location == (org.eclipse.e4.ui.workbench.addons.dndaddon.SplitDropAgent.NOWHERE)) return; org.eclipse.swt.graphics.Rectangle feedbackBounds = null; if (!(onEdge)) { org.eclipse.swt.graphics.Rectangle bounds = new org.eclipse.swt.graphics.Rectangle(ctfBounds.x, ctfBounds.y, ctfBounds.width, ctfBounds.height); feedbackBounds = bounds; } else { org.eclipse.swt.graphics.Rectangle bounds = new org.eclipse.swt.graphics.Rectangle(ocBounds.x, ocBounds.y, ocBounds.width, ocBounds.height); feedbackBounds = bounds; } if ((feedback) != null) feedback.dispose(); int side = 0; if (location == (org.eclipse.e4.ui.workbench.modeling.EModelService.ABOVE)) { side = org.eclipse.swt.SWT.TOP; } else if (location == (org.eclipse.e4.ui.workbench.modeling.EModelService.BELOW)) { side = org.eclipse.swt.SWT.BOTTOM; } else if (location == (org.eclipse.e4.ui.workbench.modeling.EModelService.LEFT_OF)) { side = org.eclipse.swt.SWT.LEFT; } else if (location == (org.eclipse.e4.ui.workbench.modeling.EModelService.RIGHT_OF)) { side = org.eclipse.swt.SWT.RIGHT; } float pct = ((float) ((onEdge) ? 0.34 : 0.5)); if ((feedback) != null) feedback.dispose(); feedback = new org.eclipse.e4.ui.workbench.addons.dndaddon.SplitFeedbackOverlay(dropCTF.getShell(), feedbackBounds, side, pct, getEnclosed(), getModified()); }
public void clear() { if ((map) != null) { map.clear(); } }
private void createPage(org.eclipse.ui.internal.EditorPane editorPane) { org.eclipse.ui.internal.IEditorPart editorPart = editorPane.getEditorPart(); createTab(editorPane); editorPane.createControl(parent); editorPane.setContainer(this); enableDrop(editorPane); updateEditorTab(editorPart); editorPart.addPropertyListener(this); if ((mapPartToDragMonitor.size()) == 1) enableTabDrag(this, null); }
public void update(boolean force) { for (org.eclipse.e4.ui.model.application.ui.basic.MTrimElement el : trimBar.getChildren()) { if (el instanceof org.eclipse.e4.ui.model.application.ui.menu.MToolBar) { org.eclipse.e4.ui.workbench.renderers.swt.ToolBarManagerRenderer renderer = ((org.eclipse.e4.ui.workbench.renderers.swt.ToolBarManagerRenderer) (rendererFactory.getRenderer(el, null))); final org.eclipse.jface.action.ToolBarManager manager = renderer.getManager(((org.eclipse.e4.ui.model.application.ui.menu.MToolBar) (el))); if (manager != null) { fill(((org.eclipse.e4.ui.model.application.ui.menu.MToolBar) (el)), manager); } } } if (!(trimBarsAdded)) { java.util.List<org.eclipse.e4.ui.model.application.ui.basic.MTrimBar> trimBars = window.getTrimBars(); trimBars.add(0, trimBar); trimBarsAdded = true; } }
public void done(org.eclipse.core.runtime.jobs.IJobChangeEvent event) { org.eclipse.core.runtime.jobs.Job job = event.getJob(); if (useHalfBusyCursor) { synchronized(busyLock) { if (busyJobs.contains(job)) { synchronized(waitCursorLock) { (waitCursorJobCount)--; } } } } decrementBusy(job); job.removeJobChangeListener(this); }
public org.eclipse.ui.internal.dnd.IDropTarget drag(org.eclipse.swt.widgets.Control currentControl, final java.lang.Object draggedObject, org.eclipse.swt.graphics.Point position, org.eclipse.swt.graphics.Rectangle dragRectangle) { if (!(draggedObject instanceof org.eclipse.ui.internal.EditorPane)) { return null; } final org.eclipse.ui.internal.EditorPane pane = ((org.eclipse.ui.internal.EditorPane) (draggedObject)); if ((pane.getWorkbenchWindow()) != (getWorkbenchWindow())) { return null; } org.eclipse.swt.graphics.Point localPos = tabFolder.toControl(position); final org.eclipse.swt.custom.CTabItem tabUnderPointer = tabFolder.getItem(localPos); if ((tabUnderPointer == null) || ((mapTabToEditor.get(tabUnderPointer)) == draggedObject)) { return null; } return new org.eclipse.ui.internal.dnd.IDropTarget() { public void drop() { org.eclipse.ui.internal.ILayoutContainer container = pane.getContainer(); if (container != (org.eclipse.ui.internal.TabbedEditorWorkbook.this)) { if (container != null) { container.remove(pane); org.eclipse.ui.internal.LayoutPart[] children = container.getChildren(); if ((children == null) || ((children.length) == 0)) { if (container instanceof org.eclipse.ui.internal.LayoutPart) { org.eclipse.ui.internal.LayoutPart parent = ((org.eclipse.ui.internal.LayoutPart) (container)); org.eclipse.ui.internal.ILayoutContainer parentContainer = parent.getContainer(); if (parentContainer != null) { parentContainer.remove(parent); parent.dispose(); } } } } add(pane); setVisibleItem(pane); pane.setFocus(); } reorderTab(pane, getTab(pane), tabFolder.indexOf(tabUnderPointer)); getParent().setRedraw(true); } public org.eclipse.swt.graphics.Cursor getCursor() { return org.eclipse.ui.internal.DragCursors.getCursor(DragCursors.CENTER); } public org.eclipse.swt.graphics.Rectangle getSnapRectangle() { if (tabUnderPointer == null) { return org.eclipse.jface.util.Geometry.toDisplay(tabFolder.getParent(), tabFolder.getBounds()); } return org.eclipse.jface.util.Geometry.toDisplay(tabFolder, tabUnderPointer.getBounds()); } }; }
public static org.eclipse.core.runtime.IStatus newStatus(int severity, java.lang.String message, java.lang.Throwable exception) { java.lang.String statusMessage = message; if ((message == null) || ((message.trim().length()) == 0)) { if (exception == null) { throw new java.lang.IllegalArgumentException(); } else if ((exception.getMessage()) == null) { statusMessage = exception.toString(); } else { statusMessage = exception.getMessage(); } } return new org.eclipse.core.runtime.Status(severity, IDEWorkbenchPlugin.IDE_WORKBENCH, severity, statusMessage, exception); }
@org.eclipse.e4.core.di.annotations.Execute public void execute(org.eclipse.e4.core.contexts.IEclipseContext context, @org.eclipse.e4.core.di.annotations.Optional org.eclipse.e4.ui.services.IStylingEngine engine, @javax.inject.Named(org.eclipse.e4.ui.services.IServiceConstants.ACTIVE_SHELL) org.eclipse.swt.widgets.Shell shell, final org.eclipse.e4.ui.workbench.modeling.EPartService partService) throws java.lang.InterruptedException, java.lang.reflect.InvocationTargetException { final org.eclipse.e4.ui.model.application.ui.basic.MPart details = partService.findPart("DetailsView"); final org.eclipse.e4.core.contexts.IEclipseContext pmContext = context.createChild(); org.eclipse.jface.dialogs.ProgressMonitorDialog dialog = new org.eclipse.jface.dialogs.ProgressMonitorDialog(shell); dialog.open(); org.eclipse.e4.demo.contacts.handlers.ThemeUtil.applyDialogStyles(engine, dialog.getShell()); dialog.run(true, true, new org.eclipse.jface.operation.IRunnableWithProgress() { public void run(org.eclipse.core.runtime.IProgressMonitor monitor) throws java.lang.InterruptedException, java.lang.reflect.InvocationTargetException { pmContext.set(org.eclipse.core.runtime.IProgressMonitor.class.getName(), monitor); java.lang.Object clientObject = details.getObject(); org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(clientObject, org.eclipse.e4.ui.di.Persist.class, pmContext, null); } }); if (pmContext instanceof org.eclipse.e4.core.di.IDisposable) { ((org.eclipse.e4.core.di.IDisposable) (pmContext)).dispose(); } }
public void firePartClosed(org.eclipse.ui.internal.e4.compatibility.CompatibilityPart compatibilityPart) { org.eclipse.ui.IWorkbenchPart part = compatibilityPart.getPart(); org.eclipse.ui.internal.WorkbenchPartReference partReference = compatibilityPart.getReference(); org.eclipse.e4.ui.model.application.ui.basic.MPart model = partReference.getModel(); for (java.lang.Object listener : partListenerList.getListeners()) { ((org.eclipse.ui.IPartListener) (listener)).partClosed(part); } for (java.lang.Object listener : partListener2List.getListeners()) { ((org.eclipse.ui.IPartListener2) (listener)).partClosed(partReference); } if (part instanceof org.eclipse.ui.IViewPart) { } else { editorReferences.remove(partReference); } for (int i = 0; i < (activationList.size()); i++) { if (model == (activationList.get(i))) { activationList.remove(i); break; } } if (model == (partService.getActivePart())) { updateActivePartSources(null); updateActiveEditorSources(null); } else if (part instanceof org.eclipse.ui.IEditorPart) { updateActiveEditorSources(findPart(getActiveEditor())); } }
public void registryChanged(org.eclipse.core.runtime.IRegistryChangeEvent event) { if ((getParent()) != null) { getParent().markDirty(); } reader = new org.eclipse.ui.internal.registry.NewWizardsRegistryReader(); }
public static boolean canUseInternalWebBrowser() { if ((org.eclipse.ui.internal.browser.WebBrowserUtil.isInternalBrowserOperational) != null) return org.eclipse.ui.internal.browser.WebBrowserUtil.isInternalBrowserOperational.booleanValue(); try { java.lang.Class.forName(org.eclipse.ui.internal.browser.WebBrowserUtil.BROWSER_PACKAGE_NAME); } catch (java.lang.ClassNotFoundException e) { org.eclipse.ui.internal.browser.WebBrowserUtil.isInternalBrowserOperational = new java.lang.Boolean(false); return false; } org.eclipse.swt.widgets.Shell shell = null; try { shell = new org.eclipse.swt.widgets.Shell(org.eclipse.ui.PlatformUI.getWorkbench().getDisplay()); new org.eclipse.swt.browser.Browser(shell, org.eclipse.swt.SWT.NONE); org.eclipse.ui.internal.browser.WebBrowserUtil.isInternalBrowserOperational = new java.lang.Boolean(true); return true; } catch (java.lang.Throwable t) { java.lang.StringBuffer message = new java.lang.StringBuffer("Internal browser is not available"); message.append(((t.getMessage()) == null ? "." : ": " + (t.getMessage()))); org.eclipse.ui.internal.browser.WebBrowserUIPlugin.getInstance().getLog().log(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.WARNING, WebBrowserUIPlugin.PLUGIN_ID, 0, message.toString(), null)); org.eclipse.ui.internal.browser.WebBrowserUtil.isInternalBrowserOperational = new java.lang.Boolean(false); return false; } finally { if (shell != null) shell.dispose(); } }
private void stopped(java.lang.Object savedState) { if (((getShell()) != null) && (!(getShell().isDisposed()))) { if (wizard.needsProgressMonitor()) { progressMonitorPart.setVisible(false); progressMonitorPart.removeFromCancelComponent(cancelButton); } java.util.Map state = ((java.util.Map) (savedState)); restoreUIState(state); cancelButton.addSelectionListener(cancelListener); setDisplayCursor(null); cancelButton.setCursor(null); waitCursor.dispose(); waitCursor = null; arrowCursor.dispose(); arrowCursor = null; org.eclipse.swt.widgets.Control focusControl = ((org.eclipse.swt.widgets.Control) (state.get(org.eclipse.jface.wizard.WizardDialog.FOCUS_CONTROL))); if ((focusControl != null) && (!(focusControl.isDisposed()))) { focusControl.setFocus(); } } }
protected org.eclipse.swt.widgets.Control createContents(org.eclipse.swt.widgets.Composite parent) { final org.eclipse.swt.widgets.TabFolder tabFolder = new org.eclipse.swt.widgets.TabFolder(parent, org.eclipse.swt.SWT.NULL); final org.eclipse.swt.widgets.TabItem basicTab = new org.eclipse.swt.widgets.TabItem(tabFolder, org.eclipse.swt.SWT.NULL); basicTab.setText(org.eclipse.ui.internal.util.Util.translateString(org.eclipse.ui.internal.commands.KeysPreferencePage.RESOURCE_BUNDLE, "basicTab.Text")); basicTab.setControl(createBasicTab(tabFolder)); final org.eclipse.swt.widgets.TabItem advancedTab = new org.eclipse.swt.widgets.TabItem(tabFolder, org.eclipse.swt.SWT.NULL); advancedTab.setText(org.eclipse.ui.internal.util.Util.translateString(org.eclipse.ui.internal.commands.KeysPreferencePage.RESOURCE_BUNDLE, "advancedTab.Text")); advancedTab.setControl(createAdvancedTab(tabFolder)); applyDialogFont(tabFolder); return tabFolder; }
private void updateChildren(org.eclipse.swt.widgets.Widget widget, java.lang.Object parent, java.lang.Object[] elementChildren, boolean updateLabels) { if (widget instanceof org.eclipse.swt.widgets.Item) { org.eclipse.swt.widgets.Item ti = ((org.eclipse.swt.widgets.Item) (widget)); if (!(getExpanded(ti))) { if (optionallyPruneChildren(ti, parent)) { return; } org.eclipse.swt.widgets.Item[] its = getItems(ti); if (isExpandable(ti, null, parent)) { if ((its.length) == 0) { newItem(ti, SWT.NULL, (-1)); return; } else if (((its.length) == 1) && ((its[0].getData()) == null)) { return; } } else { for (int i = 0; i < (its.length); i++) { if ((its[i].getData()) != null) { disassociate(its[i]); } its[i].dispose(); } return; } } } if (elementChildren == null) { if ((isTreePathContentProvider()) && (widget instanceof org.eclipse.swt.widgets.Item)) { org.eclipse.jface.viewers.TreePath path = getTreePathFromItem(((org.eclipse.swt.widgets.Item) (widget))); elementChildren = getSortedChildren(path); } else { elementChildren = getSortedChildren(parent); } } org.eclipse.swt.widgets.Control tree = getControl(); int oldCnt = -1; if (widget == tree) { oldCnt = getItemCount(tree); } org.eclipse.swt.widgets.Item[] items = getChildren(widget); org.eclipse.jface.viewers.CustomHashtable expanded = newHashtable(CustomHashtable.DEFAULT_CAPACITY); for (int i = 0; i < (items.length); ++i) { if (getExpanded(items[i])) { java.lang.Object element = items[i].getData(); if (element != null) { expanded.put(element, element); } } } int min = java.lang.Math.min(elementChildren.length, items.length); int numItemsToDispose = (items.length) - min; if (numItemsToDispose > 0) { org.eclipse.jface.viewers.CustomHashtable children = newHashtable(((elementChildren.length) * 2)); for (int i = 0; i < (elementChildren.length); i++) { java.lang.Object elementChild = elementChildren[i]; children.put(elementChild, elementChild); } int i = 0; while ((numItemsToDispose > 0) && (i < (items.length))) { java.lang.Object data = items[i].getData(); if (((data == null) || (((items.length) - i) <= numItemsToDispose)) || (!(children.containsKey(data)))) { if (data != null) { disassociate(items[i]); } items[i].dispose(); if ((i + 1) < (items.length)) { java.lang.System.arraycopy(items, (i + 1), items, i, ((items.length) - (i + 1))); } numItemsToDispose--; } else { i++; } } } for (int i = 0; i < min; ++i) { org.eclipse.swt.widgets.Item item = items[i]; java.lang.Object oldElement = item.getData(); if (oldElement != null) { java.lang.Object newElement = elementChildren[i]; if (newElement != oldElement) { if (equals(newElement, oldElement)) { java.lang.Object data = item.getData(); if (data != null) { unmapElement(data, item); } item.setData(newElement); mapElement(newElement, item); } else { disassociate(item); item.setImage(null); item.setText(""); } } } } for (int i = 0; i < min; ++i) { org.eclipse.swt.widgets.Item item = items[i]; java.lang.Object newElement = elementChildren[i]; if ((item.getData()) == null) { associate(newElement, item); updatePlus(item, newElement); updateItem(item, newElement); } else { updatePlus(item, newElement); if (updateLabels) { updateItem(item, newElement); } } } for (int i = 0; i < min; ++i) { org.eclipse.swt.widgets.Item item = items[i]; java.lang.Object newElement = elementChildren[i]; setExpanded(item, expanded.containsKey(newElement)); } if (min < (elementChildren.length)) { for (int i = min; i < (elementChildren.length); ++i) { createTreeItem(widget, elementChildren[i], i); } if ((expanded.size()) > 0) { items = getChildren(widget); for (int i = min; i < (elementChildren.length); ++i) { if (expanded.containsKey(elementChildren[i])) { setExpanded(items[i], true); } } } } if (((widget == tree) && (oldCnt == 0)) && ((getItemCount(tree)) != 0)) { tree.setRedraw(false); tree.setRedraw(true); } }
public void measure(org.eclipse.swt.widgets.Event event, org.eclipse.swt.graphics.TextLayout textLayout, org.eclipse.jface.resource.ResourceManager resourceManager, org.eclipse.swt.graphics.TextStyle boldStyle) { org.eclipse.swt.widgets.Table table = ((org.eclipse.swt.widgets.TableItem) (event.item)).getParent(); textLayout.setFont(table.getFont()); event.width = 0; switch (event.index) { case 0 : if ((firstInCategory) || ((providerMatchRegions.length) > 0)) { textLayout.setText(provider.getName()); for (int i = 0; i < (providerMatchRegions.length); i++) { int[] matchRegion = providerMatchRegions[i]; textLayout.setStyle(boldStyle, matchRegion[0], matchRegion[1]); } } break; case 1 : org.eclipse.swt.graphics.Image image = getImage(element, resourceManager); org.eclipse.swt.graphics.Rectangle imageRect = image.getBounds(); event.width += (imageRect.width) + 4; event.height = java.lang.Math.max(event.height, ((imageRect.height) + 2)); textLayout.setText(element.getLabel()); for (int i = 0; i < (elementMatchRegions.length); i++) { int[] matchRegion = elementMatchRegions[i]; textLayout.setStyle(boldStyle, matchRegion[0], matchRegion[1]); } break; } org.eclipse.swt.graphics.Rectangle rect = textLayout.getBounds(); event.width += (rect.width) + 4; event.height = java.lang.Math.max(event.height, ((rect.height) + 2)); }
private void finishPrimary() { if ((deferPrimary) != null) { java.util.ArrayList primary = new java.util.ArrayList(); for (java.util.Iterator i = deferPrimary.iterator(); i.hasNext();) { java.lang.String id = ((java.lang.String) (i.next())); org.eclipse.ui.internal.dialogs.WorkbenchWizardElement element = ((wizardElements) == null) ? null : wizardElements.findWizard(id, true); if (element != null) { primary.add(element); } } primaryWizards = ((org.eclipse.ui.internal.dialogs.WorkbenchWizardElement[]) (primary.toArray(new org.eclipse.ui.internal.dialogs.WorkbenchWizardElement[primary.size()]))); deferPrimary = null; } }
public void setTheme(org.eclipse.e4.ui.css.swt.theme.ITheme theme, boolean restore, boolean force) { org.eclipse.core.runtime.Assert.isNotNull(theme, "The theme must not be null"); if (((this.currentTheme) != theme) || force) { if ((currentTheme) != null) { for (org.eclipse.e4.ui.css.core.util.resources.IResourceLocator l : getResourceLocators(currentTheme.getId())) { for (org.eclipse.e4.ui.css.core.engine.CSSEngine engine : cssEngines) { engine.getResourcesLocatorManager().unregisterResourceLocator(l); } } } this.currentTheme = theme; for (org.eclipse.e4.ui.css.core.engine.CSSEngine engine : cssEngines) { removeSWTResourceFromCache(engine.getResourcesRegistry()); engine.reset(); } for (org.eclipse.e4.ui.css.core.util.resources.IResourceLocator l : getResourceLocators(theme.getId())) { for (org.eclipse.e4.ui.css.core.engine.CSSEngine engine : cssEngines) { engine.getResourcesLocatorManager().registerResourceLocator(l); } } for (java.lang.String stylesheet : getAllStyles(theme.getId())) { java.net.URL url; java.io.InputStream stream = null; try { url = org.eclipse.core.runtime.FileLocator.resolve(new java.net.URL(stylesheet.toString())); for (org.eclipse.e4.ui.css.core.engine.CSSEngine engine : cssEngines) { try { stream = url.openStream(); org.w3c.css.sac.InputSource source = new org.w3c.css.sac.InputSource(); source.setByteStream(stream); source.setURI(url.toString()); engine.parseStyleSheet(source); } catch (java.io.IOException e) { e.printStackTrace(); } finally { if (stream != null) { try { stream.close(); } catch (java.io.IOException e) { e.printStackTrace(); } } } } } catch (java.net.MalformedURLException e) { e.printStackTrace(); } catch (java.io.IOException e) { e.printStackTrace(); } } for (org.eclipse.e4.ui.css.core.engine.CSSEngine engine : cssEngines) { engine.reapply(); } } if (restore) { org.eclipse.core.runtime.preferences.IEclipsePreferences pref = getPreferences(); pref.put(org.eclipse.e4.ui.css.swt.internal.theme.ThemeEngine.THEMEID_KEY, theme.getId()); try { pref.flush(); } catch (org.osgi.service.prefs.BackingStoreException e) { e.printStackTrace(); } } sendThemeChangeEvent(restore); }
public final boolean isActive(final java.lang.String commandId) { if (commandId != null) { final org.eclipse.core.commands.Command command = commandManager.getCommand(commandId); if ((!(command.isDefined())) && (!(loggedCommandIds.contains(commandId)))) { org.eclipse.core.runtime.IStatus status = new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, "org.eclipse.jface", 0, org.eclipse.jface.util.Util.translateString(org.eclipse.jface.action.ExternalActionManager.CommandCallback.RESOURCE_BUNDLE, "undefinedCommand.WarningMessage", null), null); org.eclipse.jface.util.Policy.getLog().log(status); loggedCommandIds.add(commandId); command.addCommandListener(new org.eclipse.core.commands.ICommandListener() { public final void commandChanged(final org.eclipse.core.commands.CommandEvent commandEvent) { if (command.isDefined()) { command.removeCommandListener(this); loggedCommandIds.remove(commandId); } } }); return true; } return activeChecker.isActive(commandId); } return true; }
public final org.eclipse.ui.internal.WorkbenchPartReference.PartPane getPane() { return new org.eclipse.ui.internal.WorkbenchPartReference.PartPane() { @java.lang.Override public org.eclipse.swt.widgets.Control getControl() { return (part) == null ? null : ((org.eclipse.swt.widgets.Control) (part.getWidget())); } }; }
private java.lang.String makeSmallString(java.lang.Object obj) { if (obj == null) return "null"; java.lang.String str = obj.toString(); int len = str.length(); return str.substring(0, (len < 50 ? len : 49)); }
public boolean isRestorable() { return (element) == null ? false : java.lang.Boolean.parseBoolean(element.getAttribute("restorable")); }
public void run() { if (!(confirmDelete())) return; final org.eclipse.core.resources.IResource[] resourcesToDelete = getResourcesToDelete(); if ((resourcesToDelete.length) == 0) return; try { org.eclipse.ui.actions.WorkspaceModifyOperation op = new org.eclipse.ui.actions.WorkspaceModifyOperation() { protected void execute(org.eclipse.core.runtime.IProgressMonitor monitor) throws org.eclipse.core.runtime.CoreException { delete(resourcesToDelete, monitor); } }; new org.eclipse.ui.actions.ProgressMonitorDialog(shell).run(true, true, op); } catch (java.lang.reflect.InvocationTargetException e) { java.lang.Throwable t = e.getTargetException(); if (t instanceof org.eclipse.core.runtime.CoreException) { org.eclipse.core.runtime.CoreException exception = ((org.eclipse.core.runtime.CoreException) (t)); org.eclipse.core.runtime.IStatus status = exception.getStatus(); org.eclipse.core.runtime.IStatus[] children = status.getChildren(); boolean outOfSyncError = false; for (int i = 0; i < (children.length); i++) { if ((children[i].getCode()) == (org.eclipse.core.resources.IResourceStatus.OUT_OF_SYNC_LOCAL)) { outOfSyncError = true; break; } } org.eclipse.ui.internal.ide.IDEWorkbenchPlugin.log(java.text.MessageFormat.format("Exception in {0}.run: {1}", new java.lang.Object[]{ getClass().getName(), t }), status); if (outOfSyncError) { org.eclipse.ui.actions.ErrorDialog.openError(shell, org.eclipse.ui.internal.ide.IDEWorkbenchMessages.getString("DeleteResourceAction.errorTitle"), org.eclipse.ui.internal.ide.IDEWorkbenchMessages.getString("DeleteResourceAction.outOfSyncError"), status); } else { org.eclipse.ui.actions.ErrorDialog.openError(shell, org.eclipse.ui.internal.ide.IDEWorkbenchMessages.getString("DeleteResourceAction.errorTitle"), null, status); } } else { org.eclipse.ui.internal.ide.IDEWorkbenchPlugin.log(java.text.MessageFormat.format("Exception in {0}.run: {1}", new java.lang.Object[]{ getClass().getName(), t })); org.eclipse.ui.actions.MessageDialog.openError(shell, org.eclipse.ui.internal.ide.IDEWorkbenchMessages.getString("DeleteResourceAction.messageTitle"), org.eclipse.ui.internal.ide.IDEWorkbenchMessages.format("DeleteResourceAction.internalError", new java.lang.Object[]{ t.getMessage() })); } } catch (java.lang.InterruptedException e) { } }
void onPartDrop(org.eclipse.ui.internal.PartDropEvent e) { if ((e.relativePosition) == (PartDragDrop.INVALID)) { org.eclipse.ui.internal.Perspective persp = page.getActivePerspective(); if ((e.dragSource) instanceof org.eclipse.ui.internal.ViewPane) { org.eclipse.ui.internal.IViewReference ref = ((org.eclipse.ui.internal.IViewReference) (((org.eclipse.ui.internal.ViewPane) (e.dragSource)).getPartReference())); if (isFastView(ref)) persp.setActiveFastView(ref); } else if ((e.dragSource) instanceof org.eclipse.ui.internal.ShortcutBarPart) { org.eclipse.ui.internal.WorkbenchWindow window = ((org.eclipse.ui.internal.WorkbenchWindow) (page.getWorkbenchWindow())); org.eclipse.ui.internal.ToolItem icon = window.getShortcutDND().getDraggedItem(); org.eclipse.ui.internal.IViewReference ref = ((org.eclipse.ui.internal.IViewReference) (icon.getData(ShowFastViewContribution.FAST_VIEW))); if ((ref == (persp.getPreviousActiveFastView())) && (wasFastViewActive)) persp.setActiveFastView(ref); } wasFastViewActive = false; return; } wasFastViewActive = false; if ((e.dragSource) instanceof org.eclipse.ui.internal.ViewPane) { org.eclipse.ui.internal.IViewReference ref = ((org.eclipse.ui.internal.IViewReference) (((org.eclipse.ui.internal.ViewPane) (e.dragSource)).getPartReference())); if (isFastView(ref)) { page.removeFastView(ref); } } if (((e.dragSource) instanceof org.eclipse.ui.internal.ShortcutBarPart) && (!((e.dropTarget) instanceof org.eclipse.ui.internal.ShortcutBarPart))) { org.eclipse.ui.internal.WorkbenchWindow window = ((org.eclipse.ui.internal.WorkbenchWindow) (page.getWorkbenchWindow())); org.eclipse.ui.internal.ToolItem icon = window.getShortcutDND().getDraggedItem(); org.eclipse.ui.internal.IViewReference ref = ((org.eclipse.ui.internal.IViewReference) (icon.getData(ShowFastViewContribution.FAST_VIEW))); if ((ref.getPart(true)) == null) return; e.dragSource = ((org.eclipse.ui.internal.WorkbenchPartReference) (ref)).getPane(); page.removeFastView(ref); } switch (e.relativePosition) { case PartDragDrop.OFFSCREEN : break; case PartDragDrop.CENTER : if (isZoomed()) zoomOut(); if ((e.dropTarget) instanceof org.eclipse.ui.internal.ShortcutBarPart) { if ((e.dragSource) instanceof org.eclipse.ui.internal.ShortcutBarPart) moveFastView(((org.eclipse.ui.internal.ShortcutBarPart) (e.dragSource)), new org.eclipse.swt.graphics.Point(e.cursorX, e.cursorY)); else { makeFast(e.dragSource); if ((e.dragSource) instanceof org.eclipse.ui.internal.ViewPane) { org.eclipse.ui.internal.ViewPane pane = ((org.eclipse.ui.internal.ViewPane) (e.dragSource)); org.eclipse.swt.graphics.Point point = pane.getControl().toDisplay(new org.eclipse.swt.graphics.Point(e.cursorX, e.cursorY)); org.eclipse.swt.graphics.Point destination = ((org.eclipse.ui.internal.ShortcutBarPart) (e.dropTarget)).getControl().toControl(point); reorderFastViews(((org.eclipse.ui.internal.ShortcutBarPart) (e.dropTarget)), ((org.eclipse.ui.internal.ViewPane) (e.dragSource)).getViewReference(), destination); } } break; } if (((e.dragSource) instanceof org.eclipse.ui.internal.ViewPane) && ((e.dropTarget) instanceof org.eclipse.ui.internal.PartTabFolder)) { if ((e.dragSource.getContainer()) == (e.dropTarget)) { ((org.eclipse.ui.internal.PartTabFolder) (e.dropTarget)).reorderTab(((org.eclipse.ui.internal.ViewPane) (e.dragSource)), e.cursorX, e.cursorY); break; } } stack(e.dragSource, e.dropTarget); break; case PartDragDrop.LEFT : case PartDragDrop.RIGHT : case PartDragDrop.TOP : case PartDragDrop.BOTTOM : if (isZoomed()) zoomOut(); movePart(e.dragSource, e.relativePosition, e.dropTarget); break; } }
public org.eclipse.jface.resource.ImageDescriptor getImageDescriptor() { if ((imageDescriptor) != null) return imageDescriptor; java.lang.String iconName = configElement.getAttribute(IWorkbenchRegistryConstants.ATT_ICON); if (iconName == null) return org.eclipse.ui.PlatformUI.getWorkbench().getSharedImages().getImageDescriptor(ISharedImages.IMG_DEF_VIEW); org.eclipse.core.runtime.IExtension extension = configElement.getDeclaringExtension(); java.lang.String extendingPluginId = extension.getNamespace(); imageDescriptor = org.eclipse.ui.plugin.AbstractUIPlugin.imageDescriptorFromPlugin(extendingPluginId, iconName); if ((imageDescriptor) == null) { imageDescriptor = org.eclipse.jface.resource.ImageDescriptor.getMissingImageDescriptor(); } return imageDescriptor; }
private boolean close(boolean save, boolean unsetPage) { if (save && (!(saveAllEditors(true, true)))) { return false; } sortedPerspectives.clear(); for (org.eclipse.e4.ui.model.application.ui.basic.MPart part : partService.getParts()) { hidePart(part, false, true, true); } if (unsetPage) { legacyWindow.setActivePage(null); partService.removePartListener(e4PartListener); broker.unsubscribe(selectionHandler); org.eclipse.ui.ISelectionService selectionService = getWorkbenchWindow().getSelectionService(); for (org.eclipse.ui.ISelectionListener listener : selectionListeners) { selectionService.removeSelectionListener(listener); } for (java.util.Map.Entry<java.lang.String, java.util.List<org.eclipse.ui.ISelectionListener>> entries : targetedSelectionListeners.entrySet()) { java.lang.String partId = entries.getKey(); for (org.eclipse.ui.ISelectionListener listener : entries.getValue()) { selectionService.removeSelectionListener(partId, listener); } } for (org.eclipse.ui.ISelectionListener listener : postSelectionListeners) { selectionService.removePostSelectionListener(listener); } for (java.util.Map.Entry<java.lang.String, java.util.List<org.eclipse.ui.ISelectionListener>> entries : targetedPostSelectionListeners.entrySet()) { java.lang.String partId = entries.getKey(); for (org.eclipse.ui.ISelectionListener listener : entries.getValue()) { selectionService.removePostSelectionListener(partId, listener); } } partListenerList.clear(); partListener2List.clear(); propertyChangeListeners.clear(); selectionListeners.clear(); postSelectionListeners.clear(); targetedSelectionListeners.clear(); targetedPostSelectionListeners.clear(); } org.eclipse.e4.ui.model.application.ui.advanced.MPerspectiveStack perspectiveStack = modelService.findElements(window, null, org.eclipse.e4.ui.model.application.ui.advanced.MPerspectiveStack.class, null).get(0); org.eclipse.e4.ui.model.application.ui.advanced.MPerspective perspective = perspectiveStack.getSelectedElement(); while ((perspective != null) && (!(perspectiveStack.getChildren().isEmpty()))) { modelService.removePerspectiveModel(perspective, window); perspective = perspectiveStack.getSelectedElement(); } viewReferences.clear(); editorReferences.clear(); if (unsetPage) { org.eclipse.e4.core.contexts.ContextInjectionFactory.uninject(this, window.getContext()); } return true; }
public void mouseDoubleClick(org.eclipse.swt.events.MouseEvent e) { if ((e.button) == 1) { org.eclipse.swt.custom.CTabFolder ctf = ((org.eclipse.swt.custom.CTabFolder) (e.widget)); if (!(ctf.getMaximizeVisible())) return; if ((e.y) > (ctf.getTabHeight())) return; org.eclipse.e4.ui.model.application.ui.MUIElement elementToChange = getElementToChange(e); if (!(elementToChange.getTags().contains(org.eclipse.e4.ui.workbench.addons.minmax.MinMaxAddon.MAXIMIZED))) { setState(elementToChange, org.eclipse.e4.ui.workbench.addons.minmax.MinMaxAddon.MAXIMIZED); } else { setState(elementToChange, null); } } }
public void paintControl(org.eclipse.swt.events.PaintEvent pe) { pe.gc.drawText(text, hm, hm); if (!(org.eclipse.jface.fieldassist.ControlDecoration.CARBON)) { pe.gc.drawPolygon(getPolygon(true)); } }
public void reconcileManagerToModel(org.eclipse.jface.action.MenuManager menuManager, org.eclipse.e4.ui.model.application.ui.menu.MMenu menuModel) { java.util.List<org.eclipse.e4.ui.model.application.ui.menu.MMenuElement> modelChildren = menuModel.getChildren(); java.util.HashSet<org.eclipse.e4.ui.model.application.ui.menu.MOpaqueMenuItem> oldModelItems = new java.util.HashSet<org.eclipse.e4.ui.model.application.ui.menu.MOpaqueMenuItem>(); java.util.HashSet<org.eclipse.e4.ui.model.application.ui.menu.MOpaqueMenu> oldMenus = new java.util.HashSet<org.eclipse.e4.ui.model.application.ui.menu.MOpaqueMenu>(); java.util.HashSet<org.eclipse.e4.ui.model.application.ui.menu.MOpaqueMenuSeparator> oldSeps = new java.util.HashSet<org.eclipse.e4.ui.model.application.ui.menu.MOpaqueMenuSeparator>(); for (org.eclipse.e4.ui.model.application.ui.menu.MMenuElement itemModel : modelChildren) { if (itemModel instanceof org.eclipse.e4.ui.model.application.ui.menu.MOpaqueMenuSeparator) { oldSeps.add(((org.eclipse.e4.ui.model.application.ui.menu.MOpaqueMenuSeparator) (itemModel))); } else if (itemModel instanceof org.eclipse.e4.ui.model.application.ui.menu.MOpaqueMenuItem) { oldModelItems.add(((org.eclipse.e4.ui.model.application.ui.menu.MOpaqueMenuItem) (itemModel))); } else if (itemModel instanceof org.eclipse.e4.ui.model.application.ui.menu.MOpaqueMenu) { oldMenus.add(((org.eclipse.e4.ui.model.application.ui.menu.MOpaqueMenu) (itemModel))); } } org.eclipse.jface.action.IContributionItem[] items = menuManager.getItems(); for (int src = 0, dest = 0; src < (items.length); src++ , dest++) { org.eclipse.jface.action.IContributionItem item = items[src]; if (item instanceof org.eclipse.jface.action.MenuManager) { org.eclipse.jface.action.MenuManager childManager = ((org.eclipse.jface.action.MenuManager) (item)); org.eclipse.e4.ui.model.application.ui.menu.MMenu childModel = getMenuModel(childManager); if (childModel == null) { org.eclipse.e4.ui.model.application.ui.menu.MMenu legacyModel = MenuFactoryImpl.eINSTANCE.createOpaqueMenu(); legacyModel.setElementId(childManager.getId()); legacyModel.setVisible(childManager.isVisible()); linkModelToManager(legacyModel, childManager); modelChildren.add(dest, legacyModel); reconcileManagerToModel(childManager, legacyModel); } else { if (childModel instanceof org.eclipse.e4.ui.model.application.ui.menu.MOpaqueMenu) { oldMenus.remove(childModel); } if ((modelChildren.size()) > dest) { if ((modelChildren.get(dest)) != childModel) { modelChildren.remove(childModel); modelChildren.add(dest, childModel); } } else { modelChildren.add(childModel); } } } else if ((item.isSeparator()) || (item.isGroupMarker())) { org.eclipse.e4.ui.model.application.ui.menu.MMenuElement menuElement = getMenuElement(item); if (menuElement == null) { org.eclipse.e4.ui.model.application.ui.menu.MOpaqueMenuSeparator legacySep = MenuFactoryImpl.eINSTANCE.createOpaqueMenuSeparator(); legacySep.setElementId(item.getId()); legacySep.setVisible(item.isVisible()); legacySep.setOpaqueItem(item); linkModelToContribution(legacySep, item); modelChildren.add(dest, legacySep); } else if (menuElement instanceof org.eclipse.e4.ui.model.application.ui.menu.MOpaqueMenuSeparator) { org.eclipse.e4.ui.model.application.ui.menu.MOpaqueMenuSeparator legacySep = ((org.eclipse.e4.ui.model.application.ui.menu.MOpaqueMenuSeparator) (menuElement)); oldSeps.remove(legacySep); if ((modelChildren.size()) > dest) { if ((modelChildren.get(dest)) != legacySep) { modelChildren.remove(legacySep); modelChildren.add(dest, legacySep); } } else { modelChildren.add(legacySep); } } } else { org.eclipse.e4.ui.model.application.ui.menu.MMenuElement menuElement = getMenuElement(item); if (menuElement == null) { org.eclipse.e4.ui.model.application.ui.menu.MOpaqueMenuItem legacyItem = MenuFactoryImpl.eINSTANCE.createOpaqueMenuItem(); legacyItem.setElementId(item.getId()); legacyItem.setVisible(item.isVisible()); legacyItem.setOpaqueItem(item); linkModelToContribution(legacyItem, item); modelChildren.add(dest, legacyItem); } else if (menuElement instanceof org.eclipse.e4.ui.model.application.ui.menu.MOpaqueMenuItem) { org.eclipse.e4.ui.model.application.ui.menu.MOpaqueMenuItem legacyItem = ((org.eclipse.e4.ui.model.application.ui.menu.MOpaqueMenuItem) (menuElement)); oldModelItems.remove(legacyItem); if ((modelChildren.size()) > dest) { if ((modelChildren.get(dest)) != legacyItem) { modelChildren.remove(legacyItem); modelChildren.add(dest, legacyItem); } } else { modelChildren.add(legacyItem); } } } } if (!(oldModelItems.isEmpty())) { modelChildren.removeAll(oldModelItems); for (org.eclipse.e4.ui.model.application.ui.menu.MOpaqueMenuItem model : oldModelItems) { clearModelToContribution(model, ((org.eclipse.jface.action.IContributionItem) (model.getOpaqueItem()))); } } if (!(oldMenus.isEmpty())) { modelChildren.removeAll(oldMenus); for (org.eclipse.e4.ui.model.application.ui.menu.MOpaqueMenu oldMenu : oldMenus) { org.eclipse.jface.action.MenuManager oldManager = getManager(oldMenu); clearModelToManager(oldMenu, oldManager); } } if (!(oldSeps.isEmpty())) { modelChildren.removeAll(oldSeps); for (org.eclipse.e4.ui.model.application.ui.menu.MOpaqueMenuSeparator model : oldSeps) { clearModelToContribution(model, ((org.eclipse.jface.action.IContributionItem) (model.getOpaqueItem()))); } } }
private boolean checkInstanceLocation(org.eclipse.swt.widgets.Shell shell) { org.eclipse.osgi.service.datalocation.Location instanceLoc = org.eclipse.core.runtime.Platform.getInstanceLocation(); if (instanceLoc == null) { org.eclipse.jface.dialogs.MessageDialog.openError(shell, IDEWorkbenchMessages.IDEApplication_workspaceMandatoryTitle, IDEWorkbenchMessages.IDEApplication_workspaceMandatoryMessage); return false; } if (instanceLoc.isSet()) { if (!(checkValidWorkspace(shell, instanceLoc.getURL()))) { return false; } try { if (instanceLoc.lock()) { org.eclipse.ui.internal.ide.IDEApplication.writeWorkspaceVersion(); return true; } java.io.File workspaceDirectory = new java.io.File(instanceLoc.getURL().getFile()); if (workspaceDirectory.exists()) { org.eclipse.jface.dialogs.MessageDialog.openError(shell, IDEWorkbenchMessages.IDEApplication_workspaceCannotLockTitle, IDEWorkbenchMessages.IDEApplication_workspaceCannotLockMessage); } else { org.eclipse.jface.dialogs.MessageDialog.openError(shell, IDEWorkbenchMessages.IDEApplication_workspaceCannotBeSetTitle, IDEWorkbenchMessages.IDEApplication_workspaceCannotBeSetMessage); } } catch (java.io.IOException e) { org.eclipse.ui.internal.ide.IDEWorkbenchPlugin.log("Could not obtain lock for workspace location", e); org.eclipse.jface.dialogs.MessageDialog.openError(shell, IDEWorkbenchMessages.InternalError, e.getMessage()); } return false; } org.eclipse.ui.internal.ide.ChooseWorkspaceData launchData = new org.eclipse.ui.internal.ide.ChooseWorkspaceData(instanceLoc.getDefault()); boolean force = false; while (true) { java.net.URL workspaceUrl = promptForWorkspace(shell, launchData, force); if (workspaceUrl == null) { return false; } force = true; try { if (instanceLoc.setURL(workspaceUrl, true)) { launchData.writePersistedData(); org.eclipse.ui.internal.ide.IDEApplication.writeWorkspaceVersion(); return true; } } catch (java.lang.IllegalStateException e) { org.eclipse.jface.dialogs.MessageDialog.openError(shell, IDEWorkbenchMessages.IDEApplication_workspaceCannotBeSetTitle, IDEWorkbenchMessages.IDEApplication_workspaceCannotBeSetMessage); return false; } org.eclipse.jface.dialogs.MessageDialog.openError(shell, IDEWorkbenchMessages.IDEApplication_workspaceInUseTitle, IDEWorkbenchMessages.IDEApplication_workspaceInUseMessage); } }
void refresh() { if (AUTOMATED_MODE) return; if (((dialogArea) == null) || (dialogArea.isDisposed())) return; if (isMultipleJobErrors()) { if ((jobListViewer) == null) { setMessage(ProgressMessages.JobErrorDialog_MultipleErrorsMessage); getShell().setText(ProgressMessages.JobErrorDialog_MultipleErrorsTitle); createJobListArea(((org.eclipse.swt.widgets.Composite) (dialogArea))); showDetailsArea(); } refreshJobList(); } updateEnablements(); }
void toggleFilter(org.eclipse.ui.internal.provisional.views.markers.MarkerFieldFilterGroup group) { java.util.Collection enabled = getEnabledFilters(); if (enabled.remove(group)) group.setEnabled(false); else { group.setEnabled(true); enabled.add(group); } writeFiltersPreference(); scheduleMarkerUpdate(); }
public void stack(org.eclipse.ui.internal.LayoutPart newPart, org.eclipse.ui.internal.ILayoutContainer container) { getControl().setRedraw(false); org.eclipse.ui.internal.Perspective persp = page.getActivePerspective(); org.eclipse.ui.internal.PerspectiveHelper pres = (persp != null) ? persp.getPresentation() : null; if ((pres != null) && (newPart instanceof org.eclipse.ui.internal.ViewPane)) { org.eclipse.ui.internal.ViewPane vp = ((org.eclipse.ui.internal.ViewPane) (newPart)); org.eclipse.ui.IViewReference vRef = vp.getViewReference(); org.eclipse.ui.internal.LayoutPart fpp = pres.findPart(vRef.getId(), vRef.getSecondaryId()); if ((fpp != null) || (persp.isFastView(vRef))) { derefPart(newPart); } } else { derefPart(newPart); } newPart.reparent(getParent()); container.add(newPart); getControl().setRedraw(true); }
public OverlayCache() { super(); resourceManager = new org.eclipse.jface.resource.LocalResourceManager(org.eclipse.jface.resource.JFaceResources.getResources(org.eclipse.ui.PlatformUI.getWorkbench().getDisplay())); }
public void doSetValue(java.lang.Object value) { boolean changed = false; if (((this.value) == null) && (value != null)) { changed = true; } else if (((this.value) != null) && ((this.value) != value)) { changed = true; } if (changed) { fireValueChange(org.eclipse.core.databinding.observable.Diffs.createValueDiff(this.value, (this.value = value))); } }
private void createModelFor(java.lang.String id) { if (id == null) { id = ((getClass().getName()) + '.') + (java.lang.System.identityHashCode(this)); } menuModel = null; for (org.eclipse.e4.ui.model.application.ui.menu.MMenu item : modelPart.getMenus()) { if (((id.equals(item.getElementId())) && (item instanceof org.eclipse.e4.ui.model.application.ui.menu.MRenderedMenu)) && (item.getTags().contains("popup"))) { menuModel = ((org.eclipse.e4.ui.model.application.ui.menu.MRenderedMenu) (item)); break; } } if ((menuModel) == null) { menuModel = MenuFactoryImpl.eINSTANCE.createRenderedMenu(); menuModel.setElementId(id); menuModel.getTags().add(ContributionsAnalyzer.MC_POPUP); modelPart.getMenus().add(menuModel); org.eclipse.e4.ui.model.application.ui.menu.MPopupMenu popup = MenuFactoryImpl.eINSTANCE.createPopupMenu(); popup.setElementId(id); popup.getTags().add(ContributionsAnalyzer.MC_POPUP); menuModel.getChildren().add(popup); } menuModel.setContributionManager(menu); registerE4Support(); }
public void log(org.eclipse.core.runtime.IStatus status) { java.lang.System.err.println((((((status.getPlugin()) + " - ") + (status.getCode())) + " - ") + (status.getMessage()))); if ((status.getException()) != null) { status.getException().printStackTrace(java.lang.System.err); } }
private void enableActions(boolean value) { hideShowEditorAction.setEnabled(value); savePerspectiveAction.setEnabled(value); lockToolBarAction.setEnabled(value); resetPerspectiveAction.setEnabled(value); editActionSetAction.setEnabled(value); closePerspAction.setEnabled(value); closeAllPerspsAction.setEnabled(value); newWizardMenu.setEnabled(value); newWizardDropDownAction.setEnabled(value); newWizardAction.setEnabled(value); importResourcesAction.setEnabled(value); exportResourcesAction.setEnabled(value); }
public java.lang.Object safeCreateGui(org.eclipse.e4.ui.model.application.ui.MUIElement element, java.lang.Object parentWidget, org.eclipse.e4.core.contexts.IEclipseContext parentContext) { if (!(element.isToBeRendered())) return null; if (!(renderedElements.contains(element))) renderedElements.add(element); if ((removeRoot) != null) { return null; } java.lang.Object currentWidget = element.getWidget(); if (currentWidget != null) { if (currentWidget instanceof org.eclipse.swt.widgets.Control) { org.eclipse.swt.widgets.Control control = ((org.eclipse.swt.widgets.Control) (currentWidget)); if (!(element instanceof org.eclipse.e4.ui.model.application.ui.advanced.MPlaceholder)) control.setVisible(true); if (parentWidget instanceof org.eclipse.swt.widgets.Composite) { org.eclipse.swt.widgets.Composite currentParent = control.getParent(); if (currentParent != parentWidget) { if (currentParent instanceof org.eclipse.swt.custom.CTabFolder) { org.eclipse.swt.custom.CTabFolder folder = ((org.eclipse.swt.custom.CTabFolder) (currentParent)); if ((folder.getTopRight()) == control) { folder.setTopRight(null); } } control.setParent(((org.eclipse.swt.widgets.Composite) (parentWidget))); } } } if (element instanceof org.eclipse.e4.ui.model.application.ui.MContext) { org.eclipse.e4.core.contexts.IEclipseContext ctxt = ((org.eclipse.e4.ui.model.application.ui.MContext) (element)).getContext(); if (ctxt != null) ctxt.setParent(parentContext); } else { java.util.List<org.eclipse.e4.ui.model.application.ui.MContext> childContexts = modelService.findElements(element, null, org.eclipse.e4.ui.model.application.ui.MContext.class, null); for (org.eclipse.e4.ui.model.application.ui.MContext c : childContexts) { org.eclipse.e4.ui.model.application.ui.MUIElement kid = ((org.eclipse.e4.ui.model.application.ui.MUIElement) (c)); org.eclipse.e4.ui.model.application.ui.MUIElement parent = kid.getParent(); if ((parent == null) && ((kid.getCurSharedRef()) != null)) parent = kid.getCurSharedRef().getParent(); if ((!(element instanceof org.eclipse.e4.ui.model.application.ui.advanced.MPlaceholder)) && (parent != element)) continue; if (((c.getContext()) != null) && ((c.getContext().getParent()) != parentContext)) { c.getContext().setParent(parentContext); } } } if ((element.getParent()) instanceof org.eclipse.e4.ui.model.application.ui.MUIElement) { org.eclipse.e4.ui.model.application.ui.MElementContainer<org.eclipse.e4.ui.model.application.ui.MUIElement> parentElement = element.getParent(); org.eclipse.e4.ui.internal.workbench.swt.AbstractPartRenderer parentRenderer = getRendererFor(parentElement); if (parentRenderer != null) parentRenderer.childRendered(parentElement, element); } return element.getWidget(); } if (element instanceof org.eclipse.e4.ui.model.application.ui.MContext) { org.eclipse.e4.ui.model.application.ui.MContext ctxt = ((org.eclipse.e4.ui.model.application.ui.MContext) (element)); if ((ctxt.getContext()) == null) { org.eclipse.e4.core.contexts.IEclipseContext lclContext = parentContext.createChild(getContextName(element)); org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.populateModelInterfaces(ctxt, lclContext, element.getClass().getInterfaces()); ctxt.setContext(lclContext); for (java.lang.String variable : ctxt.getVariables()) { lclContext.declareModifiable(variable); } java.util.Map<java.lang.String, java.lang.String> props = ctxt.getProperties(); for (java.lang.String key : props.keySet()) { lclContext.set(key, props.get(key)); } org.eclipse.e4.ui.internal.workbench.E4Workbench.processHierarchy(element); } } java.lang.Object newWidget = createWidget(element, parentWidget); if (newWidget != null) { org.eclipse.e4.ui.internal.workbench.swt.AbstractPartRenderer renderer = getRendererFor(element); renderer.hookControllerLogic(element); if (element instanceof org.eclipse.e4.ui.model.application.ui.MElementContainer) { renderer.processContents(((org.eclipse.e4.ui.model.application.ui.MElementContainer<org.eclipse.e4.ui.model.application.ui.MUIElement>) (element))); } renderer.postProcess(element); if ((element.getParent()) instanceof org.eclipse.e4.ui.model.application.ui.MUIElement) { org.eclipse.e4.ui.model.application.ui.MElementContainer<org.eclipse.e4.ui.model.application.ui.MUIElement> parentElement = element.getParent(); org.eclipse.e4.ui.internal.workbench.swt.AbstractPartRenderer parentRenderer = getRendererFor(parentElement); if (parentRenderer != null) parentRenderer.childRendered(parentElement, element); } } else { if (element instanceof org.eclipse.e4.ui.model.application.ui.MContext) { org.eclipse.e4.ui.model.application.ui.MContext ctxt = ((org.eclipse.e4.ui.model.application.ui.MContext) (element)); org.eclipse.e4.core.contexts.IEclipseContext lclContext = ctxt.getContext(); if (lclContext != null) { lclContext.dispose(); ctxt.setContext(null); } } } return newWidget; }
public void setInitializationData(org.eclipse.core.runtime.IConfigurationElement cfig, java.lang.String propertyName, java.lang.Object data) { super.setInitializationData(cfig, propertyName, data); if ((propertyName.equals(MarkerSupportInternalUtilities.ATTRIBUTE_CLASS)) && (data != null)) { java.util.StringTokenizer tokens = new java.util.StringTokenizer(((java.lang.String) (data)), ";"); defaultGeneratorIds = new java.lang.String[tokens.countTokens()]; for (int i = 0; i < (defaultGeneratorIds.length); i++) { defaultGeneratorIds[i] = tokens.nextToken(); } } }
private void internalRefreshAll(boolean updateLabels) { java.lang.Object[] children = getSortedChildren(getRoot()); org.eclipse.swt.widgets.TableItem[] items = getTable().getItems(); int min = java.lang.Math.min(children.length, items.length); for (int i = 0; i < min; ++i) { org.eclipse.swt.widgets.TableItem item = items[i]; if (equals(children[i], item.getData())) { if (updateLabels) { updateItem(item, children[i]); } else { associate(children[i], item); } } else { item.setText(""); item.setImage(new org.eclipse.swt.graphics.Image[java.lang.Math.max(1, table.getColumnCount())]); disassociate(item); } } if (min < (items.length)) { for (int i = items.length; (--i) >= min;) { disassociate(items[i]); } table.remove(min, ((items.length) - 1)); } if ((table.getItemCount()) == 0) { table.removeAll(); } for (int i = 0; i < min; ++i) { org.eclipse.swt.widgets.TableItem item = items[i]; if ((item.getData()) == null) updateItem(item, children[i]); } for (int i = min; i < (children.length); ++i) { createItem(children[i], i); } }
public java.lang.String validateDestination(org.eclipse.core.resources.IContainer destination, org.eclipse.core.resources.IResource[] sourceResources) { if (!(isAccessible(destination))) { return org.eclipse.ui.internal.WorkbenchMessages.getString("CopyFilesAndFoldersOperation.destinationAccessError"); } java.lang.String destinationMessage = validateDestinationLocation(destination); if (destinationMessage != null) { return destinationMessage; } org.eclipse.core.resources.IContainer firstParent = null; org.eclipse.core.runtime.IPath destinationLocation = destination.getLocation(); for (int i = 0; i < (sourceResources.length); i++) { org.eclipse.core.resources.IResource sourceResource = sourceResources[i]; if (firstParent == null) { firstParent = sourceResource.getParent(); } else if ((firstParent.equals(sourceResource.getParent())) == false) { return org.eclipse.ui.internal.WorkbenchMessages.getString("CopyFilesAndFoldersOperation.parentNotEqual"); } org.eclipse.core.runtime.IPath sourceLocation = sourceResource.getLocation(); if (sourceLocation == null) { if (sourceResource.isLinked()) { return org.eclipse.ui.internal.WorkbenchMessages.format("CopyFilesAndFoldersOperation.missingPathVariable", new java.lang.Object[]{ sourceResource.getName() }); } else { return org.eclipse.ui.internal.WorkbenchMessages.format("CopyFilesAndFoldersOperation.resourceDeleted", new java.lang.Object[]{ sourceResource.getName() }); } } else { if (sourceLocation.equals(destinationLocation)) { return org.eclipse.ui.internal.WorkbenchMessages.format("CopyFilesAndFoldersOperation.sameSourceAndDest", new java.lang.Object[]{ sourceResource.getName() }); } if (sourceLocation.isPrefixOf(destinationLocation)) { return org.eclipse.ui.internal.WorkbenchMessages.getString("CopyFilesAndFoldersOperation.destinationDescendentError"); } } java.lang.String linkedResourceMessage = validateLinkedResource(destination, sourceResource); if (linkedResourceMessage != null) { return linkedResourceMessage; } } return null; }
private org.eclipse.ui.internal.PerspectiveBarManager createBarManager(int direction) { org.eclipse.ui.internal.PerspectiveBarManager barManager = new org.eclipse.ui.internal.PerspectiveBarManager(((style) | direction)); if (apiPreferenceStore.getBoolean(IWorkbenchPreferenceConstants.SHOW_OPEN_ON_PERSPECTIVE_BAR)) { barManager.add(new org.eclipse.ui.internal.PerspectiveBarNewContributionItem(window)); } org.eclipse.ui.IWorkbenchPage page = window.getActivePage(); if (page != null) { org.eclipse.ui.IPerspectiveDescriptor[] perspectives = page.getOpenPerspectives(); for (int i = 0; i < (perspectives.length); i++) { barManager.insert(1, new org.eclipse.ui.internal.PerspectiveBarContributionItem(perspectives[i], page)); } } return barManager; }
private void save(org.eclipse.jface.dialogs.DialogSettings.XMLWriter out) { java.util.HashMap attributes = new java.util.HashMap(2); attributes.put(org.eclipse.jface.dialogs.DialogSettings.TAG_NAME, ((name) == null ? "" : name)); out.startTag(org.eclipse.jface.dialogs.DialogSettings.TAG_SECTION, attributes); attributes.clear(); for (java.util.Iterator i = items.keySet().iterator(); i.hasNext();) { java.lang.String key = ((java.lang.String) (i.next())); attributes.put(org.eclipse.jface.dialogs.DialogSettings.TAG_KEY, (key == null ? "" : key)); java.lang.String string = ((java.lang.String) (items.get(key))); attributes.put(org.eclipse.jface.dialogs.DialogSettings.TAG_VALUE, (string == null ? "" : string)); out.printTag(org.eclipse.jface.dialogs.DialogSettings.TAG_ITEM, attributes, true); } attributes.clear(); for (java.util.Iterator i = arrayItems.keySet().iterator(); i.hasNext();) { java.lang.String key = ((java.lang.String) (i.next())); attributes.put(org.eclipse.jface.dialogs.DialogSettings.TAG_KEY, (key == null ? "" : key)); out.startTag(org.eclipse.jface.dialogs.DialogSettings.TAG_LIST, attributes); java.lang.String[] value = ((java.lang.String[]) (arrayItems.get(key))); attributes.clear(); if (value != null) { for (int index = 0; index < (value.length); index++) { java.lang.String string = value[index]; attributes.put(org.eclipse.jface.dialogs.DialogSettings.TAG_VALUE, (string == null ? "" : string)); out.printTag(org.eclipse.jface.dialogs.DialogSettings.TAG_ITEM, attributes, true); } } out.endTag(org.eclipse.jface.dialogs.DialogSettings.TAG_LIST); attributes.clear(); } for (java.util.Iterator i = sections.values().iterator(); i.hasNext();) { ((org.eclipse.jface.dialogs.DialogSettings) (i.next())).save(out); } out.endTag(org.eclipse.jface.dialogs.DialogSettings.TAG_SECTION); }
protected void performDefaults() { org.eclipse.jface.preference.IPreferenceStore store = getPreferenceStore(); org.eclipse.jface.preference.IPreferenceStore apiStore = org.eclipse.ui.internal.util.PrefUtil.getAPIPreferenceStore(); showTextOnPerspectiveBar.setSelection(apiStore.getDefaultBoolean(IWorkbenchPreferenceConstants.SHOW_TEXT_ON_PERSPECTIVE_BAR)); showTraditionalStyleTabs.setSelection(apiStore.getDefaultBoolean(IWorkbenchPreferenceConstants.SHOW_TRADITIONAL_STYLE_TABS)); enableAnimations.setSelection(apiStore.getDefaultBoolean(IWorkbenchPreferenceConstants.ENABLE_ANIMATIONS)); int editorTopValue = store.getDefaultInt(IPreferenceConstants.EDITOR_TAB_POSITION); editorTopButton.setSelection((editorTopValue == (org.eclipse.swt.SWT.TOP))); editorBottomButton.setSelection((editorTopValue == (org.eclipse.swt.SWT.BOTTOM))); editorAlignment = editorTopValue; int viewTopValue = store.getDefaultInt(IPreferenceConstants.VIEW_TAB_POSITION); viewTopButton.setSelection((viewTopValue == (org.eclipse.swt.SWT.TOP))); viewBottomButton.setSelection((viewTopValue == (org.eclipse.swt.SWT.BOTTOM))); viewAlignment = viewTopValue; perspBarLocation = store.getDefaultString(IWorkbenchPreferenceConstants.DOCK_PERSPECTIVE_BAR); perspLeftButton.setSelection(IWorkbenchPreferenceConstants.LEFT.equals(perspBarLocation)); perspTopLeftButton.setSelection(IWorkbenchPreferenceConstants.TOP_LEFT.equals(perspBarLocation)); perspTopRightButton.setSelection(IWorkbenchPreferenceConstants.TOP_RIGHT.equals(perspBarLocation)); org.eclipse.ui.internal.WorkbenchPlugin.getDefault().savePluginPreferences(); super.performDefaults(); }
@javax.annotation.PostConstruct public void setup() { final org.eclipse.e4.core.contexts.IEclipseContext windowContext = model.getContext(); org.eclipse.ui.internal.services.IServiceLocatorCreator slc = ((org.eclipse.ui.internal.services.IServiceLocatorCreator) (workbench.getService(org.eclipse.ui.internal.services.IServiceLocatorCreator.class))); this.serviceLocator = ((org.eclipse.ui.internal.services.ServiceLocator) (slc.createServiceLocator(workbench, null, new org.eclipse.ui.services.IDisposable() { public void dispose() { final org.eclipse.swt.widgets.Shell shell = getShell(); if ((shell != null) && (!(shell.isDisposed()))) { close(); } } }))); serviceLocator.setContext(windowContext); windowContext.set(org.eclipse.core.runtime.dynamichelpers.IExtensionTracker.class.getName(), new org.eclipse.e4.core.contexts.ContextFunction() { @java.lang.Override public java.lang.Object compute(org.eclipse.e4.core.contexts.IEclipseContext context) { if ((tracker) == null) { tracker = new org.eclipse.ui.internal.registry.UIExtensionTracker(getWorkbench().getDisplay()); } return tracker; } }); windowContext.set(org.eclipse.e4.ui.workbench.modeling.IWindowCloseHandler.class.getName(), new org.eclipse.e4.ui.workbench.modeling.IWindowCloseHandler() { public boolean close(org.eclipse.e4.ui.model.application.ui.basic.MWindow window) { return (getWindowAdvisor().preWindowShellClose()) && (org.eclipse.ui.internal.WorkbenchWindow.this.close()); } }); final org.eclipse.e4.ui.workbench.modeling.ISaveHandler defaultSaveHandler = windowContext.get(org.eclipse.e4.ui.workbench.modeling.ISaveHandler.class); windowContext.set(org.eclipse.e4.ui.workbench.modeling.ISaveHandler.class, new org.eclipse.e4.ui.workbench.modeling.ISaveHandler() { public org.eclipse.ui.internal.Save promptToSave(org.eclipse.e4.ui.model.application.ui.basic.MPart dirtyPart) { java.lang.Object object = dirtyPart.getObject(); if (object instanceof org.eclipse.ui.internal.e4.compatibility.CompatibilityPart) { org.eclipse.ui.IWorkbenchPart part = ((org.eclipse.ui.internal.e4.compatibility.CompatibilityPart) (object)).getPart(); if (part instanceof org.eclipse.ui.ISaveablePart) { if (!(((org.eclipse.ui.ISaveablePart) (part)).isSaveOnCloseNeeded())) return Save.NO; return org.eclipse.ui.internal.SaveableHelper.savePart(((org.eclipse.ui.ISaveablePart) (part)), part, org.eclipse.ui.internal.WorkbenchWindow.this, true) ? Save.NO : Save.CANCEL; } } return defaultSaveHandler.promptToSave(dirtyPart); } public org.eclipse.ui.internal.Save[] promptToSave(java.util.Collection<org.eclipse.e4.ui.model.application.ui.basic.MPart> dirtyParts) { org.eclipse.jface.viewers.LabelProvider labelProvider = new org.eclipse.jface.viewers.LabelProvider() { @java.lang.Override public java.lang.String getText(java.lang.Object element) { return ((org.eclipse.e4.ui.model.application.ui.basic.MPart) (element)).getLocalizedLabel(); } }; java.util.List<org.eclipse.e4.ui.model.application.ui.basic.MPart> parts = new java.util.ArrayList<org.eclipse.e4.ui.model.application.ui.basic.MPart>(dirtyParts); org.eclipse.ui.dialogs.ListSelectionDialog dialog = new org.eclipse.ui.dialogs.ListSelectionDialog(getShell(), parts, org.eclipse.jface.viewers.ArrayContentProvider.getInstance(), labelProvider, WorkbenchMessages.EditorManager_saveResourcesMessage); dialog.setInitialSelections(parts.toArray()); dialog.setTitle(WorkbenchMessages.EditorManager_saveResourcesTitle); if ((dialog.open()) == (org.eclipse.jface.dialogs.IDialogConstants.CANCEL_ID)) { return new org.eclipse.ui.internal.Save[]{ Save.CANCEL }; } java.lang.Object[] toSave = dialog.getResult(); org.eclipse.ui.internal.Save[] retSaves = new org.eclipse.ui.internal.Save[parts.size()]; java.util.Arrays.fill(retSaves, Save.NO); for (int i = 0; i < (retSaves.length); i++) { org.eclipse.e4.ui.model.application.ui.basic.MPart part = parts.get(i); for (java.lang.Object o : toSave) { if (o == part) { retSaves[i] = Save.YES; break; } } } return retSaves; } }); windowContext.set(org.eclipse.ui.IWorkbenchWindow.class.getName(), this); windowContext.set(org.eclipse.ui.IPageService.class, this); windowContext.set(org.eclipse.ui.IPartService.class, partService); windowContext.set(ISources.ACTIVE_WORKBENCH_WINDOW_NAME, this); windowContext.set(ISources.ACTIVE_WORKBENCH_WINDOW_SHELL_NAME, getShell()); org.eclipse.e4.ui.services.EContextService cs = ((org.eclipse.e4.ui.services.EContextService) (windowContext.get(org.eclipse.e4.ui.services.EContextService.class.getName()))); cs.activateContext(IContextService.CONTEXT_ID_WINDOW); cs.getActiveContextIds(); java.lang.String title = getWindowConfigurer().basicGetTitle(); if (title != null) { getShell().setText(org.eclipse.osgi.util.TextProcessor.process(title, org.eclipse.ui.internal.WorkbenchWindow.TEXT_DELIMITERS)); } initializeDefaultServices(); fireWindowOpening(); try { page = new org.eclipse.ui.internal.WorkbenchPage(this, input); } catch (org.eclipse.ui.WorkbenchException e) { org.eclipse.ui.internal.WorkbenchPlugin.log(e); } org.eclipse.e4.core.contexts.ContextInjectionFactory.inject(page, model.getContext()); windowContext.set(org.eclipse.ui.IWorkbenchPage.class, page); menuManager.setOverrides(menuOverride); ((org.eclipse.ui.internal.CoolBarToTrimManager) (getCoolBarManager2())).setOverrides(toolbarOverride); fillActionBars(org.eclipse.ui.internal.WorkbenchWindow.FILL_ALL_ACTION_BARS); firePageOpened(); java.util.List<org.eclipse.e4.ui.model.application.ui.advanced.MPerspectiveStack> ps = modelService.findElements(model, null, org.eclipse.e4.ui.model.application.ui.advanced.MPerspectiveStack.class, null); org.eclipse.e4.ui.model.application.ui.advanced.MPerspective curPersp = null; boolean newWindow = true; if ((ps.size()) > 0) { org.eclipse.e4.ui.model.application.ui.advanced.MPerspectiveStack stack = ps.get(0); if ((stack.getSelectedElement()) != null) { curPersp = stack.getSelectedElement(); org.eclipse.ui.IPerspectiveDescriptor thePersp = getWorkbench().getPerspectiveRegistry().findPerspectiveWithId(curPersp.getElementId()); if (thePersp != null) { perspective = thePersp; newWindow = false; } } } page.setPerspective(perspective); populateTopTrimContributions(); populateBottomTrimContributions(); org.eclipse.swt.widgets.Shell shell = ((org.eclipse.swt.widgets.Shell) (model.getWidget())); if ((model.getMainMenu()) == null) { final org.eclipse.e4.ui.model.application.ui.menu.MMenu mainMenu = MenuFactoryImpl.eINSTANCE.createMenu(); mainMenu.setElementId("org.eclipse.ui.main.menu"); final org.eclipse.e4.ui.workbench.renderers.swt.MenuManagerRenderer renderer = ((org.eclipse.e4.ui.workbench.renderers.swt.MenuManagerRenderer) (rendererFactory.getRenderer(mainMenu, null))); renderer.linkModelToManager(mainMenu, menuManager); fill(renderer, mainMenu, menuManager); model.setMainMenu(mainMenu); final org.eclipse.swt.widgets.Menu menu = ((org.eclipse.swt.widgets.Menu) (engine.createGui(mainMenu, model.getWidget(), model.getContext()))); shell.setMenuBar(menu); menuUpdater = new java.lang.Runnable() { public void run() { try { if (((((model.getMainMenu()) == null) || ((model.getWidget()) == null)) || (menu.isDisposed())) || ((mainMenu.getWidget()) == null)) { return; } org.eclipse.e4.ui.workbench.renderers.swt.MenuManagerRendererFilter.updateElementVisibility(mainMenu, renderer, menuManager, windowContext.getActiveLeaf(), 1, false); menuManager.update(true); } finally { canUpdateMenus = true; } } }; org.eclipse.e4.core.contexts.RunAndTrack menuChangeManager = new org.eclipse.e4.core.contexts.RunAndTrack() { @java.lang.Override public boolean changed(org.eclipse.e4.core.contexts.IEclipseContext context) { org.eclipse.core.expressions.ExpressionInfo info = new org.eclipse.core.expressions.ExpressionInfo(); org.eclipse.e4.core.contexts.IEclipseContext leafContext = windowContext.getActiveLeaf(); org.eclipse.e4.ui.workbench.renderers.swt.MenuManagerRendererFilter.collectInfo(info, mainMenu, renderer, leafContext, true); for (java.lang.String name : info.getAccessedVariableNames()) { leafContext.get(name); } if ((canUpdateMenus) && ((workbench.getDisplay()) != null)) { canUpdateMenus = false; workbench.getDisplay().asyncExec(menuUpdater); } return manageChanges; } }; windowContext.runAndTrack(menuChangeManager); } eventBroker.subscribe(UIEvents.UIElement.TOPIC_WIDGET, windowWidgetHandler); firePageActivated(); if (newWindow) { page.fireInitialPartVisibilityEvents(); } else { page.updatePerspectiveActionSets(); } partService.setPage(page); updateActionSets(); org.eclipse.jface.preference.IPreferenceStore preferenceStore = org.eclipse.ui.internal.util.PrefUtil.getAPIPreferenceStore(); boolean enableAnimations = preferenceStore.getBoolean(IWorkbenchPreferenceConstants.ENABLE_ANIMATIONS); preferenceStore.setValue(IWorkbenchPreferenceConstants.ENABLE_ANIMATIONS, false); java.util.List<org.eclipse.e4.ui.model.application.ui.advanced.MPerspective> persps = modelService.findElements(model, null, org.eclipse.e4.ui.model.application.ui.advanced.MPerspective.class, null); if ((persps.size()) > 1) { org.eclipse.ui.internal.util.PrefUtil.getAPIPreferenceStore().setValue(IWorkbenchPreferenceConstants.SHOW_INTRO, false); org.eclipse.ui.internal.util.PrefUtil.saveAPIPrefs(); } getWindowAdvisor().openIntro(); preferenceStore.setValue(IWorkbenchPreferenceConstants.ENABLE_ANIMATIONS, enableAnimations); getShell().setData(this); workbench.getHelpSystem().setHelp(getShell(), IWorkbenchHelpContextIds.WORKBENCH_WINDOW); trackShellActivation(); }
private void init(org.eclipse.ui.internal.WorkbenchWindow w, java.lang.String layoutID, org.eclipse.core.runtime.IAdaptable input) throws org.eclipse.ui.WorkbenchException { this.window = w; this.input = input; createClientComposite(); editorPresentation = new org.eclipse.ui.internal.EditorAreaHelper(this); editorMgr = new org.eclipse.ui.internal.EditorManager(window, this, editorPresentation); if (layoutID != null) { org.eclipse.ui.internal.registry.PerspectiveDescriptor desc = ((org.eclipse.ui.internal.registry.PerspectiveDescriptor) (org.eclipse.ui.internal.WorkbenchPlugin.getDefault().getPerspectiveRegistry().findPerspectiveWithId(layoutID))); if (desc == null) throw new org.eclipse.ui.WorkbenchException(org.eclipse.ui.internal.WorkbenchMessages.format("WorkbenchPage.ErrorCreatingPerspective", new java.lang.String[]{ layoutID })); org.eclipse.ui.internal.Perspective persp = createPerspective(desc); if (persp == null) return; perspList.setActive(persp); window.firePerspectiveActivated(this, desc); } }
public boolean close() { this.filterJob.cancel(); this.refreshCacheJob.cancel(); this.refreshProgressMessageJob.cancel(); storeDialog(getDialogSettings()); return super.close(); }
public boolean isPartVisible(org.eclipse.ui.IWorkbenchPart part) { org.eclipse.ui.internal.PartPane pane = getPane(part); return (pane != null) && (pane.getVisible()); }
private boolean certifyPart(org.eclipse.ui.internal.IWorkbenchPart part) { if (!((part.getSite()) instanceof org.eclipse.ui.internal.PartSite)) return false; if (part instanceof org.eclipse.ui.internal.IEditorPart) { org.eclipse.ui.internal.IEditorReference ref = ((org.eclipse.ui.internal.IEditorReference) (getReference(part))); return getEditorManager().containsEditor(ref); } if (part instanceof org.eclipse.ui.internal.IViewPart) { org.eclipse.ui.internal.Perspective persp = getActivePerspective(); return (persp != null) && (persp.containsView(((org.eclipse.ui.internal.IViewPart) (part)))); } return false; }
private static final org.eclipse.ui.internal.commands.Parameter[] readParameters(final org.eclipse.core.runtime.IConfigurationElement configurationElement, final java.util.List warningsToLog) { final org.eclipse.core.runtime.IConfigurationElement[] parameterElements = configurationElement.getChildren(org.eclipse.ui.internal.commands.CommandPersistence.ELEMENT_PARAMETER); if ((parameterElements == null) || ((parameterElements.length) == 0)) { return null; } int insertionIndex = 0; org.eclipse.ui.internal.commands.Parameter[] parameters = new org.eclipse.ui.internal.commands.Parameter[parameterElements.length]; for (int i = 0; i < (parameterElements.length); i++) { final org.eclipse.core.runtime.IConfigurationElement parameterElement = parameterElements[i]; final java.lang.String id = parameterElement.getAttribute(org.eclipse.ui.internal.commands.CommandPersistence.ATTRIBUTE_ID); if ((id == null) || ((id.length()) == 0)) { final java.lang.String message = ("Parameters need an id: '" + (configurationElement.getNamespace())) + "'."; final org.eclipse.core.runtime.IStatus status = new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.WARNING, org.eclipse.ui.internal.WorkbenchPlugin.PI_WORKBENCH, 0, message, null); warningsToLog.add(status); continue; } final java.lang.String name = parameterElement.getAttribute(org.eclipse.ui.internal.commands.CommandPersistence.ATTRIBUTE_NAME); if ((name == null) || ((name.length()) == 0)) { final java.lang.String message = ((("Parameters need a name: '" + (configurationElement.getNamespace())) + "', '") + id) + "'."; final org.eclipse.core.runtime.IStatus status = new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.WARNING, org.eclipse.ui.internal.WorkbenchPlugin.PI_WORKBENCH, 0, message, null); warningsToLog.add(status); continue; } final java.lang.String optionalString = parameterElement.getAttribute(org.eclipse.ui.internal.commands.CommandPersistence.ATTRIBUTE_OPTIONAL); boolean optional; if ((optionalString == null) || ((optionalString.length()) == 0)) { optional = true; } else { optional = !("false".equalsIgnoreCase(optionalString)); } final org.eclipse.ui.internal.commands.Parameter parameter = new org.eclipse.ui.internal.commands.Parameter(id, name, parameterElement, optional); parameters[(insertionIndex++)] = parameter; } if (insertionIndex != (parameters.length)) { final org.eclipse.ui.internal.commands.Parameter[] compactedParameters = new org.eclipse.ui.internal.commands.Parameter[insertionIndex]; java.lang.System.arraycopy(parameters, 0, compactedParameters, 0, insertionIndex); parameters = compactedParameters; } return parameters; }
public StructuredViewerManager(org.eclipse.jface.viewers.Viewer aViewer) { super(); viewer = aViewer; refreshJob.setSystem(true); }
public IntroAction(org.eclipse.ui.IWorkbenchWindow window) { super(IntroMessages.Intro_action_text); if (window == null) { throw new java.lang.IllegalArgumentException(); } this.workbenchWindow = window; setActionDefinitionId("org.eclipse.ui.help.quickStartAction"); window.addPageListener(pageListener); }
protected void loadBrowsers() { org.eclipse.ui.internal.browser.Trace.trace(Trace.FINEST, "Loading web browsers"); java.lang.String xmlString = org.eclipse.core.runtime.Platform.getPreferencesService().getString(WebBrowserUIPlugin.PLUGIN_ID, "browsers", null, null); if ((xmlString != null) && ((xmlString.length()) > 0)) { browsers = new java.util.ArrayList(); try { java.io.ByteArrayInputStream in = new java.io.ByteArrayInputStream(xmlString.getBytes("utf-8")); java.io.Reader reader = new java.io.InputStreamReader(in, "utf-8"); org.eclipse.ui.IMemento memento = org.eclipse.ui.XMLMemento.createReadRoot(reader); org.eclipse.ui.IMemento system = memento.getChild("system"); if ((system != null) && (org.eclipse.ui.internal.browser.WebBrowserUtil.canUseSystemBrowser())) browsers.add(new org.eclipse.ui.internal.browser.SystemBrowserDescriptor()); org.eclipse.ui.IMemento[] children = memento.getChildren("external"); int size = children.length; for (int i = 0; i < size; i++) { org.eclipse.ui.internal.browser.BrowserDescriptor browser = new org.eclipse.ui.internal.browser.BrowserDescriptor(); browser.load(children[i]); browsers.add(browser); } java.lang.Integer current = memento.getInteger("current"); if (current != null) { currentBrowser = ((org.eclipse.ui.internal.browser.IBrowserDescriptor) (browsers.get(current.intValue()))); } } catch (java.lang.Exception e) { org.eclipse.ui.internal.browser.Trace.trace(Trace.WARNING, ("Could not load browsers: " + (e.getMessage()))); } org.eclipse.ui.internal.browser.IBrowserDescriptor system = new org.eclipse.ui.internal.browser.SystemBrowserDescriptor(); if ((org.eclipse.ui.internal.browser.WebBrowserUtil.canUseSystemBrowser()) && (!(browsers.contains(system)))) { browsers.add(0, system); currentBrowser = system; saveBrowsers(); } } else { setupDefaultBrowsers(); saveBrowsers(); } if (((currentBrowser) == null) && ((browsers.size()) > 0)) currentBrowser = ((org.eclipse.ui.internal.browser.IBrowserDescriptor) (browsers.get(0))); setChanged(); notifyObservers(); }
private boolean hasResolution(org.eclipse.core.resources.IMarker marker, org.eclipse.core.runtime.IConfigurationElement element) { org.eclipse.ui.IMarkerResolutionGenerator generator = null; if ((org.eclipse.core.runtime.Platform.getBundle(element.getNamespace()).getState()) == (org.osgi.framework.Bundle.ACTIVE)) { try { generator = ((org.eclipse.ui.IMarkerResolutionGenerator) (element.createExecutableExtension(org.eclipse.ui.internal.ide.registry.MarkerHelpRegistry.ATT_CLASS))); } catch (org.eclipse.core.runtime.CoreException e) { org.eclipse.ui.internal.ide.Policy.handle(e); } if (generator != null) { if (generator instanceof org.eclipse.ui.IMarkerResolutionGenerator2) { if (((org.eclipse.ui.IMarkerResolutionGenerator2) (generator)).hasResolutions(marker)) { return true; } } else { org.eclipse.ui.IMarkerResolution[] resolutions = generator.getResolutions(marker); if (resolutions == null) { org.eclipse.ui.statushandlers.StatusManager.getManager().handle(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, org.eclipse.ui.internal.ide.IDEWorkbenchPlugin.IDE_WORKBENCH, org.eclipse.core.runtime.IStatus.ERROR, (((("Failure in " + (generator.getClass().getName())) + " from plugin ") + (element.getContributor().getName())) + ": getResolutions(IMarker) must not return null"), null), StatusManager.LOG); return false; } else if ((resolutions.length) > 0) { return true; } } } } else { return true; } return false; }
private void handleLocationBrowseButtonPressed() { java.lang.String selectedDirectory = null; java.lang.String dirName = getPathFromLocationField(); if (!(dirName.equals(IDEResourceInfoUtils.EMPTY_STRING))) { org.eclipse.core.filesystem.IFileInfo info; info = org.eclipse.ui.internal.ide.dialogs.IDEResourceInfoUtils.getFileInfo(dirName); if ((info == null) || (!(info.exists()))) dirName = IDEResourceInfoUtils.EMPTY_STRING; } else { java.lang.String value = getDialogSettings().get(org.eclipse.ui.internal.ide.dialogs.ProjectContentsLocationArea.SAVED_LOCATION_ATTR); if (value != null) { dirName = value; } } org.eclipse.ui.internal.ide.filesystem.FileSystemConfiguration config = getSelectedConfiguration(); if ((config == null) || (config.equals(org.eclipse.ui.internal.ide.filesystem.FileSystemSupportRegistry.getInstance().getDefaultConfiguration()))) { org.eclipse.swt.widgets.DirectoryDialog dialog = new org.eclipse.swt.widgets.DirectoryDialog(locationPathField.getShell()); dialog.setMessage(IDEWorkbenchMessages.ProjectLocationSelectionDialog_directoryLabel); dialog.setFilterPath(dirName); selectedDirectory = dialog.open(); } else { java.net.URI uri = getSelectedConfiguration().getContributor().browseFileSystem(dirName, browseButton.getShell()); if (uri != null) selectedDirectory = uri.toString(); } if (selectedDirectory != null) { updateLocationField(selectedDirectory); getDialogSettings().put(org.eclipse.ui.internal.ide.dialogs.ProjectContentsLocationArea.SAVED_LOCATION_ATTR, selectedDirectory); } }
public java.lang.Object[] getChildren(java.lang.Object parentElement) { java.util.List children = new java.util.ArrayList(); if (parentElement instanceof org.eclipse.ui.internal.commands.Category) { if ((commands) != null) { org.eclipse.ui.internal.commands.Category category = ((org.eclipse.ui.internal.commands.Category) (parentElement)); for (int i = 0; i < (commands.size()); i++) { org.eclipse.ui.internal.commands.Command command = ((org.eclipse.ui.internal.commands.Command) (commands.get(i))); if (category.getId().equals(command.getCategory())) children.add(command); } } } else if (parentElement == null) { if (((categories) != null) && ((commands) != null)) { java.util.List categories = new java.util.ArrayList(this.categories); java.util.Collections.sort(categories, org.eclipse.ui.internal.commands.Category.nameComparator()); children.addAll(categories); java.util.List commands = new java.util.ArrayList(); for (int i = 0; i < (this.commands.size()); i++) { org.eclipse.ui.internal.commands.Command command = ((org.eclipse.ui.internal.commands.Command) (this.commands.get(i))); if ((command.getCategory()) == null) commands.add(command); } java.util.Collections.sort(commands, org.eclipse.ui.internal.commands.Command.nameComparator()); children.addAll(commands); } } return children.toArray(); }
private boolean wordMatches(java.lang.String text) { if (match(text)) return true; java.text.BreakIterator iter = java.text.BreakIterator.getWordInstance(); iter.setText(text); int i = iter.first(); while ((i != (java.text.BreakIterator.DONE)) && (i < (text.length()))) { int j = iter.following(i); if (j == (java.text.BreakIterator.DONE)) j = text.length(); if (java.lang.Character.isLetterOrDigit(text.charAt(i))) { java.lang.String word = text.substring(i, j); if (match(word)) return true; } i = j; } return false; }
public org.eclipse.ui.presentations.StackDropResult dragOver(org.eclipse.swt.widgets.Control currentControl, org.eclipse.swt.graphics.Point location, int dragStart) { org.eclipse.ui.internal.presentations.util.AbstractTabItem tabUnderPointer = tabFolder.getItem(location); if (tabUnderPointer == null) { org.eclipse.swt.graphics.Rectangle titleArea = tabFolder.getTabArea(); if ((titleArea.contains(location)) && ((tabFolder.getItemCount()) > 0)) { int dragOverIndex = tabFolder.getItemCount(); org.eclipse.ui.internal.presentations.util.AbstractTabItem lastTab = tabFolder.getItem((dragOverIndex - 1)); if (!(lastTab.isShowing())) { return null; } org.eclipse.swt.graphics.Rectangle lastTabBounds = lastTab.getBounds(); if (lastTabBounds.isEmpty()) { return null; } if (dragStart >= 0) { dragOverIndex--; return new org.eclipse.ui.presentations.StackDropResult(lastTabBounds, new java.lang.Integer(dragOverIndex)); } org.eclipse.swt.graphics.Rectangle dropRectangle = titleArea; dropRectangle.x = (lastTabBounds.x) + (lastTabBounds.width); dropRectangle.width = 3 * (dropRectangle.height); return new org.eclipse.ui.presentations.StackDropResult(dropRectangle, new java.lang.Integer(dragOverIndex)); } else { org.eclipse.swt.graphics.Rectangle displayBounds = org.eclipse.ui.internal.dnd.DragUtil.getDisplayBounds(tabFolder.getControl()); int closestSide = org.eclipse.jface.util.Geometry.getClosestSide(displayBounds, location); if (closestSide == (tabFolder.getTabPosition())) { return new org.eclipse.ui.presentations.StackDropResult(displayBounds, null); } return null; } } if (!(tabUnderPointer.isShowing())) { return null; } org.eclipse.swt.graphics.Rectangle tabBounds = tabUnderPointer.getBounds(); if (tabBounds.isEmpty()) { return null; } return new org.eclipse.ui.presentations.StackDropResult(tabBounds, new org.eclipse.ui.internal.presentations.util.ReplaceDragHandler.DragCookie(tabFolder.indexOf(tabUnderPointer))); }
protected boolean sourceConflictsWithDestination(org.eclipse.core.runtime.IPath sourcePath) { org.eclipse.core.resources.IContainer container = getSpecifiedContainer(); if (container == null) return false; else return getSpecifiedContainer().getLocation().isPrefixOf(sourcePath); }
public void run(org.eclipse.core.runtime.IProgressMonitor monitor) { org.eclipse.core.runtime.IProgressMonitor monitorWrap = new org.eclipse.ui.internal.dialogs.EventLoopProgressMonitor(monitor); monitorWrap.beginTask(WorkbenchMessages.Save, dirtyModels.size()); try { for (java.util.Iterator i = dirtyModels.iterator(); i.hasNext();) { org.eclipse.ui.Saveable model = ((org.eclipse.ui.Saveable) (i.next())); if (!(model.isDirty())) { monitor.worked(1); continue; } org.eclipse.ui.internal.SaveableHelper.doSaveModel(model, new org.eclipse.core.runtime.SubProgressMonitor(monitorWrap, 1), window, confirm); if (monitor.isCanceled()) { break; } } } finally { monitorWrap.done(); } }
public java.lang.Object getAdapter(java.lang.Class adapter) { java.lang.Object result = super.getAdapter(adapter); if ((result == null) && ((getActiveEditor()) != null)) { result = getActiveEditor().getAdapter(adapter); } return result; }
private void handleSelection(Event event) { if (((((((event.detail) & (org.eclipse.swt.SWT.CHECK)) == 0) && ((focusCell) != null)) && ((focusCell.getItem()) != (event.item))) && ((event.item) != null)) && (!(event.item.isDisposed()))) { org.eclipse.jface.viewers.ViewerRow row = viewer.getViewerRowFromItem(event.item); org.eclipse.core.runtime.Assert.isNotNull(row, "Internal Structure invalid. Row item has no row ViewerRow assigned"); org.eclipse.jface.viewers.ViewerCell tmp = row.getCell(focusCell.getColumnIndex()); if (!(focusCell.equals(tmp))) { setFocusCell(tmp); } } }
public static java.lang.String getId(org.eclipse.core.runtime.IConfigurationElement element) { java.lang.String id = element.getAttribute(IWorkbenchRegistryConstants.ATT_ID); if ((id == null) || ((id.length()) == 0)) { id = org.eclipse.ui.internal.menus.MenuAdditionCacheEntry.getCommandId(element); } if ((id == null) || ((id.length()) == 0)) { id = element.toString(); } return id; }
public void preferenceChange(org.eclipse.core.runtime.preferences.IEclipsePreferences.PreferenceChangeEvent event) { java.lang.String propertyName = event.getKey(); if (IPreferenceConstants.ENABLED_DECORATORS.equals(propertyName)) { org.eclipse.ui.internal.decorators.DecoratorManager manager = org.eclipse.ui.internal.WorkbenchPlugin.getDefault().getDecoratorManager(); manager.applyDecoratorsPreference(); manager.clearCaches(); manager.updateForEnablementChange(); return; } if (IWorkbenchPreferenceConstants.SHOW_SYSTEM_JOBS.equals(propertyName)) { boolean setting = org.eclipse.ui.internal.util.PrefUtil.getAPIPreferenceStore().getBoolean(IWorkbenchPreferenceConstants.SHOW_SYSTEM_JOBS); org.eclipse.ui.internal.progress.ProgressManager.getInstance().setShowSystemJobs(setting); } if (IWorkbenchPreferenceConstants.DEFAULT_PERSPECTIVE_ID.equals(propertyName)) { org.eclipse.ui.IWorkbench workbench = org.eclipse.ui.PlatformUI.getWorkbench(); workbench.getPerspectiveRegistry().setDefaultPerspective(org.eclipse.ui.internal.util.PrefUtil.getAPIPreferenceStore().getString(IWorkbenchPreferenceConstants.DEFAULT_PERSPECTIVE_ID)); return; } if (IWorkbenchPreferenceConstants.DOCK_PERSPECTIVE_BAR.equals(propertyName)) { org.eclipse.jface.preference.IPreferenceStore apiStore = org.eclipse.ui.internal.util.PrefUtil.getAPIPreferenceStore(); org.eclipse.ui.IWorkbench workbench = org.eclipse.ui.PlatformUI.getWorkbench(); org.eclipse.ui.IWorkbenchWindow[] workbenchWindows = workbench.getWorkbenchWindows(); for (int i = 0; i < (workbenchWindows.length); i++) { org.eclipse.ui.IWorkbenchWindow window = workbenchWindows[i]; if (window instanceof org.eclipse.ui.internal.WorkbenchWindow) { ((org.eclipse.ui.internal.WorkbenchWindow) (window)).setPerspectiveBarLocation(apiStore.getString(IWorkbenchPreferenceConstants.DOCK_PERSPECTIVE_BAR)); } } return; } if (IWorkbenchPreferenceConstants.SHOW_TRADITIONAL_STYLE_TABS.equals(propertyName)) { boolean newValue = org.eclipse.ui.internal.util.PrefUtil.getAPIPreferenceStore().getBoolean(IWorkbenchPreferenceConstants.SHOW_TRADITIONAL_STYLE_TABS); org.eclipse.ui.IWorkbench workbench = org.eclipse.ui.PlatformUI.getWorkbench(); org.eclipse.ui.IWorkbenchWindow[] workbenchWindows = workbench.getWorkbenchWindows(); for (int i = 0; i < (workbenchWindows.length); i++) { org.eclipse.ui.IWorkbenchWindow window = workbenchWindows[i]; if (window instanceof org.eclipse.ui.internal.WorkbenchWindow) { ((org.eclipse.ui.internal.WorkbenchWindow) (window)).setBannerCurve(newValue); } } return; } if (IPreferenceConstants.RESOURCES.equals(propertyName)) { org.eclipse.ui.IEditorRegistry registry = org.eclipse.ui.internal.WorkbenchPlugin.getDefault().getEditorRegistry(); if (registry instanceof org.eclipse.ui.internal.registry.EditorRegistry) { org.eclipse.ui.internal.registry.EditorRegistry editorRegistry = ((org.eclipse.ui.internal.registry.EditorRegistry) (registry)); org.eclipse.jface.preference.IPreferenceStore store = org.eclipse.ui.internal.WorkbenchPlugin.getDefault().getPreferenceStore(); java.io.Reader reader = null; try { java.lang.String xmlString = store.getString(IPreferenceConstants.RESOURCES); if ((xmlString != null) && ((xmlString.length()) > 0)) { reader = new java.io.StringReader(xmlString); java.util.HashMap editorMap = new java.util.HashMap(); int i = 0; org.eclipse.ui.IEditorDescriptor[] descriptors = editorRegistry.getSortedEditorsFromPlugins(); for (i = 0; i < (descriptors.length); i++) { org.eclipse.ui.IEditorDescriptor descriptor = descriptors[i]; editorMap.put(descriptor.getId(), descriptor); } descriptors = editorRegistry.getSortedEditorsFromOS(); for (i = 0; i < (descriptors.length); i++) { org.eclipse.ui.IEditorDescriptor descriptor = descriptors[i]; editorMap.put(descriptor.getId(), descriptor); } org.eclipse.ui.IFileEditorMapping[] maps = editorRegistry.getFileEditorMappings(); for (int j = 0; j < (maps.length); j++) { org.eclipse.ui.IFileEditorMapping fileEditorMapping = maps[j]; org.eclipse.ui.IEditorDescriptor descriptor = fileEditorMapping.getDefaultEditor(); if ((descriptor != null) && (!(editorMap.containsKey(descriptor.getId())))) { editorMap.put(descriptor.getId(), descriptor); } } editorRegistry.readResources(editorMap, reader); } } catch (org.eclipse.ui.WorkbenchException e) { e.printStackTrace(); } finally { if (reader != null) { try { reader.close(); } catch (java.io.IOException e) { e.printStackTrace(); } } } } } }
private void openHelpTopic(java.lang.String topic, java.lang.String href) { org.eclipse.ui.internal.dialogs.IHelp helpSupport = org.eclipse.ui.internal.dialogs.WorkbenchHelp.getHelpSupport(); if (helpSupport != null) { if (href != null) helpSupport.displayHelpResource(href); else helpSupport.displayHelpResource(topic); } }
private java.util.Collection getCategoriesToExpand() { if ((categoriesToExpand) == null) { categoriesToExpand = new java.util.HashSet(); if ((this.memento) != null) { org.eclipse.ui.IMemento expanded = this.memento.getChild(org.eclipse.ui.internal.views.markers.ExtendedMarkersView.TAG_EXPANDED); if (expanded != null) { org.eclipse.ui.IMemento[] mementoCategories = expanded.getChildren(org.eclipse.ui.internal.views.markers.ExtendedMarkersView.TAG_CATEGORY); org.eclipse.ui.internal.views.markers.MarkerCategory[] markerCategories = builder.getCategories(); if (markerCategories != null) { for (int i = 0; i < (markerCategories.length); i++) { for (int j = 0; j < (mementoCategories.length); j++) { if (markerCategories[i].getName().equals(mementoCategories[j].getID())) categoriesToExpand.add(markerCategories[i].getName()); } } } } } } return categoriesToExpand; }
void addAllocatedFontsToStale(org.eclipse.swt.graphics.Font defaultFont) { if (defaultFont != (baseFont)) staleFonts.add(baseFont); if (defaultFont != (boldFont)) staleFonts.add(baseFont); if (defaultFont != (italicFont)) staleFonts.add(baseFont); }
protected boolean updateSelection(org.eclipse.jface.viewers.IStructuredSelection selection) { return ((super.updateSelection(selection)) && (!(selection.isEmpty()))) && (selectionAdaptsToType(org.eclipse.core.resources.IFile.FILE)); }
private java.lang.Object getCurrentSelection(final org.eclipse.core.expressions.IEvaluationContext context) { java.lang.Object obj = context.getVariable(ISources.ACTIVE_MENU_EDITOR_INPUT_NAME); if ((obj == null) || (obj == (org.eclipse.core.expressions.IEvaluationContext.UNDEFINED_VARIABLE))) { obj = context.getVariable(ISources.ACTIVE_MENU_SELECTION_NAME); if ((obj == null) || (obj == (org.eclipse.core.expressions.IEvaluationContext.UNDEFINED_VARIABLE))) { obj = context.getVariable(ISources.ACTIVE_CURRENT_SELECTION_NAME); } } return obj; }
static org.eclipse.ui.internal.dnd.IDropTarget dragToTarget(final java.lang.Object draggedItem, final org.eclipse.swt.graphics.Rectangle sourceBounds, final org.eclipse.swt.graphics.Point initialLocation, final boolean allowSnapping) { final org.eclipse.swt.widgets.Display display = org.eclipse.swt.widgets.Display.getDefault(); if ((org.eclipse.ui.internal.dnd.DragUtil.forcedDropTarget) != null) { org.eclipse.swt.graphics.Point location = org.eclipse.ui.internal.dnd.DragUtil.forcedDropTarget.getLocation(); org.eclipse.swt.widgets.Control currentControl = org.eclipse.ui.internal.dnd.SwtUtil.findControl(display, location); return org.eclipse.ui.internal.dnd.DragUtil.getDropTarget(currentControl, draggedItem, location, sourceBounds); } final org.eclipse.swt.widgets.Tracker tracker = new org.eclipse.swt.widgets.Tracker(display, org.eclipse.swt.SWT.NULL); tracker.setStippled(true); tracker.addListener(SWT.Move, new org.eclipse.swt.widgets.Listener() { public void handleEvent(final org.eclipse.swt.widgets.Event event) { display.syncExec(new java.lang.Runnable() { public void run() { org.eclipse.swt.graphics.Point location = new org.eclipse.swt.graphics.Point(event.x, event.y); org.eclipse.swt.widgets.Control targetControl = display.getCursorControl(); org.eclipse.ui.internal.dnd.IDropTarget target = org.eclipse.ui.internal.dnd.DragUtil.getDropTarget(targetControl, draggedItem, location, tracker.getRectangles()[0]); org.eclipse.swt.graphics.Rectangle snapTarget = null; if (target != null) { snapTarget = target.getSnapRectangle(); tracker.setCursor(target.getCursor()); } else { tracker.setCursor(org.eclipse.ui.internal.DragCursors.getCursor(DragCursors.INVALID)); } if (allowSnapping) { if (snapTarget == null) { snapTarget = new org.eclipse.swt.graphics.Rectangle((((sourceBounds.x) + (location.x)) - (initialLocation.x)), (((sourceBounds.y) + (location.y)) - (initialLocation.y)), sourceBounds.width, sourceBounds.height); } org.eclipse.swt.graphics.Rectangle[] currentRectangles = tracker.getRectangles(); if (!(((currentRectangles.length) == 1) && (currentRectangles[0].equals(snapTarget)))) { tracker.setRectangles(new org.eclipse.swt.graphics.Rectangle[]{ snapTarget }); } } } }); } }); org.eclipse.ui.internal.dnd.IDropTarget target = null; org.eclipse.swt.widgets.Control startControl = display.getCursorControl(); if ((startControl != null) && allowSnapping) { target = org.eclipse.ui.internal.dnd.DragUtil.getDropTarget(startControl, draggedItem, initialLocation, sourceBounds); } if (target != null) { tracker.setRectangles(new org.eclipse.swt.graphics.Rectangle[]{ target.getSnapRectangle() }); tracker.setCursor(target.getCursor()); } else if (sourceBounds != null) { tracker.setRectangles(new org.eclipse.swt.graphics.Rectangle[]{ org.eclipse.jface.util.Geometry.copy(sourceBounds) }); } if (startControl != null) { startControl.setCapture(true); } boolean trackingOk = tracker.open(); if (startControl != null) { startControl.setCapture(false); } org.eclipse.swt.graphics.Point finalLocation = display.getCursorLocation(); org.eclipse.ui.internal.dnd.IDropTarget dropTarget = null; if (trackingOk) { org.eclipse.swt.widgets.Control targetControl = display.getCursorControl(); dropTarget = org.eclipse.ui.internal.dnd.DragUtil.getDropTarget(targetControl, draggedItem, finalLocation, tracker.getRectangles()[0]); } tracker.dispose(); return dropTarget; }
private void removeParmsFromContext(org.eclipse.core.commands.ParameterizedCommand command) { if ((context) == null) { return; } final java.util.Map<?, ?> parms = command.getParameterMap(); java.util.Iterator<?> i = parms.entrySet().iterator(); while (i.hasNext()) { java.util.Map.Entry<?, ?> entry = ((java.util.Map.Entry<?, ?>) (i.next())); context.set(((java.lang.String) (entry.getKey())), null); } context.set(org.eclipse.e4.core.commands.internal.HandlerServiceImpl.PARM_MAP, null); }
protected boolean isOkToCreateDelegate() { if ((getStyle()) == (org.eclipse.jface.action.IAction.AS_DROP_DOWN_MENU)) { return true; } java.lang.String bundleId = configElement.getNamespace(); return org.eclipse.ui.internal.util.BundleUtility.isActive(bundleId); }
public int open() { if ((getShell()) == null) { create(); } org.eclipse.swt.graphics.Rectangle bounds = getShell().getBounds(); int ret = super.open(); if (!(bounds.equals(getShell().getBounds()))) { getShell().setBounds(bounds); } return ret; }
public void dispose() { clearStaticActions(); final org.eclipse.ui.menus.IMenuService menuService = ((org.eclipse.ui.menus.IMenuService) (part.getSite().getService(org.eclipse.ui.menus.IMenuService.class))); if (menuService != null) { menuService.releaseContributions(menu); } org.eclipse.core.runtime.Platform.getExtensionRegistry().removeRegistryChangeListener(this); menu.removeMenuListener(this); }
public Workbench(org.eclipse.osgi.service.datalocation.Location instanceLocation, org.eclipse.core.runtime.IExtensionRegistry registry, org.osgi.service.packageadmin.PackageAdmin packageAdmin, org.eclipse.e4.core.services.context.IEclipseContext applicationContext, org.eclipse.e4.workbench.ui.IWorkbenchWindowHandler windowHandler) { this.windowHandler = windowHandler; exceptionHandler = new org.eclipse.e4.workbench.ui.internal.ExceptionHandler(); this.registry = registry; try { workbenchData = new java.io.File(org.eclipse.core.runtime.URIUtil.toURI(instanceLocation.getURL())); } catch (java.net.URISyntaxException e) { throw new java.lang.RuntimeException(e); } workbenchData = new java.io.File(workbenchData, ".metadata"); workbenchData = new java.io.File(workbenchData, ".plugins"); workbenchData = new java.io.File(workbenchData, "org.eclipse.e4.workbench"); workbenchData = new java.io.File(workbenchData, "workbench.xmi"); contributionFactory = new org.eclipse.e4.workbench.ui.internal.ReflectionContributionFactory(registry); resourceSet = new org.eclipse.emf.ecore.resource.impl.ResourceSetImpl(); resourceSet.getResourceFactoryRegistry().getExtensionToFactoryMap().put(Resource.Factory.Registry.DEFAULT_EXTENSION, new org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl()); resourceSet.getPackageRegistry().put(WorkbenchPackage.eNS_URI, WorkbenchPackage.eINSTANCE); workbenchContext = org.eclipse.e4.workbench.ui.internal.Workbench.createWorkbenchContext(applicationContext, registry, exceptionHandler, contributionFactory); workbenchContext.set(org.eclipse.e4.workbench.ui.internal.Workbench.class.getName(), this); workbenchContext.set(org.eclipse.e4.workbench.ui.IWorkbench.class.getName(), this); }
public void partClosed(org.eclipse.ui.IWorkbenchPartReference partRef) { updateNavigationHistory(partRef, true); if ((((partRef != null) && ((partRef.getPart(false)) instanceof org.eclipse.ui.IEditorPart)) && ((page.getActiveEditor()) == null)) && ((getEntry(((activeEntry) + 1))) != null)) { (activeEntry)++; updateActions(); } }
public void removeJobInfo(org.eclipse.ui.internal.progress.JobInfo info) { synchronized(listenerKey) { org.eclipse.core.runtime.jobs.Job job = info.getJob(); jobs.remove(job); if (runnableMonitors.containsKey(job)) runnableMonitors.remove(job); java.util.Iterator iterator = listeners.iterator(); while (iterator.hasNext()) { org.eclipse.ui.internal.progress.IJobProgressManagerListener listener = ((org.eclipse.ui.internal.progress.IJobProgressManagerListener) (iterator.next())); if (!(isNonDisplayableJob(info.getJob(), listener.showsDebug()))) listener.removeJob(info); } } }
public static boolean isEditable(org.eclipse.core.resources.IMarker marker) { if (marker == null) { return false; } try { return (marker.isSubtypeOf(org.eclipse.core.resources.IMarker.BOOKMARK)) || ((marker.isSubtypeOf(org.eclipse.core.resources.IMarker.TASK)) && (marker.getAttribute(org.eclipse.core.resources.IMarker.USER_EDITABLE, false))); } catch (org.eclipse.core.runtime.CoreException e) { return false; } }
public void setStatusListLabelProvider(org.eclipse.jface.viewers.ITableLabelProvider labelProvider) { org.eclipse.core.runtime.Assert.isLegal((labelProvider != null), "Label Provider cannot be null"); statusListLabelProvider = labelProvider; }
public void run() { final java.lang.String nlExtensions = org.eclipse.core.runtime.Platform.getNLExtensions(); if ((nlExtensions.length()) > 0) { com.ibm.icu.util.ULocale.setDefault(Category.FORMAT, new com.ibm.icu.util.ULocale(((com.ibm.icu.util.ULocale.getDefault(Category.FORMAT).getBaseName()) + nlExtensions))); } java.lang.System.setProperty(org.eclipse.e4.ui.workbench.IWorkbench.XMI_URI_ARG, "org.eclipse.ui.workbench/LegacyIDE.e4xmi"); java.lang.Object obj = org.eclipse.ui.internal.Workbench.getApplication(org.eclipse.core.runtime.Platform.getCommandLineArgs()); if (obj instanceof org.eclipse.e4.ui.internal.workbench.swt.E4Application) { org.eclipse.e4.ui.internal.workbench.swt.E4Application e4app = ((org.eclipse.e4.ui.internal.workbench.swt.E4Application) (obj)); org.eclipse.e4.ui.internal.workbench.E4Workbench e4Workbench = e4app.createE4Workbench(org.eclipse.ui.internal.Workbench.getApplicationContext(), display); org.eclipse.ui.internal.Workbench workbench = new org.eclipse.ui.internal.Workbench(display, advisor, e4Workbench.getApplication(), e4Workbench.getContext()); if (org.eclipse.ui.internal.Workbench.createSplash) workbench.createSplashWrapper(); org.eclipse.ui.splash.AbstractSplashHandler handler = org.eclipse.ui.internal.Workbench.getSplash(); boolean showProgress = org.eclipse.ui.internal.util.PrefUtil.getAPIPreferenceStore().getBoolean(IWorkbenchPreferenceConstants.SHOW_PROGRESS_ON_STARTUP); org.eclipse.core.runtime.IProgressMonitor progressMonitor = null; if ((handler != null) && showProgress) { progressMonitor = handler.getBundleProgressMonitor(); if (progressMonitor != null) { double cutoff = 0.95; int expectedProgressCount = java.lang.Math.max(1, ((org.eclipse.ui.internal.WorkbenchPlugin.getDefault().getBundleCount()) / 10)); progressMonitor.beginTask("", expectedProgressCount); org.osgi.framework.SynchronousBundleListener bundleListener = workbench.new StartupProgressBundleListener(progressMonitor, ((int) (expectedProgressCount * cutoff))); org.eclipse.ui.internal.WorkbenchPlugin.getDefault().addBundleListener(bundleListener); } } returnCode[0] = workbench.runUI(); e4Workbench.createAndRunUI(e4Workbench.getApplication()); org.eclipse.ui.internal.menus.WorkbenchMenuService wms = ((org.eclipse.ui.internal.menus.WorkbenchMenuService) (e4Workbench.getContext().get(org.eclipse.ui.menus.IMenuService.class))); wms.dispose(); e4app.saveModel(); e4Workbench.close(); returnCode[0] = workbench.returnCode; } }
public org.eclipse.swt.graphics.Font getFont(java.lang.Object element) { org.eclipse.ui.presentations.IPresentablePart presentablePart = ((org.eclipse.ui.presentations.IPresentablePart) (element)); org.eclipse.ui.internal.presentations.util.AbstractTabItem item = folder.getTab(presentablePart); if ((item.isShowing()) || (!(hiddenTabsBold))) return folder.getTabFolder().getControl().getFont(); if ((boldFont) == null) { org.eclipse.swt.widgets.Control control = folder.getTabFolder().getControl(); org.eclipse.swt.graphics.Font originalFont = control.getFont(); org.eclipse.swt.graphics.FontData[] fontData = originalFont.getFontData(); for (int i = 0; i < (fontData.length); i++) fontData[i].setStyle(((fontData[i].getStyle()) | (org.eclipse.swt.SWT.BOLD))); boldFont = new org.eclipse.swt.graphics.Font(control.getDisplay(), fontData); } return boldFont; }
private void createWorkspaceBrowseRow(org.eclipse.swt.widgets.Composite parent) { org.eclipse.swt.widgets.Composite panel = new org.eclipse.swt.widgets.Composite(parent, org.eclipse.swt.SWT.NONE); org.eclipse.swt.layout.GridLayout layout = new org.eclipse.swt.layout.GridLayout(3, false); layout.marginHeight = convertVerticalDLUsToPixels(IDialogConstants.VERTICAL_MARGIN); layout.marginWidth = convertHorizontalDLUsToPixels(IDialogConstants.HORIZONTAL_MARGIN); layout.verticalSpacing = convertVerticalDLUsToPixels(IDialogConstants.VERTICAL_SPACING); layout.horizontalSpacing = convertHorizontalDLUsToPixels(IDialogConstants.HORIZONTAL_SPACING); panel.setLayout(layout); panel.setLayoutData(new org.eclipse.swt.layout.GridData(org.eclipse.swt.layout.GridData.FILL_HORIZONTAL)); panel.setFont(parent.getFont()); org.eclipse.swt.widgets.Label label = new org.eclipse.swt.widgets.Label(panel, org.eclipse.swt.SWT.NONE); label.setText(IDEWorkbenchMessages.ChooseWorkspaceDialog_workspaceEntryLabel); text = new org.eclipse.swt.widgets.Combo(panel, (((org.eclipse.swt.SWT.BORDER) | (org.eclipse.swt.SWT.LEAD)) | (org.eclipse.swt.SWT.DROP_DOWN))); text.setFocus(); text.setLayoutData(new org.eclipse.swt.layout.GridData(((org.eclipse.swt.layout.GridData.GRAB_HORIZONTAL) | (org.eclipse.swt.layout.GridData.FILL_HORIZONTAL)))); text.addModifyListener(new org.eclipse.swt.events.ModifyListener() { public void modifyText(org.eclipse.swt.events.ModifyEvent e) { org.eclipse.swt.widgets.Button okButton = getButton(Window.OK); if ((okButton != null) && (!(okButton.isDisposed()))) { boolean nonWhitespaceFound = false; java.lang.String characters = getWorkspaceLocation(); for (int i = 0; (!nonWhitespaceFound) && (i < (characters.length())); i++) { if (!(java.lang.Character.isWhitespace(characters.charAt(i)))) { nonWhitespaceFound = true; } } okButton.setEnabled(nonWhitespaceFound); } } }); setInitialTextValues(text); org.eclipse.swt.widgets.Button browseButton = new org.eclipse.swt.widgets.Button(panel, org.eclipse.swt.SWT.PUSH); browseButton.setText(IDEWorkbenchMessages.ChooseWorkspaceDialog_browseLabel); setButtonLayoutData(browseButton); org.eclipse.swt.layout.GridData data = ((org.eclipse.swt.layout.GridData) (browseButton.getLayoutData())); data.horizontalAlignment = org.eclipse.swt.layout.GridData.HORIZONTAL_ALIGN_END; browseButton.setLayoutData(data); browseButton.addSelectionListener(new org.eclipse.swt.events.SelectionAdapter() { public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { org.eclipse.swt.widgets.DirectoryDialog dialog = new org.eclipse.swt.widgets.DirectoryDialog(getShell()); dialog.setText(IDEWorkbenchMessages.ChooseWorkspaceDialog_directoryBrowserTitle); dialog.setMessage(IDEWorkbenchMessages.ChooseWorkspaceDialog_directoryBrowserMessage); dialog.setFilterPath(getInitialBrowsePath()); java.lang.String dir = dialog.open(); if (dir != null) { text.setText(org.eclipse.osgi.util.TextProcessor.process(dir)); } } }); }
void unzoom(final org.eclipse.e4.ui.model.application.ui.MUIElement element) { org.eclipse.e4.ui.model.application.ui.basic.MWindow win = getWindowFor(element); org.eclipse.e4.ui.model.application.ui.advanced.MPerspective persp = modelService.getActivePerspective(win); org.eclipse.swt.widgets.Shell hostShell = ((org.eclipse.swt.widgets.Shell) (win.getWidget())); org.eclipse.e4.ui.internal.workbench.swt.FaderAnimationFeedback fader = new org.eclipse.e4.ui.internal.workbench.swt.FaderAnimationFeedback(hostShell); org.eclipse.e4.ui.internal.workbench.swt.AnimationEngine engine = new org.eclipse.e4.ui.internal.workbench.swt.AnimationEngine(win.getContext(), fader, 300); engine.schedule(); java.util.List<java.lang.String> minTag = new java.util.ArrayList<java.lang.String>(); minTag.add(IPresentationEngine.MINIMIZED_BY_ZOOM); boolean outsidePerspectives = ((modelService.getElementLocation(element)) & (org.eclipse.e4.ui.workbench.modeling.EModelService.OUTSIDE_PERSPECTIVE)) != 0; java.util.List<org.eclipse.e4.ui.model.application.ui.basic.MPartStack> stacks = modelService.findElements(win, null, org.eclipse.e4.ui.model.application.ui.basic.MPartStack.class, minTag, EModelService.PRESENTATION); for (org.eclipse.e4.ui.model.application.ui.basic.MPartStack theStack : stacks) { if ((theStack.getWidget()) != null) { if (outsidePerspectives) { int stackLoc = modelService.getElementLocation(theStack); if ((stackLoc & (org.eclipse.e4.ui.workbench.modeling.EModelService.OUTSIDE_PERSPECTIVE)) == 0) continue; } if ((getWindowFor(theStack)) == win) { theStack.getTags().remove(org.eclipse.e4.ui.workbench.addons.minmax.MinMaxAddon.MINIMIZED); } } } java.util.List<org.eclipse.e4.ui.model.application.ui.advanced.MPlaceholder> views = modelService.findElements(win, null, org.eclipse.e4.ui.model.application.ui.advanced.MPlaceholder.class, minTag, EModelService.PRESENTATION); for (org.eclipse.e4.ui.model.application.ui.advanced.MPlaceholder ph : views) { if ((ph.getWidget()) != null) { ph.getTags().remove(org.eclipse.e4.ui.workbench.addons.minmax.MinMaxAddon.MINIMIZED); } } org.eclipse.e4.ui.model.application.ui.advanced.MPlaceholder eaPlaceholder = ((org.eclipse.e4.ui.model.application.ui.advanced.MPlaceholder) (modelService.find(org.eclipse.e4.ui.workbench.addons.minmax.MinMaxAddon.ID_EDITOR_AREA, (persp == null ? win : persp)))); if (((element != eaPlaceholder) && (eaPlaceholder != null)) && (eaPlaceholder.getTags().contains(org.eclipse.e4.ui.workbench.addons.minmax.MinMaxAddon.MINIMIZED_BY_ZOOM))) { eaPlaceholder.getTags().remove(org.eclipse.e4.ui.workbench.addons.minmax.MinMaxAddon.MINIMIZED); } int loc = modelService.getElementLocation(element); if ((loc & (org.eclipse.e4.ui.workbench.modeling.EModelService.OUTSIDE_PERSPECTIVE)) != 0) { java.util.List<org.eclipse.e4.ui.model.application.ui.advanced.MPerspectiveStack> psList = modelService.findElements(win, null, org.eclipse.e4.ui.model.application.ui.advanced.MPerspectiveStack.class, null); if ((psList.size()) == 1) { org.eclipse.e4.ui.model.application.ui.advanced.MPerspectiveStack perspStack = psList.get(0); if (((element != perspStack) && (perspStack != null)) && (perspStack.getTags().contains(org.eclipse.e4.ui.workbench.addons.minmax.MinMaxAddon.MINIMIZED_BY_ZOOM))) { perspStack.getTags().remove(org.eclipse.e4.ui.workbench.addons.minmax.MinMaxAddon.MINIMIZED); } } } adjustCTFButtons(element); }
public org.eclipse.core.runtime.IStatus restoreState(org.eclipse.ui.IMemento memento, org.eclipse.ui.IPerspectiveDescriptor activeDescriptor) { org.eclipse.ui.internal.misc.Assert.isNotNull(getShell()); org.eclipse.core.runtime.MultiStatus result = new org.eclipse.core.runtime.MultiStatus(org.eclipse.ui.PlatformUI.PLUGIN_ID, org.eclipse.core.runtime.IStatus.OK, org.eclipse.ui.internal.WorkbenchMessages.getString("WorkbenchWindow.problemsRestoringWindow"), null); org.eclipse.swt.graphics.Rectangle displayBounds = getShell().getDisplay().getBounds(); org.eclipse.swt.graphics.Rectangle shellBounds = new org.eclipse.swt.graphics.Rectangle(0, 0, 0, 0); java.lang.Integer bigInt; bigInt = memento.getInteger(IWorkbenchConstants.TAG_X); shellBounds.x = (bigInt == null) ? 0 : bigInt.intValue(); bigInt = memento.getInteger(IWorkbenchConstants.TAG_Y); shellBounds.y = (bigInt == null) ? 0 : bigInt.intValue(); bigInt = memento.getInteger(IWorkbenchConstants.TAG_WIDTH); shellBounds.width = (bigInt == null) ? 0 : bigInt.intValue(); bigInt = memento.getInteger(IWorkbenchConstants.TAG_HEIGHT); shellBounds.height = (bigInt == null) ? 0 : bigInt.intValue(); if (!(shellBounds.isEmpty())) { if (!(shellBounds.intersects(displayBounds))) { org.eclipse.swt.graphics.Rectangle clientArea = getShell().getDisplay().getClientArea(); shellBounds.x = clientArea.x; shellBounds.y = clientArea.y; } getShell().setBounds(shellBounds); } if ("true".equals(memento.getString(IWorkbenchConstants.TAG_MAXIMIZED))) { getShell().setMaximized(true); } if ("true".equals(memento.getString(IWorkbenchConstants.TAG_MINIMIZED))) { } if ((getCoolBarManager()) != null) { org.eclipse.jface.action.CoolBarManager coolBarMgr = getCoolBarManager(); org.eclipse.ui.IMemento coolBarMem = memento.getChild(IWorkbenchConstants.TAG_COOLBAR_LAYOUT); if (coolBarMem != null) { java.util.ArrayList layout = new java.util.ArrayList(); org.eclipse.ui.IMemento[] contributionMems = coolBarMem.getChildren(IWorkbenchConstants.TAG_COOLITEM); for (int i = 0; i < (contributionMems.length); i++) { org.eclipse.ui.IMemento contributionMem = contributionMems[i]; java.lang.String type = contributionMem.getString(IWorkbenchConstants.TAG_ITEM_TYPE); java.lang.String id = contributionMem.getString(IWorkbenchConstants.TAG_ID); org.eclipse.jface.action.IContributionItem newItem = null; if (type.equals(IWorkbenchConstants.TAG_TYPE_SEPARATOR)) { if (id != null) { newItem = new org.eclipse.jface.action.Separator(id); } else { newItem = new org.eclipse.jface.action.Separator(); } } else if (type.equals(IWorkbenchConstants.TAG_TYPE_GROUPMARKER)) { newItem = new org.eclipse.jface.action.GroupMarker(id); } else if (type.equals(IWorkbenchConstants.TAG_TYPE_TOOLBARCONTRIBUTION)) { java.lang.Integer width = contributionMem.getInteger(IWorkbenchConstants.TAG_ITEM_X); java.lang.Integer height = contributionMem.getInteger(IWorkbenchConstants.TAG_ITEM_Y); org.eclipse.jface.action.IContributionItem oldItem = coolBarMgr.find(id); if (oldItem instanceof org.eclipse.jface.action.ToolBarContributionItem) { newItem = ((org.eclipse.jface.action.ToolBarContributionItem) (oldItem)); } else { newItem = new org.eclipse.jface.action.ToolBarContributionItem(new org.eclipse.jface.action.ToolBarManager(coolBarMgr.getStyle()), id); newItem.setVisible(false); org.eclipse.jface.action.IContributionItem refItem = findAlphabeticalOrder(IWorkbenchActionConstants.MB_ADDITIONS, id, coolBarMgr); coolBarMgr.insertAfter(refItem.getId(), newItem); } if (width != null) { ((org.eclipse.jface.action.ToolBarContributionItem) (newItem)).setCurrentWidth(width.intValue()); } if (height != null) { ((org.eclipse.jface.action.ToolBarContributionItem) (newItem)).setCurrentHeight(height.intValue()); } } if (newItem != null) { layout.add(newItem); newItem.setParent(coolBarMgr); coolBarMgr.markDirty(); } } coolBarMgr.setLayout(layout); } } org.eclipse.ui.IWorkbenchPage newActivePage = null; org.eclipse.ui.IMemento[] pageArray = memento.getChildren(IWorkbenchConstants.TAG_PAGE); for (int i = 0; i < (pageArray.length); i++) { org.eclipse.ui.IMemento pageMem = pageArray[i]; java.lang.String strFocus = pageMem.getString(IWorkbenchConstants.TAG_FOCUS); if ((strFocus == null) || ((strFocus.length()) == 0)) continue; org.eclipse.ui.IMemento inputMem = pageMem.getChild(IWorkbenchConstants.TAG_INPUT); java.lang.String factoryID = inputMem.getString(IWorkbenchConstants.TAG_FACTORY_ID); if (factoryID == null) { org.eclipse.ui.internal.WorkbenchPlugin.log("Unable to restore page - no input factory ID."); result.add(unableToRestorePage(pageMem)); continue; } org.eclipse.core.runtime.IAdaptable input; try { org.eclipse.ui.internal.misc.UIStats.start(UIStats.RESTORE_WORKBENCH, "WorkbenchPageFactory"); org.eclipse.ui.IElementFactory factory = org.eclipse.ui.PlatformUI.getWorkbench().getElementFactory(factoryID); if (factory == null) { org.eclipse.ui.internal.WorkbenchPlugin.log(("Unable to restore page - cannot instantiate input factory: " + factoryID)); result.add(unableToRestorePage(pageMem)); continue; } input = factory.createElement(inputMem); if (input == null) { org.eclipse.ui.internal.WorkbenchPlugin.log(("Unable to restore page - cannot instantiate input element: " + factoryID)); result.add(unableToRestorePage(pageMem)); continue; } } finally { org.eclipse.ui.internal.misc.UIStats.end(UIStats.RESTORE_WORKBENCH, "WorkbenchPageFactory"); } org.eclipse.ui.internal.WorkbenchPage newPage = null; try { newPage = new org.eclipse.ui.internal.WorkbenchPage(this, input); result.add(newPage.restoreState(pageMem, activeDescriptor)); pageList.add(newPage); firePageOpened(newPage); } catch (org.eclipse.ui.WorkbenchException e) { org.eclipse.ui.internal.WorkbenchPlugin.log("Unable to restore perspective - constructor failed."); result.add(e.getStatus()); continue; } if ((strFocus != null) && ((strFocus.length()) > 0)) newActivePage = newPage; } if (pageList.isEmpty()) { try { java.lang.String defPerspID = getWorkbenchImpl().getPerspectiveRegistry().getDefaultPerspective(); org.eclipse.ui.internal.WorkbenchPage newPage = new org.eclipse.ui.internal.WorkbenchPage(this, defPerspID, getAdvisor().getDefaultWindowInput()); pageList.add(newPage); firePageOpened(newPage); } catch (org.eclipse.ui.WorkbenchException e) { org.eclipse.ui.internal.WorkbenchPlugin.log("Unable to create default perspective - constructor failed."); result.add(e.getStatus()); java.lang.String productName = org.eclipse.ui.internal.WorkbenchPlugin.getDefault().getProductName(); if (productName == null) { productName = ""; } getShell().setText(productName); } } if (newActivePage == null) newActivePage = ((org.eclipse.ui.IWorkbenchPage) (pageList.getNextActive())); setActivePage(newActivePage); return result; }
public void bundleChanged(org.osgi.framework.BundleEvent event) { if ((event.getBundle().getState()) != (org.osgi.framework.Bundle.ACTIVE)) return; if (!(org.eclipse.ui.internal.Workbench.getInstance().isRunning())) return; org.eclipse.ui.internal.registry.WorkingSetDescriptor[] descriptors = org.eclipse.ui.internal.WorkbenchPlugin.getDefault().getWorkingSetRegistry().getDescriptorsForNamespace(event.getBundle().getSymbolicName()); synchronized(this) { for (int i = 0; i < (descriptors.length); i++) { org.eclipse.ui.internal.registry.WorkingSetDescriptor descriptor = descriptors[i]; java.util.List workingSets = getWorkingSetsForId(descriptor.getId()); if ((workingSets.size()) == 0) continue; org.eclipse.ui.IWorkingSetUpdater updater = getUpdater(descriptor); for (java.util.Iterator iter = workingSets.iterator(); iter.hasNext();) { org.eclipse.ui.IWorkingSet workingSet = ((org.eclipse.ui.IWorkingSet) (iter.next())); if (!(updater.contains(workingSet))) updater.add(workingSet); } } } }
public final void fill(org.eclipse.swt.widgets.ToolBar parent, int index) { org.eclipse.swt.widgets.Control control = createControl(parent); if (control == null) { org.eclipse.jface.util.Policy.logException(new java.lang.IllegalStateException((("createControl(Composite) of " + (getClass())) + " returned null, cannot fill toolbar"))); } else { org.eclipse.swt.widgets.ToolItem ti = new org.eclipse.swt.widgets.ToolItem(parent, org.eclipse.swt.SWT.SEPARATOR, index); ti.setControl(control); ti.setWidth(computeWidth(control)); } }
synchronized void queueForDecoration(java.lang.Object element, java.lang.Object adaptedElement, boolean forceUpdate, java.lang.String undecoratedText, org.eclipse.jface.viewers.IDecorationContext context) { org.eclipse.core.runtime.Assert.isNotNull(context); org.eclipse.ui.internal.decorators.DecorationReference reference = ((org.eclipse.ui.internal.decorators.DecorationReference) (awaitingDecorationValues.get(element))); if (reference != null) { if (forceUpdate) { reference.setForceUpdate(forceUpdate); } reference.addContext(context); } else { reference = new org.eclipse.ui.internal.decorators.DecorationReference(element, adaptedElement, context); reference.setForceUpdate(forceUpdate); reference.setUndecoratedText(undecoratedText); awaitingDecorationValues.put(element, reference); awaitingDecoration.add(element); if (shutdown) { return; } if ((decorationJob.getState()) == (org.eclipse.core.runtime.jobs.Job.SLEEPING)) { decorationJob.wakeUp(); } decorationJob.schedule(); } }
@java.lang.SuppressWarnings("restriction") protected void modifyWindowShell(org.eclipse.e4.ui.model.application.ui.basic.MWindow window) { if ((window.getWidget()) == null) { return; } if ((window.getMainMenu()) == null) { return; } redirectHandledMenuItems(window.getMainMenu()); if ((org.eclipse.swt.internal.cocoa.OS.VERSION) >= 4208) { return; } boolean trimInitiallyVisible = false; if ((window instanceof org.eclipse.e4.ui.model.application.ui.basic.MTrimmedWindow) && (!(((org.eclipse.e4.ui.model.application.ui.basic.MTrimmedWindow) (window)).getTrimBars().isEmpty()))) { for (org.eclipse.e4.ui.model.application.ui.basic.MTrimBar tb : ((org.eclipse.e4.ui.model.application.ui.basic.MTrimmedWindow) (window)).getTrimBars()) { if (tb.isVisible()) { trimInitiallyVisible = true; } } } if (trimInitiallyVisible) { org.eclipse.swt.widgets.Shell shell = ((org.eclipse.swt.widgets.Control) (window.getWidget())).getShell(); org.eclipse.swt.internal.cocoa.NSWindow nsWindow = shell.view.window(); org.eclipse.swt.internal.cocoa.NSToolbar dummyBar = new org.eclipse.swt.internal.cocoa.NSToolbar(); dummyBar.alloc(); dummyBar.initWithIdentifier(org.eclipse.swt.internal.cocoa.NSString.stringWith("SWTToolbar")); dummyBar.setVisible(false); nsWindow.setToolbar(dummyBar); dummyBar.release(); nsWindow.setShowsToolbarButton(true); try { java.lang.Object fieldValue = org.eclipse.e4.ui.workbench.renderers.swt.cocoa.CocoaUIHandler.wrapPointer(org.eclipse.e4.ui.workbench.renderers.swt.cocoa.CocoaUIHandler.NSWindowToolbarButton); org.eclipse.swt.internal.cocoa.NSButton toolbarButton = ((org.eclipse.swt.internal.cocoa.NSButton) (org.eclipse.e4.ui.workbench.renderers.swt.cocoa.CocoaUIHandler.invokeMethod(org.eclipse.swt.internal.cocoa.NSWindow.class, nsWindow, "standardWindowButton", new java.lang.Object[]{ fieldValue }))); if (toolbarButton != null) { toolbarButton.setTarget(delegate); org.eclipse.e4.ui.workbench.renderers.swt.cocoa.CocoaUIHandler.invokeMethod(org.eclipse.swt.internal.cocoa.NSControl.class, toolbarButton, "setAction", new java.lang.Object[]{ org.eclipse.e4.ui.workbench.renderers.swt.cocoa.CocoaUIHandler.wrapPointer(org.eclipse.e4.ui.workbench.renderers.swt.cocoa.CocoaUIHandler.sel_toolbarButtonClicked_) }); } } catch (java.lang.Exception e) { log(e); } } }
@java.lang.Override public org.eclipse.swt.graphics.Rectangle getRectangle(org.eclipse.e4.ui.model.application.ui.MUIElement dragElement, org.eclipse.e4.ui.workbench.addons.dndaddon.CursorInfo info) { Control ctrl = ((Control) (info.curElement.getWidget())); if ((ctrl.getParent()) instanceof org.eclipse.e4.ui.widgets.CTabFolder) ctrl = ctrl.getParent(); if (((ctrl.getParent()) != null) && ((ctrl.getParent().getParent()) instanceof org.eclipse.e4.ui.widgets.CTabFolder)) ctrl = ctrl.getParent().getParent(); org.eclipse.swt.graphics.Rectangle bounds = ctrl.getBounds(); int where = whereToDrop(ctrl, info.cursorPos); if (where == (org.eclipse.e4.ui.workbench.modeling.EModelService.ABOVE)) bounds = new org.eclipse.swt.graphics.Rectangle(bounds.x, bounds.y, bounds.width, ((bounds.height) / 2)); if (where == (org.eclipse.e4.ui.workbench.modeling.EModelService.BELOW)) bounds = new org.eclipse.swt.graphics.Rectangle(bounds.x, ((bounds.y) + ((bounds.height) / 2)), bounds.width, ((bounds.height) / 2)); if (where == (org.eclipse.e4.ui.workbench.modeling.EModelService.LEFT_OF)) bounds = new org.eclipse.swt.graphics.Rectangle(bounds.x, bounds.y, ((bounds.width) / 2), bounds.height); if (where == (org.eclipse.e4.ui.workbench.modeling.EModelService.RIGHT_OF)) bounds = new org.eclipse.swt.graphics.Rectangle(((bounds.x) + ((bounds.width) / 2)), bounds.y, ((bounds.width) / 2), bounds.height); return ctrl.getDisplay().map(ctrl.getParent(), null, bounds); }
public void decorate(java.lang.Object element, org.eclipse.jface.viewers.IDecoration decoration) { if ((element instanceof org.eclipse.core.resources.IFile) == false) { return; } org.eclipse.core.resources.IFile file = ((org.eclipse.core.resources.IFile) (element)); org.eclipse.core.runtime.content.IContentDescription contentDescription = null; try { contentDescription = file.getContentDescription(); } catch (org.eclipse.core.runtime.CoreException e) { } if (contentDescription != null) { org.eclipse.core.runtime.content.IContentType contentType = contentDescription.getContentType(); if (contentType != null) { org.eclipse.ui.IWorkbench workbench = org.eclipse.ui.PlatformUI.getWorkbench(); if (workbench.isClosing()) { return; } org.eclipse.jface.resource.ImageDescriptor image = workbench.getEditorRegistry().getImageDescriptor(file.getName(), contentType); if (image != null) { try { file.setSessionProperty(WorkbenchFile.IMAGE_CACHE_KEY, image); } catch (org.eclipse.core.runtime.CoreException e) { } decoration.addOverlay(image); } } } }
public void handleEvent(org.eclipse.swt.widgets.Event e) { if (!(isValid())) { return; } char key = e.character; if ((e.type) == (org.eclipse.swt.SWT.Traverse)) { if (key != 0) { e.doit = false; return; } e.detail = org.eclipse.swt.SWT.TRAVERSE_NONE; e.doit = true; } else { e.doit = propagateKeys; } if (key == 0) { int newSelection = proposalTable.getSelectionIndex(); int visibleRows = ((proposalTable.getSize().y) / (proposalTable.getItemHeight())) - 1; switch (e.keyCode) { case org.eclipse.swt.SWT.ARROW_UP : newSelection -= 1; if (newSelection < 0) { newSelection = (proposalTable.getItemCount()) - 1; } break; case org.eclipse.swt.SWT.ARROW_DOWN : newSelection += 1; if (newSelection > ((proposalTable.getItemCount()) - 1)) { newSelection = 0; } break; case org.eclipse.swt.SWT.PAGE_DOWN : newSelection += visibleRows; if (newSelection >= (proposalTable.getItemCount())) { newSelection = (proposalTable.getItemCount()) - 1; } break; case org.eclipse.swt.SWT.PAGE_UP : newSelection -= visibleRows; if (newSelection < 0) { newSelection = 0; } break; case org.eclipse.swt.SWT.HOME : newSelection = 0; break; case org.eclipse.swt.SWT.END : newSelection = (proposalTable.getItemCount()) - 1; break; default : if ((((((e.keyCode) != (org.eclipse.swt.SWT.CAPS_LOCK)) && ((e.keyCode) != (org.eclipse.swt.SWT.MOD1))) && ((e.keyCode) != (org.eclipse.swt.SWT.MOD2))) && ((e.keyCode) != (org.eclipse.swt.SWT.MOD3))) && ((e.keyCode) != (org.eclipse.swt.SWT.MOD4))) { close(); } return; } if (newSelection >= 0) { selectProposal(newSelection); } return; } switch (key) { case org.eclipse.swt.SWT.ESC : e.doit = false; close(); break; case org.eclipse.swt.SWT.LF : case org.eclipse.swt.SWT.CR : e.doit = false; java.lang.Object p = getSelectedProposal(); if (p != null) { acceptCurrentProposal(); } close(); break; case org.eclipse.swt.SWT.TAB : e.doit = false; getShell().setFocus(); return; case org.eclipse.swt.SWT.BS : if ((filterStyle) != (org.eclipse.jface.fieldassist.ContentProposalAdapter.FILTER_NONE)) { if ((filterText.length()) == 0) { return; } filterText = filterText.substring(0, ((filterText.length()) - 1)); asyncRecomputeProposals(filterText); return; } int pos = getControlContentAdapter().getCursorPosition(getControl()); if (pos > 0) { asyncRecomputeProposals(filterText); } break; default : if (java.lang.Character.isDefined(key)) { if ((filterStyle) == (org.eclipse.jface.fieldassist.ContentProposalAdapter.FILTER_CUMULATIVE)) { filterText = (filterText) + (java.lang.String.valueOf(key)); } else if ((filterStyle) == (org.eclipse.jface.fieldassist.ContentProposalAdapter.FILTER_CHARACTER)) { filterText = java.lang.String.valueOf(key); } asyncRecomputeProposals(filterText); } break; } }
protected java.util.zip.ZipEntry createContainer(org.eclipse.core.runtime.IPath pathname) { java.util.zip.ZipEntry existingEntry = ((java.util.zip.ZipEntry) (directoryEntryCache.get(pathname))); if (existingEntry != null) { return existingEntry; } java.util.zip.ZipEntry parent; if ((pathname.segmentCount()) == 0) { return null; } else if ((pathname.segmentCount()) == 1) { parent = root; } else { parent = createContainer(pathname.removeLastSegments(1)); } java.util.zip.ZipEntry newEntry = new java.util.zip.ZipEntry(pathname.toString()); directoryEntryCache.put(pathname, newEntry); java.util.List childList = new java.util.ArrayList(); children.put(newEntry, childList); java.util.List parentChildList = ((java.util.List) (children.get(parent))); parentChildList.add(newEntry); return newEntry; }
public void bringToTop(org.eclipse.ui.internal.IWorkbenchPart part) { if (!(certifyPart(part))) return; if ((isZoomed()) && (partChangeAffectsZoom(part))) return; boolean broughtToTop = false; if (part instanceof org.eclipse.ui.internal.IEditorPart) { broughtToTop = getEditorManager().setVisibleEditor(((org.eclipse.ui.internal.IEditorPart) (part)), false); if (((lastActiveEditor) != null) && broughtToTop) { java.lang.String newID = part.getSite().getId(); java.lang.String oldID = lastActiveEditor.getSite().getId(); if (newID != oldID) { deactivateLastEditor(); lastActiveEditor = null; updateActionBars(); } } } else if (part instanceof org.eclipse.ui.internal.IViewPart) { broughtToTop = getPersp().bringToTop(((org.eclipse.ui.internal.IViewPart) (part))); } if (broughtToTop) firePartBroughtToTop(part); }
public void handleEvent(org.osgi.service.event.Event event) { org.eclipse.e4.ui.model.application.ui.MUIElement changedObj = ((org.eclipse.e4.ui.model.application.ui.MUIElement) (event.getProperty(UIEvents.EventTags.ELEMENT))); org.eclipse.e4.ui.model.application.ui.MElementContainer<org.eclipse.e4.ui.model.application.ui.MUIElement> container = null; if ((changedObj.getCurSharedRef()) != null) container = changedObj.getCurSharedRef().getParent(); else container = changedObj.getParent(); if (container == null) { return; } org.eclipse.e4.ui.model.application.ui.MUIElement containerElement = container; if ((containerElement instanceof org.eclipse.e4.ui.model.application.ui.basic.MWindow) && ((containerElement.getParent()) != null)) { return; } if (((isLastEditorStack(containerElement)) || (containerElement instanceof org.eclipse.e4.ui.model.application.ui.advanced.MPerspective)) || (containerElement instanceof org.eclipse.e4.ui.model.application.ui.advanced.MPerspectiveStack)) return; java.lang.Boolean toBeRendered = ((java.lang.Boolean) (event.getProperty(UIEvents.EventTags.NEW_VALUE))); if (toBeRendered) { if (!(container.isToBeRendered())) container.setToBeRendered(true); if ((!(container.isVisible())) && (!(container.getTags().contains(IPresentationEngine.MINIMIZED)))) container.setVisible(true); } else { if (container.getTags().contains(IPresentationEngine.NO_AUTO_COLLAPSE)) { return; } int visCount = modelService.countRenderableChildren(container); final org.eclipse.e4.ui.model.application.ui.MElementContainer<org.eclipse.e4.ui.model.application.ui.MUIElement> theContainer = container; if (visCount == 0) { org.eclipse.swt.widgets.Display.getCurrent().asyncExec(new java.lang.Runnable() { public void run() { int visCount = modelService.countRenderableChildren(theContainer); if ((!(isLastEditorStack(theContainer))) && (visCount == 0)) theContainer.setToBeRendered(false); } }); } else { boolean makeInvisible = true; for (org.eclipse.e4.ui.model.application.ui.MUIElement kid : container.getChildren()) { if (!(kid.isToBeRendered())) continue; if (kid.isVisible()) { makeInvisible = false; break; } } if (makeInvisible) { container.setVisible(false); } } } }
protected void buttonPressed(int buttonId) { if (buttonId == (detailButtonID)) { toggleDetailsArea(); } else { super.buttonPressed(buttonId); } }
@java.lang.Override public org.eclipse.ui.IWorkbenchPart createPart() throws org.eclipse.ui.PartInitException { try { if ((descriptor) == null) { return createErrorPart(); } return descriptor.createView(); } catch (org.eclipse.core.runtime.CoreException e) { org.eclipse.core.runtime.IStatus status = e.getStatus(); throw new org.eclipse.ui.PartInitException(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, WorkbenchPlugin.PI_WORKBENCH, status.getCode(), status.getMessage(), status.getException())); } }
protected java.lang.String adjustPattern() { java.lang.String text = pattern.getText().trim(); if ((((!(text.equals(""))) && ((text.indexOf('*')) == (-1))) && ((text.indexOf('?')) == (-1))) && ((text.indexOf('<')) == (-1))) { text = text + "*"; return text; } if (text.endsWith("<")) { return text.substring(0, ((text.length()) - 1)); } return text; }
public org.eclipse.swt.graphics.Image getImage(java.lang.Object element) { java.lang.String iconURI = ((org.eclipse.e4.ui.model.application.ui.MUILabel) (element)).getIconURI(); if (iconURI == null) { return null; } return getLabelImage(iconURI); }
private void addToLastContainer(java.lang.String category, org.eclipse.e4.ui.model.application.ui.basic.MPart part) { java.lang.String partId = part.getElementId(); int colonIndex = (partId == null) ? -1 : partId.indexOf(':'); if (colonIndex >= 0) { java.lang.String descId = part.getElementId().substring(0, colonIndex); descId += ":*"; java.util.List<org.eclipse.e4.ui.model.application.ui.advanced.MPlaceholder> phList = modelService.findElements(workbenchWindow, descId, org.eclipse.e4.ui.model.application.ui.advanced.MPlaceholder.class, null, EModelService.PRESENTATION); if ((phList.size()) > 0) { org.eclipse.e4.ui.model.application.ui.MUIElement phParent = phList.get(0).getParent(); if (phParent instanceof org.eclipse.e4.ui.model.application.ui.basic.MPartStack) { org.eclipse.e4.ui.model.application.ui.basic.MPartStack theStack = ((org.eclipse.e4.ui.model.application.ui.basic.MPartStack) (phParent)); int phIndex = theStack.getChildren().indexOf(phList.get(0)); adjustPlaceholder(part); org.eclipse.e4.ui.model.application.ui.advanced.MPlaceholder placeholder = part.getCurSharedRef(); if (placeholder == null) { theStack.getChildren().add(phIndex, part); } else { theStack.getChildren().add(phIndex, placeholder); } return; } } } org.eclipse.e4.ui.model.application.ui.MElementContainer<?> lastContainer = getLastContainer(); org.eclipse.e4.ui.model.application.ui.advanced.MPlaceholder placeholder = part.getCurSharedRef(); if (placeholder == null) { ((java.util.List) (lastContainer.getChildren())).add(part); } else { ((java.util.List) (lastContainer.getChildren())).add(placeholder); } if (category != null) { lastContainer.getTags().add(category); } }
protected void okPressed() { java.util.List chosenContainerPathList = new java.util.ArrayList(); org.eclipse.core.runtime.IPath returnValue = group.getContainerFullPath(); if (returnValue != null) chosenContainerPathList.add(returnValue); setResult(chosenContainerPathList); super.okPressed(); }
@java.lang.Override protected void createPartControl(org.eclipse.ui.IWorkbenchPart legacyPart, org.eclipse.swt.widgets.Composite parent) { org.eclipse.jface.action.ToolBarManager tbm = ((org.eclipse.jface.action.ToolBarManager) (((org.eclipse.ui.part.ViewPart) (legacyPart)).getViewSite().getActionBars().getToolBarManager())); org.eclipse.swt.widgets.ToolBar tb = tbm.createControl(parent); super.createPartControl(legacyPart, parent); tb.dispose(); org.eclipse.jface.action.MenuManager mm = ((org.eclipse.jface.action.MenuManager) (((org.eclipse.ui.part.ViewPart) (legacyPart)).getViewSite().getActionBars().getMenuManager())); org.eclipse.e4.ui.model.application.ui.menu.MRenderedMenu menu = null; for (org.eclipse.e4.ui.model.application.ui.menu.MMenu me : part.getMenus()) { if ((me.getTags().contains(StackRenderer.TAG_VIEW_MENU)) && (me instanceof org.eclipse.e4.ui.model.application.ui.menu.MRenderedMenu)) { menu = ((org.eclipse.e4.ui.model.application.ui.menu.MRenderedMenu) (me)); break; } } if (menu == null) { menu = MenuFactoryImpl.eINSTANCE.createRenderedMenu(); menu.setElementId(part.getElementId()); menu.getTags().add(StackRenderer.TAG_VIEW_MENU); menu.getTags().add(ContributionsAnalyzer.MC_MENU); part.getMenus().add(menu); } menu.setContributionManager(mm); org.eclipse.e4.ui.model.application.ui.menu.MToolBar toolbar = part.getToolbar(); if (toolbar == null) { toolbar = MenuFactoryImpl.eINSTANCE.createRenderedToolBar(); toolbar.setElementId(part.getElementId()); part.setToolbar(toolbar); } if (toolbar instanceof org.eclipse.e4.ui.model.application.ui.menu.MRenderedToolBar) { ((org.eclipse.e4.ui.model.application.ui.menu.MRenderedToolBar) (toolbar)).setContributionManager(tbm); } }
void bringToTop(org.eclipse.ui.IWorkbenchPartReference ref) { org.eclipse.ui.internal.ILayoutContainer targetContainer = getContainer(ref); int newIndex = lastIndexOfContainer(targetContainer); if ((newIndex >= 0) && (ref == (parts.get(newIndex)))) return; parts.remove(ref); if (newIndex >= 0) parts.add(newIndex, ref); else parts.add(ref); }
private static final char topKey(final org.eclipse.swt.widgets.Event event) { char character = event.character; boolean ctrlDown = ((event.stateMask) & (org.eclipse.swt.SWT.CTRL)) != 0; if (((ctrlDown && ((event.character) != (event.keyCode))) && ((event.character) < 32)) && (((event.keyCode) & (org.eclipse.swt.SWT.KEYCODE_BIT)) == 0)) { character += 64; } return character; }
public void historyNotification(org.eclipse.core.commands.operations.OperationHistoryEvent event) { if (!(event.getOperation().hasContext(org.eclipse.ui.ide.undo.WorkspaceUndoUtil.getWorkspaceUndoContext()))) { return; } switch (event.getEventType()) { case org.eclipse.core.commands.operations.OperationHistoryEvent.ABOUT_TO_EXECUTE : case org.eclipse.core.commands.operations.OperationHistoryEvent.ABOUT_TO_UNDO : case org.eclipse.core.commands.operations.OperationHistoryEvent.ABOUT_TO_REDO : operationInProgress = event.getOperation(); break; case org.eclipse.core.commands.operations.OperationHistoryEvent.DONE : case org.eclipse.core.commands.operations.OperationHistoryEvent.UNDONE : case org.eclipse.core.commands.operations.OperationHistoryEvent.REDONE : resetChangeCount(); operationInProgress = null; break; case org.eclipse.core.commands.operations.OperationHistoryEvent.OPERATION_NOT_OK : operationInProgress = null; break; } }
private void updateChildren(org.eclipse.swt.widgets.Widget widget, java.lang.Object parent, java.lang.Object[] elementChildren, boolean updateLabels) { if (widget instanceof org.eclipse.swt.widgets.Item) { org.eclipse.swt.widgets.Item ti = ((org.eclipse.swt.widgets.Item) (widget)); if (!(getExpanded(ti))) { boolean needDummy = isExpandable(ti, null, parent); boolean haveDummy = false; org.eclipse.swt.widgets.Item[] items = getItems(ti); for (int i = 0; i < (items.length); i++) { if ((items[i].getData()) != null) { disassociate(items[i]); items[i].dispose(); } else { if (needDummy && (!haveDummy)) { haveDummy = true; } else { items[i].dispose(); } } } if (needDummy && (!haveDummy)) { newItem(ti, SWT.NULL, (-1)); } return; } } if (elementChildren == null) { if ((isTreePathContentProvider()) && (widget instanceof org.eclipse.swt.widgets.Item)) { org.eclipse.jface.viewers.TreePath path = getTreePathFromItem(((org.eclipse.swt.widgets.Item) (widget))); elementChildren = getSortedChildren(path); } else { elementChildren = getSortedChildren(parent); } } org.eclipse.swt.widgets.Control tree = getControl(); int oldCnt = -1; if (widget == tree) { oldCnt = getItemCount(tree); } org.eclipse.swt.widgets.Item[] items = getChildren(widget); org.eclipse.jface.viewers.CustomHashtable expanded = newHashtable(CustomHashtable.DEFAULT_CAPACITY); for (int i = 0; i < (items.length); ++i) { if (getExpanded(items[i])) { java.lang.Object element = items[i].getData(); if (element != null) { expanded.put(element, element); } } } int min = java.lang.Math.min(elementChildren.length, items.length); int numItemsToDispose = (items.length) - min; if (numItemsToDispose > 0) { org.eclipse.jface.viewers.CustomHashtable children = newHashtable(((elementChildren.length) * 2)); for (int i = 0; i < (elementChildren.length); i++) { java.lang.Object elementChild = elementChildren[i]; children.put(elementChild, elementChild); } int i = 0; while ((numItemsToDispose > 0) && (i < (items.length))) { java.lang.Object data = items[i].getData(); if (((data == null) || (((items.length) - i) <= numItemsToDispose)) || (!(children.containsKey(data)))) { if (data != null) { disassociate(items[i]); } items[i].dispose(); if ((i + 1) < (items.length)) { java.lang.System.arraycopy(items, (i + 1), items, i, ((items.length) - (i + 1))); } numItemsToDispose--; } else { i++; } } } for (int i = 0; i < min; ++i) { org.eclipse.swt.widgets.Item item = items[i]; java.lang.Object oldElement = item.getData(); if (oldElement != null) { java.lang.Object newElement = elementChildren[i]; if (newElement != oldElement) { if (equals(newElement, oldElement)) { java.lang.Object data = item.getData(); if (data != null) { unmapElement(data, item); } item.setData(newElement); mapElement(newElement, item); } else { disassociate(item); item.setImage(null); item.setText(""); } } } } for (int i = 0; i < min; ++i) { org.eclipse.swt.widgets.Item item = items[i]; java.lang.Object newElement = elementChildren[i]; if ((item.getData()) == null) { associate(newElement, item); updatePlus(item, newElement); updateItem(item, newElement); } else { updatePlus(item, newElement); if (updateLabels) { updateItem(item, newElement); } } } for (int i = 0; i < min; ++i) { org.eclipse.swt.widgets.Item item = items[i]; java.lang.Object newElement = elementChildren[i]; setExpanded(item, expanded.containsKey(newElement)); } if (min < (elementChildren.length)) { for (int i = min; i < (elementChildren.length); ++i) { createTreeItem(widget, elementChildren[i], i); } if ((expanded.size()) > 0) { items = getChildren(widget); for (int i = min; i < (elementChildren.length); ++i) { if (expanded.containsKey(elementChildren[i])) { setExpanded(items[i], true); } } } } if (((widget == tree) && (oldCnt == 0)) && ((getItemCount(tree)) != 0)) { tree.setRedraw(false); tree.setRedraw(true); } }
protected void performApply() { super.performApply(); org.eclipse.swt.graphics.Font oldFont = appliedDialogFont; org.eclipse.swt.graphics.FontData[] newData = getFontDataSetting(getDefinition(JFaceResources.DIALOG_FONT)); appliedDialogFont = new org.eclipse.swt.graphics.Font(getControl().getDisplay(), newData); updateForDialogFontChange(appliedDialogFont); getApplyButton().setFont(appliedDialogFont); getDefaultsButton().setFont(appliedDialogFont); if (oldFont != null) oldFont.dispose(); }
private java.util.ArrayList getVisibleIDs(org.eclipse.ui.internal.dialogs.TreeManager.TreeItem root) { if (root == null) { return new java.util.ArrayList(); } java.util.ArrayList ids = new java.util.ArrayList(root.getChildren().size()); for (java.util.Iterator i = root.getChildren().iterator(); i.hasNext();) { org.eclipse.ui.internal.dialogs.CustomizePerspectiveDialog.DisplayItem object = ((org.eclipse.ui.internal.dialogs.CustomizePerspectiveDialog.DisplayItem) (i.next())); if ((object instanceof org.eclipse.ui.internal.dialogs.CustomizePerspectiveDialog.ShortcutItem) && (object.getState())) { ids.add(org.eclipse.ui.internal.dialogs.CustomizePerspectiveDialog.getParamID(object)); } } return ids; }
protected boolean validatePage() { org.eclipse.core.resources.IWorkspace workspace = org.eclipse.ui.internal.ide.IDEWorkbenchPlugin.getPluginWorkspace(); java.lang.String projectFieldContents = getProjectNameFieldValue(); if (projectFieldContents.equals("")) { setErrorMessage(null); setMessage(IDEWorkbenchMessages.WizardNewProjectCreationPage_projectNameEmpty); return false; } org.eclipse.core.runtime.IStatus nameStatus = workspace.validateName(projectFieldContents, org.eclipse.core.resources.IResource.PROJECT); if (!(nameStatus.isOK())) { setErrorMessage(nameStatus.getMessage()); return false; } org.eclipse.core.resources.IProject handle = getProjectHandle(); if (handle.exists()) { setErrorMessage(IDEWorkbenchMessages.WizardNewProjectCreationPage_projectExistsMessage); return false; } if (!(locationArea.isDefault())) { java.lang.String validLocationMessage = locationArea.checkValidLocation(); if (validLocationMessage != null) { setErrorMessage(validLocationMessage); return false; } } setErrorMessage(null); setMessage(null); return true; }
public void subTask(java.lang.String name) { java.lang.String newName; if (name == null) newName = org.eclipse.jface.util.Util.ZERO_LENGTH_STRING; else newName = name; java.lang.String text; if (((fTaskName) == null) || ((fTaskName.length()) == 0)) { text = newName; } else { text = org.eclipse.jface.resource.JFaceResources.format("Set_SubTask", new java.lang.Object[]{ fTaskName, newName }); } setMessage(text); }
public void runWithEvent(org.eclipse.swt.widgets.Event event) { if (((partHandler) != null) && ((getParameterizedCommand()) != null)) { org.eclipse.core.commands.IHandler oldHandler = getParameterizedCommand().getCommand().getHandler(); try { getParameterizedCommand().getCommand().setHandler(partHandler); getParameterizedCommand().executeWithChecks(event, appContext); } catch (org.eclipse.core.commands.ExecutionException e) { } catch (org.eclipse.core.commands.common.NotDefinedException e) { } catch (org.eclipse.core.commands.NotEnabledException e) { } catch (org.eclipse.core.commands.NotHandledException e) { } finally { getParameterizedCommand().getCommand().setHandler(oldHandler); } } else { super.runWithEvent(event); } }
public boolean equals(java.lang.Object obj) { if (!(obj instanceof org.eclipse.jface.viewers.TreeSelection)) { return super.equals(obj); } org.eclipse.jface.viewers.TreeSelection selection = ((org.eclipse.jface.viewers.TreeSelection) (obj)); int size = getPaths().length; if ((selection.getPaths().length) == size) { boolean useComparer = (getElementComparer()) == (selection.getElementComparer()); if (size > 0) { for (int i = 0; i < (paths.length); i++) { if (!(elementEquals(paths[i], selection.paths[i], useComparer))) { return false; } } } return true; } return false; }
private boolean processView(org.eclipse.core.runtime.IConfigurationElement element) { java.lang.String id = element.getAttribute(IWorkbenchRegistryConstants.ATT_ID); java.lang.String relative = element.getAttribute(IWorkbenchRegistryConstants.ATT_RELATIVE); java.lang.String relationship = element.getAttribute(IWorkbenchRegistryConstants.ATT_RELATIONSHIP); java.lang.String ratioString = element.getAttribute(IWorkbenchRegistryConstants.ATT_RATIO); boolean visible = !(org.eclipse.ui.internal.registry.PerspectiveExtensionReader.VAL_FALSE.equals(element.getAttribute(IWorkbenchRegistryConstants.ATT_VISIBLE))); java.lang.String closeable = element.getAttribute(IWorkbenchRegistryConstants.ATT_CLOSEABLE); java.lang.String moveable = element.getAttribute(IWorkbenchRegistryConstants.ATT_MOVEABLE); java.lang.String standalone = element.getAttribute(IWorkbenchRegistryConstants.ATT_STANDALONE); java.lang.String showTitle = element.getAttribute(IWorkbenchRegistryConstants.ATT_SHOW_TITLE); float ratio; if (id == null) { logMissingAttribute(element, IWorkbenchRegistryConstants.ATT_ID); return false; } if (relationship == null) { logMissingAttribute(element, IWorkbenchRegistryConstants.ATT_RELATIONSHIP); return false; } if ((!(org.eclipse.ui.internal.registry.PerspectiveExtensionReader.VAL_FAST.equals(relationship))) && (relative == null)) { logError(element, (((((("Attribute '" + (IWorkbenchRegistryConstants.ATT_RELATIVE)) + "' not defined. This attribute is required when ") + (IWorkbenchRegistryConstants.ATT_RELATIONSHIP)) + "=\"") + relationship) + "\".")); return false; } if (ratioString == null) { ratio = org.eclipse.ui.IPageLayout.NULL_RATIO; } else { try { ratio = new java.lang.Float(ratioString).floatValue(); } catch (java.lang.NumberFormatException e) { return false; } if ((ratio < (org.eclipse.ui.IPageLayout.RATIO_MIN)) || (ratio > (org.eclipse.ui.IPageLayout.RATIO_MAX))) ratio = org.eclipse.ui.IPageLayout.INVALID_RATIO; } boolean stack = false; boolean fast = false; int intRelation = 0; if (relationship.equals(org.eclipse.ui.internal.registry.PerspectiveExtensionReader.VAL_LEFT)) intRelation = org.eclipse.ui.IPageLayout.LEFT; else if (relationship.equals(org.eclipse.ui.internal.registry.PerspectiveExtensionReader.VAL_RIGHT)) intRelation = org.eclipse.ui.IPageLayout.RIGHT; else if (relationship.equals(org.eclipse.ui.internal.registry.PerspectiveExtensionReader.VAL_TOP)) intRelation = org.eclipse.ui.IPageLayout.TOP; else if (relationship.equals(org.eclipse.ui.internal.registry.PerspectiveExtensionReader.VAL_BOTTOM)) intRelation = org.eclipse.ui.IPageLayout.BOTTOM; else if (relationship.equals(org.eclipse.ui.internal.registry.PerspectiveExtensionReader.VAL_STACK)) stack = true; else if (relationship.equals(org.eclipse.ui.internal.registry.PerspectiveExtensionReader.VAL_FAST)) fast = true; else return false; if (visible) { pageLayout.removePlaceholder(id); } if (stack) { if (visible) pageLayout.stackView(id, relative); else pageLayout.stackPlaceholder(id, relative); } else if (fast) { if (ratio == (org.eclipse.ui.IPageLayout.NULL_RATIO)) { pageLayout.addFastView(id); } else { pageLayout.addFastView(id, ratio); } } else { if ((ratio == (org.eclipse.ui.IPageLayout.NULL_RATIO)) || (ratio == (org.eclipse.ui.IPageLayout.INVALID_RATIO))) ratio = org.eclipse.ui.IPageLayout.DEFAULT_VIEW_RATIO; if (visible) { if (org.eclipse.ui.internal.registry.PerspectiveExtensionReader.VAL_TRUE.equals(standalone)) { pageLayout.addStandaloneView(id, (!(org.eclipse.ui.internal.registry.PerspectiveExtensionReader.VAL_FALSE.equals(showTitle))), intRelation, ratio, relative); } else { pageLayout.addView(id, intRelation, ratio, relative); } } else { pageLayout.addPlaceholder(id, intRelation, ratio, relative); } } if (closeable != null) { pageLayout.getViewLayout(id).setCloseable((!(org.eclipse.ui.internal.registry.PerspectiveExtensionReader.VAL_FALSE.equals(closeable)))); } if (moveable != null) { pageLayout.getViewLayout(id).setMoveable((!(org.eclipse.ui.internal.registry.PerspectiveExtensionReader.VAL_FALSE.equals(moveable)))); } return true; }
public final java.lang.Object execute(final org.eclipse.core.commands.ExecutionEvent event) throws org.eclipse.core.commands.ExecutionException { final java.util.List files = new java.util.ArrayList(); if ((event.getParameter(org.eclipse.ui.internal.ide.handlers.OpenResourceHandler.PARAM_ID_FILE_PATH)) == null) { java.lang.Object[] result = queryFileResource(); if (result != null) { for (int i = 0; i < (result.length); i++) { if ((result[i]) instanceof org.eclipse.core.resources.IFile) { files.add(result[i]); } } } } else { final org.eclipse.core.resources.IResource resource = ((org.eclipse.core.resources.IResource) (event.getObjectParameterForExecution(org.eclipse.ui.internal.ide.handlers.OpenResourceHandler.PARAM_ID_FILE_PATH))); if (!(resource instanceof org.eclipse.core.resources.IFile)) { throw new org.eclipse.core.commands.ExecutionException("filePath parameter must identify a file"); } files.add(resource); } if ((files.size()) > 0) { final org.eclipse.ui.IWorkbenchWindow window = org.eclipse.ui.PlatformUI.getWorkbench().getActiveWorkbenchWindow(); if (window == null) { throw new org.eclipse.core.commands.ExecutionException("no active workbench window"); } final org.eclipse.ui.IWorkbenchPage page = window.getActivePage(); if (page == null) { throw new org.eclipse.core.commands.ExecutionException("no active workbench page"); } try { org.eclipse.core.resources.IFile[] fileArray = ((org.eclipse.core.resources.IFile[]) (files.toArray(new org.eclipse.core.resources.IFile[files.size()]))); org.eclipse.ui.ide.IDE.openEditors(page, fileArray); } catch (final org.eclipse.ui.MultiPartInitException e) { throw new org.eclipse.core.commands.ExecutionException("error opening file in editor", e); } } return null; }
public short getPrimitiveType() { switch (value.getLexicalUnitType()) { case org.w3c.css.sac.LexicalUnit.SAC_IDENT : return CSS_IDENT; case org.w3c.css.sac.LexicalUnit.SAC_PIXEL : return CSS_PX; case org.w3c.css.sac.LexicalUnit.SAC_INTEGER : case org.w3c.css.sac.LexicalUnit.SAC_REAL : return CSS_NUMBER; case org.w3c.css.sac.LexicalUnit.SAC_URI : return CSS_URI; case org.w3c.css.sac.LexicalUnit.SAC_PERCENTAGE : return CSS_PERCENTAGE; case org.w3c.css.sac.LexicalUnit.SAC_STRING_VALUE : return CSS_STRING; case org.w3c.css.sac.LexicalUnit.SAC_OPERATOR_COMMA : return CSS_CUSTOM; } throw new java.lang.UnsupportedOperationException(("NOT YET IMPLEMENTED - LexicalUnit type: " + (value.getLexicalUnitType()))); }
private boolean updateHiddenElements(org.eclipse.ui.internal.dialogs.CustomizePerspectiveDialog.DisplayItem items, java.lang.String currentHidden, java.lang.String prefix) { boolean hasChanges = false; java.util.List<java.lang.String> changedAndVisible = new java.util.ArrayList<java.lang.String>(); java.util.List<java.lang.String> changedAndInvisible = new java.util.ArrayList<java.lang.String>(); getChangedIds(items, changedAndInvisible, changedAndVisible); for (java.util.Iterator<java.lang.String> iterator = changedAndVisible.iterator(); iterator.hasNext();) { java.lang.String id = iterator.next(); if ((id != null) && (currentHidden.contains((prefix + id)))) { hasChanges = true; ((org.eclipse.ui.internal.WorkbenchPage) (window.getActivePage())).removeHiddenItems((prefix + id)); } } for (java.util.Iterator<java.lang.String> iterator = changedAndInvisible.iterator(); iterator.hasNext();) { java.lang.String id = iterator.next(); if ((id != null) && (!(currentHidden.contains((prefix + id))))) { hasChanges = true; ((org.eclipse.ui.internal.WorkbenchPage) (window.getActivePage())).addHiddenItems((prefix + id)); } } return hasChanges; }
public final org.eclipse.ui.IWorkbenchPart getPart(boolean restore) { if (isDisposed()) { return null; } if ((legacyPart) == null) { if (restore && ((part.getWidget()) == null)) { org.eclipse.e4.workbench.modeling.EPartService partService = windowContext.get(org.eclipse.e4.workbench.modeling.EPartService.class); partService.showPart(part, PartState.CREATE); } org.eclipse.ui.internal.e4.compatibility.CompatibilityPart compatibilityPart = ((org.eclipse.ui.internal.e4.compatibility.CompatibilityPart) (part.getObject())); if (compatibilityPart != null) { legacyPart = compatibilityPart.getPart(); addPropertyListeners(); } } return legacyPart; }
private void virtualLazyUpdateHasChildren(org.eclipse.swt.widgets.Item item, int currentChildCount) { boolean oldBusy = isBusy(); setBusy(false); try { if (contentProviderIsTreeBased) { org.eclipse.jface.viewers.TreePath treePath; treePath = getTreePathFromItem(item); if ((currentChildCount == 0) || (!(((org.eclipse.swt.widgets.TreeItem) (item)).getExpanded()))) { ((org.eclipse.jface.viewers.ILazyTreePathContentProvider) (getContentProvider())).updateHasChildren(treePath); } else { ((org.eclipse.jface.viewers.ILazyTreePathContentProvider) (getContentProvider())).updateChildCount(treePath, currentChildCount); } } else { ((org.eclipse.jface.viewers.ILazyTreeContentProvider) (getContentProvider())).updateChildCount(item.getData(), currentChildCount); } } finally { setBusy(oldBusy); } }
public static org.eclipse.ui.presentations.StackPresentation createPresentation(org.eclipse.ui.presentations.AbstractPresentationFactory factory, int role, org.eclipse.swt.widgets.Composite parent, org.eclipse.ui.presentations.IStackPresentationSite site, org.eclipse.ui.presentations.IPresentationSerializer serializer, org.eclipse.ui.IMemento memento) { org.eclipse.ui.presentations.StackPresentation presentation = null; switch (role) { case org.eclipse.ui.internal.presentations.PresentationFactoryUtil.ROLE_EDITOR : presentation = factory.createEditorPresentation(parent, site); break; case org.eclipse.ui.internal.presentations.PresentationFactoryUtil.ROLE_STANDALONE : presentation = factory.createStandaloneViewPresentation(parent, site, true); break; case org.eclipse.ui.internal.presentations.PresentationFactoryUtil.ROLE_STANDALONE_NOTITLE : presentation = factory.createStandaloneViewPresentation(parent, site, true); break; default : presentation = factory.createViewPresentation(parent, site); } if ((memento != null) && (serializer != null)) { presentation.restoreState(serializer, memento); } return presentation; }
protected void performDefaults() { org.eclipse.core.resources.IResource resource = ((org.eclipse.core.resources.IResource) (getElement().getAdapter(org.eclipse.core.resources.IResource.class))); if (resource == null) return; if ((newResourceLocation) != null) { newResourceLocation = null; resolvedLocationValue.setText(org.eclipse.ui.internal.ide.dialogs.IDEResourceInfoUtils.getResolvedLocationText(resource)); java.lang.String locationStr = org.eclipse.osgi.util.TextProcessor.process(org.eclipse.ui.internal.ide.dialogs.IDEResourceInfoUtils.getLocationText(resource)); locationValue.setText(locationStr); if ((sizeValue) != null) sizeValue.setText(org.eclipse.ui.internal.ide.dialogs.IDEResourceInfoUtils.getSizeString(resource)); } if ((this.editableBox) != null) { this.editableBox.setSelection(false); } if ((this.executableBox) != null) { this.executableBox.setSelection(false); } if ((this.archiveBox) != null) { this.archiveBox.setSelection(true); } if ((this.immutableBox) != null) { this.immutableBox.setSelection(false); } if ((this.derivedBox) != null) { this.derivedBox.setSelection(false); } if ((permissionBoxes) != null) { int defaultPermissionValues = getDefaulPermissions(((resource.getType()) == (org.eclipse.core.resources.IResource.FOLDER))); setPermissionsSelection(defaultPermissionValues); } if ((encodingEditor) != null) { encodingEditor.loadDefault(); } if ((lineDelimiterEditor) != null) { lineDelimiterEditor.loadDefault(); } }
private void customize() { org.eclipse.jface.resource.ColorRegistry reg = org.eclipse.jface.resource.JFaceResources.getColorRegistry(); org.eclipse.swt.graphics.Color c1 = reg.get("org.eclipse.ui.workbench.ACTIVE_TAB_BG_START"); org.eclipse.swt.graphics.Color c2 = reg.get("org.eclipse.ui.workbench.ACTIVE_TAB_BG_END"); customizationsTabFolder.setSelectionBackground(new org.eclipse.swt.graphics.Color[]{ c1, c2 }, new int[]{ 100 }, true); customizationsTabFolder.setSelectionForeground(reg.get("org.eclipse.ui.workbench.ACTIVE_TAB_TEXT_COLOR")); customizationsTabFolder.setSimple(true); }
private void openErrorLogBrowser() { java.lang.String filename = org.eclipse.core.runtime.Platform.getLogFileLocation().toOSString(); java.io.File log = new java.io.File(filename); if (log.exists()) { java.io.File logCopy = makeDisplayCopy(log); if (logCopy != null) { openLink(("file:///" + (logCopy.getAbsolutePath()))); return; } openLink(("file:///" + filename)); return; } org.eclipse.jface.dialogs.MessageDialog.openInformation(getShell(), WorkbenchMessages.AboutSystemDialog_noLogTitle, org.eclipse.osgi.util.NLS.bind(WorkbenchMessages.AboutSystemDialog_noLogMessage, filename)); }
private void appendProperties(java.io.PrintWriter writer) { writer.println(); writer.println(WorkbenchMessages.SystemSummary_systemProperties); java.util.Properties properties = java.lang.System.getProperties(); java.util.SortedSet set = new java.util.TreeSet(new java.util.Comparator() { public int compare(java.lang.Object o1, java.lang.Object o2) { java.lang.String s1 = ((java.lang.String) (o1)); java.lang.String s2 = ((java.lang.String) (o2)); return s1.compareTo(s2); } }); set.addAll(properties.keySet()); java.util.Iterator i = set.iterator(); while (i.hasNext()) { java.lang.String key = ((java.lang.String) (i.next())); java.lang.String value = properties.getProperty(key); writer.print(key); writer.print('='); if (key.startsWith(org.eclipse.ui.internal.about.ConfigurationLogDefaultSection.ECLIPSE_PROPERTY_PREFIX)) { org.eclipse.ui.internal.about.ConfigurationLogDefaultSection.printEclipseProperty(writer, value); } else if ((key.toUpperCase().indexOf("PASSWORD")) != (-1)) { for (int j = 0; j < (value.length()); j++) { writer.print('*'); } writer.println(); } else { writer.println(value); } } }
protected java.lang.reflect.Method getMethodToExecute() { org.eclipse.swt.widgets.Display display = org.eclipse.swt.widgets.Display.getCurrent(); if (display == null) return null; final org.eclipse.swt.widgets.Control focusControl = display.getFocusControl(); java.lang.reflect.Method method = null; if (focusControl != null) { final java.lang.Class clazz = focusControl.getClass(); try { method = clazz.getMethod(methodName, org.eclipse.ui.internal.handlers.WidgetMethodHandler.NO_PARAMETERS); } catch (java.lang.NoSuchMethodException e) { } } if (((method == null) && (focusControl instanceof org.eclipse.swt.widgets.Composite)) && (((((org.eclipse.swt.widgets.Composite) (focusControl)).getStyle()) & (org.eclipse.swt.SWT.EMBEDDED)) != 0)) { try { final java.lang.Object focusComponent = getFocusComponent(); if (focusComponent != null) { final java.lang.Class clazz = focusComponent.getClass(); try { method = clazz.getMethod(methodName, org.eclipse.ui.internal.handlers.WidgetMethodHandler.NO_PARAMETERS); } catch (java.lang.NoSuchMethodException e) { } } } catch (final java.lang.ClassNotFoundException e) { } catch (final java.lang.NoSuchMethodException e) { throw new java.lang.Error("Something is seriously wrong here"); } catch (java.lang.IllegalAccessException e) { throw new java.lang.Error("Something is seriously wrong here"); } catch (java.lang.reflect.InvocationTargetException e) { throw new java.lang.Error("Something is seriously wrong here"); } } return method; }
@javax.inject.Inject void trackActivePart(@org.eclipse.e4.core.di.annotations.Optional @javax.inject.Named(org.eclipse.e4.ui.services.IServiceConstants.ACTIVE_PART) org.eclipse.e4.ui.model.application.ui.basic.MPart p) { if ((activePart) == p) { return; } if ((activePart) != null) { activePart.getTags().remove("active"); org.eclipse.e4.ui.model.application.ui.MUIElement parent = activePart.getParent(); if ((parent == null) && ((activePart.getCurSharedRef()) != null)) { org.eclipse.e4.ui.model.application.ui.advanced.MPlaceholder ph = activePart.getCurSharedRef(); parent = ph.getParent(); } if (parent instanceof org.eclipse.e4.ui.model.application.ui.basic.MPartStack) { parent.getTags().remove("active"); if ((parent.getWidget()) != null) setCSSInfo(parent, parent.getWidget()); } else { if ((activePart.getWidget()) != null) setCSSInfo(activePart, activePart.getWidget()); } } activePart = p; if ((activePart) != null) { activePart.getTags().add("active"); org.eclipse.e4.ui.model.application.ui.MUIElement parent = activePart.getParent(); if ((parent == null) && ((activePart.getCurSharedRef()) != null)) { org.eclipse.e4.ui.model.application.ui.advanced.MPlaceholder ph = activePart.getCurSharedRef(); parent = ph.getParent(); } if ((parent instanceof org.eclipse.e4.ui.model.application.ui.basic.MPartStack) && ((parent.getWidget()) != null)) { parent.getTags().add("active"); setCSSInfo(parent, parent.getWidget()); } else if ((activePart.getWidget()) != null) { setCSSInfo(activePart, activePart.getWidget()); } } }
public void openIntro(org.eclipse.ui.application.IWorkbenchWindowConfigurer windowConfigurer) { if (editorsAndIntrosOpened) return; editorsAndIntrosOpened = true; if (windowConfigurer.getWorkbenchConfigurer().getWorkbench().getIntroManager().hasIntro()) super.openIntro(windowConfigurer); else { try { openWelcomeEditors(windowConfigurer.getWindow()); } catch (org.eclipse.ui.WorkbenchException e) { org.eclipse.ui.internal.ide.IDEWorkbenchPlugin.log("Fail to open remaining welcome editors.", e.getStatus()); } org.eclipse.ui.internal.ide.IDEWorkbenchPlugin.getDefault().savePluginPreferences(); } }
public org.eclipse.core.runtime.IStatus restoreState(org.eclipse.ui.IMemento memento, org.eclipse.ui.IPerspectiveDescriptor activeDescriptor) { org.eclipse.ui.internal.misc.Assert.isNotNull(getShell()); org.eclipse.core.runtime.MultiStatus result = new org.eclipse.core.runtime.MultiStatus(org.eclipse.ui.PlatformUI.PLUGIN_ID, org.eclipse.core.runtime.IStatus.OK, org.eclipse.ui.internal.WorkbenchMessages.getString("WorkbenchWindow.problemsRestoringWindow"), null); if ("true".equals(memento.getString("maximized"))) { getShell().setMaximized(true); } else if ("true".equals(memento.getString("minimized"))) { } else { java.lang.Integer bigInt; bigInt = memento.getInteger(IWorkbenchConstants.TAG_X); int x = bigInt.intValue(); bigInt = memento.getInteger(IWorkbenchConstants.TAG_Y); int y = bigInt.intValue(); bigInt = memento.getInteger(IWorkbenchConstants.TAG_WIDTH); int width = bigInt.intValue(); bigInt = memento.getInteger(IWorkbenchConstants.TAG_HEIGHT); int height = bigInt.intValue(); getShell().setBounds(x, y, width, height); } java.lang.Integer locked = memento.getInteger(IWorkbenchConstants.TAG_TOOLBAR_LAYOUT); boolean state = (locked != null) && ((locked.intValue()) == 1); lockToolBar(state); org.eclipse.ui.IWorkbenchPage newActivePage = null; org.eclipse.ui.IMemento[] pageArray = memento.getChildren(IWorkbenchConstants.TAG_PAGE); for (int i = 0; i < (pageArray.length); i++) { org.eclipse.ui.IMemento pageMem = pageArray[i]; java.lang.String strFocus = pageMem.getString(IWorkbenchConstants.TAG_FOCUS); if ((strFocus == null) || ((strFocus.length()) == 0)) continue; org.eclipse.ui.IMemento inputMem = pageMem.getChild(IWorkbenchConstants.TAG_INPUT); java.lang.String factoryID = inputMem.getString(IWorkbenchConstants.TAG_FACTORY_ID); if (factoryID == null) { org.eclipse.ui.internal.WorkbenchPlugin.log("Unable to restore page - no input factory ID."); result.add(unableToRestorePage(pageMem)); continue; } org.eclipse.core.runtime.IAdaptable input; try { org.eclipse.ui.internal.misc.UIStats.start(UIStats.RESTORE_WORKBENCH, "WorkbenchPageFactory"); org.eclipse.ui.IElementFactory factory = org.eclipse.ui.internal.WorkbenchPlugin.getDefault().getElementFactory(factoryID); if (factory == null) { org.eclipse.ui.internal.WorkbenchPlugin.log(("Unable to restore pagee - cannot instantiate input factory: " + factoryID)); result.add(unableToRestorePage(pageMem)); continue; } input = factory.createElement(inputMem); if (input == null) { org.eclipse.ui.internal.WorkbenchPlugin.log(("Unable to restore page - cannot instantiate input element: " + factoryID)); result.add(unableToRestorePage(pageMem)); continue; } } finally { org.eclipse.ui.internal.misc.UIStats.end(UIStats.RESTORE_WORKBENCH, "WorkbenchPageFactory"); } org.eclipse.ui.internal.WorkbenchPage newPage = null; try { newPage = new org.eclipse.ui.internal.WorkbenchPage(this, input); result.add(newPage.restoreState(pageMem, activeDescriptor)); pageList.add(newPage); firePageOpened(newPage); } catch (org.eclipse.ui.WorkbenchException e) { org.eclipse.ui.internal.WorkbenchPlugin.log("Unable to restore perspective - constructor failed."); result.add(e.getStatus()); continue; } if ((strFocus != null) && ((strFocus.length()) > 0)) newActivePage = newPage; } if (pageList.isEmpty()) { try { org.eclipse.core.resources.IContainer root = org.eclipse.ui.internal.WorkbenchPlugin.getPluginWorkspace().getRoot(); java.lang.String defPerspID = workbench.getPerspectiveRegistry().getDefaultPerspective(); org.eclipse.ui.internal.WorkbenchPage newPage = new org.eclipse.ui.internal.WorkbenchPage(this, defPerspID, root); pageList.add(newPage); firePageOpened(newPage); } catch (org.eclipse.ui.WorkbenchException e) { org.eclipse.ui.internal.WorkbenchPlugin.log("Unable to create default perspective - constructor failed."); result.add(e.getStatus()); java.lang.String productName = workbench.getConfigurationInfo().getAboutInfo().getProductName(); if (productName == null) { productName = ""; } getShell().setText(productName); } } if (newActivePage == null) newActivePage = ((org.eclipse.ui.IWorkbenchPage) (pageList.getNextActive())); setActivePage(newActivePage); org.eclipse.ui.IWorkbenchPart part = newActivePage.getActivePart(); if (part != null) getKeyBindingService().update(part); return result; }
private void renderGroup(org.eclipse.ui.internal.menus.ILayoutNode groupNode, boolean hideTopTrim) { org.eclipse.ui.internal.menus.SGroup group = ((org.eclipse.ui.internal.menus.SGroup) (groupNode.getMenuElement())); if ("testGroup".equals(group.getId())) { int i = 0; i++; } java.util.List kids = groupNode.getChildrenSorted(); if ((kids.size()) == 0) return; int side = getSide(group); if (hideTopTrim && (side == (org.eclipse.swt.SWT.TOP))) return; org.eclipse.swt.widgets.Composite grpComposite = new org.eclipse.swt.widgets.Composite(fWindow.getShell(), org.eclipse.swt.SWT.NONE); grpComposite.setToolTipText(group.getId()); grpComposite.setLayout(new org.eclipse.swt.layout.RowLayout()); boolean resizeable = false; java.util.List groupWidgets = new java.util.ArrayList(); for (java.util.Iterator iter = kids.iterator(); iter.hasNext();) { org.eclipse.ui.internal.menus.ILayoutNode node = ((org.eclipse.ui.internal.menus.ILayoutNode) (iter.next())); org.eclipse.ui.internal.menus.MenuElement element = node.getMenuElement(); if (element instanceof org.eclipse.ui.internal.menus.SWidget) { org.eclipse.ui.internal.menus.SWidget sWidget = ((org.eclipse.ui.internal.menus.SWidget) (element)); resizeable = resizeable || (isResizeable(sWidget)); org.eclipse.jface.menus.IWidget iw = renderTrim(grpComposite, sWidget, side); if (iw != null) groupWidgets.add(iw); } else if (element instanceof org.eclipse.ui.internal.menus.SGroup) { } } org.eclipse.ui.internal.menus.TrimBarManager.TrimWidgetProxy groupTrimProxy = new org.eclipse.ui.internal.menus.TrimBarManager.TrimWidgetProxy(groupWidgets, side, grpComposite, group, ((((org.eclipse.swt.SWT.TOP) | (org.eclipse.swt.SWT.BOTTOM)) | (org.eclipse.swt.SWT.LEFT)) | (org.eclipse.swt.SWT.RIGHT)), resizeable); curGroups.add(groupTrimProxy); placeGroup(groupTrimProxy); }
public void addView(java.lang.String viewId, int relationship, float ratio, java.lang.String refId) { if (checkPartInLayout(viewId)) return; try { org.eclipse.ui.internal.LayoutPart newPart = createView(viewId); if (newPart == null) { addPlaceholder(viewId, relationship, ratio, refId); org.eclipse.ui.internal.LayoutHelper.addViewActivator(this, viewId); } else addPart(newPart, viewId, relationship, ratio, refId); } catch (org.eclipse.ui.PartInitException e) { org.eclipse.ui.internal.WorkbenchPlugin.log(e.getMessage()); } if ((fixed) && (!(fixedViews.contains(viewFactory.getView(viewId))))) fixedViews.add(viewFactory.getView(viewId)); }
public boolean removeAll(java.util.Collection c) { checkRealm(); java.util.List entries = new java.util.ArrayList(); for (java.util.Iterator it = c.iterator(); it.hasNext();) { java.lang.Object element = it.next(); int removeIndex = wrappedList.indexOf(element); if (removeIndex != (-1)) { wrappedList.remove(removeIndex); entries.add(org.eclipse.core.databinding.observable.Diffs.createListDiffEntry(removeIndex, true, element)); } } fireListChange(org.eclipse.core.databinding.observable.Diffs.createListDiff(((org.eclipse.core.databinding.observable.list.ListDiffEntry[]) (entries.toArray(new org.eclipse.core.databinding.observable.list.ListDiffEntry[entries.size()]))))); return (entries.size()) > 0; }
private void createStateGroup(org.eclipse.swt.widgets.Composite parent, org.eclipse.core.resources.IResource resource) { org.eclipse.swt.graphics.Font font = parent.getFont(); org.eclipse.swt.widgets.Composite composite = new org.eclipse.swt.widgets.Composite(parent, org.eclipse.swt.SWT.NULL); org.eclipse.swt.layout.GridLayout layout = new org.eclipse.swt.layout.GridLayout(); layout.numColumns = 2; layout.marginWidth = 0; layout.marginHeight = 0; composite.setLayout(layout); org.eclipse.swt.layout.GridData data = new org.eclipse.swt.layout.GridData(); data.horizontalAlignment = org.eclipse.swt.layout.GridData.FILL; composite.setLayoutData(data); composite.setFont(font); org.eclipse.swt.widgets.Label timeStampLabel = new org.eclipse.swt.widgets.Label(composite, org.eclipse.swt.SWT.NONE); timeStampLabel.setText(org.eclipse.ui.internal.ide.dialogs.ResourceInfoPage.TIMESTAMP_TITLE); timeStampLabel.setFont(font); org.eclipse.swt.widgets.Text timeStampValue = new org.eclipse.swt.widgets.Text(composite, org.eclipse.swt.SWT.READ_ONLY); timeStampValue.setText(org.eclipse.ui.internal.ide.dialogs.IDEResourceInfoUtils.getDateStringValue(resource)); timeStampValue.setFont(font); timeStampValue.setBackground(timeStampValue.getDisplay().getSystemColor(SWT.COLOR_WIDGET_BACKGROUND)); timeStampValue.setLayoutData(new org.eclipse.swt.layout.GridData(((org.eclipse.swt.layout.GridData.FILL_HORIZONTAL) | (org.eclipse.swt.layout.GridData.GRAB_HORIZONTAL)))); if ((resource.getType()) != (org.eclipse.core.resources.IResource.PROJECT)) { java.net.URI location = resource.getLocationURI(); if ((location != null) && ((location.getScheme()) != null)) { try { org.eclipse.core.filesystem.IFileSystem fs = org.eclipse.core.filesystem.EFS.getFileSystem(location.getScheme()); int attributes = fs.attributes(); if ((attributes & (org.eclipse.core.filesystem.EFS.ATTRIBUTE_READ_ONLY)) != 0) { createEditableButton(composite); } if ((attributes & (org.eclipse.core.filesystem.EFS.ATTRIBUTE_EXECUTABLE)) != 0) { createExecutableButton(composite); } if ((attributes & (org.eclipse.core.filesystem.EFS.ATTRIBUTE_ARCHIVE)) != 0) { createArchiveButton(composite); } } catch (org.eclipse.core.runtime.CoreException e) { } } createDerivedButton(composite); if (((executableBox) != null) && ((resource.getType()) == (org.eclipse.core.resources.IResource.FOLDER))) { org.eclipse.swt.widgets.Composite noteComposite = createNoteComposite(font, composite, IDEWorkbenchMessages.Preference_note, IDEWorkbenchMessages.ResourceInfo_exWarning); org.eclipse.swt.layout.GridData noteData = new org.eclipse.swt.layout.GridData(); noteData.horizontalSpan = 2; noteComposite.setLayoutData(noteData); } } }
private void busyResetPerspective() { if (isZoomed()) zoomOut(); org.eclipse.ui.internal.Perspective oldPersp = getActivePerspective(); org.eclipse.ui.internal.IPerspectiveRegistry reg = org.eclipse.ui.internal.WorkbenchPlugin.getDefault().getPerspectiveRegistry(); org.eclipse.ui.internal.PerspectiveDescriptor desc = ((org.eclipse.ui.internal.PerspectiveDescriptor) (reg.findPerspectiveWithId(oldPersp.getDesc().getId()))); if (desc == null) desc = ((org.eclipse.ui.internal.PerspectiveDescriptor) (reg.findPerspectiveWithId(((org.eclipse.ui.internal.PerspectiveDescriptor) (oldPersp.getDesc())).getOriginalId()))); if (desc == null) return; org.eclipse.ui.internal.IContributionItem item = window.findPerspectiveShortcut(oldPersp.getDesc(), this); if (item == null) return; org.eclipse.ui.internal.Perspective newPersp = createPerspective(desc); if (newPersp == null) return; perspList.swap(oldPersp, newPersp); org.eclipse.ui.internal.SetPagePerspectiveAction action = ((org.eclipse.ui.internal.SetPagePerspectiveAction) (((org.eclipse.ui.internal.ActionContributionItem) (item)).getAction())); action.setPerspective(newPersp.getDesc()); newPersp.setToolBarLayout(null); org.eclipse.jface.action.IToolBarManager toolsMgr = window.getToolsManager(); if (toolsMgr instanceof org.eclipse.ui.internal.CoolBarManager) { org.eclipse.ui.internal.CoolBarManager coolBarMgr = ((org.eclipse.ui.internal.CoolBarManager) (toolsMgr)); coolBarMgr.resetLayout(); } setPerspective(newPersp); window.firePerspectiveChanged(this, desc, org.eclipse.ui.internal.CHANGE_RESET); disposePerspective(oldPersp); }
@java.lang.Override public boolean canDrop(org.eclipse.e4.ui.model.application.ui.MUIElement dragElement, org.eclipse.e4.ui.workbench.addons.dndaddon.DnDInfo info) { if ((!(dragElement instanceof org.eclipse.e4.ui.model.application.ui.basic.MStackElement)) && (!(dragElement instanceof org.eclipse.e4.ui.model.application.ui.basic.MPartStack))) return false; dropStack = null; if ((info.curElement) instanceof org.eclipse.e4.ui.model.application.ui.basic.MPartStack) { org.eclipse.e4.ui.model.application.ui.basic.MPartStack stack = ((org.eclipse.e4.ui.model.application.ui.basic.MPartStack) (info.curElement)); if (dndManager.getModelService().isLastEditorStack(stack)) dropStack = stack; } if ((dropStack) == null) { if ((!((info.curElement) instanceof org.eclipse.e4.ui.model.application.ui.basic.MStackElement)) && (!(dndManager.getModelService().isLastEditorStack(info.curElement)))) return false; org.eclipse.e4.ui.model.application.ui.MUIElement parent = info.curElement.getParent(); if (((info.curElement) instanceof org.eclipse.e4.ui.model.application.ui.basic.MPart) && ((info.curElement.getCurSharedRef()) != null)) parent = info.curElement.getCurSharedRef().getParent(); if ((!(parent instanceof org.eclipse.e4.ui.model.application.ui.basic.MPartStack)) || (!((parent.getWidget()) instanceof org.eclipse.e4.ui.widgets.CTabFolder))) return false; dropStack = ((org.eclipse.e4.ui.model.application.ui.basic.MPartStack) (parent)); } org.eclipse.e4.ui.model.application.ui.MUIElement dragParent = dragElement.getParent(); if ((dragParent == (dropStack)) && ((dropStack.getChildren().size()) == 2)) return false; weight = dropStack.getContainerData(); dropCTF = ((org.eclipse.e4.ui.widgets.CTabFolder) (dropStack.getWidget())); return true; }
public org.eclipse.ui.presentations.IPresentablePart getPart(java.lang.String id) { try { java.lang.Integer integer = new java.lang.Integer(id); int index = integer.intValue(); if ((parts.size()) > index) { return ((org.eclipse.ui.presentations.IPresentablePart) (parts.get(index))); } } catch (java.lang.NumberFormatException e) { } return null; }
private void createElement(org.eclipse.e4.ui.model.application.ui.MUIElement element) { org.eclipse.e4.ui.model.application.ui.advanced.MPlaceholder placeholder = element.getCurSharedRef(); if (placeholder != null) { element.setToBeRendered(true); element = placeholder; } element.setToBeRendered(true); org.eclipse.e4.ui.model.application.ui.MUIElement parentWindow = workbenchWindow; org.eclipse.e4.ui.model.application.ui.MUIElement target = null; org.eclipse.e4.ui.model.application.ui.MElementContainer<org.eclipse.e4.ui.model.application.ui.MUIElement> parent = element.getParent(); while ((parent != null) && (parent != parentWindow)) { parent.setToBeRendered(true); if ((parent.getWidget()) == null) { target = parent; } parent = parent.getParent(); } if (target != null) { engine.createGui(target); } engine.createGui(element); parent = element.getParent(); if ((parent != null) && ((parent.getChildren().size()) == 1)) { parent.setSelectedElement(element); } }
private static final void readBindingsFromRegistry(final org.eclipse.core.runtime.IConfigurationElement[] configurationElements, final int configurationElementCount, final org.eclipse.jface.bindings.BindingManager bindingManager, final org.eclipse.ui.commands.ICommandService commandService) { final java.util.Collection bindings = new java.util.ArrayList(configurationElementCount); java.util.List warningsToLog = new java.util.ArrayList(1); for (int i = 0; i < configurationElementCount; i++) { final org.eclipse.core.runtime.IConfigurationElement configurationElement = configurationElements[i]; java.lang.String commandId = configurationElement.getAttribute(org.eclipse.ui.internal.keys.BindingPersistence.ATTRIBUTE_COMMAND_ID); if ((commandId == null) || ((commandId.length()) == 0)) { commandId = configurationElement.getAttribute(org.eclipse.ui.internal.keys.BindingPersistence.ATTRIBUTE_COMMAND); } if ((commandId != null) && ((commandId.length()) == 0)) { commandId = null; } final org.eclipse.core.commands.Command command; if (commandId != null) { command = commandService.getCommand(commandId); if (!(command.isDefined())) { final java.lang.String message = ((("Cannot bind to an undefined command: plug-in='" + (configurationElement.getNamespace())) + "', commandId='") + commandId) + "'."; final org.eclipse.core.runtime.IStatus status = new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.WARNING, org.eclipse.ui.internal.WorkbenchPlugin.PI_WORKBENCH, 0, message, null); warningsToLog.add(status); continue; } } else { command = null; } java.lang.String schemeId = configurationElement.getAttribute(org.eclipse.ui.internal.keys.BindingPersistence.ATTRIBUTE_SCHEME_ID); if ((schemeId == null) || ((schemeId.length()) == 0)) { schemeId = configurationElement.getAttribute(org.eclipse.ui.internal.keys.BindingPersistence.ATTRIBUTE_KEY_CONFIGURATION_ID); if ((schemeId == null) || ((schemeId.length()) == 0)) { schemeId = configurationElement.getAttribute(org.eclipse.ui.internal.keys.BindingPersistence.ATTRIBUTE_CONFIGURATION); if ((schemeId == null) || ((schemeId.length()) == 0)) { final java.lang.String message = ((("Key bindings need a scheme: plug-in='" + (configurationElement.getNamespace())) + "', commandId='") + commandId) + "'."; final org.eclipse.core.runtime.IStatus status = new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.WARNING, org.eclipse.ui.internal.WorkbenchPlugin.PI_WORKBENCH, 0, message, null); warningsToLog.add(status); continue; } } } java.lang.String contextId = configurationElement.getAttribute(org.eclipse.ui.internal.keys.BindingPersistence.ATTRIBUTE_CONTEXT_ID); if (org.eclipse.ui.internal.keys.BindingPersistence.LEGACY_DEFAULT_SCOPE.equals(contextId)) { contextId = null; } else if ((contextId == null) || ((contextId.length()) == 0)) { contextId = configurationElement.getAttribute(org.eclipse.ui.internal.keys.BindingPersistence.ATTRIBUTE_SCOPE); if (org.eclipse.ui.internal.keys.BindingPersistence.LEGACY_DEFAULT_SCOPE.equals(contextId)) { contextId = null; } } if ((contextId == null) || ((contextId.length()) == 0)) { contextId = org.eclipse.jface.contexts.IContextIds.CONTEXT_ID_WINDOW; } org.eclipse.jface.bindings.keys.KeySequence keySequence = null; java.lang.String keySequenceText = configurationElement.getAttribute(org.eclipse.ui.internal.keys.BindingPersistence.ATTRIBUTE_SEQUENCE); if ((keySequenceText == null) || ((keySequenceText.length()) == 0)) { keySequenceText = configurationElement.getAttribute(org.eclipse.ui.internal.keys.BindingPersistence.ATTRIBUTE_KEY_SEQUENCE); } if ((keySequenceText == null) || ((keySequenceText.length()) == 0)) { keySequenceText = configurationElement.getAttribute(org.eclipse.ui.internal.keys.BindingPersistence.ATTRIBUTE_STRING); if ((keySequenceText == null) || ((keySequenceText.length()) == 0)) { final java.lang.String message = ((("Defining a key binding with no key sequence has no effect: plug-in='" + (configurationElement.getNamespace())) + "', commandId='") + commandId) + "'."; final org.eclipse.core.runtime.IStatus status = new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.WARNING, org.eclipse.ui.internal.WorkbenchPlugin.PI_WORKBENCH, 0, message, null); warningsToLog.add(status); continue; } try { keySequence = org.eclipse.ui.internal.keys.BindingPersistence.convert2_1Sequence(org.eclipse.ui.internal.keys.BindingPersistence.parse2_1Sequence(keySequenceText)); } catch (final java.lang.IllegalArgumentException e) { final java.lang.String message = ((((("Could not parse key sequence '" + keySequenceText) + "': plug-in='") + (configurationElement.getNamespace())) + "', commandId='") + commandId) + "'."; final org.eclipse.core.runtime.IStatus status = new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.WARNING, org.eclipse.ui.internal.WorkbenchPlugin.PI_WORKBENCH, 0, message, null); warningsToLog.add(status); continue; } } else { try { keySequence = org.eclipse.jface.bindings.keys.KeySequence.getInstance(keySequenceText); } catch (final org.eclipse.jface.bindings.keys.ParseException e) { final java.lang.String message = ((((("Could not parse key sequence '" + keySequenceText) + "': plug-in='") + (configurationElement.getNamespace())) + "', commandId='") + commandId) + "'."; final org.eclipse.core.runtime.IStatus status = new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.WARNING, org.eclipse.ui.internal.WorkbenchPlugin.PI_WORKBENCH, 0, message, null); warningsToLog.add(status); continue; } if ((keySequence.isEmpty()) || (!(keySequence.isComplete()))) { final java.lang.String message = ((((("Key bindings should not have an empty or incomplete key sequence: sequence='" + keySequence) + "': plug-in='") + (configurationElement.getNamespace())) + "', commandId='") + commandId) + "'."; final org.eclipse.core.runtime.IStatus status = new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.WARNING, org.eclipse.ui.internal.WorkbenchPlugin.PI_WORKBENCH, 0, message, null); warningsToLog.add(status); continue; } } java.lang.String locale = configurationElement.getAttribute(org.eclipse.ui.internal.keys.BindingPersistence.ATTRIBUTE_LOCALE); if ((locale != null) && ((locale.length()) == 0)) { locale = null; } java.lang.String platform = configurationElement.getAttribute(org.eclipse.ui.internal.keys.BindingPersistence.ATTRIBUTE_PLATFORM); if ((platform != null) && ((platform.length()) == 0)) { platform = null; } final org.eclipse.core.commands.ParameterizedCommand parameterizedCommand; if (command == null) { parameterizedCommand = null; } else { parameterizedCommand = org.eclipse.ui.internal.keys.BindingPersistence.readParameters(configurationElement, warningsToLog, command); } final org.eclipse.jface.bindings.Binding binding = new org.eclipse.jface.bindings.keys.KeyBinding(keySequence, parameterizedCommand, schemeId, contextId, locale, platform, null, org.eclipse.jface.bindings.Binding.SYSTEM); bindings.add(binding); } final org.eclipse.jface.bindings.Binding[] bindingArray = ((org.eclipse.jface.bindings.Binding[]) (bindings.toArray(new org.eclipse.jface.bindings.Binding[bindings.size()]))); bindingManager.setBindings(bindingArray); if (!(warningsToLog.isEmpty())) { final java.lang.String message = "Warnings while parsing the key bindings from the 'org.eclipse.ui.commands' extension point"; final org.eclipse.core.runtime.IStatus status = new org.eclipse.core.runtime.MultiStatus(org.eclipse.ui.internal.WorkbenchPlugin.PI_WORKBENCH, 0, ((org.eclipse.core.runtime.IStatus[]) (warningsToLog.toArray(new org.eclipse.core.runtime.IStatus[warningsToLog.size()]))), message, null); org.eclipse.ui.internal.WorkbenchPlugin.log(status); } }
public void disposeResources() { if ((page) != null) { page.dispose(); page = null; } if ((icon) != null) { icon.dispose(); icon = null; } }
public org.eclipse.core.resources.IMarker[] getSelectedMarkers() { org.eclipse.jface.viewers.ISelection selection = viewer.getSelection(); if (selection instanceof org.eclipse.jface.viewers.IStructuredSelection) { org.eclipse.jface.viewers.IStructuredSelection structured = ((org.eclipse.jface.viewers.IStructuredSelection) (selection)); java.util.Iterator elements = structured.iterator(); java.util.Collection result = new java.util.HashSet(); while (elements.hasNext()) { org.eclipse.ui.internal.views.markers.MarkerSupportItem next = ((org.eclipse.ui.internal.views.markers.MarkerSupportItem) (elements.next())); if (next.isConcrete()) { result.add(((org.eclipse.ui.internal.views.markers.MarkerEntry) (next)).getMarker()); } else { org.eclipse.ui.internal.views.markers.MarkerSupportItem[] children = next.getChildren(); for (int i = 0; i < (children.length); i++) { if (children[i].isConcrete()) result.add(((org.eclipse.ui.internal.views.markers.MarkerEntry) (children[i])).getMarker()); } } } if (result.isEmpty()) return MarkerSupportInternalUtilities.EMPTY_MARKER_ARRAY; org.eclipse.core.resources.IMarker[] markers = new org.eclipse.core.resources.IMarker[result.size()]; result.toArray(markers); return markers; } return MarkerSupportInternalUtilities.EMPTY_MARKER_ARRAY; }
public void resourceChanged(org.eclipse.core.resources.IResourceChangeEvent event) { if (!(hasMarkerDelta(event))) return; if ((event.getType()) == (org.eclipse.core.resources.IResourceChangeEvent.POST_BUILD)) { scheduleMarkerUpdate(Util.SHORT_DELAY); return; } org.eclipse.ui.progress.IWorkbenchSiteProgressService progressService = getProgressService(); if (progressService == null) markerProcessJob.schedule(Util.LONG_DELAY); else getProgressService().schedule(markerProcessJob, Util.LONG_DELAY); }
public java.lang.Object create(java.lang.String uriString, org.eclipse.e4.core.services.context.IEclipseContext context) { if (uriString == null) { return null; } org.eclipse.emf.common.util.URI uri = org.eclipse.emf.common.util.URI.createURI(uriString); org.osgi.framework.Bundle bundle = getBundle(uri); java.lang.Object contribution; if (bundle != null) { contribution = createFromBundle(bundle, context, uri); } else { contribution = null; org.eclipse.e4.workbench.ui.internal.Activator.log(org.osgi.service.log.LogService.LOG_ERROR, ("Unable to retrive the bundle from the URI: " + uriString)); } return contribution; }
private void save(org.w3c.dom.Document document, org.w3c.dom.Node parent) { org.w3c.dom.Element root = document.createElement(TAG_SECTION); parent.appendChild(root); root.setAttribute(TAG_NAME, ((name) == null ? "" : name)); for (java.util.Iterator i = items.keySet().iterator(); i.hasNext();) { java.lang.String key = ((java.lang.String) (i.next())); org.w3c.dom.Element child = document.createElement(TAG_ITEM); root.appendChild(child); child.setAttribute(TAG_KEY, (key == null ? "" : key)); java.lang.String string = ((java.lang.String) (items.get(key))); child.setAttribute(TAG_VALUE, (string == null ? "" : string)); } for (java.util.Iterator i = arrayItems.keySet().iterator(); i.hasNext();) { java.lang.String key = ((java.lang.String) (i.next())); org.w3c.dom.Element child = document.createElement(TAG_LIST); root.appendChild(child); child.setAttribute(TAG_KEY, (key == null ? "" : key)); java.lang.String[] value = ((java.lang.String[]) (arrayItems.get(key))); if (value != null) { for (int index = 0; index < (value.length); index++) { org.w3c.dom.Element c = document.createElement(TAG_ITEM); child.appendChild(c); java.lang.String string = value[index]; c.setAttribute(TAG_VALUE, (string == null ? "" : string)); } } } for (java.util.Iterator i = sections.values().iterator(); i.hasNext();) { ((org.eclipse.jface.dialogs.DialogSettings) (i.next())).save(document, root); } }
public java.lang.Object createWidget(org.eclipse.e4.ui.model.application.MPart<?> part, java.lang.Object parent) { org.eclipse.swt.widgets.Widget newWidget = null; if ((!(part instanceof org.eclipse.e4.ui.model.application.MStack)) || (!(parent instanceof org.eclipse.swt.widgets.Composite))) return null; org.eclipse.swt.widgets.Widget parentWidget = ((org.eclipse.swt.widgets.Widget) (parent)); if (parentWidget instanceof org.eclipse.swt.widgets.Composite) { boolean showCloseAlways = false; int styleModifier = 0; if (((part.getPolicy()) != null) && ((part.getPolicy().length()) > 0)) { java.lang.String policy = part.getPolicy(); if ((policy.indexOf("ViewStack")) >= 0) { styleModifier = org.eclipse.swt.SWT.CLOSE; } if ((policy.indexOf("EditorStack")) >= 0) { styleModifier = org.eclipse.swt.SWT.CLOSE; showCloseAlways = true; } } org.eclipse.swt.widgets.Composite stylingWrapper = createWrapperForStyling(((org.eclipse.swt.widgets.Composite) (parentWidget))); final org.eclipse.swt.custom.CTabFolder ctf = new org.eclipse.swt.custom.ETabFolder(stylingWrapper, ((org.eclipse.swt.SWT.BORDER) | styleModifier)); configureForStyling(ctf); ctf.setUnselectedCloseVisible(showCloseAlways); bindWidget(part, ctf); ctf.setVisible(true); newWidget = ctf; final org.eclipse.e4.core.services.context.IEclipseContext folderContext = part.getContext(); folderContext.set(IContextConstants.DEBUG_STRING, "TabFolder"); final org.eclipse.e4.core.services.context.IEclipseContext toplevelContext = getToplevelContext(part); final org.eclipse.e4.ui.services.IStylingEngine engine = ((org.eclipse.e4.ui.services.IStylingEngine) (folderContext.get(IStylingEngine.SERVICE_NAME))); folderContext.runAndTrack(new java.lang.Runnable() { public void run() { if (ctf.isDisposed()) return; org.eclipse.e4.core.services.context.IEclipseContext currentActive = toplevelContext; org.eclipse.e4.core.services.context.IEclipseContext child; while (((currentActive != folderContext) && ((child = ((org.eclipse.e4.core.services.context.IEclipseContext) (currentActive.get("activeChild")))) != null)) && (child != currentActive)) { currentActive = child; } if (currentActive == folderContext) { engine.setClassname(ctf, "active"); } else { engine.setClassname(ctf, "inactive"); } } }); } return newWidget; }
public org.eclipse.core.resources.mapping.ResourceTraversal[] getTraversals(org.eclipse.core.resources.mapping.ResourceMappingContext context, org.eclipse.core.runtime.IProgressMonitor monitor) throws org.eclipse.core.runtime.CoreException { if (monitor == null) monitor = new org.eclipse.core.runtime.NullProgressMonitor(); try { org.eclipse.core.resources.mapping.ResourceMapping[] mappings = getMappings(); monitor.beginTask(null, (100 * (mappings.length))); java.util.List result = new java.util.ArrayList(); for (int i = 0; i < (mappings.length); i++) { org.eclipse.core.resources.mapping.ResourceMapping mapping = mappings[i]; result.addAll(java.util.Arrays.asList(mapping.getTraversals(context, new org.eclipse.core.runtime.SubProgressMonitor(monitor, 100)))); } return ((org.eclipse.core.resources.mapping.ResourceTraversal[]) (result.toArray(new org.eclipse.core.resources.mapping.ResourceTraversal[result.size()]))); } finally { monitor.done(); } }
public static org.eclipse.e4.ui.model.application.ui.basic.MStackElement createViewModel(org.eclipse.e4.ui.model.application.MApplication application, java.lang.String id, boolean visible, org.eclipse.ui.internal.WorkbenchPage page, org.eclipse.e4.ui.workbench.modeling.EPartService partService, boolean createReferences) { for (org.eclipse.e4.ui.model.application.descriptor.basic.MPartDescriptor descriptor : application.getDescriptors()) { if (descriptor.getElementId().equals(id)) { org.eclipse.e4.ui.model.application.ui.advanced.MPlaceholder ph = partService.createSharedPart(id); ph.setToBeRendered(visible); org.eclipse.e4.ui.model.application.ui.basic.MPart part = ((org.eclipse.e4.ui.model.application.ui.basic.MPart) (ph.getRef())); part.setToBeRendered(true); if ((visible && createReferences) && (CompatibilityPart.COMPATIBILITY_VIEW_URI.equals(descriptor.getContributionURI()))) { page.createViewReferenceForPart(part, id); } return ph; } } return null; }
protected final void drawImage(org.eclipse.swt.graphics.ImageData src, int ox, int oy) { if (src == null) { return; } org.eclipse.swt.graphics.ImageData dst = imageData; org.eclipse.swt.graphics.PaletteData srcPalette = src.palette; org.eclipse.swt.graphics.ImageData srcMask = null; int alphaMask = 0; int alphaShift = 0; if ((src.maskData) != null) { srcMask = src.getTransparencyMask(); if ((src.depth) == 32) { alphaMask = ~(((srcPalette.redMask) | (srcPalette.greenMask)) | (srcPalette.blueMask)); while ((alphaMask != 0) && (((alphaMask >>> alphaShift) & 1) == 0)) alphaShift++; } } for (int srcY = 0, dstY = srcY + oy; srcY < (src.height); srcY++ , dstY++) { for (int srcX = 0, dstX = srcX + ox; srcX < (src.width); srcX++ , dstX++) { if (!((((0 <= dstX) && (dstX < (dst.width))) && (0 <= dstY)) && (dstY < (dst.height)))) continue; int srcPixel = src.getPixel(srcX, srcY); int srcAlpha = 255; if ((src.maskData) != null) { if ((src.depth) == 32) { srcAlpha = (srcPixel & alphaMask) >>> alphaShift; if (srcAlpha == 0) { srcAlpha = ((srcMask.getPixel(srcX, srcY)) != 0) ? 255 : 0; } } else { if ((srcMask.getPixel(srcX, srcY)) == 0) srcAlpha = 0; } } else if ((src.transparentPixel) != (-1)) { if ((src.transparentPixel) == srcPixel) srcAlpha = 0; } else if ((src.alpha) != (-1)) { srcAlpha = src.alpha; } else if ((src.alphaData) != null) { srcAlpha = src.getAlpha(srcX, srcY); } if (srcAlpha == 0) continue; int srcRed; int srcGreen; int srcBlue; if (srcPalette.isDirect) { srcRed = srcPixel & (srcPalette.redMask); srcRed = ((srcPalette.redShift) < 0) ? srcRed >>> (-(srcPalette.redShift)) : srcRed << (srcPalette.redShift); srcGreen = srcPixel & (srcPalette.greenMask); srcGreen = ((srcPalette.greenShift) < 0) ? srcGreen >>> (-(srcPalette.greenShift)) : srcGreen << (srcPalette.greenShift); srcBlue = srcPixel & (srcPalette.blueMask); srcBlue = ((srcPalette.blueShift) < 0) ? srcBlue >>> (-(srcPalette.blueShift)) : srcBlue << (srcPalette.blueShift); } else { org.eclipse.swt.graphics.RGB rgb = srcPalette.getRGB(srcPixel); srcRed = rgb.red; srcGreen = rgb.green; srcBlue = rgb.blue; } int dstRed; int dstGreen; int dstBlue; int dstAlpha; if (srcAlpha == 255) { dstRed = srcRed; dstGreen = srcGreen; dstBlue = srcBlue; dstAlpha = srcAlpha; } else { int dstPixel = dst.getPixel(dstX, dstY); dstAlpha = dst.getAlpha(dstX, dstY); dstRed = (dstPixel & 255) >>> 0; dstGreen = (dstPixel & 65280) >>> 8; dstBlue = (dstPixel & 16711680) >>> 16; if (dstAlpha == 255) { dstRed += ((srcRed - dstRed) * srcAlpha) / 255; dstGreen += ((srcGreen - dstGreen) * srcAlpha) / 255; dstBlue += ((srcBlue - dstBlue) * srcAlpha) / 255; } else { dstRed = ((srcRed * srcAlpha) * 255) + ((dstRed * dstAlpha) * (255 - srcAlpha)); dstGreen = ((srcGreen * srcAlpha) * 255) + ((dstGreen * dstAlpha) * (255 - srcAlpha)); dstBlue = ((srcBlue * srcAlpha) * 255) + ((dstBlue * dstAlpha) * (255 - srcAlpha)); dstAlpha = (srcAlpha * 255) + (dstAlpha * (255 - srcAlpha)); if (dstAlpha != 0) { dstRed /= dstAlpha; dstGreen /= dstAlpha; dstBlue /= dstAlpha; dstAlpha /= 255; } } } dst.setPixel(dstX, dstY, ((((dstRed & 255) << 0) | ((dstGreen & 255) << 8)) | ((dstBlue & 255) << 16))); dst.setAlpha(dstX, dstY, dstAlpha); } } }
private void filterKeySequenceBindings(org.eclipse.swt.widgets.Event event) { if (((event.keyCode) & (org.eclipse.swt.SWT.MODIFIER_MASK)) != 0) return; java.util.List keyStrokes = org.eclipse.ui.internal.keys.WorkbenchKeyboard.generatePossibleKeyStrokes(event); if (org.eclipse.ui.internal.keys.WorkbenchKeyboard.isOutOfOrderKey(keyStrokes)) { if ((event.type) == (org.eclipse.swt.SWT.KeyDown)) { org.eclipse.swt.widgets.Widget widget = event.widget; if ((((event.character) == (org.eclipse.swt.SWT.DEL)) && (((event.stateMask) & (org.eclipse.swt.SWT.MODIFIER_MASK)) == 0)) && ((widget instanceof org.eclipse.swt.widgets.Text) || (widget instanceof org.eclipse.swt.widgets.Combo))) { return; } else if (widget instanceof org.eclipse.swt.custom.StyledText) { ((org.eclipse.swt.custom.StyledText) (widget)).addVerifyKeyListener(new org.eclipse.ui.internal.keys.OutOfOrderVerifyListener(new org.eclipse.ui.internal.keys.OutOfOrderListener(this))); } else { widget.addListener(SWT.KeyDown, new org.eclipse.ui.internal.keys.OutOfOrderListener(this)); } } } else { processKeyEvent(keyStrokes, event); } }
public void releaseContributions(org.eclipse.jface.action.ContributionManager mgr) { org.eclipse.jface.action.IContributionItem[] items = mgr.getItems(); for (int i = 0; i < (items.length); i++) { if ((items[i]) instanceof org.eclipse.jface.action.ContributionManager) { releaseContributions(((org.eclipse.jface.action.ContributionManager) (items[i]))); } else if ((items[i]) instanceof org.eclipse.jface.internal.provisional.action.IToolBarContributionItem) { org.eclipse.jface.internal.provisional.action.IToolBarContributionItem tbci = ((org.eclipse.jface.internal.provisional.action.IToolBarContributionItem) (items[i])); releaseContributions(((org.eclipse.jface.action.ContributionManager) (tbci.getToolBarManager()))); } } org.eclipse.ui.internal.menus.WorkbenchMenuService.ManagerPopulationRecord mpr = ((org.eclipse.ui.internal.menus.WorkbenchMenuService.ManagerPopulationRecord) (populatedManagers.remove(mgr))); if (mpr != null) mpr.releaseContributions(); }
org.eclipse.jface.viewers.ViewerCell getInitialFocusCell() { org.eclipse.swt.widgets.Table table = ((org.eclipse.swt.widgets.Table) (getViewer().getControl())); if (((!(table.isDisposed())) && ((table.getItemCount()) > 0)) && (!(table.getItem(0).isDisposed()))) { final org.eclipse.jface.viewers.ViewerRow aViewerRow = getViewer().getViewerRowFromItem(table.getItem(0)); for (int i = 0; i < (table.getColumnCount()); i++) { if ((aViewerRow.getWidth(i)) > 0) return aViewerRow.getCell(i); } } return null; }
public void menuAboutToShow(org.eclipse.jface.action.IMenuManager mgr) { final org.eclipse.ui.IWorkbenchPartSite site = part.getSite(); if (site != null) { final org.eclipse.ui.IWorkbench workbench = site.getWorkbenchWindow().getWorkbench(); if (workbench instanceof org.eclipse.ui.internal.Workbench) { final org.eclipse.ui.internal.Workbench realWorkbench = ((org.eclipse.ui.internal.Workbench) (workbench)); org.eclipse.jface.viewers.ISelection input = null; if (((bitSet) & (org.eclipse.ui.internal.PopupMenuExtender.INCLUDE_EDITOR_INPUT)) != 0) { if ((part) instanceof org.eclipse.ui.IEditorPart) { final org.eclipse.ui.IEditorPart editorPart = ((org.eclipse.ui.IEditorPart) (part)); input = new org.eclipse.jface.viewers.StructuredSelection(new java.lang.Object[]{ editorPart.getEditorInput() }); } } org.eclipse.jface.viewers.ISelection s = ((selProvider) == null) ? null : selProvider.getSelection(); realWorkbench.addShowingMenus(getMenuIds(), s, input); } } readStaticActions(); testForAdditions(); if ((menuWrapper) != null) { mgr = menuWrapper; menuWrapper.removeAll(); } if (((bitSet) & (org.eclipse.ui.internal.PopupMenuExtender.INCLUDE_EDITOR_INPUT)) != 0) { addEditorActions(mgr); } addObjectActions(mgr); addStaticActions(mgr); addMenuContributions(mgr); }
@org.eclipse.e4.core.services.annotations.PostConstruct void postConstruct() { eventBroker.subscribe(org.eclipse.e4.workbench.ui.UIEvents.buildTopic(UIEvents.ElementContainer.TOPIC, UIEvents.ElementContainer.SELECTEDELEMENT), selectedHandler); constructed = true; if ((rootContainer) == null) { application.getContext().runAndTrack(new org.eclipse.e4.core.services.context.IRunAndTrack() { public boolean notify(org.eclipse.e4.core.services.context.ContextChangeEvent event) { org.eclipse.e4.core.services.context.IEclipseContext childContext = ((org.eclipse.e4.core.services.context.IEclipseContext) (event.getContext().getLocal(IContextConstants.ACTIVE_CHILD))); if (childContext != null) { rootContainer = ((org.eclipse.e4.ui.model.application.MElementContainer<org.eclipse.e4.ui.model.application.MUIElement>) (childContext.get(org.eclipse.e4.ui.model.application.MWindow.class.getName()))); } return true; } }, null); } }
public void handleEvent(org.osgi.service.event.Event event) { java.lang.Object oldSelected = event.getProperty(UIEvents.EventTags.OLD_VALUE); java.lang.Object selected = event.getProperty(UIEvents.EventTags.NEW_VALUE); org.eclipse.e4.ui.model.application.MPart oldSelectedPart = (oldSelected instanceof org.eclipse.e4.ui.model.application.MPart) ? ((org.eclipse.e4.ui.model.application.MPart) (oldSelected)) : null; org.eclipse.e4.ui.model.application.MPart selectedPart = (selected instanceof org.eclipse.e4.ui.model.application.MPart) ? ((org.eclipse.e4.ui.model.application.MPart) (selected)) : null; if ((oldSelectedPart != null) && (isInContainer(oldSelectedPart))) { firePartHidden(oldSelectedPart); } if (((selectedPart != null) && (selectedPart.isToBeRendered())) && (isInContainer(selectedPart))) { firePartVisible(selectedPart); firePartBroughtToTop(selectedPart); } }
public void dispose() { if ((this.widget) != null) { this.widget.dispose(); this.widget = null; } }
public final void define(final java.lang.String name, final java.lang.String description, final java.lang.String parentId) { if (name == null) { throw new java.lang.NullPointerException("The name of a scheme cannot be null"); } final boolean definedChanged = !(this.defined); this.defined = true; final boolean nameChanged = !(org.eclipse.core.internal.commands.util.Util.equals(this.name, name)); this.name = name; final boolean descriptionChanged = !(org.eclipse.core.internal.commands.util.Util.equals(this.description, description)); this.description = description; final boolean parentIdChanged = !(org.eclipse.core.internal.commands.util.Util.equals(this.parentId, parentId)); this.parentId = parentId; fireContextChanged(new org.eclipse.core.commands.contexts.ContextEvent(this, definedChanged, nameChanged, descriptionChanged, parentIdChanged)); }
public void updateBarParent() { if (((perspectiveBar) == null) || ((perspectiveBar.getControl()) == null)) { return; } if (((currentLocation) == (org.eclipse.ui.internal.PerspectiveSwitcher.TOP_RIGHT)) && ((topBar) != null)) { int maxRowHeight = 0; org.eclipse.swt.widgets.ToolItem[] toolItems = perspectiveBar.getControl().getItems(); for (int i = 0; i < (toolItems.length); i++) { maxRowHeight = java.lang.Math.max(maxRowHeight, toolItems[i].getBounds().height); } topBar.setRightMinimumSize(new org.eclipse.swt.graphics.Point(45, maxRowHeight)); } org.eclipse.ui.internal.layout.LayoutUtil.resize(perspectiveBar.getControl()); }
java.util.List pruneResources(java.util.List resourceCollection) { if ((resourceCollection.size()) < 2) return resourceCollection; java.lang.String[] orderedNames = org.eclipse.core.resources.ResourcesPlugin.getWorkspace().getDescription().getBuildOrder(); if (orderedNames != null) { java.util.List orderedProjects = new java.util.ArrayList(resourceCollection.size()); for (int i = 0; i < (orderedNames.length); i++) { java.lang.String projectName = orderedNames[i]; for (int j = 0; j < (resourceCollection.size()); j++) { org.eclipse.core.resources.IProject project = ((org.eclipse.core.resources.IProject) (resourceCollection.get(j))); if (project.getName().equals(projectName)) { orderedProjects.add(project); break; } } } return orderedProjects; } org.eclipse.core.resources.IProject[] projects = new org.eclipse.core.resources.IProject[resourceCollection.size()]; projects = ((org.eclipse.core.resources.IProject[]) (resourceCollection.toArray(projects))); org.eclipse.core.resources.IProject[][] prereqs = org.eclipse.core.resources.ResourcesPlugin.getWorkspace().computePrerequisiteOrder(projects); java.util.ArrayList ordered = new java.util.ArrayList(); ordered.addAll(java.util.Arrays.asList(prereqs[0])); ordered.addAll(java.util.Arrays.asList(prereqs[1])); return ordered; }
public void subTask(java.lang.String name) { if ((name == null) || ((name.length()) == 0)) return; org.eclipse.ui.internal.progress.JobInfo info = getJobInfo(job); info.clearChildren(); info.addSubTask(name); refreshJobInfo(info); if ((listener) != null) listener.subTask(name); }
protected void linkToEditor(org.eclipse.jface.viewers.IStructuredSelection selection) { if ((this) != (this.getSite().getPage().getActivePart())) return; java.lang.Object obj = selection.getFirstElement(); if ((obj instanceof org.eclipse.core.resources.IFile) && ((selection.size()) == 1)) { org.eclipse.core.resources.IFile file = ((org.eclipse.core.resources.IFile) (obj)); org.eclipse.ui.IWorkbenchPage page = getSite().getPage(); org.eclipse.ui.IEditorPart editor = org.eclipse.ui.ide.ResourceUtil.findEditor(page, file); if (editor != null) { page.bringToTop(editor); return; } } }
public org.eclipse.core.runtime.IStatus restoreState(org.eclipse.ui.IMemento memento, org.eclipse.ui.IPerspectiveDescriptor activeDescritor) { java.lang.String pageName = memento.getString(IWorkbenchConstants.TAG_LABEL); java.lang.String label = (pageName == null) ? "" : "::" + pageName; try { org.eclipse.ui.internal.misc.UIStats.start(UIStats.RESTORE_WORKBENCH, ("WorkbenchPage" + label)); if (pageName == null) pageName = ""; org.eclipse.core.runtime.MultiStatus result = new org.eclipse.core.runtime.MultiStatus(org.eclipse.ui.PlatformUI.PLUGIN_ID, org.eclipse.core.runtime.IStatus.OK, org.eclipse.ui.internal.WorkbenchMessages.format("WorkbenchPage.unableToRestorePerspective", new java.lang.String[]{ pageName }), null); java.lang.String workingSetName = memento.getString(IWorkbenchConstants.TAG_WORKING_SET); if (workingSetName != null) { org.eclipse.ui.internal.WorkingSetManager workingSetManager = ((org.eclipse.ui.internal.WorkingSetManager) (getWorkbenchWindow().getWorkbench().getWorkingSetManager())); setWorkingSet(workingSetManager.getWorkingSet(workingSetName)); } org.eclipse.ui.IMemento childMem = memento.getChild(IWorkbenchConstants.TAG_EDITORS); result.merge(getEditorManager().restoreState(childMem)); childMem = memento.getChild(IWorkbenchConstants.TAG_VIEWS); if (childMem != null) result.merge(getViewFactory().restoreState(childMem)); childMem = memento.getChild(IWorkbenchConstants.TAG_PERSPECTIVES); java.lang.String activePartID = childMem.getString(IWorkbenchConstants.TAG_ACTIVE_PART); java.lang.String activePartSecondaryID = null; if (activePartID != null) { activePartSecondaryID = org.eclipse.ui.internal.ViewFactory.extractSecondaryId(activePartID); if (activePartSecondaryID != null) { activePartID = org.eclipse.ui.internal.ViewFactory.extractPrimaryId(activePartID); } } java.lang.String activePerspectiveID = childMem.getString(IWorkbenchConstants.TAG_ACTIVE_PERSPECTIVE); org.eclipse.ui.IMemento[] perspMems = childMem.getChildren(IWorkbenchConstants.TAG_PERSPECTIVE); org.eclipse.ui.internal.Perspective activePerspective = null; for (int i = 0; i < (perspMems.length); i++) { try { org.eclipse.ui.internal.Perspective persp = new org.eclipse.ui.internal.Perspective(null, this); result.merge(persp.restoreState(perspMems[i])); org.eclipse.ui.IPerspectiveDescriptor desc = persp.getDesc(); if (desc.equals(activeDescritor)) activePerspective = persp; else if ((activePerspective == null) && (desc.getId().equals(activePerspectiveID))) activePerspective = persp; perspList.add(persp); } catch (org.eclipse.ui.WorkbenchException e) { } } boolean restoreActivePerspective = false; if (activeDescritor == null) restoreActivePerspective = true; else if ((activePerspective != null) && (activePerspective.getDesc().equals(activeDescritor))) { restoreActivePerspective = true; } else { restoreActivePerspective = false; activePerspective = createPerspective(((org.eclipse.ui.internal.registry.PerspectiveDescriptor) (activeDescritor))); if (activePerspective == null) { result.merge(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, org.eclipse.ui.PlatformUI.PLUGIN_ID, 0, org.eclipse.ui.internal.WorkbenchMessages.format("Workbench.showPerspectiveError", new java.lang.String[]{ activeDescritor.getId() }), null)); } } perspList.setActive(activePerspective); activePerspective = perspList.getActive(); if (activePerspective == null) { activePerspective = perspList.getNextActive(); perspList.setActive(activePerspective); result.merge(activePerspective.restoreState()); } if ((activePerspective != null) && restoreActivePerspective) result.merge(activePerspective.restoreState()); if (activePerspective != null) { window.firePerspectiveActivated(this, activePerspective.getDesc()); if (activePartID != null) { org.eclipse.ui.IViewReference ref = activePerspective.findView(activePartID, activePartSecondaryID); org.eclipse.ui.IViewPart view = null; if (ref != null) view = ref.getView(true); if (view != null) activePart = view; } } childMem = memento.getChild(IWorkbenchConstants.TAG_NAVIGATION_HISTORY); if (childMem != null) navigationHistory.restoreState(childMem); else if ((getActiveEditor()) != null) navigationHistory.markEditor(getActiveEditor()); return result; } finally { org.eclipse.ui.internal.misc.UIStats.end(UIStats.RESTORE_WORKBENCH, ("WorkbenchPage" + label)); } }
private void createElement(org.eclipse.e4.ui.model.application.ui.MUIElement element) { if (modelService.isHostedElement(element, workbenchWindow)) { return; } org.eclipse.e4.ui.model.application.ui.advanced.MPlaceholder placeholder = element.getCurSharedRef(); if (placeholder != null) { element.setToBeRendered(true); element = placeholder; } element.setToBeRendered(true); org.eclipse.e4.ui.model.application.ui.MUIElement parentWindow = workbenchWindow; org.eclipse.e4.ui.model.application.ui.MUIElement target = null; org.eclipse.e4.ui.model.application.ui.MElementContainer<org.eclipse.e4.ui.model.application.ui.MUIElement> parent = element.getParent(); while ((parent != null) && (parent != parentWindow)) { parent.setToBeRendered(true); if ((parent.getWidget()) == null) { target = parent; } parent = parent.getParent(); } if (target != null) { engine.createGui(target); } engine.createGui(element); parent = element.getParent(); if ((parent != null) && ((parent.getChildren().size()) == 1)) { parent.setSelectedElement(element); } }
@java.lang.Override public void disposeWidget(org.eclipse.e4.ui.model.application.ui.MUIElement element) { org.eclipse.e4.ui.model.application.ui.advanced.MPlaceholder ph = ((org.eclipse.e4.ui.model.application.ui.advanced.MPlaceholder) (element)); org.eclipse.e4.ui.model.application.ui.MUIElement refElement = ph.getRef(); org.eclipse.swt.widgets.Control refCtrl = ((org.eclipse.swt.widgets.Control) (refElement.getWidget())); java.util.List<org.eclipse.e4.ui.model.application.ui.advanced.MPlaceholder> refs = org.eclipse.e4.ui.workbench.renderers.swt.ElementReferenceRenderer.renderedMap.get(refElement); refs.remove(ph); org.eclipse.e4.core.contexts.IEclipseContext curContext = modelService.getContainingContext(ph); if ((refs.size()) == 0) { renderingEngine.removeGui(refElement); } else { if ((refCtrl != null) && (!(refCtrl.isDisposed()))) { org.eclipse.e4.ui.model.application.ui.advanced.MPlaceholder currentRef = refElement.getCurSharedRef(); if (currentRef == ph) { for (org.eclipse.e4.ui.model.application.ui.advanced.MPlaceholder aPH : refs) { org.eclipse.swt.widgets.Composite phComp = ((org.eclipse.swt.widgets.Composite) (aPH.getWidget())); if ((phComp == null) || (phComp.isDisposed())) continue; org.eclipse.e4.core.contexts.IEclipseContext newParentContext = modelService.getContainingContext(aPH); java.util.List<org.eclipse.e4.ui.model.application.ui.MContext> allContexts = modelService.findElements(refElement, null, org.eclipse.e4.ui.model.application.ui.MContext.class, null); for (org.eclipse.e4.ui.model.application.ui.MContext ctxtElement : allContexts) { org.eclipse.e4.core.contexts.IEclipseContext theContext = ctxtElement.getContext(); if (theContext != null) { if ((theContext.getParent()) == curContext) { if ((curContext.getActiveChild()) == theContext) { theContext.deactivate(); } theContext.setParent(newParentContext); } } } refElement.setCurSharedRef(aPH); refCtrl.setParent(phComp); break; } } else if (currentRef != null) { org.eclipse.swt.widgets.Composite phComp = ((org.eclipse.swt.widgets.Composite) (currentRef.getWidget())); if ((phComp == null) || (phComp.isDisposed())) { super.disposeWidget(element); return; } org.eclipse.e4.core.contexts.IEclipseContext newParentContext = modelService.getContainingContext(currentRef); java.util.List<org.eclipse.e4.ui.model.application.ui.MContext> allContexts = modelService.findElements(refElement, null, org.eclipse.e4.ui.model.application.ui.MContext.class, null); for (org.eclipse.e4.ui.model.application.ui.MContext ctxtElement : allContexts) { org.eclipse.e4.core.contexts.IEclipseContext theContext = ctxtElement.getContext(); if ((theContext != null) && ((theContext.getParent()) == curContext)) { if ((curContext.getActiveChild()) == theContext) { theContext.deactivate(); } theContext.setParent(newParentContext); } } } } } super.disposeWidget(element); }
public org.eclipse.ui.IWorkbenchWindow getActiveWorkbenchWindow() { if (((org.eclipse.swt.widgets.Display.getCurrent()) == null) || (!(initializationDone))) { return null; } if (windowsClosed) { return null; } if ((e4Context.get(org.eclipse.e4.ui.workbench.IPresentationEngine.class)) == null) { return null; } org.eclipse.e4.ui.model.application.ui.basic.MWindow activeWindow = application.getSelectedElement(); if ((activeWindow == null) && (!(application.getChildren().isEmpty()))) { activeWindow = application.getChildren().get(0); } if ((activeWindow != null) && ((activeWindow.getWidget()) == null)) { return null; } return createWorkbenchWindow(getDefaultPageInput(), getPerspectiveRegistry().findPerspectiveWithId(getPerspectiveRegistry().getDefaultPerspective()), activeWindow, false); }
public void init(org.eclipse.ui.IWorkbench workbench) { org.eclipse.e4.core.contexts.IEclipseContext context = ((org.eclipse.e4.core.contexts.IEclipseContext) (workbench.getService(org.eclipse.e4.core.contexts.IEclipseContext.class))); defaultTheme = ((java.lang.String) (context.get(E4Application.THEME_ID))); engine = context.get(org.eclipse.e4.ui.css.swt.theme.IThemeEngine.class); }
public void setPerspective(final org.eclipse.ui.IPerspectiveDescriptor desc) { org.eclipse.ui.internal.CoolBarManager mgr = window.getCoolBarManager(); try { mgr.getControl().setRedraw(false); getClientComposite().setRedraw(false); org.eclipse.swt.custom.BusyIndicator.showWhile(null, new java.lang.Runnable() { public void run() { busySetPerspective(desc); } }); } finally { getClientComposite().setRedraw(true); mgr.getControl().setRedraw(true); org.eclipse.ui.IWorkbenchPart part = getActivePart(); if (part != null) part.setFocus(); } }
public void setHasChildren(java.lang.Object elementOrTreePath, boolean hasChildren) { if (internalIsInputOrEmptyPath(elementOrTreePath)) { if (hasChildren) { virtualLazyUpdateChildCount(getTree(), getChildren(getTree()).length); } else { setChildCount(elementOrTreePath, 0); } return; } org.eclipse.swt.widgets.Widget[] items = internalFindItems(elementOrTreePath); for (int i = 0; i < (items.length); i++) { org.eclipse.swt.widgets.TreeItem item = ((org.eclipse.swt.widgets.TreeItem) (items[i])); if (!hasChildren) { item.setItemCount(0); } else { if (!(item.getExpanded())) { item.setItemCount(1); org.eclipse.swt.widgets.TreeItem child = item.getItem(0); if ((child.getData()) != null) { disassociate(child); } item.clear(0, true); } } } }
private org.eclipse.e4.ui.model.application.ui.menu.MToolBarElement createToolBarCommandAddition(final org.eclipse.core.runtime.IConfigurationElement commandAddition) { org.eclipse.e4.ui.model.application.ui.menu.MHandledToolItem item = MenuFactoryImpl.eINSTANCE.createHandledToolItem(); item.setElementId(org.eclipse.ui.internal.menus.MenuHelper.getId(commandAddition)); java.lang.String commandId = org.eclipse.ui.internal.menus.MenuHelper.getCommandId(commandAddition); org.eclipse.e4.ui.model.application.commands.MCommand commandById = org.eclipse.e4.ui.internal.workbench.ContributionsAnalyzer.getCommandById(application, commandId); if (commandById == null) { commandById = CommandsFactoryImpl.eINSTANCE.createCommand(); commandById.setElementId(commandId); commandById.setCommandName(commandId); application.getCommands().add(commandById); } item.setCommand(commandById); java.util.Map parms = org.eclipse.ui.internal.menus.MenuHelper.getParameters(commandAddition); for (java.lang.Object obj : parms.entrySet()) { java.util.Map.Entry e = ((java.util.Map.Entry) (obj)); org.eclipse.e4.ui.model.application.commands.MParameter parm = CommandsFactoryImpl.eINSTANCE.createParameter(); parm.setName(e.getKey().toString()); parm.setValue(e.getValue().toString()); item.getParameters().add(parm); } java.lang.String iconUrl = org.eclipse.ui.internal.menus.MenuHelper.getIconUrl(commandAddition, IWorkbenchRegistryConstants.ATT_ICON); if (iconUrl == null) { org.eclipse.ui.commands.ICommandImageService commandImageService = application.getContext().get(org.eclipse.ui.commands.ICommandImageService.class); org.eclipse.jface.resource.ImageDescriptor descriptor = (commandImageService == null) ? null : commandImageService.getImageDescriptor(commandId); if (descriptor == null) { descriptor = (commandImageService == null) ? null : commandImageService.getImageDescriptor(item.getElementId()); if (descriptor == null) { item.setLabel(org.eclipse.ui.internal.menus.MenuHelper.getLabel(commandAddition)); } else { item.setIconURI(org.eclipse.ui.internal.menus.MenuHelper.getImageUrl(descriptor)); } } else { item.setIconURI(org.eclipse.ui.internal.menus.MenuHelper.getImageUrl(descriptor)); } } else { item.setIconURI(iconUrl); } item.setTooltip(org.eclipse.ui.internal.menus.MenuHelper.getTooltip(commandAddition)); item.setType(org.eclipse.ui.internal.menus.MenuHelper.getStyle(commandAddition)); item.setVisibleWhen(org.eclipse.ui.internal.menus.MenuHelper.getVisibleWhen(commandAddition)); return item; }
private java.lang.Process openWebBrowser(java.lang.String href) throws java.io.IOException { java.lang.Process p = null; if ((webBrowser) == null) { try { webBrowser = "firefox"; p = java.lang.Runtime.getRuntime().exec((((webBrowser) + " ") + href)); } catch (java.io.IOException e) { p = null; webBrowser = "mozilla"; } } if (p == null) { try { p = java.lang.Runtime.getRuntime().exec((((webBrowser) + " ") + href)); } catch (java.io.IOException e) { p = null; webBrowser = "netscape"; } } if (p == null) { try { p = java.lang.Runtime.getRuntime().exec((((webBrowser) + " ") + href)); } catch (java.io.IOException e) { p = null; throw e; } } return p; }
protected void performDefaults() { super.performDefaults(); this.longevityText.setText(java.lang.String.valueOf(org.eclipse.ui.internal.dialogs.FileStatesPage.defaultFileStateLongevity)); this.maxStatesText.setText(java.lang.String.valueOf(org.eclipse.ui.internal.dialogs.FileStatesPage.defaultMaxFileStates)); this.maxStateSizeText.setText(java.lang.String.valueOf(org.eclipse.ui.internal.dialogs.FileStatesPage.defaultMaxFileStateSize)); checkState(); }
public boolean readElement(org.eclipse.core.runtime.IConfigurationElement element) { if (element.getName().equals(org.eclipse.ui.internal.registry.PropertyPagesRegistryReader.TAG_PAGE)) { processPageElement(element); readElementChildren(element); return true; } if (element.getName().equals(org.eclipse.ui.internal.registry.PropertyPagesRegistryReader.TAG_FILTER)) { return true; } if (element.getName().equals(org.eclipse.ui.internal.registry.PropertyPagesRegistryReader.CHILD_ENABLEMENT)) { return true; } if (element.getName().equals(org.eclipse.ui.internal.registry.PropertyPagesRegistryReader.TAG_KEYWORD_REFERENCE)) { return true; } return false; }
public void mouseMove(org.eclipse.ui.internal.MouseEvent e) { if ((!(mouseDown)) || (((e.stateMask) & (SWT.BUTTON1)) == 0)) return; int dx = (e.x) - (xAnchor); int dy = (e.y) - (yAnchor); if (((java.lang.Math.abs(dx)) < (org.eclipse.ui.internal.PartDragDrop.HYSTERESIS)) && ((java.lang.Math.abs(dy)) < (org.eclipse.ui.internal.PartDragDrop.HYSTERESIS))) return; if (!(sourcePart.isDragAllowed(new org.eclipse.ui.internal.Point(e.x, e.y)))) return; openTracker(); }
public boolean visit(org.eclipse.core.resources.IResourceProxy proxy) { if (proxy.isDerived()) { return false; } int type = proxy.getType(); if (((typeMask) & type) != 0) { if (match(proxy.getName())) { org.eclipse.core.resources.IResource res = proxy.requestResource(); if (select(res)) { resources.add(res); return true; } else { return false; } } } if (type == (org.eclipse.core.resources.IResource.FILE)) return false; return true; }
static java.lang.String getIconUrl(org.eclipse.core.runtime.IConfigurationElement element, java.lang.String attr) { java.lang.String iconPath = element.getAttribute(attr); if (iconPath == null) { return null; } if (!(iconPath.matches("\\p{Alpha}[\\p{Alnum}+.-]*:.*"))) { java.lang.String extendingPluginId = element.getDeclaringExtension().getContributor().getName(); iconPath = (("platform:/plugin/" + extendingPluginId) + "/") + iconPath; } java.net.URL url = null; try { url = org.eclipse.core.runtime.FileLocator.find(new java.net.URL(iconPath)); } catch (java.net.MalformedURLException e) { } return url == null ? iconPath : org.eclipse.ui.internal.menus.MenuHelper.rewriteDurableURL(url.toString()); }
private static java.lang.String getReplacement(char c) { switch (c) { case '<' : return "lt"; case '>' : return "gt"; case '"' : return "quot"; case '\'' : return "apos"; case '&' : return "amp"; case '\r' : return "#x0D"; case '\n' : return "#x0A"; case '\t' : return "#x09"; } return null; }
public void cancel(java.lang.Object parent) { if (parent == null) return; org.eclipse.core.runtime.Platform.getJobManager().cancel(new org.eclipse.ui.progress.DeferredTreeContentManager.DeferredContentFamily(this, parent)); }
private void runAction(java.lang.String actionId) { org.eclipse.ui.internal.cocoa.IWorkbenchWindow window = org.eclipse.ui.internal.cocoa.PlatformUI.getWorkbench().getActiveWorkbenchWindow(); if (window != null) { org.eclipse.ui.internal.cocoa.IMenuManager manager = ((org.eclipse.ui.internal.cocoa.WorkbenchWindow) (window)).getActionBars().getMenuManager(); org.eclipse.ui.internal.cocoa.IAction action = findAction(actionId, manager); if ((action != null) && (action.isEnabled())) { org.eclipse.ui.internal.cocoa.NSMenu mainMenu = org.eclipse.ui.internal.cocoa.NSApplication.sharedApplication().mainMenu(); org.eclipse.ui.internal.cocoa.NSMenu appMenu = mainMenu.itemAtIndex(0).submenu(); try { appMenu.itemAtIndex(org.eclipse.ui.internal.cocoa.CocoaUIEnhancer.kPreferencesMenuItem).setEnabled(false); appMenu.itemAtIndex(org.eclipse.ui.internal.cocoa.CocoaUIEnhancer.kAboutMenuItem).setEnabled(false); action.run(); } finally { appMenu.itemAtIndex(org.eclipse.ui.internal.cocoa.CocoaUIEnhancer.kPreferencesMenuItem).setEnabled(true); appMenu.itemAtIndex(org.eclipse.ui.internal.cocoa.CocoaUIEnhancer.kAboutMenuItem).setEnabled(true); } } } }
private static java.lang.String getIconURI(org.eclipse.jface.resource.ImageDescriptor descriptor) { if (descriptor == null) { return null; } java.lang.String string = descriptor.toString(); if (string.startsWith("URLImageDescriptor(")) { string = string.substring("URLImageDescriptor(".length()); string = string.substring(0, ((string.length()) - 1)); org.osgi.framework.BundleContext ctxt = org.osgi.framework.FrameworkUtil.getBundle(org.eclipse.ui.internal.WorkbenchWindow.class).getBundleContext(); try { java.net.URI uri = new java.net.URI(string); java.lang.String host = uri.getHost(); java.lang.String bundleId = host.substring(0, host.indexOf('.')); org.osgi.framework.Bundle bundle = ctxt.getBundle(java.lang.Long.parseLong(bundleId)); java.lang.StringBuilder builder = new java.lang.StringBuilder("platform:/plugin/"); builder.append(bundle.getSymbolicName()); builder.append(uri.getPath()); return builder.toString(); } catch (java.net.URISyntaxException e) { } } else if (descriptor.getClass().toString().endsWith("FileImageDescriptor")) { java.lang.Class<?> sourceClass = org.eclipse.ui.internal.menus.MenuHelper.getLocation(descriptor); if (sourceClass == null) { return null; } java.lang.String path = org.eclipse.ui.internal.menus.MenuHelper.getName(descriptor); if (path == null) { return null; } org.osgi.framework.Bundle bundle = org.osgi.framework.FrameworkUtil.getBundle(sourceClass); java.lang.String parentPath = sourceClass.getName(); parentPath = parentPath.substring(0, parentPath.lastIndexOf('.')); parentPath = parentPath.replace('.', '/'); java.net.URL url = org.eclipse.core.runtime.FileLocator.find(bundle, new org.eclipse.core.runtime.Path(parentPath).append(path), null); return url == null ? null : url.toString(); } return null; }
public void registerActionSets(org.eclipse.ui.internal.registry.IActionSet[] sets) { (updateNumber)++; actionSetDefIdToAction.clear(); org.eclipse.ui.internal.registry.AcceleratorRegistry registry = org.eclipse.ui.internal.WorkbenchPlugin.getDefault().getAcceleratorRegistry(); registry.clearFakeAccelerators(); boolean reinitScopes = false; for (int i = 0; i < (sets.length); i++) { if ((sets[i]) instanceof org.eclipse.ui.internal.PluginActionSet) { org.eclipse.ui.internal.PluginActionSet set = ((org.eclipse.ui.internal.PluginActionSet) (sets[i])); org.eclipse.jface.action.IAction[] actions = set.getPluginActions(); for (int j = 0; j < (actions.length); j++) { org.eclipse.jface.action.Action action = ((org.eclipse.jface.action.Action) (actions[j])); java.lang.String defId = action.getActionDefinitionId(); java.lang.String fake = "org.eclipse.ui.fakeDefinitionId"; if ((defId != null) && (!(defId.startsWith(fake)))) { actionSetDefIdToAction.put(action.getActionDefinitionId(), action); } else if ((action.getAccelerator()) != 0) { reinitScopes = true; fake = (fake + (action.getId())) + (action.getAccelerator()); action.setActionDefinitionId(fake); actionSetDefIdToAction.put(fake, action); registry.addFakeAccelerator(fake, action.getAccelerator()); } } } } if (reinitScopes) { org.eclipse.ui.internal.Workbench w = ((org.eclipse.ui.internal.Workbench) (org.eclipse.ui.internal.PlatformUI.getWorkbench())); if ((w.getActiveAcceleratorConfiguration()) != null) { w.getActiveAcceleratorConfiguration().initializeScopes(); } } }
@org.eclipse.e4.core.di.annotations.Execute public void execute(@javax.inject.Named(org.eclipse.e4.ui.services.IServiceConstants.ACTIVE_SHELL) org.eclipse.swt.widgets.Shell shell, org.eclipse.e4.ui.model.application.MApplication application, org.eclipse.e4.workbench.modeling.EPartService partService, @org.eclipse.e4.core.di.annotations.Optional @javax.inject.Named(org.eclipse.e4.ui.internal.workbench.swt.handlers.ShowViewHandler.VIEWS_SHOW_VIEW_PARM_ID) java.lang.String viewId) { if (viewId != null) { partService.showPart(viewId, PartState.ACTIVATE); return; } final org.eclipse.e4.ui.internal.workbench.swt.handlers.ShowViewDialog dialog = new org.eclipse.e4.ui.internal.workbench.swt.handlers.ShowViewDialog(shell, application); dialog.open(); if ((dialog.getReturnCode()) != (org.eclipse.jface.window.Window.OK)) return; for (org.eclipse.e4.ui.model.application.descriptor.basic.MPartDescriptor descriptor : dialog.getSelection()) { partService.showPart(descriptor.getElementId(), PartState.ACTIVATE); } }
public java.lang.Object[] getChildren(java.lang.Object parentElement) { if (parentElement instanceof org.eclipse.ui.internal.dialogs.WizardCollectionElement) { java.util.ArrayList list = new java.util.ArrayList(); org.eclipse.ui.internal.dialogs.WizardCollectionElement element = ((org.eclipse.ui.internal.dialogs.WizardCollectionElement) (parentElement)); java.lang.Object[] childCollections = element.getChildren(); for (int i = 0; i < (childCollections.length); i++) { handleChild(childCollections[i], list); } java.lang.Object[] childWizards = element.getWizards(); for (int i = 0; i < (childWizards.length); i++) { handleChild(childWizards[i], list); } if (((list.size()) == 1) && ((list.get(0)) instanceof org.eclipse.ui.internal.dialogs.WizardCollectionElement)) { return getChildren(list.get(0)); } return list.toArray(); } else if (parentElement instanceof org.eclipse.ui.model.AdaptableList) { org.eclipse.ui.model.AdaptableList aList = ((org.eclipse.ui.model.AdaptableList) (parentElement)); java.lang.Object[] children = aList.getChildren(); java.util.ArrayList list = new java.util.ArrayList(children.length); for (int i = 0; i < (children.length); i++) { handleChild(children[i], list); } if (((list.size()) == 1) && ((list.get(0)) instanceof org.eclipse.ui.internal.dialogs.WizardCollectionElement)) { return getChildren(list.get(0)); } return list.toArray(); } else { return new java.lang.Object[0]; } }
public boolean aboutToWait(java.lang.Thread lockOwner) { if (isUI()) { if (((currentWork) != null) && ((currentWork.getOperationThread()) == lockOwner)) return true; ui = java.lang.Thread.currentThread(); try { doPendingWork(); } finally { ui = java.lang.Thread.currentThread(); } } return false; }
protected void showPageRec(org.eclipse.ui.part.PageBookView.PageRec pageRec) { if ((activeRec) == pageRec) return; if ((activeRec) != null) { activeRec.subActionBars.deactivate(); org.eclipse.jface.viewers.ISelectionProvider provider = ((org.eclipse.ui.part.PageSite) (mapPageToSite.get(activeRec.page))).getSelectionProvider(); if (provider != null) provider.removeSelectionChangedListener(selectionChangedListener); } activeRec = pageRec; org.eclipse.swt.widgets.Control pageControl = activeRec.page.getControl(); if ((pageControl != null) && (!(pageControl.isDisposed()))) { book.showPage(pageControl); activeRec.subActionBars.activate(); refreshGlobalActionHandlers(); org.eclipse.jface.viewers.ISelectionProvider provider = ((org.eclipse.ui.part.PageSite) (mapPageToSite.get(activeRec.page))).getSelectionProvider(); if (provider != null) provider.addSelectionChangedListener(selectionChangedListener); getViewSite().getActionBars().updateActionBars(); } }
public WWinPluginAction(org.eclipse.core.runtime.IConfigurationElement actionElement, java.lang.String runAttribute, org.eclipse.ui.internal.IWorkbenchWindow window, java.lang.String definitionId) { super(actionElement, runAttribute); setActionDefinitionId(definitionId); this.window = window; java.lang.String retarget = actionElement.getAttribute(ActionDescriptor.ATT_RETARGET); if ((retarget != null) && (retarget.equals("true"))) { java.lang.String allowLabelUpdate = actionElement.getAttribute(ActionDescriptor.ATT_ALLOW_LABEL_UPDATE); java.lang.String id = actionElement.getAttribute(ActionDescriptor.ATT_ID); java.lang.String label = actionElement.getAttribute(ActionDescriptor.ATT_LABEL); if ((allowLabelUpdate != null) && (allowLabelUpdate.equals("true"))) retargetAction = new org.eclipse.ui.actions.LabelRetargetAction(id, label); else retargetAction = new org.eclipse.ui.actions.RetargetAction(id, label); retargetAction.addPropertyChangeListener(new org.eclipse.jface.util.IPropertyChangeListener() { public void propertyChange(org.eclipse.jface.util.PropertyChangeEvent event) { if (event.getProperty().equals(Action.ENABLED)) { java.lang.Boolean bool = ((java.lang.Boolean) (event.getNewValue())); setEnabled(bool.booleanValue()); } else if (event.getProperty().equals(Action.TEXT)) { java.lang.String str = ((java.lang.String) (event.getNewValue())); setText(str); } else if (event.getProperty().equals(Action.TOOL_TIP_TEXT)) { java.lang.String str = ((java.lang.String) (event.getNewValue())); setToolTipText(str); } } }); retargetAction.setEnabled(false); setEnabled(false); window.getPartService().addPartListener(retargetAction); org.eclipse.ui.internal.IWorkbenchPart activePart = window.getPartService().getActivePart(); if (activePart != null) retargetAction.partActivated(activePart); } else { window.getSelectionService().addSelectionListener(this); refreshSelection(); } org.eclipse.ui.internal.WWinPluginAction.addToActionList(this); }
protected boolean doComputeEnablement(org.eclipse.ui.activities.IActivityManager activityManager, org.eclipse.ui.activities.IIdentifier identifier, boolean disabledExpressionActivitiesTakePrecedence) { final java.util.Set activityIds = identifier.getActivityIds(); if ((activityIds.size()) == 0) { return true; } boolean matchesAtLeastOneEnabled = false; boolean matchesDisabledExpressionActivitiesWithPrecedence = false; java.util.Set enabledActivityIds = activityManager.getEnabledActivityIds(); for (java.util.Iterator iterator = activityIds.iterator(); iterator.hasNext();) { java.lang.String activityId = ((java.lang.String) (iterator.next())); org.eclipse.ui.activities.IActivity activity = activityManager.getActivity(activityId); if ((activity.isEnabled()) && (enabledActivityIds.contains(activityId))) { if (!disabledExpressionActivitiesTakePrecedence) { return true; } matchesAtLeastOneEnabled = true; } else { if (disabledExpressionActivitiesTakePrecedence && ((activity.getExpression()) != null)) { matchesDisabledExpressionActivitiesWithPrecedence = true; } } } return (!matchesDisabledExpressionActivitiesWithPrecedence) && matchesAtLeastOneEnabled; }
public void handleEvent(org.osgi.service.event.Event event) { java.lang.Object element = event.getProperty(UIEvents.EventTags.ELEMENT); if (element instanceof org.eclipse.e4.ui.model.application.MWindow) { org.eclipse.e4.ui.model.application.MWindow window = ((org.eclipse.e4.ui.model.application.MWindow) (element)); if ((((org.eclipse.e4.ui.model.application.MUIElement) (window.getParent())) instanceof org.eclipse.e4.ui.model.application.MApplication) && ((window.getWidget()) != null)) { org.eclipse.ui.IPerspectiveDescriptor desc = getPerspectiveRegistry().findPerspectiveWithId(getPerspectiveRegistry().getDefaultPerspective()); org.eclipse.ui.internal.e4.compatibility.WorkbenchWindow wwindow = new org.eclipse.ui.internal.e4.compatibility.WorkbenchWindow(org.eclipse.core.resources.ResourcesPlugin.getWorkspace().getRoot(), desc); org.eclipse.e4.core.services.context.spi.ContextInjectionFactory.inject(wwindow, window.getContext()); } } }
public void createControl(org.eclipse.swt.widgets.Composite parent) { treeViewer = new org.eclipse.jface.viewers.TreeViewer(parent, getTreeStyle()); treeViewer.addSelectionChangedListener(this); }
public void activateFilterIdsAndUpdateViewer(java.lang.String[] filterIdsToActivate) { boolean updateFilterActivation = false; java.util.Arrays.sort(filterIdsToActivate); org.eclipse.ui.internal.navigator.filters.CommonFilterDescriptor[] visibleFilterDescriptors = ((org.eclipse.ui.internal.navigator.filters.CommonFilterDescriptor[]) (getVisibleFilterDescriptors())); int indexofFilterIdToBeActivated; java.util.List nonUiVisible = null; for (int i = 0; i < (visibleFilterDescriptors.length); i++) { indexofFilterIdToBeActivated = java.util.Arrays.binarySearch(filterIdsToActivate, visibleFilterDescriptors[i].getId()); if ((indexofFilterIdToBeActivated >= 0) ^ (isActive(visibleFilterDescriptors[i].getId()))) { updateFilterActivation = true; } if (!(visibleFilterDescriptors[i].isVisibleInUi())) { if (nonUiVisible == null) nonUiVisible = new java.util.ArrayList(); nonUiVisible.add(visibleFilterDescriptors[i].getId()); } } if (updateFilterActivation) { if (nonUiVisible != null) { for (int i = 0; i < (filterIdsToActivate.length); i++) nonUiVisible.add(filterIdsToActivate[i]); filterIdsToActivate = ((java.lang.String[]) (nonUiVisible.toArray(new java.lang.String[]{ }))); } setActiveFilterIds(filterIdsToActivate); persistFilterActivationState(); updateViewer(); org.eclipse.jface.viewers.StructuredViewer commonViewer = ((org.eclipse.jface.viewers.StructuredViewer) (contentService.getViewer())); commonViewer.setSelection(StructuredSelection.EMPTY); } }
public void run() { if (((!(shell.isDisposed())) && (!(table.isDisposed()))) && (!(text.isDisposed()))) { if ((table.getDisplay().getActiveShell()) == (table.getShell())) { text.setFocus(); return; } if (((!(shell.isFocusControl())) && (!(table.isFocusControl()))) && (!(text.isFocusControl()))) { quickAccessContents.doClose(); text.setText(""); quickAccessContents.resetProviders(); } } }
public void run(org.eclipse.core.resources.IMarker marker) { org.eclipse.ui.IWorkbenchWindow w = org.eclipse.ui.PlatformUI.getWorkbench().getActiveWorkbenchWindow(); if (w == null) return; org.eclipse.ui.IWorkbenchPage page = w.getActivePage(); if (page == null) return; org.eclipse.ui.IEditorPart[] parts = page.getEditors(); org.eclipse.ui.IEditorPart editorPart = null; for (int i = 0; i < (parts.length); i++) { org.eclipse.ui.IEditorInput input = parts[i].getEditorInput(); if (input instanceof org.eclipse.ui.IFileEditorInput) { if (((org.eclipse.ui.IFileEditorInput) (input)).getFile().equals(marker.getResource())) { editorPart = parts[i]; break; } } } if (editorPart == null) { try { editorPart = page.openEditor(((org.eclipse.core.resources.IFile) (marker.getResource()))); } catch (org.eclipse.ui.PartInitException e) { org.eclipse.jface.dialogs.MessageDialog.openError(w.getShell(), org.eclipse.ui.examples.readmetool.MessageUtil.getString("Resolution_Error"), org.eclipse.ui.examples.readmetool.MessageUtil.getString("Unable_to_open_file_editor")); } } if ((editorPart == null) || (!(editorPart instanceof org.eclipse.ui.examples.readmetool.ReadmeEditor))) return; org.eclipse.ui.examples.readmetool.ReadmeEditor editor = ((org.eclipse.ui.examples.readmetool.ReadmeEditor) (editorPart)); org.eclipse.jface.text.IDocument doc = editor.getDocumentProvider().getDocument(editor.getEditorInput()); java.lang.String s = org.eclipse.ui.examples.readmetool.MessageUtil.getString("Simple_sentence"); try { doc.replace(marker.getAttribute(org.eclipse.core.resources.IMarker.CHAR_START, (-1)), 0, s); } catch (org.eclipse.jface.text.BadLocationException e) { return; } try { marker.delete(); } catch (org.eclipse.core.runtime.CoreException e) { e.printStackTrace(); } }
@java.lang.Override public void invoke(org.apache.catalina.connector.Request request, org.apache.catalina.connector.Response response) throws java.io.IOException, javax.servlet.ServletException { if (org.apache.catalina.authenticator.AuthenticatorBase.log.isDebugEnabled()) org.apache.catalina.authenticator.AuthenticatorBase.log.debug(((("Security checking request " + (request.getMethod())) + " ") + (request.getRequestURI()))); org.apache.catalina.deploy.LoginConfig config = this.context.getLoginConfig(); if (cache) { java.security.Principal principal = request.getUserPrincipal(); if (principal == null) { org.apache.catalina.Session session = request.getSessionInternal(false); if (session != null) { principal = session.getPrincipal(); if (principal != null) { if (org.apache.catalina.authenticator.AuthenticatorBase.log.isDebugEnabled()) org.apache.catalina.authenticator.AuthenticatorBase.log.debug(((("We have cached auth type " + (session.getAuthType())) + " for principal ") + (session.getPrincipal()))); request.setAuthType(session.getAuthType()); request.setUserPrincipal(principal); } } } } java.lang.String contextPath = this.context.getPath(); java.lang.String requestURI = request.getDecodedRequestURI(); if ((requestURI.startsWith(contextPath)) && (requestURI.endsWith(Constants.FORM_ACTION))) { if (!(authenticate(request, response, config))) { if (org.apache.catalina.authenticator.AuthenticatorBase.log.isDebugEnabled()) org.apache.catalina.authenticator.AuthenticatorBase.log.debug((" Failed authenticate() test ??" + requestURI)); return; } } org.apache.catalina.Wrapper wrapper = ((org.apache.catalina.Wrapper) (request.getMappingData().wrapper)); if (wrapper != null) { wrapper.servletSecurityAnnotationScan(); } org.apache.catalina.Realm realm = this.context.getRealm(); org.apache.catalina.deploy.SecurityConstraint[] constraints = realm.findSecurityConstraints(request, this.context); if ((constraints == null) && (!(context.getPreemptiveAuthentication()))) { if (org.apache.catalina.authenticator.AuthenticatorBase.log.isDebugEnabled()) org.apache.catalina.authenticator.AuthenticatorBase.log.debug(" Not subject to any constraint"); getNext().invoke(request, response); return; } if ((((constraints != null) && (disableProxyCaching)) && (!(request.isSecure()))) && (!("POST".equalsIgnoreCase(request.getMethod())))) { if (securePagesWithPragma) { response.setHeader("Pragma", "No-cache"); response.setHeader("Cache-Control", "no-cache"); } else { response.setHeader("Cache-Control", "private"); } response.setHeader("Expires", org.apache.catalina.authenticator.AuthenticatorBase.DATE_ONE); } int i; if (constraints != null) { if (org.apache.catalina.authenticator.AuthenticatorBase.log.isDebugEnabled()) { org.apache.catalina.authenticator.AuthenticatorBase.log.debug(" Calling hasUserDataPermission()"); } if (!(realm.hasUserDataPermission(request, response, constraints))) { if (org.apache.catalina.authenticator.AuthenticatorBase.log.isDebugEnabled()) { org.apache.catalina.authenticator.AuthenticatorBase.log.debug(" Failed hasUserDataPermission() test"); } return; } } boolean authRequired; if (constraints == null) { authRequired = false; } else { authRequired = true; for (i = 0; (i < (constraints.length)) && authRequired; i++) { if (!(constraints[i].getAuthConstraint())) { authRequired = false; } else if (!(constraints[i].getAllRoles())) { java.lang.String[] roles = constraints[i].findAuthRoles(); if ((roles == null) || ((roles.length) == 0)) { authRequired = false; } } } } if ((!authRequired) && (context.getPreemptiveAuthentication())) { authRequired = (request.getCoyoteRequest().getMimeHeaders().getValue("authorization")) != null; } if ((!authRequired) && (context.getPreemptiveAuthentication())) { java.security.cert.X509Certificate[] certs = ((java.security.cert.X509Certificate[]) (request.getAttribute(Globals.CERTIFICATES_ATTR))); authRequired = (certs != null) && ((certs.length) > 0); } if (authRequired) { if (org.apache.catalina.authenticator.AuthenticatorBase.log.isDebugEnabled()) { org.apache.catalina.authenticator.AuthenticatorBase.log.debug(" Calling authenticate()"); } if (!(authenticate(request, response, config))) { if (org.apache.catalina.authenticator.AuthenticatorBase.log.isDebugEnabled()) { org.apache.catalina.authenticator.AuthenticatorBase.log.debug(" Failed authenticate() test"); } return; } } if (constraints != null) { if (org.apache.catalina.authenticator.AuthenticatorBase.log.isDebugEnabled()) { org.apache.catalina.authenticator.AuthenticatorBase.log.debug(" Calling accessControl()"); } if (!(realm.hasResourcePermission(request, response, constraints, this.context))) { if (org.apache.catalina.authenticator.AuthenticatorBase.log.isDebugEnabled()) { org.apache.catalina.authenticator.AuthenticatorBase.log.debug(" Failed accessControl() test"); } return; } } if (org.apache.catalina.authenticator.AuthenticatorBase.log.isDebugEnabled()) { org.apache.catalina.authenticator.AuthenticatorBase.log.debug(" Successfully passed all security constraints"); } getNext().invoke(request, response); }
public void service(org.apache.coyote.Request req, org.apache.coyote.Response res) throws java.lang.Exception { org.apache.catalina.connector.Request request = ((org.apache.catalina.connector.Request) (req.getNote(org.apache.catalina.connector.CoyoteAdapter.ADAPTER_NOTES))); org.apache.catalina.connector.Response response = ((org.apache.catalina.connector.Response) (res.getNote(org.apache.catalina.connector.CoyoteAdapter.ADAPTER_NOTES))); if (request == null) { request = connector.createRequest(); request.setCoyoteRequest(req); response = connector.createResponse(); response.setCoyoteResponse(res); request.setResponse(response); response.setRequest(request); req.setNote(org.apache.catalina.connector.CoyoteAdapter.ADAPTER_NOTES, request); res.setNote(org.apache.catalina.connector.CoyoteAdapter.ADAPTER_NOTES, response); req.getParameters().setQueryStringEncoding(connector.getURIEncoding()); } if (connector.getXpoweredBy()) { response.addHeader("X-Powered-By", "Servlet/2.5"); } boolean comet = false; boolean async = request.isAsyncStarted(); try { req.getRequestProcessor().setWorkerThreadName(java.lang.Thread.currentThread().getName()); if (postParseRequest(req, request, res, response)) { request.setAsyncSupported(connector.getContainer().getPipeline().isAsyncSupported()); connector.getContainer().getPipeline().getFirst().invoke(request, response); if (request.isComet()) { if ((!(response.isClosed())) && (!(response.isError()))) { if ((request.getAvailable()) || (((request.getContentLength()) > 0) && (!(request.isParametersParsed())))) { if (event(req, res, SocketStatus.OPEN)) { comet = true; res.action(ActionCode.ACTION_COMET_BEGIN, null); } } else { comet = true; res.action(ActionCode.ACTION_COMET_BEGIN, null); } } else { request.setFilterChain(null); } } } if (request.isAsyncStarted()) { res.action(ActionCode.ACTION_ASYNC_START, request.getAsyncContext()); async = true; } else if (!comet) { response.finishResponse(); req.action(ActionCode.ACTION_POST_REQUEST, null); } } catch (java.io.IOException e) { } catch (java.lang.Throwable t) { org.apache.catalina.connector.CoyoteAdapter.log.error(org.apache.catalina.connector.CoyoteAdapter.sm.getString("coyoteAdapter.service"), t); } finally { req.getRequestProcessor().setWorkerThreadName(null); if ((!comet) && (!async)) { request.recycle(); response.recycle(); } else { request.clearEncoders(); response.clearEncoders(); } } }
public synchronized void start() throws org.apache.catalina.LifecycleException { if (started) { if (org.apache.catalina.core.StandardContext.log.isInfoEnabled()) org.apache.catalina.core.StandardContext.log.info(sm.getString("containerBase.alreadyStarted", logName())); return; } if (!(initialized)) { try { init(); } catch (java.lang.Exception ex) { throw new org.apache.catalina.LifecycleException("Error initializaing ", ex); } } if (org.apache.catalina.core.StandardContext.log.isDebugEnabled()) org.apache.catalina.core.StandardContext.log.debug(("Starting " + ("".equals(getName()) ? "ROOT" : getName()))); preRegisterJMX(); if (((oname) != null) && (org.apache.tomcat.util.modeler.Registry.getRegistry(null, null).getMBeanServer().isRegistered(oname))) { org.apache.tomcat.util.modeler.Registry.getRegistry(null, null).unregisterComponent(oname); } lifecycle.fireLifecycleEvent(org.apache.catalina.core.BEFORE_START_EVENT, null); setAvailable(false); setConfigured(false); boolean ok = true; if ((webappResources) == null) { if (org.apache.catalina.core.StandardContext.log.isDebugEnabled()) org.apache.catalina.core.StandardContext.log.debug("Configuring default Resources"); try { if ((((docBase) != null) && (docBase.endsWith(".war"))) && (!(new java.io.File(getBasePath()).isDirectory()))) setResources(new org.apache.naming.resources.WARDirContext()); else setResources(new org.apache.naming.resources.FileDirContext()); } catch (java.lang.IllegalArgumentException e) { org.apache.catalina.core.StandardContext.log.error(("Error initializing resources: " + (e.getMessage()))); ok = false; } } if (ok) { if (!(resourcesStart())) { org.apache.catalina.core.StandardContext.log.error("Error in resourceStart()"); ok = false; } } if (((realm) == null) && ((mserver) != null)) { javax.management.ObjectName realmName = null; try { realmName = new javax.management.ObjectName((((((getEngineName()) + ":type=Realm,host=") + (getHostname())) + ",path=") + (getPath()))); if (mserver.isRegistered(realmName)) { mserver.invoke(realmName, "init", new java.lang.Object[]{ }, new java.lang.String[]{ }); } } catch (java.lang.Throwable t) { if (org.apache.catalina.core.StandardContext.log.isDebugEnabled()) org.apache.catalina.core.StandardContext.log.debug(("No realm for this host " + realmName)); } } if ((getLoader()) == null) { org.apache.catalina.loader.WebappLoader webappLoader = new org.apache.catalina.loader.WebappLoader(getParentClassLoader()); webappLoader.setDelegate(getDelegate()); setLoader(webappLoader); } getCharsetMapper(); postWorkDirectory(); boolean dependencyCheck = true; try { dependencyCheck = org.apache.catalina.util.ExtensionValidator.validateApplication(getResources(), this); } catch (java.io.IOException ioe) { org.apache.catalina.core.StandardContext.log.error("Error in dependencyCheck", ioe); dependencyCheck = false; } if (!dependencyCheck) { ok = false; } java.lang.String useNamingProperty = java.lang.System.getProperty("catalina.useNaming"); if ((useNamingProperty != null) && (useNamingProperty.equals("false"))) { useNaming = false; } if (ok && (isUseNaming())) { if ((namingContextListener) == null) { namingContextListener = new org.apache.catalina.core.NamingContextListener(); namingContextListener.setName(getNamingContextName()); addLifecycleListener(namingContextListener); } } if (org.apache.catalina.core.StandardContext.log.isDebugEnabled()) org.apache.catalina.core.StandardContext.log.debug("Processing standard container startup"); java.lang.ClassLoader oldCCL = bindThread(); boolean mainOk = false; try { if (ok) { started = true; if (((loader) != null) && ((loader) instanceof org.apache.catalina.Lifecycle)) ((org.apache.catalina.Lifecycle) (loader)).start(); unbindThread(oldCCL); oldCCL = bindThread(); logger = null; getLogger(); if (((logger) != null) && ((logger) instanceof org.apache.catalina.Lifecycle)) ((org.apache.catalina.Lifecycle) (logger)).start(); if (((cluster) != null) && ((cluster) instanceof org.apache.catalina.Lifecycle)) ((org.apache.catalina.Lifecycle) (cluster)).start(); if (((realm) != null) && ((realm) instanceof org.apache.catalina.Lifecycle)) ((org.apache.catalina.Lifecycle) (realm)).start(); if (((resources) != null) && ((resources) instanceof org.apache.catalina.Lifecycle)) ((org.apache.catalina.Lifecycle) (resources)).start(); org.apache.catalina.Container[] children = findChildren(); for (int i = 0; i < (children.length); i++) { if ((children[i]) instanceof org.apache.catalina.Lifecycle) ((org.apache.catalina.Lifecycle) (children[i])).start(); } if ((pipeline) instanceof org.apache.catalina.Lifecycle) { ((org.apache.catalina.Lifecycle) (pipeline)).start(); } if (getProcessTlds()) { processTlds(); } lifecycle.fireLifecycleEvent(org.apache.catalina.core.START_EVENT, null); org.apache.catalina.Manager contextManager = null; if ((manager) == null) { if (((getCluster()) != null) && (distributable)) { try { contextManager = getCluster().createManager(getName()); } catch (java.lang.Exception ex) { org.apache.catalina.core.StandardContext.log.error("standardContext.clusterFail", ex); ok = false; } } else { contextManager = new org.apache.catalina.session.StandardManager(); } } if (contextManager != null) { setManager(contextManager); } if ((((manager) != null) && ((getCluster()) != null)) && (distributable)) { getCluster().registerManager(manager); } mainOk = true; } } finally { unbindThread(oldCCL); if (!mainOk) { registerJMX(); } } if (!(getConfigured())) { org.apache.catalina.core.StandardContext.log.error("Error getConfigured"); ok = false; } if (ok) getServletContext().setAttribute(Globals.RESOURCES_ATTR, getResources()); mapper.setContext(getPath(), welcomeFiles, resources); oldCCL = bindThread(); if (ok) { if ((instanceManager) == null) { javax.naming.Context context = null; if ((isUseNaming()) && ((namingContextListener) != null)) { context = namingContextListener.getEnvContext(); } java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.String>> injectionMap = buildInjectionMap((getIgnoreAnnotations() ? new org.apache.catalina.deploy.NamingResources() : getNamingResources())); instanceManager = new org.apache.catalina.core.DefaultInstanceManager(context, injectionMap, this, this.getClass().getClassLoader()); getServletContext().setAttribute(org.apache.InstanceManager.class.getName(), instanceManager); } } try { if (ok) { postWelcomeFiles(); } if (ok) { lifecycle.fireLifecycleEvent(org.apache.catalina.core.AFTER_START_EVENT, null); } if (ok) { if (!(listenerStart())) { org.apache.catalina.core.StandardContext.log.error("Error listenerStart"); ok = false; } } try { if (((manager) != null) && ((manager) instanceof org.apache.catalina.Lifecycle)) { ((org.apache.catalina.Lifecycle) (getManager())).start(); } super.threadStart(); } catch (java.lang.Exception e) { org.apache.catalina.core.StandardContext.log.error("Error manager.start()", e); ok = false; } if (ok) { if (!(filterStart())) { org.apache.catalina.core.StandardContext.log.error("Error filterStart"); ok = false; } } if (ok) { loadOnStartup(findChildren()); } } finally { unbindThread(oldCCL); } if (ok) { if (org.apache.catalina.core.StandardContext.log.isDebugEnabled()) org.apache.catalina.core.StandardContext.log.debug("Starting completed"); setAvailable(true); } else { org.apache.catalina.core.StandardContext.log.error(sm.getString("standardContext.startFailed", getName())); try { stop(); } catch (java.lang.Throwable t) { org.apache.catalina.core.StandardContext.log.error(sm.getString("standardContext.startCleanup"), t); } setAvailable(false); } registerJMX(); startTime = java.lang.System.currentTimeMillis(); if (ok && ((this.getObjectName()) != null)) { javax.management.Notification notification = new javax.management.Notification("j2ee.state.running", this.getObjectName(), ((sequenceNumber)++)); broadcaster.sendNotification(notification); } if ((getLoader()) instanceof org.apache.catalina.loader.WebappLoader) { ((org.apache.catalina.loader.WebappLoader) (getLoader())).closeJARs(true); } if ((!ok) && (started)) { stop(); } }
protected void deployWARs(java.io.File appBase, java.lang.String[] files) { if (files == null) return; for (int i = 0; i < (files.length); i++) { if (files[i].equalsIgnoreCase("META-INF")) continue; if (files[i].equalsIgnoreCase("WEB-INF")) continue; java.io.File dir = new java.io.File(appBase, files[i]); if ((files[i].toLowerCase().endsWith(".war")) && (dir.isFile())) { java.lang.String contextPath = "/" + (files[i]); int period = contextPath.lastIndexOf("."); if (period >= 0) contextPath = contextPath.substring(0, period); if (contextPath.equals("/ROOT")) contextPath = ""; if (isServiced(contextPath)) continue; java.lang.String file = files[i]; deployWAR(contextPath, dir, file); } } }
public JavacErrorDetail(java.lang.String javaFileName, int javaLineNum, java.lang.String jspFileName, int jspBeginLineNum, java.lang.StringBuilder errMsg, org.apache.jasper.JspCompilationContext ctxt) { this(javaFileName, javaLineNum, errMsg); this.jspFileName = jspFileName; this.jspBeginLineNum = jspBeginLineNum; if ((jspBeginLineNum > 0) && (ctxt != null)) { java.io.InputStream is = null; java.io.FileInputStream fis = null; try { is = ctxt.getResourceAsStream(jspFileName); java.lang.String[] jspLines = readFile(is); fis = new java.io.FileInputStream(ctxt.getServletJavaFileName()); java.lang.String[] javaLines = readFile(fis); if ((jspLines.length) < jspBeginLineNum) { jspExtract = org.apache.jasper.compiler.Localizer.getMessage("jsp.error.bug48494"); return; } if ((jspLines[(jspBeginLineNum - 1)].lastIndexOf("<%")) > (jspLines[(jspBeginLineNum - 1)].lastIndexOf("%>"))) { java.lang.String javaLine = javaLines[(javaLineNum - 1)].trim(); for (int i = jspBeginLineNum - 1; i < (jspLines.length); i++) { if ((jspLines[i].indexOf(javaLine)) != (-1)) { this.jspBeginLineNum = i + 1; break; } } } java.lang.StringBuilder fragment = new java.lang.StringBuilder(1024); int startIndex = java.lang.Math.max(0, (((this.jspBeginLineNum) - 1) - 3)); int endIndex = java.lang.Math.min(((jspLines.length) - 1), (((this.jspBeginLineNum) - 1) + 3)); for (int i = startIndex; i <= endIndex; ++i) { fragment.append((i + 1)); fragment.append(": "); fragment.append(jspLines[i]); fragment.append("\n"); } jspExtract = fragment.toString(); } catch (java.io.IOException ioe) { } finally { if (is != null) { try { is.close(); } catch (java.io.IOException ioe) { } } if (fis != null) { try { fis.close(); } catch (java.io.IOException ioe) { } } } } }
public void compile(boolean compileClass, boolean jspcMode) throws java.io.FileNotFoundException, java.lang.Exception, org.apache.jasper.JasperException { if ((errDispatcher) == null) { this.errDispatcher = new org.apache.jasper.compiler.ErrorDispatcher(jspcMode); } try { java.lang.String[] smap = generateJava(); if (compileClass) { generateClass(smap); } } finally { if (((tfp) != null) && (ctxt.isPrototypeMode())) { tfp.removeProtoTypeFiles(null); } tfp = null; errDispatcher = null; pageInfo = null; if (!(this.options.getDevelopment())) { pageNodes = null; } if ((ctxt.getWriter()) != null) { ctxt.getWriter().close(); ctxt.setWriter(null); } } }
@java.lang.Override public java.net.URL getResource(java.lang.String path) throws java.net.MalformedURLException { if ((path == null) || ((!(path.startsWith("/"))) && (org.apache.catalina.core.ApplicationContext.GET_RESOURCE_REQUIRE_SLASH))) throw new java.net.MalformedURLException(org.apache.catalina.core.ApplicationContext.sm.getString("applicationContext.requestDispatcher.iae", path)); java.lang.String normPath = org.apache.tomcat.util.http.RequestUtil.normalize(path); if (normPath == null) return null; javax.naming.directory.DirContext resources = context.getResources(); if (resources != null) { java.lang.String fullPath = (context.getPath()) + normPath; java.lang.String hostName = context.getParent().getName(); try { resources.lookup(normPath); java.net.URI uri = new java.net.URI("jndi", null, "", (-1), org.apache.catalina.core.ApplicationContext.getJNDIUri(hostName, fullPath), null, null); return new java.net.URL(null, uri.toString(), new org.apache.naming.resources.DirContextURLStreamHandler(resources)); } catch (javax.naming.NamingException e) { } catch (java.lang.Exception e) { log(org.apache.catalina.core.ApplicationContext.sm.getString("applicationContext.lookup.error", path, getContextPath()), e); } } return null; }
protected void processAnnotationsJndi(java.net.URL url, org.apache.catalina.startup.WebXml fragment) { try { java.net.URLConnection urlConn = url.openConnection(); org.apache.naming.resources.DirContextURLConnection dcUrlConn; if (!(urlConn instanceof org.apache.naming.resources.DirContextURLConnection)) { org.apache.catalina.startup.ContextConfig.sm.getString("contextConfig.jndiUrl", url); return; } dcUrlConn = ((org.apache.naming.resources.DirContextURLConnection) (urlConn)); dcUrlConn.setUseCaches(false); java.lang.String type = dcUrlConn.getHeaderField(ResourceAttributes.TYPE); if (ResourceAttributes.COLLECTION_TYPE.equals(type)) { java.util.Enumeration<java.lang.String> dirs = dcUrlConn.list(); while (dirs.hasMoreElements()) { java.lang.String dir = dirs.nextElement(); java.net.URL dirUrl = new java.net.URL((((url.toString()) + '/') + dir)); processAnnotationsJndi(dirUrl, fragment); } } else { if (url.getPath().endsWith(".class")) { java.io.InputStream is = null; try { is = dcUrlConn.getInputStream(); processAnnotationsStream(is, fragment); } catch (java.io.IOException e) { org.apache.catalina.startup.ContextConfig.log.error(org.apache.catalina.startup.ContextConfig.sm.getString("contextConfig.inputStreamJndi", url), e); } finally { if (is != null) { try { is.close(); } catch (java.lang.Throwable t) { } } } } } } catch (java.io.IOException e) { org.apache.catalina.startup.ContextConfig.log.error(org.apache.catalina.startup.ContextConfig.sm.getString("contextConfig.jndiUrl", url), e); } }
@java.lang.Override public void run() { while (running) { try { while ((paused) && (!(close))) { try { java.lang.Thread.sleep(100); } catch (java.lang.InterruptedException e) { } } boolean hasEvents = events(); if (close) { timeout(0, false); break; } try { if (!(close)) { if ((wakeupCounter.getAndSet((-1))) > 0) { keyCount = selector.selectNow(); } else { keyCount = selector.select(selectorTimeout); } wakeupCounter.set(0); } if (close) { timeout(0, false); selector.close(); break; } } catch (java.lang.NullPointerException x) { if (org.apache.tomcat.util.net.NioEndpoint.log.isDebugEnabled()) org.apache.tomcat.util.net.NioEndpoint.log.debug("Possibly encountered sun bug 5076772 on windows JDK 1.5", x); if (((wakeupCounter) == null) || ((selector) == null)) throw x; continue; } catch (java.nio.channels.CancelledKeyException x) { if (org.apache.tomcat.util.net.NioEndpoint.log.isDebugEnabled()) org.apache.tomcat.util.net.NioEndpoint.log.debug("Possibly encountered sun bug 5076772 on windows JDK 1.5", x); if (((wakeupCounter) == null) || ((selector) == null)) throw x; continue; } catch (java.lang.Throwable x) { org.apache.tomcat.util.ExceptionUtils.handleThrowable(x); org.apache.tomcat.util.net.NioEndpoint.log.error("", x); continue; } if ((keyCount) == 0) hasEvents = hasEvents | (events()); java.util.Iterator<java.nio.channels.SelectionKey> iterator = ((keyCount) > 0) ? selector.selectedKeys().iterator() : null; while ((iterator != null) && (iterator.hasNext())) { java.nio.channels.SelectionKey sk = iterator.next(); org.apache.tomcat.util.net.NioEndpoint.KeyAttachment attachment = ((org.apache.tomcat.util.net.NioEndpoint.KeyAttachment) (sk.attachment())); if (attachment == null) { iterator.remove(); } else { attachment.access(); iterator.remove(); processKey(sk, attachment); } } timeout(keyCount, hasEvents); if (((oomParachute) > 0) && ((oomParachuteData) == null)) checkParachute(); } catch (java.lang.OutOfMemoryError oom) { try { oomParachuteData = null; releaseCaches(); org.apache.tomcat.util.net.NioEndpoint.log.error("", oom); } catch (java.lang.Throwable oomt) { try { java.lang.System.err.println(org.apache.tomcat.util.net.NioEndpoint.oomParachuteMsg); oomt.printStackTrace(); } catch (java.lang.Throwable letsHopeWeDontGetHere) { org.apache.tomcat.util.ExceptionUtils.handleThrowable(letsHopeWeDontGetHere); } } } } synchronized(this) { this.notifyAll(); } stopLatch.countDown(); }
@java.lang.Override public void dispatch(javax.servlet.ServletContext context, java.lang.String path) { if (org.apache.catalina.core.AsyncContextImpl.log.isDebugEnabled()) { logDebug("dispatch "); } check(); if ((request.getAttribute(org.apache.catalina.core.ASYNC_REQUEST_URI)) == null) { request.setAttribute(org.apache.catalina.core.ASYNC_REQUEST_URI, request.getRequestURI()); request.setAttribute(org.apache.catalina.core.ASYNC_CONTEXT_PATH, request.getContextPath()); request.setAttribute(org.apache.catalina.core.ASYNC_SERVLET_PATH, request.getServletPath()); request.setAttribute(org.apache.catalina.core.ASYNC_PATH_INFO, request.getPathInfo()); request.setAttribute(org.apache.catalina.core.ASYNC_QUERY_STRING, request.getQueryString()); } final javax.servlet.RequestDispatcher requestDispatcher = context.getRequestDispatcher(path); if (!(requestDispatcher instanceof org.apache.catalina.AsyncDispatcher)) { throw new java.lang.UnsupportedOperationException(org.apache.catalina.core.AsyncContextImpl.sm.getString("asyncContextImpl.noAsyncDispatcher")); } final org.apache.catalina.AsyncDispatcher applicationDispatcher = ((org.apache.catalina.AsyncDispatcher) (requestDispatcher)); final javax.servlet.http.HttpServletRequest servletRequest = ((javax.servlet.http.HttpServletRequest) (getRequest())); final javax.servlet.http.HttpServletResponse servletResponse = ((javax.servlet.http.HttpServletResponse) (getResponse())); java.lang.Runnable run = new java.lang.Runnable() { @java.lang.Override public void run() { request.getCoyoteRequest().action(ActionCode.ASYNC_DISPATCHED, null); try { applicationDispatcher.dispatch(servletRequest, servletResponse); } catch (java.lang.Exception x) { throw new java.lang.RuntimeException(x); } } }; this.dispatch = run; this.request.getCoyoteRequest().action(ActionCode.ASYNC_DISPATCH, null); }
protected void removeWrapper(org.apache.catalina.mapper.Mapper.ContextVersion context, java.lang.String path) { if (org.apache.catalina.mapper.Mapper.log.isDebugEnabled()) { org.apache.catalina.mapper.Mapper.log.debug(org.apache.catalina.mapper.Mapper.sm.getString("mapper.removeWrapper", context.name, path)); } synchronized(context) { if (path.endsWith("/*")) { java.lang.String name = path.substring(0, ((path.length()) - 2)); org.apache.catalina.mapper.Mapper.MappedWrapper[] oldWrappers = context.wildcardWrappers; if ((oldWrappers.length) == 0) { return; } org.apache.catalina.mapper.Mapper.MappedWrapper[] newWrappers = new org.apache.catalina.mapper.Mapper.MappedWrapper[(oldWrappers.length) - 1]; if (org.apache.catalina.mapper.Mapper.removeMap(oldWrappers, newWrappers, name)) { context.nesting = 0; for (int i = 0; i < (newWrappers.length); i++) { int slashCount = org.apache.catalina.mapper.Mapper.slashCount(newWrappers[i].name); if (slashCount > (context.nesting)) { context.nesting = slashCount; } } context.wildcardWrappers = newWrappers; } } else if (path.startsWith("*.")) { java.lang.String name = path.substring(2); org.apache.catalina.mapper.Mapper.MappedWrapper[] oldWrappers = context.extensionWrappers; if ((oldWrappers.length) == 0) { return; } org.apache.catalina.mapper.Mapper.MappedWrapper[] newWrappers = new org.apache.catalina.mapper.Mapper.MappedWrapper[(oldWrappers.length) - 1]; if (org.apache.catalina.mapper.Mapper.removeMap(oldWrappers, newWrappers, name)) { context.extensionWrappers = newWrappers; } } else if (path.equals("/")) { context.defaultWrapper = null; } else { java.lang.String name; if ((path.length()) == 0) { name = "/"; } else { name = path; } org.apache.catalina.mapper.Mapper.MappedWrapper[] oldWrappers = context.exactWrappers; if ((oldWrappers.length) == 0) { return; } org.apache.catalina.mapper.Mapper.MappedWrapper[] newWrappers = new org.apache.catalina.mapper.Mapper.MappedWrapper[(oldWrappers.length) - 1]; if (org.apache.catalina.mapper.Mapper.removeMap(oldWrappers, newWrappers, name)) { context.exactWrappers = newWrappers; } } } }
@java.lang.Override public java.security.Principal authenticate(java.lang.String username, java.lang.String clientDigest, java.lang.String nonce, java.lang.String nc, java.lang.String cnonce, java.lang.String qop, java.lang.String realm, java.lang.String md5a2) { java.lang.String md5a1 = getDigest(username, realm); if (md5a1 == null) return null; md5a1 = md5a1.toLowerCase(java.util.Locale.ENGLISH); java.lang.String serverDigestValue; if (qop == null) { serverDigestValue = (((md5a1 + ":") + nonce) + ":") + md5a2; } else { serverDigestValue = (((((((((md5a1 + ":") + nonce) + ":") + nc) + ":") + cnonce) + ":") + qop) + ":") + md5a2; } byte[] valueBytes = null; try { valueBytes = serverDigestValue.getBytes(getDigestCharset()); } catch (java.io.UnsupportedEncodingException uee) { org.apache.catalina.realm.RealmBase.log.error(("Illegal digestEncoding: " + (getDigestEncoding())), uee); throw new java.lang.IllegalArgumentException(uee.getMessage()); } java.lang.String serverDigest = null; synchronized(org.apache.catalina.realm.RealmBase.md5Helper) { serverDigest = org.apache.catalina.util.MD5Encoder.encode(org.apache.catalina.realm.RealmBase.md5Helper.digest(valueBytes)); } if (org.apache.catalina.realm.RealmBase.log.isDebugEnabled()) { org.apache.catalina.realm.RealmBase.log.debug(((((((((((((((((((("Digest : " + clientDigest) + " Username:") + username) + " ClientSigest:") + clientDigest) + " nonce:") + nonce) + " nc:") + nc) + " cnonce:") + cnonce) + " qop:") + qop) + " realm:") + realm) + "md5a2:") + md5a2) + " Server digest:") + serverDigest)); } if (serverDigest.equals(clientDigest)) { return getPrincipal(username); } return null; }
@java.lang.Override public void handshake(java.net.Socket sock) throws java.io.IOException { javax.net.ssl.SSLSession session = ((javax.net.ssl.SSLSocket) (sock)).getSession(); if (session.getCipherSuite().equals("SSL_NULL_WITH_NULL_NULL")) throw new java.io.IOException("SSL handshake failed. Ciper suite in SSL Session is SSL_NULL_WITH_NULL_NULL"); if ((!(allowUnsafeLegacyRenegotiation)) && (!(org.apache.tomcat.util.net.jsse.JSSESocketFactory.RFC_5746_SUPPORTED))) { ((javax.net.ssl.SSLSocket) (sock)).setEnabledCipherSuites(new java.lang.String[0]); } }
@java.lang.Override public java.lang.String getManagerName(java.lang.String name, org.apache.catalina.Manager manager) { java.lang.String clusterName = name; if (clusterName == null) clusterName = manager.getContainer().getName(); if ((getContainer()) instanceof org.apache.catalina.Engine) { org.apache.catalina.Container context = manager.getContainer(); if ((context != null) && (context instanceof org.apache.catalina.Context)) { org.apache.catalina.Container host = ((org.apache.catalina.Context) (context)).getParent(); if ((((host != null) && (host instanceof org.apache.catalina.Host)) && (clusterName != null)) && (!(clusterName.startsWith(((host.getName()) + "#"))))) { clusterName = ((host.getName()) + "#") + clusterName; } } } return clusterName; }
public boolean listenerStart() { if (org.apache.catalina.core.StandardContext.log.isDebugEnabled()) org.apache.catalina.core.StandardContext.log.debug("Configuring application event listeners"); java.lang.String[] listeners = findApplicationListeners(); java.lang.Object[] results = new java.lang.Object[listeners.length]; boolean ok = true; for (int i = 0; i < (results.length); i++) { if (getLogger().isDebugEnabled()) getLogger().debug(((" Configuring event listener class '" + (listeners[i])) + "'")); try { results[i] = instanceManager.newInstance(listeners[i]); } catch (java.lang.Throwable t) { org.apache.tomcat.util.ExceptionUtils.handleThrowable(t); getLogger().error(sm.getString("standardContext.applicationListener", listeners[i]), t); ok = false; } } if (!ok) { getLogger().error(sm.getString("standardContext.applicationSkipped")); return false; } java.util.ArrayList<java.lang.Object> eventListeners = new java.util.ArrayList<java.lang.Object>(); java.util.ArrayList<java.lang.Object> lifecycleListeners = new java.util.ArrayList<java.lang.Object>(); for (int i = 0; i < (results.length); i++) { if (((((results[i]) instanceof javax.servlet.ServletContextAttributeListener) || ((results[i]) instanceof javax.servlet.ServletRequestAttributeListener)) || ((results[i]) instanceof javax.servlet.ServletRequestListener)) || ((results[i]) instanceof javax.servlet.http.HttpSessionAttributeListener)) { eventListeners.add(results[i]); } if (((results[i]) instanceof javax.servlet.ServletContextListener) || ((results[i]) instanceof javax.servlet.http.HttpSessionListener)) { lifecycleListeners.add(results[i]); } } for (java.lang.Object eventListener : getApplicationEventListeners()) { eventListeners.add(eventListener); } setApplicationEventListeners(eventListeners.toArray()); for (java.lang.Object lifecycleListener : getApplicationLifecycleListeners()) { lifecycleListeners.add(lifecycleListener); } setApplicationLifecycleListeners(lifecycleListeners.toArray()); if (getLogger().isDebugEnabled()) getLogger().debug("Sending application start events"); getServletContext(); context.setNewServletContextListenerAllowed(false); java.lang.Object[] instances = getApplicationLifecycleListeners(); if (instances == null) return ok; javax.servlet.ServletContextEvent event = new javax.servlet.ServletContextEvent(getServletContext()); for (int i = 0; i < (instances.length); i++) { if ((instances[i]) == null) continue; if (!((instances[i]) instanceof javax.servlet.ServletContextListener)) continue; javax.servlet.ServletContextListener listener = ((javax.servlet.ServletContextListener) (instances[i])); try { fireContainerEvent("beforeContextInitialized", listener); listener.contextInitialized(event); fireContainerEvent("afterContextInitialized", listener); } catch (java.lang.Throwable t) { org.apache.tomcat.util.ExceptionUtils.handleThrowable(t); fireContainerEvent("afterContextInitialized", listener); getLogger().error(sm.getString("standardContext.listenerStart", instances[i].getClass().getName()), t); ok = false; } } return ok; }
@java.lang.Override protected synchronized void startInternal() throws org.apache.catalina.LifecycleException { org.apache.catalina.Container parent = context.getParent(); while (((sso) == null) && (parent != null)) { if (!(parent instanceof org.apache.catalina.Pipeline)) { parent = parent.getParent(); continue; } org.apache.catalina.Valve[] valves = ((org.apache.catalina.Pipeline) (parent)).getValves(); for (int i = 0; i < (valves.length); i++) { if ((valves[i]) instanceof org.apache.catalina.authenticator.SingleSignOn) { sso = ((org.apache.catalina.authenticator.SingleSignOn) (valves[i])); break; } } if ((sso) == null) parent = parent.getParent(); } if (org.apache.catalina.authenticator.AuthenticatorBase.log.isDebugEnabled()) { if ((sso) != null) org.apache.catalina.authenticator.AuthenticatorBase.log.debug(("Found SingleSignOn Valve at " + (sso))); else org.apache.catalina.authenticator.AuthenticatorBase.log.debug("No SingleSignOn Valve is present"); } super.startInternal(); }
public void recycle() { context = null; wrapper = null; internalDispatcherType = null; requestDispatcherPath = null; comet = false; if ((event) != null) { event.clear(); event = null; } authType = null; inputBuffer.recycle(); usingInputStream = false; usingReader = false; userPrincipal = null; subject = null; sessionParsed = false; parametersParsed = false; parts = null; partsParseException = null; cookiesParsed = false; locales.clear(); localesParsed = false; secure = false; remoteAddr = null; remoteHost = null; remotePort = -1; localPort = -1; localAddr = null; localName = null; attributes.clear(); sslAttributesParsed = false; notes.clear(); cookies = null; if ((session) != null) { try { session.endAccess(); } catch (java.lang.Throwable t) { org.apache.tomcat.util.ExceptionUtils.handleThrowable(t); org.apache.catalina.connector.Request.log.warn(org.apache.catalina.connector.Request.sm.getString("coyoteRequest.sessionEndAccessFail"), t); } } session = null; requestedSessionCookie = false; requestedSessionId = null; requestedSessionURL = false; if ((org.apache.catalina.Globals.IS_SECURITY_ENABLED) || (Connector.RECYCLE_FACADES)) { parameterMap = new org.apache.catalina.util.ParameterMap<java.lang.String, java.lang.String[]>(); } else { parameterMap.setLocked(false); parameterMap.clear(); } mappingData.recycle(); if ((org.apache.catalina.Globals.IS_SECURITY_ENABLED) || (Connector.RECYCLE_FACADES)) { if ((facade) != null) { facade.clear(); facade = null; } if ((inputStream) != null) { inputStream.clear(); inputStream = null; } if ((reader) != null) { reader.clear(); reader = null; } } asyncSupported = null; if ((asyncContext) != null) asyncContext.recycle(); asyncContext = null; pathParameters.clear(); }
protected boolean validate(java.lang.String name) { if (name == null) { return false; } if (name.startsWith("java.")) { return false; } if (name.startsWith("javax.servlet.jsp.jstl")) { return true; } if (name.startsWith("javax.servlet.")) { return false; } if (name.startsWith("javax.el")) { return false; } return true; }
private java.lang.Object newInstance(java.lang.Object instance, java.lang.Class<?> clazz) throws java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException, javax.naming.NamingException { if (!(ignoreAnnotations)) { java.util.Map<java.lang.String, java.lang.String> injections = assembleInjectionsFromClassHierarchy(clazz); populateAnnotationsCache(clazz, injections); processAnnotations(instance, injections); postConstruct(instance, clazz); } return instance; }
private java.lang.String getWebModuleKeyProperties() { java.lang.StringBuilder keyProperties = new java.lang.StringBuilder(",WebModule="); java.lang.String hostName = getParent().getParent().getName(); if (hostName == null) { keyProperties.append("DEFAULT"); } else { keyProperties.append(hostName); } java.lang.String contextName = ((org.apache.catalina.Context) (getParent())).getName(); if (!(contextName.startsWith("/"))) { keyProperties.append('/'); } keyProperties.append(contextName); org.apache.catalina.core.StandardContext ctx = null; if ((parent) instanceof org.apache.catalina.core.StandardContext) { ctx = ((org.apache.catalina.core.StandardContext) (getParent())); } keyProperties.append(",J2EEApplication="); if (ctx == null) { keyProperties.append("none"); } else { keyProperties.append(ctx.getJ2EEApplication()); } keyProperties.append(",J2EEServer="); if (ctx == null) { keyProperties.append("none"); } else { keyProperties.append(ctx.getJ2EEServer()); } return keyProperties.toString(); }
@java.lang.Override public void run() { synchronized(socket) { if (!(deferAccept)) { if (setSocketOptions(socket.getSocket().longValue())) { getPoller().add(socket.getSocket().longValue()); } else { destroySocket(socket.getSocket().longValue()); socket = null; } } else { if (!(setSocketOptions(socket.getSocket().longValue()))) { destroySocket(socket.getSocket().longValue()); socket = null; return; } org.apache.tomcat.util.net.Handler.SocketState state = handler.process(socket); if (state == (SocketState)) { destroySocket(socket.getSocket().longValue()); socket = null; } else if (state == (SocketState)) { socket.access(); if (socket.async) { waitingRequests.add(socket); } } else if (state == (SocketState)) { socket.access(); org.apache.tomcat.util.net.AprEndpoint.SocketProcessor proc = new org.apache.tomcat.util.net.AprEndpoint.SocketProcessor(socket, SocketStatus.OPEN); getExecutor().execute(proc); } } } }
private void processChars() throws org.xml.sax.SAXException { if (((charBuffer) == null) || (directivesOnly)) { return; } boolean isAllSpace = true; if ((!((current) instanceof org.apache.jasper.compiler.Node.JspText)) && (!((current) instanceof org.apache.jasper.compiler.Node.NamedAttribute))) { for (int i = 0; i < (charBuffer.length()); i++) { char ch = charBuffer.charAt(i); if (!((((ch == ' ') || (ch == '\n')) || (ch == '\r')) || (ch == '\t'))) { isAllSpace = false; break; } } } if ((!isAllSpace) && (tagDependentPending)) { tagDependentPending = false; (tagDependentNesting)++; } if ((((tagDependentNesting) > 0) || (pageInfo.isELIgnored())) || ((current) instanceof org.apache.jasper.compiler.Node.ScriptingElement)) { if ((charBuffer.length()) > 0) { @java.lang.SuppressWarnings("unused") org.apache.jasper.compiler.Node unused = new org.apache.jasper.compiler.Node.TemplateText(charBuffer.toString(), startMark, current); } startMark = new org.apache.jasper.compiler.Mark(ctxt, path, locator.getLineNumber(), locator.getColumnNumber()); charBuffer = null; return; } if ((((current) instanceof org.apache.jasper.compiler.Node.JspText) || ((current) instanceof org.apache.jasper.compiler.Node.NamedAttribute)) || (!isAllSpace)) { int line = startMark.getLineNumber(); int column = startMark.getColumnNumber(); java.io.CharArrayWriter ttext = new java.io.CharArrayWriter(); int lastCh = 0; int elType = 0; for (int i = 0; i < (charBuffer.length()); i++) { int ch = charBuffer.charAt(i); if (ch == '\n') { column = 1; line++; } else { column++; } if (((lastCh == '$') || (lastCh == '#')) && (ch == '{')) { elType = lastCh; if ((ttext.size()) > 0) { @java.lang.SuppressWarnings("unused") org.apache.jasper.compiler.Node unused = new org.apache.jasper.compiler.Node.TemplateText(ttext.toString(), startMark, current); ttext.reset(); startMark = new org.apache.jasper.compiler.Mark(ctxt, path, line, (column - 2)); } i++; boolean singleQ = false; boolean doubleQ = false; lastCh = 0; for (; ; i++) { if (i >= (charBuffer.length())) { throw new org.xml.sax.SAXParseException(org.apache.jasper.compiler.Localizer.getMessage("jsp.error.unterminated", (((char) (elType)) + "{")), locator); } ch = charBuffer.charAt(i); if (ch == '\n') { column = 1; line++; } else { column++; } if ((lastCh == '\\') && (singleQ || doubleQ)) { ttext.write(ch); lastCh = 0; continue; } if (ch == '}') { @java.lang.SuppressWarnings("unused") org.apache.jasper.compiler.Node unused = new org.apache.jasper.compiler.Node.ELExpression(((char) (elType)), ttext.toString(), startMark, current); ttext.reset(); startMark = new org.apache.jasper.compiler.Mark(ctxt, path, line, column); break; } if (ch == '"') doubleQ = !doubleQ; else if (ch == '\'') singleQ = !singleQ; ttext.write(ch); lastCh = ch; } } else if ((lastCh == '\\') && ((ch == '$') || (ch == '#'))) { if (pageInfo.isELIgnored()) { ttext.write('\\'); } ttext.write(ch); ch = 0; } else { if (((lastCh == '$') || (lastCh == '#')) || (lastCh == '\\')) { ttext.write(lastCh); } if (((ch != '$') && (ch != '#')) && (ch != '\\')) { ttext.write(ch); } } lastCh = ch; } if (((lastCh == '$') || (lastCh == '#')) || (lastCh == '\\')) { ttext.write(lastCh); } if ((ttext.size()) > 0) { @java.lang.SuppressWarnings("unused") org.apache.jasper.compiler.Node unused = new org.apache.jasper.compiler.Node.TemplateText(ttext.toString(), startMark, current); } } startMark = new org.apache.jasper.compiler.Mark(ctxt, path, locator.getLineNumber(), locator.getColumnNumber()); charBuffer = null; }
@java.lang.Override public javax.websocket.Session connectToServer(javax.websocket.Endpoint endpoint, javax.websocket.ClientEndpointConfig clientEndpointConfiguration, java.net.URI path) throws javax.websocket.DeploymentException { java.lang.String scheme = path.getScheme(); if (!(("http".equalsIgnoreCase(scheme)) || ("https".equalsIgnoreCase(scheme)))) { throw new javax.websocket.DeploymentException(org.apache.tomcat.websocket.WsWebSocketContainer.sm.getString("wsWebSocketContainer.pathWrongScheme", scheme)); } java.lang.String host = path.getHost(); if (host == null) { throw new javax.websocket.DeploymentException(org.apache.tomcat.websocket.WsWebSocketContainer.sm.getString("wsWebSocketContainer.pathNoHost")); } int port = path.getPort(); java.util.Map<java.lang.String, java.util.List<java.lang.String>> reqHeaders = createRequestHeaders(host, port); clientEndpointConfiguration.getConfigurator().beforeRequest(reqHeaders); java.nio.ByteBuffer request = createRequest(path.getRawPath(), reqHeaders); java.net.SocketAddress sa; if (port == (-1)) { if ("http".equalsIgnoreCase(scheme)) { sa = new java.net.InetSocketAddress(host, 80); } else { throw new javax.websocket.DeploymentException("TODO: HTTPS"); } } else { sa = new java.net.InetSocketAddress(host, port); } java.nio.channels.AsynchronousSocketChannel channel; try { channel = java.nio.channels.AsynchronousSocketChannel.open(); } catch (java.io.IOException ioe) { throw new javax.websocket.DeploymentException("TODO", ioe); } java.util.concurrent.Future<java.lang.Void> fConnect = channel.connect(sa); java.nio.ByteBuffer response; java.lang.String subProtocol; try { fConnect.get(); int toWrite = request.limit(); java.util.concurrent.Future<java.lang.Integer> fWrite = channel.write(request); java.lang.Integer thisWrite = fWrite.get(); toWrite -= thisWrite.intValue(); while (toWrite > 0) { fWrite = channel.write(request); thisWrite = fWrite.get(); toWrite -= thisWrite.intValue(); } response = java.nio.ByteBuffer.allocate(maxBinaryMessageBufferSize); javax.websocket.HandshakeResponse handshakeResponse = processResponse(response, channel); clientEndpointConfiguration.getConfigurator().afterResponse(handshakeResponse); java.util.List<java.lang.String> values = handshakeResponse.getHeaders().get(Constants.WS_PROTOCOL_HEADER_NAME); if ((values == null) || ((values.size()) == 0)) { subProtocol = null; } else if ((values.size()) == 1) { subProtocol = values.get(0); } else { throw new javax.websocket.DeploymentException(org.apache.tomcat.websocket.WsWebSocketContainer.sm.getString("Sec-WebSocket-Protocol")); } } catch (java.util.concurrent.ExecutionException | java.lang.InterruptedException e) { throw new javax.websocket.DeploymentException(org.apache.tomcat.websocket.WsWebSocketContainer.sm.getString("wsWebSocketContainer.httpRequestFailed"), e); } org.apache.tomcat.websocket.WsRemoteEndpointImplClient wsRemoteEndpointClient = new org.apache.tomcat.websocket.WsRemoteEndpointImplClient(channel); org.apache.tomcat.websocket.WsSession wsSession = new org.apache.tomcat.websocket.WsSession(endpoint, wsRemoteEndpointClient, this, null, subProtocol, java.util.Collections.EMPTY_MAP, false, clientEndpointConfiguration.getEncoders()); endpoint.onOpen(wsSession, clientEndpointConfiguration); registerSession(endpoint.getClass(), wsSession); @java.lang.SuppressWarnings("unused") org.apache.tomcat.websocket.WsFrameClient wsFrameClient = new org.apache.tomcat.websocket.WsFrameClient(response, channel, wsSession); return wsSession; }
@java.lang.Override public int doRead(org.apache.tomcat.util.buf.ByteChunk chunk, org.apache.coyote.Request req) throws java.io.IOException { if (endChunk) return -1; if (needCRLFParse) { needCRLFParse = false; parseCRLF(false); } if ((remaining) <= 0) { if (!(parseChunkHeader())) { throw new java.io.IOException("Invalid chunk header"); } if (endChunk) { parseEndChunk(); return -1; } } int result = 0; if ((pos) >= (lastValid)) { if ((readBytes()) < 0) { throw new java.io.IOException("Unexpected end of stream whilst reading request body"); } } if ((remaining) > ((lastValid) - (pos))) { result = (lastValid) - (pos); remaining = (remaining) - result; chunk.setBytes(buf, pos, result); pos = lastValid; } else { result = remaining; chunk.setBytes(buf, pos, remaining); pos = (pos) + (remaining); remaining = 0; if (((pos) + 1) >= (lastValid)) { needCRLFParse = true; } else { parseCRLF(false); } } return result; }
public void addServletMapping(java.lang.String urlPattern, java.lang.String servletName) { java.lang.String oldServletName = servletMappings.put(urlPattern, servletName); if (oldServletName != null) { throw new java.lang.IllegalArgumentException(org.apache.catalina.deploy.WebXml.sm.getString("webXml.duplicateServletMapping", oldServletName, servletName, urlPattern)); } servletMappingNames.add(servletName); }
public org.apache.catalina.tribes.Member[] excludeFromSet(org.apache.catalina.tribes.Member[] mbrs, org.apache.catalina.tribes.Member[] set) { java.util.ArrayList<org.apache.catalina.tribes.Member> result = new java.util.ArrayList<>(); for (int i = 0; i < (set.length); i++) { boolean include = true; for (int j = 0; (j < (mbrs.length)) && include; j++) if (mbrs[j].equals(set[i])) include = false; if (include) result.add(set[i]); } return result.toArray(new org.apache.catalina.tribes.Member[result.size()]); }
protected void checkHandlesTypes(org.apache.tomcat.util.bcel.classfile.JavaClass javaClass) { if ((typeInitializerMap.size()) == 0) return; java.lang.String className = javaClass.getClassName(); java.lang.Class<?> clazz = null; try { clazz = context.getLoader().getClassLoader().loadClass(className); } catch (java.lang.NoClassDefFoundError e) { org.apache.catalina.startup.ContextConfig.log.debug(org.apache.catalina.startup.ContextConfig.sm.getString("contextConfig.invalidSciHandlesTypes", className), e); return; } catch (java.lang.ClassNotFoundException e) { org.apache.catalina.startup.ContextConfig.log.warn(org.apache.catalina.startup.ContextConfig.sm.getString("contextConfig.invalidSciHandlesTypes", className), e); return; } if (clazz.isAnnotation()) { return; } boolean match = false; for (java.util.Map.Entry<java.lang.Class<?>, java.util.Set<javax.servlet.ServletContainerInitializer>> entry : typeInitializerMap.entrySet()) { if (entry.getKey().isAnnotation()) { org.apache.tomcat.util.bcel.classfile.AnnotationEntry[] annotationEntries = javaClass.getAnnotationEntries(); for (org.apache.tomcat.util.bcel.classfile.AnnotationEntry annotationEntry : annotationEntries) { if (entry.getKey().getName().equals(org.apache.catalina.startup.ContextConfig.getClassName(annotationEntry.getAnnotationType()))) { match = true; break; } } } else if (entry.getKey().isAssignableFrom(clazz)) { match = true; } if (match) { for (javax.servlet.ServletContainerInitializer sci : entry.getValue()) { initializerClassMap.get(sci).add(clazz); } } } }
protected void service(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse resp) throws java.io.IOException, javax.servlet.ServletException { java.lang.String method = req.getMethod(); if (method.equals(javax.servlet.http.HttpServlet.METHOD_GET)) { long lastModified = getLastModified(req); if (lastModified == (-1)) { doGet(req, resp); } else { long ifModifiedSince; try { ifModifiedSince = req.getDateHeader(javax.servlet.http.HttpServlet.HEADER_IFMODSINCE); } catch (java.lang.IllegalArgumentException iae) { ifModifiedSince = -1; } if (ifModifiedSince < ((lastModified / 1000) * 1000)) { maybeSetLastModified(resp, lastModified); doGet(req, resp); } else { resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED); } } } else if (method.equals(javax.servlet.http.HttpServlet.METHOD_HEAD)) { long lastModified = getLastModified(req); maybeSetLastModified(resp, lastModified); doHead(req, resp); } else if (method.equals(javax.servlet.http.HttpServlet.METHOD_POST)) { doPost(req, resp); } else if (method.equals(javax.servlet.http.HttpServlet.METHOD_PUT)) { doPut(req, resp); } else if (method.equals(javax.servlet.http.HttpServlet.METHOD_DELETE)) { doDelete(req, resp); } else if (method.equals(javax.servlet.http.HttpServlet.METHOD_OPTIONS)) { doOptions(req, resp); } else if (method.equals(javax.servlet.http.HttpServlet.METHOD_TRACE)) { doTrace(req, resp); } else { java.lang.String errMsg = javax.servlet.http.HttpServlet.lStrings.getString("http.method_not_implemented"); java.lang.Object[] errArgs = new java.lang.Object[1]; errArgs[0] = method; errMsg = java.text.MessageFormat.format(errMsg, errArgs); resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg); } }
protected void report(org.apache.catalina.connector.Request request, org.apache.catalina.connector.Response response, java.lang.Throwable throwable) { int statusCode = response.getStatus(); if (((statusCode < 400) || ((response.getContentWritten()) > 0)) || (!(response.isError()))) { return; } java.lang.String message = org.apache.catalina.util.RequestUtil.filter(response.getMessage()); if (message == null) { if (throwable != null) { java.lang.String exceptionMessage = throwable.getMessage(); if ((exceptionMessage != null) && ((exceptionMessage.length()) > 0)) { message = org.apache.catalina.util.RequestUtil.filter(new java.util.Scanner(exceptionMessage).nextLine()); } } if (message == null) { message = ""; } } java.lang.String report = null; try { report = sm.getString(("http." + statusCode)); } catch (java.lang.Throwable t) { org.apache.tomcat.util.ExceptionUtils.handleThrowable(t); } if (report == null) { return; } java.lang.StringBuilder sb = new java.lang.StringBuilder(); sb.append("<html><head><title>"); sb.append(org.apache.catalina.util.ServerInfo.getServerInfo()).append(" - "); sb.append(sm.getString("errorReportValve.errorReport")); sb.append("</title>"); sb.append("<style><!--"); sb.append(org.apache.catalina.util.TomcatCSS.TOMCAT_CSS); sb.append("--></style> "); sb.append("</head><body>"); sb.append("<h1>"); sb.append(sm.getString("errorReportValve.statusHeader", ("" + statusCode), message)).append("</h1>"); sb.append("<HR size=\"1\" noshade=\"noshade\">"); sb.append("<p><b>type</b> "); if (throwable != null) { sb.append(sm.getString("errorReportValve.exceptionReport")); } else { sb.append(sm.getString("errorReportValve.statusReport")); } sb.append("</p>"); sb.append("<p><b>"); sb.append(sm.getString("errorReportValve.message")); sb.append("</b> <u>"); sb.append(message).append("</u></p>"); sb.append("<p><b>"); sb.append(sm.getString("errorReportValve.description")); sb.append("</b> <u>"); sb.append(report); sb.append("</u></p>"); if (throwable != null) { java.lang.String stackTrace = getPartialServletStackTrace(throwable); sb.append("<p><b>"); sb.append(sm.getString("errorReportValve.exception")); sb.append("</b> <pre>"); sb.append(org.apache.catalina.util.RequestUtil.filter(stackTrace)); sb.append("</pre></p>"); int loops = 0; java.lang.Throwable rootCause = throwable.getCause(); while ((rootCause != null) && (loops < 10)) { stackTrace = getPartialServletStackTrace(rootCause); sb.append("<p><b>"); sb.append(sm.getString("errorReportValve.rootCause")); sb.append("</b> <pre>"); sb.append(org.apache.catalina.util.RequestUtil.filter(stackTrace)); sb.append("</pre></p>"); rootCause = rootCause.getCause(); loops++; } sb.append("<p><b>"); sb.append(sm.getString("errorReportValve.note")); sb.append("</b> <u>"); sb.append(sm.getString("errorReportValve.rootCauseInLogs", org.apache.catalina.util.ServerInfo.getServerInfo())); sb.append("</u></p>"); } sb.append("<HR size=\"1\" noshade=\"noshade\">"); sb.append("<h3>").append(org.apache.catalina.util.ServerInfo.getServerInfo()).append("</h3>"); sb.append("</body></html>"); try { try { response.setContentType("text/html"); response.setCharacterEncoding("utf-8"); } catch (java.lang.Throwable t) { org.apache.tomcat.util.ExceptionUtils.handleThrowable(t); if (container.getLogger().isDebugEnabled()) { container.getLogger().debug("status.setContentType", t); } } java.io.Writer writer = response.getReporter(); if (writer != null) { writer.write(sb.toString()); } } catch (java.io.IOException e) { } catch (java.lang.IllegalStateException e) { } }
public static void appendCookieValue(java.lang.StringBuffer headerBuf, int version, java.lang.String name, java.lang.String value, java.lang.String path, java.lang.String domain, java.lang.String comment, int maxAge, boolean isSecure, boolean isHttpOnly) { java.lang.StringBuffer buf = new java.lang.StringBuffer(); buf.append(name); buf.append("="); version = org.apache.tomcat.util.http.ServerCookie.maybeQuote2(version, buf, value, true); if (version == 1) { buf.append("; Version=1"); if (comment != null) { buf.append("; Comment="); org.apache.tomcat.util.http.ServerCookie.maybeQuote2(version, buf, comment); } } if (domain != null) { buf.append("; Domain="); org.apache.tomcat.util.http.ServerCookie.maybeQuote2(version, buf, domain); } if (maxAge >= 0) { if (version == 0) { buf.append("; Expires="); if (maxAge == 0) buf.append(org.apache.tomcat.util.http.ServerCookie.ancientDate); else synchronized(org.apache.tomcat.util.http.ServerCookie.OLD_COOKIE_FORMAT) { org.apache.tomcat.util.http.ServerCookie.OLD_COOKIE_FORMAT.format(new java.util.Date(((java.lang.System.currentTimeMillis()) + (maxAge * 1000L))), buf, new java.text.FieldPosition(0)); } } else { buf.append("; Max-Age="); buf.append(maxAge); } } if (path != null) { buf.append("; Path="); if (version == 0) { org.apache.tomcat.util.http.ServerCookie.maybeQuote2(version, buf, path); } else { org.apache.tomcat.util.http.ServerCookie.maybeQuote2(version, buf, path, org.apache.tomcat.util.http.ServerCookie.tspecials2NoSlash, false); } } if (isSecure) { buf.append("; Secure"); } if (isHttpOnly) { buf.append("; HttpOnly"); } headerBuf.append(buf); }
protected void clearReferences() { java.io.InputStream is = getResourceAsStream("org/apache/catalina/loader/JdbcLeakPrevention.class"); byte[] classBytes = new byte[4096]; int offset = 0; try { int read = is.read(classBytes, offset, (4096 - offset)); while (read > (-1)) { offset += read; read = is.read(classBytes, offset, (4096 - offset)); } java.lang.Class<?> lpClass = defineClass("org.apache.catalina.loader.JdbcLeakPrevention", classBytes, 0, offset); java.lang.Object obj = lpClass.newInstance(); obj.getClass().getMethod("clearJdbcDriverRegistrations").invoke(obj); } catch (java.lang.Exception e) { org.apache.catalina.loader.WebappClassLoader.log.warn(org.apache.catalina.loader.WebappClassLoader.sm.getString("webappClassLoader.jdbcRemoveFailed"), e); } finally { if (is != null) { try { is.close(); } catch (java.io.IOException ioe) { org.apache.catalina.loader.WebappClassLoader.log.warn(org.apache.catalina.loader.WebappClassLoader.sm.getString("webappClassLoader.jdbcRemoveStreamError"), ioe); } } } if (org.apache.catalina.loader.WebappClassLoader.ENABLE_CLEAR_REFERENCES) { java.util.Collection<org.apache.catalina.loader.ResourceEntry> values = ((java.util.HashMap<java.lang.String, org.apache.catalina.loader.ResourceEntry>) (resourceEntries.clone())).values(); java.util.Iterator<org.apache.catalina.loader.ResourceEntry> loadedClasses = values.iterator(); while (loadedClasses.hasNext()) { org.apache.catalina.loader.ResourceEntry entry = loadedClasses.next(); if ((entry.loadedClass) != null) { java.lang.Class<?> clazz = entry.loadedClass; try { java.lang.reflect.Field[] fields = clazz.getDeclaredFields(); for (int i = 0; i < (fields.length); i++) { if (java.lang.reflect.Modifier.isStatic(fields[i].getModifiers())) { fields[i].get(null); break; } } } catch (java.lang.Throwable t) { } } } loadedClasses = values.iterator(); while (loadedClasses.hasNext()) { org.apache.catalina.loader.ResourceEntry entry = loadedClasses.next(); if ((entry.loadedClass) != null) { java.lang.Class<?> clazz = entry.loadedClass; try { java.lang.reflect.Field[] fields = clazz.getDeclaredFields(); for (int i = 0; i < (fields.length); i++) { java.lang.reflect.Field field = fields[i]; int mods = field.getModifiers(); if ((field.getType().isPrimitive()) || ((field.getName().indexOf("$")) != (-1))) { continue; } if (java.lang.reflect.Modifier.isStatic(mods)) { try { field.setAccessible(true); if (java.lang.reflect.Modifier.isFinal(mods)) { if (!((field.getType().getName().startsWith("java.")) || (field.getType().getName().startsWith("javax.")))) { nullInstance(field.get(null)); } } else { field.set(null, null); if (org.apache.catalina.loader.WebappClassLoader.log.isDebugEnabled()) { org.apache.catalina.loader.WebappClassLoader.log.debug(((("Set field " + (field.getName())) + " to null in class ") + (clazz.getName()))); } } } catch (java.lang.Throwable t) { if (org.apache.catalina.loader.WebappClassLoader.log.isDebugEnabled()) { org.apache.catalina.loader.WebappClassLoader.log.debug(((("Could not set field " + (field.getName())) + " to null in class ") + (clazz.getName())), t); } } } } } catch (java.lang.Throwable t) { if (org.apache.catalina.loader.WebappClassLoader.log.isDebugEnabled()) { org.apache.catalina.loader.WebappClassLoader.log.debug(("Could not clean fields for class " + (clazz.getName())), t); } } } } } org.apache.tomcat.util.IntrospectionUtils.clear(); org.apache.catalina.loader.org.apache.juli.logging.LogFactory.release(this); java.beans.Introspector.flushCaches(); }
@java.lang.Override public void body(java.lang.String namespace, java.lang.String name, java.lang.String text) throws java.lang.Exception { org.apache.catalina.startup.TldConfig tldConfig = ((org.apache.catalina.startup.TldConfig) (digester.peek(((digester.getCount()) - 1)))); if (!(taglibUriRule.isDuplicateUri())) { tldConfig.addApplicationListener(text.trim()); } }
@java.lang.Override protected void flush(boolean explicit) throws java.io.IOException { long socketRef = socket.getSocket().longValue(); if ((outputBuffer.position()) > 0) { if ((socketRef != 0) && ((org.apache.tomcat.jni.Socket.sendbb(socketRef, 0, outputBuffer.position())) < 0)) { throw new java.io.IOException(sm.getString("ajpprocessor.failedsend")); } outputBuffer.clear(); } if ((explicit && (!(finished))) && (socketRef != 0)) { if ((org.apache.tomcat.jni.Socket.send(socketRef, flushMessageArray, 0, flushMessageArray.length)) < 0) { throw new java.io.IOException(sm.getString("ajpprocessor.failedflush")); } } }
@java.lang.Override protected void setRequestLineReadTimeout() throws java.io.IOException { if (((inputBuffer.lastValid) == 0) && ((socket.getLastAccess()) > (-1))) { int firstReadTimeout; if ((keepAliveTimeout) == (-1)) { firstReadTimeout = 0; } else { long queueTime = (java.lang.System.currentTimeMillis()) - (socket.getLastAccess()); if (queueTime >= (keepAliveTimeout)) { firstReadTimeout = 1; } else { firstReadTimeout = (keepAliveTimeout) - ((int) (queueTime)); } } socket.getSocket().setSoTimeout(firstReadTimeout); if (!(inputBuffer.fill(true))) { throw new java.io.EOFException(sm.getString("iib.eof.error")); } if ((endpoint.getSoTimeout()) > 0) { setSocketTimeout(endpoint.getSoTimeout()); } else { setSocketTimeout(0); } } }
protected java.security.Principal authenticate(java.lang.String username, javax.security.auth.callback.CallbackHandler callbackHandler) { try { javax.security.auth.login.LoginContext loginContext = null; if ((appName) == null) appName = "Tomcat"; if (org.apache.catalina.realm.JAASRealm.log.isDebugEnabled()) org.apache.catalina.realm.JAASRealm.log.debug(sm.getString("jaasRealm.beginLogin", username, appName)); java.lang.ClassLoader ocl = null; if (!(isUseContextClassLoader())) { ocl = java.lang.Thread.currentThread().getContextClassLoader(); java.lang.Thread.currentThread().setContextClassLoader(this.getClass().getClassLoader()); } try { javax.security.auth.login.Configuration config = getConfig(); loginContext = new javax.security.auth.login.LoginContext(appName, null, callbackHandler, config); } catch (java.lang.Throwable e) { org.apache.tomcat.util.ExceptionUtils.handleThrowable(e); org.apache.catalina.realm.JAASRealm.log.error(sm.getString("jaasRealm.unexpectedError"), e); return null; } finally { if (!(isUseContextClassLoader())) { java.lang.Thread.currentThread().setContextClassLoader(ocl); } } if (org.apache.catalina.realm.JAASRealm.log.isDebugEnabled()) org.apache.catalina.realm.JAASRealm.log.debug(("Login context created " + username)); javax.security.auth.Subject subject = null; try { loginContext.login(); subject = loginContext.getSubject(); if (subject == null) { if (org.apache.catalina.realm.JAASRealm.log.isDebugEnabled()) org.apache.catalina.realm.JAASRealm.log.debug(sm.getString("jaasRealm.failedLogin", username)); return null; } } catch (javax.security.auth.login.AccountExpiredException e) { if (org.apache.catalina.realm.JAASRealm.log.isDebugEnabled()) org.apache.catalina.realm.JAASRealm.log.debug(sm.getString("jaasRealm.accountExpired", username)); return null; } catch (javax.security.auth.login.CredentialExpiredException e) { if (org.apache.catalina.realm.JAASRealm.log.isDebugEnabled()) org.apache.catalina.realm.JAASRealm.log.debug(sm.getString("jaasRealm.credentialExpired", username)); return null; } catch (javax.security.auth.login.FailedLoginException e) { if (org.apache.catalina.realm.JAASRealm.log.isDebugEnabled()) org.apache.catalina.realm.JAASRealm.log.debug(sm.getString("jaasRealm.failedLogin", username)); return null; } catch (javax.security.auth.login.LoginException e) { org.apache.catalina.realm.JAASRealm.log.warn(sm.getString("jaasRealm.loginException", username), e); return null; } catch (java.lang.Throwable e) { org.apache.tomcat.util.ExceptionUtils.handleThrowable(e); org.apache.catalina.realm.JAASRealm.log.error(sm.getString("jaasRealm.unexpectedError"), e); return null; } if (org.apache.catalina.realm.JAASRealm.log.isDebugEnabled()) org.apache.catalina.realm.JAASRealm.log.debug(sm.getString("jaasRealm.loginContextCreated", username)); java.security.Principal principal = createPrincipal(username, subject, loginContext); if (principal == null) { org.apache.catalina.realm.JAASRealm.log.debug(sm.getString("jaasRealm.authenticateFailure", username)); return null; } if (org.apache.catalina.realm.JAASRealm.log.isDebugEnabled()) { org.apache.catalina.realm.JAASRealm.log.debug(sm.getString("jaasRealm.authenticateSuccess", username)); } return principal; } catch (java.lang.Throwable t) { org.apache.catalina.realm.JAASRealm.log.error("error ", t); return null; } }
public java.lang.Integer getKeySize() throws java.io.IOException { org.apache.tomcat.util.net.SSLSupport[] c_aux = ciphers; if ((session) == null) return null; java.lang.Integer keySize = ((java.lang.Integer) (session.getValue(org.apache.tomcat.util.net.jsse.KEY_SIZE_KEY))); if (keySize == null) { int size = 0; java.lang.String cipherSuite = session.getCipherSuite(); for (int i = 0; i < (c_aux.length); i++) { if ((cipherSuite.indexOf(c_aux[i].phrase)) >= 0) { size = c_aux[i].keySize; break; } } keySize = new java.lang.Integer(size); session.putValue(org.apache.tomcat.util.net.jsse.KEY_SIZE_KEY, keySize); } return keySize; }
@java.lang.Override public void lifecycleEvent(org.apache.catalina.LifecycleEvent event) { if (Lifecycle.BEFORE_INIT_EVENT.equals(event.getType())) { java.lang.ClassLoader loader = java.lang.Thread.currentThread().getContextClassLoader(); try { java.lang.Thread.currentThread().setContextClassLoader(java.lang.ClassLoader.getSystemClassLoader()); if (appContextProtection) { javax.imageio.ImageIO.getCacheDirectory(); } if (gcDaemonProtection) { try { java.lang.Class<?> clazz = java.lang.Class.forName("sun.misc.GC"); java.lang.reflect.Method method = clazz.getDeclaredMethod("requestLatency", new java.lang.Class[]{ long.class }); method.invoke(null, java.lang.Long.valueOf(3600000)); } catch (java.lang.ClassNotFoundException e) { if (java.lang.System.getProperty("java.vendor").startsWith("Sun")) { org.apache.catalina.core.JreMemoryLeakPreventionListener.log.error(org.apache.catalina.core.JreMemoryLeakPreventionListener.sm.getString("jreLeakListener.gcDaemonFail"), e); } else { org.apache.catalina.core.JreMemoryLeakPreventionListener.log.debug(org.apache.catalina.core.JreMemoryLeakPreventionListener.sm.getString("jreLeakListener.gcDaemonFail"), e); } } catch (java.lang.SecurityException e) { org.apache.catalina.core.JreMemoryLeakPreventionListener.log.error(org.apache.catalina.core.JreMemoryLeakPreventionListener.sm.getString("jreLeakListener.gcDaemonFail"), e); } catch (java.lang.NoSuchMethodException e) { org.apache.catalina.core.JreMemoryLeakPreventionListener.log.error(org.apache.catalina.core.JreMemoryLeakPreventionListener.sm.getString("jreLeakListener.gcDaemonFail"), e); } catch (java.lang.IllegalArgumentException e) { org.apache.catalina.core.JreMemoryLeakPreventionListener.log.error(org.apache.catalina.core.JreMemoryLeakPreventionListener.sm.getString("jreLeakListener.gcDaemonFail"), e); } catch (java.lang.IllegalAccessException e) { org.apache.catalina.core.JreMemoryLeakPreventionListener.log.error(org.apache.catalina.core.JreMemoryLeakPreventionListener.sm.getString("jreLeakListener.gcDaemonFail"), e); } catch (java.lang.reflect.InvocationTargetException e) { org.apache.catalina.core.JreMemoryLeakPreventionListener.log.error(org.apache.catalina.core.JreMemoryLeakPreventionListener.sm.getString("jreLeakListener.gcDaemonFail"), e); } } if (keepAliveProtection) { try { java.lang.Class.forName("sun.net.www.http.HttpClient"); } catch (java.lang.ClassNotFoundException e) { if (java.lang.System.getProperty("java.vendor").startsWith("Sun")) { org.apache.catalina.core.JreMemoryLeakPreventionListener.log.error(org.apache.catalina.core.JreMemoryLeakPreventionListener.sm.getString("jreLeakListener.keepAliveFail"), e); } else { org.apache.catalina.core.JreMemoryLeakPreventionListener.log.debug(org.apache.catalina.core.JreMemoryLeakPreventionListener.sm.getString("jreLeakListener.keepAliveFail"), e); } } } if (securityPolicyProtection) { try { java.lang.Class<?> policyClass = java.lang.Class.forName("javax.security.auth.Policy"); java.lang.reflect.Method method = policyClass.getMethod("getPolicy"); method.invoke(null); } catch (java.lang.ClassNotFoundException e) { } catch (java.lang.SecurityException e) { } catch (java.lang.NoSuchMethodException e) { org.apache.catalina.core.JreMemoryLeakPreventionListener.log.warn(org.apache.catalina.core.JreMemoryLeakPreventionListener.sm.getString("jreLeakListener.authPolicyFail"), e); } catch (java.lang.IllegalArgumentException e) { org.apache.catalina.core.JreMemoryLeakPreventionListener.log.warn(org.apache.catalina.core.JreMemoryLeakPreventionListener.sm.getString("jreLeakListener.authPolicyFail"), e); } catch (java.lang.IllegalAccessException e) { org.apache.catalina.core.JreMemoryLeakPreventionListener.log.warn(org.apache.catalina.core.JreMemoryLeakPreventionListener.sm.getString("jreLeakListener.authPolicyFail"), e); } catch (java.lang.reflect.InvocationTargetException e) { org.apache.catalina.core.JreMemoryLeakPreventionListener.log.warn(org.apache.catalina.core.JreMemoryLeakPreventionListener.sm.getString("jreLeakListener.authPolicyFail"), e); } } if (tokenPollerProtection) { java.security.Security.getProviders(); } if (urlCacheProtection) { try { java.net.URL url = new java.net.URL("jar:file://dummy.jar!/"); java.net.URLConnection uConn = url.openConnection(); uConn.setDefaultUseCaches(false); } catch (java.net.MalformedURLException e) { org.apache.catalina.core.JreMemoryLeakPreventionListener.log.error(org.apache.catalina.core.JreMemoryLeakPreventionListener.sm.getString("jreLeakListener.jarUrlConnCacheFail"), e); } catch (java.io.IOException e) { org.apache.catalina.core.JreMemoryLeakPreventionListener.log.error(org.apache.catalina.core.JreMemoryLeakPreventionListener.sm.getString("jreLeakListener.jarUrlConnCacheFail"), e); } } if (xmlParsingProtection) { javax.xml.parsers.DocumentBuilderFactory factory = javax.xml.parsers.DocumentBuilderFactory.newInstance(); try { factory.newDocumentBuilder(); } catch (javax.xml.parsers.ParserConfigurationException e) { org.apache.catalina.core.JreMemoryLeakPreventionListener.log.error(org.apache.catalina.core.JreMemoryLeakPreventionListener.sm.getString("jreLeakListener.xmlParseFail"), e); } } } finally { java.lang.Thread.currentThread().setContextClassLoader(loader); } } }
private void parseProperties(javax.servlet.http.HttpServletRequest req, org.apache.catalina.util.XMLWriter generatedXML, java.lang.String path, int type, java.util.Vector<java.lang.String> propertiesVector) { if ((path.toUpperCase().startsWith("/WEB-INF")) || (path.toUpperCase().startsWith("/META-INF"))) return; CacheEntry cacheEntry = resources.lookupCache(path); if (!(cacheEntry.exists)) { return; } generatedXML.writeElement(null, "response", XMLWriter.OPENING); java.lang.String status = new java.lang.String(((("HTTP/1.1 " + (org.apache.catalina.servlets.WebdavStatus.SC_OK)) + " ") + (org.apache.catalina.servlets.WebdavStatus.getStatusText(org.apache.catalina.servlets.WebdavStatus.SC_OK)))); generatedXML.writeElement(null, "href", XMLWriter.OPENING); java.lang.String href = (req.getContextPath()) + (req.getServletPath()); if ((href.endsWith("/")) && (path.startsWith("/"))) href += path.substring(1); else href += path; if (((cacheEntry.context) != null) && (!(href.endsWith("/")))) href += "/"; generatedXML.writeText(rewriteUrl(href)); generatedXML.writeElement(null, "href", XMLWriter.CLOSING); java.lang.String resourceName = path; int lastSlash = path.lastIndexOf('/'); if (lastSlash != (-1)) resourceName = resourceName.substring((lastSlash + 1)); switch (type) { case org.apache.catalina.servlets.WebdavServlet.FIND_ALL_PROP : generatedXML.writeElement(null, "propstat", XMLWriter.OPENING); generatedXML.writeElement(null, "prop", XMLWriter.OPENING); generatedXML.writeProperty(null, "creationdate", getISOCreationDate(cacheEntry.attributes.getCreation())); generatedXML.writeElement(null, "displayname", XMLWriter.OPENING); generatedXML.writeData(resourceName); generatedXML.writeElement(null, "displayname", XMLWriter.CLOSING); if ((cacheEntry.resource) != null) { generatedXML.writeProperty(null, "getlastmodified", org.apache.tomcat.util.http.FastHttpDateFormat.formatDate(cacheEntry.attributes.getLastModified(), null)); generatedXML.writeProperty(null, "getcontentlength", java.lang.String.valueOf(cacheEntry.attributes.getContentLength())); java.lang.String contentType = getServletContext().getMimeType(cacheEntry.name); if (contentType != null) { generatedXML.writeProperty(null, "getcontenttype", contentType); } generatedXML.writeProperty(null, "getetag", cacheEntry.attributes.getETag()); generatedXML.writeElement(null, "resourcetype", XMLWriter.NO_CONTENT); } else { generatedXML.writeElement(null, "resourcetype", XMLWriter.OPENING); generatedXML.writeElement(null, "collection", XMLWriter.NO_CONTENT); generatedXML.writeElement(null, "resourcetype", XMLWriter.CLOSING); } generatedXML.writeProperty(null, "source", ""); java.lang.String supportedLocks = "<lockentry>" + (((((("<lockscope><exclusive/></lockscope>" + "<locktype><write/></locktype>") + "</lockentry>") + "<lockentry>") + "<lockscope><shared/></lockscope>") + "<locktype><write/></locktype>") + "</lockentry>"); generatedXML.writeElement(null, "supportedlock", XMLWriter.OPENING); generatedXML.writeText(supportedLocks); generatedXML.writeElement(null, "supportedlock", XMLWriter.CLOSING); generateLockDiscovery(path, generatedXML); generatedXML.writeElement(null, "prop", XMLWriter.CLOSING); generatedXML.writeElement(null, "status", XMLWriter.OPENING); generatedXML.writeText(status); generatedXML.writeElement(null, "status", XMLWriter.CLOSING); generatedXML.writeElement(null, "propstat", XMLWriter.CLOSING); break; case org.apache.catalina.servlets.WebdavServlet.FIND_PROPERTY_NAMES : generatedXML.writeElement(null, "propstat", XMLWriter.OPENING); generatedXML.writeElement(null, "prop", XMLWriter.OPENING); generatedXML.writeElement(null, "creationdate", XMLWriter.NO_CONTENT); generatedXML.writeElement(null, "displayname", XMLWriter.NO_CONTENT); if ((cacheEntry.resource) != null) { generatedXML.writeElement(null, "getcontentlanguage", XMLWriter.NO_CONTENT); generatedXML.writeElement(null, "getcontentlength", XMLWriter.NO_CONTENT); generatedXML.writeElement(null, "getcontenttype", XMLWriter.NO_CONTENT); generatedXML.writeElement(null, "getetag", XMLWriter.NO_CONTENT); generatedXML.writeElement(null, "getlastmodified", XMLWriter.NO_CONTENT); } generatedXML.writeElement(null, "resourcetype", XMLWriter.NO_CONTENT); generatedXML.writeElement(null, "source", XMLWriter.NO_CONTENT); generatedXML.writeElement(null, "lockdiscovery", XMLWriter.NO_CONTENT); generatedXML.writeElement(null, "prop", XMLWriter.CLOSING); generatedXML.writeElement(null, "status", XMLWriter.OPENING); generatedXML.writeText(status); generatedXML.writeElement(null, "status", XMLWriter.CLOSING); generatedXML.writeElement(null, "propstat", XMLWriter.CLOSING); break; case org.apache.catalina.servlets.WebdavServlet.FIND_BY_PROPERTY : java.util.Vector<java.lang.String> propertiesNotFound = new java.util.Vector<java.lang.String>(); generatedXML.writeElement(null, "propstat", XMLWriter.OPENING); generatedXML.writeElement(null, "prop", XMLWriter.OPENING); java.util.Enumeration<java.lang.String> properties = propertiesVector.elements(); while (properties.hasMoreElements()) { java.lang.String property = properties.nextElement(); if (property.equals("creationdate")) { generatedXML.writeProperty(null, "creationdate", getISOCreationDate(cacheEntry.attributes.getCreation())); } else if (property.equals("displayname")) { generatedXML.writeElement(null, "displayname", XMLWriter.OPENING); generatedXML.writeData(resourceName); generatedXML.writeElement(null, "displayname", XMLWriter.CLOSING); } else if (property.equals("getcontentlanguage")) { if ((cacheEntry.context) != null) { propertiesNotFound.addElement(property); } else { generatedXML.writeElement(null, "getcontentlanguage", XMLWriter.NO_CONTENT); } } else if (property.equals("getcontentlength")) { if ((cacheEntry.context) != null) { propertiesNotFound.addElement(property); } else { generatedXML.writeProperty(null, "getcontentlength", java.lang.String.valueOf(cacheEntry.attributes.getContentLength())); } } else if (property.equals("getcontenttype")) { if ((cacheEntry.context) != null) { propertiesNotFound.addElement(property); } else { generatedXML.writeProperty(null, "getcontenttype", getServletContext().getMimeType(cacheEntry.name)); } } else if (property.equals("getetag")) { if ((cacheEntry.context) != null) { propertiesNotFound.addElement(property); } else { generatedXML.writeProperty(null, "getetag", cacheEntry.attributes.getETag()); } } else if (property.equals("getlastmodified")) { if ((cacheEntry.context) != null) { propertiesNotFound.addElement(property); } else { generatedXML.writeProperty(null, "getlastmodified", org.apache.tomcat.util.http.FastHttpDateFormat.formatDate(cacheEntry.attributes.getLastModified(), null)); } } else if (property.equals("resourcetype")) { if ((cacheEntry.context) != null) { generatedXML.writeElement(null, "resourcetype", XMLWriter.OPENING); generatedXML.writeElement(null, "collection", XMLWriter.NO_CONTENT); generatedXML.writeElement(null, "resourcetype", XMLWriter.CLOSING); } else { generatedXML.writeElement(null, "resourcetype", XMLWriter.NO_CONTENT); } } else if (property.equals("source")) { generatedXML.writeProperty(null, "source", ""); } else if (property.equals("supportedlock")) { supportedLocks = "<lockentry>" + (((((("<lockscope><exclusive/></lockscope>" + "<locktype><write/></locktype>") + "</lockentry>") + "<lockentry>") + "<lockscope><shared/></lockscope>") + "<locktype><write/></locktype>") + "</lockentry>"); generatedXML.writeElement(null, "supportedlock", XMLWriter.OPENING); generatedXML.writeText(supportedLocks); generatedXML.writeElement(null, "supportedlock", XMLWriter.CLOSING); } else if (property.equals("lockdiscovery")) { if (!(generateLockDiscovery(path, generatedXML))) propertiesNotFound.addElement(property); } else { propertiesNotFound.addElement(property); } } generatedXML.writeElement(null, "prop", XMLWriter.CLOSING); generatedXML.writeElement(null, "status", XMLWriter.OPENING); generatedXML.writeText(status); generatedXML.writeElement(null, "status", XMLWriter.CLOSING); generatedXML.writeElement(null, "propstat", XMLWriter.CLOSING); java.util.Enumeration<java.lang.String> propertiesNotFoundList = propertiesNotFound.elements(); if (propertiesNotFoundList.hasMoreElements()) { status = new java.lang.String(((("HTTP/1.1 " + (org.apache.catalina.servlets.WebdavStatus.SC_NOT_FOUND)) + " ") + (org.apache.catalina.servlets.WebdavStatus.getStatusText(org.apache.catalina.servlets.WebdavStatus.SC_NOT_FOUND)))); generatedXML.writeElement(null, "propstat", XMLWriter.OPENING); generatedXML.writeElement(null, "prop", XMLWriter.OPENING); while (propertiesNotFoundList.hasMoreElements()) { generatedXML.writeElement(null, propertiesNotFoundList.nextElement(), XMLWriter.NO_CONTENT); } generatedXML.writeElement(null, "prop", XMLWriter.CLOSING); generatedXML.writeElement(null, "status", XMLWriter.OPENING); generatedXML.writeText(status); generatedXML.writeElement(null, "status", XMLWriter.CLOSING); generatedXML.writeElement(null, "propstat", XMLWriter.CLOSING); } break; } generatedXML.writeElement(null, "response", XMLWriter.CLOSING); }
public void addEnvironment(org.apache.catalina.deploy.ContextEnvironment environment) { if (entries.containsKey(environment.getName())) { org.apache.catalina.deploy.ContextEnvironment ce = findEnvironment(environment.getName()); org.apache.catalina.deploy.ContextResourceLink rl = findResourceLink(environment.getName()); if (ce != null) { if (ce.getOverride()) { removeEnvironment(environment.getName()); } else { return; } } else if (rl != null) { org.apache.catalina.deploy.NamingResources global = org.apache.catalina.ServerFactory.getServer().getGlobalNamingResources(); if ((global.findEnvironment(rl.getGlobal())) != null) { if (global.findEnvironment(rl.getGlobal()).getOverride()) { removeResourceLink(environment.getName()); } else { return; } } } else { return; } } entries.put(environment.getName(), environment.getType()); synchronized(envs) { environment.setNamingResources(this); envs.put(environment.getName(), environment); } support.firePropertyChange("environment", null, environment); }
public java.lang.String getFileText(java.lang.String originalPath, boolean virtual) throws java.io.IOException { try { org.apache.catalina.ssi.SSIServletExternalResolver.ServletContextAndPath csAndP = getServletContextAndPath(originalPath, virtual); javax.servlet.ServletContext context = csAndP.getServletContext(); java.lang.String path = csAndP.getPath(); javax.servlet.RequestDispatcher rd = context.getRequestDispatcher(path); if (rd == null) { throw new java.io.IOException(("Couldn't get request dispatcher for path: " + path)); } org.apache.catalina.ssi.ByteArrayServletOutputStream basos = new org.apache.catalina.ssi.ByteArrayServletOutputStream(); org.apache.catalina.ssi.ResponseIncludeWrapper responseIncludeWrapper = new org.apache.catalina.ssi.ResponseIncludeWrapper(context, req, res, basos); rd.include(req, responseIncludeWrapper); responseIncludeWrapper.flushOutputStreamOrWriter(); byte[] bytes = basos.toByteArray(); java.lang.String retVal; if ((inputEncoding) == null) { retVal = new java.lang.String(bytes); } else { retVal = new java.lang.String(bytes, inputEncoding); } if ((retVal.equals("")) && (!(req.getMethod().equalsIgnoreCase(org.apache.coyote.http11.Constants.HEAD)))) { throw new java.io.IOException(("Couldn't find file: " + path)); } return retVal; } catch (javax.servlet.ServletException e) { throw new java.io.IOException(((("Couldn't include file: " + originalPath) + " because of ServletException: ") + (e.getMessage()))); } }
private void parseFileDirectives(org.apache.jasper.compiler.Node parent) throws org.apache.jasper.JasperException { reader.setSingleFile(true); reader.skipUntil("<"); while (reader.hasMoreInput()) { start = reader.mark(); if (reader.matches("%--")) { parseComment(parent); } else if (reader.matches("%@")) { parseDirective(parent); } else if (reader.matches("jsp:directive.")) { parseXMLDirective(parent); } reader.skipUntil("<"); } }
public synchronized boolean asyncDispatch() { boolean doDispatch = false; if ((state) == (org.apache.coyote.AsyncStateMachine.AsyncState.STARTING)) { state = org.apache.coyote.AsyncStateMachine.AsyncState.MUST_DISPATCH; } else if (((state) == (org.apache.coyote.AsyncStateMachine.AsyncState.STARTED)) || ((state) == (org.apache.coyote.AsyncStateMachine.AsyncState.TIMING_OUT))) { state = org.apache.coyote.AsyncStateMachine.AsyncState.DISPATCHING; doDispatch = true; } else { throw new java.lang.IllegalStateException(org.apache.coyote.AsyncStateMachine.sm.getString("asyncStateMachine.invalidAsyncState", "dispatchAsync()", state)); } return doDispatch; }
public boolean hasResourcePermission(org.apache.catalina.connector.Request request, org.apache.catalina.connector.Response response, org.apache.catalina.deploy.SecurityConstraint[] constraints, org.apache.catalina.Context context) throws java.io.IOException { if ((constraints == null) || ((constraints.length) == 0)) return true; org.apache.catalina.deploy.LoginConfig config = context.getLoginConfig(); if ((config != null) && (Constants.FORM_METHOD.equals(config.getAuthMethod()))) { java.lang.String requestURI = request.getRequestPathMB().toString(); java.lang.String loginPage = config.getLoginPage(); if (loginPage.equals(requestURI)) { if (org.apache.catalina.realm.RealmBase.log.isDebugEnabled()) org.apache.catalina.realm.RealmBase.log.debug((" Allow access to login page " + loginPage)); return true; } java.lang.String errorPage = config.getErrorPage(); if (errorPage.equals(requestURI)) { if (org.apache.catalina.realm.RealmBase.log.isDebugEnabled()) org.apache.catalina.realm.RealmBase.log.debug((" Allow access to error page " + errorPage)); return true; } if (requestURI.endsWith(Constants.FORM_ACTION)) { if (org.apache.catalina.realm.RealmBase.log.isDebugEnabled()) org.apache.catalina.realm.RealmBase.log.debug(" Allow access to username/password submission"); return true; } } java.security.Principal principal = request.getPrincipal(); boolean status = false; boolean denyfromall = false; for (int i = 0; i < (constraints.length); i++) { org.apache.catalina.deploy.SecurityConstraint constraint = constraints[i]; java.lang.String[] roles; if (constraint.getAllRoles()) { roles = request.getContext().findSecurityRoles(); } else { roles = constraint.findAuthRoles(); } if (roles == null) roles = new java.lang.String[0]; if (org.apache.catalina.realm.RealmBase.log.isDebugEnabled()) org.apache.catalina.realm.RealmBase.log.debug((" Checking roles " + principal)); if (((roles.length) == 0) && (!(constraint.getAllRoles()))) { if (constraint.getAuthConstraint()) { if (org.apache.catalina.realm.RealmBase.log.isDebugEnabled()) org.apache.catalina.realm.RealmBase.log.debug("No roles "); status = false; denyfromall = true; } else { if (org.apache.catalina.realm.RealmBase.log.isDebugEnabled()) org.apache.catalina.realm.RealmBase.log.debug("Passing all access"); return true; } } else if (principal == null) { if (org.apache.catalina.realm.RealmBase.log.isDebugEnabled()) org.apache.catalina.realm.RealmBase.log.debug(" No user authenticated, cannot grant access"); status = false; } else if (!denyfromall) { for (int j = 0; j < (roles.length); j++) { if (hasRole(principal, roles[j])) status = true; if (org.apache.catalina.realm.RealmBase.log.isDebugEnabled()) org.apache.catalina.realm.RealmBase.log.debug(("No role found: " + (roles[j]))); } } } if ((((allRolesMode) != (org.apache.catalina.realm.RealmBase.AllRolesMode.STRICT_MODE)) && (!status)) && (principal != null)) { if (org.apache.catalina.realm.RealmBase.log.isDebugEnabled()) { org.apache.catalina.realm.RealmBase.log.debug(("Checking for all roles mode: " + (allRolesMode))); } for (int i = 0; i < (constraints.length); i++) { org.apache.catalina.deploy.SecurityConstraint constraint = constraints[i]; java.lang.String[] roles; if (constraint.getAllRoles()) { if ((allRolesMode) == (org.apache.catalina.realm.RealmBase.AllRolesMode.AUTH_ONLY_MODE)) { if (org.apache.catalina.realm.RealmBase.log.isDebugEnabled()) { org.apache.catalina.realm.RealmBase.log.debug("Granting access for role-name=*, auth-only"); } status = true; break; } roles = request.getContext().findSecurityRoles(); if (((roles.length) == 0) && ((allRolesMode) == (org.apache.catalina.realm.RealmBase.AllRolesMode.STRICT_AUTH_ONLY_MODE))) { if (org.apache.catalina.realm.RealmBase.log.isDebugEnabled()) { org.apache.catalina.realm.RealmBase.log.debug("Granting access for role-name=*, strict auth-only"); } status = true; break; } } } } if (!status) { response.sendError(HttpServletResponse.SC_FORBIDDEN, org.apache.catalina.realm.RealmBase.sm.getString("realmBase.forbidden")); } return status; }
public void addElement(java.lang.StringBuffer buf, java.util.Date date, org.apache.catalina.connector.Request request, org.apache.catalina.connector.Response response, long time) { java.lang.String value = request.getHeader(header); if (value == null) { buf.append('-'); } else { buf.append(value); } }
@java.lang.Override public java.lang.String toString() { java.lang.StringBuilder buf = new java.lang.StringBuilder("org.apache.catalina.tribes.membership.MemberImpl["); buf.append(getName()).append(","); buf.append(getHostname()).append(","); buf.append(port).append(", alive="); buf.append(memberAliveTime).append(", "); buf.append("securePort=").append(securePort).append(", "); buf.append("UDP Port=").append(udpPort).append(", "); buf.append("id=").append(org.apache.catalina.tribes.membership.MemberImpl.bToS(this.uniqueId)).append(", "); buf.append("payload=").append(org.apache.catalina.tribes.membership.MemberImpl.bToS(this.payload, 8)).append(", "); buf.append("command=").append(org.apache.catalina.tribes.membership.MemberImpl.bToS(this.command, 8)).append(", "); buf.append("domain=").append(org.apache.catalina.tribes.membership.MemberImpl.bToS(this.domain, 8)).append(", "); buf.append("]"); return buf.toString(); }
@java.lang.Override public javax.servlet.descriptor.JspConfigDescriptor getJspConfigDescriptor() { javax.servlet.descriptor.JspConfigDescriptor jspConfigDescriptor = context.getJspConfigDescriptor(); if ((jspConfigDescriptor.getJspPropertyGroups().isEmpty()) && (jspConfigDescriptor.getTaglibs().isEmpty())) { return null; } else { return jspConfigDescriptor; } }
public java.util.List<java.lang.String> clearJdbcDriverRegistrations() throws java.sql.SQLException { java.util.List<java.lang.String> driverNames = new java.util.ArrayList<java.lang.String>(); java.util.HashSet<java.sql.Driver> originalDrivers = new java.util.HashSet<java.sql.Driver>(); java.util.Enumeration<java.sql.Driver> drivers = java.sql.DriverManager.getDrivers(); while (drivers.hasMoreElements()) { originalDrivers.add(drivers.nextElement()); } drivers = java.sql.DriverManager.getDrivers(); while (drivers.hasMoreElements()) { java.sql.Driver driver = drivers.nextElement(); if ((driver.getClass().getClassLoader()) != (this.getClass().getClassLoader())) { continue; } if (originalDrivers.contains(driver)) { driverNames.add(driver.getClass().getCanonicalName()); } java.sql.DriverManager.deregisterDriver(driver); } return driverNames; }
@java.lang.Override public java.lang.Class<?> getType(javax.el.ELContext context, java.lang.Object base, java.lang.Object property) throws java.lang.NullPointerException, javax.el.ELException, javax.el.PropertyNotFoundException { context.setPropertyResolved(false); int sz = this.size; java.lang.Class<?> type; for (int i = 0; i < sz; i++) { type = this.resolvers[i].getType(context, base, property); if (context.isPropertyResolved()) { return type; } } return null; }
@java.lang.Override protected void doGet(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse resp) throws java.io.IOException, javax.servlet.ServletException { java.lang.String key; java.lang.String subProtocol = null; java.util.List<java.lang.String> extensions = java.util.Collections.emptyList(); if (!(headerContainsToken(req, "upgrade", "websocket"))) { resp.sendError(HttpServletResponse.SC_BAD_REQUEST); return; } if (!(headerContainsToken(req, "connection", "upgrade"))) { resp.sendError(HttpServletResponse.SC_BAD_REQUEST); return; } if (!(headerContainsToken(req, "sec-websocket-version", "13"))) { resp.setStatus(426); resp.setHeader("Sec-WebSocket-Version", "13"); return; } key = req.getHeader("Sec-WebSocket-Key"); if (key == null) { resp.sendError(HttpServletResponse.SC_BAD_REQUEST); return; } java.lang.String origin = req.getHeader("Origin"); if (!(verifyOrigin(origin))) { resp.sendError(HttpServletResponse.SC_FORBIDDEN); return; } java.util.List<java.lang.String> subProtocols = getTokensFromHeader(req, "Sec-WebSocket-Protocol-Client"); if (!(subProtocols.isEmpty())) { subProtocol = selectSubProtocol(subProtocols); } resp.setHeader("Upgrade", "websocket"); resp.setHeader("Connection", "upgrade"); resp.setHeader("Sec-WebSocket-Accept", getWebSocketAccept(key)); if (subProtocol != null) { resp.setHeader("Sec-WebSocket-Protocol", subProtocol); } if (!(extensions.isEmpty())) { } org.apache.catalina.websocket.WsHttpServletRequestWrapper wrapper = new org.apache.catalina.websocket.WsHttpServletRequestWrapper(req); org.apache.catalina.websocket.StreamInbound inbound = createWebSocketInbound(subProtocol, wrapper); wrapper.invalidate(); javax.servlet.ServletRequest inner = req; while (inner instanceof javax.servlet.ServletRequestWrapper) { inner = ((javax.servlet.ServletRequestWrapper) (inner)).getRequest(); } if (inner instanceof org.apache.catalina.connector.RequestFacade) { ((org.apache.catalina.connector.RequestFacade) (inner)).doUpgrade(inbound); } else { resp.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, org.apache.catalina.websocket.WebSocketServlet.sm.getString("servlet.reqUpgradeFail")); } }
public int doRead(org.apache.tomcat.util.buf.ByteChunk chunk, org.apache.coyote.http11.filters.org.apache.coyote.Request request) throws java.io.IOException { int writeLength = 0; if (((chunk.getLimit()) > 0) && ((chunk.getLimit()) < (input.getLength()))) { writeLength = chunk.getLimit(); } else { writeLength = input.getLength(); } if ((input.getOffset()) >= (input.getEnd())) return -1; input.substract(chunk.getBuffer(), 0, writeLength); chunk.setOffset(0); chunk.setEnd(writeLength); return writeLength; }
public Interval(final double lower, final double upper) { if (upper < lower) { throw new org.apache.commons.math4.exception.NumberIsTooSmallException(org.apache.commons.math4.exception.util.LocalizedFormats.ENDPOINTS_NOT_AN_INTERVAL, upper, lower, true); } this.lower = lower; this.upper = upper; }
public double cumulativeProbability(double x) { if (x < (min)) { return 0.0; } else if (x >= (max)) { return 1.0; } final int binIndex = findBin(x); final double pBminus = pBminus(binIndex); final double pB = pB(binIndex); final org.apache.commons.math4.distribution.RealDistribution kernel = k(x); if (kernel instanceof org.apache.commons.math4.distribution.ConstantRealDistribution) { return pBminus + pB; } final double[] binBounds = getUpperBounds(); final double kB = kB(binIndex); final double lower = (binIndex == 0) ? min : binBounds[(binIndex - 1)]; final double withinBinCum = ((kernel.cumulativeProbability(x)) - (kernel.cumulativeProbability(lower))) / kB; return pBminus + (pB * withinBinCum); }
@java.lang.Override public double logProbability(int x) { if ((numberOfTrials) == 0) { return x == 0 ? 0.0 : java.lang.Double.NEGATIVE_INFINITY; } double ret; if ((x < 0) || (x > (numberOfTrials))) { ret = java.lang.Double.NEGATIVE_INFINITY; } else { ret = org.apache.commons.math3.distribution.SaddlePointExpansion.logBinomialProbability(x, numberOfTrials, probabilityOfSuccess, (1.0 - (probabilityOfSuccess))); } return ret; }
private void insertionSort(final double[] work, final int begin, final int end) { for (int j = begin + 1; j < end; j++) { final double saved = work[j]; int i = j - 1; while (i >= begin) { final double wi = work[i]; if ((saved < wi) || (java.lang.Double.isNaN(wi))) { work[(i + 1)] = wi; i--; } else { break; } } work[(i + 1)] = saved; } }
private void checkSufficientData(final org.apache.commons.math3.linear.RealMatrix matrix) throws org.apache.commons.math3.exception.MathIllegalArgumentException { int nRows = matrix.getRowDimension(); int nCols = matrix.getColumnDimension(); if ((nRows < 2) || (nCols < 2)) { throw new org.apache.commons.math3.exception.MathIllegalArgumentException(org.apache.commons.math3.exception.util.LocalizedFormats.INSUFFICIENT_ROWS_AND_COLUMNS, nRows, nCols); } }
private static org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> buildBoundary(final double xMin, final double xMax, final double yMin, final double yMax, final double zMin, final double zMax, final double tolerance) { if (((xMin >= (xMax - tolerance)) || (yMin >= (yMax - tolerance))) || (zMin >= (zMax - tolerance))) { return new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>(java.lang.Boolean.FALSE); } final org.apache.commons.math3.geometry.euclidean.threed.Plane pxMin = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(xMin, 0, 0), Vector3D.MINUS_I, tolerance); final org.apache.commons.math3.geometry.euclidean.threed.Plane pxMax = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(xMax, 0, 0), Vector3D.PLUS_I, tolerance); final org.apache.commons.math3.geometry.euclidean.threed.Plane pyMin = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0, yMin, 0), Vector3D.MINUS_J, tolerance); final org.apache.commons.math3.geometry.euclidean.threed.Plane pyMax = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0, yMax, 0), Vector3D.PLUS_J, tolerance); final org.apache.commons.math3.geometry.euclidean.threed.Plane pzMin = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0, 0, zMin), Vector3D.MINUS_K, tolerance); final org.apache.commons.math3.geometry.euclidean.threed.Plane pzMax = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0, 0, zMax), Vector3D.PLUS_K, tolerance); @java.lang.SuppressWarnings("unchecked") final org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> boundary = new org.apache.commons.math3.geometry.partitioning.RegionFactory<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>().buildConvex(pxMin, pxMax, pyMin, pyMax, pzMin, pzMax); return boundary.getTree(false); }
public UniformIntegerDistribution(org.apache.commons.math3.random.RandomGenerator rng, int lower, int upper) throws org.apache.commons.math3.exception.NumberIsTooLargeException { super(rng); if (lower >= upper) { throw new org.apache.commons.math3.exception.NumberIsTooLargeException(org.apache.commons.math3.exception.util.LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND, lower, upper, false); } this.lower = lower; this.upper = upper; }
public boolean evaluateStep(final org.apache.commons.math4.ode.sampling.StepInterpolator interpolator) throws org.apache.commons.math4.exception.MaxCountExceededException, org.apache.commons.math4.exception.NoBracketingException { try { forward = interpolator.isForward(); final double t1 = interpolator.getCurrentTime(); final double dt = t1 - (t0); if ((org.apache.commons.math4.util.FastMath.abs(dt)) < (convergence)) { return false; } final int n = org.apache.commons.math4.util.FastMath.max(1, ((int) (org.apache.commons.math4.util.FastMath.ceil(((org.apache.commons.math4.util.FastMath.abs(dt)) / (maxCheckInterval)))))); final double h = dt / n; final org.apache.commons.math4.analysis.UnivariateFunction f = new org.apache.commons.math4.analysis.UnivariateFunction() { public double value(final double t) throws org.apache.commons.math4.ode.events.EventState.LocalMaxCountExceededException { try { interpolator.setInterpolatedTime(t); return handler.g(t, getCompleteState(interpolator)); } catch (org.apache.commons.math4.exception.MaxCountExceededException mcee) { throw new org.apache.commons.math4.ode.events.EventState.LocalMaxCountExceededException(mcee); } } }; double ta = t0; double ga = g0; for (int i = 0; i < n; ++i) { final double tb = (t0) + ((i + 1) * h); interpolator.setInterpolatedTime(tb); final double gb = handler.g(tb, getCompleteState(interpolator)); if ((g0Positive) ^ (gb >= 0)) { increasing = gb >= ga; final double root; if ((solver) instanceof org.apache.commons.math4.analysis.solvers.BracketedUnivariateSolver<?>) { @java.lang.SuppressWarnings("unchecked") org.apache.commons.math4.analysis.solvers.BracketedUnivariateSolver<org.apache.commons.math4.analysis.UnivariateFunction> bracketing = ((org.apache.commons.math4.analysis.solvers.BracketedUnivariateSolver<org.apache.commons.math4.analysis.UnivariateFunction>) (solver)); root = (forward) ? bracketing.solve(maxIterationCount, f, ta, tb, AllowedSolution.RIGHT_SIDE) : bracketing.solve(maxIterationCount, f, tb, ta, AllowedSolution.LEFT_SIDE); } else { final double baseRoot = (forward) ? solver.solve(maxIterationCount, f, ta, tb) : solver.solve(maxIterationCount, f, tb, ta); final int remainingEval = (maxIterationCount) - (solver.getEvaluations()); org.apache.commons.math4.analysis.solvers.BracketedUnivariateSolver<org.apache.commons.math4.analysis.UnivariateFunction> bracketing = new org.apache.commons.math4.analysis.solvers.PegasusSolver(solver.getRelativeAccuracy(), solver.getAbsoluteAccuracy()); root = (forward) ? org.apache.commons.math4.analysis.solvers.UnivariateSolverUtils.forceSide(remainingEval, f, bracketing, baseRoot, ta, tb, AllowedSolution.RIGHT_SIDE) : org.apache.commons.math4.analysis.solvers.UnivariateSolverUtils.forceSide(remainingEval, f, bracketing, baseRoot, tb, ta, AllowedSolution.LEFT_SIDE); } if (((!(java.lang.Double.isNaN(previousEventTime))) && ((org.apache.commons.math4.util.FastMath.abs((root - ta))) <= (convergence))) && ((org.apache.commons.math4.util.FastMath.abs((root - (previousEventTime)))) <= (convergence))) { do { ta = (forward) ? ta + (convergence) : ta - (convergence); ga = f.value(ta); } while (((g0Positive) ^ (ga >= 0)) && ((forward) ^ (ta >= tb)) ); if ((forward) ^ (ta >= tb)) { --i; } else { pendingEventTime = root; pendingEvent = true; return true; } } else if ((java.lang.Double.isNaN(previousEventTime)) || ((org.apache.commons.math4.util.FastMath.abs(((previousEventTime) - root))) > (convergence))) { pendingEventTime = root; pendingEvent = true; return true; } else { ta = tb; ga = gb; } } else { ta = tb; ga = gb; } } pendingEvent = false; pendingEventTime = java.lang.Double.NaN; return false; } catch (org.apache.commons.math4.ode.events.EventState.LocalMaxCountExceededException lmcee) { throw lmcee.getException(); } }
private boolean isQualifiedForInterpolation(java.lang.reflect.Field field, java.lang.Class<?> fieldType) { if ((java.util.Map.class.equals(fieldType)) && ("locations".equals(field.getName()))) { return false; } java.lang.Boolean primitive = org.apache.maven.model.interpolation.StringSearchModelInterpolator.fieldIsPrimitiveByClass.get(fieldType); if (primitive == null) { primitive = fieldType.isPrimitive(); org.apache.maven.model.interpolation.StringSearchModelInterpolator.fieldIsPrimitiveByClass.put(fieldType, primitive); } if (primitive) { return false; } return !("parent".equals(field.getName())); }
java.lang.String extractPath(final java.net.URL url) throws java.io.UnsupportedEncodingException { java.lang.String urlPath = url.getPath(); if (urlPath.startsWith("jar:")) { urlPath = urlPath.substring(4); } if (urlPath.startsWith("file:")) { urlPath = urlPath.substring(5); } if ((urlPath.indexOf('!')) > 0) { urlPath = urlPath.substring(0, urlPath.indexOf('!')); } final java.lang.String protocol = url.getProtocol(); final java.util.List<java.lang.String> neverDecode = java.util.Arrays.asList(org.apache.logging.log4j.core.config.plugins.util.ResolverUtil.VFSZIP, org.apache.logging.log4j.core.config.plugins.util.ResolverUtil.BUNDLE_RESOURCE); if (neverDecode.contains(protocol)) { return urlPath; } if (new java.io.File(urlPath).exists()) { return urlPath; } urlPath = java.net.URLDecoder.decode(urlPath, Constants.UTF_8.name()); return urlPath; }
@java.lang.SuppressWarnings("unchecked") protected void doConfigure() { boolean setRoot = false; boolean setLoggers = false; for (final org.apache.logging.log4j.core.config.Node child : rootNode.getChildren()) { createConfiguration(child, null); if ((child.getObject()) == null) { continue; } if (child.getName().equalsIgnoreCase("properties")) { if ((tempLookup) == (subst.getVariableResolver())) { subst.setVariableResolver(((org.apache.logging.log4j.core.lookup.StrLookup) (child.getObject()))); } else { org.apache.logging.log4j.core.config.BaseConfiguration.LOGGER.error("Properties declaration must be the first element in the configuration"); } continue; } else if ((tempLookup) == (subst.getVariableResolver())) { final java.util.Map<java.lang.String, java.lang.String> map = ((java.util.Map<java.lang.String, java.lang.String>) (componentMap.get(org.apache.logging.log4j.core.config.CONTEXT_PROPERTIES))); final org.apache.logging.log4j.core.lookup.StrLookup lookup = (map == null) ? null : new org.apache.logging.log4j.core.lookup.MapLookup(map); subst.setVariableResolver(new org.apache.logging.log4j.core.lookup.Interpolator(lookup)); } if (child.getName().equalsIgnoreCase("appenders")) { appenders = ((java.util.concurrent.ConcurrentMap<java.lang.String, org.apache.logging.log4j.core.Appender<?>>) (child.getObject())); } else if ((child.getObject()) instanceof org.apache.logging.log4j.core.Filter) { addFilter(((org.apache.logging.log4j.core.Filter) (child.getObject()))); } else if (child.getName().equalsIgnoreCase("loggers")) { final org.apache.logging.log4j.core.config.Loggers l = ((org.apache.logging.log4j.core.config.Loggers) (child.getObject())); loggers = l.getMap(); setLoggers = true; if ((l.getRoot()) != null) { root = l.getRoot(); setRoot = true; } } else { org.apache.logging.log4j.core.config.BaseConfiguration.LOGGER.error((((("Unknown object \"" + (child.getName())) + "\" of type ") + (child.getObject().getClass().getName())) + " is ignored")); } } if (!setLoggers) { org.apache.logging.log4j.core.config.BaseConfiguration.LOGGER.warn("No Loggers were configured, using default. Is the Loggers element missing?"); setToDefault(); return; } else if (!setRoot) { org.apache.logging.log4j.core.config.BaseConfiguration.LOGGER.warn("No Root logger was configured, using default"); setToDefault(); return; } for (final java.util.Map.Entry<java.lang.String, org.apache.logging.log4j.core.config.LoggerConfig> entry : loggers.entrySet()) { final org.apache.logging.log4j.core.config.LoggerConfig l = entry.getValue(); for (final org.apache.logging.log4j.core.config.AppenderRef ref : l.getAppenderRefs()) { final org.apache.logging.log4j.core.Appender app = appenders.get(ref.getRef()); if (app != null) { l.addAppender(app, ref.getLevel(), ref.getFilter()); } else { org.apache.logging.log4j.core.config.BaseConfiguration.LOGGER.error(((("Unable to locate appender " + (ref.getRef())) + " for logger ") + (l.getName()))); } } } setParents(); }
public void processDelta(org.eclipse.jdt.core.IJavaElementDelta delta) throws org.eclipse.jdt.core.JavaModelException { int kind = delta.getKind(); int flags = delta.getFlags(); org.eclipse.jdt.core.IJavaElement element = delta.getElement(); if (((element.getElementType()) != (org.eclipse.jdt.core.IJavaElement.JAVA_MODEL)) && ((element.getElementType()) != (org.eclipse.jdt.core.IJavaElement.JAVA_PROJECT))) { org.eclipse.jdt.core.IJavaProject proj = element.getJavaProject(); if ((proj == null) || (!(proj.getProject().isOpen()))) return; } if ((!(fIsFlatLayout)) && ((element.getElementType()) == (org.eclipse.jdt.core.IJavaElement.PACKAGE_FRAGMENT))) { fPackageFragmentProvider.processDelta(delta); if (processResourceDeltas(delta.getResourceDeltas(), element)) return; org.eclipse.jdt.core.IJavaElementDelta[] affectedChildren = delta.getAffectedChildren(); processAffectedChildren(affectedChildren); return; } if ((!(getProvideWorkingCopy())) && (isWorkingCopy(element))) return; if (((element != null) && ((element.getElementType()) == (org.eclipse.jdt.core.IJavaElement.COMPILATION_UNIT))) && (!(isOnClassPath(((org.eclipse.jdt.core.ICompilationUnit) (element)))))) return; if (((flags & (org.eclipse.jdt.core.IJavaElementDelta.F_CLOSED)) != 0) || ((flags & (org.eclipse.jdt.core.IJavaElementDelta.F_OPENED)) != 0)) { postRefresh(element); return; } if (kind == (org.eclipse.jdt.core.IJavaElementDelta.REMOVED)) { if (isWorkingCopy(element)) { refreshWorkingCopy(((org.eclipse.jdt.core.IWorkingCopy) (element))); return; } java.lang.Object parent = internalGetParent(element); postRemove(element); if (parent instanceof org.eclipse.jdt.core.IPackageFragment) postUpdateIcon(((org.eclipse.jdt.core.IPackageFragment) (parent))); if (isPackageFragmentEmpty(element.getParent())) { if ((fViewer.testFindItem(parent)) != null) postRefresh(internalGetParent(parent)); } return; } if (kind == (org.eclipse.jdt.core.IJavaElementDelta.ADDED)) { if (isWorkingCopy(element)) { refreshWorkingCopy(((org.eclipse.jdt.core.IWorkingCopy) (element))); return; } java.lang.Object parent = internalGetParent(element); if (parent instanceof org.eclipse.jdt.core.IPackageFragment) { java.lang.Object grandparent = internalGetParent(parent); if (parent.equals(fInput)) { postRefresh(parent); } else { if ((fViewer.testFindItem(parent)) == null) postRefresh(grandparent); else { postRefresh(parent); } } return; } else { postAdd(parent, element); } } if (element instanceof org.eclipse.jdt.core.ICompilationUnit) { if (getProvideWorkingCopy()) { org.eclipse.jdt.core.IJavaElement original = ((org.eclipse.jdt.core.IWorkingCopy) (element)).getOriginalElement(); if (original != null) element = original; } if (kind == (org.eclipse.jdt.core.IJavaElementDelta.CHANGED)) { postRefresh(element); updateSelection(delta); return; } } if ((element instanceof org.eclipse.jdt.core.ICompilationUnit) || (element instanceof org.eclipse.jdt.core.IClassFile)) return; if ((element instanceof org.eclipse.jdt.core.IPackageFragmentRoot) && ((flags & (org.eclipse.jdt.core.IJavaElementDelta.F_ARCHIVE_CONTENT_CHANGED)) != 0)) { postRefresh(element); return; } if ((element instanceof org.eclipse.jdt.core.IPackageFragmentRoot) && (((flags & (org.eclipse.jdt.core.IJavaElementDelta.F_SOURCEATTACHED)) != 0) || ((flags & (org.eclipse.jdt.core.IJavaElementDelta.F_SOURCEDETACHED)) != 0))) postUpdateIcon(element); if (isClassPathChange(delta)) { postRefresh(element.getJavaProject()); return; } if (processResourceDeltas(delta.getResourceDeltas(), element)) return; handleAffectedChildren(delta, element); }
public org.eclipse.swt.widgets.Control createContent(org.eclipse.swt.widgets.Composite parent) { org.eclipse.core.runtime.Assert.isTrue(((fComposite) == null), "Content must only be created once."); boolean rtl = ((getTextEditor().getSite().getShell().getStyle()) & (org.eclipse.swt.SWT.RIGHT_TO_LEFT)) != 0; fComposite = new org.eclipse.swt.widgets.Composite(parent, (rtl ? org.eclipse.swt.SWT.RIGHT_TO_LEFT : org.eclipse.swt.SWT.NONE)); org.eclipse.swt.layout.GridData data = new org.eclipse.swt.layout.GridData(org.eclipse.swt.SWT.FILL, org.eclipse.swt.SWT.TOP, true, false); fComposite.setLayoutData(data); org.eclipse.swt.layout.GridLayout gridLayout = new org.eclipse.swt.layout.GridLayout(1, false); gridLayout.marginWidth = 0; gridLayout.marginHeight = 0; gridLayout.verticalSpacing = 0; gridLayout.horizontalSpacing = 0; fComposite.setLayout(gridLayout); fDisplayFocusListener = new org.eclipse.swt.widgets.Listener() { public void handleEvent(org.eclipse.swt.widgets.Event event) { if (isBreadcrumbEvent(event)) { if (fHasFocus) return; fIsActive = true; focusGained(); } else { if (!(fIsActive)) return; boolean hasTextFocus = fTextViewer.getTextWidget().isFocusControl(); if (hasTextFocus) { fIsActive = false; } if (!(fHasFocus)) return; focusLost(); } } }; org.eclipse.swt.widgets.Display.getCurrent().addFilter(SWT.FocusIn, fDisplayFocusListener); fBreadcrumbViewer = createViewer(fComposite); fBreadcrumbViewer.getControl().setBackground(org.eclipse.swt.widgets.Display.getDefault().getSystemColor(SWT.COLOR_WHITE)); fBreadcrumbViewer.addDoubleClickListener(new org.eclipse.jface.viewers.IDoubleClickListener() { public void doubleClick(org.eclipse.jface.viewers.DoubleClickEvent event) { java.lang.Object element = ((org.eclipse.jface.viewers.IStructuredSelection) (event.getSelection())).getFirstElement(); if (element == null) return; org.eclipse.jdt.internal.ui.javaeditor.breadcrumb.BreadcrumbItem item = ((org.eclipse.jdt.internal.ui.javaeditor.breadcrumb.BreadcrumbItem) (fBreadcrumbViewer.doFindItem(element))); if (item == null) return; int index = fBreadcrumbViewer.getIndexOfItem(item); org.eclipse.jdt.internal.ui.javaeditor.breadcrumb.BreadcrumbItem parentItem = fBreadcrumbViewer.getItem((index - 1)); parentItem.openDropDownMenu(); } }); fBreadcrumbViewer.addOpenListener(new org.eclipse.jface.viewers.IOpenListener() { public void open(org.eclipse.jface.viewers.OpenEvent event) { doRevealOrOpen(event.getSelection()); } }); fBreadcrumbViewer.addMenuDetectListener(new org.eclipse.swt.events.MenuDetectListener() { public void menuDetected(org.eclipse.swt.events.MenuDetectEvent event) { org.eclipse.jface.viewers.ISelectionProvider selectionProvider; if (fBreadcrumbViewer.isDropDownOpen()) { selectionProvider = fBreadcrumbViewer.getDropDownSelectionProvider(); } else { selectionProvider = fBreadcrumbViewer; } org.eclipse.ui.actions.ActionGroup actionGroup = createContextMenuActionGroup(selectionProvider); if (actionGroup == null) return; try { org.eclipse.jface.action.MenuManager manager = new org.eclipse.jface.action.MenuManager(); actionGroup.setContext(new org.eclipse.ui.actions.ActionContext(selectionProvider.getSelection())); actionGroup.fillContextMenu(manager); getTextEditor().getEditorSite().registerContextMenu(manager, selectionProvider, false); if (manager.isEmpty()) return; org.eclipse.swt.widgets.Menu menu = manager.createContextMenu(fBreadcrumbViewer.getControl()); menu.setLocation(((event.x) + 10), ((event.y) + 10)); menu.setVisible(true); while ((!(menu.isDisposed())) && (menu.isVisible())) { if (!(menu.getDisplay().readAndDispatch())) menu.getDisplay().sleep(); } } finally { actionGroup.dispose(); } } }); fPropertyChangeListener = new org.eclipse.jface.util.IPropertyChangeListener() { public void propertyChange(org.eclipse.jface.util.PropertyChangeEvent event) { if (org.eclipse.jdt.internal.ui.javaeditor.breadcrumb.EditorBreadcrumb.ACTIVE_TAB_BG_END.equals(event.getProperty())) { if (fComposite.isFocusControl()) { fComposite.setBackground(org.eclipse.jface.resource.JFaceResources.getColorRegistry().get(org.eclipse.jdt.internal.ui.javaeditor.breadcrumb.EditorBreadcrumb.ACTIVE_TAB_BG_END)); } } } }; org.eclipse.jface.resource.JFaceResources.getColorRegistry().addListener(fPropertyChangeListener); return fComposite; }
public void acceptSearchMatch(org.eclipse.jdt.core.search.SearchMatch match) throws org.eclipse.core.runtime.CoreException { int offset = match.getOffset(); int length = match.getLength(); if ((offset == (-1)) || (length == (-1))) return; if (!((match.getElement()) instanceof org.eclipse.jdt.core.IJavaElement)) return; org.eclipse.jdt.core.IJavaElement javaElement = ((org.eclipse.jdt.core.IJavaElement) (match.getElement())); if ((javaElement.getElementType()) == (org.eclipse.jdt.core.IJavaElement.IMPORT_DECLARATION)) return; if ((javaElement.getElementType()) == (org.eclipse.jdt.core.IJavaElement.CLASS_FILE)) return; if ((javaElement.getElementType()) == (org.eclipse.jdt.core.IJavaElement.TYPE)) return; if ((javaElement.getElementType()) == (org.eclipse.jdt.core.IJavaElement.FIELD)) { org.eclipse.jdt.core.IField field = ((org.eclipse.jdt.core.IField) (javaElement)); java.lang.String source = field.getSource(); if ((source != null) && (org.eclipse.jdt.internal.ui.refactoring.nls.search.NLSSearchResultRequestor.fgGetClassNameMatcher.match(source))) return; } org.eclipse.jface.text.Position mutableKeyPosition = new org.eclipse.jface.text.Position(offset, length); java.lang.String key = findKey(mutableKeyPosition, offset, javaElement); if ((key != null) && (isKeyDefined(key))) return; fResult.addMatch(new org.eclipse.search.ui.text.Match(javaElement, mutableKeyPosition.getOffset(), mutableKeyPosition.getLength())); }
private boolean isSelected(java.lang.Object parent, java.lang.Object element, org.eclipse.jface.viewers.IContentProvider contentProvider, org.eclipse.jface.viewers.ViewerFilter filter) { if (filter instanceof org.eclipse.jdt.internal.ui.filters.EmptyLibraryContainerFilter) return true; if (contentProvider instanceof org.eclipse.jface.viewers.ITreeContentProvider) { org.eclipse.jface.viewers.ITreeContentProvider provider = ((org.eclipse.jface.viewers.ITreeContentProvider) (contentProvider)); while ((element != null) && (!(element instanceof org.eclipse.jdt.core.IJavaModel))) { if (!(filter.select(fViewer, parent, element))) return false; element = provider.getParent(element); } return true; } return filter.select(fViewer, parent, element); }
private org.eclipse.jdt.core.dom.CompilationUnit getRecoveredAST(org.eclipse.jface.text.IDocument document, int offset, org.eclipse.jface.text.Document recoveredDocument) { org.eclipse.jdt.core.dom.CompilationUnit ast = org.eclipse.jdt.ui.SharedASTProvider.getAST(fCompilationUnit, SharedASTProvider.WAIT_ACTIVE_ONLY, null); if (ast != null) { recoveredDocument.set(document.get()); return ast; } char[] content = document.get().toCharArray(); int index = offset - 1; while ((index >= 0) && (java.lang.Character.isJavaIdentifierPart(content[index]))) { content[index] = ' '; index--; } recoveredDocument.set(new java.lang.String(content)); final org.eclipse.jdt.core.dom.ASTParser parser = org.eclipse.jdt.core.dom.ASTParser.newParser(org.eclipse.jdt.core.dom.AST.JLS3); parser.setResolveBindings(true); parser.setStatementsRecovery(true); parser.setSource(content); parser.setUnitName(fCompilationUnit.getElementName()); parser.setProject(fCompilationUnit.getJavaProject()); return ((org.eclipse.jdt.core.dom.CompilationUnit) (parser.createAST(new org.eclipse.core.runtime.NullProgressMonitor()))); }
private org.eclipse.ltk.core.refactoring.RefactoringStatus checkSelection(org.eclipse.core.runtime.IProgressMonitor pm) throws org.eclipse.jdt.core.JavaModelException { try { pm.beginTask("", 8); org.eclipse.jdt.internal.corext.dom.fragments.IExpressionFragment selectedExpression = getSelectedExpression(); if (selectedExpression == null) { java.lang.String message = org.eclipse.jdt.internal.corext.refactoring.RefactoringCoreMessages.getString("ExtractTempRefactoring.select_expression"); return org.eclipse.jdt.internal.corext.refactoring.code.CodeRefactoringUtil.checkMethodSyntaxErrors(fSelectionStart, fSelectionLength, fCompilationUnitNode, message); } pm.worked(1); if (isUsedInExplicitConstructorCall()) return org.eclipse.ltk.core.refactoring.RefactoringStatus.createFatalErrorStatus(org.eclipse.jdt.internal.corext.refactoring.RefactoringCoreMessages.getString("ExtractTempRefactoring.explicit_constructor")); pm.worked(1); if ((getEnclosingBodyNode()) == null) return org.eclipse.ltk.core.refactoring.RefactoringStatus.createFatalErrorStatus(org.eclipse.jdt.internal.corext.refactoring.RefactoringCoreMessages.getString("ExtractTempRefactoring.expr_in_method_or_initializer")); pm.worked(1); org.eclipse.jdt.core.dom.ASTNode associatedNode = selectedExpression.getAssociatedNode(); if (((associatedNode instanceof org.eclipse.jdt.core.dom.Name) && ((associatedNode.getParent()) instanceof org.eclipse.jdt.core.dom.ClassInstanceCreation)) && ((associatedNode.getLocationInParent()) == (org.eclipse.jdt.core.dom.ClassInstanceCreation.NAME_PROPERTY))) return org.eclipse.ltk.core.refactoring.RefactoringStatus.createFatalErrorStatus(org.eclipse.jdt.internal.corext.refactoring.RefactoringCoreMessages.getString("ExtractTempRefactoring.name_in_new")); pm.worked(1); org.eclipse.ltk.core.refactoring.RefactoringStatus result = new org.eclipse.ltk.core.refactoring.RefactoringStatus(); result.merge(checkExpression()); if (result.hasFatalError()) return result; pm.worked(1); result.merge(checkExpressionBinding()); if (result.hasFatalError()) return result; pm.worked(1); if (org.eclipse.jdt.internal.corext.refactoring.code.ExtractTempRefactoring.isUsedInForInitializerOrUpdater(getSelectedExpression().getAssociatedExpression())) return org.eclipse.ltk.core.refactoring.RefactoringStatus.createFatalErrorStatus(org.eclipse.jdt.internal.corext.refactoring.RefactoringCoreMessages.getString("ExtractTempRefactoring.for_initializer_updater")); pm.worked(1); if (org.eclipse.jdt.internal.corext.refactoring.code.ExtractTempRefactoring.isReferringToLocalVariableFromFor(getSelectedExpression().getAssociatedExpression())) return org.eclipse.ltk.core.refactoring.RefactoringStatus.createFatalErrorStatus(org.eclipse.jdt.internal.corext.refactoring.RefactoringCoreMessages.getString("ExtractTempRefactoring.refers_to_for_variable")); pm.worked(1); return result; } finally { pm.done(); } }
private static boolean canRemove(java.lang.Object element) { if (!(element instanceof org.eclipse.jdt.core.IPackageFragmentRoot)) return false; org.eclipse.jdt.core.IPackageFragmentRoot root = ((org.eclipse.jdt.core.IPackageFragmentRoot) (element)); if (!(root.isArchive())) return false; if (root.isExternal()) return false; return true; }
public static void initializeDefaultValues(org.eclipse.jface.preference.IPreferenceStore store) { org.eclipse.ui.texteditor.ExtendedTextEditorPreferenceConstants.initializeDefaultValues(store); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.EDITOR_SHOW_SEGMENTS, false); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.LINK_PACKAGES_TO_EDITOR, false); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.LINK_TYPEHIERARCHY_TO_EDITOR, false); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.OPEN_TYPE_HIERARCHY, org.eclipse.jdt.ui.PreferenceConstants.OPEN_TYPE_HIERARCHY_IN_VIEW_PART); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.DOUBLE_CLICK, org.eclipse.jdt.ui.PreferenceConstants.DOUBLE_CLICK_EXPANDS); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.UPDATE_JAVA_VIEWS, org.eclipse.jdt.ui.PreferenceConstants.UPDATE_WHILE_EDITING); store.setToDefault(org.eclipse.jdt.ui.PreferenceConstants.UPDATE_JAVA_VIEWS); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.LINK_BROWSING_PROJECTS_TO_EDITOR, true); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.LINK_BROWSING_PACKAGES_TO_EDITOR, true); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.LINK_BROWSING_TYPES_TO_EDITOR, true); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.LINK_BROWSING_MEMBERS_TO_EDITOR, true); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.APPEARANCE_COMPRESS_PACKAGE_NAMES, false); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.APPEARANCE_METHOD_RETURNTYPE, false); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.SHOW_CU_CHILDREN, true); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.APPEARANCE_OVERRIDE_INDICATOR, true); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.BROWSING_STACK_VERTICALLY, false); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.APPEARANCE_PKG_NAME_PATTERN_FOR_PKG_VIEW, ""); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.APPEARANCE_FOLD_PACKAGES_IN_PACKAGE_EXPLORER, true); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.ORGIMPORTS_IMPORTORDER, "java;javax;org;com"); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.ORGIMPORTS_ONDEMANDTHRESHOLD, 99); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.ORGIMPORTS_IGNORELOWERCASE, true); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.TYPEFILTER_ENABLED, ""); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.TYPEFILTER_DISABLED, "java.awt*;COM*"); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.REFACTOR_ERROR_PAGE_SEVERITY_THRESHOLD, org.eclipse.jdt.ui.PreferenceConstants.REFACTOR_ERROR_SEVERITY); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.REFACTOR_SAVE_ALL_EDITORS, false); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.TEMPLATES_USE_CODEFORMATTER, true); if (store.getBoolean(org.eclipse.jdt.ui.PreferenceConstants.CODEGEN_USE_GETTERSETTER_PREFIX)) { java.lang.String prefix = store.getString(org.eclipse.jdt.ui.PreferenceConstants.CODEGEN_GETTERSETTER_PREFIX); if ((prefix.length()) > 0) { org.eclipse.jdt.core.JavaCore.getPlugin().getPluginPreferences().setValue(org.eclipse.jdt.core.JavaCore.CODEASSIST_FIELD_PREFIXES, prefix); store.setToDefault(org.eclipse.jdt.ui.PreferenceConstants.CODEGEN_USE_GETTERSETTER_PREFIX); store.setToDefault(org.eclipse.jdt.ui.PreferenceConstants.CODEGEN_GETTERSETTER_PREFIX); } } if (store.getBoolean(org.eclipse.jdt.ui.PreferenceConstants.CODEGEN_USE_GETTERSETTER_SUFFIX)) { java.lang.String suffix = store.getString(org.eclipse.jdt.ui.PreferenceConstants.CODEGEN_GETTERSETTER_SUFFIX); if ((suffix.length()) > 0) { org.eclipse.jdt.core.JavaCore.getPlugin().getPluginPreferences().setValue(org.eclipse.jdt.core.JavaCore.CODEASSIST_FIELD_SUFFIXES, suffix); store.setToDefault(org.eclipse.jdt.ui.PreferenceConstants.CODEGEN_USE_GETTERSETTER_SUFFIX); store.setToDefault(org.eclipse.jdt.ui.PreferenceConstants.CODEGEN_GETTERSETTER_SUFFIX); } } store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.CODEGEN_KEYWORD_THIS, false); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.CODEGEN_IS_FOR_GETTERS, true); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.CODEGEN_EXCEPTION_VAR_NAME, "e"); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.CODEGEN_ADD_COMMENTS, true); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.APPEARANCE_MEMBER_SORT_ORDER, "T,SF,SI,SM,I,F,C,M"); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.APPEARANCE_VISIBILITY_SORT_ORDER, "B,V,R,D"); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.APPEARANCE_ENABLE_VISIBILITY_SORT_ORDER, false); store.addPropertyChangeListener(org.eclipse.jdt.internal.ui.JavaPlugin.getDefault().getMemberOrderPreferenceCache()); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.EDITOR_MATCHING_BRACKETS, true); org.eclipse.jface.preference.PreferenceConverter.setDefault(store, org.eclipse.jdt.ui.PreferenceConstants.EDITOR_MATCHING_BRACKETS_COLOR, new org.eclipse.swt.graphics.RGB(192, 192, 192)); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.EDITOR_CURRENT_LINE, true); org.eclipse.jface.preference.PreferenceConverter.setDefault(store, org.eclipse.jdt.ui.PreferenceConstants.EDITOR_CURRENT_LINE_COLOR, new org.eclipse.swt.graphics.RGB(225, 235, 224)); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.EDITOR_PRINT_MARGIN, false); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.EDITOR_PRINT_MARGIN_COLUMN, 80); org.eclipse.jface.preference.PreferenceConverter.setDefault(store, org.eclipse.jdt.ui.PreferenceConstants.EDITOR_PRINT_MARGIN_COLOR, new org.eclipse.swt.graphics.RGB(176, 180, 185)); org.eclipse.jface.preference.PreferenceConverter.setDefault(store, org.eclipse.jdt.ui.PreferenceConstants.EDITOR_FIND_SCOPE_COLOR, new org.eclipse.swt.graphics.RGB(185, 176, 180)); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.EDITOR_CORRECTION_INDICATION, true); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.EDITOR_SYNC_OUTLINE_ON_CURSOR_MOVE, true); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.EDITOR_EVALUTE_TEMPORARY_PROBLEMS, true); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.EDITOR_OVERVIEW_RULER, true); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.EDITOR_LINE_NUMBER_RULER, false); org.eclipse.jface.preference.PreferenceConverter.setDefault(store, org.eclipse.jdt.ui.PreferenceConstants.EDITOR_LINE_NUMBER_RULER_COLOR, new org.eclipse.swt.graphics.RGB(0, 0, 0)); org.eclipse.jface.preference.PreferenceConverter.setDefault(store, org.eclipse.jdt.ui.PreferenceConstants.EDITOR_LINKED_POSITION_COLOR, new org.eclipse.swt.graphics.RGB(121, 121, 121)); org.eclipse.jface.preference.PreferenceConverter.setDefault(store, org.eclipse.jdt.ui.PreferenceConstants.EDITOR_LINK_COLOR, new org.eclipse.swt.graphics.RGB(0, 0, 255)); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.EDITOR_FOREGROUND_DEFAULT_COLOR, true); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.EDITOR_BACKGROUND_DEFAULT_COLOR, true); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.EDITOR_TAB_WIDTH, 4); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.EDITOR_SPACES_FOR_TABS, false); org.eclipse.jface.preference.PreferenceConverter.setDefault(store, org.eclipse.jdt.ui.PreferenceConstants.EDITOR_MULTI_LINE_COMMENT_COLOR, new org.eclipse.swt.graphics.RGB(63, 127, 95)); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.EDITOR_MULTI_LINE_COMMENT_BOLD, false); org.eclipse.jface.preference.PreferenceConverter.setDefault(store, org.eclipse.jdt.ui.PreferenceConstants.EDITOR_SINGLE_LINE_COMMENT_COLOR, new org.eclipse.swt.graphics.RGB(63, 127, 95)); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.EDITOR_SINGLE_LINE_COMMENT_BOLD, false); org.eclipse.jface.preference.PreferenceConverter.setDefault(store, org.eclipse.jdt.ui.PreferenceConstants.EDITOR_JAVA_KEYWORD_COLOR, new org.eclipse.swt.graphics.RGB(127, 0, 85)); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.EDITOR_JAVA_KEYWORD_BOLD, true); org.eclipse.jface.preference.PreferenceConverter.setDefault(store, org.eclipse.jdt.ui.PreferenceConstants.EDITOR_STRING_COLOR, new org.eclipse.swt.graphics.RGB(42, 0, 255)); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.EDITOR_STRING_BOLD, false); org.eclipse.jface.preference.PreferenceConverter.setDefault(store, org.eclipse.jdt.ui.PreferenceConstants.EDITOR_JAVA_DEFAULT_COLOR, new org.eclipse.swt.graphics.RGB(0, 0, 0)); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.EDITOR_JAVA_DEFAULT_BOLD, false); org.eclipse.jface.preference.PreferenceConverter.setDefault(store, org.eclipse.jdt.ui.PreferenceConstants.EDITOR_JAVA_METHOD_NAME_COLOR, new org.eclipse.swt.graphics.RGB(0, 0, 0)); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.EDITOR_JAVA_METHOD_NAME_BOLD, false); org.eclipse.jface.preference.PreferenceConverter.setDefault(store, org.eclipse.jdt.ui.PreferenceConstants.EDITOR_JAVA_OPERATOR_COLOR, new org.eclipse.swt.graphics.RGB(0, 0, 0)); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.EDITOR_JAVA_OPERATOR_BOLD, false); org.eclipse.jface.preference.PreferenceConverter.setDefault(store, org.eclipse.jdt.ui.PreferenceConstants.EDITOR_TASK_TAG_COLOR, new org.eclipse.swt.graphics.RGB(127, 159, 191)); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.EDITOR_TASK_TAG_BOLD, true); org.eclipse.jface.preference.PreferenceConverter.setDefault(store, org.eclipse.jdt.ui.PreferenceConstants.EDITOR_JAVADOC_KEYWORD_COLOR, new org.eclipse.swt.graphics.RGB(127, 159, 191)); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.EDITOR_JAVADOC_KEYWORD_BOLD, true); org.eclipse.jface.preference.PreferenceConverter.setDefault(store, org.eclipse.jdt.ui.PreferenceConstants.EDITOR_JAVADOC_TAG_COLOR, new org.eclipse.swt.graphics.RGB(127, 127, 159)); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.EDITOR_JAVADOC_TAG_BOLD, false); org.eclipse.jface.preference.PreferenceConverter.setDefault(store, org.eclipse.jdt.ui.PreferenceConstants.EDITOR_JAVADOC_LINKS_COLOR, new org.eclipse.swt.graphics.RGB(63, 63, 191)); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.EDITOR_JAVADOC_LINKS_BOLD, false); org.eclipse.jface.preference.PreferenceConverter.setDefault(store, org.eclipse.jdt.ui.PreferenceConstants.EDITOR_JAVADOC_DEFAULT_COLOR, new org.eclipse.swt.graphics.RGB(63, 95, 191)); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.EDITOR_JAVADOC_DEFAULT_BOLD, false); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.CODEASSIST_AUTOACTIVATION, true); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.CODEASSIST_AUTOACTIVATION_DELAY, 500); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.CODEASSIST_AUTOINSERT, true); org.eclipse.jface.preference.PreferenceConverter.setDefault(store, org.eclipse.jdt.ui.PreferenceConstants.CODEASSIST_PROPOSALS_BACKGROUND, new org.eclipse.swt.graphics.RGB(254, 241, 233)); org.eclipse.jface.preference.PreferenceConverter.setDefault(store, org.eclipse.jdt.ui.PreferenceConstants.CODEASSIST_PROPOSALS_FOREGROUND, new org.eclipse.swt.graphics.RGB(0, 0, 0)); org.eclipse.jface.preference.PreferenceConverter.setDefault(store, org.eclipse.jdt.ui.PreferenceConstants.CODEASSIST_PARAMETERS_BACKGROUND, new org.eclipse.swt.graphics.RGB(254, 241, 233)); org.eclipse.jface.preference.PreferenceConverter.setDefault(store, org.eclipse.jdt.ui.PreferenceConstants.CODEASSIST_PARAMETERS_FOREGROUND, new org.eclipse.swt.graphics.RGB(0, 0, 0)); org.eclipse.jface.preference.PreferenceConverter.setDefault(store, org.eclipse.jdt.ui.PreferenceConstants.CODEASSIST_REPLACEMENT_BACKGROUND, new org.eclipse.swt.graphics.RGB(255, 255, 0)); org.eclipse.jface.preference.PreferenceConverter.setDefault(store, org.eclipse.jdt.ui.PreferenceConstants.CODEASSIST_REPLACEMENT_FOREGROUND, new org.eclipse.swt.graphics.RGB(255, 0, 0)); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.CODEASSIST_AUTOACTIVATION_TRIGGERS_JAVA, "."); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.CODEASSIST_AUTOACTIVATION_TRIGGERS_JAVADOC, "@"); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.CODEASSIST_SHOW_VISIBLE_PROPOSALS, true); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.CODEASSIST_CASE_SENSITIVITY, false); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.CODEASSIST_ORDER_PROPOSALS, false); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.CODEASSIST_ADDIMPORT, true); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.CODEASSIST_INSERT_COMPLETION, true); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.CODEASSIST_FILL_ARGUMENT_NAMES, false); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.CODEASSIST_GUESS_METHOD_ARGUMENTS, true); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.EDITOR_SMART_HOME_END, true); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.EDITOR_SUB_WORD_NAVIGATION, true); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.EDITOR_SMART_PASTE, true); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.EDITOR_CLOSE_STRINGS, true); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.EDITOR_CLOSE_BRACKETS, true); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.EDITOR_CLOSE_BRACES, true); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.EDITOR_CLOSE_JAVADOCS, true); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.EDITOR_WRAP_STRINGS, true); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.EDITOR_ESCAPE_STRINGS, false); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.EDITOR_ADD_JAVADOC_TAGS, true); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.EDITOR_FORMAT_JAVADOCS, false); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.EDITOR_DISABLE_OVERWRITE_MODE, false); java.lang.String mod1Name = org.eclipse.jface.action.Action.findModifierString(SWT.MOD1); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.EDITOR_TEXT_HOVER_MODIFIERS, ("org.eclipse.jdt.ui.BestMatchHover;0;org.eclipse.jdt.ui.JavaSourceHover;" + mod1Name)); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.EDITOR_TEXT_HOVER_MODIFIER_MASKS, ("org.eclipse.jdt.ui.BestMatchHover;0;org.eclipse.jdt.ui.JavaSourceHover;" + (org.eclipse.swt.SWT.MOD1))); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.EDITOR_SHOW_TEXT_HOVER_AFFORDANCE, true); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.EDITOR_BROWSER_LIKE_LINKS, true); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.EDITOR_BROWSER_LIKE_LINKS_KEY_MODIFIER, mod1Name); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.EDITOR_BROWSER_LIKE_LINKS_KEY_MODIFIER_MASK, SWT.MOD1); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.EDITOR_SMART_TAB, true); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.EDITOR_ANNOTATION_ROLL_OVER, false); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.FORMATTER_COMMENT_FORMAT, true); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.FORMATTER_COMMENT_FORMATHEADER, false); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.FORMATTER_COMMENT_FORMATSOURCE, true); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.FORMATTER_COMMENT_INDENTPARAMETERDESCRIPTION, true); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.FORMATTER_COMMENT_INDENTROOTTAGS, true); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.FORMATTER_COMMENT_NEWLINEFORPARAMETER, true); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.FORMATTER_COMMENT_SEPARATEROOTTAGS, true); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.FORMATTER_COMMENT_CLEARBLANKLINES, false); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.FORMATTER_COMMENT_FORMATHTML, true); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.FORMATTER_COMMENT_LINELENGTH, 80); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.FORMATTER_PROFILE, ProfileManager.DEFAULT_PROFILE); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.EDITOR_MARK_OCCURRENCES, false); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.EDITOR_STICKY_OCCURRENCES, true); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.SPELLING_CHECK_SPELLING, false); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.SPELLING_LOCALE, org.eclipse.jdt.internal.ui.text.spelling.SpellCheckEngine.getDefaultLocale().toString()); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.SPELLING_IGNORE_DIGITS, true); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.SPELLING_IGNORE_MIXED, true); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.SPELLING_IGNORE_SENTENCE, true); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.SPELLING_IGNORE_UPPER, true); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.SPELLING_IGNORE_URLS, true); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.SPELLING_USER_DICTIONARY, ""); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.SPELLING_PROPOSAL_THRESHOLD, 20); store.setDefault(org.eclipse.jdt.ui.PreferenceConstants.SPELLING_ENABLE_CONTENTASSIST, false); org.eclipse.jdt.internal.ui.preferences.WorkInProgressPreferencePage.initDefaults(store); org.eclipse.jdt.internal.ui.preferences.NewJavaProjectPreferencePage.initDefaults(store); }
private static java.util.List<org.eclipse.jdt.core.dom.IExtendedModifier> getImplementationModifiers(org.eclipse.jdt.core.dom.AST ast, org.eclipse.jdt.core.dom.IMethodBinding method, boolean inInterface, org.eclipse.jdt.core.dom.rewrite.ImportRewrite importRewrite, org.eclipse.jdt.core.dom.rewrite.ImportRewrite.ImportRewriteContext context) throws org.eclipse.jdt.core.JavaModelException { int modifiers = (((method.getModifiers()) & (~(org.eclipse.jdt.core.dom.Modifier.ABSTRACT))) & (~(org.eclipse.jdt.core.dom.Modifier.NATIVE))) & (~(org.eclipse.jdt.core.dom.Modifier.PRIVATE)); if (inInterface) { modifiers = modifiers & (~(org.eclipse.jdt.core.dom.Modifier.PROTECTED)); modifiers = modifiers | (org.eclipse.jdt.core.dom.Modifier.PUBLIC); } org.eclipse.jdt.core.dom.IAnnotationBinding[] annotations = method.getAnnotations(); if ((modifiers != (org.eclipse.jdt.core.dom.Modifier.NONE)) && ((annotations.length) > 0)) { org.eclipse.jdt.core.IMethod iMethod = ((org.eclipse.jdt.core.IMethod) (method.getJavaElement())); if ((iMethod != null) && (org.eclipse.jdt.internal.corext.refactoring.util.JavaElementUtil.isSourceAvailable(iMethod))) { org.eclipse.jdt.core.dom.ASTParser parser = org.eclipse.jdt.core.dom.ASTParser.newParser(ASTProvider.SHARED_AST_LEVEL); parser.setSource(iMethod.getTypeRoot()); parser.setIgnoreMethodBodies(true); org.eclipse.jdt.core.dom.CompilationUnit otherCU = ((org.eclipse.jdt.core.dom.CompilationUnit) (parser.createAST(null))); org.eclipse.jdt.core.dom.ASTNode otherMethod = org.eclipse.jdt.core.dom.NodeFinder.perform(otherCU, iMethod.getSourceRange()); if (otherMethod instanceof org.eclipse.jdt.core.dom.MethodDeclaration) { org.eclipse.jdt.core.dom.MethodDeclaration otherMD = ((org.eclipse.jdt.core.dom.MethodDeclaration) (otherMethod)); java.util.ArrayList<org.eclipse.jdt.core.dom.IExtendedModifier> result = new java.util.ArrayList<org.eclipse.jdt.core.dom.IExtendedModifier>(); java.util.List<org.eclipse.jdt.core.dom.IExtendedModifier> otherModifiers = otherMD.modifiers(); for (org.eclipse.jdt.core.dom.IExtendedModifier otherModifier : otherModifiers) { if (otherModifier instanceof org.eclipse.jdt.core.dom.Modifier) { int otherFlag = ((org.eclipse.jdt.core.dom.Modifier) (otherModifier)).getKeyword().toFlagValue(); if ((otherFlag & modifiers) != 0) { modifiers = (~otherFlag) & modifiers; result.addAll(ast.newModifiers(otherFlag)); } } else { org.eclipse.jdt.core.dom.Annotation otherAnnotation = ((org.eclipse.jdt.core.dom.Annotation) (otherModifier)); java.lang.String n = otherAnnotation.getTypeName().getFullyQualifiedName(); for (org.eclipse.jdt.core.dom.IAnnotationBinding annotation : annotations) { org.eclipse.jdt.core.dom.ITypeBinding otherAnnotationType = annotation.getAnnotationType(); java.lang.String qn = otherAnnotationType.getQualifiedName(); if ((qn.endsWith(n)) && (((qn.length()) == (n.length())) || ((qn.charAt((((qn.length()) - (n.length())) - 1))) == '.'))) { if (org.eclipse.jdt.internal.corext.dom.Bindings.isClassOrRuntimeAnnotation(otherAnnotationType)) result.add(org.eclipse.jdt.internal.corext.dom.ASTNodeFactory.newAnnotation(ast, annotation, importRewrite, context)); break; } } } } result.addAll(org.eclipse.jdt.internal.corext.dom.ASTNodeFactory.newModifiers(ast, modifiers)); return result; } } } java.util.ArrayList<org.eclipse.jdt.core.dom.IExtendedModifier> result = new java.util.ArrayList<org.eclipse.jdt.core.dom.IExtendedModifier>(); for (org.eclipse.jdt.core.dom.IAnnotationBinding annotation : annotations) { if (org.eclipse.jdt.internal.corext.dom.Bindings.isClassOrRuntimeAnnotation(annotation.getAnnotationType())) result.add(org.eclipse.jdt.internal.corext.dom.ASTNodeFactory.newAnnotation(ast, annotation, importRewrite, context)); } result.addAll(org.eclipse.jdt.internal.corext.dom.ASTNodeFactory.newModifiers(ast, modifiers)); return result; }
private void initializeRanges() throws org.eclipse.core.runtime.CoreException { fRanges = new java.util.HashMap(); if ((fSelectedNodes.length) == 0) return; fRanges.put(fSelectedNodes[0], super.computeSourceRange(fSelectedNodes[0])); int last = (fSelectedNodes.length) - 1; fRanges.put(fSelectedNodes[last], super.computeSourceRange(fSelectedNodes[last])); org.eclipse.jdt.core.compiler.IScanner scanner = org.eclipse.jdt.core.ToolFactory.createScanner(true, false, false, false); char[] source = fDocumentPortionToScan.toCharArray(); scanner.setSource(source); fDocumentPortionToScan = null; org.eclipse.jdt.internal.corext.dom.TokenScanner tokenizer = new org.eclipse.jdt.internal.corext.dom.TokenScanner(scanner); int pos = tokenizer.getNextStartOffset(0, false); org.eclipse.jdt.core.dom.ASTNode currentNode = fSelectedNodes[0]; int newStart = java.lang.Math.min(((fSelectionStart) + pos), currentNode.getStartPosition()); org.eclipse.jdt.core.dom.rewrite.TargetSourceRangeComputer.SourceRange range = ((org.eclipse.jdt.core.dom.rewrite.TargetSourceRangeComputer.SourceRange) (fRanges.get(currentNode))); fRanges.put(currentNode, new org.eclipse.jdt.core.dom.rewrite.TargetSourceRangeComputer.SourceRange(newStart, (((range.getLength()) + (range.getStartPosition())) - newStart))); currentNode = fSelectedNodes[last]; int scannerStart = ((currentNode.getStartPosition()) + (currentNode.getLength())) - (fSelectionStart); tokenizer.setOffset(scannerStart); pos = scannerStart; int token = -1; try { while (true) { token = tokenizer.readNext(false); pos = tokenizer.getCurrentEndOffset(); } } catch (org.eclipse.core.runtime.CoreException e) { } if (token == (org.eclipse.jdt.core.compiler.ITerminalSymbols.TokenNameCOMMENT_LINE)) { int index = pos - 1; while ((index >= 0) && (org.eclipse.jdt.core.formatter.IndentManipulation.isLineDelimiterChar(source[index]))) { pos--; index--; } } int newEnd = java.lang.Math.max(((fSelectionStart) + pos), ((currentNode.getStartPosition()) + (currentNode.getLength()))); range = ((org.eclipse.jdt.core.dom.rewrite.TargetSourceRangeComputer.SourceRange) (fRanges.get(currentNode))); fRanges.put(currentNode, new org.eclipse.jdt.core.dom.rewrite.TargetSourceRangeComputer.SourceRange(range.getStartPosition(), (newEnd - (range.getStartPosition())))); }
private static void doEqualNumberOfParameters(org.eclipse.jdt.ui.text.java.IInvocationContext context, org.eclipse.jdt.ui.text.java.IProblemLocation problem, java.util.List arguments, org.eclipse.jdt.core.dom.ITypeBinding[] argTypes, org.eclipse.jdt.core.dom.IMethodBinding methodBinding, java.util.Collection proposals) throws org.eclipse.core.runtime.CoreException { org.eclipse.jdt.core.dom.ITypeBinding[] paramTypes = methodBinding.getParameterTypes(); int[] indexOfDiff = new int[paramTypes.length]; int nDiffs = 0; for (int n = 0; n < (argTypes.length); n++) { if (!(org.eclipse.jdt.internal.corext.dom.TypeRules.canAssign(argTypes[n], paramTypes[n]))) { indexOfDiff[(nDiffs++)] = n; } } org.eclipse.jdt.core.dom.ITypeBinding declaringType = methodBinding.getDeclaringClass(); org.eclipse.jdt.core.ICompilationUnit cu = context.getCompilationUnit(); org.eclipse.jdt.core.dom.CompilationUnit astRoot = context.getASTRoot(); org.eclipse.jdt.core.dom.ASTNode nameNode = problem.getCoveringNode(astRoot); if (nameNode == null) { return; } if (nDiffs == 0) { if ((nameNode.getParent()) instanceof org.eclipse.jdt.core.dom.MethodInvocation) { org.eclipse.jdt.core.dom.MethodInvocation inv = ((org.eclipse.jdt.core.dom.MethodInvocation) (nameNode.getParent())); if ((inv.getExpression()) == null) { org.eclipse.jdt.internal.ui.text.correction.UnresolvedElementsSubProcessor.addQualifierToOuterProposal(context, inv, methodBinding, proposals); } } return; } if (nDiffs == 1) { int idx = indexOfDiff[0]; org.eclipse.jdt.core.dom.Expression nodeToCast = ((org.eclipse.jdt.core.dom.Expression) (arguments.get(idx))); java.lang.String castType = paramTypes[idx].getQualifiedName(); org.eclipse.jdt.internal.ui.text.correction.ASTRewriteCorrectionProposal proposal = org.eclipse.jdt.internal.ui.text.correction.LocalCorrectionsSubProcessor.getCastProposal(context, castType, nodeToCast, 6); if (proposal != null) { proposals.add(proposal); java.lang.String[] arg = new java.lang.String[]{ org.eclipse.jdt.internal.ui.text.correction.UnresolvedElementsSubProcessor.getArgumentName(cu, arguments, idx), castType }; proposal.setDisplayName(org.eclipse.jdt.internal.ui.text.correction.CorrectionMessages.getFormattedString("UnresolvedElementsSubProcessor.addargumentcast.description", arg)); } } if (nDiffs == 2) { int idx1 = indexOfDiff[0]; int idx2 = indexOfDiff[1]; boolean canSwap = (org.eclipse.jdt.internal.corext.dom.TypeRules.canAssign(argTypes[idx1], paramTypes[idx2])) && (org.eclipse.jdt.internal.corext.dom.TypeRules.canAssign(argTypes[idx2], paramTypes[idx1])); if (canSwap) { org.eclipse.jdt.core.dom.Expression arg1 = ((org.eclipse.jdt.core.dom.Expression) (arguments.get(idx1))); org.eclipse.jdt.core.dom.Expression arg2 = ((org.eclipse.jdt.core.dom.Expression) (arguments.get(idx2))); org.eclipse.jdt.internal.corext.dom.ASTRewrite rewrite = new org.eclipse.jdt.internal.corext.dom.ASTRewrite(arg1.getParent()); rewrite.markAsReplaced(arg1, rewrite.createCopy(arg2)); rewrite.markAsReplaced(arg2, rewrite.createCopy(arg1)); { java.lang.String[] arg = new java.lang.String[]{ org.eclipse.jdt.internal.ui.text.correction.UnresolvedElementsSubProcessor.getArgumentName(cu, arguments, idx1), org.eclipse.jdt.internal.ui.text.correction.UnresolvedElementsSubProcessor.getArgumentName(cu, arguments, idx2) }; java.lang.String label = org.eclipse.jdt.internal.ui.text.correction.CorrectionMessages.getFormattedString("UnresolvedElementsSubProcessor.swaparguments.description", arg); org.eclipse.swt.graphics.Image image = org.eclipse.jdt.internal.ui.JavaPluginImages.get(JavaPluginImages.IMG_CORRECTION_CHANGE); org.eclipse.jdt.internal.ui.text.correction.ASTRewriteCorrectionProposal proposal = new org.eclipse.jdt.internal.ui.text.correction.ASTRewriteCorrectionProposal(label, context.getCompilationUnit(), rewrite, 8, image); proposal.ensureNoModifications(); proposals.add(proposal); } if (declaringType.isFromSource()) { org.eclipse.jdt.core.ICompilationUnit targetCU = org.eclipse.jdt.internal.ui.text.correction.ASTResolving.findCompilationUnitForBinding(cu, astRoot, declaringType); if (targetCU != null) { org.eclipse.jdt.internal.ui.text.correction.ChangeMethodSignatureProposal.ChangeDescription[] changeDesc = new org.eclipse.jdt.internal.ui.text.correction.ChangeMethodSignatureProposal.ChangeDescription[paramTypes.length]; for (int i = 0; i < nDiffs; i++) { changeDesc[idx1] = new org.eclipse.jdt.internal.ui.text.correction.ChangeMethodSignatureProposal.SwapDescription(idx2); } org.eclipse.jdt.core.dom.ITypeBinding[] swappedTypes = new org.eclipse.jdt.core.dom.ITypeBinding[]{ paramTypes[idx1], paramTypes[idx2] }; java.lang.String[] args = new java.lang.String[]{ org.eclipse.jdt.internal.ui.text.correction.UnresolvedElementsSubProcessor.getMethodSignature(methodBinding, (!(targetCU.equals(cu)))), org.eclipse.jdt.internal.ui.text.correction.UnresolvedElementsSubProcessor.getTypeNames(swappedTypes) }; java.lang.String label; if (methodBinding.isConstructor()) { label = org.eclipse.jdt.internal.ui.text.correction.CorrectionMessages.getFormattedString("UnresolvedElementsSubProcessor.swapparams.constr.description", args); } else { label = org.eclipse.jdt.internal.ui.text.correction.CorrectionMessages.getFormattedString("UnresolvedElementsSubProcessor.swapparams.description", args); } org.eclipse.swt.graphics.Image image = org.eclipse.jdt.internal.ui.JavaPluginImages.get(JavaPluginImages.IMG_CORRECTION_CHANGE); org.eclipse.jdt.internal.ui.text.correction.ChangeMethodSignatureProposal proposal = new org.eclipse.jdt.internal.ui.text.correction.ChangeMethodSignatureProposal(label, targetCU, nameNode, methodBinding, changeDesc, 5, image); proposals.add(proposal); } } return; } } if (declaringType.isFromSource()) { org.eclipse.jdt.core.ICompilationUnit targetCU = org.eclipse.jdt.internal.ui.text.correction.ASTResolving.findCompilationUnitForBinding(cu, astRoot, declaringType); if (targetCU != null) { org.eclipse.jdt.internal.ui.text.correction.ChangeMethodSignatureProposal.ChangeDescription[] changeDesc = new org.eclipse.jdt.internal.ui.text.correction.ChangeMethodSignatureProposal.ChangeDescription[paramTypes.length]; for (int i = 0; i < nDiffs; i++) { int diffIndex = indexOfDiff[i]; org.eclipse.jdt.core.dom.Expression arg = ((org.eclipse.jdt.core.dom.Expression) (arguments.get(diffIndex))); java.lang.String name = (arg instanceof org.eclipse.jdt.core.dom.SimpleName) ? ((org.eclipse.jdt.core.dom.SimpleName) (arg)).getIdentifier() : null; changeDesc[diffIndex] = new org.eclipse.jdt.internal.ui.text.correction.ChangeMethodSignatureProposal.EditDescription(argTypes[diffIndex], name); } java.lang.String[] args = new java.lang.String[]{ org.eclipse.jdt.internal.ui.text.correction.UnresolvedElementsSubProcessor.getMethodSignature(methodBinding, (!(targetCU.equals(cu)))), org.eclipse.jdt.internal.ui.text.correction.UnresolvedElementsSubProcessor.getMethodSignature(methodBinding.getName(), arguments) }; java.lang.String label; if (methodBinding.isConstructor()) { label = org.eclipse.jdt.internal.ui.text.correction.CorrectionMessages.getFormattedString("UnresolvedElementsSubProcessor.changeparamsignature.constr.description", args); } else { label = org.eclipse.jdt.internal.ui.text.correction.CorrectionMessages.getFormattedString("UnresolvedElementsSubProcessor.changeparamsignature.description", args); } org.eclipse.swt.graphics.Image image = org.eclipse.jdt.internal.ui.JavaPluginImages.get(JavaPluginImages.IMG_CORRECTION_CHANGE); org.eclipse.jdt.internal.ui.text.correction.ChangeMethodSignatureProposal proposal = new org.eclipse.jdt.internal.ui.text.correction.ChangeMethodSignatureProposal(label, targetCU, nameNode, methodBinding, changeDesc, 7, image); proposals.add(proposal); } } }
private java.lang.String adjustPattern(java.lang.String pattern) { if ((pattern.length()) == 0) return pattern; int pos = pattern.indexOf('*'); if (pos == (-1)) return pattern + '*'; else return pattern; }
public int getOffset() { try { org.eclipse.jdt.core.IJavaElement newElement = getElement(); if (newElement == null) return -1; org.eclipse.jface.text.IDocument document = getSourceViewer().getDocument(); int newElementLine = -1; if (newElement instanceof org.eclipse.jdt.core.IMember) { org.eclipse.jdt.core.ISourceRange range = ((org.eclipse.jdt.core.IMember) (newElement)).getNameRange(); if (range != null) newElementLine = document.getLineOfOffset(range.getOffset()); } if (newElementLine == (-1)) newElementLine = document.getLineOfOffset(getOffset(newElement)); if (newElementLine == (-1)) return -1; int newLine = ((fLine) + newElementLine) - (fElementLine); if ((newLine < 0) || (newLine >= (document.getNumberOfLines()))) return -1; int maxColumn = document.getLineLength(newLine); java.lang.String lineDelimiter = document.getLineDelimiter(newLine); if (lineDelimiter != null) maxColumn = maxColumn - (lineDelimiter.length()); int offset; if ((fColumn) > maxColumn) offset = (document.getLineOffset(newLine)) + maxColumn; else offset = (document.getLineOffset(newLine)) + (fColumn); if ((!(containsOffset(newElement, offset))) && ((offset == 0) || (!(containsOffset(newElement, (offset - 1)))))) return -1; return offset; } catch (org.eclipse.jface.text.BadLocationException e) { org.eclipse.jdt.internal.ui.JavaPlugin.log(e); return -1; } catch (org.eclipse.jdt.core.JavaModelException e) { org.eclipse.jdt.internal.ui.JavaPlugin.log(e.getStatus()); return -1; } }
protected void fillContentProvider(org.eclipse.jdt.internal.ui.dialogs.AbstractContentProvider provider, org.eclipse.jdt.internal.ui.dialogs.ItemsFilter itemsFilter, org.eclipse.core.runtime.IProgressMonitor progressMonitor) throws org.eclipse.core.runtime.CoreException { org.eclipse.jdt.internal.ui.dialogs.FilteredTypesSelectionDialog.TypeItemsFilter typeSearchFilter = ((org.eclipse.jdt.internal.ui.dialogs.FilteredTypesSelectionDialog.TypeItemsFilter) (itemsFilter)); org.eclipse.jdt.internal.ui.dialogs.FilteredTypesSelectionDialog.TypeSearchRequestor requestor = new org.eclipse.jdt.internal.ui.dialogs.FilteredTypesSelectionDialog.TypeSearchRequestor(provider, typeSearchFilter); org.eclipse.jdt.core.search.SearchEngine engine = new org.eclipse.jdt.core.search.SearchEngine(((org.eclipse.jdt.core.WorkingCopyOwner) (null))); java.lang.String packPattern = typeSearchFilter.getPackagePattern(); progressMonitor.setTaskName(JavaUIMessages.FilteredTypesSelectionDialog_searchJob_taskName); java.lang.String typePattern = itemsFilter.getPattern(); int matchRule = typeSearchFilter.getMatchRule(); if (matchRule == (org.eclipse.ui.dialogs.SearchPattern.RULE_CAMELCASE_MATCH)) { char lastChar = typePattern.charAt(((typePattern.length()) - 1)); if ((lastChar == '<') || (lastChar == ' ')) { typePattern = typePattern.substring(0, ((typePattern.length()) - 1)); } else { typeSearchFilter.setMatchEverythingMode(true); } } else { typeSearchFilter.setMatchEverythingMode(true); } try { engine.searchAllTypeNames((packPattern == null ? null : packPattern.toCharArray()), typeSearchFilter.getPackageFlags(), typePattern.toCharArray(), matchRule, typeSearchFilter.getElementKind(), typeSearchFilter.getSearchScope(), requestor, org.eclipse.jdt.core.search.IJavaSearchConstants.WAIT_UNTIL_READY_TO_SEARCH, progressMonitor); } finally { typeSearchFilter.setMatchEverythingMode(false); } }
public void showMenu() { if ((!(fEnabled)) || (fMenuIsShown)) return; fMenuIsShown = true; fShell = new org.eclipse.swt.widgets.Shell(fToolBar.getShell(), (((org.eclipse.swt.SWT.RESIZE) | (org.eclipse.swt.SWT.TOOL)) | (org.eclipse.swt.SWT.BORDER))); org.eclipse.swt.layout.GridLayout layout = new org.eclipse.swt.layout.GridLayout(1, false); layout.marginHeight = 0; layout.marginWidth = 0; fShell.setBackground(org.eclipse.swt.widgets.Display.getDefault().getSystemColor(SWT.COLOR_INFO_BACKGROUND)); fShell.setBackgroundMode(SWT.INHERIT_DEFAULT); fShell.setLayout(layout); org.eclipse.swt.widgets.Composite composite = new org.eclipse.swt.widgets.Composite(fShell, org.eclipse.swt.SWT.NONE); composite.setLayoutData(new org.eclipse.swt.layout.GridData(org.eclipse.swt.SWT.FILL, org.eclipse.swt.SWT.FILL, true, true)); org.eclipse.swt.layout.GridLayout gridLayout = new org.eclipse.swt.layout.GridLayout(1, false); gridLayout.marginHeight = 0; gridLayout.marginWidth = 0; composite.setLayout(gridLayout); fDropDownViewer = new org.eclipse.jface.viewers.TreeViewer(composite, (((org.eclipse.swt.SWT.SINGLE) | (org.eclipse.swt.SWT.H_SCROLL)) | (org.eclipse.swt.SWT.V_SCROLL))); final org.eclipse.swt.widgets.Tree tree = ((org.eclipse.swt.widgets.Tree) (fDropDownViewer.getControl())); tree.setLayoutData(new org.eclipse.swt.layout.GridData(org.eclipse.swt.SWT.FILL, org.eclipse.swt.SWT.FILL, true, true)); tree.setBackground(fShell.getBackground()); java.lang.Object input = fParent.getData(); fDropDownViewer.setContentProvider(fParent.getViewer().createDropDownContentProvider(input)); fDropDownViewer.setLabelProvider(fParent.getViewer().createDropDownLabelProvider(input)); fDropDownViewer.setComparator(new org.eclipse.jdt.ui.JavaElementComparator()); fDropDownViewer.setInput(input); setShellBounds(fShell); fDropDownViewer.addOpenListener(new org.eclipse.jface.viewers.IOpenListener() { public void open(org.eclipse.jface.viewers.OpenEvent event) { org.eclipse.jface.viewers.ISelection selection = event.getSelection(); if (!(selection instanceof org.eclipse.jface.viewers.IStructuredSelection)) return; java.lang.Object element = ((org.eclipse.jface.viewers.IStructuredSelection) (selection)).getFirstElement(); if (element == null) return; fParent.getViewer().fireMenuSelection(element); if (fShell.isDisposed()) return; if (fDropDownViewer.getExpandedState(element)) { fDropDownViewer.collapseToLevel(element, 1); } else { tree.setRedraw(false); try { fDropDownViewer.expandToLevel(element, 1); resizeShell(fShell); } finally { tree.setRedraw(true); } } } }); tree.addMouseListener(new org.eclipse.swt.events.MouseListener() { public void mouseUp(org.eclipse.swt.events.MouseEvent e) { if ((e.button) != 1) return; org.eclipse.swt.widgets.Item item = tree.getItem(new org.eclipse.swt.graphics.Point(e.x, e.y)); if (item == null) return; java.lang.Object data = item.getData(); if (data == null) return; fParent.getViewer().fireMenuSelection(data); if (fShell.isDisposed()) return; if (fDropDownViewer.getExpandedState(data)) { fDropDownViewer.collapseToLevel(data, 1); } else { tree.setRedraw(false); try { fDropDownViewer.expandToLevel(data, 1); resizeShell(fShell); } finally { tree.setRedraw(true); } } } public void mouseDown(org.eclipse.swt.events.MouseEvent e) { } public void mouseDoubleClick(org.eclipse.swt.events.MouseEvent e) { } }); tree.addMouseMoveListener(new org.eclipse.swt.events.MouseMoveListener() { org.eclipse.swt.widgets.TreeItem fLastItem = null; public void mouseMove(org.eclipse.swt.events.MouseEvent e) { if (tree.equals(e.getSource())) { java.lang.Object o = tree.getItem(new org.eclipse.swt.graphics.Point(e.x, e.y)); if (o instanceof org.eclipse.swt.widgets.TreeItem) { org.eclipse.swt.widgets.TreeItem currentItem = ((org.eclipse.swt.widgets.TreeItem) (o)); if (!(o.equals(fLastItem))) { fLastItem = ((org.eclipse.swt.widgets.TreeItem) (o)); tree.setSelection(new org.eclipse.swt.widgets.TreeItem[]{ fLastItem }); } else if ((e.y) < ((tree.getItemHeight()) / 4)) { if ((currentItem.getParentItem()) == null) { int index = tree.indexOf(((org.eclipse.swt.widgets.TreeItem) (o))); if (index < 1) return; fLastItem = tree.getItem((index - 1)); tree.setSelection(new org.eclipse.swt.widgets.TreeItem[]{ fLastItem }); } else { org.eclipse.swt.graphics.Point p = tree.toDisplay(e.x, e.y); org.eclipse.swt.widgets.Item item = fDropDownViewer.scrollUp(p.x, p.y); if (item instanceof org.eclipse.swt.widgets.TreeItem) { fLastItem = ((org.eclipse.swt.widgets.TreeItem) (item)); tree.setSelection(new org.eclipse.swt.widgets.TreeItem[]{ fLastItem }); } } } else if ((e.y) > ((tree.getBounds().height) - ((tree.getItemHeight()) / 4))) { if ((currentItem.getParentItem()) == null) { int index = tree.indexOf(((org.eclipse.swt.widgets.TreeItem) (o))); if (index >= ((tree.getItemCount()) - 1)) return; fLastItem = tree.getItem((index + 1)); tree.setSelection(new org.eclipse.swt.widgets.TreeItem[]{ fLastItem }); } else { org.eclipse.swt.graphics.Point p = tree.toDisplay(e.x, e.y); org.eclipse.swt.widgets.Item item = fDropDownViewer.scrollDown(p.x, p.y); if (item instanceof org.eclipse.swt.widgets.TreeItem) { fLastItem = ((org.eclipse.swt.widgets.TreeItem) (item)); tree.setSelection(new org.eclipse.swt.widgets.TreeItem[]{ fLastItem }); } } } } } } }); tree.addKeyListener(new org.eclipse.swt.events.KeyListener() { public void keyPressed(org.eclipse.swt.events.KeyEvent e) { if ((e.keyCode) == (org.eclipse.swt.SWT.ARROW_UP)) { org.eclipse.swt.widgets.TreeItem[] selection = tree.getSelection(); if ((selection.length) != 1) return; int selectionIndex = tree.indexOf(selection[0]); if (selectionIndex != 0) return; fShell.close(); } } public void keyReleased(org.eclipse.swt.events.KeyEvent e) { } }); fDropDownViewer.addTreeListener(new org.eclipse.jface.viewers.ITreeViewerListener() { public void treeCollapsed(org.eclipse.jface.viewers.TreeExpansionEvent event) { } public void treeExpanded(org.eclipse.jface.viewers.TreeExpansionEvent event) { tree.setRedraw(false); fShell.getDisplay().asyncExec(new java.lang.Runnable() { public void run() { if (fShell.isDisposed()) return; try { resizeShell(fShell); } finally { tree.setRedraw(true); } } }); } }); while (tree.getDisplay().readAndDispatch()) { } int index = fParent.getViewer().getIndexOfItem(fParent); if (index < ((fParent.getViewer().getItemCount()) - 1)) { org.eclipse.jdt.internal.ui.javaeditor.breadcrumb.BreadcrumbItem childItem = fParent.getViewer().getItem((index + 1)); java.lang.Object child = childItem.getData(); fDropDownViewer.setSelection(new org.eclipse.jface.viewers.StructuredSelection(child), true); org.eclipse.swt.widgets.TreeItem[] selection = tree.getSelection(); if ((selection.length) > 0) { tree.setTopItem(selection[0]); } } fShell.open(); installCloser(fShell); tree.setFocus(); }
public OpenExternalJavadocAction(org.eclipse.jdt.internal.ui.actions.StructuredSelectionProvider provider) { super(); setText("Open External Javadoc@Shift+F2"); setDescription("Opens the Javadoc of the selected element in an external browser"); setToolTipText("Opens the Javadoc of the selected element in an external browser"); fSelectionProvider = provider; }
private void changeReturnType() throws org.eclipse.jdt.core.JavaModelException { if (isReturnTypeSameAsInitial()) return; replaceTypeNode(fMethDecl.getReturnType(), fReturnTypeName); removeExtraDimensions(fMethDecl); }
private org.eclipse.jdt.internal.ui.dialogs.StatusInfo pathUpdated() { org.eclipse.jdt.internal.ui.dialogs.StatusInfo status = new org.eclipse.jdt.internal.ui.dialogs.StatusInfo(); java.lang.String path = fPathField.getText(); if ((path.length()) > 0) { if (!(org.eclipse.core.runtime.Path.ROOT.isValidPath(path))) { status.setError(org.eclipse.jdt.internal.ui.wizards.NewWizardMessages.getString("VariableCreationDialogerror.invalidpath")); } else if (!(new java.io.File(path).exists())) { status.setWarning(org.eclipse.jdt.internal.ui.wizards.NewWizardMessages.getString("VariableCreationDialog.warning.pathnotexists")); } } return status; }
private org.eclipse.jdt.core.dom.SingleVariableDeclaration createParameterDeclaration(java.lang.String parameterName, org.eclipse.jdt.core.dom.VariableDeclarationFragment fragement, org.eclipse.jdt.core.dom.Expression arrayAccess, org.eclipse.jdt.core.dom.ForStatement statement, org.eclipse.jdt.core.dom.rewrite.ImportRewrite importRewrite, org.eclipse.jdt.core.dom.rewrite.ASTRewrite rewrite, org.eclipse.text.edits.TextEditGroup group, org.eclipse.jdt.internal.corext.fix.LinkedProposalPositionGroup pg, boolean makeFinal) { org.eclipse.jdt.core.dom.CompilationUnit compilationUnit = ((org.eclipse.jdt.core.dom.CompilationUnit) (arrayAccess.getRoot())); org.eclipse.jdt.core.dom.AST ast = compilationUnit.getAST(); org.eclipse.jdt.core.dom.SingleVariableDeclaration result = ast.newSingleVariableDeclaration(); org.eclipse.jdt.core.dom.SimpleName name = ast.newSimpleName(parameterName); pg.addPosition(rewrite.track(name), true); result.setName(name); org.eclipse.jdt.core.dom.ITypeBinding arrayTypeBinding = arrayAccess.resolveTypeBinding(); org.eclipse.jdt.core.dom.Type type = importType(arrayTypeBinding.getElementType(), statement, importRewrite, compilationUnit); if ((arrayTypeBinding.getDimensions()) != 1) { type = ast.newArrayType(type, ((arrayTypeBinding.getDimensions()) - 1)); } result.setType(type); if (fragement != null) { org.eclipse.jdt.core.dom.VariableDeclarationStatement declaration = ((org.eclipse.jdt.core.dom.VariableDeclarationStatement) (fragement.getParent())); org.eclipse.jdt.internal.corext.dom.ModifierRewrite.create(rewrite, result).copyAllModifiers(declaration, group); } if (makeFinal && ((fragement == null) || ((org.eclipse.jdt.internal.corext.dom.ASTNodes.findModifierNode(org.eclipse.jdt.core.dom.Modifier.FINAL, org.eclipse.jdt.internal.corext.dom.ASTNodes.getModifiers(fragement))) == null))) { org.eclipse.jdt.internal.corext.dom.ModifierRewrite.create(rewrite, result).setModifiers(org.eclipse.jdt.core.dom.Modifier.FINAL, 0, group); } return result; }
public void run(org.eclipse.core.runtime.IProgressMonitor monitor) throws org.eclipse.core.runtime.CoreException { monitor.beginTask(org.eclipse.jdt.internal.ui.actions.ActionMessages.getString("RefreshAction.progressMessage"), ((resources.length) * 2)); monitor.subTask(""); java.util.List javaElements = new java.util.ArrayList(5); for (int r = 0; r < (resources.length); r++) { org.eclipse.core.resources.IResource resource = resources[r]; if ((resource.getType()) == (org.eclipse.core.resources.IResource.PROJECT)) { checkLocationDeleted(((org.eclipse.core.resources.IProject) (resource))); } else if ((resource.getType()) == (org.eclipse.core.resources.IResource.ROOT)) { org.eclipse.core.resources.IProject[] projects = ((org.eclipse.core.resources.IWorkspaceRoot) (resource)).getProjects(); for (int p = 0; p < (projects.length); p++) { checkLocationDeleted(projects[p]); } } resource.refreshLocal(org.eclipse.core.resources.IResource.DEPTH_INFINITE, new org.eclipse.core.runtime.SubProgressMonitor(monitor, 1)); org.eclipse.jdt.core.IJavaElement jElement = org.eclipse.jdt.core.JavaCore.create(resource); if ((jElement != null) && (jElement.exists())) javaElements.add(jElement); } org.eclipse.jdt.core.IJavaModel model = org.eclipse.jdt.core.JavaCore.create(org.eclipse.core.resources.ResourcesPlugin.getWorkspace().getRoot()); model.refreshExternalArchives(((org.eclipse.jdt.core.IJavaElement[]) (javaElements.toArray(new org.eclipse.jdt.core.IJavaElement[javaElements.size()]))), new org.eclipse.core.runtime.SubProgressMonitor(monitor, resources.length)); }
public static void initDefaults(org.eclipse.jface.preference.IPreferenceStore store) { store.setDefault(org.eclipse.jdt.internal.ui.preferences.NewJavaProjectPreferencePage.SRCBIN_FOLDERS_IN_NEWPROJ, false); store.setDefault(org.eclipse.jdt.internal.ui.preferences.NewJavaProjectPreferencePage.SRCBIN_SRCNAME, "src"); store.setDefault(org.eclipse.jdt.internal.ui.preferences.NewJavaProjectPreferencePage.SRCBIN_BINNAME, "bin"); store.setDefault(org.eclipse.jdt.internal.ui.preferences.NewJavaProjectPreferencePage.CLASSPATH_JRELIBRARY_LIST, org.eclipse.jdt.internal.ui.preferences.NewJavaProjectPreferencePage.getDefaultJRELibraries()); store.setDefault(org.eclipse.jdt.internal.ui.preferences.NewJavaProjectPreferencePage.CLASSPATH_JRELIBRARY_INDEX, 0); }
private org.eclipse.core.resources.IProject getProject() { org.eclipse.core.runtime.IAdaptable adaptable = getElement(); if (adaptable != null) { org.eclipse.jdt.core.IJavaElement elem = ((org.eclipse.jdt.core.IJavaElement) (adaptable.getAdapter(org.eclipse.jdt.core.IJavaElement.class))); if (elem instanceof org.eclipse.jdt.core.IJavaProject) { return ((org.eclipse.jdt.core.IJavaProject) (elem)).getProject(); } } return null; }
private java.lang.String findKey(org.eclipse.jface.text.Position keyPositionResult, org.eclipse.jdt.core.IJavaElement enclosingElement) throws org.eclipse.core.runtime.CoreException { org.eclipse.jdt.core.ICompilationUnit unit = ((org.eclipse.jdt.core.ICompilationUnit) (enclosingElement.getAncestor(org.eclipse.jdt.core.IJavaElement.COMPILATION_UNIT))); if (unit == null) return null; java.lang.String source = unit.getSource(); if (source == null) return null; org.eclipse.jdt.core.compiler.IScanner scanner = org.eclipse.jdt.core.ToolFactory.createScanner(false, false, false, false); scanner.setSource(source.toCharArray()); scanner.resetTo(((keyPositionResult.getOffset()) + (keyPositionResult.getLength())), source.length()); try { if ((scanner.getNextToken()) != (org.eclipse.jdt.core.compiler.ITerminalSymbols.TokenNameDOT)) return null; if ((scanner.getNextToken()) != (org.eclipse.jdt.core.compiler.ITerminalSymbols.TokenNameIdentifier)) return null; java.lang.String src = new java.lang.String(scanner.getCurrentTokenSource()); int keyStart = scanner.getCurrentTokenStartPosition(); int keyEnd = scanner.getCurrentTokenEndPosition(); if ((scanner.getNextToken()) == (org.eclipse.jdt.core.compiler.ITerminalSymbols.TokenNameLPAREN)) { if ((scanner.getNextToken()) != (org.eclipse.jdt.core.compiler.ITerminalSymbols.TokenNameStringLiteral)) return null; keyStart = (scanner.getCurrentTokenStartPosition()) + 1; keyEnd = scanner.getCurrentTokenEndPosition(); keyPositionResult.setOffset(keyStart); keyPositionResult.setLength((keyEnd - keyStart)); return source.substring(keyStart, keyEnd); } else { keyPositionResult.setOffset(keyStart); keyPositionResult.setLength(((keyEnd - keyStart) + 1)); return src; } } catch (org.eclipse.jdt.core.compiler.InvalidInputException e) { return null; } }
private static boolean getExchangeOperandsProposals(org.eclipse.jdt.ui.text.java.IInvocationContext context, org.eclipse.jdt.core.dom.ASTNode node, java.util.Collection resultingCollections) { if (!(node instanceof org.eclipse.jdt.core.dom.InfixExpression)) { return false; } org.eclipse.jdt.core.dom.InfixExpression infixExpression = ((org.eclipse.jdt.core.dom.InfixExpression) (node)); org.eclipse.jdt.core.dom.InfixExpression.Operator operator = infixExpression.getOperator(); if (((((((((((((operator != (org.eclipse.jdt.core.dom.InfixExpression.Operator.CONDITIONAL_AND)) && (operator != (org.eclipse.jdt.core.dom.InfixExpression.Operator.AND))) && (operator != (org.eclipse.jdt.core.dom.InfixExpression.Operator.CONDITIONAL_OR))) && (operator != (org.eclipse.jdt.core.dom.InfixExpression.Operator.OR))) && (operator != (org.eclipse.jdt.core.dom.InfixExpression.Operator.EQUALS))) && (operator != (org.eclipse.jdt.core.dom.InfixExpression.Operator.NOT_EQUALS))) && (operator != (org.eclipse.jdt.core.dom.InfixExpression.Operator.LESS))) && (operator != (org.eclipse.jdt.core.dom.InfixExpression.Operator.LESS_EQUALS))) && (operator != (org.eclipse.jdt.core.dom.InfixExpression.Operator.GREATER))) && (operator != (org.eclipse.jdt.core.dom.InfixExpression.Operator.GREATER_EQUALS))) && (operator != (org.eclipse.jdt.core.dom.InfixExpression.Operator.PLUS))) && (operator != (org.eclipse.jdt.core.dom.InfixExpression.Operator.TIMES))) && (operator != (org.eclipse.jdt.core.dom.InfixExpression.Operator.XOR))) { return false; } int offset = org.eclipse.jdt.internal.ui.text.correction.AdvancedQuickAssistProcessor.isOperatorSelected(infixExpression, context.getSelectionOffset(), context.getSelectionLength()); if (offset == (-1)) { return false; } if (resultingCollections == null) { return true; } org.eclipse.jdt.core.dom.AST ast = infixExpression.getAST(); org.eclipse.jdt.core.dom.rewrite.ASTRewrite rewrite = org.eclipse.jdt.core.dom.rewrite.ASTRewrite.create(ast); org.eclipse.jdt.core.dom.Expression leftExpression = null; org.eclipse.jdt.core.dom.Expression rightExpression = null; org.eclipse.jdt.core.dom.InfixExpression currentExpression = infixExpression; leftExpression = org.eclipse.jdt.internal.ui.text.correction.AdvancedQuickAssistProcessor.combineOperands(rewrite, leftExpression, infixExpression.getLeftOperand(), false, operator); if ((infixExpression.getRightOperand().getStartPosition()) <= (context.getSelectionOffset())) { leftExpression = org.eclipse.jdt.internal.ui.text.correction.AdvancedQuickAssistProcessor.combineOperands(rewrite, leftExpression, infixExpression.getRightOperand(), false, operator); } else { rightExpression = org.eclipse.jdt.internal.ui.text.correction.AdvancedQuickAssistProcessor.combineOperands(rewrite, rightExpression, infixExpression.getRightOperand(), false, operator); } for (java.util.Iterator iter = currentExpression.extendedOperands().iterator(); iter.hasNext();) { org.eclipse.jdt.core.dom.Expression extendedOperand = ((org.eclipse.jdt.core.dom.Expression) (iter.next())); if ((extendedOperand.getStartPosition()) <= (context.getSelectionOffset())) { leftExpression = org.eclipse.jdt.internal.ui.text.correction.AdvancedQuickAssistProcessor.combineOperands(rewrite, leftExpression, extendedOperand, false, operator); } else { rightExpression = org.eclipse.jdt.internal.ui.text.correction.AdvancedQuickAssistProcessor.combineOperands(rewrite, rightExpression, extendedOperand, false, operator); } } if (operator == (org.eclipse.jdt.core.dom.InfixExpression.Operator.LESS)) { operator = org.eclipse.jdt.core.dom.InfixExpression.Operator.GREATER_EQUALS; } else if (operator == (org.eclipse.jdt.core.dom.InfixExpression.Operator.LESS_EQUALS)) { operator = org.eclipse.jdt.core.dom.InfixExpression.Operator.GREATER; } else if (operator == (org.eclipse.jdt.core.dom.InfixExpression.Operator.GREATER)) { operator = org.eclipse.jdt.core.dom.InfixExpression.Operator.LESS_EQUALS; } else if (operator == (org.eclipse.jdt.core.dom.InfixExpression.Operator.GREATER_EQUALS)) { operator = org.eclipse.jdt.core.dom.InfixExpression.Operator.LESS; } org.eclipse.jdt.core.dom.InfixExpression newInfix = ast.newInfixExpression(); newInfix.setOperator(operator); newInfix.setLeftOperand(rightExpression); newInfix.setRightOperand(leftExpression); rewrite.replace(infixExpression, newInfix, null); java.lang.String label = CorrectionMessages.AdvancedQuickAssistProcessor_exchangeOperands_description; org.eclipse.swt.graphics.Image image = org.eclipse.jdt.internal.ui.JavaPluginImages.get(JavaPluginImages.IMG_CORRECTION_CHANGE); org.eclipse.jdt.internal.ui.text.correction.proposals.ASTRewriteCorrectionProposal proposal = new org.eclipse.jdt.internal.ui.text.correction.proposals.ASTRewriteCorrectionProposal(label, context.getCompilationUnit(), rewrite, 1, image); resultingCollections.add(proposal); return true; }
public int compare(org.eclipse.jface.viewers.Viewer viewer, java.lang.Object e1, java.lang.Object e2) { if ((e1 instanceof org.eclipse.jdt.core.IType) && (e2 instanceof org.eclipse.jdt.core.IType)) { if (e1.equals(e2)) { return 0; } for (int i = 0; i < (fAllTypes.length); i++) { org.eclipse.jdt.core.IType curr = fAllTypes[i]; if (curr.equals(e1)) { return -1; } if (curr.equals(e2)) { return 1; } } return 0; } else { return super.compare(viewer, e1, e2); } }
private org.eclipse.ltk.internal.ui.refactoring.ChangeElement getFirstNonCompositeChange(org.eclipse.jface.viewers.ITreeContentProvider provider, org.eclipse.ltk.internal.ui.refactoring.ChangeElement input) { org.eclipse.ltk.internal.ui.refactoring.ChangeElement focus = input; org.eclipse.ltk.core.refactoring.Change change = input.getChange(); while ((change != null) && (change instanceof org.eclipse.ltk.core.refactoring.CompositeChange)) { org.eclipse.ltk.internal.ui.refactoring.ChangeElement[] children = ((org.eclipse.ltk.internal.ui.refactoring.ChangeElement[]) (provider.getElements(focus))); if ((children == null) || ((children.length) == 0)) return null; focus = children[0]; change = focus.getChange(); } return focus; }
protected boolean isValidInput(java.lang.Object element) { if ((element instanceof org.eclipse.jdt.core.IJavaProject) || ((element instanceof org.eclipse.jdt.core.IPackageFragmentRoot) && ((((org.eclipse.jdt.core.IJavaElement) (element)).getElementName()) != (org.eclipse.jdt.core.IPackageFragmentRoot.DEFAULT_PACKAGEROOT_PATH)))) try { org.eclipse.jdt.core.IJavaProject jProject = ((org.eclipse.jdt.core.IJavaElement) (element)).getJavaProject(); if (jProject != null) return jProject.getProject().hasNature(org.eclipse.jdt.core.JavaCore.NATURE_ID); } catch (org.eclipse.core.runtime.CoreException ex) { return false; } return false; }
@java.lang.Override public void changing(org.eclipse.swt.browser.LocationEvent event) { java.lang.String loc = event.location; if ("about:blank".equals(loc)) { handler.handleTextSet(); return; } event.doit = false; if (loc.startsWith("about:")) { return; } java.net.URI uri = null; try { uri = new java.net.URI(loc); } catch (java.net.URISyntaxException e) { if ((((event.widget) instanceof org.eclipse.swt.browser.Browser) && ("ie".equals(((org.eclipse.swt.browser.Browser) (event.widget)).getBrowserType()))) && (loc.startsWith("file://"))) { java.lang.String path = loc.substring(7).replace('/', '\\'); loc = new java.io.File(path).toURI().toString(); if ((((loc.length()) > 7) && (loc.startsWith("file:/"))) && (!("//".equals(loc.substring(6, 8))))) { loc = "file://" + (loc.substring(5)); } try { uri = new java.net.URI(loc); } catch (java.net.URISyntaxException e2) { org.eclipse.jdt.internal.ui.JavaPlugin.log(e); return; } } else { org.eclipse.jdt.internal.ui.JavaPlugin.log(e); } } java.lang.String scheme = (uri == null) ? null : uri.getScheme(); if (org.eclipse.jdt.internal.ui.viewsupport.JavaElementLinks.JAVADOC_VIEW_SCHEME.equals(scheme)) { org.eclipse.jdt.core.IJavaElement linkTarget = org.eclipse.jdt.internal.ui.viewsupport.JavaElementLinks.parseURI(uri); if (linkTarget == null) return; handler.handleJavadocViewLink(linkTarget); } else if (org.eclipse.jdt.internal.ui.viewsupport.JavaElementLinks.JAVADOC_SCHEME.equals(scheme)) { org.eclipse.jdt.core.IJavaElement linkTarget = org.eclipse.jdt.internal.ui.viewsupport.JavaElementLinks.parseURI(uri); if (linkTarget == null) return; handler.handleInlineJavadocLink(linkTarget); } else if (org.eclipse.jdt.internal.ui.viewsupport.JavaElementLinks.OPEN_LINK_SCHEME.equals(scheme)) { org.eclipse.jdt.core.IJavaElement linkTarget = org.eclipse.jdt.internal.ui.viewsupport.JavaElementLinks.parseURI(uri); if (linkTarget == null) return; handler.handleDeclarationLink(linkTarget); } else { try { if (handler.handleExternalLink(new java.net.URL(loc), event.display)) return; event.doit = true; } catch (java.net.MalformedURLException e) { org.eclipse.jdt.internal.ui.JavaPlugin.log(e); } } }
private org.eclipse.swt.widgets.Composite createWarningsTabContent(org.eclipse.swt.widgets.Composite folder) { java.lang.String[] errorWarningIgnore = new java.lang.String[]{ org.eclipse.jdt.internal.ui.preferences.CompilerConfigurationBlock.ERROR, org.eclipse.jdt.internal.ui.preferences.CompilerConfigurationBlock.WARNING, org.eclipse.jdt.internal.ui.preferences.CompilerConfigurationBlock.IGNORE }; java.lang.String[] errorWarningIgnoreLabels = new java.lang.String[]{ org.eclipse.jdt.internal.ui.JavaUIMessages.getString("CompilerConfigurationBlock.error"), org.eclipse.jdt.internal.ui.JavaUIMessages.getString("CompilerConfigurationBlock.warning"), org.eclipse.jdt.internal.ui.JavaUIMessages.getString("CompilerConfigurationBlock.ignore") }; org.eclipse.swt.layout.GridLayout layout = new org.eclipse.swt.layout.GridLayout(); layout.numColumns = 2; layout.verticalSpacing = 2; org.eclipse.swt.widgets.Composite warningsComposite = new org.eclipse.swt.widgets.Composite(folder, org.eclipse.swt.SWT.NULL); warningsComposite.setLayout(layout); org.eclipse.swt.widgets.Label description = new org.eclipse.swt.widgets.Label(warningsComposite, org.eclipse.swt.SWT.WRAP); description.setText(org.eclipse.jdt.internal.ui.JavaUIMessages.getString("CompilerConfigurationBlock.warnings.description")); org.eclipse.swt.layout.GridData gd = new org.eclipse.swt.layout.GridData(); gd.horizontalSpan = 2; gd.widthHint = fPixelConverter.convertWidthInCharsToPixels(50); description.setLayoutData(gd); java.lang.String label = org.eclipse.jdt.internal.ui.JavaUIMessages.getString("CompilerConfigurationBlock.pb_unreachable_code.label"); addComboBox(warningsComposite, label, org.eclipse.jdt.internal.ui.preferences.CompilerConfigurationBlock.PREF_PB_UNREACHABLE_CODE, errorWarningIgnore, errorWarningIgnoreLabels, 0); label = org.eclipse.jdt.internal.ui.JavaUIMessages.getString("CompilerConfigurationBlock.pb_invalid_import.label"); addComboBox(warningsComposite, label, org.eclipse.jdt.internal.ui.preferences.CompilerConfigurationBlock.PREF_PB_INVALID_IMPORT, errorWarningIgnore, errorWarningIgnoreLabels, 0); label = org.eclipse.jdt.internal.ui.JavaUIMessages.getString("CompilerConfigurationBlock.pb_unused_local.label"); addComboBox(warningsComposite, label, org.eclipse.jdt.internal.ui.preferences.CompilerConfigurationBlock.PREF_PB_UNUSED_LOCAL, errorWarningIgnore, errorWarningIgnoreLabels, 0); label = org.eclipse.jdt.internal.ui.JavaUIMessages.getString("CompilerConfigurationBlock.pb_overriding_pkg_dflt.label"); addComboBox(warningsComposite, label, org.eclipse.jdt.internal.ui.preferences.CompilerConfigurationBlock.PREF_PB_OVERRIDING_PACKAGE_DEFAULT_METHOD, errorWarningIgnore, errorWarningIgnoreLabels, 0); label = org.eclipse.jdt.internal.ui.JavaUIMessages.getString("CompilerConfigurationBlock.pb_method_naming.label"); addComboBox(warningsComposite, label, org.eclipse.jdt.internal.ui.preferences.CompilerConfigurationBlock.PREF_PB_METHOD_WITH_CONSTRUCTOR_NAME, errorWarningIgnore, errorWarningIgnoreLabels, 0); label = org.eclipse.jdt.internal.ui.JavaUIMessages.getString("CompilerConfigurationBlock.pb_hidden_catchblock.label"); addComboBox(warningsComposite, label, org.eclipse.jdt.internal.ui.preferences.CompilerConfigurationBlock.PREF_PB_HIDDEN_CATCH_BLOCK, errorWarningIgnore, errorWarningIgnoreLabels, 0); label = org.eclipse.jdt.internal.ui.JavaUIMessages.getString("CompilerConfigurationBlock.pb_unused_imports.label"); addComboBox(warningsComposite, label, org.eclipse.jdt.internal.ui.preferences.CompilerConfigurationBlock.PREF_PB_UNUSED_IMPORT, errorWarningIgnore, errorWarningIgnoreLabels, 0); label = org.eclipse.jdt.internal.ui.JavaUIMessages.getString("CompilerConfigurationBlock.pb_unused_parameter.label"); addComboBox(warningsComposite, label, org.eclipse.jdt.internal.ui.preferences.CompilerConfigurationBlock.PREF_PB_UNUSED_PARAMETER, errorWarningIgnore, errorWarningIgnoreLabels, 0); label = org.eclipse.jdt.internal.ui.JavaUIMessages.getString("CompilerConfigurationBlock.pb_static_access_receiver.label"); addComboBox(warningsComposite, label, org.eclipse.jdt.internal.ui.preferences.CompilerConfigurationBlock.PREF_PB_STATIC_ACCESS_RECEIVER, errorWarningIgnore, errorWarningIgnoreLabels, 0); label = org.eclipse.jdt.internal.ui.JavaUIMessages.getString("CompilerConfigurationBlock.pb_synth_access_emul.label"); addComboBox(warningsComposite, label, org.eclipse.jdt.internal.ui.preferences.CompilerConfigurationBlock.PREF_PB_SYNTHETIC_ACCESS_EMULATION, errorWarningIgnore, errorWarningIgnoreLabels, 0); label = org.eclipse.jdt.internal.ui.JavaUIMessages.getString("CompilerConfigurationBlock.pb_no_effect_assignment.label"); addComboBox(warningsComposite, label, org.eclipse.jdt.internal.ui.preferences.CompilerConfigurationBlock.PREF_PB_NO_EFFECT_ASSIGNMENT, errorWarningIgnore, errorWarningIgnoreLabels, 0); label = org.eclipse.jdt.internal.ui.JavaUIMessages.getString("CompilerConfigurationBlock.pb_max_per_unit.label"); org.eclipse.swt.widgets.Text text = addTextField(warningsComposite, label, org.eclipse.jdt.internal.ui.preferences.CompilerConfigurationBlock.PREF_PB_MAX_PER_UNIT); text.setTextLimit(6); return warningsComposite; }
private boolean handleExceptions(org.eclipse.jdt.core.dom.IMethodBinding binding, org.eclipse.jdt.core.dom.AST ast) { if (binding == null) return true; org.eclipse.jdt.core.dom.ITypeBinding[] exceptions = binding.getExceptionTypes(); for (int i = 0; i < (exceptions.length); i++) { org.eclipse.jdt.core.dom.ITypeBinding exception = exceptions[i]; if (!(org.eclipse.jdt.internal.corext.dom.Bindings.isRuntimeException(exception, ast))) addException(exception); } return true; }
private java.lang.String computeJavadocIndent(org.eclipse.jface.text.IDocument document, int line, org.eclipse.jdt.internal.ui.text.JavaHeuristicScanner scanner) throws org.eclipse.jface.text.BadLocationException { if (line == 0) return null; org.eclipse.jface.text.IRegion previousLine = document.getLineInformation((line - 1)); int start = previousLine.getOffset(); int end = start + (previousLine.getLength()); int firstNonWS = scanner.findNonWhitespaceForwardInAnyPartition(start, end); if (firstNonWS == (org.eclipse.jdt.internal.ui.text.JavaHeuristicScanner.NOT_FOUND)) return document.get(start, (end - start)); java.lang.StringBuffer buf = new java.lang.StringBuffer(); java.lang.String indentation = document.get(start, (firstNonWS - start)); buf.append(indentation); if ((document.getChar(firstNonWS)) == '/') buf.append(' '); return buf.toString(); }
private void enterLinkedMode(org.eclipse.jdt.internal.corext.refactoring.changes.CompilationUnitChange change, org.eclipse.jface.text.ITextViewer viewer, org.eclipse.jdt.internal.corext.textmanipulation.GroupDescription[] linked, org.eclipse.jdt.internal.corext.textmanipulation.GroupDescription selection) throws org.eclipse.jface.text.BadLocationException { org.eclipse.jdt.internal.ui.text.link.LinkedPositionManager manager = new org.eclipse.jdt.internal.ui.text.link.LinkedPositionManager(viewer.getDocument()); org.eclipse.jdt.internal.ui.text.link.LinkedPositionUI editor = new org.eclipse.jdt.internal.ui.text.link.LinkedPositionUI(viewer, manager); for (int i = 0; i < (linked.length); i++) { org.eclipse.jdt.internal.corext.textmanipulation.GroupDescription curr = linked[i]; java.lang.String name = curr.getName(); org.eclipse.text.edits.TextEdit[] textEdits = curr.getTextEdits(); if ((name != null) && ((textEdits.length) > 0)) { org.eclipse.jface.text.IRegion range = change.getNewTextRange(textEdits); if (range != null) { org.eclipse.jface.text.contentassist.ICompletionProposal[] linkedModeProposals = getLinkedModeProposals(name); if ((linkedModeProposals != null) && ((linkedModeProposals.length) > 1)) { manager.addPosition(range.getOffset(), range.getLength(), name, linkedModeProposals); } else { manager.addPosition(range.getOffset(), range.getLength(), name); } if (i == 0) { editor.setInitialOffset(range.getOffset()); } } } } if (selection != null) { org.eclipse.text.edits.TextEdit[] textEdits = selection.getTextEdits(); if ((textEdits.length) > 0) { org.eclipse.jface.text.IRegion range = change.getNewTextRange(textEdits); if (range != null) editor.setFinalCaretOffset(((range.getOffset()) + (range.getLength()))); } } else { int cursorPosition = viewer.getSelectedRange().x; if (cursorPosition != 0) { editor.setFinalCaretOffset(cursorPosition); } } editor.enter(); org.eclipse.jface.text.IRegion region = editor.getSelectedRegion(); viewer.setSelectedRange(region.getOffset(), region.getLength()); viewer.revealRange(region.getOffset(), region.getLength()); }
private java.lang.String[] suggestVariableName(java.lang.String type, java.lang.String[] excludes) throws java.lang.IllegalArgumentException { int dim = 0; while (type.endsWith("[]")) { dim++; type = type.substring(0, ((type.length()) - 2)); } org.eclipse.jdt.core.IJavaProject project = getJavaProject(); if (project != null) return org.eclipse.jdt.core.NamingConventions.suggestLocalVariableNames(project, "", type, dim, excludes); return new java.lang.String[]{ org.eclipse.jdt.core.Signature.getSimpleName(type).toLowerCase() }; }
private void getProjects(java.util.List selectedElements, java.util.Iterator iter) { while (iter.hasNext()) { java.lang.Object selectedElement = iter.next(); org.eclipse.jdt.core.IJavaElement elem = getSelectableJavaElement(selectedElement); if (elem != null) { org.eclipse.jdt.core.IJavaProject jproj = elem.getJavaProject(); if (jproj != null) { if (!(fProjects.contains(jproj))) fProjects.add(jproj); selectedElements.add(elem); } } } if (fProjects.isEmpty()) { try { org.eclipse.jdt.core.IJavaProject[] jprojects = org.eclipse.jdt.core.JavaCore.create(fRoot).getJavaProjects(); for (int i = 0; i < (jprojects.length); i++) { org.eclipse.jdt.core.IJavaProject iJavaProject = jprojects[i]; if (getValidProject(iJavaProject)) { fProjects.add(iJavaProject); break; } } } catch (org.eclipse.jdt.core.JavaModelException e) { org.eclipse.jdt.internal.ui.JavaPlugin.log(e); } } }
private void saveSize() { if ((fCurrentPage) instanceof org.eclipse.ltk.internal.ui.refactoring.PreviewWizardPage) { org.eclipse.swt.widgets.Control control = fPageContainer.getTopPage(); org.eclipse.swt.graphics.Point size = control.getSize(); fSettings.put(org.eclipse.ltk.internal.ui.refactoring.RefactoringWizardDialog2.WIDTH, size.x); fSettings.put(org.eclipse.ltk.internal.ui.refactoring.RefactoringWizardDialog2.HEIGHT, size.y); } }
private org.eclipse.jdt.internal.ui.search.JavaSearchPage.SearchPatternData trySelection(org.eclipse.jface.viewers.ISelection selection) { org.eclipse.jdt.internal.ui.search.JavaSearchPage.SearchPatternData result = null; if (selection == null) return result; java.lang.Object o = null; if (selection instanceof org.eclipse.jface.viewers.IStructuredSelection) o = ((org.eclipse.jface.viewers.IStructuredSelection) (selection)).getFirstElement(); if (o instanceof org.eclipse.jdt.core.IJavaElement) { fJavaElement = ((org.eclipse.jdt.core.IJavaElement) (o)); result = determineInitValuesFrom(fJavaElement); } else if (o instanceof org.eclipse.search.ui.ISearchResultViewEntry) { fJavaElement = getJavaElement(((org.eclipse.search.ui.ISearchResultViewEntry) (o)).getSelectedMarker()); result = determineInitValuesFrom(fJavaElement); } else if (o instanceof org.eclipse.core.runtime.IAdaptable) { org.eclipse.jdt.core.IJavaElement element = ((org.eclipse.jdt.core.IJavaElement) (((org.eclipse.core.runtime.IAdaptable) (o)).getAdapter(org.eclipse.jdt.core.IJavaElement.class))); if (element != null) { result = determineInitValuesFrom(element); } else { org.eclipse.ui.model.IWorkbenchAdapter adapter = ((org.eclipse.ui.model.IWorkbenchAdapter) (((org.eclipse.core.runtime.IAdaptable) (o)).getAdapter(org.eclipse.ui.model.IWorkbenchAdapter.class))); result = new org.eclipse.jdt.internal.ui.search.JavaSearchPage.SearchPatternData(org.eclipse.jdt.core.search.IJavaSearchConstants.TYPE, org.eclipse.jdt.core.search.IJavaSearchConstants.REFERENCES, adapter.getLabel(o), null); } } return result; }
@java.lang.Override public org.eclipse.swt.graphics.Point computeSizeHint() { org.eclipse.swt.graphics.Point preferedSize = getShell().computeSize(SWT.DEFAULT, SWT.DEFAULT, true); org.eclipse.swt.graphics.Point constrains = getSizeConstraints(); if (constrains == null) return preferedSize; int trimWidth = getShell().computeTrim(0, 0, 0, 0).width; org.eclipse.swt.graphics.Point constrainedSize = getShell().computeSize(((constrains.x) - trimWidth), SWT.DEFAULT, true); int width = java.lang.Math.min(preferedSize.x, constrainedSize.x); int height = java.lang.Math.max(preferedSize.y, constrainedSize.y); return new org.eclipse.swt.graphics.Point(width, height); }
private void checkElementExistence(org.eclipse.ui.IWorkingSet workingSet) { java.util.List elements = new java.util.ArrayList(java.util.Arrays.asList(workingSet.getElements())); boolean changed = false; for (java.util.Iterator iter = elements.iterator(); iter.hasNext();) { org.eclipse.core.runtime.IAdaptable element = ((org.eclipse.core.runtime.IAdaptable) (iter.next())); boolean remove = false; if (element instanceof org.eclipse.jdt.core.IJavaElement) { org.eclipse.jdt.core.IJavaElement jElement = ((org.eclipse.jdt.core.IJavaElement) (element)); if (jElement instanceof org.eclipse.jdt.core.IJavaProject) { remove = !(jElement.exists()); } else { final org.eclipse.jdt.core.IJavaProject javaProject = jElement.getJavaProject(); final boolean isProjectOpen = (javaProject != null) ? javaProject.getProject().isOpen() : true; remove = isProjectOpen && (!(jElement.exists())); } } else if (element instanceof org.eclipse.core.resources.IResource) { org.eclipse.core.resources.IResource resource = ((org.eclipse.core.resources.IResource) (element)); if (resource instanceof org.eclipse.core.resources.IProject) { remove = !(resource.exists()); } else { org.eclipse.core.resources.IProject project = resource.getProject(); remove = (project != null ? project.isOpen() : true) && (!(resource.exists())); } } if (remove) { iter.remove(); changed = true; } } if (changed) { workingSet.setElements(((org.eclipse.core.runtime.IAdaptable[]) (elements.toArray(new org.eclipse.core.runtime.IAdaptable[elements.size()])))); } }
private RenameCompilationUnitChange(org.eclipse.core.runtime.IPath resourcePath, java.lang.String oldName, java.lang.String newName, long stampToRestore) { super(resourcePath, oldName, newName, stampToRestore); setValidationMethod(((VALIDATE_NOT_READ_ONLY) | (SAVE_IF_DIRTY))); }
private boolean doesIndexStartFromZero(org.eclipse.jdt.core.dom.Name indexName, org.eclipse.jdt.core.dom.ASTNode declaringNode) { org.eclipse.jdt.core.dom.IBinding binding = indexName.resolveBinding(); if (org.eclipse.jdt.internal.corext.dom.Bindings.equals(fIndexBinding, binding)) { org.eclipse.jdt.core.dom.Expression initializer = null; if (declaringNode instanceof org.eclipse.jdt.core.dom.VariableDeclarationFragment) { initializer = ((org.eclipse.jdt.core.dom.VariableDeclarationFragment) (declaringNode)).getInitializer(); } else if (declaringNode instanceof org.eclipse.jdt.core.dom.Assignment) { initializer = ((org.eclipse.jdt.core.dom.Assignment) (declaringNode)).getRightHandSide(); } if (initializer instanceof org.eclipse.jdt.core.dom.NumberLiteral) { org.eclipse.jdt.core.dom.NumberLiteral number = ((org.eclipse.jdt.core.dom.NumberLiteral) (initializer)); if (!("0".equals(number.getToken()))) { return false; } } else { return false; } } return true; }
public void createType(org.eclipse.core.runtime.IProgressMonitor monitor) throws java.lang.InterruptedException, org.eclipse.core.runtime.CoreException { monitor.beginTask(org.eclipse.jdt.internal.ui.wizards.NewWizardMessages.getString("TypePage.operationdesc"), 10); org.eclipse.jdt.core.IPackageFragmentRoot root = getPackageFragmentRoot(); org.eclipse.jdt.core.IPackageFragment pack = getPackageFragment(); if (pack == null) { pack = root.getPackageFragment(""); } if (!(pack.exists())) { java.lang.String packName = pack.getElementName(); pack = root.createPackageFragment(packName, true, null); } monitor.worked(1); java.lang.String clName = fTypeNameDialogField.getText(); boolean isInnerClass = isEnclosingTypeSelected(); org.eclipse.jdt.core.IType createdType; org.eclipse.jdt.internal.ui.codemanipulation.ImportsStructure imports; int indent = 0; java.lang.String[] prefOrder = org.eclipse.jdt.internal.ui.preferences.ImportOrganizePreferencePage.getImportOrderPreference(); int threshold = org.eclipse.jdt.internal.ui.preferences.ImportOrganizePreferencePage.getImportNumberThreshold(); java.lang.String lineDelimiter = null; if (!isInnerClass) { org.eclipse.jdt.core.ICompilationUnit parentCU = pack.getCompilationUnit((clName + ".java")); imports = new org.eclipse.jdt.internal.ui.codemanipulation.ImportsStructure(parentCU, prefOrder, threshold, false); lineDelimiter = org.eclipse.jdt.internal.ui.codemanipulation.StubUtility.getLineDelimiterUsed(parentCU); java.lang.String content = createTypeBody(imports, lineDelimiter); createdType = parentCU.createType(content, null, false, new org.eclipse.core.runtime.SubProgressMonitor(monitor, 5)); } else { org.eclipse.jdt.core.IType enclosingType = getEnclosingType(); org.eclipse.jdt.core.IType workingCopy = ((org.eclipse.jdt.core.IType) (org.eclipse.jdt.internal.ui.javaeditor.EditorUtility.getWorkingCopy(enclosingType))); if (workingCopy != null) { enclosingType = workingCopy; } org.eclipse.jdt.core.ICompilationUnit parentCU = enclosingType.getCompilationUnit(); imports = new org.eclipse.jdt.internal.ui.codemanipulation.ImportsStructure(parentCU, prefOrder, threshold, true); lineDelimiter = org.eclipse.jdt.internal.ui.codemanipulation.StubUtility.getLineDelimiterUsed(enclosingType); java.lang.String content = createTypeBody(imports, lineDelimiter); org.eclipse.jdt.core.IJavaElement[] elems = enclosingType.getChildren(); org.eclipse.jdt.core.IJavaElement sibling = ((elems.length) > 0) ? elems[0] : null; createdType = enclosingType.createType(content, sibling, false, new org.eclipse.core.runtime.SubProgressMonitor(monitor, 1)); indent = (org.eclipse.jdt.internal.ui.codemanipulation.StubUtility.getIndentUsed(enclosingType)) + 1; } imports.create((!isInnerClass), new org.eclipse.core.runtime.SubProgressMonitor(monitor, 1)); java.lang.String[] methods = evalMethods(createdType, imports, new org.eclipse.core.runtime.SubProgressMonitor(monitor, 1)); if ((methods.length) > 0) { for (int i = 0; i < (methods.length); i++) { createdType.createMethod(methods[i], null, false, null); } imports.create((!isInnerClass), null); } monitor.worked(1); java.lang.String formattedContent = org.eclipse.jdt.internal.ui.codemanipulation.StubUtility.codeFormat(createdType.getSource(), indent, lineDelimiter); org.eclipse.jdt.core.ISourceRange range = createdType.getSourceRange(); org.eclipse.jdt.core.IBuffer buf = createdType.getCompilationUnit().getBuffer(); buf.replace(range.getOffset(), range.getLength(), formattedContent); if (!isInnerClass) { buf.save(new org.eclipse.core.runtime.SubProgressMonitor(monitor, 1), false); } else { monitor.worked(1); } fCreatedType = createdType; monitor.done(); }
private boolean getSplitVariableProposals(org.eclipse.jdt.ui.text.java.IInvocationContext context, org.eclipse.jdt.core.dom.ASTNode node, java.util.Collection resultingCollections) { org.eclipse.jdt.core.dom.VariableDeclarationFragment fragment; if (node instanceof org.eclipse.jdt.core.dom.VariableDeclarationFragment) { fragment = ((org.eclipse.jdt.core.dom.VariableDeclarationFragment) (node)); } else if ((node.getLocationInParent()) == (org.eclipse.jdt.core.dom.VariableDeclarationFragment.NAME_PROPERTY)) { fragment = ((org.eclipse.jdt.core.dom.VariableDeclarationFragment) (node.getParent())); } else { return false; } if ((fragment.getInitializer()) == null) { return false; } org.eclipse.jdt.core.dom.Statement statement; org.eclipse.jdt.core.dom.ASTNode fragParent = fragment.getParent(); if (fragParent instanceof org.eclipse.jdt.core.dom.VariableDeclarationStatement) { statement = ((org.eclipse.jdt.core.dom.VariableDeclarationStatement) (fragParent)); } else if (fragParent instanceof org.eclipse.jdt.core.dom.VariableDeclarationExpression) { statement = ((org.eclipse.jdt.core.dom.Statement) (fragParent.getParent())); } else { return false; } org.eclipse.jdt.core.dom.ASTNode statementParent = statement.getParent(); org.eclipse.jdt.core.dom.StructuralPropertyDescriptor property = statement.getLocationInParent(); if (!(property.isChildListProperty())) { return false; } java.util.List list = ((java.util.List) (statementParent.getStructuralProperty(property))); if (resultingCollections == null) { return true; } org.eclipse.jdt.core.dom.AST ast = statement.getAST(); org.eclipse.jdt.core.dom.rewrite.ASTRewrite rewrite = org.eclipse.jdt.core.dom.rewrite.ASTRewrite.create(ast); java.lang.String label = CorrectionMessages.QuickAssistProcessor_splitdeclaration_description; org.eclipse.swt.graphics.Image image = org.eclipse.jdt.internal.ui.JavaPluginImages.get(JavaPluginImages.IMG_CORRECTION_LOCAL); org.eclipse.jdt.internal.ui.text.correction.ASTRewriteCorrectionProposal proposal = new org.eclipse.jdt.internal.ui.text.correction.ASTRewriteCorrectionProposal(label, context.getCompilationUnit(), rewrite, 1, image); org.eclipse.jdt.core.dom.Statement newStatement; int insertIndex = list.indexOf(statement); org.eclipse.jdt.core.dom.Expression placeholder = ((org.eclipse.jdt.core.dom.Expression) (rewrite.createMoveTarget(fragment.getInitializer()))); org.eclipse.jdt.core.dom.Assignment assignment = ast.newAssignment(); assignment.setRightHandSide(placeholder); assignment.setLeftHandSide(ast.newSimpleName(fragment.getName().getIdentifier())); if (statement instanceof org.eclipse.jdt.core.dom.VariableDeclarationStatement) { newStatement = ast.newExpressionStatement(assignment); insertIndex += 1; org.eclipse.jdt.core.dom.Modifier modifierNode = org.eclipse.jdt.internal.corext.dom.ASTNodes.findModifierNode(org.eclipse.jdt.core.dom.Modifier.FINAL, ((org.eclipse.jdt.core.dom.VariableDeclarationStatement) (statement)).modifiers()); if (modifierNode != null) { rewrite.remove(modifierNode, null); } } else { rewrite.replace(fragment.getParent(), assignment, null); org.eclipse.jdt.core.dom.VariableDeclarationFragment newFrag = ast.newVariableDeclarationFragment(); newFrag.setName(ast.newSimpleName(fragment.getName().getIdentifier())); newFrag.setExtraDimensions(fragment.getExtraDimensions()); org.eclipse.jdt.core.dom.VariableDeclarationExpression oldVarDecl = ((org.eclipse.jdt.core.dom.VariableDeclarationExpression) (fragParent)); org.eclipse.jdt.core.dom.VariableDeclarationStatement newVarDec = ast.newVariableDeclarationStatement(newFrag); newVarDec.setType(((org.eclipse.jdt.core.dom.Type) (org.eclipse.jdt.core.dom.ASTNode.copySubtree(ast, oldVarDecl.getType())))); newVarDec.modifiers().addAll(org.eclipse.jdt.internal.corext.dom.ASTNodeFactory.newModifiers(ast, ((oldVarDecl.getModifiers()) & (~(org.eclipse.jdt.core.dom.Modifier.FINAL))))); newStatement = newVarDec; } org.eclipse.jdt.core.dom.rewrite.ListRewrite listRewriter = rewrite.getListRewrite(statementParent, ((org.eclipse.jdt.core.dom.ChildListPropertyDescriptor) (property))); listRewriter.insertAt(newStatement, insertIndex, null); resultingCollections.add(proposal); return true; }
private boolean updateNameReference(org.eclipse.jdt.core.dom.ITypeBinding[] parameters, org.eclipse.jdt.core.dom.Name name, org.eclipse.jdt.internal.corext.refactoring.structure.CompilationUnitRewrite targetRewrite, org.eclipse.text.edits.TextEditGroup group) { if (name instanceof org.eclipse.jdt.core.dom.SimpleName) return false; if (org.eclipse.jdt.internal.corext.dom.ASTNodes.asString(name).equals(fType.getFullyQualifiedName('.'))) { targetRewrite.getASTRewrite().replace(name, name.getAST().newName(fTypeComponents), group); targetRewrite.getImportRemover().registerRemovedNode(name); return true; } targetRewrite.getASTRewrite().replace(name, name.getAST().newSimpleName(fType.getElementName()), group); targetRewrite.getImportRemover().registerRemovedNode(name); return true; }
protected void run(org.eclipse.jface.text.ITextSelection selection) { org.eclipse.swt.widgets.Shell shell = getShell(); try { org.eclipse.jdt.core.IType type = org.eclipse.jdt.internal.ui.actions.SelectionConverter.getTypeAtOffset(fEditor); if (type != null) { if ((!(org.eclipse.jdt.internal.ui.util.ElementValidator.check(type, shell, getDialogTitle(), false))) || (!(org.eclipse.jdt.internal.ui.actions.ActionUtil.isProcessable(shell, type)))) { return; } run(shell, type, fEditor); } else { org.eclipse.jface.dialogs.MessageDialog.openInformation(shell, getDialogTitle(), org.eclipse.jdt.internal.ui.actions.ActionMessages.getString("OverrideMethodsAction.not_applicable")); } } catch (org.eclipse.jdt.core.JavaModelException e) { org.eclipse.jdt.internal.ui.util.ExceptionHandler.handle(e, getShell(), getDialogTitle(), null); } }
public boolean canDoOperation(int operation) { if (operation == (org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor.CORRECTIONASSIST_PROPOSALS)) return isEditable(); return super.canDoOperation(operation); }
public void init(org.eclipse.jdt.core.IJavaProject jproject, org.eclipse.core.runtime.IPath outputLocation, org.eclipse.jdt.core.IClasspathEntry[] classpathEntries) { fCurrJProject = jproject; boolean projectExists = false; java.util.List newClassPath = null; try { org.eclipse.core.resources.IProject project = fCurrJProject.getProject(); projectExists = (project.exists()) && (project.getFile(".classpath").exists()); if (projectExists) { if (outputLocation == null) { outputLocation = fCurrJProject.getOutputLocation(); } if (classpathEntries == null) { classpathEntries = fCurrJProject.getRawClasspath(); } } if (outputLocation == null) { outputLocation = getDefaultBuildPath(jproject); } if (classpathEntries != null) { newClassPath = getExistingEntries(classpathEntries); } } catch (org.eclipse.core.runtime.CoreException e) { org.eclipse.jdt.internal.ui.JavaPlugin.log(e); } if (newClassPath == null) { newClassPath = getDefaultClassPath(jproject); } java.util.List exportedEntries = new java.util.ArrayList(); for (int i = 0; i < (newClassPath.size()); i++) { org.eclipse.jdt.internal.ui.wizards.buildpaths.CPListElement curr = ((org.eclipse.jdt.internal.ui.wizards.buildpaths.CPListElement) (newClassPath.get(i))); if ((curr.isExported()) || ((curr.getEntryKind()) == (org.eclipse.jdt.core.IClasspathEntry.CPE_SOURCE))) { exportedEntries.add(curr); } } fBuildPathDialogField.setText(outputLocation.makeRelative().toString()); fBuildPathDialogField.enableButton(projectExists); fClassPathList.setElements(newClassPath); fClassPathList.setCheckedElements(exportedEntries); if ((fSourceContainerPage) != null) { fSourceContainerPage.init(fCurrJProject); fProjectsPage.init(fCurrJProject); fLibrariesPage.init(fCurrJProject); } doStatusLineUpdate(); }
public static void getInitializerLabel(org.eclipse.jdt.core.IInitializer initializer, int flags, java.lang.StringBuffer buf) { if (org.eclipse.jdt.internal.ui.viewsupport.JavaElementLabels.getFlag(flags, org.eclipse.jdt.internal.ui.viewsupport.JavaElementLabels.I_FULLY_QUALIFIED)) { org.eclipse.jdt.internal.ui.viewsupport.JavaElementLabels.getTypeLabel(initializer.getDeclaringType(), ((org.eclipse.jdt.internal.ui.viewsupport.JavaElementLabels.T_FULLY_QUALIFIED) | (flags & (org.eclipse.jdt.internal.ui.viewsupport.JavaElementLabels.P_COMPRESSED))), buf); buf.append('.'); } buf.append(org.eclipse.jdt.internal.ui.JavaUIMessages.getString("JavaElementLabels.initializer")); if (org.eclipse.jdt.internal.ui.viewsupport.JavaElementLabels.getFlag(flags, org.eclipse.jdt.internal.ui.viewsupport.JavaElementLabels.I_POST_QUALIFIED)) { buf.append(org.eclipse.jdt.internal.ui.viewsupport.JavaElementLabels.CONCAT_STRING); org.eclipse.jdt.internal.ui.viewsupport.JavaElementLabels.getTypeLabel(initializer.getDeclaringType(), ((org.eclipse.jdt.internal.ui.viewsupport.JavaElementLabels.T_FULLY_QUALIFIED) | (flags & (org.eclipse.jdt.internal.ui.viewsupport.JavaElementLabels.P_COMPRESSED))), buf); } }
public org.eclipse.ui.IMarkerResolution[] getResolutions(org.eclipse.core.resources.IMarker marker) { final org.eclipse.swt.widgets.Shell shell = org.eclipse.jdt.internal.ui.JavaPlugin.getActiveWorkbenchShell(); if ((!(hasResolutions(marker))) || (shell == null)) { return org.eclipse.jdt.internal.ui.wizards.buildpaths.UserLibraryMarkerResolutionGenerator.NO_RESOLUTION; } java.util.ArrayList resolutions = new java.util.ArrayList(); final org.eclipse.jdt.core.IJavaProject project = getJavaProject(marker); int id = marker.getAttribute(org.eclipse.jdt.core.IJavaModelMarker.ID, (-1)); if (id == (org.eclipse.jdt.core.IJavaModelStatusConstants.CP_CONTAINER_PATH_UNBOUND)) { java.lang.String[] arguments = org.eclipse.jdt.core.CorrectionEngine.getProblemArguments(marker); final org.eclipse.core.runtime.IPath path = new org.eclipse.core.runtime.Path(arguments[0]); if (path.segment(0).equals(org.eclipse.jdt.core.JavaCore.USER_LIBRARY_CONTAINER_ID)) { java.lang.String label = org.eclipse.jdt.internal.ui.wizards.NewWizardMessages.UserLibraryMarkerResolutionGenerator_changetouserlib_label; org.eclipse.swt.graphics.Image image = org.eclipse.jdt.internal.ui.JavaPluginImages.get(JavaPluginImages.IMG_CORRECTION_RENAME); resolutions.add(new org.eclipse.jdt.internal.ui.wizards.buildpaths.UserLibraryMarkerResolutionGenerator.UserLibraryMarkerResolution(label, image) { public void run(org.eclipse.core.resources.IMarker m) { changeToExistingLibrary(shell, path, false, project); } }); if ((path.segmentCount()) == 2) { java.lang.String label2 = org.eclipse.jdt.internal.corext.util.Messages.format(NewWizardMessages.UserLibraryMarkerResolutionGenerator_createuserlib_label, path.segment(1)); org.eclipse.swt.graphics.Image image2 = org.eclipse.jdt.internal.ui.JavaPluginImages.get(JavaPluginImages.IMG_CORRECTION_ADD); resolutions.add(new org.eclipse.jdt.internal.ui.wizards.buildpaths.UserLibraryMarkerResolutionGenerator.UserLibraryMarkerResolution(label2, image2) { public void run(org.eclipse.core.resources.IMarker m) { createUserLibrary(shell, path); } }); } } java.lang.String label = org.eclipse.jdt.internal.ui.wizards.NewWizardMessages.UserLibraryMarkerResolutionGenerator_changetoother; org.eclipse.swt.graphics.Image image = org.eclipse.jdt.internal.ui.JavaPluginImages.get(JavaPluginImages.IMG_CORRECTION_RENAME); resolutions.add(new org.eclipse.jdt.internal.ui.wizards.buildpaths.UserLibraryMarkerResolutionGenerator.UserLibraryMarkerResolution(label, image) { public void run(org.eclipse.core.resources.IMarker m) { changeToExistingLibrary(shell, path, true, project); } }); } if (project != null) { resolutions.add(new org.eclipse.jdt.internal.ui.wizards.buildpaths.UserLibraryMarkerResolutionGenerator.OpenBuildPathMarkerResolution(project)); } return ((org.eclipse.ui.IMarkerResolution[]) (resolutions.toArray(new org.eclipse.ui.IMarkerResolution[resolutions.size()]))); }
public static void addUnusedMemberProposal(org.eclipse.jdt.internal.ui.text.correction.ICorrectionContext context, java.util.List proposals) throws org.eclipse.core.runtime.CoreException { org.eclipse.jdt.core.dom.ASTNode selectedNode = context.getCoveringNode(); if (selectedNode == null) { return; } org.eclipse.jdt.core.dom.BodyDeclaration declaration = org.eclipse.jdt.internal.ui.text.correction.ASTResolving.findParentBodyDeclaration(selectedNode); if (declaration != null) { org.eclipse.jdt.core.dom.ASTNode nodeToRemove = declaration; if ((declaration.getNodeType()) == (org.eclipse.jdt.core.dom.ASTNode.FIELD_DECLARATION)) { java.util.List fragments = ((org.eclipse.jdt.core.dom.FieldDeclaration) (declaration)).fragments(); if ((fragments.size()) > 1) { for (int i = 0; i < (fragments.size()); i++) { org.eclipse.jdt.core.dom.VariableDeclarationFragment node = ((org.eclipse.jdt.core.dom.VariableDeclarationFragment) (fragments.get(i))); if (org.eclipse.jdt.internal.corext.dom.ASTNodes.isParent(selectedNode, node)) { nodeToRemove = node; break; } } } } org.eclipse.jdt.internal.corext.dom.ASTRewrite rewrite = new org.eclipse.jdt.internal.corext.dom.ASTRewrite(nodeToRemove.getParent()); rewrite.markAsRemoved(nodeToRemove); java.lang.String label = org.eclipse.jdt.internal.ui.text.correction.CorrectionMessages.getString("LocalCorrectionsSubProcessor.removeunusedmember.description"); org.eclipse.swt.graphics.Image image = org.eclipse.jdt.internal.ui.JavaPluginImages.get(JavaPluginImages.IMG_CORRECTION_CHANGE); org.eclipse.jdt.internal.ui.text.correction.ASTRewriteCorrectionProposal proposal = new org.eclipse.jdt.internal.ui.text.correction.ASTRewriteCorrectionProposal(label, context.getCompilationUnit(), rewrite, 6, image); proposal.ensureNoModifications(); proposals.add(proposal); } }
private boolean handleValueTag(org.eclipse.jdt.core.dom.TagElement node) { java.util.List fragments = node.fragments(); try { if (fragments.isEmpty()) { if ((((fMember) instanceof org.eclipse.jdt.core.IField) && (org.eclipse.jdt.core.Flags.isStatic(fMember.getFlags()))) && (org.eclipse.jdt.core.Flags.isFinal(fMember.getFlags()))) { org.eclipse.jdt.core.IField field = ((org.eclipse.jdt.core.IField) (fMember)); return handleConstantValue(field, false); } } else if ((fragments.size()) == 1) { java.lang.Object first = fragments.get(0); if (first instanceof org.eclipse.jdt.core.dom.MemberRef) { org.eclipse.jdt.core.dom.MemberRef memberRef = ((org.eclipse.jdt.core.dom.MemberRef) (first)); if ((memberRef.getQualifier()) == null) { org.eclipse.jdt.core.dom.SimpleName name = memberRef.getName(); org.eclipse.jdt.core.IField field = fMember.getDeclaringType().getField(name.getIdentifier()); if ((((field != null) && (field.exists())) && (org.eclipse.jdt.core.Flags.isStatic(fMember.getFlags()))) && (org.eclipse.jdt.core.Flags.isFinal(fMember.getFlags()))) return handleConstantValue(field, true); } } } } catch (org.eclipse.jdt.core.JavaModelException e) { org.eclipse.jdt.internal.ui.JavaPlugin.log(e); } return false; }
private static boolean getVariableLabel(org.eclipse.jdt.core.IPackageFragmentRoot root, long flags, java.lang.StringBuffer buf) { try { org.eclipse.jdt.core.IClasspathEntry rawEntry = root.getRawClasspathEntry(); if ((rawEntry != null) && ((rawEntry.getEntryKind()) == (org.eclipse.jdt.core.IClasspathEntry.CPE_VARIABLE))) { org.eclipse.core.runtime.IPath path = rawEntry.getPath().makeRelative(); if (org.eclipse.jdt.ui.JavaElementLabels.getFlag(flags, org.eclipse.jdt.ui.JavaElementLabels.REFERENCED_ROOT_POST_QUALIFIED)) { int segements = path.segmentCount(); if (segements > 0) { buf.append(path.segment((segements - 1))); if (segements > 1) { buf.append(org.eclipse.jdt.ui.JavaElementLabels.CONCAT_STRING); buf.append(path.removeLastSegments(1).toOSString()); } } else { buf.append(path.toString()); } } else { buf.append(path.toString()); } buf.append(org.eclipse.jdt.ui.JavaElementLabels.CONCAT_STRING); } if (root.isExternal()) buf.append(root.getPath().toOSString()); else buf.append(root.getPath().makeRelative().toString()); return true; } catch (org.eclipse.jdt.core.JavaModelException e) { org.eclipse.jdt.internal.ui.JavaPlugin.log(e); } return false; }
private org.eclipse.jdt.core.ICompilationUnit[] getCompilationUnits(org.eclipse.jface.viewers.IStructuredSelection selection) { java.util.HashSet result = new java.util.HashSet(); java.lang.Object[] selected = selection.toArray(); for (int i = 0; i < (selected.length); i++) { try { if ((selected[i]) instanceof org.eclipse.jdt.core.IJavaElement) { org.eclipse.jdt.core.IJavaElement elem = ((org.eclipse.jdt.core.IJavaElement) (selected[i])); switch (elem.getElementType()) { case org.eclipse.jdt.core.IJavaElement.COMPILATION_UNIT : result.add(elem); break; case org.eclipse.jdt.core.IJavaElement.IMPORT_CONTAINER : result.add(elem.getParent()); break; case org.eclipse.jdt.core.IJavaElement.PACKAGE_FRAGMENT : collectCompilationUnits(((org.eclipse.jdt.core.IPackageFragment) (elem)), result); break; case org.eclipse.jdt.core.IJavaElement.PACKAGE_FRAGMENT_ROOT : collectCompilationUnits(((org.eclipse.jdt.core.IPackageFragmentRoot) (elem)), result); break; case org.eclipse.jdt.core.IJavaElement.JAVA_PROJECT : org.eclipse.jdt.core.IPackageFragmentRoot[] roots = ((org.eclipse.jdt.core.IJavaProject) (elem)).getPackageFragmentRoots(); for (int k = 0; k < (roots.length); k++) { collectCompilationUnits(roots[k], result); } break; } } else if ((selected[i]) instanceof org.eclipse.jdt.internal.ui.browsing.LogicalPackage) { org.eclipse.jdt.core.IPackageFragment[] packageFragments = ((org.eclipse.jdt.internal.ui.browsing.LogicalPackage) (selected[i])).getFragments(); for (int k = 0; k < (packageFragments.length); k++) collectCompilationUnits(packageFragments[k], result); } } catch (org.eclipse.jdt.core.JavaModelException e) { org.eclipse.jdt.internal.ui.JavaPlugin.log(e); } } return ((org.eclipse.jdt.core.ICompilationUnit[]) (result.toArray(new org.eclipse.jdt.core.ICompilationUnit[result.size()]))); }
private java.lang.String qualify(java.lang.String typeName) throws org.eclipse.jdt.core.JavaModelException { org.eclipse.jdt.core.IType[] types = fUnit.getTypes(); if ((types.length) == 0) return null; java.lang.String[][] resolvedTypeNames = types[0].resolveType(typeName); if (resolvedTypeNames == null) return null; return ((resolvedTypeNames[0][0]) + '.') + (resolvedTypeNames[0][1]); }
private org.eclipse.ltk.core.refactoring.RefactoringStatus replaceReferences(org.eclipse.jdt.internal.corext.refactoring.structure.ParameterObjectFactory pof, org.eclipse.jdt.internal.corext.refactoring.SearchResultGroup group, org.eclipse.jdt.internal.corext.refactoring.structure.CompilationUnitRewrite cuRewrite) { org.eclipse.text.edits.TextEditGroup writeGroup = cuRewrite.createGroupDescription(RefactoringCoreMessages.ExtractClassRefactoring_group_replace_write); org.eclipse.text.edits.TextEditGroup readGroup = cuRewrite.createGroupDescription(RefactoringCoreMessages.ExtractClassRefactoring_group_replace_read); java.lang.String parameterName = fDescriptor.getFieldName(); org.eclipse.jdt.core.IJavaProject javaProject = cuRewrite.getCu().getJavaProject(); boolean is50OrHigher = org.eclipse.jdt.internal.corext.util.JavaModelUtil.is50OrHigher(javaProject); org.eclipse.jdt.core.dom.AST ast = cuRewrite.getAST(); org.eclipse.ltk.core.refactoring.RefactoringStatus status = new org.eclipse.ltk.core.refactoring.RefactoringStatus(); org.eclipse.jdt.core.search.SearchMatch[] searchResults = group.getSearchResults(); for (int j = 0; j < (searchResults.length); j++) { org.eclipse.jdt.core.search.SearchMatch searchMatch = searchResults[j]; org.eclipse.jdt.core.dom.ASTNode node = org.eclipse.jdt.internal.corext.dom.NodeFinder.perform(cuRewrite.getRoot(), searchMatch.getOffset(), searchMatch.getLength()); org.eclipse.jdt.core.dom.ASTNode parent = node.getParent(); boolean isDeclaration = (parent instanceof org.eclipse.jdt.core.dom.VariableDeclaration) && ((((org.eclipse.jdt.core.dom.VariableDeclaration) (parent)).getInitializer()) != node); if ((!isDeclaration) && (node instanceof org.eclipse.jdt.core.dom.SimpleName)) { org.eclipse.jdt.core.dom.rewrite.ASTRewrite rewrite = cuRewrite.getASTRewrite(); if ((parent.getNodeType()) == (org.eclipse.jdt.core.dom.ASTNode.SWITCH_CASE)) status.addError(RefactoringCoreMessages.ExtractClassRefactoring_error_switch, org.eclipse.jdt.internal.corext.refactoring.base.JavaStatusContext.create(fDescriptor.getType().getTypeRoot(), node)); org.eclipse.jdt.core.dom.SimpleName name = ((org.eclipse.jdt.core.dom.SimpleName) (node)); org.eclipse.jdt.internal.corext.refactoring.ParameterInfo pi = getFieldInfo(name.getIdentifier()).pi; boolean writeAccess = org.eclipse.jdt.internal.ui.text.correction.ASTResolving.isWriteAccess(name); boolean useSuper = (parent.getNodeType()) == (org.eclipse.jdt.core.dom.ASTNode.SUPER_FIELD_ACCESS); if (writeAccess && (fDescriptor.isCreateGetterSetter())) { org.eclipse.jdt.core.dom.ITypeBinding typeBinding = name.resolveTypeBinding(); org.eclipse.jdt.core.dom.Expression qualifier = null; if ((parent.getNodeType()) == (org.eclipse.jdt.core.dom.ASTNode.FIELD_ACCESS)) { qualifier = ((org.eclipse.jdt.core.dom.Expression) (rewrite.createMoveTarget(((org.eclipse.jdt.core.dom.FieldAccess) (parent)).getExpression()))); } if ((parent.getNodeType()) == (org.eclipse.jdt.core.dom.ASTNode.QUALIFIED_NAME)) { qualifier = ((org.eclipse.jdt.core.dom.Expression) (rewrite.createMoveTarget(((org.eclipse.jdt.core.dom.QualifiedName) (parent)).getQualifier()))); } org.eclipse.jdt.core.dom.ASTNode replaceNode; if ((qualifier != null) || useSuper) { replaceNode = parent.getParent(); } else { replaceNode = parent; } org.eclipse.jdt.core.dom.Expression assignedValue = handleSimpleNameAssignment(replaceNode, pof, parameterName, ast, javaProject, useSuper); if (assignedValue == null) { org.eclipse.jdt.core.dom.Expression fieldReadAccess = pof.createFieldReadAccess(pi, parameterName, ast, javaProject, useSuper); assignedValue = org.eclipse.jdt.internal.corext.codemanipulation.GetterSetterUtil.getAssignedValue(replaceNode, rewrite, fieldReadAccess, typeBinding, is50OrHigher); } if (assignedValue == null) { org.eclipse.jdt.core.IType primaryType = cuRewrite.getCu().findPrimaryType(); if (primaryType == null) { status.addError(RefactoringCoreMessages.ExtractClassRefactoring_error_unable_to_convert_node, org.eclipse.jdt.internal.corext.refactoring.base.JavaStatusContext.create(fDescriptor.getType().getTypeRoot(), replaceNode)); } else { status.addError(RefactoringCoreMessages.ExtractClassRefactoring_error_unable_to_convert_node, org.eclipse.jdt.internal.corext.refactoring.base.JavaStatusContext.create(primaryType.getTypeRoot(), replaceNode)); } } else { org.eclipse.jdt.core.dom.Expression access = pof.createFieldWriteAccess(pi, parameterName, ast, javaProject, assignedValue, qualifier, useSuper); rewrite.replace(replaceNode, access, writeGroup); } } else { org.eclipse.jdt.core.dom.Expression fieldReadAccess = pof.createFieldReadAccess(pi, parameterName, ast, javaProject, false); rewrite.replace(name, fieldReadAccess, readGroup); } } } return status; }
public void drop(java.lang.Object dropTarget, org.eclipse.swt.dnd.DropTargetEvent event) { int operation = event.detail; event.detail = org.eclipse.swt.dnd.DND.DROP_NONE; java.lang.Object data = event.data; if ((data == null) || (operation != (org.eclipse.swt.dnd.DND.DROP_COPY))) return; org.eclipse.core.resources.IContainer target = null; if (dropTarget instanceof org.eclipse.core.resources.IContainer) { target = ((org.eclipse.core.resources.IContainer) (dropTarget)); } else { try { target = ((org.eclipse.core.resources.IContainer) (((org.eclipse.jdt.core.IJavaElement) (dropTarget)).getCorrespondingResource())); } catch (org.eclipse.jdt.core.JavaModelException e) { } } if (target == null) return; java.util.List files = checkFiles(org.eclipse.jdt.internal.ui.util.SWTUtil.getShell(event.widget), ((java.lang.String[]) (data)), target.getLocation()); if ((files.size()) > 0) { org.eclipse.swt.widgets.Shell shell = org.eclipse.jdt.internal.ui.JavaPlugin.getActiveWorkbenchShell(); org.eclipse.ui.wizards.datatransfer.ImportOperation op = new org.eclipse.ui.wizards.datatransfer.ImportOperation(target.getFullPath(), org.eclipse.ui.wizards.datatransfer.FileSystemStructureProvider.INSTANCE, this, files); op.setCreateContainerStructure(false); org.eclipse.jface.dialogs.ProgressMonitorDialog dialog = new org.eclipse.jface.dialogs.ProgressMonitorDialog(shell); try { dialog.run(true, true, op); } catch (java.lang.reflect.InvocationTargetException e) { java.lang.String title = org.eclipse.jdt.internal.ui.packageview.PackagesMessages.getString("DropAdapter.errorTitle"); java.lang.String message = org.eclipse.jdt.internal.ui.packageview.PackagesMessages.getString("DropAdapter.errorMessage"); org.eclipse.jdt.internal.ui.util.ExceptionHandler.handle(e, title, message); return; } catch (java.lang.InterruptedException e) { return; } org.eclipse.core.runtime.IStatus status = op.getStatus(); if (!(status.isOK())) { java.lang.String title = org.eclipse.jdt.internal.ui.packageview.PackagesMessages.getString("DropAdapter.errorTitle"); java.lang.String message = org.eclipse.jdt.internal.ui.packageview.PackagesMessages.getString("DropAdapter.errorMessage"); org.eclipse.jface.dialogs.ErrorDialog.openError(shell, title, message, status, ((org.eclipse.core.runtime.IStatus.ERROR) | (org.eclipse.core.runtime.IStatus.WARNING))); return; } event.data = files.toArray(new java.lang.String[files.size()]); event.detail = org.eclipse.swt.dnd.DND.DROP_COPY; return; } else { event.data = null; return; } }
public TemplateEditionDialog(org.eclipse.swt.widgets.Shell parent, int templateNumber) { super(parent); this.templateNumber = templateNumber; fInitialTemplateName = (templateNumber < 0) ? null : ((java.lang.String) (templateNames.get(templateNumber))); setHelpAvailable(false); }
public static org.eclipse.jdt.internal.corext.refactoring.nls.AccessorClassReference getAccessorClassReference(org.eclipse.jdt.core.dom.CompilationUnit astRoot, org.eclipse.jface.text.IRegion region) { org.eclipse.jdt.core.dom.ASTNode nlsStringLiteral = org.eclipse.jdt.internal.corext.dom.NodeFinder.perform(astRoot, region.getOffset(), region.getLength()); if (nlsStringLiteral == null) return null; org.eclipse.jdt.core.dom.ASTNode parent = nlsStringLiteral.getParent(); org.eclipse.jdt.core.dom.ITypeBinding accessorBinding = null; if (nlsStringLiteral instanceof org.eclipse.jdt.core.dom.SimpleName) { org.eclipse.jdt.core.dom.SimpleName name = ((org.eclipse.jdt.core.dom.SimpleName) (nlsStringLiteral)); org.eclipse.jdt.core.dom.IBinding binding = name.resolveBinding(); if (binding instanceof org.eclipse.jdt.core.dom.IVariableBinding) { org.eclipse.jdt.core.dom.IVariableBinding variableBinding = ((org.eclipse.jdt.core.dom.IVariableBinding) (binding)); if (org.eclipse.jdt.core.dom.Modifier.isStatic(variableBinding.getModifiers())) accessorBinding = variableBinding.getDeclaringClass(); } } if (accessorBinding == null) { if (parent instanceof org.eclipse.jdt.core.dom.MethodInvocation) { org.eclipse.jdt.core.dom.MethodInvocation methodInvocation = ((org.eclipse.jdt.core.dom.MethodInvocation) (parent)); java.util.List args = methodInvocation.arguments(); if ((args.indexOf(nlsStringLiteral)) != 0) { return null; } org.eclipse.jdt.core.dom.Expression firstArgument = ((org.eclipse.jdt.core.dom.Expression) (args.get(0))); org.eclipse.jdt.core.dom.ITypeBinding argumentBinding = firstArgument.resolveTypeBinding(); if ((argumentBinding == null) || (!(argumentBinding.getQualifiedName().equals("java.lang.String")))) { return null; } org.eclipse.jdt.core.dom.ITypeBinding typeBinding = methodInvocation.resolveTypeBinding(); if ((typeBinding == null) || (!(typeBinding.getQualifiedName().equals("java.lang.String")))) { return null; } org.eclipse.jdt.core.dom.IMethodBinding methodBinding = methodInvocation.resolveMethodBinding(); if ((methodBinding == null) || (!(org.eclipse.jdt.core.dom.Modifier.isStatic(methodBinding.getModifiers())))) { return null; } accessorBinding = methodBinding.getDeclaringClass(); } else if (parent instanceof org.eclipse.jdt.core.dom.VariableDeclarationFragment) { org.eclipse.jdt.core.dom.VariableDeclarationFragment decl = ((org.eclipse.jdt.core.dom.VariableDeclarationFragment) (parent)); if ((decl.getInitializer()) != null) return null; org.eclipse.jdt.core.dom.IBinding binding = decl.resolveBinding(); if (!(binding instanceof org.eclipse.jdt.core.dom.IVariableBinding)) return null; org.eclipse.jdt.core.dom.IVariableBinding variableBinding = ((org.eclipse.jdt.core.dom.IVariableBinding) (binding)); if (!(org.eclipse.jdt.core.dom.Modifier.isStatic(variableBinding.getModifiers()))) return null; accessorBinding = variableBinding.getDeclaringClass(); } } if (accessorBinding == null) return null; java.lang.String resourceBundleName; try { resourceBundleName = org.eclipse.jdt.internal.corext.refactoring.nls.NLSHintHelper.getResourceBundleName(accessorBinding); } catch (org.eclipse.jdt.core.JavaModelException e) { return null; } if (resourceBundleName != null) return new org.eclipse.jdt.internal.corext.refactoring.nls.AccessorClassReference(accessorBinding, resourceBundleName, new org.eclipse.jface.text.Region(parent.getStartPosition(), parent.getLength())); return null; }
protected void run(org.eclipse.jface.text.ITextSelection selection) { try { org.eclipse.jdt.core.IJavaElement[] elements = org.eclipse.jdt.internal.ui.actions.SelectionConverter.codeResolveOrInput(fEditor); org.eclipse.jdt.core.IJavaElement input = org.eclipse.jdt.internal.ui.actions.SelectionConverter.getInput(fEditor); for (int i = 0; i < (elements.length); i++) { int type = elements[i].getElementType(); if (((type == (org.eclipse.jdt.core.IJavaElement.JAVA_PROJECT)) || (type == (org.eclipse.jdt.core.IJavaElement.PACKAGE_FRAGMENT_ROOT))) || (type == (org.eclipse.jdt.core.IJavaElement.PACKAGE_FRAGMENT))) elements[i] = input; } run(elements); } catch (org.eclipse.jdt.core.JavaModelException e) { showError(e); } }
public java.lang.String getInfo() { org.eclipse.jdt.core.IMember member; try { member = getMember(); } catch (org.eclipse.jdt.core.JavaModelException e) { org.eclipse.jdt.internal.ui.JavaPlugin.log(e); return null; } if (member != null) { try { java.io.Reader reader = org.eclipse.jdt.ui.JavadocContentAccess.getHTMLContentReader(member, true, true); if (reader != null) return org.eclipse.jdt.internal.ui.text.java.ProposalInfo.getString(reader); } catch (org.eclipse.jdt.core.JavaModelException e) { return null; } } return null; }
private boolean canRemoveParenthesis(org.eclipse.jdt.core.dom.ParenthesizedExpression node) { org.eclipse.jdt.core.dom.ASTNode parent = node.getParent(); if (!(parent instanceof org.eclipse.jdt.core.dom.Expression)) return true; org.eclipse.jdt.core.dom.Expression parentExpression = ((org.eclipse.jdt.core.dom.Expression) (parent)); if (parentExpression instanceof org.eclipse.jdt.core.dom.ParenthesizedExpression) return true; org.eclipse.jdt.core.dom.Expression expression = getExpression(node); int expressionPrecedence = org.eclipse.jdt.internal.corext.refactoring.code.OperatorPrecedence.getExpressionPrecedence(expression); int parentPrecedence = org.eclipse.jdt.internal.corext.refactoring.code.OperatorPrecedence.getExpressionPrecedence(parentExpression); if (expressionPrecedence > parentPrecedence) return true; if (expressionPrecedence < parentPrecedence) return false; if (parentExpression instanceof org.eclipse.jdt.core.dom.InfixExpression) { org.eclipse.jdt.core.dom.InfixExpression parentInfix = ((org.eclipse.jdt.core.dom.InfixExpression) (parentExpression)); if ((parentInfix.getLeftOperand()) == node) { return true; } else if (org.eclipse.jdt.internal.corext.fix.ExpressionsFix.UnnecessaryParenthesisVisitor.isAssociative(parentInfix)) { if (expression instanceof org.eclipse.jdt.core.dom.InfixExpression) { org.eclipse.jdt.core.dom.InfixExpression infixExpression = ((org.eclipse.jdt.core.dom.InfixExpression) (expression)); org.eclipse.jdt.core.dom.InfixExpression.Operator operator = infixExpression.getOperator(); if (operator != (org.eclipse.jdt.core.dom.InfixExpression.Operator.DIVIDE)) return true; org.eclipse.jdt.core.dom.ITypeBinding binding = infixExpression.resolveTypeBinding(); if (binding == null) return false; if (!(binding.isPrimitive())) return false; java.lang.String name = binding.getName(); if (isIntegerNumber(name)) return false; return true; } return true; } else { return false; } } else if (parentExpression instanceof org.eclipse.jdt.core.dom.ConditionalExpression) { org.eclipse.jdt.core.dom.ConditionalExpression conditionalExpression = ((org.eclipse.jdt.core.dom.ConditionalExpression) (parentExpression)); if ((conditionalExpression.getElseExpression()) != node) return false; } return true; }
protected void handleSelectionChanged(final org.eclipse.jface.viewers.IStructuredSelection selection) { org.eclipse.core.runtime.Assert.isNotNull(selection); fSelectedDescriptors.clear(); final java.lang.Object[] elements = selection.toArray(); for (int index = 0; index < (elements.length); index++) { final java.lang.Object element = elements[index]; if (element instanceof org.eclipse.ltk.internal.ui.refactoring.history.RefactoringHistoryEntry) { final org.eclipse.ltk.internal.ui.refactoring.history.RefactoringHistoryEntry entry = ((org.eclipse.ltk.internal.ui.refactoring.history.RefactoringHistoryEntry) (element)); final org.eclipse.ltk.core.refactoring.RefactoringDescriptorProxy proxy = entry.getDescriptor(); fSelectedDescriptors.add(proxy); } else if (element instanceof org.eclipse.ltk.internal.ui.refactoring.history.RefactoringHistoryNode) { final org.eclipse.ltk.internal.ui.refactoring.history.RefactoringHistoryNode node = ((org.eclipse.ltk.internal.ui.refactoring.history.RefactoringHistoryNode) (element)); fSelectedDescriptors.addAll(getCoveredDescriptors(node)); } } if (((elements.length) == 1) && ((elements[0]) instanceof org.eclipse.ltk.internal.ui.refactoring.history.RefactoringHistoryEntry)) { final org.eclipse.ltk.internal.ui.refactoring.history.RefactoringHistoryEntry entry = ((org.eclipse.ltk.internal.ui.refactoring.history.RefactoringHistoryEntry) (elements[0])); final org.eclipse.ltk.core.refactoring.RefactoringDescriptorProxy proxy = entry.getDescriptor(); final org.eclipse.core.runtime.jobs.Job job = new org.eclipse.ui.progress.UIJob(org.eclipse.ltk.internal.ui.refactoring.RefactoringUIMessages.RefactoringHistoryControl_resolving_information) { public final org.eclipse.core.runtime.IStatus runInUIThread(final org.eclipse.core.runtime.IProgressMonitor monitor) { final org.eclipse.ltk.core.refactoring.RefactoringDescriptor descriptor = proxy.requestDescriptor(monitor); if (descriptor != null) { java.lang.String comment = descriptor.getComment(); if ("".equals(comment)) comment = org.eclipse.ltk.internal.ui.refactoring.RefactoringUIMessages.RefactoringHistoryControl_no_comment; fDetailField.setText(comment); } return org.eclipse.core.runtime.Status.OK_STATUS; } }; job.setSystem(true); job.schedule(); } else fDetailField.setText(fControlConfiguration.getCommentCaption()); }
public static org.eclipse.jdt.core.dom.MethodDeclaration createDelegationStub(org.eclipse.jdt.core.ICompilationUnit unit, org.eclipse.jdt.core.dom.rewrite.ASTRewrite rewrite, org.eclipse.jdt.internal.corext.codemanipulation.ImportRewrite imports, org.eclipse.jdt.core.dom.AST ast, org.eclipse.jdt.core.dom.IBinding[] bindings, org.eclipse.jdt.internal.corext.codemanipulation.CodeGenerationSettings settings) throws org.eclipse.core.runtime.CoreException { org.eclipse.jdt.internal.corext.Assert.isNotNull(bindings); org.eclipse.jdt.internal.corext.Assert.isTrue(((bindings.length) == 2)); org.eclipse.jdt.internal.corext.Assert.isTrue(((bindings[0]) instanceof org.eclipse.jdt.core.dom.IVariableBinding)); org.eclipse.jdt.internal.corext.Assert.isTrue(((bindings[1]) instanceof org.eclipse.jdt.core.dom.IMethodBinding)); org.eclipse.jdt.core.dom.IVariableBinding variableBinding = ((org.eclipse.jdt.core.dom.IVariableBinding) (bindings[0])); org.eclipse.jdt.core.dom.IMethodBinding methodBinding = ((org.eclipse.jdt.core.dom.IMethodBinding) (bindings[1])); org.eclipse.jdt.core.dom.MethodDeclaration decl = ast.newMethodDeclaration(); decl.modifiers().addAll(org.eclipse.jdt.internal.corext.dom.ASTNodeFactory.newModifiers(ast, (((methodBinding.getModifiers()) & (~(org.eclipse.jdt.core.dom.Modifier.ABSTRACT))) & (~(org.eclipse.jdt.core.dom.Modifier.NATIVE))))); decl.setName(ast.newSimpleName(methodBinding.getName())); decl.setConstructor(false); org.eclipse.jdt.core.dom.ITypeBinding[] typeParams = methodBinding.getTypeParameters(); java.util.List typeParameters = decl.typeParameters(); for (int i = 0; i < (typeParams.length); i++) { org.eclipse.jdt.core.dom.ITypeBinding curr = typeParams[i]; org.eclipse.jdt.core.dom.TypeParameter newTypeParam = ast.newTypeParameter(); newTypeParam.setName(ast.newSimpleName(curr.getName())); org.eclipse.jdt.core.dom.ITypeBinding[] typeBounds = curr.getTypeBounds(); if (((typeBounds.length) != 1) || (!("java.lang.Object".equals(typeBounds[0].getQualifiedName())))) { java.util.List newTypeBounds = newTypeParam.typeBounds(); for (int k = 0; k < (typeBounds.length); k++) { newTypeBounds.add(imports.addImport(typeBounds[k], ast)); } } typeParameters.add(newTypeParam); } decl.setReturnType2(imports.addImport(methodBinding.getReturnType(), ast)); java.util.List parameters = decl.parameters(); org.eclipse.jdt.core.dom.ITypeBinding[] params = methodBinding.getParameterTypes(); java.lang.String[] paramNames = org.eclipse.jdt.internal.corext.codemanipulation.StubUtility2.suggestArgumentNames(unit.getJavaProject(), methodBinding); for (int i = 0; i < (params.length); i++) { org.eclipse.jdt.core.dom.SingleVariableDeclaration varDecl = ast.newSingleVariableDeclaration(); if ((params[i].isWildcardType()) && (!(params[i].isUpperbound()))) varDecl.setType(imports.addImport(params[i].getBound(), ast)); else { if (((methodBinding.isVarargs()) && (params[i].isArray())) && (i == ((params.length) - 1))) { java.lang.StringBuffer buffer = new java.lang.StringBuffer(imports.addImport(params[i].getElementType())); for (int dim = 1; dim < (params[i].getDimensions()); dim++) buffer.append("[]"); varDecl.setType(org.eclipse.jdt.internal.corext.dom.ASTNodeFactory.newType(ast, buffer.toString())); varDecl.setVarargs(true); } else varDecl.setType(imports.addImport(params[i], ast)); } varDecl.setName(ast.newSimpleName(paramNames[i])); parameters.add(varDecl); } java.util.List thrownExceptions = decl.thrownExceptions(); org.eclipse.jdt.core.dom.ITypeBinding[] excTypes = methodBinding.getExceptionTypes(); for (int i = 0; i < (excTypes.length); i++) { java.lang.String excTypeName = imports.addImport(excTypes[i]); thrownExceptions.add(org.eclipse.jdt.internal.corext.dom.ASTNodeFactory.newName(ast, excTypeName)); } org.eclipse.jdt.core.dom.Block body = ast.newBlock(); decl.setBody(body); java.lang.String delimiter = org.eclipse.jdt.internal.corext.codemanipulation.StubUtility.getLineDelimiterUsed(unit); java.lang.String bodyStatement = ""; org.eclipse.jdt.core.dom.Statement statement = null; org.eclipse.jdt.core.dom.MethodInvocation invocation = ast.newMethodInvocation(); invocation.setName(ast.newSimpleName(methodBinding.getName())); java.util.List arguments = invocation.arguments(); for (int i = 0; i < (params.length); i++) arguments.add(ast.newSimpleName(paramNames[i])); if (settings.useKeywordThis) { org.eclipse.jdt.core.dom.FieldAccess access = ast.newFieldAccess(); access.setExpression(ast.newThisExpression()); access.setName(ast.newSimpleName(variableBinding.getName())); invocation.setExpression(access); } else invocation.setExpression(ast.newSimpleName(variableBinding.getName())); if ((methodBinding.getReturnType().isPrimitive()) && (methodBinding.getReturnType().getName().equals("void"))) { statement = ast.newExpressionStatement(invocation); } else { org.eclipse.jdt.core.dom.ReturnStatement returnStatement = ast.newReturnStatement(); returnStatement.setExpression(invocation); statement = returnStatement; } bodyStatement = org.eclipse.jdt.internal.corext.dom.ASTNodes.asFormattedString(statement, 0, delimiter); org.eclipse.jdt.core.dom.ITypeBinding declaringType = variableBinding.getDeclaringClass(); java.lang.String qualifiedName = declaringType.getQualifiedName(); org.eclipse.jdt.core.dom.IPackageBinding packageBinding = declaringType.getPackage(); if (packageBinding != null) { if (((packageBinding.getName().length()) > 0) && (qualifiedName.startsWith(packageBinding.getName()))) qualifiedName = qualifiedName.substring(packageBinding.getName().length()); } java.lang.String placeHolder = org.eclipse.jdt.ui.CodeGeneration.getMethodBodyContent(unit, qualifiedName, bindings[1].getName(), false, bodyStatement, delimiter); if (placeHolder != null) { org.eclipse.jdt.core.dom.ASTNode todoNode = rewrite.createStringPlaceholder(placeHolder, org.eclipse.jdt.core.dom.ASTNode.RETURN_STATEMENT); body.statements().add(todoNode); } if ((settings != null) && (settings.createComments)) { java.lang.String string = org.eclipse.jdt.internal.corext.codemanipulation.StubUtility2.getMethodComment(unit, qualifiedName, decl, methodBinding, delimiter); if (string != null) { org.eclipse.jdt.core.dom.Javadoc javadoc = ((org.eclipse.jdt.core.dom.Javadoc) (rewrite.createStringPlaceholder(string, org.eclipse.jdt.core.dom.ASTNode.JAVADOC))); decl.setJavadoc(javadoc); } } return decl; }
protected void validateVariables(org.eclipse.jface.text.templates.TemplateVariable[] variables) throws org.eclipse.jface.text.templates.TemplateException { java.util.ArrayList required = new java.util.ArrayList(5); java.lang.String contextName = getId(); if (org.eclipse.jdt.internal.corext.template.java.CodeTemplateContextType.NEWTYPE_CONTEXTTYPE.equals(contextName)) { required.add(org.eclipse.jdt.internal.corext.template.java.CodeTemplateContextType.PACKAGE_DECLARATION); required.add(org.eclipse.jdt.internal.corext.template.java.CodeTemplateContextType.TYPE_DECLARATION); } for (int i = 0; i < (variables.length); i++) { java.lang.String type = org.eclipse.jdt.internal.ui.viewsupport.BasicElementLabels.getJavaElementName(variables[i].getType()); if ((getResolver(type)) == null) { throw new org.eclipse.jface.text.templates.TemplateException(org.eclipse.jdt.internal.corext.util.Messages.format(JavaTemplateMessages.CodeTemplateContextType_validate_unknownvariable, type)); } required.remove(type); } if (!(required.isEmpty())) { java.lang.String missing = org.eclipse.jdt.internal.ui.viewsupport.BasicElementLabels.getJavaElementName(((java.lang.String) (required.get(0)))); throw new org.eclipse.jface.text.templates.TemplateException(org.eclipse.jdt.internal.corext.util.Messages.format(JavaTemplateMessages.CodeTemplateContextType_validate_missingvariable, missing)); } super.validateVariables(variables); }
@java.lang.Override protected org.eclipse.jdt.internal.ui.javaeditor.ElementInfo createElementInfo(java.lang.Object element) throws org.eclipse.core.runtime.CoreException { if (element instanceof org.eclipse.jdt.internal.ui.javaeditor.IClassFileEditorInput) { org.eclipse.jdt.internal.ui.javaeditor.IClassFileEditorInput input = ((org.eclipse.jdt.internal.ui.javaeditor.IClassFileEditorInput) (element)); org.eclipse.jdt.internal.ui.javaeditor.ExternalClassFileEditorInput external = null; if (input instanceof org.eclipse.jdt.internal.ui.javaeditor.ExternalClassFileEditorInput) external = ((org.eclipse.jdt.internal.ui.javaeditor.ExternalClassFileEditorInput) (input)); if (external != null) { try { refreshFile(external.getFile()); } catch (org.eclipse.core.runtime.CoreException x) { handleCoreException(x, JavaEditorMessages.ClassFileDocumentProvider_error_createElementInfo); } } org.eclipse.jface.text.IDocument d = createDocument(input); org.eclipse.jface.text.source.IAnnotationModel m = createClassFileAnnotationModel(input); if (external != null) { org.eclipse.jdt.internal.ui.javaeditor.ClassFileDocumentProvider.ClassFileInfo info = new org.eclipse.jdt.internal.ui.javaeditor.ClassFileDocumentProvider.ClassFileInfo(d, m, ((org.eclipse.jdt.internal.ui.javaeditor.ClassFileDocumentProvider._FileSynchronizer) (null))); info.fModificationStamp = computeModificationStamp(external.getFile()); info.fEncoding = getPersistedEncoding(element); return info; } else if (input instanceof org.eclipse.jdt.internal.ui.javaeditor.InternalClassFileEditorInput) { org.eclipse.jdt.internal.ui.javaeditor.ClassFileDocumentProvider.ClassFileSynchronizer s = new org.eclipse.jdt.internal.ui.javaeditor.ClassFileDocumentProvider.ClassFileSynchronizer(input); s.install(); org.eclipse.jdt.internal.ui.javaeditor.ClassFileDocumentProvider.ClassFileInfo info = new org.eclipse.jdt.internal.ui.javaeditor.ClassFileDocumentProvider.ClassFileInfo(d, m, s); info.fEncoding = getPersistedEncoding(element); return info; } } return null; }
public final org.eclipse.jdt.internal.corext.refactoring.typeconstraints2.ConstraintVariable2 createMethodParameterVariable(final org.eclipse.jdt.core.dom.IMethodBinding method, final int index) { final org.eclipse.jdt.core.dom.ITypeBinding[] parameters = method.getParameterTypes(); org.eclipse.jdt.core.dom.ITypeBinding binding = parameters[java.lang.Math.min(index, ((parameters.length) - 1))]; if (binding.isArray()) binding = binding.getElementType(); if (org.eclipse.jdt.internal.corext.refactoring.structure.constraints.SuperTypeConstraintsModel.isConstrainedType(binding)) { org.eclipse.jdt.internal.corext.refactoring.typeconstraints2.ConstraintVariable2 variable = null; if (method.getDeclaringClass().isFromSource()) variable = new org.eclipse.jdt.internal.corext.refactoring.typeconstraints2.ParameterTypeVariable2(fEnvironment.create(binding), index, method); else variable = new org.eclipse.jdt.internal.corext.refactoring.typeconstraints2.ImmutableTypeVariable2(fEnvironment.create(binding)); return ((org.eclipse.jdt.internal.corext.refactoring.typeconstraints2.ConstraintVariable2) (fConstraintVariables.addExisting(variable))); } return null; }
public int computeAdornmentFlags(java.lang.Object obj) { try { if (obj instanceof org.eclipse.jdt.core.IJavaElement) { org.eclipse.jdt.core.IJavaElement element = ((org.eclipse.jdt.core.IJavaElement) (obj)); if (!(element.exists())) { return 0; } int type = element.getElementType(); switch (type) { case org.eclipse.jdt.core.IJavaElement.JAVA_PROJECT : case org.eclipse.jdt.core.IJavaElement.PACKAGE_FRAGMENT_ROOT : return getErrorTicksFromMarkers(element.getCorrespondingResource(), org.eclipse.core.resources.IResource.DEPTH_INFINITE, null); case org.eclipse.jdt.core.IJavaElement.PACKAGE_FRAGMENT : case org.eclipse.jdt.core.IJavaElement.CLASS_FILE : return getErrorTicksFromMarkers(element.getCorrespondingResource(), org.eclipse.core.resources.IResource.DEPTH_ONE, null); case org.eclipse.jdt.core.IJavaElement.COMPILATION_UNIT : case org.eclipse.jdt.core.IJavaElement.PACKAGE_DECLARATION : case org.eclipse.jdt.core.IJavaElement.IMPORT_DECLARATION : case org.eclipse.jdt.core.IJavaElement.IMPORT_CONTAINER : case org.eclipse.jdt.core.IJavaElement.TYPE : case org.eclipse.jdt.core.IJavaElement.INITIALIZER : case org.eclipse.jdt.core.IJavaElement.METHOD : case org.eclipse.jdt.core.IJavaElement.FIELD : org.eclipse.jdt.core.ICompilationUnit cu = ((org.eclipse.jdt.core.ICompilationUnit) (element.getAncestor(org.eclipse.jdt.core.IJavaElement.COMPILATION_UNIT))); if ((cu != null) && (cu.exists())) { org.eclipse.jdt.core.ISourceRange range = ((org.eclipse.jdt.core.ISourceReference) (element)).getSourceRange(); if (cu.isWorkingCopy()) { return getErrorTicksFromWorkingCopy(((org.eclipse.jdt.core.ICompilationUnit) (cu.getOriginalElement())), range); } return getErrorTicksFromMarkers(cu.getCorrespondingResource(), org.eclipse.core.resources.IResource.DEPTH_ONE, range); } default : } } else if (obj instanceof org.eclipse.core.resources.IResource) { org.eclipse.core.resources.IResource resource = ((org.eclipse.core.resources.IResource) (obj)); if (resource.exists()) { return getErrorTicksFromMarkers(resource, org.eclipse.core.resources.IResource.DEPTH_INFINITE, null); } } } catch (org.eclipse.core.runtime.CoreException e) { org.eclipse.jdt.internal.ui.JavaPlugin.log(e); } return 0; }
public void createControl(org.eclipse.swt.widgets.Composite parent) { boolean isCustom = getDialogSettings().getBoolean(org.eclipse.jdt.internal.ui.fix.CleanUpRefactoringWizard.USE_CUSTOM_PROFILE_KEY); final org.eclipse.swt.widgets.Composite composite = new org.eclipse.swt.widgets.Composite(parent, org.eclipse.swt.SWT.NONE); composite.setLayout(new org.eclipse.swt.layout.GridLayout(2, false)); composite.setLayoutData(new org.eclipse.swt.layout.GridData(org.eclipse.swt.SWT.FILL, org.eclipse.swt.SWT.FILL, true, true)); composite.setFont(parent.getFont()); org.eclipse.jdt.internal.ui.wizards.dialogfields.SelectionButtonDialogField useProfile = new org.eclipse.jdt.internal.ui.wizards.dialogfields.SelectionButtonDialogField(org.eclipse.swt.SWT.RADIO); useProfile.setLabelText(MultiFixMessages.CleanUpRefactoringWizard_use_configured_radio); useProfile.setSelection((!isCustom)); useProfile.doFillIntoGrid(composite, 2); org.eclipse.jdt.internal.ui.fix.CleanUpRefactoringWizard.ProjectProfileLableProvider tableLabelProvider = new org.eclipse.jdt.internal.ui.fix.CleanUpRefactoringWizard.ProjectProfileLableProvider(); org.eclipse.jdt.internal.ui.wizards.dialogfields.IListAdapter listAdapter = new org.eclipse.jdt.internal.ui.fix.CleanUpRefactoringWizard.CleanUpConfigurationPage.ProfileTableAdapter(tableLabelProvider, getShell()); java.lang.String[] buttons = new java.lang.String[]{ MultiFixMessages.CleanUpRefactoringWizard_Configure_Button }; final org.eclipse.jdt.internal.ui.wizards.dialogfields.ListDialogField settingsField = new org.eclipse.jdt.internal.ui.wizards.dialogfields.ListDialogField(listAdapter, buttons, tableLabelProvider) { protected int getListStyle() { return (super.getListStyle()) | (org.eclipse.swt.SWT.SINGLE); } }; java.lang.String[] headerNames = new java.lang.String[]{ MultiFixMessages.CleanUpRefactoringWizard_Project_TableHeader, MultiFixMessages.CleanUpRefactoringWizard_Profile_TableHeader }; org.eclipse.jface.viewers.ColumnLayoutData[] columns = new org.eclipse.jface.viewers.ColumnLayoutData[]{ new org.eclipse.jface.viewers.ColumnWeightData(2, true), new org.eclipse.jface.viewers.ColumnWeightData(1, true) }; settingsField.setTableColumns(new org.eclipse.jdt.internal.ui.wizards.dialogfields.ListDialogField.ColumnsDescription(columns, headerNames, true)); settingsField.setViewerComparator(new org.eclipse.jface.viewers.ViewerComparator()); settingsField.doFillIntoGrid(composite, 3); org.eclipse.swt.widgets.Table table = settingsField.getTableViewer().getTable(); org.eclipse.swt.layout.GridData data = ((org.eclipse.swt.layout.GridData) (settingsField.getListControl(null).getLayoutData())); data.horizontalIndent = 15; data.grabExcessVerticalSpace = false; data.heightHint = org.eclipse.jdt.internal.ui.util.SWTUtil.getTableHeightHint(table, java.lang.Math.min(5, ((fCleanUpRefactoring.getProjects().length) + 2))); data.grabExcessHorizontalSpace = true; data.verticalAlignment = org.eclipse.swt.layout.GridData.BEGINNING; data = ((org.eclipse.swt.layout.GridData) (settingsField.getButtonBox(null).getLayoutData())); data.grabExcessVerticalSpace = false; data.verticalAlignment = org.eclipse.swt.layout.GridData.BEGINNING; data = ((org.eclipse.swt.layout.GridData) (settingsField.getLabelControl(null).getLayoutData())); data.exclude = true; settingsField.setElements(java.util.Arrays.asList(fCleanUpRefactoring.getProjects())); settingsField.selectFirstElement(); fUseCustomField = new org.eclipse.jdt.internal.ui.wizards.dialogfields.SelectionButtonDialogField(org.eclipse.swt.SWT.RADIO); fUseCustomField.setLabelText(MultiFixMessages.CleanUpRefactoringWizard_use_custom_radio); fUseCustomField.setSelection(isCustom); fUseCustomField.doFillIntoGrid(composite, 2); java.lang.String settings = getDialogSettings().get(org.eclipse.jdt.internal.ui.fix.CleanUpRefactoringWizard.CUSTOM_PROFILE_KEY); if (settings == null) { fCustomSettings = org.eclipse.jdt.internal.ui.JavaPlugin.getDefault().getCleanUpRegistry().getDefaultOptions(ICleanUp.DEFAULT_CLEAN_UP_OPTIONS).getMap(); } else { try { fCustomSettings = decodeSettings(settings); } catch (org.eclipse.core.runtime.CoreException e) { org.eclipse.jdt.internal.ui.JavaPlugin.log(e); fCustomSettings = org.eclipse.jdt.internal.ui.JavaPlugin.getDefault().getCleanUpRegistry().getDefaultOptions(ICleanUp.DEFAULT_CLEAN_UP_OPTIONS).getMap(); } } final org.eclipse.jdt.internal.ui.preferences.BulletListBlock bulletListBlock = new org.eclipse.jdt.internal.ui.preferences.BulletListBlock(composite, org.eclipse.swt.SWT.NONE); org.eclipse.swt.layout.GridData layoutData = new org.eclipse.swt.layout.GridData(org.eclipse.swt.SWT.FILL, org.eclipse.swt.SWT.FILL, true, true); layoutData.horizontalIndent = 15; layoutData.grabExcessVerticalSpace = true; bulletListBlock.setLayoutData(layoutData); final org.eclipse.swt.widgets.Button configure = new org.eclipse.swt.widgets.Button(composite, org.eclipse.swt.SWT.NONE); configure.setText(MultiFixMessages.CleanUpRefactoringWizard_ConfigureCustomProfile_button); data = new org.eclipse.swt.layout.GridData(org.eclipse.swt.SWT.TOP, org.eclipse.swt.SWT.LEAD, false, false); data.widthHint = org.eclipse.jdt.internal.ui.util.SWTUtil.getButtonWidthHint(configure); configure.setLayoutData(data); showCustomSettings(bulletListBlock); configure.addSelectionListener(new org.eclipse.swt.events.SelectionAdapter() { public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { java.util.Hashtable workingValues = new java.util.Hashtable(fCustomSettings); org.eclipse.jdt.internal.ui.fix.CleanUpSelectionDialog dialog = new org.eclipse.jdt.internal.ui.fix.CleanUpRefactoringWizard.CleanUpConfigurationPage.WizardCleanUpSelectionDialog(getShell(), workingValues); if ((dialog.open()) == (org.eclipse.jface.window.Window.OK)) { fCustomSettings = workingValues; showCustomSettings(bulletListBlock); } } }); updateEnableState(isCustom, settingsField, configure, bulletListBlock); fUseCustomField.setDialogFieldListener(new org.eclipse.jdt.internal.ui.wizards.dialogfields.IDialogFieldListener() { public void dialogFieldChanged(org.eclipse.jdt.internal.ui.wizards.dialogfields.DialogField field) { updateEnableState(fUseCustomField.isSelected(), settingsField, configure, bulletListBlock); } }); org.eclipse.swt.widgets.Link preferencePageLink = new org.eclipse.swt.widgets.Link(composite, org.eclipse.swt.SWT.WRAP); preferencePageLink.setText(MultiFixMessages.CleanUpRefactoringWizard_HideWizard_Link); preferencePageLink.setFont(parent.getFont()); org.eclipse.swt.layout.GridData gridData = new org.eclipse.swt.layout.GridData(org.eclipse.swt.SWT.FILL, org.eclipse.swt.SWT.FILL, true, false); gridData.widthHint = convertWidthInCharsToPixels(300); gridData.horizontalSpan = 2; preferencePageLink.setLayoutData(gridData); preferencePageLink.addSelectionListener(new org.eclipse.swt.events.SelectionAdapter() { public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { org.eclipse.ui.dialogs.PreferencesUtil.createPreferenceDialogOn(composite.getShell(), CleanUpPreferencePage.PREF_ID, null, null).open(); } }); setControl(composite); org.eclipse.jface.dialogs.Dialog.applyDialogFont(composite); }
public void createButton(org.eclipse.swt.widgets.Composite parent) { fButton = new org.eclipse.swt.widgets.Button(parent, fStyle); fButton.setText(fLabel); fButton.setLayoutData(new org.eclipse.swt.layout.GridData(org.eclipse.swt.SWT.LEFT, org.eclipse.swt.SWT.CENTER, false, false)); fButton.setSelection(fCleanUp.isFlag(fFlag)); fButton.addSelectionListener(new org.eclipse.swt.events.SelectionAdapter() { public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { boolean selection = ((org.eclipse.swt.widgets.Button) (e.getSource())).getSelection(); fCleanUp.setFlag(fFlag, selection); for (java.util.Iterator iter = fSelectionChangeListeners.iterator(); iter.hasNext();) { org.eclipse.jdt.internal.ui.fix.CleanUpRefactoringWizard.ISelectionChangeListener listener = ((org.eclipse.jdt.internal.ui.fix.CleanUpRefactoringWizard.ISelectionChangeListener) (iter.next())); listener.selectionChanged(fCleanUp, fFlag, selection); } } }); }
public boolean select(org.eclipse.jface.viewers.Viewer viewer, java.lang.Object parent, java.lang.Object element) { if (element instanceof org.eclipse.jdt.core.IPackageFragment) { org.eclipse.jdt.core.IPackageFragment pkg = ((org.eclipse.jdt.core.IPackageFragment) (element)); try { return (pkg.hasChildren()) || (hasUnfilteredResources(viewer, pkg)); } catch (org.eclipse.jdt.core.JavaModelException e) { return false; } } return true; }
private static org.eclipse.jdt.core.dom.ITypeBinding getPossibleReferenceBinding(org.eclipse.jdt.core.dom.ASTNode node) { org.eclipse.jdt.core.dom.ASTNode parent = node.getParent(); switch (parent.getNodeType()) { case org.eclipse.jdt.core.dom.ASTNode.ASSIGNMENT : org.eclipse.jdt.core.dom.Assignment assignment = ((org.eclipse.jdt.core.dom.Assignment) (parent)); if (node.equals(assignment.getLeftHandSide())) { return assignment.getRightHandSide().resolveTypeBinding(); } return assignment.getLeftHandSide().resolveTypeBinding(); case org.eclipse.jdt.core.dom.ASTNode.INFIX_EXPRESSION : org.eclipse.jdt.core.dom.InfixExpression infix = ((org.eclipse.jdt.core.dom.InfixExpression) (parent)); org.eclipse.jdt.core.dom.InfixExpression.Operator op = infix.getOperator(); if ((op == (org.eclipse.jdt.core.dom.InfixExpression.Operator.CONDITIONAL_AND)) || (op == (org.eclipse.jdt.core.dom.InfixExpression.Operator.CONDITIONAL_OR))) { return infix.getAST().resolveWellKnownType("boolean"); } else if (((op == (org.eclipse.jdt.core.dom.InfixExpression.Operator.LEFT_SHIFT)) || (op == (org.eclipse.jdt.core.dom.InfixExpression.Operator.RIGHT_SHIFT_UNSIGNED))) || (op == (org.eclipse.jdt.core.dom.InfixExpression.Operator.RIGHT_SHIFT_SIGNED))) { return infix.getAST().resolveWellKnownType("int"); } if (node.equals(infix.getLeftOperand())) { org.eclipse.jdt.core.dom.ITypeBinding rigthHandBinding = infix.getRightOperand().resolveTypeBinding(); if (rigthHandBinding != null) { return rigthHandBinding; } } else { org.eclipse.jdt.core.dom.ITypeBinding leftHandBinding = infix.getLeftOperand().resolveTypeBinding(); if (leftHandBinding != null) { return leftHandBinding; } } if ((op != (org.eclipse.jdt.core.dom.InfixExpression.Operator.EQUALS)) && (op != (org.eclipse.jdt.core.dom.InfixExpression.Operator.NOT_EQUALS))) { return infix.getAST().resolveWellKnownType("int"); } break; case org.eclipse.jdt.core.dom.ASTNode.INSTANCEOF_EXPRESSION : org.eclipse.jdt.core.dom.InstanceofExpression instanceofExpression = ((org.eclipse.jdt.core.dom.InstanceofExpression) (parent)); return instanceofExpression.getRightOperand().resolveBinding(); case org.eclipse.jdt.core.dom.ASTNode.VARIABLE_DECLARATION_FRAGMENT : org.eclipse.jdt.core.dom.VariableDeclarationFragment frag = ((org.eclipse.jdt.core.dom.VariableDeclarationFragment) (parent)); if (frag.getInitializer().equals(node)) { return frag.getName().resolveTypeBinding(); } break; case org.eclipse.jdt.core.dom.ASTNode.SUPER_METHOD_INVOCATION : org.eclipse.jdt.core.dom.SuperMethodInvocation superMethodInvocation = ((org.eclipse.jdt.core.dom.SuperMethodInvocation) (parent)); org.eclipse.jdt.core.dom.IMethodBinding superMethodBinding = org.eclipse.jdt.internal.corext.dom.ASTNodes.getMethodBinding(superMethodInvocation.getName()); if (superMethodBinding != null) { return org.eclipse.jdt.internal.ui.text.correction.ASTResolving.getParameterTypeBinding(node, superMethodInvocation.arguments(), superMethodBinding); } break; case org.eclipse.jdt.core.dom.ASTNode.METHOD_INVOCATION : org.eclipse.jdt.core.dom.MethodInvocation methodInvocation = ((org.eclipse.jdt.core.dom.MethodInvocation) (parent)); org.eclipse.jdt.core.dom.IMethodBinding methodBinding = methodInvocation.resolveMethodBinding(); if (methodBinding != null) { return org.eclipse.jdt.internal.ui.text.correction.ASTResolving.getParameterTypeBinding(node, methodInvocation.arguments(), methodBinding); } break; case org.eclipse.jdt.core.dom.ASTNode.SUPER_CONSTRUCTOR_INVOCATION : { org.eclipse.jdt.core.dom.SuperConstructorInvocation superInvocation = ((org.eclipse.jdt.core.dom.SuperConstructorInvocation) (parent)); org.eclipse.jdt.core.dom.IMethodBinding superBinding = superInvocation.resolveConstructorBinding(); if (superBinding != null) { return org.eclipse.jdt.internal.ui.text.correction.ASTResolving.getParameterTypeBinding(node, superInvocation.arguments(), superBinding); } break; } case org.eclipse.jdt.core.dom.ASTNode.CONSTRUCTOR_INVOCATION : { org.eclipse.jdt.core.dom.ConstructorInvocation constrInvocation = ((org.eclipse.jdt.core.dom.ConstructorInvocation) (parent)); org.eclipse.jdt.core.dom.IMethodBinding constrBinding = constrInvocation.resolveConstructorBinding(); if (constrBinding != null) { return org.eclipse.jdt.internal.ui.text.correction.ASTResolving.getParameterTypeBinding(node, constrInvocation.arguments(), constrBinding); } break; } case org.eclipse.jdt.core.dom.ASTNode.CLASS_INSTANCE_CREATION : { org.eclipse.jdt.core.dom.ClassInstanceCreation creation = ((org.eclipse.jdt.core.dom.ClassInstanceCreation) (parent)); org.eclipse.jdt.core.dom.IMethodBinding creationBinding = creation.resolveConstructorBinding(); if (creationBinding != null) { return org.eclipse.jdt.internal.ui.text.correction.ASTResolving.getParameterTypeBinding(node, creation.arguments(), creationBinding); } break; } case org.eclipse.jdt.core.dom.ASTNode.PARENTHESIZED_EXPRESSION : return org.eclipse.jdt.internal.ui.text.correction.ASTResolving.guessBindingForReference(parent); case org.eclipse.jdt.core.dom.ASTNode.ARRAY_ACCESS : if (((org.eclipse.jdt.core.dom.ArrayAccess) (parent)).getIndex().equals(node)) { return parent.getAST().resolveWellKnownType("int"); } else { return org.eclipse.jdt.internal.ui.text.correction.ASTResolving.getPossibleReferenceBinding(parent); } case org.eclipse.jdt.core.dom.ASTNode.ARRAY_CREATION : if (((org.eclipse.jdt.core.dom.ArrayCreation) (parent)).dimensions().contains(node)) { return parent.getAST().resolveWellKnownType("int"); } break; case org.eclipse.jdt.core.dom.ASTNode.ARRAY_INITIALIZER : org.eclipse.jdt.core.dom.ASTNode initializerParent = parent.getParent(); int dim = 1; while (initializerParent instanceof org.eclipse.jdt.core.dom.ArrayInitializer) { initializerParent = initializerParent.getParent(); dim++; } org.eclipse.jdt.core.dom.Type creationType = null; if (initializerParent instanceof org.eclipse.jdt.core.dom.ArrayCreation) { creationType = ((org.eclipse.jdt.core.dom.ArrayCreation) (initializerParent)).getType(); } else if (initializerParent instanceof org.eclipse.jdt.core.dom.VariableDeclaration) { org.eclipse.jdt.core.dom.VariableDeclaration varDecl = ((org.eclipse.jdt.core.dom.VariableDeclaration) (initializerParent)); creationType = org.eclipse.jdt.internal.corext.dom.ASTNodes.getType(varDecl); dim -= org.eclipse.jdt.internal.corext.dom.ASTNodes.getExtraDimensions(varDecl); } else if (initializerParent instanceof org.eclipse.jdt.core.dom.MemberValuePair) { java.lang.String name = ((org.eclipse.jdt.core.dom.MemberValuePair) (initializerParent)).getName().getIdentifier(); org.eclipse.jdt.core.dom.IMethodBinding annotMember = org.eclipse.jdt.internal.ui.text.correction.ASTResolving.findAnnotationMember(((org.eclipse.jdt.core.dom.Annotation) (initializerParent.getParent())), name); if (annotMember != null) { return org.eclipse.jdt.internal.ui.text.correction.ASTResolving.getReducedDimensionBinding(annotMember.getReturnType(), dim, annotMember.getReturnType().getElementType()); } } if (creationType != null) { while ((creationType instanceof org.eclipse.jdt.core.dom.ArrayType) && (dim > 0)) { creationType = ((org.eclipse.jdt.core.dom.ArrayType) (creationType)).getComponentType(); dim--; } return creationType.resolveBinding(); } break; case org.eclipse.jdt.core.dom.ASTNode.CONDITIONAL_EXPRESSION : org.eclipse.jdt.core.dom.ConditionalExpression expression = ((org.eclipse.jdt.core.dom.ConditionalExpression) (parent)); if (node.equals(expression.getExpression())) { return parent.getAST().resolveWellKnownType("boolean"); } if (node.equals(expression.getElseExpression())) { return expression.getThenExpression().resolveTypeBinding(); } return expression.getElseExpression().resolveTypeBinding(); case org.eclipse.jdt.core.dom.ASTNode.POSTFIX_EXPRESSION : return parent.getAST().resolveWellKnownType("int"); case org.eclipse.jdt.core.dom.ASTNode.PREFIX_EXPRESSION : if ((((org.eclipse.jdt.core.dom.PrefixExpression) (parent)).getOperator()) == (org.eclipse.jdt.core.dom.PrefixExpression.Operator.NOT)) { return parent.getAST().resolveWellKnownType("boolean"); } return parent.getAST().resolveWellKnownType("int"); case org.eclipse.jdt.core.dom.ASTNode.IF_STATEMENT : case org.eclipse.jdt.core.dom.ASTNode.WHILE_STATEMENT : case org.eclipse.jdt.core.dom.ASTNode.DO_STATEMENT : if (node instanceof org.eclipse.jdt.core.dom.Expression) { return parent.getAST().resolveWellKnownType("boolean"); } break; case org.eclipse.jdt.core.dom.ASTNode.SWITCH_STATEMENT : if (((org.eclipse.jdt.core.dom.SwitchStatement) (parent)).getExpression().equals(node)) { return parent.getAST().resolveWellKnownType("int"); } break; case org.eclipse.jdt.core.dom.ASTNode.RETURN_STATEMENT : org.eclipse.jdt.core.dom.MethodDeclaration decl = org.eclipse.jdt.internal.ui.text.correction.ASTResolving.findParentMethodDeclaration(parent); if ((decl != null) && (!(decl.isConstructor()))) { return decl.getReturnType2().resolveBinding(); } break; case org.eclipse.jdt.core.dom.ASTNode.CAST_EXPRESSION : return ((org.eclipse.jdt.core.dom.CastExpression) (parent)).getType().resolveBinding(); case org.eclipse.jdt.core.dom.ASTNode.THROW_STATEMENT : case org.eclipse.jdt.core.dom.ASTNode.CATCH_CLAUSE : return parent.getAST().resolveWellKnownType("java.lang.Exception"); case org.eclipse.jdt.core.dom.ASTNode.FIELD_ACCESS : if (node.equals(((org.eclipse.jdt.core.dom.FieldAccess) (parent)).getName())) { return org.eclipse.jdt.internal.ui.text.correction.ASTResolving.getPossibleReferenceBinding(parent); } break; case org.eclipse.jdt.core.dom.ASTNode.SUPER_FIELD_ACCESS : return org.eclipse.jdt.internal.ui.text.correction.ASTResolving.getPossibleReferenceBinding(parent); case org.eclipse.jdt.core.dom.ASTNode.QUALIFIED_NAME : if (node.equals(((org.eclipse.jdt.core.dom.QualifiedName) (parent)).getName())) { return org.eclipse.jdt.internal.ui.text.correction.ASTResolving.getPossibleReferenceBinding(parent); } break; case org.eclipse.jdt.core.dom.ASTNode.SWITCH_CASE : if ((node.equals(((org.eclipse.jdt.core.dom.SwitchCase) (parent)).getExpression())) && ((parent.getParent()) instanceof org.eclipse.jdt.core.dom.SwitchStatement)) { return ((org.eclipse.jdt.core.dom.SwitchStatement) (parent.getParent())).getExpression().resolveTypeBinding(); } break; case org.eclipse.jdt.core.dom.ASTNode.ASSERT_STATEMENT : if ((node.getLocationInParent()) == (org.eclipse.jdt.core.dom.AssertStatement.EXPRESSION_PROPERTY)) { return parent.getAST().resolveWellKnownType("boolean"); } return parent.getAST().resolveWellKnownType("java.lang.String"); case org.eclipse.jdt.core.dom.ASTNode.SINGLE_MEMBER_ANNOTATION : { org.eclipse.jdt.core.dom.IMethodBinding annotMember = org.eclipse.jdt.internal.ui.text.correction.ASTResolving.findAnnotationMember(((org.eclipse.jdt.core.dom.Annotation) (parent)), "value"); if (annotMember != null) { return annotMember.getReturnType(); } break; } case org.eclipse.jdt.core.dom.ASTNode.MEMBER_VALUE_PAIR : { java.lang.String name = ((org.eclipse.jdt.core.dom.MemberValuePair) (parent)).getName().getIdentifier(); org.eclipse.jdt.core.dom.IMethodBinding annotMember = org.eclipse.jdt.internal.ui.text.correction.ASTResolving.findAnnotationMember(((org.eclipse.jdt.core.dom.Annotation) (parent.getParent())), name); if (annotMember != null) { return annotMember.getReturnType(); } break; } default : } return null; }
private static org.eclipse.jdt.internal.corext.refactoring.SearchResultGroup getReferences(org.eclipse.jdt.core.ICompilationUnit wc, org.eclipse.core.runtime.IProgressMonitor pm) throws org.eclipse.jdt.core.JavaModelException { pm.subTask(RefactoringCoreMessages.CopyRefactoring_searching); org.eclipse.jdt.core.search.IJavaSearchScope scope = org.eclipse.jdt.core.search.SearchEngine.createJavaSearchScope(new org.eclipse.jdt.core.IJavaElement[]{ wc }); if ((wc.findPrimaryType()) == null) return null; org.eclipse.jdt.core.search.SearchPattern pattern = org.eclipse.jdt.internal.corext.refactoring.reorg.CreateCopyOfCompilationUnitChange.createSearchPattern(wc.findPrimaryType()); org.eclipse.jdt.internal.corext.refactoring.SearchResultGroup[] groups = org.eclipse.jdt.internal.corext.refactoring.RefactoringSearchEngine.search(pattern, scope, pm, new org.eclipse.jdt.core.ICompilationUnit[]{ wc }, new org.eclipse.ltk.core.refactoring.RefactoringStatus()); org.eclipse.jdt.internal.corext.Assert.isTrue(((groups.length) <= 1)); if ((groups.length) == 0) return null; else return groups[0]; }
public org.eclipse.jdt.core.IBuffer createBuffer(org.eclipse.jdt.core.IOpenable owner) { if (owner instanceof org.eclipse.jdt.core.ICompilationUnit) { org.eclipse.jdt.core.ICompilationUnit unit = ((org.eclipse.jdt.core.ICompilationUnit) (owner)); try { org.eclipse.jdt.core.ICompilationUnit original = ((org.eclipse.jdt.core.ICompilationUnit) (unit.getOriginalElement())); org.eclipse.core.resources.IResource resource = original.getCorrespondingResource(); if (resource instanceof org.eclipse.core.resources.IFile) { org.eclipse.ui.IFileEditorInput providerKey = new org.eclipse.ui.part.FileEditorInput(((org.eclipse.core.resources.IFile) (resource))); org.eclipse.jface.text.IDocument document = null; org.eclipse.core.runtime.IStatus status = null; try { document = internalGetDocument(providerKey); } catch (org.eclipse.core.runtime.CoreException x) { status = x.getStatus(); document = new org.eclipse.jface.text.Document(); initializeDocument(document); } org.eclipse.jdt.internal.ui.javaeditor.DocumentAdapter adapter = new org.eclipse.jdt.internal.ui.javaeditor.DocumentAdapter(unit, document, new org.eclipse.jface.text.DefaultLineTracker(), this, providerKey); adapter.setStatus(status); return adapter; } } catch (org.eclipse.core.runtime.CoreException x) { handleCoreException(x, org.eclipse.jdt.internal.ui.JavaUIMessages.getString("CompilationUnitDocumentProvider.problemsCreatingBuffer")); } } return DocumentAdapter.NULL; }
protected final void getTypesInHierarchy(org.eclipse.jdt.core.IType type, java.util.List res) { org.eclipse.jdt.core.ITypeHierarchy hierarchy = getHierarchy(); if (hierarchy != null) { org.eclipse.jdt.core.IType[] types = hierarchy.getSubtypes(type); if (isObject(type)) { for (int i = 0; i < (types.length); i++) { org.eclipse.jdt.core.IType curr = types[i]; if (!(isAnonymous(curr))) { res.add(curr); } } } else { boolean isHierarchyOnType = (hierarchy.getType()) != null; boolean isClass = !(org.eclipse.jdt.core.Flags.isInterface(hierarchy.getCachedFlags(type))); if (isClass || isHierarchyOnType) { for (int i = 0; i < (types.length); i++) { res.add(types[i]); } } else { for (int i = 0; i < (types.length); i++) { org.eclipse.jdt.core.IType curr = types[i]; if ((org.eclipse.jdt.core.Flags.isInterface(hierarchy.getCachedFlags(curr))) || (isAnonymous(curr))) { res.add(curr); } } } } } }
void handleDoubleClick(org.eclipse.jface.viewers.DoubleClickEvent event) { org.eclipse.jface.viewers.TreeViewer viewer = fPart.getViewer(); org.eclipse.jface.viewers.IStructuredSelection selection = ((org.eclipse.jface.viewers.IStructuredSelection) (event.getSelection())); java.lang.Object element = selection.getFirstElement(); if (viewer.isExpandable(element)) { if (doubleClickGoesInto()) { if ((element instanceof org.eclipse.jdt.core.ICompilationUnit) || (element instanceof org.eclipse.jdt.core.IClassFile)) return; if (((element instanceof org.eclipse.jdt.core.IOpenable) || (element instanceof org.eclipse.core.resources.IContainer)) || (element instanceof org.eclipse.ui.IWorkingSet)) { fZoomInAction.run(); } } else { org.eclipse.jface.action.IAction openAction = fNavigateActionGroup.getOpenAction(); if (((openAction != null) && (openAction.isEnabled())) && ((org.eclipse.jface.util.OpenStrategy.getOpenMethod()) == (org.eclipse.jface.util.OpenStrategy.DOUBLE_CLICK))) return; if (selection instanceof org.eclipse.jface.viewers.TreeSelection) { org.eclipse.jface.viewers.TreePath[] paths = ((org.eclipse.jface.viewers.TreeSelection) (selection)).getPathsFor(element); for (int i = 0; i < (paths.length); i++) { viewer.setExpandedState(paths[i], (!(viewer.getExpandedState(paths[i])))); } } else { viewer.setExpandedState(element, (!(viewer.getExpandedState(element)))); } } } }
private boolean isKeyValid(org.eclipse.jdt.internal.corext.refactoring.nls.NLSSubstitution substitution) { if (!(fNLSRefactoring.isEclipseNLS())) return true; if (substitution == null) return false; java.lang.String key = substitution.getKey(); if (((key.length()) == 0) || (!(java.lang.Character.isJavaIdentifierStart(key.charAt(0))))) return false; for (int i = 1, length = key.length(); i < length; i++) if (!(java.lang.Character.isJavaIdentifierPart(key.charAt(i)))) return false; return true; }
public static org.eclipse.jdt.internal.junit.model.TestRunSession importTestRunSession(final java.lang.String url, org.eclipse.core.runtime.IProgressMonitor monitor) throws java.lang.InterruptedException, java.lang.reflect.InvocationTargetException { monitor.beginTask(ModelMessages.JUnitModel_importing_from_url, 1); final org.eclipse.jdt.internal.junit.model.TestRunHandler handler = new org.eclipse.jdt.internal.junit.model.TestRunHandler(); final org.eclipse.core.runtime.CoreException[] exception = new org.eclipse.core.runtime.CoreException[]{ null }; final org.eclipse.jdt.internal.junit.model.TestRunSession[] session = new org.eclipse.jdt.internal.junit.model.TestRunSession[]{ null }; java.lang.Thread importThread = new java.lang.Thread("JUnit URL importer") { public void run() { try { javax.xml.parsers.SAXParserFactory parserFactory = javax.xml.parsers.SAXParserFactory.newInstance(); javax.xml.parsers.SAXParser parser = parserFactory.newSAXParser(); parser.parse(url, handler); session[0] = handler.getTestRunSession(); } catch (javax.xml.parsers.ParserConfigurationException e) { storeImportError(e); } catch (org.xml.sax.SAXException e) { storeImportError(e); } catch (java.io.IOException e) { storeImportError(e); } } private void storeImportError(java.lang.Exception e) { exception[0] = new org.eclipse.core.runtime.CoreException(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, org.eclipse.jdt.internal.junit.JUnitCorePlugin.getPluginId(), ModelMessages.JUnitModel_could_not_import, e)); } }; importThread.start(); while ((((session[0]) == null) && ((exception[0]) == null)) && (!(monitor.isCanceled()))) { try { java.lang.Thread.sleep(100); } catch (java.lang.InterruptedException e) { } } if ((session[0]) == null) { if ((exception[0]) != null) { throw new java.lang.reflect.InvocationTargetException(exception[0]); } else { importThread.interrupt(); throw new java.lang.InterruptedException(); } } org.eclipse.jdt.internal.junit.JUnitCorePlugin.getModel().addTestRunSession(session[0]); return session[0]; }
private boolean processResourceDelta(org.eclipse.core.resources.IResourceDelta delta, java.lang.Object parent, java.util.Collection runnables) { int status = delta.getKind(); int flags = delta.getFlags(); org.eclipse.core.resources.IResource resource = delta.getResource(); if (resource == null) return false; if ((status & (org.eclipse.core.resources.IResourceDelta.REMOVED)) != 0) { if (parent instanceof org.eclipse.jdt.core.IPackageFragment) { postRefresh(internalGetParent(parent), org.eclipse.jdt.internal.ui.packageview.PackageExplorerContentProvider.PARENT, parent, runnables); return true; } else { postRemove(resource, runnables); return false; } } if ((status & (org.eclipse.core.resources.IResourceDelta.ADDED)) != 0) { if (parent instanceof org.eclipse.jdt.core.IPackageFragment) { postRefresh(internalGetParent(parent), org.eclipse.jdt.internal.ui.packageview.PackageExplorerContentProvider.PARENT, parent, runnables); return true; } else { postAdd(parent, resource, runnables); return false; } } if ((status & (org.eclipse.core.resources.IResourceDelta.CHANGED)) != 0) { if ((flags & (org.eclipse.core.resources.IResourceDelta.TYPE)) != 0) { postRefresh(parent, org.eclipse.jdt.internal.ui.packageview.PackageExplorerContentProvider.PARENT, resource, runnables); return true; } } if ((flags & (org.eclipse.core.resources.IResourceDelta.OPEN)) != 0) { postProjectStateChanged(internalGetParent(parent), runnables); return true; } org.eclipse.core.resources.IResourceDelta[] resourceDeltas = delta.getAffectedChildren(); int count = 0; for (int i = 0; i < (resourceDeltas.length); i++) { int kind = resourceDeltas[i].getKind(); if ((kind == (org.eclipse.core.resources.IResourceDelta.ADDED)) || (kind == (org.eclipse.core.resources.IResourceDelta.REMOVED))) { count++; if (count > 1) { postRefresh(parent, org.eclipse.jdt.internal.ui.packageview.PackageExplorerContentProvider.PARENT, resource, runnables); return true; } } } for (int i = 0; i < (resourceDeltas.length); i++) { if (processResourceDelta(resourceDeltas[i], resource, runnables)) { return false; } } return false; }
private void plainFormat(org.eclipse.jface.text.templates.TemplateBuffer templateBuffer, org.eclipse.jdt.internal.corext.template.java.JavaContext context) throws org.eclipse.jface.text.BadLocationException { org.eclipse.jface.text.IDocument doc = new org.eclipse.jface.text.Document(templateBuffer.getString()); org.eclipse.jface.text.templates.TemplateVariable[] variables = templateBuffer.getVariables(); java.util.List offsets = org.eclipse.jdt.internal.corext.template.java.JavaFormatter.variablesToPositions(variables); java.util.Map options; if ((context.getCompilationUnit()) != null) options = context.getCompilationUnit().getJavaProject().getOptions(true); else options = org.eclipse.jdt.core.JavaCore.getOptions(); java.lang.String contents = doc.get(); int[] kinds = new int[]{ org.eclipse.jdt.core.formatter.CodeFormatter.K_EXPRESSION, org.eclipse.jdt.core.formatter.CodeFormatter.K_STATEMENTS, org.eclipse.jdt.core.formatter.CodeFormatter.K_UNKNOWN }; org.eclipse.text.edits.TextEdit edit = null; for (int i = 0; (i < (kinds.length)) && (edit == null); i++) { edit = org.eclipse.jdt.internal.corext.util.CodeFormatterUtil.format2(kinds[i], contents, fInitialIndentLevel, fLineDelimiter, options); } if (edit == null) throw new org.eclipse.jface.text.BadLocationException(); org.eclipse.text.edits.MultiTextEdit root; if (edit instanceof org.eclipse.text.edits.MultiTextEdit) root = ((org.eclipse.text.edits.MultiTextEdit) (edit)); else { root = new org.eclipse.text.edits.MultiTextEdit(0, doc.getLength()); root.addChild(edit); } for (java.util.Iterator it = offsets.iterator(); it.hasNext();) { org.eclipse.text.edits.TextEdit position = ((org.eclipse.text.edits.TextEdit) (it.next())); try { root.addChild(position); } catch (org.eclipse.text.edits.MalformedTreeException e) { } } root.apply(doc, org.eclipse.text.edits.TextEdit.UPDATE_REGIONS); org.eclipse.jdt.internal.corext.template.java.JavaFormatter.positionsToVariables(offsets, variables); templateBuffer.setContent(doc.get(), variables); }
private void generateSetter(org.eclipse.jdt.core.IField field) throws org.eclipse.core.runtime.CoreException, org.eclipse.core.runtime.OperationCanceledException { java.lang.String fieldName = field.getElementName(); org.eclipse.jdt.core.IJavaProject project = field.getJavaProject(); java.lang.String returnSig = field.getTypeSignature(); java.lang.String accessorName = org.eclipse.jdt.core.NamingConventions.removePrefixAndSuffixForFieldName(project, fieldName, field.getFlags()); if ((accessorName.length()) > 0) { char first = accessorName.charAt(0); if (java.lang.Character.isLowerCase(first)) { accessorName = (java.lang.Character.toUpperCase(first)) + (accessorName.substring(1)); } } java.lang.String argname = org.eclipse.jdt.core.NamingConventions.suggestArgumentNames(project, "", accessorName, org.eclipse.jdt.core.Signature.getArrayCount(returnSig), EMPTY)[0]; boolean isStatic = org.eclipse.jdt.core.Flags.isStatic(field.getFlags()); boolean isFinal = org.eclipse.jdt.core.Flags.isFinal(field.getFlags()); java.lang.String typeName = org.eclipse.jdt.core.Signature.toString(returnSig); org.eclipse.jdt.core.IType parentType = field.getDeclaringType(); boolean addComments = fSettings.createComments; java.lang.String lineDelim = org.eclipse.jdt.internal.corext.codemanipulation.StubUtility.getLineDelimiterUsed(parentType); int indent = org.eclipse.jdt.internal.corext.codemanipulation.StubUtility.getIndentUsed(field); java.lang.String setterName = org.eclipse.jdt.internal.corext.codemanipulation.GetterSetterUtil.getSetterName(field, null); java.lang.String[] args = new java.lang.String[]{ returnSig }; org.eclipse.jdt.core.IMethod existingSetter = org.eclipse.jdt.internal.corext.util.JavaModelUtil.findMethod(setterName, args, false, parentType); boolean doCreateSetter = ((!isFinal) || (!(querySkipFinalSetters(field)))) && ((existingSetter == null) || (querySkipExistingMethods(existingSetter))); if (doCreateSetter) { java.lang.StringBuffer buf = new java.lang.StringBuffer(); if (addComments) { java.lang.String comment = org.eclipse.jdt.ui.CodeGeneration.getMethodComment(field.getCompilationUnit(), parentType.getTypeQualifiedName('.'), setterName, new java.lang.String[]{ argname }, EMPTY, org.eclipse.jdt.core.Signature.SIG_VOID, null, java.lang.String.valueOf('\n')); if (comment != null) { buf.append(comment); buf.append('\n'); } } buf.append("public "); if (isStatic) { buf.append("static "); } buf.append("void "); buf.append(setterName); buf.append('('); buf.append(typeName); buf.append(' '); buf.append(argname); buf.append(") {\n"); if (argname.equals(fieldName)) { if (isStatic) { buf.append(parentType.getElementName()); buf.append('.'); } else { buf.append("this."); } } buf.append(fieldName); buf.append("= "); buf.append(argname); buf.append(";\n}\n"); org.eclipse.jdt.core.IJavaElement sibling = null; if (existingSetter != null) { sibling = org.eclipse.jdt.internal.corext.codemanipulation.StubUtility.findNextSibling(existingSetter); existingSetter.delete(false, null); } java.lang.String formattedContent = (org.eclipse.jdt.internal.corext.codemanipulation.StubUtility.codeFormat(buf.toString(), indent, lineDelim)) + lineDelim; fCreatedAccessors.add(parentType.createMethod(formattedContent, sibling, true, null)); } }
public static void revealInEditor(org.eclipse.ui.IEditorPart part, org.eclipse.jdt.core.IJavaElement element) { if (element == null) return; if (part instanceof org.eclipse.jdt.internal.ui.javaeditor.JavaEditor) { ((org.eclipse.jdt.internal.ui.javaeditor.JavaEditor) (part)).setSelection(element); return; } try { org.eclipse.jdt.core.ISourceRange range = null; if (element instanceof org.eclipse.jdt.core.ICompilationUnit) range = null; else if (element instanceof org.eclipse.jdt.core.IClassFile) range = null; else if (element instanceof org.eclipse.jdt.core.ILocalVariable) range = ((org.eclipse.jdt.core.ILocalVariable) (element)).getNameRange(); else if (element instanceof org.eclipse.jdt.core.IMember) range = ((org.eclipse.jdt.core.IMember) (element)).getNameRange(); else if (element instanceof org.eclipse.jdt.core.ITypeParameter) range = ((org.eclipse.jdt.core.ITypeParameter) (element)).getNameRange(); else if (element instanceof org.eclipse.jdt.core.ISourceReference) range = ((org.eclipse.jdt.core.ISourceReference) (element)).getSourceRange(); if (range != null) org.eclipse.jdt.internal.ui.javaeditor.EditorUtility.revealInEditor(part, range.getOffset(), range.getLength()); } catch (org.eclipse.jdt.core.JavaModelException e) { } }
protected void openWorkspacePreferences() { org.eclipse.jdt.internal.ui.preferences.CodeStylePreferencePage page = new org.eclipse.jdt.internal.ui.preferences.CodeStylePreferencePage(); org.eclipse.jdt.internal.ui.preferences.PreferencePageSupport.showPreferencePage(getShell(), org.eclipse.jdt.internal.ui.preferences.CodeFormatterPreferencePage.PREF_ID, page); }
public void apply(org.eclipse.jface.text.ITextViewer viewer, char trigger, int stateMask, final int offset) { try { org.eclipse.jdt.core.dom.CompilationUnit root = org.eclipse.jdt.core.dom.AST.parseCompilationUnit(fCompilationUnit, true, null, null); org.eclipse.jdt.core.dom.ASTNode nameNode = org.eclipse.jdt.internal.corext.dom.NodeFinder.perform(root, fNode.getStartPosition(), fNode.getLength()); org.eclipse.jdt.core.dom.ASTNode[] sameNodes; if (nameNode instanceof org.eclipse.jdt.core.dom.SimpleName) { sameNodes = org.eclipse.jdt.internal.corext.dom.LinkedNodeFinder.findByNode(root, ((org.eclipse.jdt.core.dom.SimpleName) (nameNode))); } else { sameNodes = new org.eclipse.jdt.core.dom.ASTNode[]{ nameNode }; } java.util.Arrays.sort(sameNodes, new java.util.Comparator() { public int compare(java.lang.Object o1, java.lang.Object o2) { return (rank(((org.eclipse.jdt.core.dom.ASTNode) (o1)))) - (rank(((org.eclipse.jdt.core.dom.ASTNode) (o2)))); } private int rank(org.eclipse.jdt.core.dom.ASTNode node) { int relativeRank = ((node.getStartPosition()) + (node.getLength())) - offset; if (relativeRank < 0) return (java.lang.Integer.MAX_VALUE) + relativeRank; else return relativeRank; } }); org.eclipse.jface.text.IDocument document = viewer.getDocument(); org.eclipse.jdt.internal.ui.text.link.LinkedPositionGroup group = new org.eclipse.jdt.internal.ui.text.link.LinkedPositionGroup(); for (int i = 0; i < (sameNodes.length); i++) { org.eclipse.jdt.core.dom.ASTNode elem = sameNodes[i]; group.createPosition(document, elem.getStartPosition(), elem.getLength(), i); } org.eclipse.jdt.internal.ui.text.link.LinkedEnvironment enviroment = new org.eclipse.jdt.internal.ui.text.link.LinkedEnvironment(); enviroment.addGroup(group); enviroment.forceInstall(); org.eclipse.jdt.internal.ui.text.link.LinkedUIControl ui = new org.eclipse.jdt.internal.ui.text.link.LinkedUIControl(enviroment, viewer); ui.setExitPosition(viewer, offset, 0, LinkedPositionGroup.NO_STOP); ui.enter(); fSelectedRegion = ui.getSelectedRegion(); } catch (org.eclipse.jface.text.BadLocationException e) { org.eclipse.jdt.internal.ui.JavaPlugin.log(e); } }
public void verifyText(org.eclipse.swt.events.VerifyEvent event) { if (!(event.doit)) return; org.eclipse.jface.text.IRegion region = fViewer.getVisibleRegion(); int offset = (event.start) + (region.getOffset()); int length = (event.end) - (event.start); if (!(fManager.anyPositionIncludes(offset, length))) leave(((org.eclipse.jdt.internal.ui.text.link.LinkedPositionUI.UNINSTALL) | (org.eclipse.jdt.internal.ui.text.link.LinkedPositionUI.COMMIT))); }
public void handle(org.eclipse.jdt.internal.corext.refactoring.base.ChangeContext context, org.eclipse.jdt.internal.corext.refactoring.base.IChange change, java.lang.Exception e) { org.eclipse.jdt.internal.ui.JavaPlugin.log(e); org.eclipse.core.runtime.IStatus status = null; if (e instanceof org.eclipse.core.runtime.CoreException) { status = ((org.eclipse.core.runtime.CoreException) (e)).getStatus(); } else { if ((e.getMessage()) == null) status = new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, org.eclipse.jdt.internal.ui.JavaPlugin.getPluginId(), org.eclipse.core.runtime.IStatus.ERROR, "", e); else status = new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, org.eclipse.jdt.internal.ui.JavaPlugin.getPluginId(), org.eclipse.core.runtime.IStatus.ERROR, e.getMessage(), e); } final org.eclipse.jface.dialogs.ErrorDialog dialog = new org.eclipse.jdt.internal.ui.refactoring.changes.ChangeExceptionHandler.RefactorErrorDialog(fParent, org.eclipse.jdt.internal.ui.refactoring.RefactoringMessages.getString("ChangeExceptionHandler.refactoring"), org.eclipse.jdt.internal.ui.refactoring.RefactoringMessages.getFormattedString("ChangeExceptionHandler.unexpected_exception", new java.lang.String[]{ change.getName() }), status, ((((org.eclipse.core.runtime.IStatus.OK) | (org.eclipse.core.runtime.IStatus.INFO)) | (org.eclipse.core.runtime.IStatus.WARNING)) | (org.eclipse.core.runtime.IStatus.ERROR))); final int[] result = new int[1]; java.lang.Runnable runnable = new java.lang.Runnable() { public void run() { result[0] = dialog.open(); } }; fParent.getDisplay().syncExec(runnable); switch (result[0]) { case org.eclipse.jface.dialogs.IDialogConstants.OK_ID : context.setTryToUndo(); case org.eclipse.jface.dialogs.IDialogConstants.CANCEL_ID : throw new org.eclipse.jdt.internal.corext.refactoring.base.ChangeAbortException(e); } }
private void handlePropertyChangeEvent(org.eclipse.jface.util.PropertyChangeEvent event) { if ((fPreferenceStore) == null) return; if ((fConfiguration) != null) fConfiguration.handlePropertyChangeEvent(event); if (org.eclipse.jdt.internal.ui.javaeditor.SemanticHighlightings.affectsEnablement(fPreferenceStore, event)) { if (isEnabled()) enable(); else disable(); } if (!(isEnabled())) return; java.lang.String property = event.getProperty(); boolean changed = false; for (int i = 0, n = fSemanticHighlightings.length; i < n; i++) { org.eclipse.jdt.internal.ui.javaeditor.SemanticHighlighting semanticHighlighting = fSemanticHighlightings[i]; java.lang.String colorKey = org.eclipse.jdt.internal.ui.javaeditor.SemanticHighlightings.getColorPreferenceKey(semanticHighlighting); if (colorKey.equals(property)) { adaptToTextForegroundChange(fHighlightings[i], event); changed = true; continue; } java.lang.String boldKey = org.eclipse.jdt.internal.ui.javaeditor.SemanticHighlightings.getBoldPreferenceKey(semanticHighlighting); if (boldKey.equals(property)) { adaptToTextStyleChange(fHighlightings[i], event, SWT.BOLD); changed = true; continue; } java.lang.String italicKey = org.eclipse.jdt.internal.ui.javaeditor.SemanticHighlightings.getItalicPreferenceKey(semanticHighlighting); if (italicKey.equals(property)) { adaptToTextStyleChange(fHighlightings[i], event, SWT.ITALIC); changed = true; continue; } java.lang.String strikethroughKey = org.eclipse.jdt.internal.ui.javaeditor.SemanticHighlightings.getStrikethroughPreferenceKey(semanticHighlighting); if (strikethroughKey.equals(property)) { adaptToTextStyleChange(fHighlightings[i], event, TextAttribute.STRIKETHROUGH); changed = true; continue; } java.lang.String underlineKey = org.eclipse.jdt.internal.ui.javaeditor.SemanticHighlightings.getUnderlinePreferenceKey(semanticHighlighting); if (underlineKey.equals(property)) { adaptToTextStyleChange(fHighlightings[i], event, TextAttribute.UNDERLINE); changed = true; continue; } java.lang.String enabledKey = org.eclipse.jdt.internal.ui.javaeditor.SemanticHighlightings.getEnabledPreferenceKey(semanticHighlighting); if (enabledKey.equals(property)) { adaptToEnablementChange(fHighlightings[i], event); changed = true; continue; } } if (changed) { if ((fReconciler) == null) { java.util.List oldpositions = new java.util.ArrayList(); fPresenter.addAllPositions(oldpositions); fPresenter.updatePresentation(null, createHardcodedPositions(), ((org.eclipse.jdt.internal.ui.javaeditor.SemanticHighlightingManager.HighlightedPosition[]) (oldpositions.toArray(new org.eclipse.jdt.internal.ui.javaeditor.SemanticHighlightingManager.HighlightedPosition[oldpositions.size()])))); } else { fReconciler.refresh(); } } }
private org.aspectj.org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding makeSourceTypeBinding(org.aspectj.org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding onType) { if (onType instanceof org.aspectj.org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding) return ((org.aspectj.org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding) (onType)); else if (onType instanceof org.aspectj.org.eclipse.jdt.internal.compiler.lookup.ParameterizedTypeBinding) { org.aspectj.org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding rb = ((org.aspectj.org.eclipse.jdt.internal.compiler.lookup.ParameterizedTypeBinding) (onType)).type; if (rb instanceof org.aspectj.org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding) return ((org.aspectj.org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding) (rb)); else throw new org.aspectj.weaver.BCException(((("In parameterized type " + onType) + ", can't handle reference binding ") + rb)); } throw new org.aspectj.weaver.BCException(("can't handle: " + onType)); }
private void writeBack(org.aspectj.weaver.bcel.BcelWorld world) { if ((getConstantPool().getSize()) > (java.lang.Short.MAX_VALUE)) { reportClassTooBigProblem(); return; } if ((annotations.size()) > 0) { for (org.aspectj.apache.bcel.classfile.annotation.AnnotationGen element : annotations) { myGen.addAnnotation(element); } } if (!(myGen.hasAttribute("org.aspectj.weaver.WeaverVersion"))) { myGen.addAttribute(org.aspectj.weaver.bcel.Utility.bcelAttribute(new org.aspectj.weaver.AjAttribute.WeaverVersionInfo(), getConstantPool())); } if ((!(world.isOverWeaving())) || (!(myGen.hasAttribute(WeaverState.AttributeName)))) { if (((myType) != null) && ((myType.getWeaverState()) != null)) { myGen.addAttribute(org.aspectj.weaver.bcel.Utility.bcelAttribute(new org.aspectj.weaver.AjAttribute.WeaverState(myType.getWeaverState()), getConstantPool())); } } addAjcInitializers(); boolean sourceDebugExtensionSupportSwitchedOn = false; if (sourceDebugExtensionSupportSwitchedOn) { calculateSourceDebugExtensionOffsets(); } int len = methodGens.size(); myGen.setMethods(Method.NoMethods); for (org.aspectj.weaver.bcel.LazyMethodGen gen : methodGens) { if (isEmptyClinit(gen)) { continue; } myGen.addMethod(gen.getMethod()); } len = fields.size(); myGen.setFields(Field.NoFields); for (int i = 0; i < len; i++) { org.aspectj.weaver.bcel.BcelField gen = fields.get(i); myGen.addField(gen.getField(cp)); } if (sourceDebugExtensionSupportSwitchedOn) { if ((inlinedFiles.size()) != 0) { if (org.aspectj.weaver.bcel.LazyClassGen.hasSourceDebugExtensionAttribute(myGen)) { world.showMessage(IMessage.WARNING, org.aspectj.weaver.WeaverMessages.format(WeaverMessages.OVERWRITE_JSR45, getFileName()), null, null); } } } fixupGenericSignatureAttribute(); }
public org.aspectj.weaver.AnnotationAJ[] getAnnotations() { realBinding.getAnnotationTagBits(); org.aspectj.org.eclipse.jdt.internal.compiler.ast.Annotation[] annos = getEclipseAnnotations(); if (annos == null) { return null; } org.aspectj.weaver.AnnotationAJ[] annoAJs = new org.aspectj.weaver.AnnotationAJ[annos.length]; for (int i = 0; i < (annos.length); i++) { annoAJs[i] = org.aspectj.ajdt.internal.compiler.lookup.EclipseAnnotationConvertor.convertEclipseAnnotation(annos[i], w, eclipseFactory); } return annoAJs; }
private static void processMembers(java.util.List members, java.io.PrintWriter writer, boolean declaringTypeIsInterface) throws org.aspectj.tools.ajdoc.DocException { for (java.util.Iterator it = members.iterator(); it.hasNext();) { org.aspectj.asm.IProgramElement member = ((org.aspectj.asm.IProgramElement) (it.next())); if (member.getKind().isType()) { if ((!(member.getParent().getKind().equals(IProgramElement.Kind.METHOD))) && (!(org.aspectj.tools.ajdoc.StructureUtil.isAnonymous(member)))) { org.aspectj.tools.ajdoc.StubFileGenerator.processTypeDeclaration(member, writer); } } else { java.lang.String formalComment = org.aspectj.tools.ajdoc.StubFileGenerator.addDeclID(member, member.getFormalComment()); writer.println(formalComment); java.lang.String signature = ""; if ((!(member.getKind().equals(IProgramElement.Kind.POINTCUT))) && (!(member.getKind().equals(IProgramElement.Kind.ADVICE)))) { signature = member.getSourceSignature(); if (member.getKind().equals(IProgramElement.Kind.ENUM_VALUE)) { if (((org.aspectj.asm.IProgramElement) (members.get(((members.indexOf(member)) + 1)))).getKind().equals(IProgramElement.Kind.ENUM_VALUE)) { signature = signature + ","; } else { signature = signature + ";"; } } } if (member.getKind().isDeclare()) { } else if (((((signature != null) && (signature != "")) && (!(member.getKind().isInterTypeMember()))) && (!(member.getKind().equals(IProgramElement.Kind.INITIALIZER)))) && (!(org.aspectj.tools.ajdoc.StructureUtil.isAnonymous(member)))) { writer.print(signature); } else { } if ((member.getKind().equals(IProgramElement.Kind.METHOD)) || (member.getKind().equals(IProgramElement.Kind.CONSTRUCTOR))) { if ((member.getParent().getKind().equals(IProgramElement.Kind.INTERFACE)) || ((signature.indexOf("abstract ")) != (-1))) { writer.println(";"); } else { writer.println(" { }"); } } else if (member.getKind().equals(IProgramElement.Kind.FIELD)) { } } } }
@java.lang.Override protected boolean accept(java.lang.String className, byte[] bytes) { if ((!(hasExcludes)) && (!(hasIncludes))) { return true; } java.lang.String fastClassName = className.replace('/', '.').replace('$', '.'); for (java.lang.String excludeStartsWithString : excludeStartsWith) { if (fastClassName.startsWith(excludeStartsWithString)) { return false; } } if (!(excludeStarDotDotStar.isEmpty())) { for (java.lang.String namePiece : excludeStarDotDotStar) { int index = fastClassName.lastIndexOf('.'); if ((fastClassName.indexOf(namePiece, (index + 1))) != (-1)) { return false; } } } if (!(excludeEndsWith.isEmpty())) { for (java.lang.String lastPiece : excludeEndsWith) { if (fastClassName.endsWith(lastPiece)) { return false; } } } if (!(excludeExactName.isEmpty())) { for (java.lang.String name : excludeExactName) { if (fastClassName.equals(name)) { return false; } } } if (!(excludeSpecial.isEmpty())) { for (java.lang.String[] entry : excludeSpecial) { java.lang.String excludeThese = entry[0]; java.lang.String exceptThese = entry[1]; if ((fastClassName.startsWith(excludeThese)) && (!(fastClassName.startsWith(exceptThese)))) { return false; } } } boolean didSomeIncludeMatching = false; if (excludeTypePattern.isEmpty()) { if (includeStar) { return true; } if (!(includeExactName.isEmpty())) { didSomeIncludeMatching = true; for (java.lang.String exactname : includeExactName) { if (fastClassName.equals(exactname)) { return true; } } } boolean fastAccept = false; for (int i = 0; i < (m_includeStartsWith.size()); i++) { didSomeIncludeMatching = true; fastAccept = fastClassName.startsWith(m_includeStartsWith.get(i)); if (fastAccept) { return true; } } if (includeTypePattern.isEmpty()) { return !didSomeIncludeMatching; } } boolean accept; try { ensureDelegateInitialized(className, bytes); org.aspectj.weaver.ResolvedType classInfo = delegateForCurrentClass.getResolvedTypeX(); for (org.aspectj.weaver.patterns.TypePattern typePattern : excludeTypePattern) { if (typePattern.matchesStatically(classInfo)) { return false; } } if (includeStar) { return true; } if (!(includeExactName.isEmpty())) { didSomeIncludeMatching = true; for (java.lang.String exactname : includeExactName) { if (fastClassName.equals(exactname)) { return true; } } } for (int i = 0; i < (m_includeStartsWith.size()); i++) { didSomeIncludeMatching = true; boolean fastaccept = fastClassName.startsWith(m_includeStartsWith.get(i)); if (fastaccept) { return true; } } accept = !didSomeIncludeMatching; for (org.aspectj.weaver.patterns.TypePattern typePattern : includeTypePattern) { accept = typePattern.matchesStatically(classInfo); if (accept) { break; } } } finally { this.bcelWorld.demote(); } return accept; }
public byte[] transform(java.lang.ClassLoader loader, java.lang.String className, java.lang.Class<?> classBeingRedefined, java.security.ProtectionDomain protectionDomain, byte[] bytes) throws java.lang.instrument.IllegalClassFormatException { if (classBeingRedefined == null) { return org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.s_preProcessor.preProcess(className, bytes, loader); } else { new java.lang.Exception((("AspectJ5 does not weave hotswapped class (" + className) + ")")).printStackTrace(); return bytes; } }
private boolean compareToExistingMembers(org.aspectj.weaver.ConcreteTypeMunger munger, java.util.Iterator existingMembers) { org.aspectj.weaver.ResolvedMember sig = munger.getSignature(); while (existingMembers.hasNext()) { org.aspectj.weaver.ResolvedMember existingMember = ((org.aspectj.weaver.ResolvedMember) (existingMembers.next())); if (existingMember.isBridgeMethod()) continue; if (org.aspectj.weaver.ResolvedType.conflictingSignature(existingMember, munger.getSignature())) { if (org.aspectj.weaver.ResolvedType.isVisible(existingMember.getModifiers(), this, munger.getAspectType())) { int c = compareMemberPrecedence(sig, existingMember); if (c < 0) { checkLegalOverride(munger.getSignature(), existingMember); return false; } else if (c > 0) { checkLegalOverride(existingMember, munger.getSignature()); continue; } else { boolean sameReturnTypes = existingMember.getReturnType().equals(sig.getReturnType()); if (sameReturnTypes) { boolean isDuplicateOfPreviousITD = false; org.aspectj.weaver.ResolvedType declaringRt = existingMember.getDeclaringType().resolve(world); org.aspectj.weaver.WeaverStateInfo wsi = declaringRt.getWeaverState(); if (wsi != null) { java.util.List mungersAffectingThisType = wsi.getTypeMungers(declaringRt); if (mungersAffectingThisType != null) { for (java.util.Iterator iterator = mungersAffectingThisType.iterator(); (iterator.hasNext()) && (!isDuplicateOfPreviousITD);) { org.aspectj.weaver.ConcreteTypeMunger ctMunger = ((org.aspectj.weaver.ConcreteTypeMunger) (iterator.next())); if ((ctMunger.getSignature().equals(existingMember)) && (ctMunger.aspectType.equals(munger.getAspectType()))) { isDuplicateOfPreviousITD = true; } } } } if (!isDuplicateOfPreviousITD) { getWorld().getMessageHandler().handleMessage(org.aspectj.bridge.MessageUtil.error(org.aspectj.weaver.WeaverMessages.format(WeaverMessages.ITD_MEMBER_CONFLICT, munger.getAspectType().getName(), existingMember), munger.getSourceLocation())); } } } } else if (isDuplicateMemberWithinTargetType(existingMember, this, sig)) { getWorld().getMessageHandler().handleMessage(org.aspectj.bridge.MessageUtil.error(org.aspectj.weaver.WeaverMessages.format(WeaverMessages.ITD_MEMBER_CONFLICT, munger.getAspectType().getName(), existingMember), munger.getSourceLocation())); } } } return true; }
public void outputClassFiles(org.eclipse.jdt.internal.compiler.CompilationResult unitResult) { if (unitResult == null) return; java.lang.String sourceFileName = new java.lang.String(unitResult.fileName); if (!((unitResult.hasErrors()) && (!(proceedOnError())))) { java.util.List unwovenClassFiles = new java.util.ArrayList(); java.util.Enumeration classFiles = unitResult.compiledTypes.elements(); while (classFiles.hasMoreElements()) { org.eclipse.jdt.internal.compiler.ClassFile classFile = ((org.eclipse.jdt.internal.compiler.ClassFile) (classFiles.nextElement())); java.lang.String filename = new java.lang.String(classFile.fileName()); filename = (filename.replace('/', java.io.File.separatorChar)) + ".class"; java.io.File destinationPath = buildConfig.getOutputDir(); if (destinationPath == null) { filename = new java.io.File(filename).getName(); filename = new java.io.File(extractDestinationPathFromSourceFile(unitResult), filename).getPath(); } else { filename = new java.io.File(destinationPath, filename).getPath(); } unwovenClassFiles.add(new org.aspectj.weaver.bcel.UnwovenClassFile(filename, classFile.getBytes())); } state.noteClassesFromFile(unitResult, sourceFileName, unwovenClassFiles); } else { state.noteClassesFromFile(null, sourceFileName, java.util.Collections.EMPTY_LIST); } }
public org.aspectj.weaver.ResolvedType getOuterClass() { if (!(isNested())) { throw new java.lang.IllegalStateException(("Can't get the outer class of non-nested type: " + (className))); } for (org.aspectj.apache.bcel.classfile.Attribute attr : javaClass.getAttributes()) { if (attr instanceof org.aspectj.apache.bcel.classfile.InnerClasses) { org.aspectj.apache.bcel.classfile.InnerClass[] innerClss = ((org.aspectj.apache.bcel.classfile.InnerClasses) (attr)).getInnerClasses(); org.aspectj.apache.bcel.classfile.ConstantPool cpool = javaClass.getConstantPool(); for (org.aspectj.apache.bcel.classfile.InnerClass innerCls : innerClss) { if (((innerCls.getInnerClassIndex()) == 0) || ((innerCls.getOuterClassIndex()) == 0)) { continue; } org.aspectj.apache.bcel.classfile.ConstantClass innerClsInfo = ((org.aspectj.apache.bcel.classfile.ConstantClass) (cpool.getConstant(innerCls.getInnerClassIndex()))); java.lang.String innerClsName = cpool.getConstantUtf8(innerClsInfo.getNameIndex()).getValue().replace('/', '.'); if ((innerClsName.compareTo(className)) == 0) { org.aspectj.apache.bcel.classfile.ConstantClass outerClsInfo = ((org.aspectj.apache.bcel.classfile.ConstantClass) (cpool.getConstant(innerCls.getOuterClassIndex()))); java.lang.String outerClsName = cpool.getConstantUtf8(outerClsInfo.getNameIndex()).getValue().replace('/', '.'); org.aspectj.weaver.UnresolvedType outer = org.aspectj.weaver.UnresolvedType.forName(outerClsName); return outer.resolve(getResolvedTypeX().getWorld()); } } } } for (org.aspectj.apache.bcel.classfile.Attribute attr : javaClass.getAttributes()) { org.aspectj.apache.bcel.classfile.ConstantPool cpool = javaClass.getConstantPool(); if (attr instanceof org.aspectj.apache.bcel.classfile.EnclosingMethod) { org.aspectj.apache.bcel.classfile.EnclosingMethod enclosingMethodAttribute = ((org.aspectj.apache.bcel.classfile.EnclosingMethod) (attr)); if ((enclosingMethodAttribute.getEnclosingClassIndex()) != 0) { org.aspectj.apache.bcel.classfile.ConstantClass outerClassInfo = enclosingMethodAttribute.getEnclosingClass(); java.lang.String outerClassName = cpool.getConstantUtf8(outerClassInfo.getNameIndex()).getValue().replace('/', '.'); org.aspectj.weaver.UnresolvedType outer = org.aspectj.weaver.UnresolvedType.forName(outerClassName); return outer.resolve(getResolvedTypeX().getWorld()); } } } int lastDollar = className.lastIndexOf('$'); java.lang.String superClassName = className.substring(0, lastDollar); org.aspectj.weaver.UnresolvedType outer = org.aspectj.weaver.UnresolvedType.forName(superClassName); return outer.resolve(getResolvedTypeX().getWorld()); }
public org.aspectj.weaver.UnresolvedType getExtraParameterType() { if (!(hasExtraParameter())) return ResolvedType.MISSING; if ((signature) instanceof org.aspectj.weaver.ResolvedMember) { if (getConcreteAspect().isAnnotationStyleAspect()) { int baseParmCnt = getBaseParameterCount(); org.aspectj.weaver.UnresolvedType[] genericParameterTypes = ((org.aspectj.weaver.ResolvedMember) (signature)).getGenericParameterTypes(); while (((baseParmCnt + 1) < (genericParameterTypes.length)) && (((genericParameterTypes[baseParmCnt].equals(AjcMemberMaker.TYPEX_JOINPOINT)) || (genericParameterTypes[baseParmCnt].equals(AjcMemberMaker.TYPEX_STATICJOINPOINT))) || (genericParameterTypes[baseParmCnt].equals(AjcMemberMaker.TYPEX_ENCLOSINGSTATICJOINPOINT)))) { baseParmCnt++; } return ((org.aspectj.weaver.ResolvedMember) (signature)).getGenericParameterTypes()[baseParmCnt]; } return ((org.aspectj.weaver.ResolvedMember) (signature)).getGenericParameterTypes()[getBaseParameterCount()]; } else { return signature.getParameterTypes()[getBaseParameterCount()]; } }
public void resolve(org.eclipse.jdt.internal.compiler.lookup.ClassScope upperScope) { if ((munger) == null) ignoreFurtherInvestigation = true; if (ignoreFurtherInvestigation) return; org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory world = org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.fromScopeLookupEnvironment(upperScope); org.aspectj.ajdt.internal.compiler.ast.ResolvedMember sig = munger.getSignature(); org.aspectj.ajdt.internal.compiler.ast.TypeX aspectType = org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.fromBinding(upperScope.referenceContext.binding); if (((sig.getReturnType()) == (ResolvedTypeX.VOID)) || ((sig.getReturnType().isArray()) && ((sig.getReturnType().getComponentType()) == (ResolvedTypeX.VOID)))) { upperScope.problemReporter().signalError(sourceStart, sourceEnd, "field type can not be void"); } if (((initialization) != null) && ((initialization) instanceof org.eclipse.jdt.internal.compiler.ast.ArrayInitializer)) { org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression aae = new org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression(); aae.initializer = ((org.eclipse.jdt.internal.compiler.ast.ArrayInitializer) (initialization)); org.eclipse.jdt.internal.compiler.lookup.ArrayBinding arrayType = ((org.eclipse.jdt.internal.compiler.lookup.ArrayBinding) (world.makeTypeBinding(sig.getReturnType()))); aae.type = org.aspectj.ajdt.internal.compiler.ast.AstUtil.makeTypeReference(arrayType.leafComponentType()); aae.sourceStart = initialization.sourceStart; aae.sourceEnd = initialization.sourceEnd; aae.dimensions = new org.eclipse.jdt.internal.compiler.ast.Expression[arrayType.dimensions]; initialization = aae; } if ((initialization) == null) { this.statements = new org.eclipse.jdt.internal.compiler.ast.Statement[]{ new org.eclipse.jdt.internal.compiler.ast.ReturnStatement(null, 0, 0) }; } else if (!(onTypeBinding.isInterface())) { org.eclipse.jdt.internal.compiler.lookup.MethodBinding writeMethod = world.makeMethodBinding(org.aspectj.ajdt.internal.compiler.ast.AjcMemberMaker.interFieldSetDispatcher(sig, aspectType)); if (java.lang.reflect.Modifier.isStatic(declaredModifiers)) { this.statements = new org.eclipse.jdt.internal.compiler.ast.Statement[]{ new org.aspectj.ajdt.internal.compiler.ast.KnownMessageSend(writeMethod, org.aspectj.ajdt.internal.compiler.ast.AstUtil.makeNameReference(writeMethod.declaringClass), new org.eclipse.jdt.internal.compiler.ast.Expression[]{ initialization }) }; } else { this.statements = new org.eclipse.jdt.internal.compiler.ast.Statement[]{ new org.aspectj.ajdt.internal.compiler.ast.KnownMessageSend(writeMethod, org.aspectj.ajdt.internal.compiler.ast.AstUtil.makeNameReference(writeMethod.declaringClass), new org.eclipse.jdt.internal.compiler.ast.Expression[]{ org.aspectj.ajdt.internal.compiler.ast.AstUtil.makeLocalVariableReference(arguments[0].binding), initialization }) }; } } else { org.eclipse.jdt.internal.compiler.lookup.MethodBinding writeMethod = world.makeMethodBinding(org.aspectj.ajdt.internal.compiler.ast.AjcMemberMaker.interFieldInterfaceSetter(sig, sig.getDeclaringType().resolve(world.getWorld()), aspectType)); if (java.lang.reflect.Modifier.isStatic(declaredModifiers)) { this.statements = new org.eclipse.jdt.internal.compiler.ast.Statement[]{ new org.aspectj.ajdt.internal.compiler.ast.KnownMessageSend(writeMethod, org.aspectj.ajdt.internal.compiler.ast.AstUtil.makeNameReference(writeMethod.declaringClass), new org.eclipse.jdt.internal.compiler.ast.Expression[]{ initialization }) }; } else { this.statements = new org.eclipse.jdt.internal.compiler.ast.Statement[]{ new org.aspectj.ajdt.internal.compiler.ast.KnownMessageSend(writeMethod, org.aspectj.ajdt.internal.compiler.ast.AstUtil.makeLocalVariableReference(arguments[0].binding), new org.eclipse.jdt.internal.compiler.ast.Expression[]{ initialization }) }; } } super.resolve(upperScope); }
private static java.lang.String[] getMethodArgumentNames(org.aspectj.apache.bcel.classfile.Method method, java.lang.String argNamesFromAnnotation, org.aspectj.weaver.bcel.AtAjAttributes.AjAttributeMethodStruct methodStruct) { if ((method.getArgumentTypes().length) == 0) { return org.aspectj.weaver.bcel.AtAjAttributes.EMPTY_STRINGS; } final int startAtStackIndex = (method.isStatic()) ? 0 : 1; final java.util.List<org.aspectj.weaver.bcel.AtAjAttributes.MethodArgument> arguments = new java.util.ArrayList<org.aspectj.weaver.bcel.AtAjAttributes.MethodArgument>(); org.aspectj.apache.bcel.classfile.LocalVariableTable lt = method.getLocalVariableTable(); if (lt != null) { org.aspectj.apache.bcel.classfile.LocalVariable[] lvt = lt.getLocalVariableTable(); for (int j = 0; j < (lvt.length); j++) { org.aspectj.apache.bcel.classfile.LocalVariable localVariable = lvt[j]; if ((localVariable.getStartPC()) == 0) { if ((localVariable.getIndex()) >= startAtStackIndex) { arguments.add(new org.aspectj.weaver.bcel.AtAjAttributes.MethodArgument(localVariable.getName(), localVariable.getIndex())); } } } if ((arguments.size()) == 0) { org.aspectj.apache.bcel.classfile.LocalVariable localVariable = lvt[0]; if ((localVariable.getStartPC()) != 0) { for (int j = 0; (j < (lvt.length)) && ((arguments.size()) < (method.getArgumentTypes().length)); j++) { localVariable = lvt[j]; if ((localVariable.getIndex()) >= startAtStackIndex) { arguments.add(new org.aspectj.weaver.bcel.AtAjAttributes.MethodArgument(localVariable.getName(), localVariable.getIndex())); } } } } } else { if (argNamesFromAnnotation != null) { java.util.StringTokenizer st = new java.util.StringTokenizer(argNamesFromAnnotation, " ,"); java.util.List<java.lang.String> args = new java.util.ArrayList<java.lang.String>(); while (st.hasMoreTokens()) { args.add(st.nextToken()); } if ((args.size()) != (method.getArgumentTypes().length)) { java.lang.StringBuffer shortString = new java.lang.StringBuffer().append(org.aspectj.weaver.bcel.AtAjAttributes.lastbit(method.getReturnType().toString())).append(" ").append(method.getName()); if ((method.getArgumentTypes().length) > 0) { shortString.append("("); for (int i = 0; i < (method.getArgumentTypes().length); i++) { shortString.append(org.aspectj.weaver.bcel.AtAjAttributes.lastbit(method.getArgumentTypes()[i].toString())); if ((i + 1) < (method.getArgumentTypes().length)) { shortString.append(","); } } shortString.append(")"); } org.aspectj.weaver.bcel.AtAjAttributes.reportError((("argNames annotation value does not specify the right number of argument names for the method '" + (shortString.toString())) + "'"), methodStruct); return org.aspectj.weaver.bcel.AtAjAttributes.EMPTY_STRINGS; } return args.toArray(new java.lang.String[]{ }); } } if ((arguments.size()) != (method.getArgumentTypes().length)) { return org.aspectj.weaver.bcel.AtAjAttributes.EMPTY_STRINGS; } java.util.Collections.sort(arguments, new java.util.Comparator() { public int compare(java.lang.Object o, java.lang.Object o1) { org.aspectj.weaver.bcel.AtAjAttributes.MethodArgument mo = ((org.aspectj.weaver.bcel.AtAjAttributes.MethodArgument) (o)); org.aspectj.weaver.bcel.AtAjAttributes.MethodArgument mo1 = ((org.aspectj.weaver.bcel.AtAjAttributes.MethodArgument) (o1)); if ((mo.indexOnStack) == (mo1.indexOnStack)) { return 0; } else if ((mo.indexOnStack) > (mo1.indexOnStack)) { return 1; } else { return -1; } } }); java.lang.String[] argumentNames = new java.lang.String[arguments.size()]; int i = 0; for (org.aspectj.weaver.bcel.AtAjAttributes.MethodArgument methodArgument : arguments) { argumentNames[(i++)] = methodArgument.name; } return argumentNames; }
@java.lang.Override public int compare(org.apache.jackrabbit.oak.plugins.document.Revision o1, org.apache.jackrabbit.oak.plugins.document.Revision o2) { if ((o1.getClusterId()) == (o2.getClusterId())) { return o1.compareRevisionTime(o2); } org.apache.jackrabbit.oak.plugins.document.Revision range1 = getRevisionSeen(o1); org.apache.jackrabbit.oak.plugins.document.Revision range2 = getRevisionSeen(o2); if ((range1 == (org.apache.jackrabbit.oak.plugins.document.Revision.RevisionComparator.FUTURE)) && (range2 == (org.apache.jackrabbit.oak.plugins.document.Revision.RevisionComparator.FUTURE))) { return o1.compareRevisionTimeThenClusterId(o2); } if ((range1 == null) && (range2 == null)) { return o1.compareRevisionTimeThenClusterId(o2); } if (range1 == null) { return -1; } else if (range2 == null) { return 1; } int comp = range1.compareRevisionTimeThenClusterId(range2); if (comp != 0) { return comp; } return java.lang.Integer.signum(((o1.getClusterId()) - (o2.getClusterId()))); }
static java.lang.String getPropertyNext(@javax.annotation.Nonnull final org.apache.jackrabbit.oak.spi.state.NodeState state, final int lane) { java.lang.String next = ""; org.apache.jackrabbit.oak.api.PropertyState ps = state.getProperty(org.apache.jackrabbit.oak.plugins.index.property.strategy.OrderedContentMirrorStoreStrategy.NEXT); if (ps != null) { next = (lane < (org.apache.jackrabbit.oak.plugins.index.property.OrderedIndex.LANES)) ? ps.getValue(Type.STRING, lane) : ""; } return next; }
protected void syncMembership(@javax.annotation.Nonnull org.apache.jackrabbit.oak.spi.security.authentication.external.ExternalIdentity external, @javax.annotation.Nonnull org.apache.jackrabbit.api.security.user.Authorizable auth, long depth) throws javax.jcr.RepositoryException { if (depth <= 0) { return; } if (org.apache.jackrabbit.oak.spi.security.authentication.external.basic.DefaultSyncContext.log.isDebugEnabled()) { org.apache.jackrabbit.oak.spi.security.authentication.external.basic.DefaultSyncContext.log.debug("Syncing membership '{}' -> '{}'", external.getExternalId().getString(), auth.getID()); } final org.apache.jackrabbit.oak.commons.DebugTimer timer = new org.apache.jackrabbit.oak.commons.DebugTimer(); java.lang.Iterable<org.apache.jackrabbit.oak.spi.security.authentication.external.ExternalIdentityRef> externalGroups; try { externalGroups = external.getDeclaredGroups(); } catch (org.apache.jackrabbit.oak.spi.security.authentication.external.ExternalIdentityException e) { org.apache.jackrabbit.oak.spi.security.authentication.external.basic.DefaultSyncContext.log.error("Error while retrieving external declared groups for '{}'", external.getId(), e); return; } timer.mark("fetching"); java.util.Map<java.lang.String, org.apache.jackrabbit.api.security.user.Group> declaredExternalGroups = new java.util.HashMap<java.lang.String, org.apache.jackrabbit.api.security.user.Group>(); java.util.Iterator<org.apache.jackrabbit.api.security.user.Group> grpIter = auth.declaredMemberOf(); while (grpIter.hasNext()) { org.apache.jackrabbit.api.security.user.Group grp = grpIter.next(); if (isSameIDP(grp)) { declaredExternalGroups.put(grp.getID(), grp); } } timer.mark("reading"); for (org.apache.jackrabbit.oak.spi.security.authentication.external.ExternalIdentityRef ref : externalGroups) { org.apache.jackrabbit.oak.spi.security.authentication.external.basic.DefaultSyncContext.log.debug("- processing membership {}", ref.getId()); org.apache.jackrabbit.oak.spi.security.authentication.external.ExternalGroup extGroup; try { org.apache.jackrabbit.oak.spi.security.authentication.external.ExternalIdentity extId = idp.getIdentity(ref); if (extId instanceof org.apache.jackrabbit.oak.spi.security.authentication.external.ExternalGroup) { extGroup = ((org.apache.jackrabbit.oak.spi.security.authentication.external.ExternalGroup) (extId)); } else { org.apache.jackrabbit.oak.spi.security.authentication.external.basic.DefaultSyncContext.log.warn("No external group found for ref '{}'.", ref.getString()); continue; } } catch (org.apache.jackrabbit.oak.spi.security.authentication.external.ExternalIdentityException e) { org.apache.jackrabbit.oak.spi.security.authentication.external.basic.DefaultSyncContext.log.warn("Unable to retrieve external group '{}' from provider.", ref.getString(), e); continue; } org.apache.jackrabbit.oak.spi.security.authentication.external.basic.DefaultSyncContext.log.debug("- idp returned '{}'", extGroup.getId()); org.apache.jackrabbit.api.security.user.Group grp; org.apache.jackrabbit.api.security.user.Authorizable a = userManager.getAuthorizable(extGroup.getId()); if (a == null) { grp = createGroup(extGroup); org.apache.jackrabbit.oak.spi.security.authentication.external.basic.DefaultSyncContext.log.debug("- created new group"); } else if ((a.isGroup()) && (isSameIDP(a))) { grp = ((org.apache.jackrabbit.api.security.user.Group) (a)); } else { org.apache.jackrabbit.oak.spi.security.authentication.external.basic.DefaultSyncContext.log.warn("Existing authorizable '{}' is not a group from this IDP '{}'.", extGroup.getId(), idp.getName()); continue; } org.apache.jackrabbit.oak.spi.security.authentication.external.basic.DefaultSyncContext.log.debug("- user manager returned '{}'", grp); syncGroup(extGroup, grp); grp.addMember(auth); org.apache.jackrabbit.oak.spi.security.authentication.external.basic.DefaultSyncContext.log.debug("- added '{}' as member to '{}'", auth, grp); declaredExternalGroups.remove(grp.getID()); if (depth > 1) { org.apache.jackrabbit.oak.spi.security.authentication.external.basic.DefaultSyncContext.log.debug("- recursively sync group membership of '{}' (depth = {}).", grp.getID(), depth); syncMembership(extGroup, grp, (depth - 1)); } else { org.apache.jackrabbit.oak.spi.security.authentication.external.basic.DefaultSyncContext.log.debug("- group nesting level for '{}' reached", grp.getID()); } } timer.mark("adding"); for (org.apache.jackrabbit.api.security.user.Group grp : declaredExternalGroups.values()) { grp.removeMember(auth); org.apache.jackrabbit.oak.spi.security.authentication.external.basic.DefaultSyncContext.log.debug("- removing member '{}' for group '{}'", auth.getID(), grp.getID()); } if (org.apache.jackrabbit.oak.spi.security.authentication.external.basic.DefaultSyncContext.log.isDebugEnabled()) { timer.mark("removing"); org.apache.jackrabbit.oak.spi.security.authentication.external.basic.DefaultSyncContext.log.debug("syncMembership({}) {}", external.getId(), timer.getString()); } }
